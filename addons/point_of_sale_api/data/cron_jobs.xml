<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <data noupdate="1">
        
        <!-- WebSocket Connection Cleanup - Every 5 minutes -->
        <record id="cron_websocket_cleanup" model="ir.cron">
            <field name="name">WebSocket Connection Cleanup</field>
            <field name="model_id" ref="model_pos_websocket_connection"/>
            <field name="state">code</field>
            <field name="code">model.cleanup_stale_connections()</field>
            <field name="interval_number">5</field>
            <field name="interval_type">minutes</field>
            <field name="numbercall">-1</field>
            <field name="active">True</field>
            <field name="user_id" ref="base.user_root"/>
        </record>
        
        <!-- Cache Warming - Every 15 minutes -->
        <record id="cron_cache_warming" model="ir.cron">
            <field name="name">POS Cache Warming</field>
            <field name="model_id" ref="model_pos_cache_warmer"/>
            <field name="state">code</field>
            <field name="code">model.warm_cache_cron()</field>
            <field name="interval_number">15</field>
            <field name="interval_type">minutes</field>
            <field name="numbercall">-1</field>
            <field name="active">True</field>
            <field name="user_id" ref="base.user_root"/>
        </record>
        
        <!-- Cache Cleanup - Every hour -->
        <record id="cron_cache_cleanup" model="ir.cron">
            <field name="name">POS Cache Cleanup</field>
            <field name="model_id" ref="model_pos_cache_warmer"/>
            <field name="state">code</field>
            <field name="code">model.cleanup_expired_cache()</field>
            <field name="interval_number">1</field>
            <field name="interval_type">hours</field>
            <field name="numbercall">-1</field>
            <field name="active">True</field>
            <field name="user_id" ref="base.user_root"/>
        </record>
        
        <!-- Order Performance Tracking - Every 10 minutes -->
        <record id="cron_order_performance_tracking" model="ir.cron">
            <field name="name">Order Performance Tracking</field>
            <field name="model_id" ref="model_pos_order_performance"/>
            <field name="state">code</field>
            <field name="code">
# Track performance for recent orders
recent_orders = env['pos.order'].search([
    ('create_date', '>=', fields.Datetime.now() - timedelta(minutes=10)),
    ('state', '!=', 'draft')
])
for order in recent_orders:
    model.track_order_performance(order)
            </field>
            <field name="interval_number">10</field>
            <field name="interval_type">minutes</field>
            <field name="numbercall">-1</field>
            <field name="active">True</field>
            <field name="user_id" ref="base.user_root"/>
        </record>
        
        <!-- Database Performance Optimization - Daily at 2 AM -->
        <record id="cron_database_optimization" model="ir.cron">
            <field name="name">Database Performance Optimization</field>
            <field name="model_id" ref="base.model_ir_cron"/>
            <field name="state">code</field>
            <field name="code">
# Run database maintenance tasks
env.cr.execute("""
    -- Cleanup old sync logs (older than 7 days)
    DELETE FROM pos_sync_log 
    WHERE created_at < NOW() - INTERVAL '7 days';
    
    -- Cleanup old payment audit logs (older than 30 days)
    DELETE FROM pos_payment_audit 
    WHERE created_at < NOW() - INTERVAL '30 days';
    
    -- Cleanup old WebSocket connections (older than 1 day)
    DELETE FROM pos_websocket_connections 
    WHERE created_at < NOW() - INTERVAL '1 day' AND is_active = FALSE;
    
    -- Update table statistics for query planner
    ANALYZE pos_order;
    ANALYZE pos_payment;
    ANALYZE product_product;
    ANALYZE pos_session;
""")
            </field>
            <field name="interval_number">1</field>
            <field name="interval_type">days</field>
            <field name="nextcall" eval="(DateTime.now() + timedelta(days=1)).replace(hour=2, minute=0, second=0)"/>
            <field name="numbercall">-1</field>
            <field name="active">True</field>
            <field name="user_id" ref="base.user_root"/>
        </record>
        
        <!-- Redis Health Check - Every 5 minutes -->
        <record id="cron_redis_health_check" model="ir.cron">
            <field name="name">Redis Health Check</field>
            <field name="model_id" ref="model_pos_cache_manager"/>
            <field name="state">code</field>
            <field name="code">
# Check Redis connectivity and log stats
try:
    from odoo.addons.point_of_sale_api.models.redis_client import redis_client
    if not redis_client.is_connected():
        redis_client.reconnect()
        _logger.warning("Redis connection lost, attempting reconnect")
    else:
        # Log cache statistics
        stats = model.get_cache_stats()
        _logger.info(f"Redis Health: {stats}")
except Exception as e:
    _logger.error(f"Redis health check failed: {e}")
            </field>
            <field name="interval_number">5</field>
            <field name="interval_type">minutes</field>
            <field name="numbercall">-1</field>
            <field name="active">True</field>
            <field name="user_id" ref="base.user_root"/>
        </record>
        
        <!-- Sync Status Monitor - Every minute for active sessions -->
        <record id="cron_sync_status_monitor" model="ir.cron">
            <field name="name">Sync Status Monitor</field>
            <field name="model_id" ref="base.model_ir_cron"/>
            <field name="state">code</field>
            <field name="code">
# Monitor sync status for active sessions
active_sessions = env['pos.session'].search([('state', '=', 'opened')])
for session in active_sessions:
    # Check for pending sync operations
    pending_syncs = env['pos.sync.log'].search([
        ('session_id', '=', session.id),
        ('synced_at', '=', False),
        ('created_at', '<', fields.Datetime.now() - timedelta(minutes=5))
    ])
    
    if pending_syncs:
        _logger.warning(f"Session {session.name} has {len(pending_syncs)} pending sync operations")
        
        # Broadcast sync warning via WebSocket
        from odoo.addons.point_of_sale_api.models.websocket import websocket_manager
        websocket_manager.broadcast_to_session(session.id, {
            'type': 'sync.warning',
            'data': {
                'pending_count': len(pending_syncs),
                'message': 'Sync operations pending, check connection'
            }
        })
            </field>
            <field name="interval_number">1</field>
            <field name="interval_type">minutes</field>
            <field name="numbercall">-1</field>
            <field name="active">True</field>
            <field name="user_id" ref="base.user_root"/>
        </record>
        
    </data>
</odoo> 