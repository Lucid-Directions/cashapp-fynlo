[{"body":"## Configuration Issue\n\n**Severity**: HIGH\n**Component**: Backend Deployment\n**File**: backend/app/core/config.py\n\n### Description\nExcellent production validation exists but ONLY runs when `ENVIRONMENT=production`.\n\n### Current Validation Checks\n✅ DEBUG mode must be False\n✅ ERROR_DETAIL_ENABLED must be False\n✅ CORS must not contain wildcard (*)\n✅ SECRET_KEY must not be default\n✅ Secret key must be >32 characters\n✅ LOG_LEVEL should not be DEBUG\n✅ Payment keys must be production keys\n\n### Required Actions\n1. **Set environment variable in DigitalOcean**:\n   `ENVIRONMENT=production`\n\n2. **Verify all production settings**:\n   - Generate strong SECRET_KEY\n   - Set proper CORS origins\n   - Use production payment keys\n   - Disable debug modes\n\n3. **Test deployment**:\n   - App should refuse to start if any check fails\n   - Monitor logs for validation errors\n\n### Example .env.production\n```\nENVIRONMENT=production\nDEBUG=false\nERROR_DETAIL_ENABLED=false\nSECRET_KEY=<64+ character random string>\nCORS_ORIGINS=https://app.fynlo.co.uk,https://fynlo.co.uk\nLOG_LEVEL=INFO\n```\n\n### Priority\nHIGH - Security checks are bypassed without proper deployment","createdAt":"2025-07-29T09:33:03Z","labels":[],"number":394,"title":"HIGH: Deploy with production configuration validation enabled"},{"body":"## Enhancement Required\n\n**Severity**: MEDIUM\n**Component**: Backend & Mobile App\n**Files**: WebSocket implementation files\n\n### Current State\n- Enhanced WebSocket manager exists with heartbeat (websocket_enhanced.py)\n- 15-second heartbeat interval configured\n- BUT: Unclear if this enhanced version is actively used\n- Mobile app lacks proper reconnection logic\n\n### Required Implementation\n\n1. **Backend**\n   - Verify enhanced WebSocket manager is active\n   - Ensure heartbeat/pong mechanism works\n   - Add WebSocket-specific rate limiting\n\n2. **Mobile App**\n   - Implement exponential backoff reconnection\n   - Queue messages during disconnection\n   - Show connection status to users\n   - Handle token refresh on reconnect\n\n### Example Implementation\n```typescript\nclass WebSocketManager {\n  private reconnectAttempts = 0;\n  private messageQueue: Message[] = [];\n  \n  async reconnect() {\n    const delay = Math.min(1000 * Math.pow(2, this.reconnectAttempts), 30000);\n    await new Promise(resolve => setTimeout(resolve, delay));\n    this.reconnectAttempts++;\n    // Attempt reconnection\n  }\n  \n  queueMessage(message: Message) {\n    if (!this.isConnected) {\n      this.messageQueue.push(message);\n    }\n  }\n}\n```\n\n### Priority\nMEDIUM - Current WebSocket stability issues affect real-time updates","createdAt":"2025-07-29T09:32:47Z","labels":[],"number":393,"title":"MEDIUM: Implement WebSocket heartbeat and reconnection logic"},{"body":"## Enhancement Required\n\n**Severity**: MEDIUM\n**Component**: Mobile App\n**Files**: Store management files\n\n### Current State\n- Basic cart persistence exists\n- No offline API call queuing\n- No conflict resolution\n- No retry mechanism\n\n### Required Implementation\n1. **Offline Queue System**\n   - Queue API calls when offline\n   - Store with timestamps and unique IDs\n   - Retry when connection restored\n\n2. **Conflict Resolution**\n   - Handle server-side changes during offline period\n   - Merge strategies for inventory, orders\n   - User notification of conflicts\n\n3. **Sync Status UI**\n   - Show pending sync count\n   - Progress indicators\n   - Error states and retry options\n\n### Recommended Approach\n```typescript\ninterface OfflineQueue {\n  id: string;\n  timestamp: number;\n  endpoint: string;\n  method: string;\n  payload: any;\n  retryCount: number;\n}\n\n// Store in AsyncStorage\n// Process queue on connection restore\n// Handle conflicts with user prompts\n```\n\n### Priority\nMEDIUM - Current offline support is unreliable","createdAt":"2025-07-29T09:32:29Z","labels":[],"number":392,"title":"MEDIUM: Implement proper offline mode with sync queue"},{"body":"## Security Issue\n\n**Severity**: HIGH\n**Component**: Backend API\n**Files**: All API endpoints\n\n### Description\nWhile the Orders API has proper multi-tenant isolation, other endpoints need verification. Each endpoint must:\n1. Check user's restaurant_id\n2. Filter data by restaurant_id\n3. Prevent cross-tenant data access\n\n### Current Status\n✅ Orders API has `verify_order_access()` function\n❓ Other endpoints need audit\n\n### Required Actions\n1. Audit ALL endpoints for restaurant_id filtering\n2. Add access verification to:\n   - Menu endpoints\n   - Customer endpoints\n   - Inventory endpoints\n   - Analytics endpoints\n   - Staff endpoints\n3. Create reusable access control decorators\n4. Add integration tests for multi-tenant isolation\n\n### Example Pattern\n```python\ndef verify_restaurant_access(resource, current_user):\n    if current_user.role \\!= 'platform_owner':\n        if str(resource.restaurant_id) \\!= str(current_user.restaurant_id):\n            raise HTTPException(403, 'Access denied')\n```\n\n### Priority\nHIGH - Potential data leaks between restaurants","createdAt":"2025-07-29T09:32:15Z","labels":[],"number":391,"title":"HIGH: Audit and fix multi-tenant isolation across all API endpoints"},{"body":"## Issue\n\n**Severity**: HIGH\n**Component**: Backend API\n**File**: backend/app/main.py\n\n### Description\nMultiple endpoints return mock/fake data instead of real data:\n- `/api/v1/employees` (lines 262-340)\n- `/api/v1/orders` (lines 355-384)\n- `/api/v1/customers` (lines 386-413)\n- `/api/v1/inventory` (lines 415-442)\n- `/api/v1/analytics/dashboard/mobile` (lines 488-525)\n- `/api/v1/schedule/week` (lines 527-565)\n\n### Impact\n- Production users see fake employee names, orders, analytics\n- Business decisions based on fake data\n- Customer confusion and trust issues\n\n### Recommended Fix\n1. Remove ALL mock endpoints\n2. Ensure proper database-driven endpoints exist\n3. If needed for demos, create a separate demo mode:\n```python\nif settings.DEMO_MODE:\n    # return mock data\nelse:\n    # return real data\n```\n\n### Priority\nHIGH - Users see fake data in production","createdAt":"2025-07-29T09:32:01Z","labels":[],"number":390,"title":"HIGH: Remove all mock data endpoints from production"},{"body":"## Security Issue\n\n**Severity**: HIGH\n**Component**: Backend API\n**File**: backend/app/main.py:125-143\n\n### Description\nCritical security middleware are commented out 'temporarily':\n- API Version Middleware\n- Security Headers Middleware (CORS, CSP, etc)\n- Mobile Compatibility Middleware\n- Rate Limiting (SlowAPI)\n- Exception handlers\n\n### Code Evidence\n```python\n# TEMPORARY: Disable complex middleware for deployment\n# app.add_middleware(APIVersionMiddleware)\n# app.add_middleware(SecurityHeadersMiddleware)\n# app.add_middleware(MobileCompatibilityMiddleware)\n# app.add_middleware(SlowAPIMiddleware)\n```\n\n### Impact\n- No rate limiting = DDoS vulnerability\n- No security headers = XSS, clickjacking risks\n- No API versioning = breaking changes affect all clients\n- No proper error handling\n\n### Recommended Fix\n1. Re-enable ALL middleware\n2. Test thoroughly in staging\n3. If performance issues, optimize the middleware, don't disable\n4. Add monitoring for middleware performance\n\n### Priority\nHIGH - Multiple security layers disabled","createdAt":"2025-07-29T09:31:47Z","labels":[],"number":389,"title":"HIGH: Re-enable all security middleware in backend"},{"body":"## Security Vulnerability\n\n**Severity**: CRITICAL\n**Component**: Web Dashboard\n**Files**: Multiple components in web-platform\n\n### Description\nMultiple dashboard components fetch ALL restaurants and data without access control:\n\n1. **BusinessManagement.tsx**: Fetches ALL restaurants\n2. **StaffManagement.tsx**: Fetches ALL restaurants and ALL staff\n3. **LocationManagement.tsx**: Fetches ALL restaurants and statistics\n\n### Impact\n- Any authenticated user can see ALL restaurant data\n- Exposes customer data, revenue, staff info across all tenants\n- Complete multi-tenant isolation failure\n\n### Evidence\nFrom web-platform/CRITICAL_SECURITY_ISSUES.md:\n```typescript\nconst { data: restaurantData } = await supabase\n  .from('restaurants')\n  .select('*')  // NO FILTERING - EXPOSES ALL RESTAURANTS\n```\n\n### Recommended Fix\n1. Add role-based filtering to ALL queries\n2. Implement Supabase Row-Level Security (RLS)\n3. For platform owners: Check isPlatformOwner before allowing all data\n4. For restaurant owners: Filter by owner_id\n5. For staff: Filter by assigned restaurant_id\n\n### Priority\nURGENT - Active data breach risk","createdAt":"2025-07-29T09:31:33Z","labels":[],"number":388,"title":"CRITICAL: Web dashboard exposes all restaurant data to any user"},{"body":"## Security Vulnerability\n\n**Severity**: CRITICAL\n**Component**: Backend API\n**File**: backend/app/main.py:205-236\n\n### Description\nA mock authentication endpoint exists with hardcoded credentials:\n- Endpoint: `/api/v1/auth/login`\n- Credential: `restaurant@fynlopos.com` / `restaurant123`\n- Returns fixed token: `mock_token_12345`\n\n### Impact\n- Complete authentication bypass in production\n- Anyone can login with these credentials\n- Full access to restaurant data\n\n### Recommended Fix\n1. DELETE this endpoint immediately\n2. Use proper Supabase authentication\n3. If needed for testing, gate behind environment check:\n```python\nif settings.ENVIRONMENT == 'development':\n    # mock endpoint here\n```\n\n### Code Location\nbackend/app/main.py lines 205-236\n\n### Priority\nURGENT - This is a complete auth bypass","createdAt":"2025-07-29T09:31:17Z","labels":[],"number":387,"title":"CRITICAL: Remove mock authentication endpoint from production"},{"body":"## Security Vulnerability\n\n**Severity**: CRITICAL\n**Component**: Mobile App\n**File**: CashApp-iOS/CashAppPOS/App.tsx:65\n\n### Description\nThe SumUp API secret key is hardcoded directly in the mobile app source code:\n```typescript\nconst sumUpInitialized = await sumUpService.initialize('sup_sk_XqquMi732f2WDCqvnkV4xoVxx54oGAQRU');\n```\n\n### Impact\n- Attackers can decompile the app and extract the API key\n- The key can be used to make unauthorized API calls\n- Potential financial loss and data breach\n\n### Recommended Fix\n1. Remove the hardcoded key immediately\n2. Store the key in backend environment variables\n3. Create an endpoint to initialize payment services server-side\n4. Or use a secure configuration service\n\n### Priority\nMust be fixed before any production release","createdAt":"2025-07-29T09:31:03Z","labels":[],"number":386,"title":"CRITICAL: Remove hardcoded SumUp API key from mobile app"},{"body":"## Problem\nThe React Native frontend has absolutely no test coverage or testing infrastructure.\n\n## Current State\n- **Test Coverage**: 0%\n- **Test Files**: None found\n- **Jest Configuration**: Missing\n- **Test Scripts**: Not configured in package.json\n\n## Missing Components\n1. **Jest Configuration**\n   - No jest.config.js\n   - No test setup files\n   - No mock configurations\n\n2. **Test Infrastructure**\n   - No component tests\n   - No integration tests\n   - No snapshot tests\n   - No API mock setup\n\n3. **Critical Untested Areas**\n   - Authentication flows\n   - Payment processing\n   - Order management\n   - WebSocket connections\n   - Data synchronization\n\n## Impact\n- No regression testing\n- Bugs reach production\n- No confidence in refactoring\n- Security vulnerabilities go undetected\n\n## Recommended Setup\n```json\n// package.json\n{\n  \"scripts\": {\n    \"test\": \"jest\",\n    \"test:watch\": \"jest --watch\",\n    \"test:coverage\": \"jest --coverage\"\n  },\n  \"jest\": {\n    \"preset\": \"react-native\",\n    \"setupFilesAfterEnv\": [\"@testing-library/jest-native/extend-expect\"],\n    \"transformIgnorePatterns\": [\n      \"node_modules/(?!(react-native|@react-native|@react-navigation)/)\",\n    ]\n  }\n}\n```\n\n## Priority Tests Needed\n1. Authentication flow (login/logout)\n2. Order creation and submission\n3. Payment processing\n4. WebSocket connection handling\n5. Offline mode functionality\n\n## Benefits of Testing\n- Catch bugs before production\n- Confidence in deployments\n- Documentation through tests\n- Faster development cycle\n\nPriority: **HIGH** - Essential for production readiness","createdAt":"2025-07-28T10:54:41Z","labels":[],"number":365,"title":"Frontend: Zero test coverage - No testing infrastructure"},{"body":"## 🚨 CRITICAL TEST COVERAGE ISSUE\n\n### Current State\n- **Backend Coverage**: <20% (70% of tests have import errors)\n- **Frontend Coverage**: 0% (No test infrastructure)\n- **Security Test Coverage**: 0% (Until manually created)\n\n### Impact on Recent Deployment\nThe lack of tests **directly caused** the deployment failure:\n- WebSocket authentication bypass went undetected\n- Multi-tenant isolation vulnerabilities missed\n- Undefined variable bugs not caught\n- No regression testing for security fixes\n\n### Missing Critical Tests\n1. **WebSocket Security** (0% coverage)\n   - Authentication/authorization\n   - Rate limiting\n   - Connection management\n   - Message validation\n\n2. **Multi-tenant Isolation** (0% coverage)\n   - Cross-restaurant access prevention\n   - Data isolation verification\n   - Permission boundaries\n\n3. **Input Validation** (0% coverage)\n   - SQL injection prevention\n   - XSS protection\n   - Command injection blocking\n\n4. **Frontend** (0% coverage)\n   - No Jest configuration\n   - No test files\n   - No component tests\n   - No integration tests\n\n### Test Infrastructure Issues\n- 70% of backend tests fail due to import errors\n- Missing `app/core/response_helper.py`\n- No pytest configuration\n- No CI/CD test execution\n\n### Files Created to Address Issues\n- `backend/tests/test_websocket_security.py` (11 scenarios)\n- `backend/tests/test_multitenant_isolation.py` (10 scenarios)\n- `backend/app/core/response_helper.py`\n- `backend/pytest.ini`\n- `backend/run_tests.sh`\n\n### Recommended Actions\n1. **Immediate**: Fix all import errors in existing tests\n2. **Before Next Deploy**: Achieve minimum 60% coverage\n3. **This Week**: Add security test suite\n4. **This Sprint**: Set up frontend testing infrastructure\n\n### Deployment Criteria\nDO NOT DEPLOY until:\n- [ ] All security tests pass\n- [ ] Backend coverage >60%\n- [ ] Frontend has basic test infrastructure\n- [ ] CI/CD runs tests on every PR\n\nPriority: **CRITICAL** - Blocking safe deployments","createdAt":"2025-07-28T10:54:24Z","labels":[],"number":364,"title":"CRITICAL: Test Coverage <20% - No Security Tests"},{"body":"## Problem\nWebSocket connections can remain open for extended periods, but there's no mechanism to refresh authentication tokens before they expire.\n\n## Current Behavior\n- Tokens expire after a fixed period\n- No automatic refresh mechanism\n- Connection drops when token expires\n- User must manually reconnect\n\n## Required Features\n1. **Token Expiry Tracking**: Monitor token expiration time\n2. **Proactive Refresh**: Refresh tokens before expiry (e.g., 5 minutes before)\n3. **Seamless Update**: Update connection auth without dropping\n4. **Fallback**: Graceful reconnection if refresh fails\n\n## Implementation Approach\n```python\nasync def refresh_token_if_needed(connection: WebSocketConnection):\n    \"\"\"Check and refresh token if close to expiry\"\"\"\n    if connection.token_expires_in < timedelta(minutes=5):\n        new_token = await refresh_auth_token(connection.refresh_token)\n        if new_token:\n            connection.update_token(new_token)\n            await connection.send_json({\n                \"type\": \"token_refreshed\",\n                \"token\": new_token\n            })\n```\n\n## Benefits\n- Improved user experience (no unexpected disconnections)\n- Better security (tokens refreshed regularly)\n- Reduced reconnection overhead\n\n## Priority\nMedium - Important for production user experience","createdAt":"2025-07-28T10:45:16Z","labels":[],"number":363,"title":"WebSocket: Implement automatic token refresh for long-lived connections"},{"body":"## Problem\nWhile the frontend has exponential backoff for reconnection, the backend WebSocket implementation lacks this feature for server-side reconnection attempts.\n\n## Current State\n- Frontend: Has exponential backoff implemented\n- Backend: Missing exponential backoff logic\n\n## Required Implementation\n```python\nclass ExponentialBackoff:\n    def __init__(self, base_delay=1, max_delay=60, factor=2):\n        self.base_delay = base_delay\n        self.max_delay = max_delay\n        self.factor = factor\n        self.attempt = 0\n    \n    def get_delay(self):\n        delay = min(self.base_delay * (self.factor ** self.attempt), self.max_delay)\n        self.attempt += 1\n        return delay\n    \n    def reset(self):\n        self.attempt = 0\n```\n\n## Impact\n- Potential connection storms during network issues\n- Unnecessary server load from rapid reconnection attempts\n- Poor resilience to temporary network failures\n\n## Priority\nMedium - Important for production stability","createdAt":"2025-07-28T10:45:02Z","labels":[],"number":362,"title":"WebSocket: Missing exponential backoff for backend reconnection"},{"body":"## 🚨 CRITICAL SECURITY: MULTI-TENANT ISOLATION BREACH\n\n### Problem\nInsufficient validation of restaurant ownership and access control allows potential cross-tenant data access.\n\n### Vulnerability Details\n1. **Platform owner determination may rely on email domain checks**\n2. **Insufficient restaurant_id validation in API endpoints**\n3. **WebSocket connections not properly isolated by tenant**\n\n### Impact\n- Users from one restaurant could access another restaurant's data\n- Order information leakage between tenants\n- Menu and pricing exposure\n- Customer data breach risk\n\n### Vulnerable Patterns\n```python\n# Insufficient check - only validates user exists, not restaurant ownership\nif user.role == \"platform_owner\":\n    # Platform owners have access to all restaurants\n    pass\nelif user.restaurant_id \\!= restaurant_id:\n    # This check can be bypassed\n    pass\n```\n\n### Required Security Model\n```python\n# Proper multi-tenant validation\ndef validate_restaurant_access(user: User, restaurant_id: UUID) -> bool:\n    # Platform owners need explicit permission model\n    if user.role == \"platform_owner\":\n        return user.has_platform_permission(\"access_all_restaurants\")\n    \n    # Check user belongs to restaurant\n    if user.restaurant_id \\!= restaurant_id:\n        return False\n        \n    # Check restaurant is active\n    restaurant = db.query(Restaurant).filter(\n        Restaurant.id == restaurant_id,\n        Restaurant.is_active == True\n    ).first()\n    \n    return restaurant is not None\n```\n\n### Affected Components\n- All API endpoints handling restaurant-specific data\n- WebSocket connections\n- Database queries without proper tenant filtering\n- File uploads and media access\n\n### Recommendations\n1. Implement row-level security in PostgreSQL\n2. Add tenant validation middleware\n3. Use SQL views with tenant filtering\n4. Add comprehensive access control tests\n5. Audit all database queries for tenant isolation\n\n### Test Cases Required\n```python\ndef test_cross_tenant_access_denied():\n    # User from restaurant A tries to access restaurant B data\n    # Should be denied at all levels\n    \ndef test_platform_owner_permissions():\n    # Verify platform owners have controlled access\n    # Not automatic access to all data\n```\n\n### Priority\n**CRITICAL** - Multi-tenant isolation is fundamental for SaaS security","createdAt":"2025-07-28T10:38:48Z","labels":[],"number":361,"title":"CRITICAL: Multi-tenant Isolation Vulnerability - Restaurant Data Access"},{"body":"## 🔒 SQL INJECTION VULNERABILITY\n\n### Problem\nThe `sanitize_string` function in `/backend/app/core/validation.py` doesn't properly escape SQL-specific patterns, leaving the application vulnerable to SQL injection attacks.\n\n### Current Implementation\n```python\ndef sanitize_string(text: str, max_length: int = 1000) -> str:\n    if not text:\n        return \"\"\n    # Insufficient - misses SQL comment sequences and keywords\n    cleaned = re.sub(r'[<>\"\\';()&+`|\\\\*=$]', '', text)\n    return cleaned[:max_length].strip()\n```\n\n### Missing Protections\n- SQL comment sequences: `--`, `/*`, `*/`\n- SQL keywords: `UNION`, `SELECT`, `DROP`, `INSERT`, `UPDATE`, `DELETE`\n- Type casting: `CAST`, `CONVERT`\n- Hex encoding: `0x`, `\\x`\n- Time-based attacks: `SLEEP`, `WAITFOR`\n\n### Vulnerable Areas\n1. Order notes and special instructions\n2. Customer names and addresses\n3. Search queries\n4. Any user-provided text input\n\n### Example Attack Vectors\n```sql\n-- Time-based blind SQL injection\n'; WAITFOR DELAY '00:00:05'--\n\n-- Union-based injection\n' UNION SELECT * FROM users--\n\n-- Boolean-based blind injection\n' OR '1'='1\n```\n\n### Recommended Fix\n```python\n# Option 1: Enhanced sanitization\ndef sanitize_string(text: str, max_length: int = 1000) -> str:\n    if not text:\n        return \"\"\n    \n    # Remove SQL comment sequences\n    text = re.sub(r'(--|/\\*|\\*/)', '', text)\n    \n    # Remove dangerous SQL keywords (case-insensitive)\n    sql_keywords = ['UNION', 'SELECT', 'DROP', 'INSERT', 'UPDATE', 'DELETE', \n                    'EXEC', 'EXECUTE', 'CAST', 'CONVERT', 'WAITFOR', 'SLEEP']\n    for keyword in sql_keywords:\n        text = re.sub(rf'\\b{keyword}\\b', '', text, flags=re.IGNORECASE)\n    \n    # Original character sanitization\n    cleaned = re.sub(r'[<>\"\\';()&+`|\\\\*=$]', '', text)\n    \n    return cleaned[:max_length].strip()\n\n# Option 2: BEST PRACTICE - Use parameterized queries exclusively\n# Never concatenate user input into SQL strings\n```\n\n### Priority\n**HIGH** - SQL injection is a critical vulnerability\n\n### Testing Required\n- Automated SQL injection testing suite\n- Manual penetration testing\n- Input fuzzing with sqlmap","createdAt":"2025-07-28T10:38:27Z","labels":[],"number":360,"title":"HIGH SECURITY: SQL Injection Risk - Insufficient Input Sanitization"},{"body":"## 🔒 HIGH SEVERITY SECURITY ISSUE\n\n### Problem\nRaw exception messages and stack traces are being sent directly to WebSocket clients, exposing sensitive internal information.\n\n### Affected Areas\n- All WebSocket error handlers in `/backend/app/api/v1/endpoints/websocket.py`\n- API error responses\n\n### Examples of Information Disclosure\n```python\n# Exposes internal error details\nawait websocket.send_text(json.dumps({\n    \"type\": \"error\",\n    \"message\": f\"Kitchen message processing error: {str(e)}\"\n}))\n\n# Exposes database schema\nexcept IntegrityError as e:\n    await websocket.send_text(json.dumps({\n        \"type\": \"error\",\n        \"message\": f\"Database integrity error: {str(e)}\"\n    }))\n```\n\n### Information Leaked\n- Database table names and schema\n- Internal file paths\n- Server configuration details\n- SQL query structures\n- Third-party service errors\n\n### Security Impact\n- Aids attackers in reconnaissance\n- Reveals system architecture\n- Exposes potential attack vectors\n- May include sensitive data in errors\n\n### Fix Required\n```python\n# Log detailed error server-side\nlogger.error(f\"Kitchen message processing error: {str(e)}\", exc_info=True)\n\n# Send generic message to client\nawait websocket.send_text(json.dumps({\n    \"type\": \"error\",\n    \"message\": \"An error occurred processing your request\",\n    \"error_code\": \"KITCHEN_PROCESSING_ERROR\"\n}))\n```\n\n### Recommendations\n1. Implement centralized error handling\n2. Create error code mapping system\n3. Log all errors server-side with full details\n4. Send only generic messages to clients\n5. Add error monitoring/alerting\n\n### Priority\n**HIGH** - Fix before production deployment","createdAt":"2025-07-28T10:38:05Z","labels":[],"number":359,"title":"HIGH SECURITY: Information Disclosure via Detailed Error Messages"},{"body":"## Problem\nThe backend service (cashapp-fynlo) is showing 4 replicas ready when only 2 are desired in the configuration.\n\n## Current State\n- Desired replicas: 2\n- Ready replicas: 4\n- Instance size: apps-s-1vcpu-1gb\n- Instance count configured: 2\n\n## Potential Issues\n- Extra instances consuming resources unnecessarily\n- Possible deployment scaling issue\n- May indicate stale instances from previous deployments\n\n## Recommended Actions\n1. Verify actual running instances in DigitalOcean App Platform\n2. Check if old instances are not being properly terminated\n3. Review auto-scaling configuration\n4. Manually scale down if necessary\n\nPriority: Medium","createdAt":"2025-07-28T10:32:18Z","labels":[],"number":356,"title":"Backend service showing incorrect replica count (4 ready vs 2 desired)"}]
