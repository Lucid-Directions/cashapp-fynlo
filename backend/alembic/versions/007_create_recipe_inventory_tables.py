"""Create recipe, inventory ledger tables and update inventory table

Revision ID: 007
Revises: e8f9d5c7b2a1
Create Date: 2024-07-29 10:00:00.000000

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import logging

logger = logging.getLogger(__name__)


# revision identifiers, used by Alembic.
revision = '007'
down_revision = 'e8f9d5c7b2a1' # Ensure this points to the latest existing migration
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('inventory',
    sa.Column('sku', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('qty_g', sa.Integer(), nullable=False, server_default="0"),
    sa.Column('par_level_g', sa.Integer(), nullable=True, server_default="0"),
    sa.Column('unit', sa.String(), nullable=True, server_default="grams"), # Assuming unit, e.g., grams, ml, pcs
    sa.Column('cost_per_unit', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('supplier', sa.String(), nullable=True),
    sa.Column('last_updated', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('sku')
    )

    op.create_table('recipe',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('item_id', sa.Integer(), nullable=False), # Assuming item_id refers to Product.id
    sa.Column('ingredient_sku', sa.String(), nullable=False),
    sa.Column('qty_g', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['ingredient_sku'], ['inventory.sku'], ),
    sa.ForeignKeyConstraint(['item_id'], ['products.id'], ), # Assuming 'products' table and 'id' column
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('item_id', 'ingredient_sku', name='uq_recipe_item_ingredient')
    )

    op.create_table('inventory_ledger',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('sku', sa.String(), nullable=False),
    sa.Column('delta_g', sa.Integer(), nullable=False),
    sa.Column('source', sa.String(length=50), nullable=False), # e.g., 'order', 'manual_stock_add', 'initial_import'
    sa.Column('source_id', sa.String(), nullable=True), # e.g., order_id, user_id (for manual entry), import_batch_id
    sa.Column('ts', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['sku'], ['inventory.sku'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_inventory_ledger_sku'), 'inventory_ledger', ['sku'], unique=False)
    op.create_index(op.f('ix_inventory_ledger_ts'), 'inventory_ledger', ['ts'], unique=False)

    # Update existing inventory table if it exists, otherwise the create_table above handles it.
    # This is a defensive measure. Ideally, one would check if 'inventory' table exists first.
    # However, Alembic handles this by creating if not exists, or you can use context manager.
    # For simplicity, assuming 'inventory' might need 'par_level_g' added if it wasn't created fresh.
    # This might be redundant if 'inventory' table is always created by this migration.
    # Consider removing if 'inventory' is guaranteed to be new.
    try:
        with op.batch_alter_table('inventory') as batch_op:
            batch_op.add_column(sa.Column('par_level_g', sa.Integer(), nullable=True, server_default="0"))
    except Exception as e:
        # This will fail if the table was just created, which is fine.
        logger.info(f"Could not alter inventory (likely already created with par_level_g): {e}")

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_inventory_ledger_ts'), table_name='inventory_ledger')
    op.drop_index(op.f('ix_inventory_ledger_sku'), table_name='inventory_ledger')
    op.drop_table('inventory_ledger')
    op.drop_table('recipe')
    # Selectively drop par_level_g if it was added by this migration
    # This is complex as the table might have existed before.
    # If 'inventory' table was created by this migration, then simply drop it.
    # For now, assuming 'inventory' might have existed and we only added 'par_level_g'.
    try:
        with op.batch_alter_table('inventory') as batch_op:
            batch_op.drop_column('par_level_g')
    except Exception as e:
         logger.info(f"Could not drop par_level_g from inventory (table might be dropped or column not exist): {e}")

    # If inventory table itself was created by this migration, uncomment next line
    # op.drop_table('inventory')
    # ### end Alembic commands ###
