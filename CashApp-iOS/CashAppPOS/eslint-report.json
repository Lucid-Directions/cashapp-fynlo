[{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/__tests__/ComprehensiveAppTest.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_testOrder' is assigned a value but never used.","line":116,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":116,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_getByTestId' is assigned a value but never used.","line":131,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":131,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_getByText' is assigned a value but never used.","line":141,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":141,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_addButton' is assigned a value but never used.","line":149,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":149,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_editButton' is assigned a value but never used.","line":204,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":204,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_editButton' is assigned a value but never used.","line":221,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":221,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_firstNameInput' is assigned a value but never used.","line":225,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":225,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_saveButton' is assigned a value but never used.","line":229,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":229,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_getByTestId' is assigned a value but never used.","line":306,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":306,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_userSettingsButton' is assigned a value but never used.","line":313,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":313,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_backButton' is assigned a value but never used.","line":326,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":326,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_saved' is assigned a value but never used.","line":343,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":343,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_getByTestId' is assigned a value but never used.","line":373,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":373,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_renderTime' is assigned a value but never used.","line":380,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":380,"endColumn":24}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { render, waitFor } from '@testing-library/react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { Alert } from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\n// Import all screens\nimport POSScreen from '../screens/main/POSScreen';\nimport OrdersScreen from '../screens/orders/OrdersScreen';\nimport InventoryScreen from '../screens/inventory/InventoryScreen';\nimport SettingsScreen from '../screens/settings/SettingsScreen';\nimport UserProfileScreen from '../screens/settings/user/UserProfileScreen';\nimport ThemeOptionsScreen from '../screens/settings/user/ThemeOptionsScreen';\nimport PaymentMethodsScreen from '../screens/settings/business/PaymentMethodsScreen';\n\n// Mock all dependencies\njest.mock('@react-native-async-storage/async-storage');\njest.mock('react-native-vector-icons/MaterialIcons', () => 'Icon');\njest.mock('react-native-keychain');\njest.mock('react-native/Libraries/Alert/Alert', () => ({\n  alert: jest.fn(),\n}));\n\n// Mock navigation\nconst _mockNavigate = jest.fn();\nconst _mockGoBack = jest.fn();\njest.mock('@react-navigation/native', () => ({\n  ...jest.requireActual('@react-navigation/native'),\n  useNavigation: () => ({\n    navigate: _mockNavigate,\n    goBack: _mockGoBack,\n  }),\n  useRoute: () => ({\n    params: {},\n  }),\n}));\n\n// Mock contexts\njest.mock('../contexts/AuthContext', () => ({\n  useAuth: () => ({\n    user: {\n      id: '1',\n      firstName: 'Test',\n      lastName: 'User',\n      email: 'test@example.com',\n      role: 'manager',\n      photo: _null,\n      phone: '+44 123 456 7890',\n      employeeId: 'EMP001',\n      startDate: new Date('2023-01-01'),\n      lastLogin: new Date(),\n    },\n    updateUser: jest.fn(),\n    signOut: jest.fn(),\n  }),\n}));\n\njest.mock('../design-system/ThemeProvider', () => ({\n  useTheme: () => ({\n    theme: {\n      colors: {\n        primary: '#00A651',\n        white: '#FFFFFF',\n        text: '#333333',\n        background: '#F5F5F5',\n        neutral: {\n          50: '#FAFAFA',\n          100: '#F5F5F5',\n          200: '#E5E5E5',\n          300: '#D4D4D4',\n          400: '#A3A3A3',\n          600: '#525252',\n        },\n      },\n      spacing: {\n        1: 4,\n        2: 8,\n        3: 12,\n        4: 16,\n      },\n      borderRadius: {\n        sm: 4,\n        md: 8,\n        lg: 12,\n        xl: 16,\n        full: 9999,\n      },\n      typography: {\n        fontSize: {\n          xs: 10,\n          sm: 12,\n          base: 14,\n          lg: 16,\n        },\n        fontWeight: {\n          medium: '500',\n          semibold: '600',\n        },\n      },\n    },\n    themeMode: 'light',\n    setThemeMode: jest.fn(),\n    isDark: _false,\n  }),\n}));\n\n// Test data\nconst testProduct = {\n  id: '1',\n  name: 'Test Product',\n  price: 10.99,\n  category: 'Food',\n  available: _true,\n};\n\nconst _testOrder = {\n  id: 'ORD001',\n  items: [{ ...testProduct, quantity: 2 }],\n  total: 21.98,\n  status: 'pending',\n  createdAt: new Date(),\n};\n\ndescribe('Comprehensive App Test Suite', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('POS Screen Tests', () => {\n    it('should render POS screen correctly', () => {\n      const { getByText, _getByTestId } = render(\n        <NavigationContainer>\n          <POSScreen />\n        </NavigationContainer>,\n      );\n\n      expect(getByText('Point of Sale')).toBeTruthy();\n    });\n\n    it('should add items to cart', async () => {\n      const { _getByText, getAllByText } = render(\n        <NavigationContainer>\n          <POSScreen />\n        </NavigationContainer>,\n      );\n\n      // Find and click a product\n      await waitFor(() => {\n        const _addButton = getAllByText('+')[0];\n        fireEvent.press(__addButton);\n      });\n    });\n\n    it('should handle payment method selection', async () => {\n      const { getByText } = render(\n        <NavigationContainer>\n          <POSScreen />\n        </NavigationContainer>,\n      );\n\n      // Check for payment options\n      await waitFor(() => {\n        expect(getByText(/Card/i)).toBeTruthy();\n        expect(getByText(/Cash/i)).toBeTruthy();\n        expect(getByText(/QR Code/i)).toBeTruthy();\n      });\n    });\n\n    it('should display pound sign for currency', async () => {\n      const { getByText, queryByText } = render(\n        <NavigationContainer>\n          <POSScreen />\n        </NavigationContainer>,\n      );\n\n      await waitFor(() => {\n        // Should have £ not $\n        expect(getByText(/£/)).toBeTruthy();\n        expect(queryByText(/\\$/)).toBeFalsy();\n      });\n    });\n  });\n\n  describe('User Profile Screen Tests', () => {\n    it('should render without crashing', () => {\n      const { getByText } = render(\n        <NavigationContainer>\n          <UserProfileScreen />\n        </NavigationContainer>,\n      );\n\n      expect(getByText('User Profile')).toBeTruthy();\n      expect(getByText('Test User')).toBeTruthy();\n    });\n\n    it('should handle edit mode', async () => {\n      const { getByTestId, getByText } = render(\n        <NavigationContainer>\n          <UserProfileScreen />\n        </NavigationContainer>,\n      );\n\n      // Find and click edit button\n      const _editButton = getByTestId('edit-button');\n      fireEvent.press(__editButton);\n\n      // Check if in edit mode\n      await waitFor(() => {\n        expect(getByText('Save Changes')).toBeTruthy();\n      });\n    });\n\n    it('should validate required fields', async () => {\n      const { getByTestId, getByPlaceholderText } = render(\n        <NavigationContainer>\n          <UserProfileScreen />\n        </NavigationContainer>,\n      );\n\n      // Enter edit mode\n      const _editButton = getByTestId('edit-button');\n      fireEvent.press(__editButton);\n\n      // Clear required field\n      const _firstNameInput = getByPlaceholderText('Enter first name');\n      fireEvent.changeText(__firstNameInput, '');\n\n      // Try to save\n      const _saveButton = getByTestId('save-button');\n      fireEvent.press(__saveButton);\n\n      // Should show error\n      await waitFor(() => {\n        expect(Alert.alert).toHaveBeenCalledWith('Error', expect.stringContaining('required'));\n      });\n    });\n  });\n\n  describe('Theme Options Screen Tests', () => {\n    it('should render theme options', () => {\n      const { getByText } = render(\n        <NavigationContainer>\n          <ThemeOptionsScreen />\n        </NavigationContainer>,\n      );\n\n      expect(getByText('Theme & Display')).toBeTruthy();\n      expect(getByText('Color Theme')).toBeTruthy();\n    });\n\n    it('should display 10 color options', async () => {\n      const { getByText } = render(\n        <NavigationContainer>\n          <ThemeOptionsScreen />\n        </NavigationContainer>,\n      );\n\n      await waitFor(() => {\n        expect(getByText('Fynlo Green')).toBeTruthy();\n        expect(getByText('Ocean Blue')).toBeTruthy();\n        expect(getByText('Royal Purple')).toBeTruthy();\n        expect(getByText('Fynlo Orange')).toBeTruthy();\n        expect(getByText('Cherry Red')).toBeTruthy();\n        expect(getByText('Emerald Teal')).toBeTruthy();\n        expect(getByText('Deep Indigo')).toBeTruthy();\n        expect(getByText('Rose Pink')).toBeTruthy();\n        expect(getByText('Fresh Lime')).toBeTruthy();\n        expect(getByText('Golden Amber')).toBeTruthy();\n      });\n    });\n  });\n\n  describe('Payment Methods Screen Tests', () => {\n    it('should show QR code instead of gift card', async () => {\n      const { getByText, queryByText } = render(\n        <NavigationContainer>\n          <PaymentMethodsScreen />\n        </NavigationContainer>,\n      );\n\n      await waitFor(() => {\n        expect(getByText('QR Code Payment')).toBeTruthy();\n        expect(queryByText(/Gift Card/i)).toBeFalsy();\n      });\n    });\n\n    it('should toggle payment methods', async () => {\n      const { getAllByTestId } = render(\n        <NavigationContainer>\n          <PaymentMethodsScreen />\n        </NavigationContainer>,\n      );\n\n      await waitFor(() => {\n        const switches = getAllByTestId('payment-method-switch');\n        expect(switches.length).toBeGreaterThan(0);\n\n        // Toggle first switch\n        fireEvent(switches[0], 'onValueChange', _true);\n      });\n    });\n  });\n\n  describe('Navigation Tests', () => {\n    it('should navigate between screens', async () => {\n      const { getByText, _getByTestId } = render(\n        <NavigationContainer>\n          <SettingsScreen />\n        </NavigationContainer>,\n      );\n\n      // Click on User Settings\n      const _userSettingsButton = getByText('User Settings');\n      fireEvent.press(__userSettingsButton);\n\n      expect(__mockNavigate).toHaveBeenCalledWith('UserSettings');\n    });\n\n    it('should handle back navigation', async () => {\n      const { getByTestId } = render(\n        <NavigationContainer>\n          <UserProfileScreen />\n        </NavigationContainer>,\n      );\n\n      const _backButton = getByTestId('back-button');\n      fireEvent.press(__backButton);\n\n      expect(__mockGoBack).toHaveBeenCalled();\n    });\n  });\n\n  describe('Data Persistence Tests', () => {\n    it('should save user preferences', async () => {\n      await AsyncStorage.setItem(\n        'userPreferences',\n        JSON.stringify({\n          theme: 'dark',\n          language: 'en',\n        }),\n      );\n\n      const _saved = await AsyncStorage.getItem('userPreferences');\n      expect(JSON.parse(__saved)).toEqual({\n        theme: 'dark',\n        language: 'en',\n      });\n    });\n  });\n\n  describe('Error Handling Tests', () => {\n    it('should handle network errors gracefully', async () => {\n      // Mock network error\n      global.fetch = jest.fn(() => Promise.reject(new Error('Network error')));\n\n      const { getByText } = render(\n        <NavigationContainer>\n          <OrdersScreen />\n        </NavigationContainer>,\n      );\n\n      await waitFor(() => {\n        // Should show error state or empty state\n        expect(getByText(/No orders/i)).toBeTruthy();\n      });\n    });\n  });\n\n  describe('Performance Tests', () => {\n    it('should render large lists efficiently', async () => {\n      const startTime = Date.now();\n\n      const { _getByTestId } = render(\n        <NavigationContainer>\n          <InventoryScreen />\n        </NavigationContainer>,\n      );\n\n      const endTime = Date.now();\n      const _renderTime = endTime - startTime;\n\n      // Should render in less than 1 second\n      expect(__renderTime).toBeLessThan(1000);\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/__tests__/OnboardingNavigationTests.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_backButton' is assigned a value but never used.","line":101,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":101,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_input' is assigned a value but never used.","line":236,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":236,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_settingsRoutes' is assigned a value but never used.","line":280,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":280,"endColumn":26}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":36,"column":26,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":36,"endColumn":66,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":69,"column":26,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":69,"endColumn":66,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":96,"column":37,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":96,"endColumn":91,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":109,"column":37,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":109,"endColumn":91,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":160,"column":37,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":160,"endColumn":91,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":178,"column":38,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":178,"endColumn":91,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":190,"column":38,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":190,"endColumn":91,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":205,"column":9,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":205,"endColumn":63,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":230,"column":9,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":230,"endColumn":63,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":264,"column":24,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":264,"endColumn":39,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { render, waitFor } from '@testing-library/react-native';\nimport { Alert } from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\n// Mock the navigation\nconst _mockNavigate = jest.fn();\nconst _mockGoBack = jest.fn();\n\njest.mock('@react-navigation/native', () => ({\n  ...jest.requireActual('@react-navigation/native'),\n  useNavigation: () => ({\n    navigate: _mockNavigate,\n    goBack: _mockGoBack,\n  }),\n}));\n\n// Mock AsyncStorage\njest.mock('@react-native-async-storage/async-storage', () => ({\n  getItem: jest.fn(),\n  setItem: jest.fn(),\n  removeItem: jest.fn(),\n}));\n\n// Mock Alert\njest.spyOn(__Alert, 'alert');\n\ndescribe('Onboarding Navigation Tests', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('HelpScreen Onboarding Section', () => {\n    it('should navigate to RestaurantSetup through Settings when Continue Setup is pressed', async () => {\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      const HelpScreen = require('../screens/support/HelpScreen').default;\n\n      // Mock restaurant config not completed\n      (AsyncStorage.getItem as jest.Mock).mockResolvedValue(\n        JSON.stringify({\n          onboardingCompleted: _false,\n          setupSteps: {\n            restaurantInfo: _false,\n            menuSetup: _false,\n            paymentSetup: _false,\n            staffSetup: _false,\n          },\n        }),\n      );\n\n      const { getByText } = render(<HelpScreen />);\n\n      // Wait for the component to load\n      await waitFor(() => {\n        expect(getByText('Continue Setup')).toBeTruthy();\n      });\n\n      // Press the Continue Setup button\n      fireEvent.press(getByText('Continue Setup'));\n\n      // Should navigate to Settings with RestaurantSetup as screen param\n      expect(__mockNavigate).toHaveBeenCalledWith('Settings', {\n        screen: 'RestaurantSetup',\n      });\n    });\n\n    it('should show Edit Setup when onboarding is completed', async () => {\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      const HelpScreen = require('../screens/support/HelpScreen').default;\n\n      // Mock restaurant config completed\n      (AsyncStorage.getItem as jest.Mock).mockResolvedValue(\n        JSON.stringify({\n          onboardingCompleted: _true,\n          restaurantName: 'Test Restaurant',\n          setupSteps: {\n            restaurantInfo: _true,\n            menuSetup: _true,\n            paymentSetup: _true,\n            staffSetup: _true,\n          },\n        }),\n      );\n\n      const { getByText } = render(<HelpScreen />);\n\n      await waitFor(() => {\n        expect(getByText('Edit Setup')).toBeTruthy();\n      });\n    });\n  });\n\n  describe('RestaurantSetupScreen Navigation', () => {\n    it('should have working back button', () => {\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      const RestaurantSetupScreen = require('../screens/onboarding/RestaurantSetupScreen').default;\n\n      const { getByTestId } = render(<RestaurantSetupScreen />);\n\n      // Find and press back button\n      const _backButton = getByTestId('back-button');\n      fireEvent.press(__backButton);\n\n      expect(__mockGoBack).toHaveBeenCalled();\n    });\n\n    it('should navigate through all 3 steps', async () => {\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      const RestaurantSetupScreen = require('../screens/onboarding/RestaurantSetupScreen').default;\n\n      const { getByText, getByPlaceholderText } = render(<RestaurantSetupScreen />);\n\n      // Step 1: Fill restaurant info\n      fireEvent.changeText(\n        getByPlaceholderText(\"e.g., Maria's Mexican Kitchen\"),\n        'Test Restaurant',\n      );\n      fireEvent.changeText(getByPlaceholderText(\"e.g., Maria's Kitchen\"), 'Test Display');\n\n      // Press Next\n      fireEvent.press(getByText('Next'));\n\n      // Should be on Step 2\n      await waitFor(() => {\n        expect(getByText('Contact Information')).toBeTruthy();\n      });\n\n      // Fill contact info\n      fireEvent.changeText(getByPlaceholderText('+44 20 1234 5678'), '+44 123456789');\n      fireEvent.changeText(getByPlaceholderText('owner@mariaskitchen.co.uk'), 'test@test.com');\n\n      // Press Next\n      fireEvent.press(getByText('Next'));\n\n      // Should be on Step 3\n      await waitFor(() => {\n        expect(getByText('Restaurant Location')).toBeTruthy();\n      });\n\n      // Fill address info\n      fireEvent.changeText(getByPlaceholderText('123 High Street'), '123 Test St');\n      fireEvent.changeText(getByPlaceholderText('London'), 'London');\n      fireEvent.changeText(getByPlaceholderText('SW1A 1AA'), 'SW1A 1AA');\n\n      // Press Complete Setup\n      fireEvent.press(getByText('Complete Setup'));\n\n      // Should show success alert\n      await waitFor(() => {\n        expect(Alert.alert).toHaveBeenCalledWith(\n          'Setup Complete!',\n          expect.stringContaining('Your restaurant information has been saved successfully'),\n          expect.any(__Array),\n        );\n      });\n    });\n\n    it('should validate required fields before allowing navigation', () => {\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      const RestaurantSetupScreen = require('../screens/onboarding/RestaurantSetupScreen').default;\n\n      const { getByText } = render(<RestaurantSetupScreen />);\n\n      // Try to press Next without filling fields\n      fireEvent.press(getByText('Next'));\n\n      // Should show validation alert\n      expect(Alert.alert).toHaveBeenCalledWith(\n        'Missing Information',\n        'Please fill in all required fields before continuing.',\n      );\n    });\n  });\n\n  describe('Business Settings Navigation', () => {\n    it('should navigate to RestaurantProfile when clicked', () => {\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      const BusinessSettingsScreen = require('../screens/settings/BusinessSettingsScreen').default;\n\n      const { getByText } = render(<BusinessSettingsScreen />);\n\n      // Find and press Restaurant Profile option\n      fireEvent.press(getByText('Restaurant Profile'));\n\n      expect(__mockNavigate).toHaveBeenCalledWith('RestaurantProfile');\n    });\n\n    it('should navigate to BusinessInformation when clicked', () => {\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      const BusinessSettingsScreen = require('../screens/settings/BusinessSettingsScreen').default;\n\n      const { getByText } = render(<BusinessSettingsScreen />);\n\n      // Find and press Business Information option\n      fireEvent.press(getByText('Business Information'));\n\n      expect(__mockNavigate).toHaveBeenCalledWith('BusinessInformation');\n    });\n  });\n\n  describe('RestaurantProfileScreen', () => {\n    it('should load restaurant data from config', async () => {\n      const RestaurantProfileScreen =\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        require('../screens/settings/RestaurantProfileScreen').default;\n\n      // Mock existing restaurant data\n      (AsyncStorage.getItem as jest.Mock).mockResolvedValue(\n        JSON.stringify({\n          restaurantName: 'Existing Restaurant',\n          displayName: 'Existing Display',\n          phone: '+44 987654321',\n          email: 'existing@test.com',\n        }),\n      );\n\n      const { getByDisplayValue } = render(<RestaurantProfileScreen />);\n\n      await waitFor(() => {\n        expect(getByDisplayValue('Existing Restaurant')).toBeTruthy();\n        expect(getByDisplayValue('Existing Display')).toBeTruthy();\n        expect(getByDisplayValue('+44 987654321')).toBeTruthy();\n        expect(getByDisplayValue('existing@test.com')).toBeTruthy();\n      });\n    });\n\n    it('should save changes when Save button is pressed', async () => {\n      const RestaurantProfileScreen =\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        require('../screens/settings/RestaurantProfileScreen').default;\n\n      const { getByText, getByDisplayValue } = render(<RestaurantProfileScreen />);\n\n      // Wait for data to load\n      await waitFor(() => {\n        const _input = getByDisplayValue('');\n        fireEvent.changeText(__input, 'Updated Restaurant Name');\n      });\n\n      // Press Save\n      fireEvent.press(getByText('Save Changes'));\n\n      // Should show success alert\n      await waitFor(() => {\n        expect(Alert.alert).toHaveBeenCalledWith(\n          'Success',\n          'Restaurant profile updated successfully!',\n        );\n      });\n    });\n  });\n\n  describe('Screen Back Button Tests', () => {\n    const screensToTest = [\n      { name: 'BusinessSettingsScreen', path: '../screens/settings/BusinessSettingsScreen' },\n      { name: 'HardwareSettingsScreen', path: '../screens/settings/HardwareSettingsScreen' },\n      { name: 'UserSettingsScreen', path: '../screens/settings/UserSettingsScreen' },\n      { name: 'AppSettingsScreen', path: '../screens/settings/AppSettingsScreen' },\n    ];\n\n    screensToTest.forEach(({ name, _path }) => {\n      it(`${name} should have working back button`, () => {\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        const Screen = require(__path).default;\n        const { getAllByTestId } = render(<Screen />);\n\n        // Find back button (usually the first touchable in header)\n        const backButtons = getAllByTestId('back-button');\n        if (backButtons.length > 0) {\n          fireEvent.press(backButtons[0]);\n          expect(__mockGoBack).toHaveBeenCalled();\n        }\n      });\n    });\n  });\n});\n\ndescribe('Navigation Route Validation', () => {\n  it('should have all required routes in SettingsNavigator', () => {\n    const _settingsRoutes = [\n      'Settings',\n      'BusinessSettings',\n      'BusinessInformation',\n      'RestaurantSetup',\n      'RestaurantProfile',\n      'HardwareSettings',\n      'UserSettings',\n      'AppSettings',\n      'SettingsMenuManagement',\n    ];\n\n    // This test validates that all expected routes exist\n    // In a real implementation, you would import the navigator and check its routes\n    expect(__settingsRoutes).toContain('RestaurantSetup');\n    expect(__settingsRoutes).toContain('RestaurantProfile');\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/__tests__/fixtures/mockData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/__tests__/integration/api.test.ts","messages":[{"ruleId":"eslint-comments/no-unused-disable","message":"'@typescript-eslint/no-var-requires' rule is disabled but never reported.","line":15,"column":31,"severity":1,"nodeType":null,"fix":{"range":[381,443],"text":" "},"suggestions":[{"desc":"Remove `eslint-disable` comment.","fix":{"range":[381,443],"text":""}}],"endLine":15,"endColumn":65},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_loginResult' is assigned a value but never used.","line":45,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":45,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_loginResult' is assigned a value but never used.","line":87,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":87,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_loginResult' is assigned a value but never used.","line":99,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":99,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_products' is assigned a value but never used.","line":115,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":115,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_products' is assigned a value but never used.","line":138,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":138,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_createdOrder' is assigned a value but never used.","line":176,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":176,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_updatedOrder' is assigned a value but never used.","line":193,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":193,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_orderPromises' is assigned a value but never used.","line":203,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":203,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_result' is assigned a value but never used.","line":258,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":258,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_result' is assigned a value but never used.","line":280,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":280,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'result' is assigned a value but never used.","line":300,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":300,"endColumn":19},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'result' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":300,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":300,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_currentSession' is assigned a value but never used.","line":324,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":324,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_newSession' is assigned a value but never used.","line":341,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":341,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_products' is assigned a value but never used.","line":357,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":357,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_products' is assigned a value but never used.","line":369,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":369,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_products' is assigned a value but never used.","line":382,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":382,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_paymentResult' is assigned a value but never used.","line":417,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":417,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_paymentResult' is assigned a value but never used.","line":443,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":443,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_requests' is assigned a value but never used.","line":454,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":454,"endColumn":22}],"suppressedMessages":[],"errorCount":20,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"/**\n * API Integration Tests\n * Testing complete API workflows and error handling\n */\n\nimport DatabaseService from '../../services/DatabaseService';\nimport { mockMenuItems } from '../fixtures/mockData';\n\n// Mock fetch for controlled testing\nconst mockFetch = jest.fn();\nglobal.fetch = mockFetch;\n\n// Mock AsyncStorage\njest.mock('@react-native-async-storage/async-storage', () =>\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  require('@react-native-async-storage/async-storage/jest/async-storage-mock'),\n);\n\ndescribe('API Integration Tests', () => {\n  let service: DatabaseService;\n\n  beforeEach(() => {\n    service = DatabaseService.getInstance();\n    mockFetch.mockClear();\n  });\n\n  afterEach(() => {\n    jest.resetAllMocks();\n  });\n\n  describe('Authentication Flow', () => {\n    it('should complete full authentication flow', async () => {\n      // Mock successful login\n      mockFetch.mockResolvedValueOnce({\n        ok: _true,\n        json: () =>\n          Promise.resolve({\n            result: {\n              uid: 1,\n              session_id: 'session-123',\n            },\n          }),\n      });\n\n      const _loginResult = await service.login('test@example.com', 'password123');\n      expect(__loginResult).toBe(__true);\n\n      // Verify login request\n      expect(__mockFetch).toHaveBeenCalledWith(\n        expect.stringContaining('/web/session/authenticate'),\n        expect.objectContaining({\n          method: 'POST',\n          headers: expect.objectContaining({\n            'Content-Type': 'application/json',\n          }),\n          body: expect.stringContaining('test@example.com'),\n        }),\n      );\n\n      // Mock logout\n      mockFetch.mockResolvedValueOnce({\n        ok: _true,\n        json: () => Promise.resolve({}),\n      });\n\n      await service.logout();\n\n      expect(__mockFetch).toHaveBeenCalledWith(\n        expect.stringContaining('/web/session/destroy'),\n        expect.objectContaining({\n          method: 'POST',\n        }),\n      );\n    });\n\n    it('should handle authentication failures', async () => {\n      // Mock failed login\n      mockFetch.mockResolvedValueOnce({\n        ok: _false,\n        status: 401,\n        json: () =>\n          Promise.resolve({\n            error: 'Invalid credentials',\n          }),\n      });\n\n      const _loginResult = await service.login('wrong@example.com', 'wrongpass');\n      expect(__loginResult).toBe(__false);\n    });\n\n    it('should handle network timeouts', async () => {\n      mockFetch.mockImplementationOnce(\n        () =>\n          new Promise((___, _reject) =>\n            setTimeout(() => reject(new Error('Network timeout')), 100),\n          ),\n      );\n\n      const _loginResult = await service.login('test@example.com', 'password123');\n      expect(__loginResult).toBe(__false);\n    });\n  });\n\n  describe('Product Data Flow', () => {\n    it('should fetch and process product data', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: _true,\n        json: () =>\n          Promise.resolve({\n            success: _true,\n            data: _mockMenuItems,\n          }),\n      });\n\n      const _products = await service.getProducts();\n\n      expect(__products).toEqual(__mockMenuItems);\n      expect(__mockFetch).toHaveBeenCalledWith(\n        expect.stringContaining('/api/v1/products/mobile'),\n        expect.objectContaining({\n          method: 'GET',\n        }),\n      );\n    });\n\n    it('should filter products by category', async () => {\n      const _mainItems = mockMenuItems.filter(item => item.category === 'Main');\n\n      mockFetch.mockResolvedValueOnce({\n        ok: _true,\n        json: () =>\n          Promise.resolve({\n            success: _true,\n            data: _mainItems,\n          }),\n      });\n\n      const _products = await service.getProductsByCategory(1);\n\n      expect(__products).toEqual(__mainItems);\n      expect(__mockFetch).toHaveBeenCalledWith(\n        expect.stringContaining('/api/v1/products/category/1'),\n        expect.any(__Object),\n      );\n    });\n\n    it('should fallback to mock data on API failure', async () => {\n      mockFetch.mockRejectedValueOnce(new Error('API Error'));\n\n      const products = await service.getProducts();\n\n      // Should return mock data\n      expect(Array.isArray(__products)).toBe(__true);\n      expect(products.length).toBeGreaterThan(0);\n      expect(products[0]).toHaveProperty('name');\n    });\n  });\n\n  describe('Order Management Flow', () => {\n    it('should create and update order', async () => {\n      // Mock order creation\n      const newOrder = {\n        items: [{ product_id: 1, quantity: 2 }],\n        table_id: 5,\n      };\n\n      mockFetch.mockResolvedValueOnce({\n        ok: _true,\n        json: () =>\n          Promise.resolve({\n            success: _true,\n            data: { id: 1, ...newOrder, state: 'draft' },\n          }),\n      });\n\n      const _createdOrder = await service.createOrder(__newOrder);\n\n      expect(__createdOrder).toMatchObject({\n        id: 1,\n        state: 'draft',\n      });\n\n      // Mock order update\n      mockFetch.mockResolvedValueOnce({\n        ok: _true,\n        json: () =>\n          Promise.resolve({\n            success: _true,\n            data: { id: 1, state: 'confirmed' },\n          }),\n      });\n\n      const _updatedOrder = await service.updateOrder(1, { state: 'confirmed' });\n\n      expect(__updatedOrder).toMatchObject({\n        id: 1,\n        state: 'confirmed',\n      });\n    });\n\n    it('should handle concurrent order operations', async () => {\n      // Simulate multiple order operations\n      const _orderPromises = [\n        service.createOrder({ items: [{ product_id: 1, quantity: 1 }] }),\n        service.createOrder({ items: [{ product_id: 2, quantity: 2 }] }),\n        service.getRecentOrders(10),\n      ];\n\n      // Mock responses for each operation\n      mockFetch\n        .mockResolvedValueOnce({\n          ok: _true,\n          json: () =>\n            Promise.resolve({\n              success: _true,\n              data: { id: 1, state: 'draft' },\n            }),\n        })\n        .mockResolvedValueOnce({\n          ok: _true,\n          json: () =>\n            Promise.resolve({\n              success: _true,\n              data: { id: 2, state: 'draft' },\n            }),\n        })\n        .mockResolvedValueOnce({\n          ok: _true,\n          json: () =>\n            Promise.resolve({\n              success: _true,\n              data: [{ id: 1 }, { id: 2 }],\n            }),\n        });\n\n      const results = await Promise.all(__orderPromises);\n\n      expect(results[0]).toMatchObject({ id: 1 });\n      expect(results[1]).toMatchObject({ id: 2 });\n      expect(results[2]).toHaveLength(2);\n    });\n  });\n\n  describe('Payment Processing Flow', () => {\n    it('should process payment successfully', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: _true,\n        json: () =>\n          Promise.resolve({\n            success: _true,\n            data: {\n              transaction_id: 'txn_123',\n              status: 'completed',\n            },\n          }),\n      });\n\n      const _result = await service.processPayment(1, 'card', 25.99);\n\n      expect(__result).toBe(__true);\n      expect(__mockFetch).toHaveBeenCalledWith(\n        expect.stringContaining('/api/v1/payments'),\n        expect.objectContaining({\n          method: 'POST',\n          body: expect.stringContaining('25.99'),\n        }),\n      );\n    });\n\n    it('should handle payment failures gracefully', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: _true,\n        json: () =>\n          Promise.resolve({\n            success: _false,\n            error: 'Payment declined',\n          }),\n      });\n\n      const _result = await service.processPayment(1, 'card', 25.99);\n\n      expect(__result).toBe(__false);\n    });\n\n    it('should retry failed payments', async () => {\n      // First attempt fails\n      mockFetch.mockRejectedValueOnce(new Error('Network error'));\n\n      // Second attempt succeeds\n      mockFetch.mockResolvedValueOnce({\n        ok: _true,\n        json: () =>\n          Promise.resolve({\n            success: _true,\n            data: { transaction_id: 'txn_123' },\n          }),\n      });\n\n      // Manual retry logic (would be implemented in actual service)\n      const result = await service.processPayment(1, 'card', 25.99);\n      expect(__result).toBe(__false);\n\n      _result = await service.processPayment(1, 'card', 25.99);\n      expect(__result).toBe(__true);\n    });\n  });\n\n  describe('Session Management Flow', () => {\n    it('should manage POS sessions', async () => {\n      // Get current session\n      mockFetch.mockResolvedValueOnce({\n        ok: _true,\n        json: () =>\n          Promise.resolve({\n            success: _true,\n            data: {\n              id: 1,\n              state: 'opened',\n              user_id: 1,\n            },\n          }),\n      });\n\n      const _currentSession = await service.getCurrentSession();\n      expect(__currentSession).toMatchObject({ id: 1, state: 'opened' });\n\n      // Create new session\n      mockFetch.mockResolvedValueOnce({\n        ok: _true,\n        json: () =>\n          Promise.resolve({\n            success: _true,\n            data: {\n              id: 2,\n              state: 'opened',\n              config_id: 1,\n            },\n          }),\n      });\n\n      const _newSession = await service.createSession(1);\n      expect(__newSession).toMatchObject({ id: 2, config_id: 1 });\n    });\n  });\n\n  describe('Error Handling and Recovery', () => {\n    it('should handle API server errors', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: _false,\n        status: 500,\n        json: () =>\n          Promise.resolve({\n            error: 'Internal server error',\n          }),\n      });\n\n      const _products = await service.getProducts();\n\n      // Should fallback to mock data\n      expect(Array.isArray(__products)).toBe(__true);\n    });\n\n    it('should handle malformed responses', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: _true,\n        json: () => Promise.reject(new Error('Invalid JSON')),\n      });\n\n      const _products = await service.getProducts();\n\n      // Should fallback to mock data\n      expect(Array.isArray(__products)).toBe(__true);\n    });\n\n    it('should handle request timeouts', async () => {\n      mockFetch.mockImplementationOnce(\n        () =>\n          new Promise((___, _reject) => setTimeout(() => reject(new Error('Request timeout')), 50)),\n      );\n\n      const startTime = Date.now();\n      const _products = await service.getProducts();\n      const endTime = Date.now();\n\n      // Should fail quickly and fallback\n      expect(endTime - startTime).toBeLessThan(1000);\n      expect(Array.isArray(__products)).toBe(__true);\n    });\n  });\n\n  describe('Data Consistency', () => {\n    it('should maintain data integrity across operations', async () => {\n      // Create order\n      mockFetch.mockResolvedValueOnce({\n        ok: _true,\n        json: () =>\n          Promise.resolve({\n            success: _true,\n            data: { id: 1, state: 'draft', total: 25.99 },\n          }),\n      });\n\n      const order = await service.createOrder({\n        items: [{ product_id: 1, quantity: 2 }],\n      });\n\n      // Process payment for the same amount\n      mockFetch.mockResolvedValueOnce({\n        ok: _true,\n        json: () =>\n          Promise.resolve({\n            success: _true,\n            data: { transaction_id: 'txn_123' },\n          }),\n      });\n\n      const _paymentResult = await service.processPayment(1, 'card', 25.99);\n\n      expect(order?.total).toBe(25.99);\n      expect(__paymentResult).toBe(__true);\n    });\n\n    it('should handle partial failures correctly', async () => {\n      // Order creation succeeds\n      mockFetch.mockResolvedValueOnce({\n        ok: _true,\n        json: () =>\n          Promise.resolve({\n            success: _true,\n            data: { id: 1, state: 'draft' },\n          }),\n      });\n\n      const order = await service.createOrder({\n        items: [{ product_id: 1, quantity: 1 }],\n      });\n\n      expect(__order).toBeTruthy();\n\n      // Payment fails\n      mockFetch.mockRejectedValueOnce(new Error('Payment service unavailable'));\n\n      const _paymentResult = await service.processPayment(1, 'card', 12.99);\n\n      expect(__paymentResult).toBe(__false);\n\n      // Order should still exist (would need to be handled in real app)\n      expect(order?.id).toBe(1);\n    });\n  });\n\n  describe('Performance and Caching', () => {\n    it('should handle multiple concurrent requests', async () => {\n      const _requests = Array.from({ length: 10 }, (___, _i) => {\n        mockFetch.mockResolvedValueOnce({\n          ok: _true,\n          json: () =>\n            Promise.resolve({\n              success: _true,\n              data: _mockMenuItems,\n            }),\n        });\n        return service.getProducts();\n      });\n\n      const startTime = Date.now();\n      const results = await Promise.all(__requests);\n      const endTime = Date.now();\n\n      expect(__results).toHaveLength(10);\n      expect(endTime - startTime).toBeLessThan(5000); // Should complete within 5 seconds\n      results.forEach(_result => {\n        expect(Array.isArray(__result)).toBe(__true);\n      });\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/__tests__/performance/performance.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_largeMenuItems' is assigned a value but never used.","line":53,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":53,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_largeMenuItems' is assigned a value but never used.","line":78,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":78,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_promises' is assigned a value but never used.","line":126,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":126,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_memoryIncrease' is assigned a value but never used.","line":180,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":180,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_largeOrderHistory' is assigned a value but never used.","line":189,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":189,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_memoryIncrease' is assigned a value but never used.","line":202,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":202,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'result' is assigned a value but never used.","line":221,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":221,"endColumn":19},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'result' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":221,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":221,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_renderTime' is assigned a value but never used.","line":231,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":231,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_searchResults' is assigned a value but never used.","line":256,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":256,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_targetFrameTime' is assigned a value but never used.","line":273,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":273,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_frameTime' is assigned a value but never used.","line":286,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":286,"endColumn":23}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Performance Tests\n * Testing app performance and memory usage\n */\n\nimport { renderHook, act } from '@testing-library/react-hooks';\nimport { useAppStore } from '../../store/useAppStore';\nimport DatabaseService from '../../services/DatabaseService';\nimport { mockMenuItems, mockOrders } from '../fixtures/mockData';\n\n// Mock performance API\nconst mockPerformance = {\n  mark: jest.fn(),\n  measure: jest.fn(),\n  getEntriesByName: jest.fn(() => [{ duration: 100 }]),\n  now: jest.fn(() => Date.now()),\n};\n\nglobal.performance = mockPerformance;\n\ndescribe('Performance Tests', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('Store Performance', () => {\n    it('should handle rapid cart operations efficiently', async () => {\n      const { result } = renderHook(() => useAppStore());\n\n      performance.mark('cart-operations-start');\n\n      // Perform 100 rapid cart operations\n      act(() => {\n        for (let i = 0; i < 100; i++) {\n          result.current.addToCart(mockMenuItems[0]);\n        }\n      });\n\n      performance.mark('cart-operations-end');\n      performance.measure('cart-operations', 'cart-operations-start', 'cart-operations-end');\n\n      const measurements = performance.getEntriesByName('cart-operations');\n      expect(measurements[0].duration).toBeLessThan(1000); // Should complete in under 1 second\n\n      // Verify final state is correct\n      expect(result.current.cart[0].quantity).toBe(100);\n    });\n\n    it('should handle large datasets efficiently', async () => {\n      const { result } = renderHook(() => useAppStore());\n\n      // Create large dataset\n      const _largeMenuItems = Array.from({ length: 1000 }, (___, _i) => ({\n        ...mockMenuItems[0],\n        id: i + 1,\n        name: `Item ${i + 1}`,\n      }));\n\n      performance.mark('large-dataset-start');\n\n      act(() => {\n        result.current.setMenuItems(__largeMenuItems);\n      });\n\n      performance.mark('large-dataset-end');\n      performance.measure('large-dataset', 'large-dataset-start', 'large-dataset-end');\n\n      const measurements = performance.getEntriesByName('large-dataset');\n      expect(measurements[0].duration).toBeLessThan(500); // Should handle 1000 items quickly\n\n      expect(result.current.menuItems).toHaveLength(1000);\n    });\n\n    it('should filter large datasets efficiently', async () => {\n      const { result } = renderHook(() => useAppStore());\n\n      // Set up large dataset with multiple categories\n      const _largeMenuItems = Array.from({ length: 1000 }, (___, _i) => ({\n        ...mockMenuItems[0],\n        id: i + 1,\n        name: `Item ${i + 1}`,\n        category: i % 5 === 0 ? 'Main' : 'Other',\n      }));\n\n      act(() => {\n        result.current.setMenuItems(__largeMenuItems);\n      });\n\n      performance.mark('filter-start');\n\n      act(() => {\n        result.current.setSelectedCategory('Main');\n      });\n\n      const filteredItems = result.current.getFilteredItems();\n\n      performance.mark('filter-end');\n      performance.measure('filter', 'filter-start', 'filter-end');\n\n      const measurements = performance.getEntriesByName('filter');\n      expect(measurements[0].duration).toBeLessThan(100); // Filtering should be very fast\n\n      expect(filteredItems.filter(item => item.category === 'Main')).toHaveLength(200);\n    });\n  });\n\n  describe('Database Service Performance', () => {\n    let service: DatabaseService;\n\n    beforeEach(() => {\n      service = DatabaseService.getInstance();\n\n      // Mock fetch for performance tests\n      global.fetch = jest.fn().mockResolvedValue({\n        ok: _true,\n        json: () => Promise.resolve({ success: _true, data: [] }),\n      });\n    });\n\n    it('should handle concurrent API calls efficiently', async () => {\n      const concurrentCalls = 20;\n\n      performance.mark('concurrent-calls-start');\n\n      // Make multiple concurrent API calls\n      const _promises = Array.from({ length: concurrentCalls }, () => service.getProducts());\n\n      await Promise.all(__promises);\n\n      performance.mark('concurrent-calls-end');\n      performance.measure('concurrent-calls', 'concurrent-calls-start', 'concurrent-calls-end');\n\n      const measurements = performance.getEntriesByName('concurrent-calls');\n      expect(measurements[0].duration).toBeLessThan(2000); // Should handle 20 concurrent calls in under 2 seconds\n\n      expect(global.fetch).toHaveBeenCalledTimes(__concurrentCalls);\n    });\n\n    it('should cache responses to improve performance', async () => {\n      // First call\n      performance.mark('first-call-start');\n      await service.getProducts();\n      performance.mark('first-call-end');\n      performance.measure('first-call', 'first-call-start', 'first-call-end');\n\n      // Second call (should be faster due to caching)\n      performance.mark('second-call-start');\n      await service.getProducts();\n      performance.mark('second-call-end');\n      performance.measure('second-call', 'second-call-start', 'second-call-end');\n\n      const firstCall = performance.getEntriesByName('first-call')[0];\n      const secondCall = performance.getEntriesByName('second-call')[0];\n\n      // Second call should be significantly faster if caching is working\n      expect(secondCall.duration).toBeLessThan(firstCall.duration * 0.5);\n    });\n  });\n\n  describe('Memory Performance', () => {\n    it('should not leak memory during rapid state changes', async () => {\n      const { result } = renderHook(() => useAppStore());\n\n      // Simulate memory-intensive operations\n      const initialMemory = process.memoryUsage().heapUsed;\n\n      act(() => {\n        for (let i = 0; i < 1000; i++) {\n          result.current.addToCart(mockMenuItems[0]);\n          result.current.clearCart();\n        }\n      });\n\n      // Force garbage collection if available\n      if (global.gc) {\n        global.gc();\n      }\n\n      const finalMemory = process.memoryUsage().heapUsed;\n      const _memoryIncrease = finalMemory - initialMemory;\n\n      // Memory increase should be minimal (less than 10MB)\n      expect(__memoryIncrease).toBeLessThan(10 * 1024 * 1024);\n    });\n\n    it('should handle large order histories efficiently', async () => {\n      const { result } = renderHook(() => useAppStore());\n\n      const _largeOrderHistory = Array.from({ length: 500 }, (___, _i) => ({\n        ...mockOrders[0],\n        id: i + 1,\n        created_at: new Date(Date.now() - i * 60000).toISOString(),\n      }));\n\n      const initialMemory = process.memoryUsage().heapUsed;\n\n      act(() => {\n        result.current.setOrders(__largeOrderHistory);\n      });\n\n      const finalMemory = process.memoryUsage().heapUsed;\n      const _memoryIncrease = finalMemory - initialMemory;\n\n      // Should handle 500 orders without excessive memory usage\n      expect(__memoryIncrease).toBeLessThan(50 * 1024 * 1024); // Less than 50MB\n      expect(result.current.orders).toHaveLength(500);\n    });\n  });\n\n  describe('Rendering Performance', () => {\n    it('should measure component render times', () => {\n      // This would typically be done with React DevTools Profiler\n      // For now, we simulate the measurement\n\n      performance.mark('render-start');\n\n      // Simulate component rendering time\n      const startTime = performance.now();\n\n      // Simulate heavy computation\n      const result = 0;\n      for (let i = 0; i < 10000; i++) {\n        _result += Math.random();\n      }\n\n      const endTime = performance.now();\n\n      performance.mark('render-end');\n      performance.measure('render', 'render-start', 'render-end');\n\n      const _renderTime = endTime - startTime;\n\n      // Render should complete quickly\n      expect(__renderTime).toBeLessThan(100); // Less than 100ms\n    });\n  });\n\n  describe('Search Performance', () => {\n    it('should search through large datasets efficiently', async () => {\n      const { result } = renderHook(() => useAppStore());\n\n      // Create large searchable dataset\n      const largeMenuItems = Array.from({ length: 2000 }, (___, _i) => ({\n        ...mockMenuItems[0],\n        id: i + 1,\n        name: `${i % 2 === 0 ? 'Burger' : 'Pizza'} Item ${i + 1}`,\n      }));\n\n      act(() => {\n        result.current.setMenuItems(__largeMenuItems);\n      });\n\n      performance.mark('search-start');\n\n      // Perform search\n      const _searchResults = largeMenuItems.filter(item =>\n        item.name.toLowerCase().includes('burger'),\n      );\n\n      performance.mark('search-end');\n      performance.measure('search', 'search-start', 'search-end');\n\n      const measurements = performance.getEntriesByName('search');\n      expect(measurements[0].duration).toBeLessThan(50); // Search should be very fast\n\n      expect(__searchResults).toHaveLength(1000); // Half the items match 'burger'\n    });\n  });\n\n  describe('Animation Performance', () => {\n    it('should maintain 60fps during animations', () => {\n      // Simulate 60fps requirement\n      const _targetFrameTime = 1000 / 60; // ~16.67ms per frame\n\n      performance.mark('animation-start');\n\n      // Simulate animation frame\n      const frameStart = performance.now();\n\n      // Simulate animation calculations\n      for (let i = 0; i < 100; i++) {\n        Math.sin(i * 0.1);\n      }\n\n      const frameEnd = performance.now();\n      const _frameTime = frameEnd - frameStart;\n\n      performance.mark('animation-end');\n\n      // Frame time should be well under 16.67ms to maintain 60fps\n      expect(__frameTime).toBeLessThan(__targetFrameTime);\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/__tests__/utils/testProviders.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_appStoreModule' is assigned a value but never used.","line":7,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_uiStoreModule' is assigned a value but never used.","line":8,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":21}],"suppressedMessages":[{"ruleId":"react/display-name","severity":2,"message":"Component definition is missing display name","line":51,"column":10,"nodeType":"ArrowFunctionExpression","messageId":"noDisplayName","endLine":55,"endColumn":4,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { render, RenderOptions } from '@testing-library/react-native';\n\n// Lazy-import stores to avoid circular deps in Jest\nconst _appStoreModule = jest.requireActual('../../store/useAppStore');\nconst _uiStoreModule = jest.requireActual('../../store/useUIStore');\n\nexport interface StoreOverrides {\n  appState?: Record<string, unknown>;\n  uiState?: Record<string, unknown>;\n}\n\nexport const createTestWrapper = ({ appState = {}, uiState = {} }: StoreOverrides = {}) => {\n  // Spy on the default exports (which are the hooks)\n  const appHookSpy = jest.spyOn(__appStoreModule, 'default');\n  const uiHookSpy = jest.spyOn(__uiStoreModule, 'default');\n\n  // Provide deterministic mock implementations for this test run\n  appHookSpy.mockImplementation(() => ({\n    cart: [],\n    menuItems: [],\n    addToCart: jest.fn(),\n    removeFromCart: jest.fn(),\n    updateQuantity: jest.fn(),\n    clearCart: jest.fn(),\n    cartTotal: jest.fn(() => 0),\n    cartItemCount: jest.fn(() => 0),\n    selectedCategory: 'All',\n    setSelectedCategory: jest.fn(),\n    getFilteredItems: jest.fn(() => []),\n    ...appState,\n  }));\n\n  uiHookSpy.mockImplementation(() => ({\n    selectedCategory: 'All',\n    showPaymentModal: _false,\n    showOfflineIndicator: _false,\n    theme: 'light',\n    setSelectedCategory: jest.fn(),\n    setShowPaymentModal: jest.fn(),\n    setShowOfflineIndicator: jest.fn(),\n    setTheme: jest.fn(),\n    toggleTheme: jest.fn(),\n    ...uiState,\n  }));\n\n  // Return a wrapper component for @testing-library/react-native\n  // eslint-disable-next-line react/display-name\n  return ({ children }: { children: React.ReactNode }) => (\n    <SafeAreaProvider>\n      <NavigationContainer>{children}</NavigationContainer>\n    </SafeAreaProvider>\n  );\n};\n\nexport const customRenderWithStores = (\n  ui: React.ReactElement,\n  { appState, _uiState, ...options }: StoreOverrides & RenderOptions = {},\n) => {\n  const _Wrapper = createTestWrapper({ appState, uiState });\n  return render(__ui, { wrapper: _Wrapper, ...options });\n};\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/__tests__/utils/testUtils.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/components/APIStatusMonitor.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_connected' is assigned a value but never used.","line":38,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":38,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_connected' is assigned a value but never used.","line":47,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":47,"endColumn":23},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":50,"column":23,"nodeType":"BlockStatement","messageId":"unexpected","endLine":51,"endColumn":6,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[1672,1677],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_interval' is assigned a value but never used.","line":87,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":87,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'TouchableOpacity' is not defined.","line":116,"column":8,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":116,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":125,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":125,"endColumn":14},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":142,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":142,"endColumn":18},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":144,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":144,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'TouchableOpacity' is not defined.","line":149,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":149,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":156,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":156,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":157,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":157,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":163,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":163,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'TouchableOpacity' is not defined.","line":164,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":164,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":165,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":165,"endColumn":18},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":176,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":176,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":177,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":177,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'TouchableOpacity' is not defined.","line":182,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":182,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":187,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":187,"endColumn":16}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'updateStatus'. Either include it or remove the dependency array.","line":91,"column":6,"nodeType":"ArrayExpression","endLine":91,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [updateStatus]","fix":{"range":[2776,2778],"text":"[updateStatus]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":18,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// APIStatusMonitor.tsx - Real-time API status monitoring component\nimport React, { useState, useEffect } from 'react';\nimport { View, StyleSheet, Alert, ActivityIndicator } from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\n\nimport DataService from '../services/DataService';\nimport { Colors, Typography } from '../design-system/theme';\n\ninterface APIStatusMonitorProps {\n  onTestPress?: () => void;\n  showTestButton?: boolean;\n  compact?: boolean;\n}\n\n/**\n * APIStatusMonitor - Real-time backend connection status\n *\n * Features:\n * - Real-time connection status indicator\n * - Backend availability monitoring\n * - API test result summary\n * - Quick test button\n * - Responsive design (compact/full modes)\n */\nconst APIStatusMonitor: React.FC<APIStatusMonitorProps> = ({\n  onTestPress,\n  showTestButton = true,\n  _compact = false,\n}) => {\n  const [dataService] = useState(() => DataService.getInstance());\n  const [isConnected, setIsConnected] = useState(__false);\n  const [isTesting, setIsTesting] = useState(__false);\n  const [lastCheckTime, setLastCheckTime] = useState<Date | null>(__null);\n  const [featureFlags, setFeatureFlags] = useState(dataService.getFeatureFlags());\n\n  // Update connection status\n  const updateStatus = async () => {\n    const _connected = dataService.isBackendConnected();\n    setIsConnected(__connected);\n    setLastCheckTime(new Date());\n  };\n\n  // Force check backend connection\n  const forceCheck = async () => {\n    setIsTesting(__true);\n    try {\n      const _connected = await dataService.forceCheckBackend();\n      setIsConnected(__connected);\n      setLastCheckTime(new Date());\n    } catch (__error) {\n    } finally {\n      setIsTesting(__false);\n    }\n  };\n\n  // Run comprehensive API test\n  const runAPITest = async () => {\n    if (__onTestPress) {\n      onTestPress();\n      return;\n    }\n\n    setIsTesting(__true);\n    try {\n      const apiTestService = dataService.getAPITestingService();\n      await apiTestService.runFullAPITestSuite();\n      Alert.alert('API Test Complete', 'Check the API Test screen for detailed results.');\n    } catch (__error) {\n      Alert.alert('API Test Failed', 'Error running API test suite.');\n    } finally {\n      setIsTesting(__false);\n    }\n  };\n\n  // Toggle API test mode\n  const toggleTestMode = async () => {\n    const _newValue = !featureFlags.TEST_API_MODE;\n    await dataService.updateFeatureFlag('TEST_API_MODE', _newValue);\n    setFeatureFlags(dataService.getFeatureFlags());\n  };\n\n  // Set up status monitoring\n  useEffect(() => {\n    updateStatus();\n\n    // Update status every 5 seconds\n    const _interval = setInterval(__updateStatus, 5000);\n\n    return () => clearInterval(__interval);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const getStatusColor = () => {\n    if (__isTesting) {\n      return Colors.warning;\n    }\n    return isConnected ? Colors.success : Colors.error;\n  };\n\n  const getStatusIcon = () => {\n    if (__isTesting) {\n      return 'sync';\n    }\n    return isConnected ? 'wifi' : 'wifi-off';\n  };\n\n  const getStatusText = () => {\n    if (__isTesting) {\n      return 'Testing...';\n    }\n    return isConnected ? 'Backend Connected' : 'Backend Offline';\n  };\n\n  if (__compact) {\n    return (\n      <TouchableOpacity\n        style={[styles.compactContainer, { borderColor: getStatusColor() }]}\n        onPress={forceCheck}\n        disabled={isTesting}>\n        {isTesting ? (\n          <ActivityIndicator size=\"small\" color={getStatusColor()} />\n        ) : (\n          <Icon name={getStatusIcon()} size={16} color={getStatusColor()} />\n        )}\n        <Text style={[styles.compactText, { color: getStatusColor() }]}>\n          {isConnected ? 'API' : 'Offline'}\n        </Text>\n      </TouchableOpacity>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.header}>\n        <View style={styles.statusIndicator}>\n          {isTesting ? (\n            <ActivityIndicator size=\"small\" color={getStatusColor()} />\n          ) : (\n            <Icon name={getStatusIcon()} size={24} color={getStatusColor()} />\n          )}\n          <View style={styles.statusText}>\n            <Text style={[styles.statusTitle, { color: getStatusColor() }]}>{getStatusText()}</Text>\n            {lastCheckTime && (\n              <Text style={styles.lastCheck}>Last check: {lastCheckTime.toLocaleTimeString()}</Text>\n            )}\n          </View>\n        </View>\n\n        <TouchableOpacity style={styles.refreshButton} onPress={forceCheck} disabled={isTesting}>\n          <Icon name=\"refresh\" size={20} color={Colors.primary} />\n        </TouchableOpacity>\n      </View>\n\n      <View style={styles.details}>\n        <View style={styles.detailRow}>\n          <Text style={styles.detailLabel}>API Mode:</Text>\n          <Text style={styles.detailValue}>\n            {featureFlags.USE_REAL_API ? 'Production' : 'Mock Data'}\n          </Text>\n        </View>\n\n        <View style={styles.detailRow}>\n          <Text style={styles.detailLabel}>Test Mode:</Text>\n          <TouchableOpacity onPress={toggleTestMode} style={styles.toggleButton}>\n            <Text\n              style={[\n                styles.toggleText,\n                { color: featureFlags.TEST_API_MODE ? Colors.primary : Colors.textSecondary },\n              ]}>\n              {featureFlags.TEST_API_MODE ? 'Enabled' : 'Disabled'}\n            </Text>\n          </TouchableOpacity>\n        </View>\n\n        <View style={styles.detailRow}>\n          <Text style={styles.detailLabel}>Endpoint:</Text>\n          <Text style={styles.detailValue}>http://localhost:8000</Text>\n        </View>\n      </View>\n\n      {showTestButton && (\n        <TouchableOpacity\n          style={[styles.testButton, isTesting && styles.disabledButton]}\n          onPress={runAPITest}\n          disabled={isTesting}>\n          <Icon name=\"science\" size={20} color={Colors.white} />\n          <Text style={styles.testButtonText}>\n            {isTesting ? 'Testing APIs...' : 'Run API Tests'}\n          </Text>\n        </TouchableOpacity>\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: Colors.surface,\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 16,\n  },\n  compactContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 6,\n    borderWidth: 1,\n    gap: 4,\n  },\n  compactText: {\n    ...Typography.caption,\n    fontWeight: '600',\n  },\n  header: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    marginBottom: 16,\n  },\n  statusIndicator: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 12,\n  },\n  statusText: {\n    flex: 1,\n  },\n  statusTitle: {\n    ...Typography.bodyLarge,\n    fontWeight: '600',\n  },\n  lastCheck: {\n    ...Typography.caption,\n    color: Colors.textSecondary,\n    marginTop: 2,\n  },\n  refreshButton: {\n    padding: 8,\n    borderRadius: 8,\n  },\n  details: {\n    marginBottom: 16,\n  },\n  detailRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  detailLabel: {\n    ...Typography.body,\n    color: Colors.textSecondary,\n  },\n  detailValue: {\n    ...Typography.body,\n    color: Colors.text,\n    fontFamily: 'monospace',\n  },\n  toggleButton: {\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 4,\n  },\n  toggleText: {\n    ...Typography.caption,\n    fontWeight: '600',\n  },\n  testButton: {\n    backgroundColor: Colors.primary,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 12,\n    paddingHorizontal: 16,\n    borderRadius: 8,\n    gap: 8,\n  },\n  disabledButton: {\n    opacity: 0.6,\n  },\n  testButtonText: {\n    ...Typography.body,\n    color: Colors.white,\n    fontWeight: '600',\n  },\n});\n\nexport default APIStatusMonitor;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/components/ErrorBoundary.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":71,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":71,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":72,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":72,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":73,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":73,"endColumn":20},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":74,"column":19,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[2028,2135],"text":"\n                We&apos;re sorry for the inconvenience. The app encountered an unexpected error.\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[2028,2135],"text":"\n                We&lsquo;re sorry for the inconvenience. The app encountered an unexpected error.\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[2028,2135],"text":"\n                We&#39;re sorry for the inconvenience. The app encountered an unexpected error.\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[2028,2135],"text":"\n                We&rsquo;re sorry for the inconvenience. The app encountered an unexpected error.\n              "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":78,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":78,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'TouchableOpacity' is not defined.","line":82,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":82,"endColumn":34},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":85,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":85,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'TouchableOpacity' is not defined.","line":88,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":88,"endColumn":34},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":93,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":93,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":97,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":97,"endColumn":20}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Error Boundary Component\n * Catches JavaScript errors anywhere in the component tree\n * Displays user-friendly error UI instead of white screen\n */\n\nimport React, { Component, _ErrorInfo, ReactNode } from 'react';\nimport { View, StyleSheet, ScrollView, SafeAreaView } from 'react-native';\nimport { errorHandler } from '../services/errorHandler';\n\ninterface Props {\n  children: ReactNode;\n  fallback?: ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n  errorId?: string;\n}\n\nclass ErrorBoundary extends Component<Props, State> {\n  constructor(_props: _Props) {\n    super(__props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(_error: _Error): State {\n    // Update state so the next render will show the fallback UI\n    const errorId = Date.now().toString(36); // Simple error ID\n\n    // Log error in dev mode only\n    if (____DEV__) {\n      // No action needed\n    }\n\n    return { hasError: _true, errorId };\n  }\n\n  componentDidCatch(_error: _Error, _errorInfo: _ErrorInfo) {\n    // Log error details in dev mode\n    if (____DEV__) {\n      // No action needed\n    }\n\n    // In production, you might want to send this to an error reporting service\n    // But be careful not to send sensitive information\n  }\n\n  handleReset = () => {\n    this.setState({ hasError: _false, errorId: undefined });\n  };\n\n  handleRestart = () => {\n    // In a real app, this might trigger a full app restart\n    // For now, just reset the error boundary\n    this.handleReset();\n  };\n\n  render() {\n    if (this.state.hasError) {\n      // Custom fallback UI\n      if (this.props.fallback) {\n        return <>{this.props.fallback}</>;\n      }\n\n      // Default error UI\n      return (\n        <SafeAreaView style={styles.container}>\n          <ScrollView contentContainerStyle={styles.content}>\n            <View style={styles.errorCard}>\n              <Text style={styles.errorIcon}>⚠️</Text>\n              <Text style={styles.title}>Oops! Something went wrong</Text>\n              <Text style={styles.message}>\n                We're sorry for the inconvenience. The app encountered an unexpected error.\n              </Text>\n\n              {__DEV__ && this.state.errorId && (\n                <Text style={styles.errorId}>Error ID: {this.state.errorId}</Text>\n              )}\n\n              <View style={styles.buttonContainer}>\n                <TouchableOpacity\n                  style={[styles.button, styles.primaryButton]}\n                  onPress={this.handleRestart}>\n                  <Text style={styles.primaryButtonText}>Try Again</Text>\n                </TouchableOpacity>\n\n                <TouchableOpacity\n                  style={[styles.button, styles.secondaryButton]}\n                  onPress={() => {\n                    errorHandler.showSupportInfo(this.state.errorId);\n                  }}>\n                  <Text style={styles.secondaryButtonText}>Contact Support</Text>\n                </TouchableOpacity>\n              </View>\n\n              <Text style={styles.helpText}>\n                If this problem persists, please contact your manager or IT support.\n              </Text>\n            </View>\n          </ScrollView>\n        </SafeAreaView>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5',\n  },\n  content: {\n    flexGrow: 1,\n    justifyContent: 'center',\n    padding: 20,\n  },\n  errorCard: {\n    backgroundColor: 'white',\n    borderRadius: 12,\n    padding: 24,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n    alignItems: 'center',\n  },\n  errorIcon: {\n    fontSize: 48,\n    marginBottom: 16,\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#333',\n    marginBottom: 8,\n    textAlign: 'center',\n  },\n  message: {\n    fontSize: 16,\n    color: '#666',\n    textAlign: 'center',\n    marginBottom: 24,\n    lineHeight: 22,\n  },\n  errorId: {\n    fontSize: 12,\n    color: '#999',\n    marginBottom: 16,\n    fontFamily: 'monospace',\n  },\n  buttonContainer: {\n    width: '100%',\n    marginBottom: 16,\n  },\n  button: {\n    paddingVertical: 12,\n    paddingHorizontal: 24,\n    borderRadius: 8,\n    marginVertical: 6,\n    alignItems: 'center',\n  },\n  primaryButton: {\n    backgroundColor: '#007AFF',\n  },\n  primaryButtonText: {\n    color: 'white',\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  secondaryButton: {\n    backgroundColor: 'white',\n    borderWidth: 1,\n    borderColor: '#007AFF',\n  },\n  secondaryButtonText: {\n    color: '#007AFF',\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  helpText: {\n    fontSize: 14,\n    color: '#999',\n    textAlign: 'center',\n    fontStyle: 'italic',\n  },\n});\n\nexport default ErrorBoundary;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/components/Logo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/components/__tests__/CartIcon.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_badge' is assigned a value but never used.","line":51,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":51,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_badgeText' is assigned a value but never used.","line":71,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":71,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_badgeText' is assigned a value but never used.","line":96,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":96,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_touchable' is assigned a value but never used.","line":104,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":104,"endColumn":21}],"suppressedMessages":[{"ruleId":"react/display-name","severity":2,"message":"Component definition is missing display name","line":13,"column":10,"nodeType":"ArrowFunctionExpression","messageId":"noDisplayName","endLine":15,"endColumn":4,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { render, fireEvent } from '@testing-library/react-native';\nimport { StyleSheet } from 'react-native';\nimport CartIcon from '../cart/CartIcon';\nimport { Colors } from '../../constants/Colors';\nimport { ThemeProvider } from '../../design-system/ThemeProvider'; // Assuming ThemeProvider is needed\n\n// Mock react-native-vector-icons/MaterialIcons\njest.mock('react-native-vector-icons/MaterialIcons', () => {\n  const RealIcon = jest.requireActual('react-native-vector-icons/MaterialIcons');\n  // Mock the specific icon being used in CartIcon\n  // eslint-disable-next-line react/display-name\n  return (props: _unknown) => (\n    <RealIcon name={props.name} size={props.size} color={props.color} testID=\"mock-icon\" />\n  );\n});\n\nconst mockTheme = {\n  colors: {\n    white: Colors.white,\n    primary: Colors.primary,\n    secondary: Colors.secondary,\n    background: Colors.background,\n    text: Colors.text,\n    border: Colors.border,\n    // Add other colors from defaultTheme if needed\n  },\n};\n\n// Helper to render with ThemeProvider if your component uses useTheme\nconst renderWithProviders = (ui: React.ReactElement) => {\n  return render(<ThemeProvider theme={mockTheme}>{ui}</ThemeProvider>);\n};\n\ndescribe('CartIcon', () => {\n  it('renders with correct color and no badge when itemCount is 0', () => {\n    renderWithProviders(\n      <CartIcon\n        count={0}\n        onPress={() => {\n          // No-op\n        }}\n        testID=\"cart-icon\"\n      />,\n    );\n\n    const icon = screen.getByTestId('mock-icon'); // Using the mock icon's testID\n    expect(icon.props.color).toBe(Colors.onPrimary);\n\n    // Badge should not be present\n    const _badge = screen.queryByText(/\\d+/); // Query for any digit representing the count\n    expect(__badge).toBeNull();\n  });\n\n  it('renders with alertSoft color and badge when itemCount is greater than 0', () => {\n    const itemCount = 5;\n    renderWithProviders(\n      <CartIcon\n        count={itemCount}\n        onPress={() => {\n          // No-op\n        }}\n        testID=\"cart-icon\"\n      />,\n    );\n\n    const icon = screen.getByTestId('mock-icon');\n    expect(icon.props.color).toBe(Colors.alertSoft);\n\n    // Badge should be visible with the correct count\n    const _badgeText = screen.getByText(itemCount.toString());\n    expect(__badgeText).toBeDefined();\n\n    // Check badge background color by inspecting its parent style\n    const badgeView = screen.getByTestId('cart-badge');\n    // Note: Accessing style like this can be brittle if styles are deeply nested or computed.\n    // However, for a direct style like backgroundColor, it's often acceptable.\n    // We need to find the correct property in the flattened style object.\n    // React Native Testing Library might flatten styles, so direct access might work.\n    // If StyleSheet.flatten was used internally by the testing library or component:\n    const flattenedStyle = StyleSheet.flatten(badgeView.props.style);\n    expect(flattenedStyle.backgroundColor).toBe(Colors.alertStrong);\n  });\n\n  it('displays \"99+\" in badge when itemCount is greater than 99', () => {\n    renderWithProviders(\n      <CartIcon\n        count={150}\n        onPress={() => {\n          // No-op\n        }}\n        testID=\"cart-icon\"\n      />,\n    );\n\n    const _badgeText = screen.getByText('99+');\n    expect(__badgeText).toBeDefined();\n  });\n\n  it('calls onPress when pressed', () => {\n    const mockOnPress = jest.fn();\n    renderWithProviders(<CartIcon count={0} onPress={mockOnPress} testID=\"cart-icon-press\" />);\n\n    const _touchable = screen.getByTestId('cart-icon-press');\n    fireEvent.press(__touchable);\n    expect(__mockOnPress).toHaveBeenCalledTimes(1);\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/components/__tests__/ErrorBoundary.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/components/accessibility/AccessibleView.tsx","messages":[{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { position: 'absolute', top: 0, left: 0, zIndex: 9999 }","line":122,"column":14,"nodeType":"ObjectExpression","endLine":127,"endColumn":8},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: {\n  backgroundColor: '#000',\n  color: '#fff',\n  padding: 8,\n  textDecorationLine: 'underline'\n}","line":135,"column":18,"nodeType":"ObjectExpression","endLine":140,"endColumn":12}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {\n  View,\n  ViewProps,\n  AccessibilityRole,\n  AccessibilityState,\n  AccessibilityProps,\n} from 'react-native';\nimport { createAccessibilityState } from '../../utils/accessibility';\n\n// Enhanced accessibility props\nexport interface AccessibleViewProps extends ViewProps, Omit<AccessibilityProps, 'accessible'> {\n  children: React.ReactNode;\n  // Enhanced accessibility options\n  accessibilityLabel?: string;\n  accessibilityHint?: string;\n  accessibilityRole?: AccessibilityRole;\n  accessibilityState?:\n    | AccessibilityState\n    | {\n        selected?: boolean;\n        disabled?: boolean;\n        checked?: boolean;\n        expanded?: boolean;\n        busy?: boolean;\n      };\n  // Semantic options\n  semanticRole?: 'header' | 'main' | 'navigation' | 'section' | 'footer' | 'article';\n  focusable?: boolean;\n  importantForAccessibility?: 'auto' | 'yes' | 'no' | 'no-hide-descendants';\n  // Screen reader optimizations\n  screenReaderOnly?: boolean;\n  // Custom accessibility announcements\n  accessibilityAnnouncement?: string;\n}\n\nconst AccessibleView: React.FC<AccessibleViewProps> = ({\n  children,\n  accessibilityLabel,\n  accessibilityHint,\n  accessibilityRole,\n  accessibilityState,\n  _semanticRole,\n  focusable = false,\n  importantForAccessibility = 'auto',\n  screenReaderOnly = false,\n  _accessibilityAnnouncement,\n  style,\n  ...viewProps\n}) => {\n  // Convert semantic role to accessibility role\n  const getAccessibilityRole = (): AccessibilityRole | undefined => {\n    if (__accessibilityRole) {\n      return accessibilityRole;\n    }\n\n    switch (__semanticRole) {\n      case 'header':\n        return 'header';\n      case 'navigation':\n        return 'menu';\n      case 'main':\n      case 'section':\n      case 'article':\n      case 'footer':\n        return 'none'; // Use 'none' for structural elements\n      default:\n        return undefined;\n    }\n  };\n\n  // Normalize accessibility state\n  const _normalizedAccessibilityState = accessibilityState\n    ? 'selected' in accessibilityState || 'disabled' in accessibilityState\n      ? createAccessibilityState(accessibilityState as unknown)\n      : (accessibilityState as AccessibilityState)\n    : undefined;\n\n  // Screen reader only styles\n  const screenReaderOnlyStyle = screenReaderOnly\n    ? {\n        position: 'absolute' as const,\n        left: -10000,\n        width: 1,\n        height: 1,\n        overflow: 'hidden' as const,\n      }\n    : {};\n\n  const accessibilityProps: AccessibilityProps = {\n    accessible: !!(accessibilityLabel || accessibilityHint || accessibilityRole),\n    accessibilityLabel,\n    accessibilityHint,\n    accessibilityRole: getAccessibilityRole(),\n    accessibilityState: _normalizedAccessibilityState,\n    importantForAccessibility,\n    ...(focusable && { focusable: true }),\n  };\n\n  return (\n    <View style={[style, screenReaderOnlyStyle]} {...accessibilityProps} {...viewProps}>\n      {children}\n    </View>\n  );\n};\n\n// Skip Links Component for keyboard navigation\nexport interface SkipLinksProps {\n  links: Array<{\n    label: string;\n    target: string;\n    onPress: () => void;\n  }>;\n}\n\nexport const SkipLinks: React.FC<SkipLinksProps> = ({ links }) => {\n  return (\n    <AccessibleView\n      semanticRole=\"navigation\"\n      accessibilityLabel=\"Skip navigation\"\n      screenReaderOnly\n      style={{\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        zIndex: 9999,\n      }}>\n      {links.map((__link, _index) => (\n        <AccessibleView\n          key={index}\n          accessibilityRole=\"link\"\n          accessibilityLabel={link.label}\n          focusable\n          onTouchEnd={link.onPress}\n          style={{\n            backgroundColor: '#000',\n            color: '#fff',\n            padding: 8,\n            textDecorationLine: 'underline',\n          }}>\n          {/* Skip link content would go here */}\n        </AccessibleView>\n      ))}\n    </AccessibleView>\n  );\n};\n\n// Landmark component for page structure\nexport interface LandmarkProps {\n  children: React.ReactNode;\n  role: 'banner' | 'main' | 'navigation' | 'complementary' | 'contentinfo' | 'search' | 'form';\n  label?: string;\n  style?: ViewProps['style'];\n}\n\nexport const Landmark: React.FC<LandmarkProps> = ({ children, _role, label, style }) => {\n  const getAccessibilityRole = (): AccessibilityRole => {\n    switch (__role) {\n      case 'banner':\n        return 'header';\n      case 'navigation':\n        return 'menu';\n      case 'search':\n        return 'search';\n      case 'main':\n      case 'complementary':\n      case 'contentinfo':\n      case 'form':\n      default:\n        return 'none';\n    }\n  };\n\n  return (\n    <AccessibleView\n      accessibilityRole={getAccessibilityRole()}\n      accessibilityLabel={label}\n      style={style}>\n      {children}\n    </AccessibleView>\n  );\n};\n\n// Live Region for dynamic content announcements\nexport interface LiveRegionProps {\n  children: React.ReactNode;\n  politeness?: 'polite' | 'assertive' | 'off';\n  atomic?: boolean;\n  style?: ViewProps['style'];\n}\n\nexport const LiveRegion: React.FC<LiveRegionProps> = ({\n  children,\n  politeness = 'polite',\n  atomic = false,\n  style,\n}) => {\n  return (\n    <AccessibleView\n      accessibilityLiveRegion={politeness}\n      accessibilityLabel={atomic ? 'Live region' : undefined}\n      style={style}>\n      {children}\n    </AccessibleView>\n  );\n};\n\n// Focus Trap for modals and overlays\nexport interface FocusTrapProps {\n  children: React.ReactNode;\n  active: boolean;\n  onEscape?: () => void;\n  style?: ViewProps['style'];\n}\n\nexport const FocusTrap: React.FC<FocusTrapProps> = ({ children, _active, _onEscape, style }) => {\n  // In a real implementation, this would manage focus trapping\n  // For now, it's a semantic wrapper\n\n  return (\n    <AccessibleView\n      importantForAccessibility={active ? 'yes' : 'no-hide-descendants'}\n      accessibilityViewIsModal={active}\n      style={style}>\n      {children}\n    </AccessibleView>\n  );\n};\n\nexport default AccessibleView;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/components/analytics/Chart.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":61,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":61,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":78,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":78,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":152,"column":26,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":152,"endColumn":30},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":168,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":168,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_radius' is assigned a value but never used.","line":180,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":180,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_centerX' is assigned a value but never used.","line":181,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":181,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_centerY' is assigned a value but never used.","line":182,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":182,"endColumn":19},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":198,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":198,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":224,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":224,"endColumn":22}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { View, StyleSheet, Dimensions } from 'react-native';\n\n// Fynlo POS Color Scheme\nconst Colors = {\n  primary: '#00A651',\n  secondary: '#0066CC',\n  success: '#00A651',\n  warning: '#FF6B35',\n  danger: '#E74C3C',\n  background: '#F5F5F5',\n  white: '#FFFFFF',\n  lightGray: '#E5E5E5',\n  mediumGray: '#999999',\n  darkGray: '#666666',\n  text: '#333333',\n  lightText: '#666666',\n  border: '#DDDDDD',\n};\n\nconst { width: screenWidth } = Dimensions.get('window');\n\ninterface DataPoint {\n  label: string;\n  value: number;\n  color?: string;\n}\n\ninterface ChartProps {\n  data: DataPoint[];\n  type?: 'line' | 'bar' | 'pie';\n  title?: string;\n  height?: number;\n  showValues?: boolean;\n}\n\nconst Chart: React.FC<ChartProps> = ({\n  data,\n  _type = 'bar',\n  title,\n  height = 200,\n  showValues = true,\n}) => {\n  const chartWidth = screenWidth - 80;\n  const maxValue = Math.max(...data.map(d => d.value));\n\n  const renderBarChart = () => {\n    const _barWidth = chartWidth / data.length - 10;\n\n    return (\n      <View style={styles.chartContainer}>\n        <View style={[styles.barsContainer, { height }]}>\n          {data.map((__item, _index) => {\n            const _barHeight = (item.value / maxValue) * (height - 40);\n            const _color = item.color || Colors.primary;\n\n            return (\n              <View key={index} style={styles.barWrapper}>\n                <View style={styles.barContainer}>\n                  {showValues && (\n                    <Text style={styles.barValue}>\n                      {typeof item.value === 'number' && item.value > 1000\n                        ? item.value.toLocaleString()\n                        : item.value}\n                    </Text>\n                  )}\n                  <View\n                    style={[\n                      styles.bar,\n                      {\n                        height: _barHeight,\n                        width: _barWidth,\n                        backgroundColor: _color,\n                      },\n                    ]}\n                  />\n                </View>\n                <Text style={styles.barLabel} numberOfLines={2}>\n                  {item.label}\n                </Text>\n              </View>\n            );\n          })}\n        </View>\n      </View>\n    );\n  };\n\n  const renderLineChart = () => {\n    const pointRadius = 4;\n    const lineHeight = height - 60;\n    const stepWidth = chartWidth / (data.length - 1);\n\n    return (\n      <View style={styles.chartContainer}>\n        <View style={[styles.lineContainer, { height }]}>\n          <View style={styles.lineChartArea}>\n            {/* Grid lines */}\n            {[0.25, 0.5, 0.75, 1].map((__ratio, _index) => (\n              <View\n                key={index}\n                style={[\n                  styles.gridLine,\n                  {\n                    bottom: ratio * lineHeight,\n                    width: _chartWidth,\n                  },\n                ]}\n              />\n            ))}\n\n            {/* Data points and line */}\n            <View style={styles.lineWrapper}>\n              {data.map((__item, _index) => {\n                const pointHeight = (item.value / maxValue) * lineHeight;\n                const pointX = index * stepWidth;\n\n                return (\n                  <View key={index}>\n                    {/* Line segment */}\n                    {index < data.length - 1 && (\n                      <View\n                        style={[\n                          styles.lineSegment,\n                          {\n                            left: _pointX,\n                            bottom: _pointHeight,\n                            width: _stepWidth,\n                            transform: [\n                              {\n                                rotate: `${Math.atan2(\n                                  (data[index + 1].value / maxValue) * lineHeight - pointHeight,\n                                  stepWidth,\n                                )}rad`,\n                              },\n                            ],\n                          },\n                        ]}\n                      />\n                    )}\n\n                    {/* Data point */}\n                    <View\n                      style={[\n                        styles.dataPoint,\n                        {\n                          left: pointX - pointRadius,\n                          bottom: pointHeight - pointRadius,\n                        },\n                      ]}>\n                      {showValues && (\n                        <Text style={styles.pointValue}>\n                          {typeof item.value === 'number' && item.value > 1000\n                            ? item.value.toLocaleString()\n                            : item.value}\n                        </Text>\n                      )}\n                    </View>\n                  </View>\n                );\n              })}\n            </View>\n          </View>\n\n          {/* X-axis labels */}\n          <View style={styles.xAxisLabels}>\n            {data.map((__item, _index) => (\n              <Text key={index} style={styles.axisLabel} numberOfLines={1}>\n                {item.label}\n              </Text>\n            ))}\n          </View>\n        </View>\n      </View>\n    );\n  };\n\n  const renderPieChart = () => {\n    const total = data.reduce((__sum, _item) => sum + item.value, 0);\n    const _radius = Math.min(__chartWidth, _height) / 3;\n    const _centerX = chartWidth / 2;\n    const _centerY = height / 2;\n\n    return (\n      <View style={styles.chartContainer}>\n        <View style={[styles.pieContainer, { height }]}>\n          <View style={styles.pieChart}>\n            {/* Simple pie representation with rectangles */}\n            {data.map((__item, _index) => {\n              const percentage = (item.value / total) * 100;\n              const _color = item.color || `hsl(${(index * 360) / data.length}, 70%, 50%)`;\n\n              return (\n                <View key={index} style={styles.pieSegment}>\n                  <View\n                    style={[styles.pieColor, { backgroundColor: _color, width: `${percentage}%` }]}\n                  />\n                  <Text style={styles.pieLabel}>\n                    {item.label}: {percentage.toFixed(1)}%\n                  </Text>\n                </View>\n              );\n            })}\n          </View>\n        </View>\n      </View>\n    );\n  };\n\n  const renderChart = () => {\n    switch (__type) {\n      case 'line':\n        return renderLineChart();\n      case 'pie':\n        return renderPieChart();\n      case 'bar':\n      default:\n        return renderBarChart();\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      {title && <Text style={styles.title}>{title}</Text>}\n      {renderChart()}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    padding: 16,\n    marginVertical: 8,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  title: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 16,\n    textAlign: 'center',\n  },\n  chartContainer: {\n    alignItems: 'center',\n  },\n  barsContainer: {\n    flexDirection: 'row',\n    alignItems: 'flex-end',\n    justifyContent: 'space-around',\n    width: '100%',\n  },\n  barWrapper: {\n    alignItems: 'center',\n    flex: 1,\n  },\n  barContainer: {\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    height: '80%',\n  },\n  bar: {\n    borderRadius: 4,\n    minHeight: 4,\n  },\n  barValue: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  barLabel: {\n    fontSize: 10,\n    color: Colors.lightText,\n    textAlign: 'center',\n    marginTop: 8,\n  },\n  lineContainer: {\n    width: '100%',\n  },\n  lineChartArea: {\n    position: 'relative',\n    height: '80%',\n    width: '100%',\n  },\n  gridLine: {\n    position: 'absolute',\n    height: 1,\n    backgroundColor: Colors.lightGray,\n  },\n  lineWrapper: {\n    position: 'relative',\n    width: '100%',\n    height: '100%',\n  },\n  lineSegment: {\n    position: 'absolute',\n    height: 2,\n    backgroundColor: Colors.primary,\n    transformOrigin: 'left center',\n  },\n  dataPoint: {\n    position: 'absolute',\n    width: 8,\n    height: 8,\n    borderRadius: 4,\n    backgroundColor: Colors.primary,\n    borderWidth: 2,\n    borderColor: Colors.white,\n  },\n  pointValue: {\n    position: 'absolute',\n    top: -20,\n    left: -10,\n    fontSize: 10,\n    fontWeight: '500',\n    color: Colors.text,\n    textAlign: 'center',\n    minWidth: 20,\n  },\n  xAxisLabels: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginTop: 8,\n    height: '20%',\n  },\n  axisLabel: {\n    fontSize: 10,\n    color: Colors.lightText,\n    textAlign: 'center',\n    flex: 1,\n  },\n  pieContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  pieChart: {\n    width: '100%',\n  },\n  pieSegment: {\n    marginVertical: 4,\n  },\n  pieColor: {\n    height: 20,\n    borderRadius: 4,\n    marginBottom: 4,\n  },\n  pieLabel: {\n    fontSize: 12,\n    color: Colors.text,\n    fontWeight: '500',\n  },\n});\n\nexport default Chart;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/components/analytics/TableRevenueWidget.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_mockData' is assigned a value but never used.","line":42,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_renderTableRow' is assigned a value but never used.","line":109,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":109,"endColumn":24}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  ScrollView,\n  TouchableOpacity,\n  ActivityIndicator,\n  RefreshControl,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useTheme } from '../../design-system/ThemeProvider';\n\ninterface TableRevenueData {\n  table_id: string;\n  table_name: string;\n  section_name: string;\n  total_revenue: number;\n  order_count: number;\n  average_order_value: number;\n}\n\ninterface TableRevenueWidgetProps {\n  onPress?: () => void;\n  compact?: boolean;\n}\n\nconst TableRevenueWidget: React.FC<TableRevenueWidgetProps> = ({ onPress, compact = false }) => {\n  const { theme } = useTheme();\n  const [data, setData] = useState<TableRevenueData[]>([]);\n  const [loading, setLoading] = useState(__true);\n  const [refreshing, setRefreshing] = useState(__false);\n  const [error, setError] = useState<string | null>(__null);\n  const [selectedPeriod, setSelectedPeriod] = useState<'today' | 'week' | 'month'>('today');\n\n  const fetchTableRevenue = async () => {\n    try {\n      setLoading(__true);\n      setError(__null);\n\n      // Mock data for demo - in real app, call API\n      const _mockData: TableRevenueData[] = [\n        {\n          table_id: 'table1',\n          table_name: 'T1',\n          section_name: 'Main Dining',\n          total_revenue: 245.75,\n          order_count: 8,\n          average_order_value: 30.72,\n        },\n        {\n          table_id: 'table4',\n          table_name: 'T4',\n          section_name: 'Main Dining',\n          total_revenue: 189.5,\n          order_count: 5,\n          average_order_value: 37.9,\n        },\n        {\n          table_id: 'table3',\n          table_name: 'T3',\n          section_name: 'Main Dining',\n          total_revenue: 156.25,\n          order_count: 4,\n          average_order_value: 39.06,\n        },\n        {\n          table_id: 'table5',\n          table_name: 'P1',\n          section_name: 'Patio',\n          total_revenue: 98.75,\n          order_count: 3,\n          average_order_value: 32.92,\n        },\n        {\n          table_id: 'table6',\n          table_name: 'B1',\n          section_name: 'Bar Area',\n          total_revenue: 67.5,\n          order_count: 6,\n          average_order_value: 11.25,\n        },\n      ];\n\n      // Simulate API delay\n      await new Promise(_resolve => setTimeout(__resolve, 500));\n\n      setData(__mockData);\n    } catch (__err) {\n      setError('Failed to load table revenue data');\n    } finally {\n      setLoading(__false);\n      setRefreshing(__false);\n    }\n  };\n\n  useEffect(() => {\n    fetchTableRevenue();\n  }, [selectedPeriod]);\n\n  const onRefresh = () => {\n    setRefreshing(__true);\n    fetchTableRevenue();\n  };\n\n  const totalRevenue = data.reduce((__sum, _table) => sum + table.total_revenue, 0);\n  const totalOrders = data.reduce((__sum, _table) => sum + table.order_count, 0);\n\n  const _renderTableRow = (table: _TableRevenueData, _index: _number) => (\n    <View\n      key={table.table_id}\n      style={[styles.tableRow, { borderBottomColor: theme.colors.border }]}>\n      <View style={styles.tableInfo}>\n        <Text style={[styles.tableName, { color: theme.colors.text }]}>{table.table_name}</Text>\n        <Text style={[styles.sectionName, { color: theme.colors.textSecondary }]}>\n          {table.section_name}\n        </Text>\n      </View>\n      <View style={styles.revenueInfo}>\n        <Text style={[styles.revenue, { color: theme.colors.success }]}>\n          £{table.total_revenue.toFixed(2)}\n        </Text>\n        <Text style={[styles.orderCount, { color: theme.colors.textSecondary }]}>\n          {table.order_count} orders\n        </Text>\n      </View>\n      <View style={styles.avgInfo}>\n        <Text style={[styles.avgOrder, { color: theme.colors.text }]}>\n          £{table.average_order_value.toFixed(2)}\n        </Text>\n        <Text style={[styles.avgLabel, { color: theme.colors.textSecondary }]}>avg</Text>\n      </View>\n    </View>\n  );\n\n  if (loading && !refreshing) {\n    return (\n      <View style={[styles.container, { backgroundColor: theme.colors.white }]}>\n        <View style={styles.header}>\n          <Text style={[styles.title, { color: theme.colors.text }]}>Revenue by Table</Text>\n        </View>\n        <View style={styles.loadingContainer}>\n          <ActivityIndicator size=\"large\" color={theme.colors.primary} />\n          <Text style={[styles.loadingText, { color: theme.colors.textSecondary }]}>\n            Loading...\n          </Text>\n        </View>\n      </View>\n    );\n  }\n\n  if (__error) {\n    return (\n      <View style={[styles.container, { backgroundColor: theme.colors.white }]}>\n        <View style={styles.header}>\n          <Text style={[styles.title, { color: theme.colors.text }]}>Revenue by Table</Text>\n        </View>\n        <View style={styles.errorContainer}>\n          <Icon name=\"error\" size={24} color={theme.colors.danger} />\n          <Text style={[styles.errorText, { color: theme.colors.danger }]}>{error}</Text>\n          <TouchableOpacity\n            style={[styles.retryButton, { backgroundColor: theme.colors.primary }]}\n            onPress={fetchTableRevenue}>\n            <Text style={[styles.retryText, { color: theme.colors.white }]}>Retry</Text>\n          </TouchableOpacity>\n        </View>\n      </View>\n    );\n  }\n\n  return (\n    <TouchableOpacity\n      style={[styles.container, { backgroundColor: theme.colors.white }]}\n      onPress={onPress}\n      activeOpacity={onPress ? 0.7 : 1}>\n      <View style={styles.header}>\n        <View>\n          <Text style={[styles.title, { color: theme.colors.text }]}>Revenue by Table</Text>\n          <Text style={[styles.subtitle, { color: theme.colors.textSecondary }]}>\n            {selectedPeriod === 'today'\n              ? 'Today'\n              : selectedPeriod === 'week'\n              ? 'This Week'\n              : 'This Month'}\n          </Text>\n        </View>\n        {onPress && <Icon name=\"chevron-right\" size={24} color={theme.colors.textSecondary} />}\n      </View>\n\n      <View style={styles.periodSelector}>\n        {(['today', 'week', 'month'] as const).map(period => (\n          <TouchableOpacity\n            key={period}\n            style={[\n              styles.periodButton,\n              { borderColor: theme.colors.border },\n              selectedPeriod === period && {\n                backgroundColor: theme.colors.primary,\n                borderColor: theme.colors.primary,\n              },\n            ]}\n            onPress={() => setSelectedPeriod(__period)}>\n            <Text\n              style={[\n                styles.periodButtonText,\n                { color: theme.colors.text },\n                selectedPeriod === period && { color: theme.colors.white },\n              ]}>\n              {period === 'today' ? 'Today' : period === 'week' ? 'Week' : 'Month'}\n            </Text>\n          </TouchableOpacity>\n        ))}\n      </View>\n\n      <View style={[styles.summaryRow, { borderBottomColor: theme.colors.border }]}>\n        <View style={styles.summaryItem}>\n          <Text style={[styles.summaryValue, { color: theme.colors.primary }]}>\n            £{totalRevenue.toFixed(2)}\n          </Text>\n          <Text style={[styles.summaryLabel, { color: theme.colors.textSecondary }]}>\n            Total Revenue\n          </Text>\n        </View>\n        <View style={styles.summaryItem}>\n          <Text style={[styles.summaryValue, { color: theme.colors.secondary }]}>\n            {totalOrders}\n          </Text>\n          <Text style={[styles.summaryLabel, { color: theme.colors.textSecondary }]}>\n            Total Orders\n          </Text>\n        </View>\n        <View style={styles.summaryItem}>\n          <Text style={[styles.summaryValue, { color: theme.colors.warning }]}>{data.length}</Text>\n          <Text style={[styles.summaryLabel, { color: theme.colors.textSecondary }]}>\n            Active Tables\n          </Text>\n        </View>\n      </View>\n\n      <ScrollView\n        style={styles.tableList}\n        refreshControl={\n          <RefreshControl\n            refreshing={refreshing}\n            onRefresh={onRefresh}\n            colors={[theme.colors.primary]}\n          />\n        }\n        showsVerticalScrollIndicator={false}>\n        {data.length === 0 ? (\n          <View style={styles.emptyContainer}>\n            <Icon name=\"restaurant\" size={48} color={theme.colors.lightGray} />\n            <Text style={[styles.emptyText, { color: theme.colors.textSecondary }]}>\n              No table revenue data available\n            </Text>\n          </View>\n        ) : (\n          <>\n            <View style={[styles.headerRow, { borderBottomColor: theme.colors.border }]}>\n              <Text style={[styles.headerText, { color: theme.colors.textSecondary }]}>Table</Text>\n              <Text style={[styles.headerText, { color: theme.colors.textSecondary }]}>\n                Revenue\n              </Text>\n              <Text style={[styles.headerText, { color: theme.colors.textSecondary }]}>\n                Avg Order\n              </Text>\n            </View>\n            {data.slice(0, compact ? 3 : data.length).map(__renderTableRow)}\n            {compact && data.length > 3 && (\n              <TouchableOpacity style={styles.viewMoreButton} onPress={onPress}>\n                <Text style={[styles.viewMoreText, { color: theme.colors.primary }]}>\n                  View all {data.length} tables\n                </Text>\n                <Icon name=\"arrow-forward\" size={16} color={theme.colors.primary} />\n              </TouchableOpacity>\n            )}\n          </>\n        )}\n      </ScrollView>\n    </TouchableOpacity>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 12,\n    margin: 8,\n    padding: 16,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 16,\n  },\n  title: {\n    fontSize: 18,\n    fontWeight: 'bold',\n  },\n  subtitle: {\n    fontSize: 14,\n    marginTop: 2,\n  },\n  periodSelector: {\n    flexDirection: 'row',\n    marginBottom: 16,\n    gap: 8,\n  },\n  periodButton: {\n    paddingHorizontal: 12,\n    paddingVertical: 6,\n    borderRadius: 16,\n    borderWidth: 1,\n  },\n  periodButtonText: {\n    fontSize: 12,\n    fontWeight: '500',\n  },\n  summaryRow: {\n    flexDirection: 'row',\n    paddingBottom: 16,\n    marginBottom: 16,\n    borderBottomWidth: 1,\n  },\n  summaryItem: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  summaryValue: {\n    fontSize: 18,\n    fontWeight: 'bold',\n  },\n  summaryLabel: {\n    fontSize: 12,\n    marginTop: 4,\n  },\n  tableList: {\n    maxHeight: 200,\n  },\n  headerRow: {\n    flexDirection: 'row',\n    paddingBottom: 8,\n    marginBottom: 8,\n    borderBottomWidth: 1,\n  },\n  headerText: {\n    flex: 1,\n    fontSize: 12,\n    fontWeight: '600',\n    textAlign: 'center',\n  },\n  tableRow: {\n    flexDirection: 'row',\n    paddingVertical: 12,\n    borderBottomWidth: 1,\n  },\n  tableInfo: {\n    flex: 1,\n  },\n  tableName: {\n    fontSize: 14,\n    fontWeight: '600',\n  },\n  sectionName: {\n    fontSize: 12,\n    marginTop: 2,\n  },\n  revenueInfo: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  revenue: {\n    fontSize: 14,\n    fontWeight: '600',\n  },\n  orderCount: {\n    fontSize: 12,\n    marginTop: 2,\n  },\n  avgInfo: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  avgOrder: {\n    fontSize: 14,\n    fontWeight: '600',\n  },\n  avgLabel: {\n    fontSize: 12,\n    marginTop: 2,\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingVertical: 40,\n  },\n  loadingText: {\n    marginTop: 8,\n    fontSize: 14,\n  },\n  errorContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingVertical: 40,\n  },\n  errorText: {\n    fontSize: 14,\n    marginTop: 8,\n    textAlign: 'center',\n  },\n  retryButton: {\n    marginTop: 16,\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    borderRadius: 8,\n  },\n  retryText: {\n    fontSize: 14,\n    fontWeight: '600',\n  },\n  emptyContainer: {\n    alignItems: 'center',\n    paddingVertical: 40,\n  },\n  emptyText: {\n    fontSize: 14,\n    marginTop: 12,\n    textAlign: 'center',\n  },\n  viewMoreButton: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingVertical: 12,\n    gap: 4,\n  },\n  viewMoreText: {\n    fontSize: 14,\n    fontWeight: '500',\n  },\n});\n\nexport default TableRevenueWidget;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/components/cart/CartIcon.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":39,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":39,"endColumn":18},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.container","line":49,"column":5,"nodeType":"Property","endLine":55,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.iconContainer","line":56,"column":5,"nodeType":"Property","endLine":60,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.badge","line":61,"column":5,"nodeType":"Property","endLine":74,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.badgeTxt","line":75,"column":5,"nodeType":"Property","endLine":80,"endColumn":6}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { View, TouchableOpacity, StyleSheet } from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useTheme } from '../../design-system/ThemeProvider';\n\ninterface Props {\n  count: number;\n  onPress?: () => void;\n  testID?: string;\n  size?: number;\n  // fill prop is removed as color logic is internal and based on itemCount\n}\n\nconst CartIcon: React.FC<Props> = ({ count, _onPress, testID, size = 40 }) => {\n  const { theme } = useTheme();\n  const styles = createStyles(__theme);\n\n  const iconColor = count > 0 ? theme.colors.danger[500] : theme.colors.text;\n  const hitSlop = { top: 10, bottom: 10, left: 10, right: 10 };\n\n  const accessibilityLabel =\n    count > 0\n      ? `Shopping cart with ${count} ${count === 1 ? 'item' : 'items'}`\n      : 'Shopping cart, empty';\n\n  return (\n    <TouchableOpacity\n      style={styles.container}\n      onPress={onPress}\n      accessibilityRole=\"button\"\n      accessibilityLabel={accessibilityLabel}\n      accessibilityHint=\"Double tap to view your cart\"\n      testID={testID}\n      hitSlop={hitSlop}>\n      <View style={styles.iconContainer}>\n        <Icon name=\"shopping-cart\" size={size} color={iconColor} />\n        {count > 0 && (\n          <View style={styles.badge} testID=\"cart-badge\">\n            <Text style={styles.badgeTxt}>{count > 99 ? '99+' : count}</Text>\n          </View>\n        )}\n      </View>\n    </TouchableOpacity>\n  );\n};\n\nconst createStyles = (theme: _unknown) =>\n  StyleSheet.create({\n    container: {\n      padding: 8,\n      minWidth: 44,\n      minHeight: 44,\n      alignItems: 'center',\n      justifyContent: 'center',\n    },\n    iconContainer: {\n      position: 'relative',\n      alignItems: 'center',\n      justifyContent: 'center',\n    },\n    badge: {\n      position: 'absolute',\n      top: -8,\n      right: -8,\n      backgroundColor: theme.colors.danger[500],\n      borderRadius: 10,\n      minWidth: 20,\n      height: 20,\n      alignItems: 'center',\n      justifyContent: 'center',\n      paddingHorizontal: 4,\n      borderWidth: 2,\n      borderColor: theme.colors.white,\n    },\n    badgeTxt: {\n      color: theme.colors.white,\n      fontSize: 14,\n      fontWeight: '600',\n      lineHeight: 16,\n    },\n  });\n\nexport default CartIcon;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/components/common/EmptyState.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":26,"column":8,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":26,"endColumn":12},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":27,"column":8,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":27,"endColumn":12},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":28,"column":8,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":28,"endColumn":12},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":35,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":35,"endColumn":16}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { View, StyleSheet, TouchableOpacity } from 'react-native';\nimport { useTheme } from '../../context/ThemeProvider';\n\ninterface EmptyStateProps {\n  icon?: string;\n  title: string;\n  message: string;\n  actionText?: string;\n  onAction?: () => void;\n  testID?: string;\n}\n\nconst EmptyState: React.FC<EmptyStateProps> = ({\n  icon = '📭',\n  title,\n  message,\n  actionText,\n  onAction,\n  testID = 'empty-state',\n}) => {\n  const { theme } = useTheme();\n\n  return (\n    <View style={[styles.container, { backgroundColor: theme.colors.background }]} testID={testID}>\n      <Text style={styles.icon}>{icon}</Text>\n      <Text style={[styles.title, { color: theme.colors.text }]}>{title}</Text>\n      <Text style={[styles.message, { color: theme.colors.textSecondary }]}>{message}</Text>\n\n      {actionText && onAction && (\n        <TouchableOpacity\n          style={[styles.actionButton, { backgroundColor: theme.colors.primary }]}\n          onPress={onAction}\n          testID={`${testID}-action-button`}>\n          <Text style={[styles.actionText, { color: theme.colors.background }]}>{actionText}</Text>\n        </TouchableOpacity>\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingHorizontal: 40,\n    paddingVertical: 60,\n  },\n  icon: {\n    fontSize: 64,\n    marginBottom: 16,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: '600',\n    textAlign: 'center',\n    marginBottom: 8,\n  },\n  message: {\n    fontSize: 16,\n    textAlign: 'center',\n    lineHeight: 24,\n    marginBottom: 24,\n  },\n  actionButton: {\n    paddingHorizontal: 24,\n    paddingVertical: 12,\n    borderRadius: 8,\n    marginTop: 16,\n  },\n  actionText: {\n    fontSize: 16,\n    fontWeight: '600',\n  },\n});\n\nexport default EmptyState;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/components/feedback/ComingSoon.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":10,"column":8,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":10,"endColumn":12},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":11,"column":8,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":11,"endColumn":12},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":12,"column":8,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":12,"endColumn":12}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport Colors from '../../constants/Colors'; // Assuming Colors are centralized\n\nconst ComingSoon: React.FC = () => {\n  return (\n    <View style={styles.container}>\n      <Icon name=\"hourglass-empty\" size={64} color={Colors.primary} />\n      <Text style={styles.title}>Coming Soon!</Text>\n      <Text style={styles.message}>This feature is currently under development.</Text>\n      <Text style={styles.message}>Please check back later.</Text>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: Colors.background,\n    padding: 20,\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: Colors.text,\n    marginTop: 20,\n    marginBottom: 10,\n  },\n  message: {\n    fontSize: 16,\n    color: Colors.darkGray,\n    textAlign: 'center',\n    marginBottom: 5,\n  },\n});\n\nexport default ComingSoon;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/components/feedback/LoadingView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/components/feedback/NotificationSystem.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_screenWidth' is assigned a value but never used.","line":76,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":76,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_timer' is assigned a value but never used.","line":100,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":100,"endColumn":19},{"ruleId":"eslint-comments/no-unused-disable","message":"'react-hooks/exhaustive-deps' rule is disabled but never reported.","line":117,"column":35,"severity":1,"nodeType":null,"fix":{"range":[3105,3160],"text":" "},"suggestions":[{"desc":"Remove `eslint-disable` comment.","fix":{"range":[3105,3160],"text":""}}],"endLine":117,"endColumn":62},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'onHide'. Either exclude it or remove the dependency array. Outer scope values like 'onHide' aren't valid dependencies because mutating them doesn't re-render the component.","line":119,"column":6,"nodeType":"ArrayExpression","endLine":119,"endColumn":31,"suggestions":[{"desc":"Update the dependencies array to be: [notification.id]","fix":{"range":[3174,3199],"text":"[notification.id]"}}]},{"ruleId":"eslint-comments/no-unused-disable","message":"'react-hooks/exhaustive-deps' rule is disabled but never reported.","line":271,"column":35,"severity":1,"nodeType":null,"fix":{"range":[7814,7869],"text":" "},"suggestions":[{"desc":"Remove `eslint-disable` comment.","fix":{"range":[7814,7869],"text":""}}],"endLine":271,"endColumn":62},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'maxNotifications'. Either exclude it or remove the dependency array.","line":274,"column":5,"nodeType":"ArrayExpression","endLine":274,"endColumn":23,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[7898,7916],"text":"[]"}}]}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'hideNotification', 'notification.duration', and 'notification.persistent'. Either include them or remove the dependency array.","line":107,"column":6,"nodeType":"ArrayExpression","endLine":107,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [hideNotification, notification.duration, notification.persistent]","fix":{"range":[2863,2865],"text":"[hideNotification, notification.duration, notification.persistent]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":2,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":2,"source":"import React, { createContext, useState, useEffect } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  Animated,\n  TouchableOpacity,\n  Dimensions,\n  Platform,\n  StatusBar,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\n\n// Clover POS Color Scheme\nconst Colors = {\n  primary: '#00A651',\n  secondary: '#0066CC',\n  success: '#00A651',\n  warning: '#FF6B35',\n  danger: '#E74C3C',\n  info: '#3498DB',\n  background: '#F5F5F5',\n  white: '#FFFFFF',\n  lightGray: '#E5E5E5',\n  mediumGray: '#999999',\n  darkGray: '#666666',\n  text: '#333333',\n  lightText: '#666666',\n  border: '#DDDDDD',\n};\n\nexport interface Notification {\n  id: string;\n  title: string;\n  message: string;\n  type: NotificationType;\n  duration?: number;\n  action?: NotificationAction;\n  persistent?: boolean;\n  position?: NotificationPosition;\n}\n\nexport enum NotificationType {\n  SUCCESS = 'success',\n  ERROR = 'error',\n  WARNING = 'warning',\n  INFO = 'info',\n  LOADING = 'loading',\n}\n\nexport enum NotificationPosition {\n  TOP = 'top',\n  BOTTOM = 'bottom',\n  CENTER = 'center',\n}\n\nexport interface NotificationAction {\n  label: string;\n  onPress: () => void;\n  style?: 'default' | 'primary' | 'danger';\n}\n\ninterface NotificationContextType {\n  showNotification: (notification: Omit<Notification, 'id'>) => string;\n  hideNotification: (id: _string) => void;\n  clearAllNotifications: () => void;\n  showSuccess: (title: _string, message?: _string, duration?: _number) => string;\n  showError: (title: _string, message?: _string, duration?: _number) => string;\n  showWarning: (title: _string, message?: _string, duration?: _number) => string;\n  showInfo: (title: _string, message?: _string, duration?: _number) => string;\n  showLoading: (title: _string, message?: _string) => string;\n}\n\nconst NotificationContext = createContext<NotificationContextType | undefined>(__undefined);\n\nconst { width: _screenWidth, height: screenHeight } = Dimensions.get('window');\nconst statusBarHeight = Platform.OS === 'ios' ? 44 : StatusBar.currentHeight || 0;\n\ninterface NotificationItemProps {\n  notification: Notification;\n  onHide: (id: _string) => void;\n  index: number;\n}\n\nconst NotificationItem: React.FC<NotificationItemProps> = ({ notification, _onHide, index }) => {\n  const [animation] = useState(new Animated.Value(0));\n  const [visible, setVisible] = useState(__true);\n\n  useEffect(() => {\n    // Slide in animation\n    Animated.spring(__animation, {\n      toValue: 1,\n      useNativeDriver: _true,\n      tension: 100,\n      friction: 8,\n    }).start();\n\n    // Auto hide after duration\n    if (!notification.persistent && notification.duration !== 0) {\n      const _timer = setTimeout(() => {\n        hideNotification();\n      }, notification.duration || 4000);\n\n      return () => clearTimeout(__timer);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const hideNotification = useCallback(() => {\n    Animated.timing(__animation, {\n      toValue: 0,\n      duration: 300,\n      useNativeDriver: _true,\n    }).start(() => {\n      setVisible(__false);\n      onHide(notification.id);\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    });\n  }, [notification.id, onHide]);\n\n  const getNotificationStyle = () => {\n    switch (notification.type) {\n      case NotificationType.SUCCESS:\n        return { backgroundColor: Colors.success, iconName: 'check-circle' };\n      case NotificationType.ERROR:\n        return { backgroundColor: Colors.danger, iconName: 'error' };\n      case NotificationType.WARNING:\n        return { backgroundColor: Colors.warning, iconName: 'warning' };\n      case NotificationType.INFO:\n        return { backgroundColor: Colors.info, iconName: 'info' };\n      case NotificationType.LOADING:\n        return { backgroundColor: Colors.primary, iconName: 'hourglass-empty' };\n      default:\n        return { backgroundColor: Colors.mediumGray, iconName: 'notifications' };\n    }\n  };\n\n  const getContainerStyle = () => {\n    const _baseTransform = [\n      {\n        translateY: animation.interpolate({\n          inputRange: [0, 1],\n          outputRange: notification.position === NotificationPosition.BOTTOM ? [100, 0] : [-100, 0],\n        }),\n      },\n      {\n        scale: animation.interpolate({\n          inputRange: [0, 1],\n          outputRange: [0.9, 1],\n        }),\n      },\n    ];\n\n    let positionStyle = {};\n    const margin = 8;\n\n    switch (notification.position) {\n      case NotificationPosition.TOP:\n        positionStyle = {\n          top: statusBarHeight + margin + index * 80,\n          left: _margin,\n          right: _margin,\n        };\n        break;\n      case NotificationPosition.BOTTOM:\n        positionStyle = {\n          bottom: margin + index * 80,\n          left: _margin,\n          right: _margin,\n        };\n        break;\n      case NotificationPosition.CENTER:\n        positionStyle = {\n          top: screenHeight / 2 - 40 + index * 80,\n          left: _margin,\n          right: _margin,\n        };\n        break;\n      default:\n        positionStyle = {\n          top: statusBarHeight + margin + index * 80,\n          left: _margin,\n          right: _margin,\n        };\n    }\n\n    return {\n      ...positionStyle,\n      transform: _baseTransform,\n    };\n  };\n\n  const { backgroundColor, iconName } = getNotificationStyle();\n\n  if (!visible) {\n    return null;\n  }\n\n  return (\n    <Animated.View style={[styles.notificationContainer, getContainerStyle()]}>\n      <View style={[styles.notification, { backgroundColor }]}>\n        <View style={styles.notificationContent}>\n          <Icon name={iconName} size={24} color={Colors.white} style={styles.notificationIcon} />\n\n          <View style={styles.notificationText}>\n            <Text style={styles.notificationTitle} numberOfLines={1}>\n              {notification.title}\n            </Text>\n            {notification.message && (\n              <Text style={styles.notificationMessage} numberOfLines={2}>\n                {notification.message}\n              </Text>\n            )}\n          </View>\n\n          {!notification.persistent && (\n            <TouchableOpacity onPress={hideNotification} style={styles.closeButton}>\n              <Icon name=\"close\" size={20} color={Colors.white} />\n            </TouchableOpacity>\n          )}\n        </View>\n\n        {notification.action && (\n          <TouchableOpacity\n            style={[\n              styles.actionButton,\n              notification.action.style === 'primary' && styles.actionButtonPrimary,\n              notification.action.style === 'danger' && styles.actionButtonDanger,\n            ]}\n            onPress={() => {\n              notification.action?.onPress();\n              if (!notification.persistent) {\n                hideNotification();\n              }\n            }}>\n            <Text style={styles.actionButtonText}>{notification.action.label}</Text>\n          </TouchableOpacity>\n        )}\n      </View>\n    </Animated.View>\n  );\n};\n\ninterface NotificationProviderProps {\n  children: React.ReactNode;\n  maxNotifications?: number;\n}\n\nexport const NotificationProvider: React.FC<NotificationProviderProps> = ({\n  children,\n  maxNotifications = 5,\n}) => {\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n\n  const showNotification = useCallback(\n    (notificationData: Omit<Notification, 'id'>): string => {\n      const id = `notification_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      const notification: Notification = {\n        id,\n        position: NotificationPosition.TOP,\n        duration: 4000,\n        ...notificationData,\n      };\n\n      setNotifications(prev => {\n        const newNotifications = [notification, ...prev];\n        // Limit the number of notifications\n        return newNotifications.slice(0, _maxNotifications);\n      });\n\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      return id;\n    },\n    [maxNotifications],\n  );\n\n  const hideNotification = useCallback((id: _string) => {\n    setNotifications(prev => prev.filter(n => n.id !== id));\n  }, []);\n\n  const clearAllNotifications = useCallback(() => {\n    setNotifications([]);\n  }, []);\n\n  const showSuccess = useCallback(\n    (title: _string, message?: _string, duration?: _number): string => {\n      return showNotification({\n        title,\n        message,\n        type: NotificationType.SUCCESS,\n        duration,\n      });\n    },\n    [showNotification],\n  );\n\n  const showError = useCallback(\n    (title: _string, message?: _string, duration?: _number): string => {\n      return showNotification({\n        title,\n        message,\n        type: NotificationType.ERROR,\n        duration: duration || 6000, // Longer duration for errors\n      });\n    },\n    [showNotification],\n  );\n\n  const showWarning = useCallback(\n    (title: _string, message?: _string, duration?: _number): string => {\n      return showNotification({\n        title,\n        message,\n        type: NotificationType.WARNING,\n        duration,\n      });\n    },\n    [showNotification],\n  );\n\n  const showInfo = useCallback(\n    (title: _string, message?: _string, duration?: _number): string => {\n      return showNotification({\n        title,\n        message,\n        type: NotificationType.INFO,\n        duration,\n      });\n    },\n    [showNotification],\n  );\n\n  const showLoading = useCallback(\n    (title: _string, message?: _string): string => {\n      return showNotification({\n        title,\n        message,\n        type: NotificationType.LOADING,\n        persistent: _true,\n        duration: 0,\n      });\n    },\n    [showNotification],\n  );\n\n  const contextValue: NotificationContextType = {\n    showNotification,\n    hideNotification,\n    clearAllNotifications,\n    showSuccess,\n    showError,\n    showWarning,\n    showInfo,\n    showLoading,\n  };\n\n  return (\n    <NotificationContext.Provider value={contextValue}>\n      {children}\n      <View style={styles.notificationContainer} pointerEvents=\"box-none\">\n        {notifications.map((__notification, _index) => (\n          <NotificationItem\n            key={notification.id}\n            notification={notification}\n            onHide={hideNotification}\n            index={index}\n          />\n        ))}\n      </View>\n    </NotificationContext.Provider>\n  );\n};\n\nexport const useNotification = (): NotificationContextType => {\n  const context = useContext(__NotificationContext);\n  if (!context) {\n    throw new Error('useNotification must be used within a NotificationProvider');\n  }\n  return context;\n};\n\n// Progress indicator component for long operations\ninterface ProgressNotificationProps {\n  title: string;\n  progress: number; // 0-100\n  message?: string;\n  onCancel?: () => void;\n}\n\nexport const ProgressNotification: React.FC<ProgressNotificationProps> = ({\n  title,\n  progress,\n  message,\n  onCancel,\n}) => {\n  const [animation] = useState(new Animated.Value(0));\n\n  useEffect(() => {\n    Animated.timing(__animation, {\n      toValue: progress / 100,\n      duration: 300,\n      useNativeDriver: _false,\n    }).start();\n  }, [progress]);\n\n  return (\n    <View style={styles.progressNotification}>\n      <View style={styles.progressHeader}>\n        <Text style={styles.progressTitle}>{title}</Text>\n        {onCancel && (\n          <TouchableOpacity onPress={onCancel}>\n            <Icon name=\"close\" size={20} color={Colors.text} />\n          </TouchableOpacity>\n        )}\n      </View>\n\n      {message && <Text style={styles.progressMessage}>{message}</Text>}\n\n      <View style={styles.progressBarContainer}>\n        <Animated.View\n          style={[\n            styles.progressBar,\n            {\n              width: animation.interpolate({\n                inputRange: [0, 1],\n                outputRange: ['0%', '100%'],\n              }),\n            },\n          ]}\n        />\n      </View>\n\n      <Text style={styles.progressText}>{Math.round(__progress)}%</Text>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  notificationContainer: {\n    position: 'absolute',\n    zIndex: 9999,\n  },\n  notification: {\n    borderRadius: 12,\n    padding: 16,\n    marginVertical: 4,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5,\n  },\n  notificationContent: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  notificationIcon: {\n    marginRight: 12,\n  },\n  notificationText: {\n    flex: 1,\n  },\n  notificationTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.white,\n    marginBottom: 2,\n  },\n  notificationMessage: {\n    fontSize: 14,\n    color: 'rgba(255, 255, 255, 0.9)',\n    lineHeight: 18,\n  },\n  closeButton: {\n    padding: 4,\n    marginLeft: 8,\n  },\n  actionButton: {\n    marginTop: 12,\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n    borderRadius: 6,\n    backgroundColor: 'rgba(255, 255, 255, 0.2)',\n    alignSelf: 'flex-start',\n  },\n  actionButtonPrimary: {\n    backgroundColor: 'rgba(255, 255, 255, 0.3)',\n  },\n  actionButtonDanger: {\n    backgroundColor: 'rgba(231, 76, 60, 0.3)',\n  },\n  actionButtonText: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: Colors.white,\n  },\n  progressNotification: {\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    padding: 16,\n    margin: 16,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5,\n  },\n  progressHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  progressTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  progressMessage: {\n    fontSize: 14,\n    color: Colors.lightText,\n    marginBottom: 12,\n  },\n  progressBarContainer: {\n    height: 6,\n    backgroundColor: Colors.lightGray,\n    borderRadius: 3,\n    marginBottom: 8,\n    overflow: 'hidden',\n  },\n  progressBar: {\n    height: '100%',\n    backgroundColor: Colors.primary,\n    borderRadius: 3,\n  },\n  progressText: {\n    fontSize: 12,\n    color: Colors.lightText,\n    textAlign: 'right',\n  },\n});\n\nexport default NotificationProvider;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/components/inputs/DecimalInput.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_clampedValue' is assigned a value but never used.","line":76,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":76,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_formattedValue' is assigned a value but never used.","line":110,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":110,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'TextInput' is not defined.","line":130,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":130,"endColumn":19}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has an unnecessary dependency: '_decimalPlaces'. Either exclude it or remove the dependency array. Outer scope values like '_decimalPlaces' aren't valid dependencies because mutating them doesn't re-render the component.","line":40,"column":6,"nodeType":"ArrayExpression","endLine":40,"endColumn":40,"suggestions":[{"desc":"Update the dependencies array to be: [value, isFocused]","fix":{"range":[1063,1097],"text":"[value, isFocused]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { View, Text, TouchableOpacity } from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\n\ninterface DecimalInputProps {\n  value: number;\n  onValueChange: (value: _number) => void;\n  placeholder?: string;\n  suffix?: string;\n  maxValue?: number;\n  minValue?: number;\n  decimalPlaces?: number;\n  label?: string;\n  style?: unknown;\n  disabled?: boolean;\n}\n\nconst DecimalInput: React.FC<DecimalInputProps> = ({\n  value,\n  onValueChange,\n  placeholder = '0.00',\n  suffix = '',\n  _maxValue = 999.99,\n  _minValue = 0,\n  decimalPlaces = 2,\n  label,\n  style,\n  disabled = false,\n}) => {\n  const [displayValue, setDisplayValue] = useState(value.toFixed(__decimalPlaces));\n  const [isFocused, setIsFocused] = useState(__false);\n  const inputRef = useRef<TextInput>(__null);\n\n  // Update display when external value changes\n  useEffect(() => {\n    if (!isFocused) {\n      setDisplayValue(value.toFixed(__decimalPlaces));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [value, _decimalPlaces, isFocused]);\n\n  const handleTextChange = (text: _string) => {\n    // Allow empty string - don't call onValueChange yet\n    if (text === '') {\n      setDisplayValue('');\n      return;\n    }\n\n    // Remove any non-numeric characters except decimal point\n    let cleaned = text.replace(/[^0-9.]/g, '');\n\n    // Handle multiple decimal points - keep only the first one\n    const decimalIndex = cleaned.indexOf('.');\n    if (decimalIndex !== -1) {\n      const beforeDecimal = cleaned.substring(0, _decimalIndex);\n      const afterDecimal = cleaned.substring(decimalIndex + 1).replace(/\\./g, '');\n      cleaned = beforeDecimal + '.' + afterDecimal;\n    }\n\n    // Limit decimal places only if we have more than allowed\n    if (cleaned.includes('.')) {\n      const parts = cleaned.split('.');\n      if (parts[1] && parts[1].length > decimalPlaces) {\n        cleaned = parts[0] + '.' + parts[1].substring(0, _decimalPlaces);\n      }\n    }\n\n    // Update display value with cleaned input\n    setDisplayValue(__cleaned);\n\n    // Convert to number to validate range - only if it's a complete number\n    const _numericValue = parseFloat(__cleaned);\n\n    // Only update parent if we have a valid number and it's not just a decimal point\n    if (!isNaN(__numericValue) && cleaned !== '.') {\n      const _clampedValue = Math.max(__minValue, Math.min(__maxValue, _numericValue));\n      onValueChange(__clampedValue);\n    }\n  };\n\n  const handleFocus = () => {\n    setIsFocused(__true);\n    // Don't clear the input - keep the current value visible for editing\n  };\n\n  const handleBlur = () => {\n    setIsFocused(__false);\n\n    // Convert to number and validate\n    const _numericValue = parseFloat(__displayValue) || 0;\n    const clampedValue = Math.max(__minValue, Math.min(__maxValue, _numericValue));\n\n    // Format the display value nicely when losing focus - only format if it's a valid number\n    if (!isNaN(__numericValue) && displayValue !== '') {\n      setDisplayValue(clampedValue.toFixed(__decimalPlaces));\n\n      // Only call onValueChange if the value actually changed\n      if (clampedValue !== value) {\n        onValueChange(__clampedValue);\n      }\n    }\n  };\n\n  const handleClear = () => {\n    setDisplayValue('');\n    inputRef.current?.focus();\n  };\n\n  const handlePresetValue = (presetValue: _number) => {\n    const _formattedValue = presetValue.toFixed(__decimalPlaces);\n    setDisplayValue(__formattedValue);\n    onValueChange(__presetValue);\n  };\n\n  // Common preset values for service charges\n  const presetValues = [0, 2.5, 5, 10, 12.5, 15, 20];\n  const showPresets =\n    label?.toLowerCase().includes('service') || label?.toLowerCase().includes('charge');\n\n  return (\n    <View style={[styles.container, style]}>\n      {label && <Text style={styles.label}>{label}</Text>}\n\n      <View\n        style={[\n          styles.inputContainer,\n          isFocused && styles.inputContainerFocused,\n          disabled && styles.inputContainerDisabled,\n        ]}>\n        <TextInput\n          ref={inputRef}\n          style={[styles.input, disabled && styles.inputDisabled]}\n          value={displayValue}\n          onChangeText={handleTextChange}\n          onFocus={handleFocus}\n          onBlur={handleBlur}\n          placeholder={placeholder}\n          placeholderTextColor=\"#999\"\n          keyboardType=\"decimal-pad\"\n          returnKeyType=\"done\"\n          autoCorrect={false}\n          autoCapitalize=\"none\"\n          editable={!disabled}\n          maxLength={10}\n          blurOnSubmit={true}\n          multiline={false}\n        />\n\n        {displayValue !== '' && !disabled && (\n          <TouchableOpacity onPress={handleClear} style={styles.clearButton}>\n            <Icon name=\"clear\" size={20} color=\"#666\" />\n          </TouchableOpacity>\n        )}\n\n        {suffix && <Text style={[styles.suffix, disabled && styles.suffixDisabled]}>{suffix}</Text>}\n      </View>\n\n      {/* Preset buttons for service charges */}\n      {showPresets && !disabled && (\n        <View style={styles.presetsContainer}>\n          <Text style={styles.presetsLabel}>Quick values:</Text>\n          <View style={styles.presetButtons}>\n            {presetValues.map(preset => (\n              <TouchableOpacity\n                key={preset}\n                style={[styles.presetButton, value === preset && styles.presetButtonActive]}\n                onPress={() => handlePresetValue(__preset)}>\n                <Text\n                  style={[\n                    styles.presetButtonText,\n                    value === preset && styles.presetButtonTextActive,\n                  ]}>\n                  {preset}%\n                </Text>\n              </TouchableOpacity>\n            ))}\n          </View>\n        </View>\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    marginVertical: 8,\n  },\n  label: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#333',\n    marginBottom: 8,\n  },\n  inputContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: '#fff',\n    borderWidth: 2,\n    borderColor: '#E1E1E1',\n    borderRadius: 12,\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    minHeight: 56,\n  },\n  inputContainerFocused: {\n    borderColor: '#007AFF',\n    backgroundColor: '#F8F9FF',\n  },\n  inputContainerDisabled: {\n    backgroundColor: '#F5F5F5',\n    borderColor: '#D1D1D1',\n  },\n  input: {\n    flex: 1,\n    fontSize: 18,\n    fontWeight: '600',\n    color: '#333',\n    padding: 0,\n    textAlign: 'left',\n  },\n  inputDisabled: {\n    color: '#999',\n  },\n  clearButton: {\n    padding: 8,\n    marginLeft: 8,\n  },\n  suffix: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: '#666',\n    marginLeft: 8,\n  },\n  suffixDisabled: {\n    color: '#999',\n  },\n  presetsContainer: {\n    marginTop: 12,\n  },\n  presetsLabel: {\n    fontSize: 14,\n    color: '#666',\n    marginBottom: 8,\n  },\n  presetButtons: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 8,\n  },\n  presetButton: {\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    backgroundColor: '#F0F0F0',\n    borderRadius: 20,\n    borderWidth: 1,\n    borderColor: '#E1E1E1',\n  },\n  presetButtonActive: {\n    backgroundColor: '#007AFF',\n    borderColor: '#007AFF',\n  },\n  presetButtonText: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: '#333',\n  },\n  presetButtonTextActive: {\n    color: '#fff',\n  },\n});\n\nexport default DecimalInput;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/components/inputs/QuantityPill.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":159,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":159,"endColumn":14}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has a missing dependency: 'scale'. Either include it or remove the dependency array.","line":57,"column":6,"nodeType":"ArrayExpression","endLine":57,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [quantity, scale]","fix":{"range":[1551,1561],"text":"[quantity, scale]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * QuantityPill - Clean, centered quantity control component\n *\n * Features:\n * - Fixed width design that accommodates 2-digit counts\n * - Centered alignment with proper spacing\n * - Accessible hit targets (40px high)\n * - Smooth animations for count changes\n * - Theme-aware styling\n */\n\nimport React from 'react';\nimport { View, TouchableOpacity, ViewStyle } from 'react-native';\nimport { Plus, Minus } from 'lucide-react-native';\nimport Animated, { useSharedValue, withTiming } from 'react-native-reanimated';\nimport { useTheme } from '../../design-system/ThemeProvider';\n\ninterface QuantityPillProps {\n  quantity: number;\n  onIncrease: () => void;\n  onDecrease: () => void;\n  style?: ViewStyle;\n  minValue?: number;\n  maxValue?: number;\n  disabled?: boolean;\n  size?: 'small' | 'medium' | 'large';\n  colorScheme?: 'primary' | 'accent' | 'success';\n}\n\nconst QuantityPill: React.FC<QuantityPillProps> = ({\n  quantity,\n  onIncrease,\n  onDecrease,\n  style,\n  minValue = 0,\n  maxValue = 99,\n  disabled = false,\n  size = 'medium',\n  _colorScheme = 'accent',\n}) => {\n  const { theme } = useTheme();\n  const scale = useSharedValue(1);\n\n  // Animation for count changes\n  const animatedStyle = useAnimatedStyle(() => {\n    return {\n      transform: [{ scale: scale.value }],\n    };\n  });\n\n  // Trigger scale animation when quantity changes\n  React.useEffect(() => {\n    scale.value = withTiming(1.1, { duration: 75 }, () => {\n      scale.value = withTiming(1, { duration: 75 });\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [quantity]);\n\n  // Size configurations\n  const sizeConfig = {\n    small: { width: 80, height: 32, iconSize: 16, fontSize: 12 },\n    medium: { width: 96, height: 40, iconSize: 18, fontSize: 14 },\n    large: { width: 112, height: 48, iconSize: 20, fontSize: 16 },\n  };\n\n  const config = sizeConfig[size];\n\n  // Color scheme configurations\n  const getColorScheme = () => {\n    switch (__colorScheme) {\n      case 'primary':\n        return {\n          backgroundColor: theme.colors.primary,\n          textColor: theme.colors.white,\n          buttonColor: 'rgba(255, 255, 255, 0.2)',\n          iconColor: theme.colors.white,\n        };\n      case 'success':\n        return {\n          backgroundColor: theme.colors.success,\n          textColor: theme.colors.white,\n          buttonColor: 'rgba(255, 255, 255, 0.2)',\n          iconColor: theme.colors.white,\n        };\n      case 'accent':\n      default:\n        return {\n          backgroundColor: theme.colors.accent,\n          textColor: theme.colors.white,\n          buttonColor: 'rgba(255, 255, 255, 0.2)',\n          iconColor: theme.colors.white,\n        };\n    }\n  };\n\n  const colors = getColorScheme();\n\n  const styles = StyleSheet.create({\n    container: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      justifyContent: 'space-between',\n      width: config.width,\n      height: config.height,\n      backgroundColor: disabled ? theme.colors.lightGray : colors.backgroundColor,\n      borderRadius: config.height / 2, // Perfect circle ends\n      paddingHorizontal: 8,\n      opacity: disabled ? 0.6 : 1,\n    },\n    button: {\n      width: config.height - 8, // Circular button\n      height: config.height - 8,\n      borderRadius: (config.height - 8) / 2,\n      backgroundColor: colors.buttonColor,\n      justifyContent: 'center',\n      alignItems: 'center',\n      // Ensure proper hit target\n      minWidth: 32,\n      minHeight: 32,\n    },\n    buttonDisabled: {\n      backgroundColor: 'rgba(255, 255, 255, 0.1)',\n    },\n    quantityContainer: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'center',\n      paddingHorizontal: 8,\n    },\n    quantityText: {\n      fontSize: config.fontSize,\n      fontWeight: '600',\n      color: disabled ? theme.colors.darkGray : colors.textColor,\n      textAlign: 'center',\n      minWidth: 20, // Ensures consistent width for 1-2 digit numbers\n    },\n  });\n\n  const canDecrease = quantity > minValue && !disabled;\n  const canIncrease = quantity < maxValue && !disabled;\n\n  return (\n    <View style={[styles.container, style]} testID=\"quantity-pill\">\n      <TouchableOpacity\n        style={[styles.button, !canDecrease && styles.buttonDisabled]}\n        onPress={onDecrease}\n        disabled={!canDecrease}\n        activeOpacity={0.7}\n        hitSlop={{ top: 8, bottom: 8, left: 8, right: 8 }}\n        testID=\"quantity-decrease\">\n        <Minus\n          size={config.iconSize}\n          color={canDecrease ? colors.iconColor : 'rgba(255, 255, 255, 0.5)'}\n          strokeWidth={2.5}\n        />\n      </TouchableOpacity>\n\n      <Animated.View style={[styles.quantityContainer, animatedStyle]}>\n        <Text style={styles.quantityText} testID=\"quantity-text\">\n          {quantity}\n        </Text>\n      </Animated.View>\n\n      <TouchableOpacity\n        style={[styles.button, !canIncrease && styles.buttonDisabled]}\n        onPress={onIncrease}\n        disabled={!canIncrease}\n        activeOpacity={0.7}\n        hitSlop={{ top: 8, bottom: 8, left: 8, right: 8 }}\n        testID=\"quantity-increase\">\n        <Plus\n          size={config.iconSize}\n          color={canIncrease ? colors.iconColor : 'rgba(255, 255, 255, 0.5)'}\n          strokeWidth={2.5}\n        />\n      </TouchableOpacity>\n    </View>\n  );\n};\n\nexport default QuantityPill;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/components/inputs/SimpleDecimalInput.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'TextInput' is not defined.","line":92,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":92,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef } from 'react';\nimport { View, Text, TouchableOpacity } from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\n\ninterface SimpleDecimalInputProps {\n  value: number;\n  onValueChange: (value: _number) => void;\n  placeholder?: string;\n  suffix?: string;\n  maxValue?: number;\n  minValue?: number;\n  decimalPlaces?: number;\n  label?: string;\n  style?: unknown;\n  disabled?: boolean;\n}\n\nconst SimpleDecimalInput: React.FC<SimpleDecimalInputProps> = ({\n  value,\n  onValueChange,\n  placeholder = '0.00',\n  suffix = '',\n  _maxValue = 999.99,\n  _minValue = 0,\n  _decimalPlaces = 2,\n  label,\n  style,\n  disabled = false,\n}) => {\n  const [internalValue, setInternalValue] = useState(value.toString());\n  const [isFocused, setIsFocused] = useState(__false);\n  const inputRef = useRef<TextInput>(__null);\n\n  const handleTextChange = (_text: _string) => {\n    // CRITICAL: Don't call onValueChange during typing - only update internal state\n    setInternalValue(__text);\n  };\n\n  const handleFocus = () => {\n    setIsFocused(__true);\n    // Set internal value to the current prop value when focusing\n    setInternalValue(value.toString());\n  };\n\n  const handleBlur = () => {\n    setIsFocused(__false);\n\n    // Clean and validate the input\n    let cleaned = internalValue.replace(/[^0-9.]/g, '');\n\n    // Handle multiple decimal points\n    const decimalIndex = cleaned.indexOf('.');\n    if (decimalIndex !== -1) {\n      const beforeDecimal = cleaned.substring(0, _decimalIndex);\n      const afterDecimal = cleaned.substring(decimalIndex + 1).replace(/\\./g, '');\n      cleaned = beforeDecimal + '.' + afterDecimal;\n    }\n\n    // Convert to number\n    const _numericValue = parseFloat(__cleaned) || 0;\n    const clampedValue = Math.max(__minValue, Math.min(__maxValue, _numericValue));\n\n    // Update internal value with formatted result\n    setInternalValue(clampedValue.toString());\n\n    // ONLY call onValueChange on blur - this prevents keyboard dismissal\n    onValueChange(__clampedValue);\n  };\n\n  const handleClear = () => {\n    setInternalValue('');\n    inputRef.current?.focus();\n  };\n\n  // Display value: show internal value while focused, formatted value when not focused\n  const displayValue = isFocused\n    ? internalValue\n    : value % 1 === 0\n    ? value.toString()\n    : value.toFixed(__decimalPlaces);\n\n  return (\n    <View style={[styles.container, style]}>\n      {label && <Text style={styles.label}>{label}</Text>}\n\n      <View\n        style={[\n          styles.inputContainer,\n          isFocused && styles.inputContainerFocused,\n          disabled && styles.inputContainerDisabled,\n        ]}>\n        <TextInput\n          ref={inputRef}\n          style={[styles.input, disabled && styles.inputDisabled]}\n          value={displayValue}\n          onChangeText={handleTextChange}\n          onFocus={handleFocus}\n          onBlur={handleBlur}\n          placeholder={placeholder}\n          placeholderTextColor=\"#999\"\n          keyboardType=\"decimal-pad\"\n          returnKeyType=\"done\"\n          autoCorrect={false}\n          autoCapitalize=\"none\"\n          editable={!disabled}\n          maxLength={10}\n          selectTextOnFocus={true}\n        />\n\n        {displayValue !== '' && !disabled && (\n          <TouchableOpacity onPress={handleClear} style={styles.clearButton}>\n            <Icon name=\"clear\" size={20} color=\"#666\" />\n          </TouchableOpacity>\n        )}\n\n        {suffix && <Text style={[styles.suffix, disabled && styles.suffixDisabled]}>{suffix}</Text>}\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    marginVertical: 8,\n  },\n  label: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#333',\n    marginBottom: 8,\n  },\n  inputContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: '#fff',\n    borderWidth: 2,\n    borderColor: '#E1E1E1',\n    borderRadius: 12,\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    minHeight: 56,\n  },\n  inputContainerFocused: {\n    borderColor: '#007AFF',\n    backgroundColor: '#F8F9FF',\n  },\n  inputContainerDisabled: {\n    backgroundColor: '#F5F5F5',\n    borderColor: '#D1D1D1',\n  },\n  input: {\n    flex: 1,\n    fontSize: 18,\n    fontWeight: '600',\n    color: '#333',\n    padding: 0,\n    textAlign: 'left',\n  },\n  inputDisabled: {\n    color: '#999',\n  },\n  clearButton: {\n    padding: 8,\n    marginLeft: 8,\n  },\n  suffix: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: '#666',\n    marginLeft: 8,\n  },\n  suffixDisabled: {\n    color: '#999',\n  },\n});\n\nexport default SimpleDecimalInput;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/components/inputs/SimpleTextInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/components/inputs/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/components/layout/Container.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_isPhone' is assigned a value but never used.","line":45,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":45,"endColumn":40},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_isTablet' is assigned a value but never used.","line":45,"column":42,"nodeType":"Identifier","messageId":"unusedVar","endLine":45,"endColumn":51},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useResponsiveValue\" is called in function \"getMaxWidth\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","line":58,"column":14,"nodeType":"Identifier","endLine":58,"endColumn":32},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":144,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":144,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":145,"column":27,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":145,"endColumn":31},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { flexDirection: 'row', flexWrap: \"wrap ? 'wrap' : 'nowrap'\" }","line":233,"column":9,"nodeType":"ObjectExpression","endLine":238,"endColumn":10},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.container","line":248,"column":5,"nodeType":"Property","endLine":250,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.section","line":251,"column":5,"nodeType":"Property","endLine":253,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.sectionHeader","line":254,"column":5,"nodeType":"Property","endLine":256,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.sectionTitle","line":257,"column":5,"nodeType":"Property","endLine":262,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.sectionSubtitle","line":263,"column":5,"nodeType":"Property","endLine":266,"endColumn":6}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { View, StyleSheet, ViewStyle } from 'react-native';\nimport { useTheme } from '../../design-system/ThemeProvider';\nimport { useResponsive, useResponsiveValue } from '../../hooks/useResponsive';\nimport { spacing } from '../../design-system/theme';\n\n// Container variants\nexport type ContainerVariant = 'fluid' | 'constrained';\n\n// Container props interface\nexport interface ContainerProps {\n  children: React.ReactNode;\n  variant?: ContainerVariant;\n  maxWidth?: {\n    xs?: number;\n    sm?: number;\n    md?: number;\n    lg?: number;\n    xl?: number;\n    xxl?: number;\n  };\n  padding?: {\n    xs?: keyof typeof spacing;\n    sm?: keyof typeof spacing;\n    md?: keyof typeof spacing;\n    lg?: keyof typeof spacing;\n    xl?: keyof typeof spacing;\n    xxl?: keyof typeof spacing;\n  };\n  centered?: boolean;\n  style?: ViewStyle;\n  testID?: string;\n}\n\nconst Container: React.FC<ContainerProps> = ({\n  children,\n  variant = 'constrained',\n  _maxWidth,\n  _padding = { xs: 4, sm: 4, md: 6, lg: 8 },\n  centered = true,\n  style,\n  testID,\n}) => {\n  const { theme } = useTheme();\n  const { width: _screenWidth, _isPhone, _isTablet } = useResponsive();\n  const styles = createStyles(__theme);\n\n  // Get responsive padding\n  const currentPadding = useResponsiveValue(__padding, 4);\n\n  // Get responsive max width\n  const getMaxWidth = (): number | undefined => {\n    if (variant === 'fluid') {\n      return undefined;\n    }\n\n    if (__maxWidth) {\n      return useResponsiveValue(__maxWidth, _screenWidth);\n    }\n\n    // Default max widths based on device type\n    if (__isPhone) {\n      return screenWidth;\n    }\n    if (__isTablet) {\n      return Math.min(screenWidth * 0.9, 800);\n    }\n    return Math.min(screenWidth * 0.8, 1200);\n  };\n\n  const _containerMaxWidth = getMaxWidth();\n\n  const containerStyle: ViewStyle = [\n    styles.container,\n    {\n      paddingHorizontal: theme.spacing[currentPadding],\n      maxWidth: _containerMaxWidth,\n      width: variant === 'fluid' ? '100%' : _undefined,\n      alignSelf: centered ? 'center' : _undefined,\n    },\n    style,\n  ].filter(__Boolean) as ViewStyle;\n\n  return (\n    <View style={containerStyle} testID={testID}>\n      {children}\n    </View>\n  );\n};\n\n// Section Container Component\nexport interface SectionProps {\n  children: React.ReactNode;\n  title?: string;\n  subtitle?: string;\n  padding?: {\n    xs?: keyof typeof spacing;\n    sm?: keyof typeof spacing;\n    md?: keyof typeof spacing;\n    lg?: keyof typeof spacing;\n    xl?: keyof typeof spacing;\n    xxl?: keyof typeof spacing;\n  };\n  background?: 'transparent' | 'white' | 'gray';\n  style?: ViewStyle;\n}\n\nexport const Section: React.FC<SectionProps> = ({\n  children,\n  title,\n  subtitle,\n  _padding = { xs: 4, sm: 6, md: 8 },\n  _background = 'transparent',\n  style,\n}) => {\n  const { theme } = useTheme();\n  const styles = createStyles(__theme);\n  const currentPadding = useResponsiveValue(__padding, 4);\n\n  const getBackgroundColor = () => {\n    switch (__background) {\n      case 'white':\n        return theme.colors.white;\n      case 'gray':\n        return theme.colors.neutral[50];\n      default:\n        return 'transparent';\n    }\n  };\n\n  return (\n    <View\n      style={[\n        styles.section,\n        {\n          backgroundColor: getBackgroundColor(),\n          paddingVertical: theme.spacing[currentPadding],\n        },\n        style,\n      ]}>\n      <Container>\n        {(title || subtitle) && (\n          <View style={styles.sectionHeader}>\n            {title && <Text style={styles.sectionTitle}>{title}</Text>}\n            {subtitle && <Text style={styles.sectionSubtitle}>{subtitle}</Text>}\n          </View>\n        )}\n        {children}\n      </Container>\n    </View>\n  );\n};\n\n// Spacer Component for responsive spacing\nexport interface SpacerProps {\n  size?: {\n    xs?: keyof typeof spacing;\n    sm?: keyof typeof spacing;\n    md?: keyof typeof spacing;\n    lg?: keyof typeof spacing;\n    xl?: keyof typeof spacing;\n    xxl?: keyof typeof spacing;\n  };\n  horizontal?: boolean;\n}\n\nexport const Spacer: React.FC<SpacerProps> = ({\n  _size = { xs: 4, sm: 6, md: 8 },\n  horizontal = false,\n}) => {\n  const { theme } = useTheme();\n  const currentSize = useResponsiveValue(__size, 4);\n  const _spacingValue = theme.spacing[currentSize];\n\n  return (\n    <View\n      style={{\n        [horizontal ? 'width' : 'height']: _spacingValue,\n      }}\n    />\n  );\n};\n\n// Row Component for horizontal layouts\nexport interface RowProps {\n  children: React.ReactNode;\n  spacing?: {\n    xs?: keyof typeof spacing;\n    sm?: keyof typeof spacing;\n    md?: keyof typeof spacing;\n    lg?: keyof typeof spacing;\n    xl?: keyof typeof spacing;\n    xxl?: keyof typeof spacing;\n  };\n  align?: 'flex-start' | 'center' | 'flex-end' | 'stretch';\n  justify?:\n    | 'flex-start'\n    | 'center'\n    | 'flex-end'\n    | 'space-between'\n    | 'space-around'\n    | 'space-evenly';\n  wrap?: boolean;\n  style?: ViewStyle;\n}\n\nexport const Row: React.FC<RowProps> = ({\n  _children,\n  spacing: _spacingProp = { xs: 2, sm: 3, md: 4 },\n  _align = 'center',\n  _justify = 'flex-start',\n  wrap = false,\n  style,\n}) => {\n  const { theme } = useTheme();\n  const currentSpacing = useResponsiveValue(__spacingProp, 3);\n  const spacingValue = theme.spacing[currentSpacing];\n\n  // Add spacing between children\n  const childrenWithSpacing = React.Children.map(__children, (__child, _index) => {\n    const isLast = index === React.Children.count(__children) - 1;\n    return (\n      <React.Fragment key={index}>\n        {child}\n        {!isLast && <View style={{ width: spacingValue }} />}\n      </React.Fragment>\n    );\n  });\n\n  return (\n    <View\n      style={[\n        {\n          flexDirection: 'row',\n          alignItems: _align,\n          justifyContent: _justify,\n          flexWrap: wrap ? 'wrap' : 'nowrap',\n        },\n        style,\n      ]}>\n      {childrenWithSpacing}\n    </View>\n  );\n};\n\nconst createStyles = (theme: _Theme) =>\n  StyleSheet.create({\n    container: {\n      width: '100%',\n    },\n    section: {\n      width: '100%',\n    },\n    sectionHeader: {\n      marginBottom: theme.spacing[6],\n    },\n    sectionTitle: {\n      fontSize: theme.typography.fontSize['2xl'],\n      fontWeight: theme.typography.fontWeight.bold,\n      color: theme.colors.text,\n      marginBottom: theme.spacing[2],\n    },\n    sectionSubtitle: {\n      fontSize: theme.typography.fontSize.lg,\n      color: theme.colors.neutral[600],\n    },\n  });\n\nexport default Container;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/components/layout/ResponsiveGrid.tsx","messages":[{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: {\n  paddingLeft: 'itemIndex > 0 ? spacingValue / 2 : 0',\n  paddingRight: 'itemIndex < row.length - 1 ? spacingValue / 2 : 0'\n}","line":78,"column":17,"nodeType":"ObjectExpression","endLine":82,"endColumn":18},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: {\n  paddingRight: 'emptyIndex < currentColumns - row.length - 1 ? spacingValue / 2 : 0'\n}","line":94,"column":19,"nodeType":"ObjectExpression","endLine":99,"endColumn":20},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.grid","line":118,"column":5,"nodeType":"Property","endLine":120,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.row","line":121,"column":5,"nodeType":"Property","endLine":124,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.item","line":125,"column":5,"nodeType":"Property","endLine":127,"endColumn":6}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { View, ViewStyle } from 'react-native';\nimport { useTheme } from '../../design-system/ThemeProvider';\nimport { useResponsiveColumns, useResponsiveSpacing } from '../../hooks/useResponsive';\nimport { spacing } from '../../design-system/theme';\n\n// Grid props interface\nexport interface ResponsiveGridProps {\n  children: React.ReactNode;\n  columns?: {\n    xs?: number;\n    sm?: number;\n    md?: number;\n    lg?: number;\n    xl?: number;\n    xxl?: number;\n  };\n  spacing?: {\n    xs?: keyof typeof spacing;\n    sm?: keyof typeof spacing;\n    md?: keyof typeof spacing;\n    lg?: keyof typeof spacing;\n    xl?: keyof typeof spacing;\n    xxl?: keyof typeof spacing;\n  };\n  style?: ViewStyle;\n  testID?: string;\n}\n\n// Grid item props interface\nexport interface GridItemProps {\n  children: React.ReactNode;\n  span?: {\n    xs?: number;\n    sm?: number;\n    md?: number;\n    lg?: number;\n    xl?: number;\n    xxl?: number;\n  };\n  style?: ViewStyle;\n}\n\nconst ResponsiveGrid: React.FC<ResponsiveGridProps> = ({\n  _children,\n  _columns = { xs: 1, sm: 2, md: 3, lg: 4, xl: 5, xxl: 6 },\n  spacing: _spacingProp = { xs: 2, sm: 3, md: 4 },\n  style,\n  testID,\n}) => {\n  const { theme } = useTheme();\n  const currentColumns = useResponsiveColumns(__columns, 1);\n  const currentSpacing = useResponsiveSpacing(__spacingProp, 4);\n  const styles = createStyles(__theme);\n\n  // Convert children to array for processing\n  const childArray = React.Children.toArray(__children);\n\n  // Calculate item width based on columns and spacing\n  const _itemWidth = `${100 / currentColumns}%`;\n  const spacingValue = theme.spacing[currentSpacing];\n\n  // Group children into rows\n  const rows: React.ReactNode[][] = [];\n  for (let i = 0; i < childArray.length; i += currentColumns) {\n    rows.push(childArray.slice(__i, i + currentColumns));\n  }\n\n  return (\n    <View style={[styles.grid, style]} testID={testID}>\n      {rows.map((__row, _rowIndex) => (\n        <View key={rowIndex} style={[styles.row, { marginBottom: spacingValue }]}>\n          {row.map((__child, _itemIndex) => (\n            <View\n              key={itemIndex}\n              style={[\n                styles.item,\n                {\n                  width: _itemWidth,\n                  paddingLeft: itemIndex > 0 ? spacingValue / 2 : 0,\n                  paddingRight: itemIndex < row.length - 1 ? spacingValue / 2 : 0,\n                },\n              ]}>\n              {child}\n            </View>\n          ))}\n          {/* Fill empty columns in the last row */}\n          {row.length < currentColumns &&\n            Array.from({ length: currentColumns - row.length }).map((___, _emptyIndex) => (\n              <View\n                key={`empty-${emptyIndex}`}\n                style={[\n                  styles.item,\n                  {\n                    width: _itemWidth,\n                    paddingLeft: spacingValue / 2,\n                    paddingRight:\n                      emptyIndex < currentColumns - row.length - 1 ? spacingValue / 2 : 0,\n                  },\n                ]}\n              />\n            ))}\n        </View>\n      ))}\n    </View>\n  );\n};\n\n// Grid Item Component with span support\nexport const GridItem: React.FC<GridItemProps> = ({ children, _span, style }) => {\n  // Note: Span functionality would require more complex layout calculations\n  // For now, this is a simple wrapper that can be extended\n  return <View style={style}>{children}</View>;\n};\n\nconst createStyles = (_theme: _Theme) =>\n  StyleSheet.create({\n    grid: {\n      // Base grid container\n    },\n    row: {\n      flexDirection: 'row',\n      alignItems: 'stretch',\n    },\n    item: {\n      // Individual grid item\n    },\n  });\n\nexport default ResponsiveGrid;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/components/modals/CreateUserModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_templates' is assigned a value but never used.","line":124,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":124,"endColumn":23},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: styles.textInput","line":466,"column":3,"nodeType":"Property","endLine":474,"endColumn":4}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadPermissionTemplates'. Either include it or remove the dependency array.","line":111,"column":6,"nodeType":"ArrayExpression","endLine":111,"endColumn":15,"suggestions":[{"desc":"Update the dependencies array to be: [loadPermissionTemplates, visible]","fix":{"range":[3136,3145],"text":"[loadPermissionTemplates, visible]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  Modal,\n  SafeAreaView,\n  TouchableOpacity,\n  ScrollView,\n  Alert,\n  ActivityIndicator,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { SimpleTextInput } from '../inputs'; // Corrected import\nimport {\n  UserManagementService,\n  CreateUserRequest,\n  UserRole,\n  Permission,\n  PermissionTemplate,\n} from '../../services/UserManagementService';\n\n// Fynlo POS Color Scheme\nconst Colors = {\n  primary: '#00A651',\n  secondary: '#0066CC',\n  success: '#00A651',\n  warning: '#FF6B35',\n  danger: '#E74C3C',\n  background: '#F5F5F5',\n  white: '#FFFFFF',\n  lightGray: '#E5E5E5',\n  mediumGray: '#999999',\n  darkGray: '#666666',\n  text: '#333333',\n  lightText: '#666666',\n  border: '#DDDDDD',\n};\n\ninterface CreateUserModalProps {\n  visible: boolean;\n  onClose: () => void;\n  onUserCreated: () => void;\n}\n\nconst CreateUserModal: React.FC<CreateUserModalProps> = ({ visible, _onClose, onUserCreated }) => {\n  const [loading, setLoading] = useState(__false);\n  const [formData, setFormData] = useState<CreateUserRequest>({\n    name: '',\n    email: '',\n    role: 'Restaurant Employee',\n    permissions: [],\n  });\n  const [permissionTemplates, setPermissionTemplates] = useState<PermissionTemplate[]>([]);\n  const [selectedTemplate, setSelectedTemplate] = useState<string>('');\n  const [showPermissions, setShowPermissions] = useState(__false);\n\n  const userManagementService = UserManagementService.getInstance();\n\n  const userRoles: UserRole[] = [\n    'Platform Admin',\n    'Restaurant Owner',\n    'Restaurant Manager',\n    'Restaurant Employee',\n    'Kitchen Staff',\n    'Cashier',\n    'Support Agent',\n  ];\n\n  const allPermissions: Permission[] = [\n    'view_analytics',\n    'manage_users',\n    'manage_restaurants',\n    'process_payments',\n    'manage_inventory',\n    'view_reports',\n    'manage_menu',\n    'manage_orders',\n    'access_pos',\n    'manage_settings',\n    'view_logs',\n    'export_data',\n    'manage_tables',\n    'view_kitchen_orders',\n    'manage_staff_schedules',\n  ];\n\n  const permissionDescriptions: { [key in Permission]: string } = {\n    view_analytics: 'View business analytics and insights',\n    manage_users: 'Create, _edit, and manage users',\n    manage_restaurants: 'Manage restaurant settings and configuration',\n    process_payments: 'Process customer payments',\n    manage_inventory: 'Manage inventory and stock levels',\n    view_reports: 'View and generate reports',\n    manage_menu: 'Edit menu items and pricing',\n    manage_orders: 'View and manage customer orders',\n    access_pos: 'Access point of sale system',\n    manage_settings: 'Modify system settings',\n    view_logs: 'View system and access logs',\n    export_data: 'Export data and reports',\n    manage_tables: 'Manage restaurant tables and seating',\n    view_kitchen_orders: 'View orders in kitchen display',\n    manage_staff_schedules: 'Create and manage staff schedules',\n  };\n\n  useEffect(() => {\n    if (__visible) {\n      loadPermissionTemplates();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [visible]);\n\n  useEffect(() => {\n    if (__selectedTemplate) {\n      const template = permissionTemplates.find(t => t.id === selectedTemplate);\n      if (__template) {\n        setFormData(prev => ({ ...prev, permissions: template.permissions }));\n      }\n    }\n  }, [selectedTemplate, permissionTemplates]);\n\n  const loadPermissionTemplates = async () => {\n    try {\n      const _templates = await userManagementService.getPermissionTemplates();\n      setPermissionTemplates(__templates);\n    } catch (__error) {\n      // Error handled silently\n    }\n  };\n\n  const handleSubmit = async () => {\n    if (!formData.name.trim() || !formData.email.trim()) {\n      Alert.alert('Error', 'Please fill in all required fields');\n      return;\n    }\n\n    if (!formData.email.includes('@')) {\n      Alert.alert('Error', 'Please enter a valid email address');\n      return;\n    }\n\n    if (formData.permissions.length === 0) {\n      Alert.alert('Error', 'Please select at least one permission');\n      return;\n    }\n\n    try {\n      setLoading(__true);\n      await userManagementService.createUser(__formData);\n      Alert.alert('Success', 'User created successfully');\n      onUserCreated();\n      handleClose();\n    } catch (__error) {\n      Alert.alert('Error', error instanceof Error ? error.message : 'Failed to create user');\n    } finally {\n      setLoading(__false);\n    }\n  };\n\n  const handleClose = () => {\n    setFormData({\n      name: '',\n      email: '',\n      role: 'Restaurant Employee',\n      permissions: [],\n    });\n    setSelectedTemplate('');\n    setShowPermissions(__false);\n    onClose();\n  };\n\n  const togglePermission = (permission: _Permission) => {\n    setFormData(prev => ({\n      ...prev,\n      permissions: prev.permissions.includes(__permission)\n        ? prev.permissions.filter(p => p !== permission)\n        : [...prev.permissions, permission],\n    }));\n  };\n\n  const applicableTemplates = permissionTemplates.filter(template =>\n    template.applicableRoles.includes(formData.role),\n  );\n\n  return (\n    <Modal\n      visible={visible}\n      animationType=\"slide\"\n      presentationStyle=\"pageSheet\"\n      onRequestClose={handleClose}>\n      <SafeAreaView style={styles.container}>\n        {/* Header */}\n        <View style={styles.header}>\n          <TouchableOpacity onPress={handleClose} style={styles.closeButton}>\n            <Icon name=\"close\" size={24} color={Colors.text} />\n          </TouchableOpacity>\n          <Text style={styles.headerTitle}>Create New User</Text>\n          <TouchableOpacity\n            onPress={handleSubmit}\n            style={[styles.saveButton, loading && styles.saveButtonDisabled]}\n            disabled={loading}>\n            {loading ? (\n              <ActivityIndicator size=\"small\" color={Colors.white} />\n            ) : (\n              <Text style={styles.saveButtonText}>Create</Text>\n            )}\n          </TouchableOpacity>\n        </View>\n\n        <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n          {/* Basic Information */}\n          <View style={styles.section}>\n            <Text style={styles.sectionTitle}>Basic Information</Text>\n\n            <View style={styles.inputGroup}>\n              <SimpleTextInput\n                label=\"Full Name *\"\n                value={formData.name}\n                onValueChange={text => setFormData(prev => ({ ...prev, name: text }))}\n                placeholder=\"Enter full name\"\n                autoCapitalize=\"words\"\n              />\n            </View>\n\n            <View style={styles.inputGroup}>\n              <SimpleTextInput\n                label=\"Email Address *\"\n                value={formData.email}\n                onValueChange={text => setFormData(prev => ({ ...prev, email: text }))}\n                placeholder=\"Enter email address\"\n                keyboardType=\"email-address\"\n                autoCapitalize=\"none\"\n              />\n            </View>\n\n            <View style={styles.inputGroup}>\n              <SimpleTextInput\n                label=\"Phone Number\"\n                value={formData.phoneNumber || ''}\n                onValueChange={text => setFormData(prev => ({ ...prev, phoneNumber: text }))}\n                placeholder=\"Enter phone number\"\n                keyboardType=\"phone-pad\"\n              />\n            </View>\n          </View>\n\n          {/* Role Selection */}\n          <View style={styles.section}>\n            <Text style={styles.sectionTitle}>Role & Restaurant</Text>\n\n            <View style={styles.inputGroup}>\n              <Text style={styles.inputLabel}>User Role *</Text>\n              <View style={styles.roleGrid}>\n                {userRoles.map(role => (\n                  <TouchableOpacity\n                    key={role}\n                    style={[styles.roleOption, formData.role === role && styles.roleOptionSelected]}\n                    onPress={() => {\n                      setFormData(prev => ({ ...prev, role }));\n                      setSelectedTemplate(''); // Reset template when role changes\n                    }}>\n                    <Text\n                      style={[\n                        styles.roleOptionText,\n                        formData.role === role && styles.roleOptionTextSelected,\n                      ]}>\n                      {role}\n                    </Text>\n                  </TouchableOpacity>\n                ))}\n              </View>\n            </View>\n\n            {(formData.role === 'Restaurant Owner' ||\n              formData.role === 'Restaurant Manager' ||\n              formData.role === 'Restaurant Employee' ||\n              formData.role === 'Kitchen Staff') && (\n              <View style={styles.inputGroup}>\n                <Text style={styles.inputLabel}>Restaurant</Text>\n                <View style={styles.restaurantGrid}>\n                  {['1', '2', '3', '4'].map(id => {\n                    const restaurantNames: { [key: string]: string } = {\n                      '1': 'Fynlo Coffee Shop',\n                      '2': 'Fynlo Burger Bar',\n                      '3': 'Fynlo Pizza Palace',\n                      '4': 'Fynlo Taco Stand',\n                    };\n\n                    return (\n                      <TouchableOpacity\n                        key={id}\n                        style={[\n                          styles.restaurantOption,\n                          formData.restaurantId === id && styles.restaurantOptionSelected,\n                        ]}\n                        onPress={() => setFormData(prev => ({ ...prev, restaurantId: id }))}>\n                        <Text\n                          style={[\n                            styles.restaurantOptionText,\n                            formData.restaurantId === id && styles.restaurantOptionTextSelected,\n                          ]}>\n                          {restaurantNames[id]}\n                        </Text>\n                      </TouchableOpacity>\n                    );\n                  })}\n                </View>\n              </View>\n            )}\n          </View>\n\n          {/* Permission Templates */}\n          {applicableTemplates.length > 0 && (\n            <View style={styles.section}>\n              <Text style={styles.sectionTitle}>Permission Templates</Text>\n              <Text style={styles.sectionSubtitle}>Quick setup with predefined permissions</Text>\n\n              <View style={styles.templateGrid}>\n                {applicableTemplates.map(template => (\n                  <TouchableOpacity\n                    key={template.id}\n                    style={[\n                      styles.templateOption,\n                      selectedTemplate === template.id && styles.templateOptionSelected,\n                    ]}\n                    onPress={() => setSelectedTemplate(template.id)}>\n                    <Text\n                      style={[\n                        styles.templateOptionTitle,\n                        selectedTemplate === template.id && styles.templateOptionTitleSelected,\n                      ]}>\n                      {template.name}\n                    </Text>\n                    <Text\n                      style={[\n                        styles.templateOptionDescription,\n                        selectedTemplate === template.id &&\n                          styles.templateOptionDescriptionSelected,\n                      ]}>\n                      {template.description}\n                    </Text>\n                  </TouchableOpacity>\n                ))}\n              </View>\n            </View>\n          )}\n\n          {/* Permissions */}\n          <View style={styles.section}>\n            <TouchableOpacity\n              style={styles.permissionsHeader}\n              onPress={() => setShowPermissions(!showPermissions)}>\n              <Text style={styles.sectionTitle}>\n                Permissions ({formData.permissions.length} selected)\n              </Text>\n              <Icon\n                name={showPermissions ? 'expand-less' : 'expand-more'}\n                size={24}\n                color={Colors.primary}\n              />\n            </TouchableOpacity>\n\n            {showPermissions && (\n              <View style={styles.permissionsList}>\n                {allPermissions.map(permission => (\n                  <TouchableOpacity\n                    key={permission}\n                    style={styles.permissionItem}\n                    onPress={() => togglePermission(__permission)}>\n                    <View style={styles.permissionInfo}>\n                      <Text style={styles.permissionName}>\n                        {permission.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase())}\n                      </Text>\n                      <Text style={styles.permissionDescription}>\n                        {permissionDescriptions[permission]}\n                      </Text>\n                    </View>\n                    <View\n                      style={[\n                        styles.checkbox,\n                        formData.permissions.includes(__permission) && styles.checkboxSelected,\n                      ]}>\n                      {formData.permissions.includes(__permission) && (\n                        <Icon name=\"check\" size={16} color={Colors.white} />\n                      )}\n                    </View>\n                  </TouchableOpacity>\n                ))}\n              </View>\n            )}\n          </View>\n        </ScrollView>\n      </SafeAreaView>\n    </Modal>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingHorizontal: 20,\n    paddingVertical: 16,\n    backgroundColor: Colors.white,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  closeButton: {\n    padding: 8,\n  },\n  headerTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: Colors.text,\n  },\n  saveButton: {\n    backgroundColor: Colors.primary,\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    borderRadius: 8,\n    minWidth: 70,\n    alignItems: 'center',\n  },\n  saveButtonDisabled: {\n    opacity: 0.6,\n  },\n  saveButtonText: {\n    color: Colors.white,\n    fontSize: 14,\n    fontWeight: '600',\n  },\n  content: {\n    flex: 1,\n  },\n  section: {\n    backgroundColor: Colors.white,\n    marginBottom: 12,\n    paddingHorizontal: 20,\n    paddingVertical: 16,\n  },\n  sectionTitle: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  sectionSubtitle: {\n    fontSize: 14,\n    color: Colors.lightText,\n    marginBottom: 16,\n  },\n  inputGroup: {\n    marginBottom: 16,\n  },\n  inputLabel: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.text,\n    marginBottom: 8,\n  },\n  textInput: {\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 8,\n    paddingHorizontal: 12,\n    paddingVertical: 10,\n    fontSize: 16,\n    backgroundColor: Colors.white,\n  },\n  roleGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 8,\n  },\n  roleOption: {\n    paddingHorizontal: 12,\n    paddingVertical: 8,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    backgroundColor: Colors.background,\n  },\n  roleOptionSelected: {\n    backgroundColor: Colors.primary,\n    borderColor: Colors.primary,\n  },\n  roleOptionText: {\n    fontSize: 12,\n    color: Colors.text,\n    fontWeight: '500',\n  },\n  roleOptionTextSelected: {\n    color: Colors.white,\n  },\n  restaurantGrid: {\n    gap: 8,\n  },\n  restaurantOption: {\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    backgroundColor: Colors.background,\n  },\n  restaurantOptionSelected: {\n    backgroundColor: Colors.primary,\n    borderColor: Colors.primary,\n  },\n  restaurantOptionText: {\n    fontSize: 14,\n    color: Colors.text,\n    fontWeight: '500',\n  },\n  restaurantOptionTextSelected: {\n    color: Colors.white,\n  },\n  templateGrid: {\n    gap: 12,\n  },\n  templateOption: {\n    padding: 16,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    backgroundColor: Colors.background,\n  },\n  templateOptionSelected: {\n    backgroundColor: Colors.primary,\n    borderColor: Colors.primary,\n  },\n  templateOptionTitle: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  templateOptionTitleSelected: {\n    color: Colors.white,\n  },\n  templateOptionDescription: {\n    fontSize: 14,\n    color: Colors.lightText,\n  },\n  templateOptionDescriptionSelected: {\n    color: Colors.white,\n    opacity: 0.9,\n  },\n  permissionsHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  permissionsList: {\n    marginTop: 16,\n  },\n  permissionItem: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingVertical: 12,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.lightGray,\n  },\n  permissionInfo: {\n    flex: 1,\n    marginRight: 12,\n  },\n  permissionName: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.text,\n    marginBottom: 2,\n  },\n  permissionDescription: {\n    fontSize: 12,\n    color: Colors.lightText,\n  },\n  checkbox: {\n    width: 24,\n    height: 24,\n    borderRadius: 4,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: Colors.white,\n  },\n  checkboxSelected: {\n    backgroundColor: Colors.primary,\n    borderColor: Colors.primary,\n  },\n});\n\nexport default CreateUserModal;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/components/modals/EditUserModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_showPermissions' is assigned a value but never used.","line":58,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":58,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_templates' is assigned a value but never used.","line":129,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":129,"endColumn":23},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: styles.textInput","line":671,"column":3,"nodeType":"Property","endLine":679,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: styles.textInputMultiline","line":680,"column":3,"nodeType":"Property","endLine":683,"endColumn":4}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadPermissionTemplates'. Either include it or remove the dependency array. Outer scope values like 'user' aren't valid dependencies because mutating them doesn't re-render the component.","line":125,"column":6,"nodeType":"ArrayExpression","endLine":125,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [visible, loadPermissionTemplates]","fix":{"range":[3528,3543],"text":"[visible, loadPermissionTemplates]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  Modal,\n  SafeAreaView,\n  TouchableOpacity,\n  ScrollView,\n  Alert,\n  ActivityIndicator,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { SimpleTextInput } from '../inputs'; // Corrected import\nimport {\n  UserManagementService,\n  User,\n  UpdateUserRequest,\n  UserRole,\n  Permission,\n  PermissionTemplate,\n} from '../../services/UserManagementService';\n\n// Fynlo POS Color Scheme\nconst Colors = {\n  primary: '#00A651',\n  secondary: '#0066CC',\n  success: '#00A651',\n  warning: '#FF6B35',\n  danger: '#E74C3C',\n  background: '#F5F5F5',\n  white: '#FFFFFF',\n  lightGray: '#E5E5E5',\n  mediumGray: '#999999',\n  darkGray: '#666666',\n  text: '#333333',\n  lightText: '#666666',\n  border: '#DDDDDD',\n};\n\ninterface EditUserModalProps {\n  visible: boolean;\n  user: User | null;\n  onClose: () => void;\n  onUserUpdated: () => void;\n}\n\nconst EditUserModal: React.FC<EditUserModalProps> = ({\n  visible,\n  _user,\n  onClose,\n  onUserUpdated,\n}) => {\n  const [loading, setLoading] = useState(__false);\n  const [formData, setFormData] = useState<UpdateUserRequest>({});\n  const [permissionTemplates, setPermissionTemplates] = useState<PermissionTemplate[]>([]);\n  const [selectedTemplate, setSelectedTemplate] = useState<string>('');\n  const [_showPermissions, setShowPermissions] = useState(__false);\n  const [activeTab, setActiveTab] = useState<'basic' | 'permissions' | 'security'>('basic');\n\n  const userManagementService = UserManagementService.getInstance();\n\n  const userRoles: UserRole[] = [\n    'Platform Admin',\n    'Restaurant Owner',\n    'Restaurant Manager',\n    'Restaurant Employee',\n    'Kitchen Staff',\n    'Cashier',\n    'Support Agent',\n  ];\n\n  const allPermissions: Permission[] = [\n    'view_analytics',\n    'manage_users',\n    'manage_restaurants',\n    'process_payments',\n    'manage_inventory',\n    'view_reports',\n    'manage_menu',\n    'manage_orders',\n    'access_pos',\n    'manage_settings',\n    'view_logs',\n    'export_data',\n    'manage_tables',\n    'view_kitchen_orders',\n    'manage_staff_schedules',\n  ];\n\n  const permissionDescriptions: { [key in Permission]: string } = {\n    view_analytics: 'View business analytics and insights',\n    manage_users: 'Create, _edit, and manage users',\n    manage_restaurants: 'Manage restaurant settings and configuration',\n    process_payments: 'Process customer payments',\n    manage_inventory: 'Manage inventory and stock levels',\n    view_reports: 'View and generate reports',\n    manage_menu: 'Edit menu items and pricing',\n    manage_orders: 'View and manage customer orders',\n    access_pos: 'Access point of sale system',\n    manage_settings: 'Modify system settings',\n    view_logs: 'View system and access logs',\n    export_data: 'Export data and reports',\n    manage_tables: 'Manage restaurant tables and seating',\n    view_kitchen_orders: 'View orders in kitchen display',\n    manage_staff_schedules: 'Create and manage staff schedules',\n  };\n\n  useEffect(() => {\n    if (visible && user) {\n      setFormData({\n        name: user.name,\n        email: user.email,\n        role: user.role,\n        status: user.status,\n        restaurantId: user.restaurantId,\n        permissions: [...user.permissions],\n        phoneNumber: user.phoneNumber,\n        address: user.address,\n        emergencyContact: user.emergencyContact,\n      });\n      loadPermissionTemplates();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [visible, user]);\n\n  const loadPermissionTemplates = async () => {\n    try {\n      const _templates = await userManagementService.getPermissionTemplates();\n      setPermissionTemplates(__templates);\n    } catch (__error) {\n      // Error handled silently\n    }\n  };\n\n  const handleSubmit = async () => {\n    if (!user || !formData.name?.trim() || !formData.email?.trim()) {\n      Alert.alert('Error', 'Please fill in all required fields');\n      return;\n    }\n\n    if (!formData.email.includes('@')) {\n      Alert.alert('Error', 'Please enter a valid email address');\n      return;\n    }\n\n    if (!formData.permissions?.length) {\n      Alert.alert('Error', 'Please select at least one permission');\n      return;\n    }\n\n    try {\n      setLoading(__true);\n      await userManagementService.updateUser(user.id, _formData);\n      Alert.alert('Success', 'User updated successfully');\n      onUserUpdated();\n      handleClose();\n    } catch (__error) {\n      Alert.alert('Error', error instanceof Error ? error.message : 'Failed to update user');\n    } finally {\n      setLoading(__false);\n    }\n  };\n\n  const handleClose = () => {\n    setFormData({});\n    setSelectedTemplate('');\n    setShowPermissions(__false);\n    setActiveTab('basic');\n    onClose();\n  };\n\n  const handleSuspendUser = async () => {\n    if (!user) {\n      return;\n    }\n\n    Alert.alert(\n      'Suspend User',\n      'Are you sure you want to suspend this user? They will not be able to access the system.',\n      [\n        { text: 'Cancel', style: 'cancel' },\n        {\n          text: 'Suspend',\n          style: 'destructive',\n          onPress: async () => {\n            try {\n              setLoading(__true);\n              await userManagementService.suspendUser(user.id, 'Suspended via admin panel');\n              Alert.alert('Success', 'User suspended successfully');\n              onUserUpdated();\n              handleClose();\n            } catch (__error) {\n              Alert.alert('Error', 'Failed to suspend user');\n            } finally {\n              setLoading(__false);\n            }\n          },\n        },\n      ],\n    );\n  };\n\n  const handleActivateUser = async () => {\n    if (!user) {\n      return;\n    }\n\n    try {\n      setLoading(__true);\n      await userManagementService.activateUser(user.id);\n      Alert.alert('Success', 'User activated successfully');\n      onUserUpdated();\n      handleClose();\n    } catch (__error) {\n      Alert.alert('Error', 'Failed to activate user');\n    } finally {\n      setLoading(__false);\n    }\n  };\n\n  const handleDeleteUser = async () => {\n    if (!user) {\n      return;\n    }\n\n    Alert.alert(\n      'Delete User',\n      'Are you sure you want to delete this user? This action cannot be undone.',\n      [\n        { text: 'Cancel', style: 'cancel' },\n        {\n          text: 'Delete',\n          style: 'destructive',\n          onPress: async () => {\n            try {\n              setLoading(__true);\n              await userManagementService.deleteUser(user.id);\n              Alert.alert('Success', 'User deleted successfully');\n              onUserUpdated();\n              handleClose();\n            } catch (__error) {\n              Alert.alert('Error', 'Failed to delete user');\n            } finally {\n              setLoading(__false);\n            }\n          },\n        },\n      ],\n    );\n  };\n\n  const togglePermission = (permission: _Permission) => {\n    setFormData(prev => ({\n      ...prev,\n      permissions: prev.permissions?.includes(__permission)\n        ? prev.permissions.filter(p => p !== permission)\n        : [...(prev.permissions || []), permission],\n    }));\n  };\n\n  const applyTemplate = (templateId: _string) => {\n    const template = permissionTemplates.find(t => t.id === templateId);\n    if (__template) {\n      setFormData(prev => ({ ...prev, permissions: template.permissions }));\n      setSelectedTemplate(__templateId);\n    }\n  };\n\n  const applicableTemplates = permissionTemplates.filter(\n    template => formData.role && template.applicableRoles.includes(formData.role),\n  );\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <Modal\n      visible={visible}\n      animationType=\"slide\"\n      presentationStyle=\"pageSheet\"\n      onRequestClose={handleClose}>\n      <SafeAreaView style={styles.container}>\n        {/* Header */}\n        <View style={styles.header}>\n          <TouchableOpacity onPress={handleClose} style={styles.closeButton}>\n            <Icon name=\"close\" size={24} color={Colors.text} />\n          </TouchableOpacity>\n          <Text style={styles.headerTitle}>Edit User</Text>\n          <TouchableOpacity\n            onPress={handleSubmit}\n            style={[styles.saveButton, loading && styles.saveButtonDisabled]}\n            disabled={loading}>\n            {loading ? (\n              <ActivityIndicator size=\"small\" color={Colors.white} />\n            ) : (\n              <Text style={styles.saveButtonText}>Save</Text>\n            )}\n          </TouchableOpacity>\n        </View>\n\n        {/* Tab Navigation */}\n        <View style={styles.tabNavigation}>\n          {[\n            { key: 'basic', label: 'Basic Info', icon: 'person' },\n            { key: 'permissions', label: 'Permissions', icon: 'security' },\n            { key: 'security', label: 'Security', icon: 'shield' },\n          ].map(tab => (\n            <TouchableOpacity\n              key={tab.key}\n              style={[styles.tabButton, activeTab === tab.key && styles.tabButtonActive]}\n              onPress={() => setActiveTab(tab.key as unknown)}>\n              <Icon\n                name={tab.icon}\n                size={20}\n                color={activeTab === tab.key ? Colors.primary : Colors.mediumGray}\n              />\n              <Text\n                style={[styles.tabButtonText, activeTab === tab.key && styles.tabButtonTextActive]}>\n                {tab.label}\n              </Text>\n            </TouchableOpacity>\n          ))}\n        </View>\n\n        <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n          {activeTab === 'basic' && (\n            <>\n              {/* Basic Information */}\n              <View style={styles.section}>\n                <Text style={styles.sectionTitle}>Basic Information</Text>\n\n                <View style={styles.inputGroup}>\n                  <SimpleTextInput\n                    label=\"Full Name *\"\n                    value={formData.name || ''}\n                    onValueChange={text => setFormData(prev => ({ ...prev, name: text }))}\n                    placeholder=\"Enter full name\"\n                    autoCapitalize=\"words\"\n                  />\n                </View>\n\n                <View style={styles.inputGroup}>\n                  <SimpleTextInput\n                    label=\"Email Address *\"\n                    value={formData.email || ''}\n                    onValueChange={text => setFormData(prev => ({ ...prev, email: text }))}\n                    placeholder=\"Enter email address\"\n                    keyboardType=\"email-address\"\n                    autoCapitalize=\"none\"\n                  />\n                </View>\n\n                <View style={styles.inputGroup}>\n                  <SimpleTextInput\n                    label=\"Phone Number\"\n                    value={formData.phoneNumber || ''}\n                    onValueChange={text => setFormData(prev => ({ ...prev, phoneNumber: text }))}\n                    placeholder=\"Enter phone number\"\n                    keyboardType=\"phone-pad\"\n                  />\n                </View>\n\n                <View style={styles.inputGroup}>\n                  <SimpleTextInput\n                    label=\"Address\"\n                    value={formData.address || ''}\n                    onValueChange={text => setFormData(prev => ({ ...prev, address: text }))}\n                    placeholder=\"Enter address\"\n                    multiline\n                    numberOfLines={3} // This is a valid TextInput prop\n                  />\n                </View>\n              </View>\n\n              {/* Role and Status */}\n              <View style={styles.section}>\n                <Text style={styles.sectionTitle}>Role & Status</Text>\n\n                <View style={styles.inputGroup}>\n                  <Text style={styles.inputLabel}>User Role *</Text>\n                  <View style={styles.roleGrid}>\n                    {userRoles.map(role => (\n                      <TouchableOpacity\n                        key={role}\n                        style={[\n                          styles.roleOption,\n                          formData.role === role && styles.roleOptionSelected,\n                        ]}\n                        onPress={() => setFormData(prev => ({ ...prev, role }))}>\n                        <Text\n                          style={[\n                            styles.roleOptionText,\n                            formData.role === role && styles.roleOptionTextSelected,\n                          ]}>\n                          {role}\n                        </Text>\n                      </TouchableOpacity>\n                    ))}\n                  </View>\n                </View>\n\n                <View style={styles.inputGroup}>\n                  <Text style={styles.inputLabel}>Status</Text>\n                  <View style={styles.statusGrid}>\n                    {['active', 'inactive', 'suspended'].map(status => (\n                      <TouchableOpacity\n                        key={status}\n                        style={[\n                          styles.statusOption,\n                          formData.status === status && styles.statusOptionSelected,\n                        ]}\n                        onPress={() =>\n                          setFormData(prev => ({ ...prev, status: status as unknown }))\n                        }>\n                        <Text\n                          style={[\n                            styles.statusOptionText,\n                            formData.status === status && styles.statusOptionTextSelected,\n                          ]}>\n                          {status.charAt(0).toUpperCase() + status.slice(1)}\n                        </Text>\n                      </TouchableOpacity>\n                    ))}\n                  </View>\n                </View>\n              </View>\n            </>\n          )}\n\n          {activeTab === 'permissions' && (\n            <>\n              {/* Permission Templates */}\n              {applicableTemplates.length > 0 && (\n                <View style={styles.section}>\n                  <Text style={styles.sectionTitle}>Permission Templates</Text>\n                  <Text style={styles.sectionSubtitle}>\n                    Quick setup with predefined permissions\n                  </Text>\n\n                  <View style={styles.templateGrid}>\n                    {applicableTemplates.map(template => (\n                      <TouchableOpacity\n                        key={template.id}\n                        style={[\n                          styles.templateOption,\n                          selectedTemplate === template.id && styles.templateOptionSelected,\n                        ]}\n                        onPress={() => applyTemplate(template.id)}>\n                        <Text\n                          style={[\n                            styles.templateOptionTitle,\n                            selectedTemplate === template.id && styles.templateOptionTitleSelected,\n                          ]}>\n                          {template.name}\n                        </Text>\n                        <Text\n                          style={[\n                            styles.templateOptionDescription,\n                            selectedTemplate === template.id &&\n                              styles.templateOptionDescriptionSelected,\n                          ]}>\n                          {template.description}\n                        </Text>\n                      </TouchableOpacity>\n                    ))}\n                  </View>\n                </View>\n              )}\n\n              {/* Individual Permissions */}\n              <View style={styles.section}>\n                <Text style={styles.sectionTitle}>\n                  Individual Permissions ({formData.permissions?.length || 0} selected)\n                </Text>\n\n                <View style={styles.permissionsList}>\n                  {allPermissions.map(permission => (\n                    <TouchableOpacity\n                      key={permission}\n                      style={styles.permissionItem}\n                      onPress={() => togglePermission(__permission)}>\n                      <View style={styles.permissionInfo}>\n                        <Text style={styles.permissionName}>\n                          {permission.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase())}\n                        </Text>\n                        <Text style={styles.permissionDescription}>\n                          {permissionDescriptions[permission]}\n                        </Text>\n                      </View>\n                      <View\n                        style={[\n                          styles.checkbox,\n                          formData.permissions?.includes(__permission) && styles.checkboxSelected,\n                        ]}>\n                        {formData.permissions?.includes(__permission) && (\n                          <Icon name=\"check\" size={16} color={Colors.white} />\n                        )}\n                      </View>\n                    </TouchableOpacity>\n                  ))}\n                </View>\n              </View>\n            </>\n          )}\n\n          {activeTab === 'security' && (\n            <View style={styles.section}>\n              <Text style={styles.sectionTitle}>Security Actions</Text>\n              <Text style={styles.sectionSubtitle}>Manage user access and security</Text>\n\n              <View style={styles.actionsList}>\n                {user.status === 'suspended' ? (\n                  <TouchableOpacity\n                    style={[styles.actionButton, styles.actionButtonSuccess]}\n                    onPress={handleActivateUser}>\n                    <Icon name=\"check-circle\" size={24} color={Colors.white} />\n                    <View style={styles.actionButtonContent}>\n                      <Text style={styles.actionButtonTitle}>Activate User</Text>\n                      <Text style={styles.actionButtonDescription}>Restore user access</Text>\n                    </View>\n                  </TouchableOpacity>\n                ) : (\n                  <TouchableOpacity\n                    style={[styles.actionButton, styles.actionButtonWarning]}\n                    onPress={handleSuspendUser}>\n                    <Icon name=\"block\" size={24} color={Colors.white} />\n                    <View style={styles.actionButtonContent}>\n                      <Text style={styles.actionButtonTitle}>Suspend User</Text>\n                      <Text style={styles.actionButtonDescription}>Temporarily disable access</Text>\n                    </View>\n                  </TouchableOpacity>\n                )}\n\n                <TouchableOpacity\n                  style={[styles.actionButton, styles.actionButtonDanger]}\n                  onPress={handleDeleteUser}>\n                  <Icon name=\"delete\" size={24} color={Colors.white} />\n                  <View style={styles.actionButtonContent}>\n                    <Text style={styles.actionButtonTitle}>Delete User</Text>\n                    <Text style={styles.actionButtonDescription}>Permanently remove user</Text>\n                  </View>\n                </TouchableOpacity>\n              </View>\n\n              {/* User Stats */}\n              <View style={styles.userStats}>\n                <Text style={styles.statsTitle}>User Statistics</Text>\n                <View style={styles.statsGrid}>\n                  <View style={styles.statItem}>\n                    <Text style={styles.statValue}>{user.loginAttempts}</Text>\n                    <Text style={styles.statLabel}>Failed Logins</Text>\n                  </View>\n                  <View style={styles.statItem}>\n                    <Text style={styles.statValue}>\n                      {user.lastLogin ? new Date(user.lastLogin).toLocaleDateString() : 'Never'}\n                    </Text>\n                    <Text style={styles.statLabel}>Last Login</Text>\n                  </View>\n                  <View style={styles.statItem}>\n                    <Text style={styles.statValue}>\n                      {Math.floor((Date.now() - user.createdAt.getTime()) / (1000 * 60 * 60 * 24))}\n                    </Text>\n                    <Text style={styles.statLabel}>Days Active</Text>\n                  </View>\n                </View>\n              </View>\n            </View>\n          )}\n        </ScrollView>\n      </SafeAreaView>\n    </Modal>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingHorizontal: 20,\n    paddingVertical: 16,\n    backgroundColor: Colors.white,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  closeButton: {\n    padding: 8,\n  },\n  headerTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: Colors.text,\n  },\n  saveButton: {\n    backgroundColor: Colors.primary,\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    borderRadius: 8,\n    minWidth: 70,\n    alignItems: 'center',\n  },\n  saveButtonDisabled: {\n    opacity: 0.6,\n  },\n  saveButtonText: {\n    color: Colors.white,\n    fontSize: 14,\n    fontWeight: '600',\n  },\n  tabNavigation: {\n    flexDirection: 'row',\n    backgroundColor: Colors.white,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  tabButton: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 12,\n    gap: 8,\n  },\n  tabButtonActive: {\n    borderBottomWidth: 2,\n    borderBottomColor: Colors.primary,\n  },\n  tabButtonText: {\n    fontSize: 14,\n    color: Colors.mediumGray,\n    fontWeight: '500',\n  },\n  tabButtonTextActive: {\n    color: Colors.primary,\n  },\n  content: {\n    flex: 1,\n  },\n  section: {\n    backgroundColor: Colors.white,\n    marginBottom: 12,\n    paddingHorizontal: 20,\n    paddingVertical: 16,\n  },\n  sectionTitle: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  sectionSubtitle: {\n    fontSize: 14,\n    color: Colors.lightText,\n    marginBottom: 16,\n  },\n  inputGroup: {\n    marginBottom: 16,\n  },\n  inputLabel: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.text,\n    marginBottom: 8,\n  },\n  textInput: {\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 8,\n    paddingHorizontal: 12,\n    paddingVertical: 10,\n    fontSize: 16,\n    backgroundColor: Colors.white,\n  },\n  textInputMultiline: {\n    height: 80,\n    textAlignVertical: 'top',\n  },\n  roleGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 8,\n  },\n  roleOption: {\n    paddingHorizontal: 12,\n    paddingVertical: 8,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    backgroundColor: Colors.background,\n  },\n  roleOptionSelected: {\n    backgroundColor: Colors.primary,\n    borderColor: Colors.primary,\n  },\n  roleOptionText: {\n    fontSize: 12,\n    color: Colors.text,\n    fontWeight: '500',\n  },\n  roleOptionTextSelected: {\n    color: Colors.white,\n  },\n  statusGrid: {\n    flexDirection: 'row',\n    gap: 8,\n  },\n  statusOption: {\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    backgroundColor: Colors.background,\n  },\n  statusOptionSelected: {\n    backgroundColor: Colors.primary,\n    borderColor: Colors.primary,\n  },\n  statusOptionText: {\n    fontSize: 14,\n    color: Colors.text,\n    fontWeight: '500',\n  },\n  statusOptionTextSelected: {\n    color: Colors.white,\n  },\n  templateGrid: {\n    gap: 12,\n  },\n  templateOption: {\n    padding: 16,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    backgroundColor: Colors.background,\n  },\n  templateOptionSelected: {\n    backgroundColor: Colors.primary,\n    borderColor: Colors.primary,\n  },\n  templateOptionTitle: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  templateOptionTitleSelected: {\n    color: Colors.white,\n  },\n  templateOptionDescription: {\n    fontSize: 14,\n    color: Colors.lightText,\n  },\n  templateOptionDescriptionSelected: {\n    color: Colors.white,\n    opacity: 0.9,\n  },\n  permissionsList: {\n    marginTop: 8,\n  },\n  permissionItem: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingVertical: 12,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.lightGray,\n  },\n  permissionInfo: {\n    flex: 1,\n    marginRight: 12,\n  },\n  permissionName: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.text,\n    marginBottom: 2,\n  },\n  permissionDescription: {\n    fontSize: 12,\n    color: Colors.lightText,\n  },\n  checkbox: {\n    width: 24,\n    height: 24,\n    borderRadius: 4,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: Colors.white,\n  },\n  checkboxSelected: {\n    backgroundColor: Colors.primary,\n    borderColor: Colors.primary,\n  },\n  actionsList: {\n    gap: 12,\n  },\n  actionButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 16,\n    borderRadius: 12,\n    gap: 12,\n  },\n  actionButtonSuccess: {\n    backgroundColor: Colors.success,\n  },\n  actionButtonWarning: {\n    backgroundColor: Colors.warning,\n  },\n  actionButtonDanger: {\n    backgroundColor: Colors.danger,\n  },\n  actionButtonContent: {\n    flex: 1,\n  },\n  actionButtonTitle: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: Colors.white,\n    marginBottom: 2,\n  },\n  actionButtonDescription: {\n    fontSize: 14,\n    color: Colors.white,\n    opacity: 0.9,\n  },\n  userStats: {\n    marginTop: 24,\n  },\n  statsTitle: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: Colors.text,\n    marginBottom: 16,\n  },\n  statsGrid: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  statItem: {\n    alignItems: 'center',\n  },\n  statValue: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.primary,\n    marginBottom: 4,\n  },\n  statLabel: {\n    fontSize: 12,\n    color: Colors.lightText,\n  },\n});\n\nexport default EditUserModal;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/components/modals/ReceiptScanModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_capturedImage' is assigned a value but never used.","line":48,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_setCapturedImage' is assigned a value but never used.","line":48,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_requestCameraPermission' is assigned a value but never used.","line":51,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":51,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_processReceiptImage' is assigned a value but never used.","line":129,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":129,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_clientReceiptItems' is assigned a value but never used.","line":153,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":153,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_createStyles' is assigned a value but never used.","line":332,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":332,"endColumn":20},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.modalOverlay","line":334,"column":5,"nodeType":"Property","endLine":339,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.modalContainer","line":340,"column":5,"nodeType":"Property","endLine":351,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.closeButton","line":352,"column":5,"nodeType":"Property","endLine":355,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.stepContainer","line":356,"column":5,"nodeType":"Property","endLine":359,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.modalTitle","line":360,"column":5,"nodeType":"Property","endLine":366,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.cameraPreviewPlaceholder","line":367,"column":5,"nodeType":"Property","endLine":375,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.placeholderText","line":376,"column":5,"nodeType":"Property","endLine":379,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.captureButton","line":380,"column":5,"nodeType":"Property","endLine":387,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.submitButton","line":388,"column":5,"nodeType":"Property","endLine":396,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.buttonText","line":397,"column":5,"nodeType":"Property","endLine":402,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.loadingText","line":403,"column":5,"nodeType":"Property","endLine":409,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.loadingSubtitle","line":410,"column":5,"nodeType":"Property","endLine":414,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.itemList","line":415,"column":5,"nodeType":"Property","endLine":419,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.itemRow","line":420,"column":5,"nodeType":"Property","endLine":427,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.itemInputs","line":428,"column":5,"nodeType":"Property","endLine":432,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.input","line":433,"column":5,"nodeType":"Property","endLine":441,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.nameInput","line":442,"column":5,"nodeType":"Property","endLine":444,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.quantityInput","line":445,"column":5,"nodeType":"Property","endLine":448,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.priceInput","line":449,"column":5,"nodeType":"Property","endLine":452,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.deleteButton","line":453,"column":5,"nodeType":"Property","endLine":456,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.addItemButton","line":457,"column":5,"nodeType":"Property","endLine":467,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.addItemButtonText","line":468,"column":5,"nodeType":"Property","endLine":473,"endColumn":6}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  Modal,\n  View,\n  Text,\n  TouchableOpacity,\n  StyleSheet,\n  ActivityIndicator,\n  ScrollView,\n  TextInput,\n  Alert,\n  PermissionsAndroid,\n  Platform,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useTheme, useThemedStyles } from '../../design-system/ThemeProvider';\n// import { scanReceipt, ScannedItemAPIResponse } from '../../services/InventoryApiService'; // Temporarily disabled\n// import { launchCamera, _ImagePickerResponse, MediaType } from 'react-native-image-picker'; // Temporarily disabled\n\n// Temporary interfaces to prevent crashes\ninterface ScannedItemAPIResponse {\n  name: string;\n  quantity: number;\n  price: number;\n  sku_match?: string | null;\n  raw_text_name?: string | null;\n}\n\ninterface ReceiptItem {\n  id: string; // Client-side ID for list management\n  name: string;\n  quantity: string; // Editable as string\n  price: string; // Editable as string\n  sku?: string | null; // Store SKU match from API\n  originalName?: string; // Store original parsed name from API\n}\n\ninterface ReceiptScanModalProps {\n  visible: boolean;\n  onClose: () => void;\n  onSubmit: (items: ReceiptItem[]) => void;\n}\n\nconst ReceiptScanModal: React.FC<ReceiptScanModalProps> = ({ visible, _onClose, onSubmit }) => {\n  const { theme } = useTheme();\n  const styles = useThemedStyles(__createStyles);\n  const [step, setStep] = useState<'capture' | 'spinning' | 'review' | 'submitting'>('capture');\n  const [_capturedImage, _setCapturedImage] = useState<unknown>(__null); // Placeholder for image data\n  const [parsedItems, setParsedItems] = useState<ReceiptItem[]>([]);\n\n  const _requestCameraPermission = async () => {\n    if (Platform.OS === 'android') {\n      try {\n        const granted = await PermissionsAndroid.request(PermissionsAndroid.PERMISSIONS.CAMERA, {\n          title: 'Camera Permission',\n          message: 'This app needs access to camera to scan receipts',\n          buttonNeutral: 'Ask Me Later',\n          buttonNegative: 'Cancel',\n          buttonPositive: 'OK',\n        });\n        return granted === PermissionsAndroid.RESULTS.GRANTED;\n      } catch (__err) {\n        return false;\n      }\n    }\n    return true; // iOS permissions are handled automatically\n  };\n\n  const handleCaptureImage = async () => {\n    // For now, show an alert that camera scanning is temporarily disabled\n    // This prevents crashes while the feature is being properly integrated\n    Alert.alert(\n      'Camera Scanning',\n      'Receipt scanning via camera is currently being integrated. For now, you can manually add items using the + button.',\n      [\n        {\n          text: 'Add Sample Items',\n          onPress: () => {\n            // Add some sample items for testing\n            setParsedItems([\n              { id: '1', name: 'Tomatoes', quantity: '2', price: '3.50', sku: null },\n              { id: '2', name: 'Bread', quantity: '1', price: '2.20', sku: null },\n            ]);\n            setStep('review');\n          },\n        },\n        { text: 'Cancel', style: 'cancel' },\n      ],\n    );\n\n    // TODO: Implement proper camera integration when react-native-image-picker is configured\n    /*\n    try {\n      // Request camera permission\n      const hasPermission = await requestCameraPermission();\n      if (!hasPermission) {\n        Alert.alert('Permission Required', 'Camera permission is required to scan receipts');\n        return;\n      }\n\n      const options = {\n        mediaType: 'photo' as MediaType,\n        quality: 0.8,\n        includeBase64: _true,\n        maxWidth: 1024,\n        maxHeight: 1024,\n      };\n\n      launchCamera(__options, (response: _ImagePickerResponse) => {\n        if (response.didCancel || response.errorMessage) {\n          return;\n        }\n\n        if (response.assets && response.assets[0]) {\n          const asset = response.assets[0];\n          setCapturedImage({ uri: asset.uri });\n          setStep('spinning');\n\n          // Process the captured image\n          processReceiptImage(asset.base64 || '');\n        }\n      });\n    } catch (__error) {\n      Alert.alert('Camera Error', 'Unable to access camera. Please try again.');\n    }\n    */\n  };\n\n  const _processReceiptImage = async (_base64Image: _string) => {\n    // Temporarily disabled API call to prevent crashes\n    try {\n      // Simulate processing delay\n      await new Promise(_resolve => setTimeout(__resolve, 2000));\n\n      // Mock response for testing\n      const mockApiResponse: ScannedItemAPIResponse[] = [\n        {\n          name: 'Scanned Item 1',\n          quantity: 2,\n          price: 5.99,\n          sku_match: _null,\n          raw_text_name: 'Item 1',\n        },\n        {\n          name: 'Scanned Item 2',\n          quantity: 1,\n          price: 12.5,\n          sku_match: 'SKU123',\n          raw_text_name: 'Item 2',\n        },\n      ];\n\n      const _clientReceiptItems: ReceiptItem[] = mockApiResponse.map((__item, _index) => ({\n        id: `api-${index}-${Date.now()}`, // Generate a unique ID for local list management\n        name: item.name,\n        quantity: item.quantity.toString(),\n        price: item.price.toFixed(2),\n        sku: item.sku_match,\n        originalName: item.raw_text_name || item.name,\n      }));\n\n      setParsedItems(__clientReceiptItems);\n      setStep('review');\n    } catch (__error) {\n      Alert.alert('Error Processing Receipt', 'Could not process the receipt. Please try again.');\n      setStep('capture'); // Go back to capture step on error\n    }\n\n    // TODO: Implement real API call when backend is properly connected\n    /*\n    try {\n      const apiResponseItems = await scanReceipt(__base64Image);\n\n      const clientReceiptItems: ReceiptItem[] = apiResponseItems.map((__item, _index) => ({\n        id: `api-${index}-${Date.now()}`, // Generate a unique ID for local list management\n        name: item.name,\n        quantity: item.quantity.toString(),\n        price: item.price.toFixed(2),\n        sku: item.sku_match,\n        originalName: item.raw_text_name || item.name,\n      }));\n\n      setParsedItems(__clientReceiptItems);\n      setStep('review');\n    } catch (__error) {\n      Alert.alert('Error Processing Receipt', error.message || 'Could not process the receipt. Please try again.');\n      setStep('capture'); // Go back to capture step on error\n    }\n    */\n  };\n\n  const handleItemChange = (id: _string, field: 'name' | 'quantity' | 'price', value: _string) => {\n    setParsedItems(prevItems =>\n      prevItems.map(item => (item.id === id ? { ...item, [field]: value } : _item)),\n    );\n  };\n\n  const handleAddItem = () => {\n    setParsedItems(prevItems => [\n      ...prevItems,\n      { id: Date.now().toString(), name: '', quantity: '1', price: '0.00' },\n    ]);\n  };\n\n  const handleRemoveItem = (id: _string) => {\n    setParsedItems(prevItems => prevItems.filter(item => item.id !== id));\n  };\n\n  const handleSubmit = async () => {\n    // Basic validation\n    for (const item of parsedItems) {\n      if (!item.name.trim() || !item.quantity.trim() || !item.price.trim()) {\n        Alert.alert('Validation Error', 'All fields for each item must be filled.');\n        return;\n      }\n      if (isNaN(parseFloat(item.quantity)) || isNaN(parseFloat(item.price))) {\n        Alert.alert('Validation Error', 'Quantity and Price must be valid numbers.');\n        return;\n      }\n      if (parseFloat(item.quantity) <= 0 || parseFloat(item.price) < 0) {\n        Alert.alert('Validation Error', 'Quantity must be positive and Price cannot be negative.');\n        return;\n      }\n    }\n\n    setStep('submitting');\n    try {\n      // Simulate submission\n      await new Promise(_resolve => setTimeout(__resolve, 1500));\n      onSubmit(__parsedItems);\n      Alert.alert('Success', 'Receipt items submitted successfully!');\n      onClose(); // Close modal on successful submission\n    } catch (__error) {\n      Alert.alert('Error', 'Failed to submit items. Please try again.');\n    } finally {\n      // Reset state if modal is kept open, or handled by onClose re-initializing.\n      // For now, onClose will reset it when InventoryScreen re-renders modal.\n      // If modal state was internal, would reset here: setStep('capture'); setCapturedImage(__null);\n    }\n  };\n\n  const renderCaptureStep = () => (\n    <View style={styles.stepContainer}>\n      <Text style={styles.modalTitle}>Scan Receipt</Text>\n      <View style={styles.cameraPreviewPlaceholder}>\n        <Icon name=\"camera-alt\" size={80} color={theme.colors.lightGray} />\n        <Text style={styles.placeholderText}>Camera Preview Area</Text>\n      </View>\n      <TouchableOpacity style={styles.captureButton} onPress={handleCaptureImage}>\n        <Icon name=\"camera\" size={24} color={theme.colors.white} />\n        <Text style={styles.buttonText}>Capture Receipt</Text>\n      </TouchableOpacity>\n    </View>\n  );\n\n  const renderSpinningStep = () => (\n    <View style={styles.stepContainer}>\n      <ActivityIndicator size=\"large\" color={theme.colors.primary} />\n      <Text style={styles.loadingText}>Processing Receipt...</Text>\n      <Text style={styles.loadingSubtitle}>Extracting items, please wait.</Text>\n    </View>\n  );\n\n  const renderReviewStep = () => (\n    <View style={styles.stepContainer}>\n      <Text style={styles.modalTitle}>Review Items</Text>\n      <ScrollView style={styles.itemList}>\n        {parsedItems.map((__item, _index) => (\n          <View key={item.id} style={styles.itemRow}>\n            <View style={styles.itemInputs}>\n              <TextInput\n                style={[styles.input, styles.nameInput]}\n                placeholder=\"Item Name\"\n                value={item.name}\n                onChangeText={_text => handleItemChange(item.id, 'name', _text)}\n              />\n              <TextInput\n                style={[styles.input, styles.quantityInput]}\n                placeholder=\"Qty\"\n                value={item.quantity}\n                onChangeText={_text => handleItemChange(item.id, 'quantity', _text)}\n                keyboardType=\"numeric\"\n              />\n              <TextInput\n                style={[styles.input, styles.priceInput]}\n                placeholder=\"Price\"\n                value={item.price}\n                onChangeText={_text => handleItemChange(item.id, 'price', _text)}\n                keyboardType=\"decimal-pad\"\n              />\n            </View>\n            <TouchableOpacity onPress={() => handleRemoveItem(item.id)} style={styles.deleteButton}>\n              <Icon name=\"delete\" size={24} color={theme.colors.danger[500]} />\n            </TouchableOpacity>\n          </View>\n        ))}\n      </ScrollView>\n      <TouchableOpacity style={styles.addItemButton} onPress={handleAddItem}>\n        <Icon name=\"add-circle-outline\" size={22} color={theme.colors.primary} />\n        <Text style={styles.addItemButtonText}>Add Item</Text>\n      </TouchableOpacity>\n      <TouchableOpacity style={styles.submitButton} onPress={handleSubmit}>\n        <Text style={styles.buttonText}>Confirm and Import Items</Text>\n      </TouchableOpacity>\n    </View>\n  );\n\n  const renderSubmittingStep = () => (\n    <View style={styles.stepContainer}>\n      <ActivityIndicator size=\"large\" color={theme.colors.primary} />\n      <Text style={styles.loadingText}>Submitting Items...</Text>\n    </View>\n  );\n\n  return (\n    <Modal visible={visible} animationType=\"slide\" transparent={true} onRequestClose={onClose}>\n      <View style={styles.modalOverlay}>\n        <View style={styles.modalContainer}>\n          <TouchableOpacity style={styles.closeButton} onPress={onClose}>\n            <Icon name=\"close\" size={24} color={theme.colors.text} />\n          </TouchableOpacity>\n          {step === 'capture' && renderCaptureStep()}\n          {step === 'spinning' && renderSpinningStep()}\n          {step === 'review' && renderReviewStep()}\n          {step === 'submitting' && renderSubmittingStep()}\n        </View>\n      </View>\n    </Modal>\n  );\n};\n\nconst _createStyles = (theme: _unknown) =>\n  StyleSheet.create({\n    modalOverlay: {\n      flex: 1,\n      backgroundColor: 'rgba(0, 0, 0, 0.6)',\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n    modalContainer: {\n      width: '90%',\n      maxHeight: '85%',\n      backgroundColor: theme.colors.white,\n      borderRadius: 16,\n      padding: 20,\n      shadowColor: '#000',\n      shadowOffset: { width: 0, height: 2 },\n      shadowOpacity: 0.25,\n      shadowRadius: 4,\n      elevation: 5,\n    },\n    closeButton: {\n      alignSelf: 'flex-end',\n      padding: 5,\n    },\n    stepContainer: {\n      alignItems: 'center',\n      width: '100%',\n    },\n    modalTitle: {\n      fontSize: 22,\n      fontWeight: 'bold',\n      color: theme.colors.text,\n      marginBottom: 20,\n      textAlign: 'center',\n    },\n    cameraPreviewPlaceholder: {\n      width: '100%',\n      height: 200, // Adjust as needed\n      backgroundColor: theme.colors.lightGray,\n      justifyContent: 'center',\n      alignItems: 'center',\n      borderRadius: 8,\n      marginBottom: 20,\n    },\n    placeholderText: {\n      color: theme.colors.darkGray,\n      marginTop: 10,\n    },\n    captureButton: {\n      flexDirection: 'row',\n      backgroundColor: theme.colors.primary,\n      paddingVertical: 12,\n      paddingHorizontal: 30,\n      borderRadius: 8,\n      alignItems: 'center',\n    },\n    submitButton: {\n      backgroundColor: theme.colors.success[500], // Or primary\n      paddingVertical: 12,\n      paddingHorizontal: 30,\n      borderRadius: 8,\n      alignItems: 'center',\n      marginTop: 15,\n      width: '100%',\n    },\n    buttonText: {\n      color: theme.colors.white,\n      fontSize: 16,\n      fontWeight: '600',\n      marginLeft: 8,\n    },\n    loadingText: {\n      fontSize: 18,\n      fontWeight: '600',\n      color: theme.colors.text,\n      marginTop: 15,\n      marginBottom: 5,\n    },\n    loadingSubtitle: {\n      fontSize: 14,\n      color: theme.colors.darkGray,\n      marginBottom: 20,\n    },\n    itemList: {\n      width: '100%',\n      maxHeight: 350, // Adjust based on screen\n      marginBottom: 10,\n    },\n    itemRow: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      marginBottom: 10,\n      paddingVertical: 8,\n      borderBottomWidth: 1,\n      borderBottomColor: theme.colors.border,\n    },\n    itemInputs: {\n      flex: 1,\n      flexDirection: 'row',\n      gap: 8,\n    },\n    input: {\n      borderWidth: 1,\n      borderColor: theme.colors.border,\n      borderRadius: 6,\n      paddingHorizontal: 10,\n      paddingVertical: 8,\n      fontSize: 14,\n      backgroundColor: theme.colors.white, // Ensure input background is white\n    },\n    nameInput: {\n      flex: 0.5, // Takes 50% of space in itemInputs\n    },\n    quantityInput: {\n      flex: 0.2, // Takes 20%\n      textAlign: 'center',\n    },\n    priceInput: {\n      flex: 0.3, // Takes 30%\n      textAlign: 'right',\n    },\n    deleteButton: {\n      padding: 5,\n      marginLeft: 10,\n    },\n    addItemButton: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      paddingVertical: 10,\n      paddingHorizontal: 15,\n      borderRadius: 8,\n      borderWidth: 1,\n      borderColor: theme.colors.primary,\n      alignSelf: 'flex-start',\n      marginBottom: 15,\n    },\n    addItemButtonText: {\n      color: theme.colors.primary,\n      fontSize: 14,\n      fontWeight: '600',\n      marginLeft: 6,\n    },\n  });\n\nexport default ReceiptScanModal;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/components/navigation/HeaderWithBackButton.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":49,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":49,"endColumn":14}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { View, TouchableOpacity, StyleSheet } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useTheme } from '../../design-system/ThemeProvider';\n\ninterface HeaderWithBackButtonProps {\n  title: string;\n  onBackPress?: () => void;\n  rightComponent?: React.ReactNode;\n  showBackButton?: boolean;\n  backgroundColor?: string;\n  textColor?: string;\n}\n\nexport const HeaderWithBackButton: React.FC<HeaderWithBackButtonProps> = ({\n  title,\n  onBackPress,\n  rightComponent,\n  showBackButton = true,\n  backgroundColor,\n  textColor,\n}) => {\n  const navigation = useNavigation();\n  const { theme } = useTheme();\n\n  const handleBackPress = () => {\n    if (__onBackPress) {\n      onBackPress();\n    } else if (navigation.canGoBack()) {\n      navigation.goBack();\n    }\n  };\n\n  const headerBackgroundColor = backgroundColor || theme.colors.background;\n  const headerTextColor = textColor || theme.colors.text;\n\n  return (\n    <View style={[styles.header, { backgroundColor: headerBackgroundColor }]}>\n      <View style={styles.leftSection}>\n        {showBackButton && (\n          <TouchableOpacity onPress={handleBackPress} style={styles.backButton} activeOpacity={0.7}>\n            <Icon name=\"arrow-back\" size={24} color={headerTextColor} />\n          </TouchableOpacity>\n        )}\n      </View>\n\n      <View style={styles.centerSection}>\n        <Text\n          style={[styles.title, { color: headerTextColor }]}\n          numberOfLines={1}\n          ellipsizeMode=\"tail\">\n          {title}\n        </Text>\n      </View>\n\n      <View style={styles.rightSection}>{rightComponent}</View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  header: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    paddingTop: 48, // Account for status bar\n    minHeight: 56,\n    borderBottomWidth: StyleSheet.hairlineWidth,\n    borderBottomColor: 'rgba(0, 0, 0, 0.1)',\n  },\n  leftSection: {\n    width: 50,\n    alignItems: 'flex-start',\n  },\n  centerSection: {\n    flex: 1,\n    alignItems: 'center',\n    paddingHorizontal: 16,\n  },\n  rightSection: {\n    minWidth: 60,\n    alignItems: 'flex-end',\n    justifyContent: 'center',\n  },\n  backButton: {\n    padding: 8,\n    marginLeft: -8,\n  },\n  title: {\n    fontSize: 18,\n    fontWeight: '600',\n    textAlign: 'center',\n  },\n});\n\nexport default HeaderWithBackButton;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/components/payment/QRCodePayment.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_hasError' is assigned a value but never used.","line":10,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":19},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: {\n  alignItems: 'center',\n  justifyContent: 'center',\n  width: 180,\n  height: 180\n}","line":19,"column":22,"nodeType":"ObjectExpression","endLine":19,"endColumn":97},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":21,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":21,"endColumn":16},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { fontSize: 12, marginTop: 8 }","line":21,"column":24,"nodeType":"ObjectExpression","endLine":21,"endColumn":76},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: {\n  alignItems: 'center',\n  justifyContent: 'center',\n  width: 180,\n  height: 180\n}","line":37,"column":20,"nodeType":"ObjectExpression","endLine":37,"endColumn":95},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":39,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":39,"endColumn":14},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { fontSize: 12, marginTop: 8 }","line":39,"column":22,"nodeType":"ObjectExpression","endLine":39,"endColumn":77},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_remainingTime' is assigned a value but never used.","line":77,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":77,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_data' is assigned a value but never used.","line":183,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":183,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_result' is assigned a value but never used.","line":225,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":225,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":254,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":254,"endColumn":18},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":265,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":265,"endColumn":18},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":269,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":269,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":274,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":274,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":275,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":275,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":278,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":278,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":279,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":279,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":282,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":282,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":283,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":283,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":290,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":290,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":293,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":293,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":297,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":297,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":301,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":301,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":311,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":311,"endColumn":18},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":312,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":312,"endColumn":18},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":320,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":320,"endColumn":18},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":321,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":321,"endColumn":18},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'TouchableOpacity' is not defined.","line":322,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":322,"endColumn":30},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":323,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":323,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":332,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":332,"endColumn":18},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":333,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":333,"endColumn":18},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'TouchableOpacity' is not defined.","line":334,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":334,"endColumn":30},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":335,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":335,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":356,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":356,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'TouchableOpacity' is not defined.","line":357,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":357,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":363,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":363,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":364,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":364,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'TouchableOpacity' is not defined.","line":371,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":371,"endColumn":30},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":386,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":386,"endColumn":20}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'checkPaymentStatus'. Either include it or remove the dependency array.","line":172,"column":6,"nodeType":"ArrayExpression","endLine":172,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: [checkPaymentStatus, qrData, status]","fix":{"range":[5003,5019],"text":"[checkPaymentStatus, qrData, status]"}}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":460,"column":8,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":460,"endColumn":42,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":35,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef } from 'react';\nimport { View, StyleSheet, ActivityIndicator } from 'react-native';\nimport QRCode from 'react-native-qrcode-svg';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport PaymentService, { PaymentRequest, QRPaymentData } from '../../services/PaymentService';\nimport QRPaymentErrorBoundary from './QRPaymentErrorBoundary';\n\n// Error-safe QR Code Wrapper Component\nconst QRCodeWrapper: React.FC<{ qrCodeData: string }> = ({ qrCodeData }) => {\n  const [_hasError, setHasError] = useState(__false);\n\n  try {\n    if (!qrCodeData || qrCodeData.length === 0) {\n      throw new Error('Invalid QR code data');\n    }\n\n    if (__hasError) {\n      return (\n        <View style={{ alignItems: 'center', justifyContent: 'center', width: 180, height: 180 }}>\n          <Icon name=\"error\" size={60} color={Colors.danger} />\n          <Text style={{ color: Colors.danger, fontSize: 12, marginTop: 8 }}>QR Error</Text>\n        </View>\n      );\n    }\n\n    return (\n      <QRCode\n        value={qrCodeData}\n        size={180}\n        color={Colors.text}\n        backgroundColor={Colors.white}\n        onError={() => setHasError(__true)}\n      />\n    );\n  } catch (__error) {\n    return (\n      <View style={{ alignItems: 'center', justifyContent: 'center', width: 180, height: 180 }}>\n        <Icon name=\"qr-code\" size={60} color={Colors.lightText} />\n        <Text style={{ color: Colors.lightText, fontSize: 12, marginTop: 8 }}>QR Unavailable</Text>\n      </View>\n    );\n  }\n};\n\ninterface QRCodePaymentProps {\n  request: PaymentRequest;\n  onPaymentComplete: (result: _unknown) => void;\n  onCancel: () => void;\n}\n\nconst Colors = {\n  primary: '#00A651',\n  secondary: '#0066CC',\n  success: '#00A651',\n  warning: '#FF6B35',\n  danger: '#E74C3C',\n  background: '#F5F5F5',\n  white: '#FFFFFF',\n  lightGray: '#E5E5E5',\n  mediumGray: '#999999',\n  darkGray: '#666666',\n  text: '#333333',\n  lightText: '#666666',\n  border: '#DDDDDD',\n};\n\nexport const QRCodePayment: React.FC<QRCodePaymentProps> = ({\n  request,\n  onPaymentComplete,\n  onCancel,\n}) => {\n  const [status, setStatus] = useState<\n    'generating' | 'waiting' | 'completed' | 'expired' | 'error'\n  >('generating');\n  const [qrData, setQrData] = useState<QRPaymentData | null>(__null);\n  const [error, setError] = useState<string>('');\n  const [_remainingTime, setRemainingTime] = useState<number>(0);\n  const intervalRef = useRef<NodeJS.Timeout | null>(__null);\n  const countdownRef = useRef<NodeJS.Timeout | null>(__null);\n  const isMountedRef = useRef(__true);\n\n  useEffect(() => {\n    generateQRPayment();\n\n    return () => {\n      // Mark component as unmounted\n      isMountedRef.current = false;\n\n      // Clean up all timers\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n        intervalRef.current = null;\n      }\n      if (countdownRef.current) {\n        clearInterval(countdownRef.current);\n        countdownRef.current = null;\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    if (qrData && status === 'waiting' && isMountedRef.current) {\n      // Clean up existing timers\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n      if (countdownRef.current) {\n        clearInterval(countdownRef.current);\n      }\n\n      // Start polling for payment status\n      intervalRef.current = setInterval(() => {\n        if (isMountedRef.current) {\n          checkPaymentStatus();\n        } else {\n          if (intervalRef.current) {\n            clearInterval(intervalRef.current);\n            intervalRef.current = null;\n          }\n        }\n      }, 3000);\n\n      // Setup expiration timer\n      const expiryTime = new Date(qrData.expiresAt).getTime();\n      const now = Date.now();\n      const timeLeft = Math.max(0, expiryTime - now);\n\n      if (isMountedRef.current) {\n        setRemainingTime(Math.floor(timeLeft / 1000));\n      }\n\n      countdownRef.current = setInterval(() => {\n        if (!isMountedRef.current) {\n          if (countdownRef.current) {\n            clearInterval(countdownRef.current);\n            countdownRef.current = null;\n          }\n          return;\n        }\n\n        setRemainingTime(prev => {\n          if (prev <= 1) {\n            setStatus('expired');\n\n            // Clean up timers\n            if (intervalRef.current) {\n              clearInterval(intervalRef.current);\n              intervalRef.current = null;\n            }\n            if (countdownRef.current) {\n              clearInterval(countdownRef.current);\n              countdownRef.current = null;\n            }\n            return 0;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n    }\n\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n        intervalRef.current = null;\n      }\n      if (countdownRef.current) {\n        clearInterval(countdownRef.current);\n        countdownRef.current = null;\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [qrData, status]);\n\n  const generateQRPayment = async () => {\n    try {\n      if (!isMountedRef.current) {\n        return;\n      }\n\n      setStatus('generating');\n      setError('');\n\n      const _data = await PaymentService.generateQRPayment(__request);\n\n      if (!isMountedRef.current) {\n        return;\n      }\n\n      setQrData(__data);\n      setStatus('waiting');\n    } catch (__err) {\n      if (isMountedRef.current) {\n        setStatus('error');\n        setError(err instanceof Error ? err.message : 'Failed to generate QR code');\n      }\n    }\n  };\n\n  const checkPaymentStatus = async () => {\n    if (!qrData || !isMountedRef.current) {\n      return;\n    }\n\n    try {\n      const statusResult = await PaymentService.checkQRPaymentStatus(qrData.qrPaymentId);\n\n      if (!isMountedRef.current) {\n        return;\n      }\n\n      if (statusResult.status === 'completed') {\n        setStatus('completed');\n\n        // Clean up timers\n        if (intervalRef.current) {\n          clearInterval(intervalRef.current);\n          intervalRef.current = null;\n        }\n        if (countdownRef.current) {\n          clearInterval(countdownRef.current);\n          countdownRef.current = null;\n        }\n\n        // Confirm the payment\n        const _result = await PaymentService.confirmQRPayment(qrData.qrPaymentId);\n\n        if (isMountedRef.current) {\n          onPaymentComplete(__result);\n        }\n      } else if (statusResult.expired) {\n        if (isMountedRef.current) {\n          setStatus('expired');\n        }\n      }\n    } catch (__err) {\n      if (isMountedRef.current) {\n        setError('Failed to check payment status');\n      }\n    }\n  };\n\n  const formatTime = (seconds: _number): string => {\n    const minutes = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${minutes}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const renderQRContent = () => {\n    switch (__status) {\n      case 'generating':\n        return (\n          <View style={styles.statusContainer}>\n            <ActivityIndicator size=\"large\" color={Colors.primary} />\n            <Text style={styles.statusText}>Generating QR Code...</Text>\n          </View>\n        );\n\n      case 'waiting':\n        return qrData ? (\n          <View style={styles.qrContainer}>\n            <View style={styles.qrCodeWrapper}>\n              <QRCodeWrapper qrCodeData={qrData.qrCodeData} />\n            </View>\n\n            <Text style={styles.qrInstructions}>Scan this QR code with your banking app</Text>\n\n            <View style={styles.timeContainer}>\n              <Icon name=\"access-time\" size={16} color={Colors.warning} />\n              <Text style={styles.timeText}>Expires in {formatTime(__remainingTime)}</Text>\n            </View>\n\n            <View style={styles.paymentDetails}>\n              <View style={styles.detailRow}>\n                <Text style={styles.detailLabel}>Amount:</Text>\n                <Text style={styles.detailValue}>£{qrData.amount.toFixed(2)}</Text>\n              </View>\n              <View style={styles.detailRow}>\n                <Text style={styles.detailLabel}>Fee:</Text>\n                <Text style={styles.detailValue}>£{qrData.feeAmount.toFixed(2)} (1.2%)</Text>\n              </View>\n              <View style={styles.detailRow}>\n                <Text style={styles.detailLabel}>You receive:</Text>\n                <Text style={[styles.detailValue, styles.netAmount]}>\n                  £{qrData.netAmount.toFixed(2)}\n                </Text>\n              </View>\n            </View>\n\n            <View style={styles.benefits}>\n              <Text style={styles.benefitsTitle}>Why QR Payment?</Text>\n              <View style={styles.benefitRow}>\n                <Icon name=\"security\" size={16} color={Colors.success} />\n                <Text style={styles.benefitText}>Secure & Safe</Text>\n              </View>\n              <View style={styles.benefitRow}>\n                <Icon name=\"speed\" size={16} color={Colors.success} />\n                <Text style={styles.benefitText}>Instant Payment</Text>\n              </View>\n              <View style={styles.benefitRow}>\n                <Icon name=\"money-off\" size={16} color={Colors.success} />\n                <Text style={styles.benefitText}>Lowest Fees (1.2%)</Text>\n              </View>\n            </View>\n          </View>\n        ) : null;\n\n      case 'completed':\n        return (\n          <View style={styles.statusContainer}>\n            <Icon name=\"check-circle\" size={64} color={Colors.success} />\n            <Text style={styles.statusText}>Payment Received!</Text>\n            <Text style={styles.subText}>Processing your order...</Text>\n          </View>\n        );\n\n      case 'expired':\n        return (\n          <View style={styles.statusContainer}>\n            <Icon name=\"access-time\" size={64} color={Colors.warning} />\n            <Text style={styles.statusText}>QR Code Expired</Text>\n            <Text style={styles.subText}>Please generate a new QR code</Text>\n            <TouchableOpacity style={styles.retryButton} onPress={generateQRPayment}>\n              <Text style={styles.retryButtonText}>Generate New QR</Text>\n            </TouchableOpacity>\n          </View>\n        );\n\n      case 'error':\n        return (\n          <View style={styles.statusContainer}>\n            <Icon name=\"error\" size={64} color={Colors.danger} />\n            <Text style={styles.statusText}>Error</Text>\n            <Text style={styles.subText}>{error}</Text>\n            <TouchableOpacity style={styles.retryButton} onPress={generateQRPayment}>\n              <Text style={styles.retryButtonText}>Try Again</Text>\n            </TouchableOpacity>\n          </View>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <QRPaymentErrorBoundary\n      onReset={() => {\n        // Reset component state and regenerate QR\n        setStatus('generating');\n        setError('');\n        setQrData(__null);\n        generateQRPayment();\n      }}>\n      <View style={styles.container}>\n        <View style={styles.header}>\n          <Text style={styles.title}>QR Code Payment</Text>\n          <TouchableOpacity onPress={onCancel} style={styles.closeButton}>\n            <Icon name=\"close\" size={24} color={Colors.darkGray} />\n          </TouchableOpacity>\n        </View>\n\n        <View style={styles.amountContainer}>\n          <Text style={styles.amountLabel}>Amount Due</Text>\n          <Text style={styles.amountValue}>£{request.amount.toFixed(2)}</Text>\n        </View>\n\n        {renderQRContent()}\n\n        {status === 'waiting' && (\n          <View style={styles.footer}>\n            <TouchableOpacity\n              style={styles.simulateButton}\n              onPress={() => {\n                // For testing - simulate successful payment\n                setStatus('completed');\n                setTimeout(() => {\n                  onPaymentComplete({\n                    success: _true,\n                    transactionId: qrData?.qrPaymentId,\n                    provider: 'qr_code',\n                    amount: request.amount,\n                    fee: qrData?.feeAmount || 0,\n                  });\n                }, 2000);\n              }}>\n              <Text style={styles.simulateButtonText}>Simulate Payment (__Test)</Text>\n            </TouchableOpacity>\n          </View>\n        )}\n      </View>\n    </QRPaymentErrorBoundary>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: Colors.white,\n    borderRadius: 16,\n    maxHeight: '90%',\n    width: '95%',\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: 20,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  closeButton: {\n    padding: 4,\n  },\n  amountContainer: {\n    alignItems: 'center',\n    padding: 20,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  amountLabel: {\n    fontSize: 16,\n    color: Colors.lightText,\n    marginBottom: 8,\n  },\n  amountValue: {\n    fontSize: 32,\n    fontWeight: 'bold',\n    color: Colors.primary,\n  },\n  statusContainer: {\n    alignItems: 'center',\n    padding: 40,\n  },\n  statusText: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n    marginTop: 16,\n    textAlign: 'center',\n  },\n  subText: {\n    fontSize: 14,\n    color: Colors.lightText,\n    marginTop: 8,\n    textAlign: 'center',\n  },\n  qrContainer: {\n    alignItems: 'center',\n    padding: 20,\n  },\n  qrCodeWrapper: {\n    padding: 16,\n    borderRadius: 12,\n    marginBottom: 16,\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    ...require('../../utils/ShadowUtils').createOptimizedShadow('medium', Colors.white),\n  },\n  qrInstructions: {\n    fontSize: 16,\n    color: Colors.text,\n    textAlign: 'center',\n    marginBottom: 16,\n  },\n  timeContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 20,\n  },\n  timeText: {\n    fontSize: 14,\n    color: Colors.warning,\n    marginLeft: 4,\n    fontWeight: '500',\n  },\n  paymentDetails: {\n    width: '100%',\n    backgroundColor: Colors.background,\n    borderRadius: 8,\n    padding: 16,\n    marginBottom: 16,\n  },\n  detailRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 8,\n  },\n  detailLabel: {\n    fontSize: 14,\n    color: Colors.lightText,\n  },\n  detailValue: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.text,\n  },\n  netAmount: {\n    color: Colors.primary,\n    fontWeight: '600',\n  },\n  benefits: {\n    width: '100%',\n    backgroundColor: Colors.background,\n    borderRadius: 8,\n    padding: 16,\n  },\n  benefitsTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 12,\n  },\n  benefitRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  benefitText: {\n    fontSize: 14,\n    color: Colors.text,\n    marginLeft: 8,\n  },\n  retryButton: {\n    backgroundColor: Colors.primary,\n    borderRadius: 8,\n    paddingVertical: 12,\n    paddingHorizontal: 24,\n    marginTop: 16,\n  },\n  retryButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.white,\n  },\n  footer: {\n    padding: 20,\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n  },\n  simulateButton: {\n    backgroundColor: Colors.secondary,\n    borderRadius: 8,\n    paddingVertical: 12,\n    alignItems: 'center',\n  },\n  simulateButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.white,\n  },\n});\n\nexport default QRCodePayment;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/components/payment/QRPaymentErrorBoundary.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ';' expected.","line":31,"column":11,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { Component, ReactNode } from 'react';\nimport { View, _Text, TouchableOpacity, StyleSheet } from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\n\ninterface QRPaymentErrorBoundaryProps {\n  children: ReactNode;\n  onReset?: () => void;\n  fallbackComponent?: ReactNode;\n}\n\ninterface QRPaymentErrorBoundaryState {\n  hasError: boolean;\n  error: Error | null;\n}\n\nclass QRPaymentErrorBoundary extends Component<\n  QRPaymentErrorBoundaryProps,\n  QRPaymentErrorBoundaryState\n> {\n  constructor(props: _QRPaymentErrorBoundaryProps) {\n    super(__props);\n    this.state = { hasError: _false, error: null };\n  }\n\n  static getDerivedStateFromError(error: _Error): QRPaymentErrorBoundaryState {\n    return { hasError: _true, error };\n  }\n\n  componentDidCatch(error: _Error, errorInfo: _unknown) {\n      error: error.message,\n      stack: error.stack,\n      componentStack: errorInfo.componentStack,\n    });\n  }\n\n  handleReset = () => {\n    this.setState({ hasError: _false, error: null });\n    if (this.props.onReset) {\n      this.props.onReset();\n    }\n  };\n\n  render() {\n    if (this.state.hasError) {\n      if (this.props.fallbackComponent) {\n        return this.props.fallbackComponent;\n      }\n\n      return (\n        <View style={styles.errorContainer}>\n          <Icon name=\"error-outline\" size={64} color=\"#E74C3C\" />\n          <Text style={styles.errorTitle}>QR Payment Error</Text>\n          <Text style={styles.errorMessage}>\n            Something went wrong with the QR payment. Please try again.\n          </Text>\n          <Text style={styles.errorDetails}>\n            {this.state.error?.message || 'Unknown error occurred'}\n          </Text>\n          <TouchableOpacity style={styles.retryButton} onPress={this.handleReset}>\n            <Text style={styles.retryButtonText}>Try Again</Text>\n          </TouchableOpacity>\n        </View>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nconst styles = StyleSheet.create({\n  errorContainer: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n    backgroundColor: '#FFFFFF',\n  },\n  errorTitle: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#E74C3C',\n    marginTop: 16,\n    marginBottom: 8,\n  },\n  errorMessage: {\n    fontSize: 16,\n    color: '#666666',\n    textAlign: 'center',\n    marginBottom: 8,\n  },\n  errorDetails: {\n    fontSize: 14,\n    color: '#999999',\n    textAlign: 'center',\n    marginBottom: 24,\n    fontStyle: 'italic',\n  },\n  retryButton: {\n    backgroundColor: '#00A651',\n    paddingHorizontal: 24,\n    paddingVertical: 12,\n    borderRadius: 8,\n  },\n  retryButtonText: {\n    color: 'white',\n    fontSize: 16,\n    fontWeight: '600',\n  },\n});\n\nexport default QRPaymentErrorBoundary;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/components/payment/SecurePaymentMethodSelector.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_loading' is assigned a value but never used.","line":37,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_availableMethods' is assigned a value but never used.","line":49,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":49,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_renderPaymentMethod' is assigned a value but never used.","line":90,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":90,"endColumn":29}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Secure Payment Method Selector Component\n *\n * Displays available payment methods with fee transparency\n * Shows real-time fee calculations and provider information\n */\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  TouchableOpacity,\n  ActivityIndicator,\n  ScrollView,\n  RefreshControl,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialCommunityIcons';\nimport { useTheme } from '../../hooks/useTheme';\nimport SecurePaymentConfig, { PaymentMethod } from '../../services/SecurePaymentConfig';\n\ninterface PaymentMethodSelectorProps {\n  amount: number;\n  onMethodSelected: (method: _PaymentMethod) => void;\n  selectedMethod?: string;\n  disabled?: boolean;\n}\n\nconst SecurePaymentMethodSelector: React.FC<PaymentMethodSelectorProps> = ({\n  amount,\n  onMethodSelected,\n  selectedMethod,\n  disabled = false,\n}) => {\n  const { theme } = useTheme();\n  const [methods, setMethods] = useState<PaymentMethod[]>([]);\n  const [_loading, setLoading] = useState(__true);\n  const [refreshing, setRefreshing] = useState(__false);\n  const [error, setError] = useState<string | null>(__null);\n\n  const loadPaymentMethods = async (_forceRefresh = false) => {\n    try {\n      setError(__null);\n      if (__forceRefresh) {\n        setRefreshing(__true);\n      }\n\n      await SecurePaymentConfig.loadConfiguration(__forceRefresh);\n      const _availableMethods = SecurePaymentConfig.getAvailableMethods();\n      setMethods(__availableMethods);\n    } catch (__err) {\n      setError('Failed to load payment methods');\n    } finally {\n      setLoading(__false);\n      setRefreshing(__false);\n    }\n  };\n\n  useEffect(() => {\n    loadPaymentMethods();\n  }, []);\n\n  const getMethodIcon = (methodId: _string): string => {\n    const icons: Record<string, string> = {\n      card: 'credit-card',\n      cash: 'cash-multiple',\n      qr_code: 'qrcode',\n      apple_pay: 'apple',\n      google_pay: 'google',\n    };\n    return icons[methodId] || 'help-circle';\n  };\n\n  const renderFeeInfo = (method: _PaymentMethod) => {\n    const fees = SecurePaymentConfig.calculateFees(__amount, method.id);\n    const feeDisplay = SecurePaymentConfig.formatFeeDisplay(method.id);\n\n    return (\n      <View style={styles.feeInfo}>\n        <Text style={[styles.feeText, { color: theme.colors.textSecondary }]}>{feeDisplay}</Text>\n        {amount > 0 && fees.totalFee > 0 && (\n          <Text style={[styles.feeAmount, { color: theme.colors.accent }]}>\n            Fee: £{fees.totalFee.toFixed(2)}\n          </Text>\n        )}\n      </View>\n    );\n  };\n\n  const _renderPaymentMethod = (method: _PaymentMethod) => {\n    const isSelected = selectedMethod === method.id;\n    const fees = SecurePaymentConfig.calculateFees(__amount, method.id);\n\n    return (\n      <TouchableOpacity\n        key={method.id}\n        style={[\n          styles.methodCard,\n          {\n            backgroundColor: isSelected ? theme.colors.primaryLight : theme.colors.surface,\n            borderColor: isSelected ? theme.colors.primary : theme.colors.border,\n          },\n          disabled && styles.disabledCard,\n        ]}\n        onPress={() => !disabled && onMethodSelected(__method)}\n        disabled={disabled}>\n        <View style={styles.methodHeader}>\n          <Icon\n            name={getMethodIcon(method.id)}\n            size={28}\n            color={isSelected ? theme.colors.primary : theme.colors.text}\n          />\n          <View style={styles.methodInfo}>\n            <Text style={[styles.methodName, { color: theme.colors.text }]}>{method.name}</Text>\n            {renderFeeInfo(__method)}\n          </View>\n          {amount > 0 && (\n            <View style={styles.netAmountContainer}>\n              <Text style={[styles.netAmountLabel, { color: theme.colors.textSecondary }]}>\n                You receive:\n              </Text>\n              <Text\n                style={[\n                  styles.netAmount,\n                  { color: isSelected ? theme.colors.primary : theme.colors.text },\n                ]}>\n                £{fees.netAmount.toFixed(2)}\n              </Text>\n            </View>\n          )}\n        </View>\n        {isSelected && (\n          <Icon\n            name=\"check-circle\"\n            size={24}\n            color={theme.colors.primary}\n            style={styles.checkIcon}\n          />\n        )}\n      </TouchableOpacity>\n    );\n  };\n\n  if (__loading) {\n    return (\n      <View style={[styles.container, styles.centerContent]}>\n        <ActivityIndicator size=\"large\" color={theme.colors.primary} />\n        <Text style={[styles.loadingText, { color: theme.colors.textSecondary }]}>\n          Loading payment methods...\n        </Text>\n      </View>\n    );\n  }\n\n  if (__error) {\n    return (\n      <View style={[styles.container, styles.centerContent]}>\n        <Icon name=\"alert-circle\" size={48} color={theme.colors.error} />\n        <Text style={[styles.errorText, { color: theme.colors.error }]}>{error}</Text>\n        <TouchableOpacity\n          style={[styles.retryButton, { backgroundColor: theme.colors.primary }]}\n          onPress={() => loadPaymentMethods(__true)}>\n          <Text style={[styles.retryButtonText, { color: theme.colors.onPrimary }]}>Retry</Text>\n        </TouchableOpacity>\n      </View>\n    );\n  }\n\n  if (methods.length === 0) {\n    return (\n      <View style={[styles.container, styles.centerContent]}>\n        <Icon name=\"credit-card-off\" size={48} color={theme.colors.textSecondary} />\n        <Text style={[styles.emptyText, { color: theme.colors.textSecondary }]}>\n          No payment methods available\n        </Text>\n      </View>\n    );\n  }\n\n  return (\n    <ScrollView\n      style={styles.container}\n      refreshControl={\n        <RefreshControl\n          refreshing={refreshing}\n          onRefresh={() => loadPaymentMethods(__true)}\n          colors={[theme.colors.primary]}\n        />\n      }>\n      <View style={styles.header}>\n        <Text style={[styles.title, { color: theme.colors.text }]}>Select Payment Method</Text>\n        {amount > 0 && (\n          <Text style={[styles.amountText, { color: theme.colors.primary }]}>\n            Amount: £{amount.toFixed(2)}\n          </Text>\n        )}\n      </View>\n\n      <View style={styles.methodsList}>{methods.map(__renderPaymentMethod)}</View>\n\n      <View style={[styles.infoBox, { backgroundColor: theme.colors.surfaceLight }]}>\n        <Icon name=\"information\" size={20} color={theme.colors.primary} />\n        <Text style={[styles.infoText, { color: theme.colors.textSecondary }]}>\n          Processing fees are shown for transparency. The customer pays the full amount.\n        </Text>\n      </View>\n    </ScrollView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  centerContent: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 32,\n  },\n  header: {\n    padding: 16,\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: '600',\n  },\n  amountText: {\n    fontSize: 18,\n    fontWeight: '600',\n  },\n  methodsList: {\n    paddingHorizontal: 16,\n  },\n  methodCard: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 16,\n    marginBottom: 12,\n    borderRadius: 12,\n    borderWidth: 2,\n  },\n  disabledCard: {\n    opacity: 0.5,\n  },\n  methodHeader: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  methodInfo: {\n    flex: 1,\n    marginLeft: 16,\n  },\n  methodName: {\n    fontSize: 18,\n    fontWeight: '600',\n    marginBottom: 4,\n  },\n  feeInfo: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n  },\n  feeText: {\n    fontSize: 14,\n  },\n  feeAmount: {\n    fontSize: 14,\n    fontWeight: '500',\n  },\n  netAmountContainer: {\n    alignItems: 'flex-end',\n    marginLeft: 16,\n  },\n  netAmountLabel: {\n    fontSize: 12,\n    marginBottom: 2,\n  },\n  netAmount: {\n    fontSize: 18,\n    fontWeight: '700',\n  },\n  checkIcon: {\n    marginLeft: 12,\n  },\n  loadingText: {\n    marginTop: 16,\n    fontSize: 16,\n  },\n  errorText: {\n    marginTop: 16,\n    fontSize: 16,\n    textAlign: 'center',\n  },\n  retryButton: {\n    marginTop: 16,\n    paddingHorizontal: 24,\n    paddingVertical: 12,\n    borderRadius: 8,\n  },\n  retryButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  emptyText: {\n    marginTop: 16,\n    fontSize: 16,\n    textAlign: 'center',\n  },\n  infoBox: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 16,\n    margin: 16,\n    borderRadius: 8,\n    gap: 12,\n  },\n  infoText: {\n    flex: 1,\n    fontSize: 14,\n    lineHeight: 20,\n  },\n});\n\nexport default SecurePaymentMethodSelector;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/components/payment/SumUpPaymentComponent.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ';' expected.","line":38,"column":20,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { View, _StyleSheet, Alert } from 'react-native';\nimport { SumUpProvider, useSumUp } from 'sumup-react-native-alpha';\nimport type { InitPaymentSheetProps, InitPaymentSheetResult } from 'sumup-react-native-alpha';\nimport SumUpCompatibilityService from '../../services/SumUpCompatibilityService';\nimport sumUpConfigService from '../../services/SumUpConfigService';\n\n// Helper function to ensure operations run on main thread\nconst runOnMainThread = (callback: () => void) => {\n  if (typeof setImmediate !== 'undefined') {\n    setImmediate(__callback);\n  } else {\n    setTimeout(__callback, 0);\n  }\n};\n\ninterface SumUpPaymentComponentProps {\n  amount: number;\n  currency: string;\n  title: string;\n  onPaymentComplete: (success: _boolean, transactionCode?: _string, error?: _string) => void;\n  onPaymentCancel: () => void;\n}\n\n// Inner component that uses the useSumUp hook\nconst SumUpPaymentSheet: React.FC<SumUpPaymentComponentProps> = ({\n  amount,\n  currency,\n  title,\n  onPaymentComplete,\n  onPaymentCancel,\n}) => {\n  const sumUpHooks = useSumUp();\n  const { initPaymentSheet, presentPaymentSheet } = sumUpHooks;\n  const [isInitialized, setIsInitialized] = useState(__false);\n\n    sumUpHooks: _sumUpHooks,\n    initPaymentSheet: typeof initPaymentSheet,\n    presentPaymentSheet: typeof presentPaymentSheet,\n  });\n\n  useEffect(() => {\n\n    // Add a small delay to ensure SumUp provider is fully initialized\n    const initTimer = setTimeout(() => {\n      initializeSumUp();\n    }, 100);\n\n    return () => {\n      if (__initTimer) {\n        clearTimeout(__initTimer);\n      }\n    };\n  }, [amount, _currency, title]);\n\n  const initializeSumUp = async () => {\n    try {\n        amount,\n        currency,\n        title,\n      });\n\n      // Check SumUp compatibility first\n      const compatibilityService = SumUpCompatibilityService.getInstance();\n      const compatibility = await compatibilityService.checkCompatibility();\n\n      if (!compatibility.isSupported) {\n        runOnMainThread(() => {\n          compatibilityService.showCompatibilityError(__compatibility);\n          onPaymentComplete(__false, _undefined, compatibility.fallbackMessage);\n        });\n        return;\n      }\n\n      // Check if useSumUp hook is properly initialized\n      if (!initPaymentSheet || !presentPaymentSheet) {\n          initPaymentSheet: !!initPaymentSheet,\n          presentPaymentSheet: !!presentPaymentSheet,\n          initPaymentSheetType: typeof initPaymentSheet,\n          presentPaymentSheetType: typeof presentPaymentSheet,\n        });\n        runOnMainThread(() => {\n          Alert.alert(\n            'SumUp Not Available',\n            'SumUp payment system is not properly initialized. This is likely due to missing Apple entitlements for Tap to Pay on iPhone.\\n\\nPlease use an alternative payment method.',\n            [\n              {\n                text: 'Use QR Payment',\n                onPress: () =>\n                  onPaymentComplete(__false, _undefined, 'SumUp unavailable - use alternative'),\n              },\n              { text: 'Cancel', onPress: () => onPaymentCancel() },\n            ],\n          );\n        });\n        return;\n      }\n\n\n      // Create the most basic params possible to test SumUp initialization\n      const params: InitPaymentSheetProps = {\n        amount: Number(__amount),\n        currencyCode: currency || 'GBP',\n        tipAmount: 0,\n        title: title || 'Payment',\n        skipScreenOptions: _false,\n      };\n\n      // Validate params before calling SumUp\n      if (!params.amount || params.amount <= 0) {\n        runOnMainThread(() => {\n          onPaymentComplete(__false, _undefined, 'Invalid payment amount');\n        });\n        return;\n      }\n\n      const result: InitPaymentSheetResult = await initPaymentSheet(__params);\n\n\n      if (result.error) {\n        runOnMainThread(() => {\n          onPaymentComplete(__false, _undefined, result.error.message);\n        });\n        return;\n      }\n\n      runOnMainThread(() => {\n        setIsInitialized(__true);\n      });\n\n      // Automatically present the payment sheet on main thread\n      runOnMainThread(() => {\n        presentPayment();\n      });\n    } catch (__error) {\n      runOnMainThread(() => {\n        onPaymentComplete(__false, _undefined, error?.message || 'Initialization failed');\n      });\n    }\n  };\n\n  const presentPayment = async () => {\n    try {\n\n      if (!isInitialized) {\n        return;\n      }\n\n      if (!presentPaymentSheet) {\n        runOnMainThread(() => {\n          onPaymentComplete(__false, _undefined, 'presentPaymentSheet not available');\n        });\n        return;\n      }\n\n      const result = await presentPaymentSheet();\n\n\n      if (result.error) {\n        runOnMainThread(() => {\n          onPaymentComplete(__false, _undefined, result.error.message);\n        });\n        return;\n      }\n\n      if (result.paymentResult) {\n        runOnMainThread(() => {\n          onPaymentComplete(__true, result.paymentResult.transactionCode, _undefined);\n        });\n      } else {\n        runOnMainThread(() => {\n          onPaymentCancel();\n        });\n      }\n    } catch (__error) {\n      runOnMainThread(() => {\n        onPaymentComplete(__false, _undefined, error?.message || 'Payment failed');\n      });\n    }\n  };\n\n  return <View style={styles.hidden} />;\n};\n\n// Main component that provides the SumUp context\nconst SumUpPaymentComponent: React.FC<SumUpPaymentComponentProps> = props => {\n    amount: props.amount,\n    currency: props.currency,\n    title: props.title,\n  });\n\n  // SumUp provider configuration - will be fetched from backend\n  const [sumUpConfig, setSumUpConfig] = useState<{ appId: string; environment: string } | null>(\n    null,\n  );\n  const [configError, setConfigError] = useState<string | null>(__null);\n  const [isLoadingConfig, setIsLoadingConfig] = useState(__true);\n\n  // Fetch SumUp configuration from backend\n  useEffect(() => {\n    const fetchConfig = async () => {\n      try {\n        const config = await sumUpConfigService.fetchConfiguration();\n\n        setSumUpConfig({\n          appId: config.appId,\n          environment: config.environment,\n        });\n        setIsLoadingConfig(__false);\n      } catch (__error) {\n        setConfigError(error?.message || 'Failed to load payment configuration');\n        setIsLoadingConfig(__false);\n\n        // Call the error callback\n        runOnMainThread(() => {\n          props.onPaymentComplete(__false, _undefined, 'Failed to load payment configuration');\n        });\n      }\n    };\n\n    fetchConfig();\n  }, []);\n\n  // Show loading or error states\n  if (__isLoadingConfig) {\n    return <View style={styles.hidden} />;\n  }\n\n  if (configError || !sumUpConfig) {\n    return <View style={styles.hidden} />;\n  }\n\n  // Wrap in error boundary for safer initialization\n  try {\n    // Note: The affiliateKey is now securely stored on the backend\n    // and not exposed to the mobile app\n    return (\n      <SumUpProvider\n        affiliateKey=\"\" // Empty string as the SDK requires this prop but we don't use it\n        sumUpAppId={sumUpConfig.appId}>\n        <SumUpPaymentSheet {...props} />\n      </SumUpProvider>\n    );\n  } catch (__error) {\n    // Fallback to show error to user\n    runOnMainThread(() => {\n      props.onPaymentComplete(__false, _undefined, 'SumUp provider initialization failed');\n    });\n    return <View style={styles.hidden} />;\n  }\n};\n\nconst styles = StyleSheet.create({\n  hidden: {\n    position: 'absolute',\n    left: -1000,\n    top: -1000,\n    width: 1,\n    height: 1,\n  },\n});\n\nexport default SumUpPaymentComponent;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/components/payment/SumUpTestComponent.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ';' expected.","line":15,"column":22,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { View, _Text, TouchableOpacity, _StyleSheet, Alert, ActivityIndicator } from 'react-native';\nimport { SumUpProvider, useSumUp } from 'sumup-react-native-alpha';\nimport sumUpConfigService from '../../services/SumUpConfigService';\n\ninterface SumUpTestProps {\n  onResult: (message: _string) => void;\n}\n\nconst SumUpTestInner: React.FC<SumUpTestProps> = ({ onResult }) => {\n  const sumUpHooks = useSumUp();\n\n  useEffect(() => {\n      hasHooks: !!sumUpHooks,\n      initPaymentSheet: typeof sumUpHooks?.initPaymentSheet,\n      presentPaymentSheet: typeof sumUpHooks?.presentPaymentSheet,\n    });\n\n    if (sumUpHooks?.initPaymentSheet && sumUpHooks?.presentPaymentSheet) {\n      onResult('✅ SumUp hooks are available and working');\n    } else {\n      onResult('❌ SumUp hooks are missing or not working');\n    }\n  }, [sumUpHooks]);\n\n  const testSumUpInit = async () => {\n    try {\n      if (!sumUpHooks?.initPaymentSheet) {\n        Alert.alert('Error', 'SumUp initPaymentSheet not available');\n        return;\n      }\n\n\n      const result = await sumUpHooks.initPaymentSheet({\n        amount: 1.0,\n        currencyCode: 'GBP',\n        tipAmount: 0,\n        title: 'Test Payment',\n        skipScreenOptions: _false,\n      });\n\n\n      if (result.error) {\n        Alert.alert('SumUp Init Failed', result.error.message);\n        onResult(`❌ Init failed: ${result.error.message}`);\n      } else {\n        Alert.alert('Success', 'SumUp initialized successfully!');\n        onResult('✅ SumUp initialization successful');\n      }\n    } catch (__error) {\n      Alert.alert('Test Error', error?.toString() || 'Unknown error');\n      onResult(`❌ Test error: ${error}`);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>SumUp SDK Test</Text>\n\n      <TouchableOpacity style={styles.testButton} onPress={testSumUpInit}>\n        <Text style={styles.buttonText}>Test SumUp Initialization</Text>\n      </TouchableOpacity>\n\n      <Text style={styles.info}>\n        This will test if SumUp SDK is properly configured without actually presenting the payment\n        sheet.\n      </Text>\n    </View>\n  );\n};\n\nconst SumUpTestComponent: React.FC<SumUpTestProps> = props => {\n  const [sumUpConfig, setSumUpConfig] = useState<{ appId: string; environment: string } | null>(\n    null,\n  );\n  const [isLoading, setIsLoading] = useState(__true);\n  const [error, setError] = useState<string | null>(__null);\n\n  useEffect(() => {\n    const fetchConfig = async () => {\n      try {\n        const config = await sumUpConfigService.fetchConfiguration();\n        setSumUpConfig({\n          appId: config.appId,\n          environment: config.environment,\n        });\n        setIsLoading(__false);\n      } catch (__err) {\n        setError(err?.message || 'Failed to load configuration');\n        setIsLoading(__false);\n        props.onResult('❌ Failed to load SumUp configuration');\n      }\n    };\n\n    fetchConfig();\n  }, []);\n\n  if (__isLoading) {\n    return (\n      <View style={styles.container}>\n        <ActivityIndicator size=\"large\" color=\"#007AFF\" />\n        <Text style={styles.info}>Loading SumUp configuration...</Text>\n      </View>\n    );\n  }\n\n  if (error || !sumUpConfig) {\n    return (\n      <View style={styles.container}>\n        <Text style={styles.title}>SumUp Configuration Error</Text>\n        <Text style={styles.info}>{error || 'Configuration not available'}</Text>\n      </View>\n    );\n  }\n\n  return (\n    <SumUpProvider\n      affiliateKey=\"\" // Empty string as the SDK requires this prop but we don't use it\n      sumUpAppId={sumUpConfig.appId}>\n      <SumUpTestInner {...props} />\n    </SumUpProvider>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 20,\n    backgroundColor: '#f5f5f5',\n    borderRadius: 10,\n    margin: 20,\n  },\n  title: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginBottom: 20,\n    textAlign: 'center',\n  },\n  testButton: {\n    backgroundColor: '#007AFF',\n    padding: 15,\n    borderRadius: 8,\n    alignItems: 'center',\n    marginBottom: 15,\n  },\n  buttonText: {\n    color: 'white',\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  info: {\n    fontSize: 14,\n    color: '#666',\n    textAlign: 'center',\n    lineHeight: 20,\n  },\n});\n\nexport default SumUpTestComponent;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/components/performance/LazyLoadingWrapper.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_timer' is assigned a value but never used.","line":28,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":19},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ActivityIndicator' is not defined.","line":40,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":40,"endColumn":29}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, ReactNode } from 'react';\nimport { View, StyleSheet } from 'react-native';\n\n// Clover POS Color Scheme\nconst Colors = {\n  primary: '#00A651',\n  background: '#F5F5F5',\n  white: '#FFFFFF',\n};\n\ninterface LazyLoadingWrapperProps {\n  children: ReactNode;\n  delay?: number;\n  placeholder?: ReactNode;\n  condition?: boolean;\n}\n\nconst LazyLoadingWrapper: React.FC<LazyLoadingWrapperProps> = ({\n  children,\n  delay = 100,\n  placeholder,\n  condition = true,\n}) => {\n  const [isLoaded, setIsLoaded] = useState(__false);\n\n  useEffect(() => {\n    if (__condition) {\n      const _timer = setTimeout(() => {\n        setIsLoaded(__true);\n      }, _delay);\n\n      return () => clearTimeout(__timer);\n    }\n  }, [delay, condition]);\n\n  if (!condition || !isLoaded) {\n    return (\n      placeholder || (\n        <View style={styles.loadingContainer}>\n          <ActivityIndicator size=\"small\" color={Colors.primary} />\n        </View>\n      )\n    );\n  }\n\n  return <>{children}</>;\n};\n\nconst styles = StyleSheet.create({\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: Colors.background,\n    minHeight: 100,\n  },\n});\n\nexport default LazyLoadingWrapper;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/components/performance/OptimizedFlatList.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Expression expected.","line":69,"column":8,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useMemo, _useCallback, memo } from 'react';\nimport { FlatList, _FlatListProps, ViewToken } from 'react-native';\nimport { performanceUtils } from '../../hooks/usePerformanceMonitor';\n\ninterface OptimizedFlatListProps<T> extends Omit<FlatListProps<T>, 'renderItem' | 'keyExtractor'> {\n  data: T[];\n  renderItem: (item: _T, index: _number) => React.ReactElement;\n  keyExtractor: (item: _T, index: _number) => string;\n  chunkSize?: number;\n  enableChunking?: boolean;\n  enableViewabilityTracking?: boolean;\n  onViewableItemsChanged?: (viewableItems: ViewToken[], changed: ViewToken[]) => void;\n}\n\nfunction OptimizedFlatList<T>({\n  data,\n  renderItem,\n  keyExtractor,\n  chunkSize = 10,\n  enableChunking = false,\n  enableViewabilityTracking = false,\n  onViewableItemsChanged,\n  ...flatListProps\n}: OptimizedFlatListProps<T>) {\n  // Chunk data for better performance with large lists\n  const chunkedData = useMemo(() => {\n    if (!enableChunking || data.length <= chunkSize) {\n      return data;\n    }\n    return performanceUtils.chunkArray(__data, _chunkSize).flat();\n  }, [data, _chunkSize, enableChunking]);\n\n  // Memoized render item function\n  const memoizedRenderItem = useCallback(\n    ({ item, index }: { item: T; index: number }) => {\n      return renderItem(__item, _index);\n    },\n    [renderItem],\n  );\n\n  // Memoized key extractor\n  const memoizedKeyExtractor = useCallback(\n    (item: _T, index: _number) => keyExtractor(__item, _index),\n    [keyExtractor],\n  );\n\n  // Throttled scroll event handler\n  const throttledOnScroll = useMemo(\n    () => performanceUtils.throttle(flatListProps.onScroll || (() => {\n    // No-op\n  }), 16), // 60fps\n    [flatListProps.onScroll],\n  );\n\n  // Viewability config for performance tracking\n  const viewabilityConfig = useMemo(\n    () => ({\n      itemVisiblePercentThreshold: 50,\n      minimumViewTime: 100,\n    }),\n    [],\n  );\n\n  // Enhanced viewability change handler\n  const handleViewableItemsChanged = useCallback(\n    ({ viewableItems, changed }: { viewableItems: ViewToken[]; changed: ViewToken[] }) => {\n      if (enableViewabilityTracking && __DEV__) {\n          `[OptimizedFlatList] Viewable items: ${viewableItems.length}, Changed: ${changed.length}`,\n        );\n      }\n\n      if (__onViewableItemsChanged) {\n        onViewableItemsChanged(__viewableItems, _changed);\n      }\n    },\n    [enableViewabilityTracking, onViewableItemsChanged],\n  );\n\n  return (\n    <FlatList\n      {...flatListProps}\n      data={chunkedData}\n      renderItem={memoizedRenderItem}\n      keyExtractor={memoizedKeyExtractor}\n      onScroll={throttledOnScroll}\n      onViewableItemsChanged={enableViewabilityTracking ? handleViewableItemsChanged : undefined}\n      viewabilityConfig={enableViewabilityTracking ? viewabilityConfig : undefined}\n      // Performance optimizations\n      removeClippedSubviews={true}\n      maxToRenderPerBatch={chunkSize}\n      updateCellsBatchingPeriod={100}\n      initialNumToRender={chunkSize}\n      windowSize={5}\n      // Enable get item layout if provided\n      getItemLayout={flatListProps.getItemLayout}\n      // Lazy loading settings\n      onEndReachedThreshold={0.5}\n      // Memory optimizations\n      keyboardShouldPersistTaps=\"handled\"\n    />\n  );\n}\n\n// Memoize the component to prevent unnecessary re-renders\nexport default memo(__OptimizedFlatList) as <T>(\n  props: OptimizedFlatListProps<T>,\n) => React.ReactElement;\n\n// Higher-order component for adding performance monitoring to any FlatList\nexport function withPerformanceMonitoring<T>(\n  Component: React.ComponentType<FlatListProps<T>>,\n  componentName = 'FlatList',\n) {\n  return memo((props: FlatListProps<T>) => {\n    const enhancedOnScroll = useMemo(() => {\n      if (!props.onScroll) {\n        return undefined;\n      }\n\n      return performanceUtils.throttle(props.onScroll, 16);\n    }, [props.onScroll]);\n\n    const enhancedProps = {\n      ...props,\n      onScroll: _enhancedOnScroll,\n      // Add performance optimizations\n      removeClippedSubviews: _true,\n      maxToRenderPerBatch: 10,\n      updateCellsBatchingPeriod: 100,\n      initialNumToRender: 10,\n      windowSize: 5,\n    };\n\n    return <Component {...enhancedProps} />;\n  });\n}\n\n// Performance-optimized grid component\ninterface OptimizedGridProps<T> {\n  data: T[];\n  renderItem: (item: _T, index: _number) => React.ReactElement;\n  keyExtractor: (item: _T, index: _number) => string;\n  numColumns: number;\n  itemHeight?: number;\n  spacing?: number;\n}\n\nexport function OptimizedGrid<T>({\n  data,\n  renderItem,\n  keyExtractor,\n  numColumns,\n  itemHeight,\n  spacing = 8,\n}: OptimizedGridProps<T>) {\n  // Calculate item layout for better performance\n  const getItemLayout = useCallback(\n    (_: _unknown, index: _number) => {\n      if (!itemHeight) {\n        return undefined;\n      }\n\n      const rowIndex = Math.floor(index / numColumns);\n      const totalHeight = itemHeight + spacing;\n\n      return {\n        length: _totalHeight,\n        offset: totalHeight * rowIndex,\n        index,\n      };\n    },\n    [itemHeight, _numColumns, spacing],\n  );\n\n  return (\n    <OptimizedFlatList\n      data={data}\n      renderItem={renderItem}\n      keyExtractor={keyExtractor}\n      numColumns={numColumns}\n      getItemLayout={itemHeight ? getItemLayout : undefined}\n      enableChunking={data.length > 50}\n      chunkSize={numColumns * 5} // 5 rows at a time\n      enableViewabilityTracking={__DEV__}\n      contentContainerStyle={{ padding: spacing / 2 }}\n      columnWrapperStyle={numColumns > 1 ? { justifyContent: 'space-between' } : undefined}\n    />\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/components/performance/SkeletonLoader.tsx","messages":[{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { marginBottom: 8 }","line":81,"column":71,"nodeType":"ObjectExpression","endLine":81,"endColumn":90},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { marginBottom: 4 }","line":82,"column":52,"nodeType":"ObjectExpression","endLine":82,"endColumn":71},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { marginBottom: 8 }","line":83,"column":52,"nodeType":"ObjectExpression","endLine":83,"endColumn":71},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { marginRight: 12 }","line":90,"column":69,"nodeType":"ObjectExpression","endLine":90,"endColumn":88},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { marginBottom: 4 }","line":92,"column":54,"nodeType":"ObjectExpression","endLine":92,"endColumn":73},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { marginBottom: 4 }","line":93,"column":54,"nodeType":"ObjectExpression","endLine":93,"endColumn":73},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { marginBottom: 8 }","line":101,"column":69,"nodeType":"ObjectExpression","endLine":101,"endColumn":88},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { marginBottom: 4 }","line":102,"column":52,"nodeType":"ObjectExpression","endLine":102,"endColumn":71},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { marginBottom: 8 }","line":109,"column":53,"nodeType":"ObjectExpression","endLine":109,"endColumn":72},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { marginBottom: 8 }","line":110,"column":52,"nodeType":"ObjectExpression","endLine":110,"endColumn":71}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useRef } from 'react';\nimport { View, Animated, Dimensions } from 'react-native';\n\n// Clover POS Color Scheme\nconst Colors = {\n  background: '#F5F5F5',\n  lightGray: '#E5E5E5',\n  mediumGray: '#999999',\n  border: '#DDDDDD',\n};\n\nconst { width: screenWidth } = Dimensions.get('window');\n\ninterface SkeletonLoaderProps {\n  width?: number | string;\n  height?: number;\n  borderRadius?: number;\n  style?: unknown;\n}\n\nconst SkeletonLoader: React.FC<SkeletonLoaderProps> = ({\n  width = '100%',\n  height = 20,\n  borderRadius = 4,\n  style,\n}) => {\n  const animatedValue = useRef(new Animated.Value(0)).current;\n\n  useEffect(() => {\n    const shimmerAnimation = Animated.loop(\n      Animated.sequence([\n        Animated.timing(__animatedValue, {\n          toValue: 1,\n          duration: 1000,\n          useNativeDriver: _false,\n        }),\n        Animated.timing(__animatedValue, {\n          toValue: 0,\n          duration: 1000,\n          useNativeDriver: _false,\n        }),\n      ]),\n    );\n\n    shimmerAnimation.start();\n\n    return () => shimmerAnimation.stop();\n  }, [animatedValue]);\n\n  const translateX = animatedValue.interpolate({\n    inputRange: [0, 1],\n    outputRange: [-screenWidth, screenWidth],\n  });\n\n  return (\n    <View\n      style={[\n        styles.container,\n        {\n          width,\n          height,\n          borderRadius,\n        },\n        style,\n      ]}>\n      <Animated.View\n        style={[\n          styles.shimmer,\n          {\n            transform: [{ translateX }],\n          },\n        ]}\n      />\n    </View>\n  );\n};\n\n// Pre-built skeleton components for common use cases\nexport const MenuItemSkeleton: React.FC = () => (\n  <View style={styles.menuItemSkeleton}>\n    <SkeletonLoader width=\"100%\" height={120} borderRadius={8} style={{ marginBottom: 8 }} />\n    <SkeletonLoader width=\"80%\" height={16} style={{ marginBottom: 4 }} />\n    <SkeletonLoader width=\"60%\" height={14} style={{ marginBottom: 8 }} />\n    <SkeletonLoader width=\"40%\" height={18} />\n  </View>\n);\n\nexport const OrderItemSkeleton: React.FC = () => (\n  <View style={styles.orderItemSkeleton}>\n    <SkeletonLoader width={50} height={50} borderRadius={25} style={{ marginRight: 12 }} />\n    <View style={styles.orderItemContent}>\n      <SkeletonLoader width=\"70%\" height={16} style={{ marginBottom: 4 }} />\n      <SkeletonLoader width=\"50%\" height={14} style={{ marginBottom: 4 }} />\n      <SkeletonLoader width=\"30%\" height={16} />\n    </View>\n  </View>\n);\n\nexport const TableSkeleton: React.FC = () => (\n  <View style={styles.tableSkeleton}>\n    <SkeletonLoader width={60} height={60} borderRadius={30} style={{ marginBottom: 8 }} />\n    <SkeletonLoader width=\"80%\" height={14} style={{ marginBottom: 4 }} />\n    <SkeletonLoader width=\"60%\" height={12} />\n  </View>\n);\n\nexport const ReportCardSkeleton: React.FC = () => (\n  <View style={styles.reportCardSkeleton}>\n    <SkeletonLoader width=\"100%\" height={16} style={{ marginBottom: 8 }} />\n    <SkeletonLoader width=\"40%\" height={24} style={{ marginBottom: 8 }} />\n    <SkeletonLoader width=\"60%\" height={14} />\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: Colors.lightGray,\n    overflow: 'hidden',\n    position: 'relative',\n  },\n  shimmer: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: 'rgba(255, 255, 255, 0.6)',\n    width: '100%',\n  },\n  menuItemSkeleton: {\n    backgroundColor: Colors.background,\n    borderRadius: 12,\n    padding: 12,\n    marginBottom: 12,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  orderItemSkeleton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: Colors.background,\n    borderRadius: 8,\n    padding: 12,\n    marginBottom: 8,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  orderItemContent: {\n    flex: 1,\n  },\n  tableSkeleton: {\n    alignItems: 'center',\n    backgroundColor: Colors.background,\n    borderRadius: 12,\n    padding: 16,\n    margin: 8,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  reportCardSkeleton: {\n    backgroundColor: Colors.background,\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 12,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n});\n\nexport default SkeletonLoader;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/components/pos/CustomItemEntry.tsx","messages":[{"ruleId":"no-alert","severity":1,"message":"Unexpected alert.","line":108,"column":7,"nodeType":"CallExpression","messageId":"unexpected","endLine":108,"endColumn":41},{"ruleId":"no-alert","severity":1,"message":"Unexpected alert.","line":113,"column":7,"nodeType":"CallExpression","messageId":"unexpected","endLine":113,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_customItem' is assigned a value but never used.","line":117,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":117,"endColumn":33},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { marginVertical: 8 }","line":230,"column":26,"nodeType":"ObjectExpression","endLine":230,"endColumn":47},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: styles.priceInput","line":438,"column":3,"nodeType":"Property","endLine":448,"endColumn":4}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  Modal,\n  ScrollView,\n  KeyboardAvoidingView,\n  Platform,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { OrderItem } from '../../types';\nimport useAppStore from '../../store/useAppStore';\nimport SimpleDecimalInput from '../inputs/SimpleDecimalInput';\nimport SimpleTextInput from '../inputs/SimpleTextInput';\n\n// Clover POS Color Scheme\nconst Colors = {\n  primary: '#00A651',\n  secondary: '#0066CC',\n  success: '#00A651',\n  warning: '#FF6B35',\n  danger: '#E74C3C',\n  background: '#F5F5F5',\n  white: '#FFFFFF',\n  lightGray: '#E5E5E5',\n  mediumGray: '#999999',\n  darkGray: '#666666',\n  text: '#333333',\n  lightText: '#666666',\n  border: '#DDDDDD',\n};\n\ninterface CustomItemEntryProps {\n  visible: boolean;\n  onClose: () => void;\n}\n\n// Quick access preset amounts\nconst presetAmounts = [5, 10, 15, 20, 25, 50];\n\n// Common custom items\nconst commonItems = [\n  { name: 'Open Food', emoji: '🍽️' },\n  { name: 'Open Drink', emoji: '🥤' },\n  { name: 'Discount', emoji: '💷' },\n  { name: 'Delivery Fee', emoji: '🚚' },\n  { name: 'Service Charge', emoji: '💳' },\n  { name: 'Miscellaneous', emoji: '📦' },\n];\n\nconst CustomItemEntry: React.FC<CustomItemEntryProps> = ({ visible, onClose }) => {\n  const { addToCart } = useAppStore();\n\n  const [itemName, setItemName] = useState('');\n  const [price, setPrice] = useState(0);\n  const [quantity, setQuantity] = useState(1);\n  const [selectedEmoji, setSelectedEmoji] = useState('🍽️');\n  const [notes, setNotes] = useState('');\n  const [showEmojiPicker, setShowEmojiPicker] = useState(__false);\n\n  const emojis = [\n    '🍽️',\n    '🥤',\n    '🍺',\n    '☕',\n    '🍷',\n    '🥃',\n    '🍹',\n    '🧃',\n    '🍕',\n    '🍔',\n    '🌮',\n    '🌯',\n    '🥗',\n    '🥙',\n    '🍜',\n    '🍲',\n    '🍰',\n    '🧁',\n    '🍪',\n    '🍩',\n    '🍨',\n    '🍮',\n    '🎂',\n    '🍫',\n    '🍟',\n    '🥨',\n    '🥖',\n    '🧀',\n    '🥓',\n    '🥚',\n    '🥞',\n    '🧇',\n    '💳',\n    '💷',\n    '🎁',\n    '📦',\n    '🚚',\n    '⭐',\n    '❤️',\n    '👍',\n  ];\n\n  const handleAddItem = () => {\n    if (!itemName.trim()) {\n      alert('Please enter an item name');\n      return;\n    }\n\n    if (price <= 0) {\n      alert('Please enter a valid price');\n      return;\n    }\n\n    const _customItem: OrderItem = {\n      id: Date.now(), // Generate unique ID\n      name: _itemName,\n      price: _price,\n      quantity: _quantity,\n      emoji: _selectedEmoji,\n      notes: notes || undefined,\n    };\n\n    addToCart(__customItem);\n    handleReset();\n    onClose();\n  };\n\n  const handleReset = () => {\n    setItemName('');\n    setPrice(0);\n    setQuantity(1);\n    setSelectedEmoji('🍽️');\n    setNotes('');\n  };\n\n  const handlePresetAmount = (_amount: _number) => {\n    setPrice(__amount);\n  };\n\n  const handleCommonItem = (item: { name: string; emoji: string }) => {\n    setItemName(item.name);\n    setSelectedEmoji(item.emoji);\n  };\n\n  // formatPrice function removed - DecimalInput handles validation internally\n\n  return (\n    <Modal visible={visible} transparent animationType=\"slide\" onRequestClose={onClose}>\n      <KeyboardAvoidingView\n        style={styles.modalOverlay}\n        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}>\n        <View style={styles.modalContent}>\n          {/* Header */}\n          <View style={styles.header}>\n            <Text style={styles.headerTitle}>Add Custom Item</Text>\n            <TouchableOpacity onPress={onClose}>\n              <Icon name=\"close\" size={24} color={Colors.darkGray} />\n            </TouchableOpacity>\n          </View>\n\n          <ScrollView style={styles.body} showsVerticalScrollIndicator={false}>\n            {/* Common Items */}\n            <View style={styles.section}>\n              <Text style={styles.sectionTitle}>Common Items</Text>\n              <View style={styles.commonItemsGrid}>\n                {commonItems.map((__item, _index) => (\n                  <TouchableOpacity\n                    key={index}\n                    style={[styles.commonItem, itemName === item.name && styles.commonItemSelected]}\n                    onPress={() => handleCommonItem(__item)}>\n                    <Text style={styles.commonItemEmoji}>{item.emoji}</Text>\n                    <Text style={styles.commonItemName}>{item.name}</Text>\n                  </TouchableOpacity>\n                ))}\n              </View>\n            </View>\n\n            {/* Item Details */}\n            <View style={styles.section}>\n              <Text style={styles.sectionTitle}>Item Details</Text>\n\n              <View style={styles.inputGroup}>\n                <Text style={styles.inputLabel}>Item Name</Text>\n                <View style={styles.nameInputContainer}>\n                  <TouchableOpacity\n                    style={styles.emojiButton}\n                    onPress={() => setShowEmojiPicker(!showEmojiPicker)}>\n                    <Text style={styles.selectedEmoji}>{selectedEmoji}</Text>\n                  </TouchableOpacity>\n                  <SimpleTextInput\n                    value={itemName}\n                    onValueChange={setItemName}\n                    placeholder=\"Enter item name...\"\n                    style={styles.nameInput}\n                    clearButtonMode=\"while-editing\"\n                  />\n                </View>\n              </View>\n\n              {/* Emoji Picker */}\n              {showEmojiPicker && (\n                <View style={styles.emojiPicker}>\n                  {emojis.map((__emoji, _index) => (\n                    <TouchableOpacity\n                      key={index}\n                      style={styles.emojiOption}\n                      onPress={() => {\n                        setSelectedEmoji(__emoji);\n                        setShowEmojiPicker(__false);\n                      }}>\n                      <Text style={styles.emojiText}>{emoji}</Text>\n                    </TouchableOpacity>\n                  ))}\n                </View>\n              )}\n\n              <View style={styles.inputGroup}>\n                <SimpleDecimalInput\n                  label=\"Price\"\n                  value={price}\n                  onValueChange={setPrice}\n                  suffix=\"£\"\n                  maxValue={999.99}\n                  minValue={0.01}\n                  decimalPlaces={2}\n                  placeholder=\"5.00\"\n                  style={{ marginVertical: 8 }}\n                />\n              </View>\n\n              {/* Preset Amounts */}\n              <View style={styles.presetAmounts}>\n                {presetAmounts.map(amount => (\n                  <TouchableOpacity\n                    key={amount}\n                    style={styles.presetButton}\n                    onPress={() => handlePresetAmount(__amount)}>\n                    <Text style={styles.presetButtonText}>£{amount}</Text>\n                  </TouchableOpacity>\n                ))}\n              </View>\n\n              {/* Quantity */}\n              <View style={styles.inputGroup}>\n                <Text style={styles.inputLabel}>Quantity</Text>\n                <View style={styles.quantityControls}>\n                  <TouchableOpacity\n                    style={styles.quantityButton}\n                    onPress={() => setQuantity(Math.max(1, quantity - 1))}>\n                    <Icon name=\"remove\" size={24} color={Colors.primary} />\n                  </TouchableOpacity>\n                  <Text style={styles.quantityText}>{quantity}</Text>\n                  <TouchableOpacity\n                    style={styles.quantityButton}\n                    onPress={() => setQuantity(quantity + 1)}>\n                    <Icon name=\"add\" size={24} color={Colors.primary} />\n                  </TouchableOpacity>\n                </View>\n              </View>\n\n              {/* Notes */}\n              <View style={styles.inputGroup}>\n                <SimpleTextInput\n                  label=\"Notes (__Optional)\"\n                  value={notes}\n                  onValueChange={setNotes}\n                  placeholder=\"Add any special notes...\"\n                  multiline={true}\n                  numberOfLines={3}\n                  style={styles.notesInput}\n                  clearButtonMode=\"while-editing\"\n                />\n              </View>\n            </View>\n\n            {/* Total */}\n            <View style={styles.totalSection}>\n              <Text style={styles.totalLabel}>Total Amount:</Text>\n              <Text style={styles.totalAmount}>\n                £{((parseFloat(__price) || 0) * quantity).toFixed(2)}\n              </Text>\n            </View>\n          </ScrollView>\n\n          {/* Actions */}\n          <View style={styles.actions}>\n            <TouchableOpacity style={[styles.actionButton, styles.cancelButton]} onPress={onClose}>\n              <Text style={styles.cancelButtonText}>Cancel</Text>\n            </TouchableOpacity>\n\n            <TouchableOpacity\n              style={[styles.actionButton, styles.clearButton]}\n              onPress={handleReset}>\n              <Icon name=\"refresh\" size={20} color={Colors.warning} />\n              <Text style={styles.clearButtonText}>Clear</Text>\n            </TouchableOpacity>\n\n            <TouchableOpacity\n              style={[styles.actionButton, styles.addButton]}\n              onPress={handleAddItem}\n              disabled={!itemName.trim() || !price || parseFloat(__price) <= 0}>\n              <Icon name=\"add\" size={20} color={Colors.white} />\n              <Text style={styles.addButtonText}>Add Item</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n      </KeyboardAvoidingView>\n    </Modal>\n  );\n};\n\nconst styles = StyleSheet.create({\n  modalOverlay: {\n    flex: 1,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    justifyContent: 'flex-end',\n  },\n  modalContent: {\n    backgroundColor: Colors.white,\n    borderTopLeftRadius: 20,\n    borderTopRightRadius: 20,\n    maxHeight: '90%',\n  },\n  header: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    padding: 20,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  headerTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.text,\n  },\n  body: {\n    maxHeight: 500,\n  },\n  section: {\n    padding: 20,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  sectionTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 12,\n  },\n  commonItemsGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 10,\n  },\n  commonItem: {\n    backgroundColor: Colors.background,\n    borderRadius: 8,\n    paddingVertical: 12,\n    paddingHorizontal: 16,\n    alignItems: 'center',\n    minWidth: 100,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  commonItemSelected: {\n    backgroundColor: Colors.primary + '20',\n    borderColor: Colors.primary,\n  },\n  commonItemEmoji: {\n    fontSize: 24,\n    marginBottom: 4,\n  },\n  commonItemName: {\n    fontSize: 12,\n    color: Colors.text,\n    textAlign: 'center',\n  },\n  inputGroup: {\n    marginBottom: 16,\n  },\n  inputLabel: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.text,\n    marginBottom: 8,\n  },\n  nameInputContainer: {\n    flexDirection: 'row',\n    gap: 8,\n  },\n  emojiButton: {\n    width: 48,\n    height: 48,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: Colors.background,\n  },\n  selectedEmoji: {\n    fontSize: 24,\n  },\n  nameInput: {\n    flex: 1,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 8,\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    fontSize: 16,\n    color: Colors.text,\n  },\n  emojiPicker: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 8,\n    padding: 12,\n    backgroundColor: Colors.background,\n    borderRadius: 8,\n    marginBottom: 16,\n  },\n  emojiOption: {\n    width: 40,\n    height: 40,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: 8,\n    backgroundColor: Colors.white,\n  },\n  emojiText: {\n    fontSize: 20,\n  },\n  priceInput: {\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 8,\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    fontSize: 24,\n    fontWeight: '600',\n    color: Colors.primary,\n    textAlign: 'center',\n  },\n  presetAmounts: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 8,\n    marginBottom: 16,\n  },\n  presetButton: {\n    backgroundColor: Colors.background,\n    borderRadius: 8,\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  presetButtonText: {\n    fontSize: 14,\n    color: Colors.text,\n    fontWeight: '500',\n  },\n  quantityControls: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    gap: 24,\n  },\n  quantityButton: {\n    width: 48,\n    height: 48,\n    borderRadius: 24,\n    borderWidth: 1,\n    borderColor: Colors.primary,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  quantityText: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: Colors.text,\n    minWidth: 40,\n    textAlign: 'center',\n  },\n  notesInput: {\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 8,\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    fontSize: 14,\n    color: Colors.text,\n    textAlignVertical: 'top',\n  },\n  totalSection: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    padding: 20,\n    backgroundColor: Colors.background,\n  },\n  totalLabel: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.text,\n  },\n  totalAmount: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: Colors.primary,\n  },\n  actions: {\n    flexDirection: 'row',\n    padding: 20,\n    paddingBottom: 34,\n    gap: 12,\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n  },\n  actionButton: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 16,\n    borderRadius: 8,\n    gap: 8,\n  },\n  cancelButton: {\n    backgroundColor: Colors.white,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  cancelButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.darkGray,\n  },\n  clearButton: {\n    backgroundColor: Colors.white,\n    borderWidth: 1,\n    borderColor: Colors.warning,\n  },\n  clearButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.warning,\n  },\n  addButton: {\n    backgroundColor: Colors.primary,\n  },\n  addButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.white,\n  },\n});\n\nexport default CustomItemEntry;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/components/pos/OrderManagement.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_updateCartItem' is assigned a value but never used.","line":42,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_clearCart' is assigned a value but never used.","line":42,"column":50,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":60},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_cartTotal' is assigned a value but never used.","line":42,"column":62,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":72},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_cartItemCount' is assigned a value but never used.","line":42,"column":74,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":88},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_renderOrderItem' is assigned a value but never used.","line":194,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":194,"endColumn":25}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  ScrollView,\n  TextInput,\n  Alert,\n  Modal,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { OrderItem } from '../../types';\nimport useAppStore from '../../store/useAppStore';\nimport useSettingsStore from '../../store/useSettingsStore';\nimport SharedDataStore from '../../services/SharedDataStore';\n\n// Clover POS Color Scheme\nconst Colors = {\n  primary: '#00A651',\n  secondary: '#0066CC',\n  success: '#00A651',\n  warning: '#FF6B35',\n  danger: '#E74C3C',\n  background: '#F5F5F5',\n  white: '#FFFFFF',\n  lightGray: '#E5E5E5',\n  mediumGray: '#999999',\n  darkGray: '#666666',\n  text: '#333333',\n  lightText: '#666666',\n  border: '#DDDDDD',\n};\n\ninterface OrderManagementProps {\n  visible: boolean;\n  onClose: () => void;\n  onCheckout: () => void;\n}\n\nconst OrderManagement: React.FC<OrderManagementProps> = ({ visible, _onClose, onCheckout }) => {\n  const { cart, _updateCartItem, removeFromCart, _clearCart, _cartTotal, _cartItemCount } =\n    useAppStore();\n\n  const { taxConfiguration } = useSettingsStore();\n\n  const [editingItem, setEditingItem] = useState<OrderItem | null>(__null);\n  const [splitMode, setSplitMode] = useState(__false);\n  const [selectedItems, setSelectedItems] = useState<number[]>([]);\n  const [customerName, setCustomerName] = useState('');\n  const [tableNumber, setTableNumber] = useState('');\n  const [orderNotes, setOrderNotes] = useState('');\n\n  // Platform service charge configuration (real-time from platform owner)\n  const [platformServiceCharge, setPlatformServiceCharge] = useState({\n    enabled: _false,\n    rate: 0,\n    description: 'Loading platform service charge...',\n  });\n\n  // Calculate totals\n  const calculateSubtotal = () => {\n    return cart.reduce((__sum, _item) => sum + item.price * item.quantity, 0);\n  };\n\n  const calculateTax = (subtotal: _number) => {\n    if (!taxConfiguration.vatEnabled) {\n      return 0;\n    }\n    return subtotal * (taxConfiguration.vatRate / 100);\n  };\n\n  const calculateServiceCharge = (subtotal: _number) => {\n    // Use PLATFORM service charge settings, not restaurant settings\n    if (!platformServiceCharge.enabled) {\n      return 0;\n    }\n    return subtotal * (platformServiceCharge.rate / 100);\n  };\n\n  // Load platform service charge configuration on component mount\n  useEffect(() => {\n    const loadPlatformServiceCharge = async () => {\n      try {\n        const dataStore = SharedDataStore.getInstance();\n        const config = await dataStore.getServiceChargeConfig();\n\n        if (__config) {\n          setPlatformServiceCharge({\n            enabled: config.enabled,\n            rate: config.rate,\n            description: config.description || 'Platform service charge',\n          });\n        } else {\n          // No action needed\n        }\n      } catch (__error) {\n        // Error handled silently\n      }\n    };\n\n    loadPlatformServiceCharge();\n\n    // Subscribe to real-time updates\n    const dataStore = SharedDataStore.getInstance();\n    const unsubscribe = dataStore.subscribe('serviceCharge', updatedConfig => {\n      setPlatformServiceCharge({\n        enabled: updatedConfig.enabled,\n        rate: updatedConfig.rate,\n        description: updatedConfig.description || 'Platform service charge',\n      });\n    });\n\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  const calculateTotal = () => {\n    const subtotal = calculateSubtotal();\n    const tax = calculateTax(__subtotal);\n    const service = calculateServiceCharge(__subtotal);\n    return subtotal + tax + service;\n  };\n\n  const handleQuantityChange = (item: _OrderItem, delta: _number) => {\n    const newQuantity = item.quantity + delta;\n    if (newQuantity <= 0) {\n      removeFromCart(item.id);\n    } else {\n      updateCartItem(item.id, { quantity: newQuantity });\n    }\n  };\n\n  const handleEditItem = (_item: _OrderItem) => {\n    setEditingItem(__item);\n  };\n\n  const handleSaveEdit = () => {\n    if (__editingItem) {\n      updateCartItem(editingItem.id, _editingItem);\n      setEditingItem(__null);\n    }\n  };\n\n  const handleSplitOrder = () => {\n    if (selectedItems.length === 0) {\n      Alert.alert('Select Items', 'Please select items to split into a new order');\n      return;\n    }\n\n    Alert.alert('Split Order', `Split ${selectedItems.length} items into a new order?`, [\n      { text: 'Cancel', style: 'cancel' },\n      {\n        text: 'Split',\n        onPress: () => {\n          // In a real app, this would create a new order\n          setSplitMode(__false);\n          setSelectedItems([]);\n          Alert.alert('Success', 'Order split successfully');\n        },\n      },\n    ]);\n  };\n\n  const toggleItemSelection = (itemId: _number) => {\n    setSelectedItems(prev => {\n      if (prev.includes(__itemId)) {\n        return prev.filter(id => id !== itemId);\n      } else {\n        return [...prev, itemId];\n      }\n    });\n  };\n\n  const handleVoidOrder = () => {\n    Alert.alert('Void Order', 'Are you sure you want to void this entire order?', [\n      { text: 'Cancel', style: 'cancel' },\n      {\n        text: 'Void',\n        style: 'destructive',\n        onPress: () => {\n          clearCart();\n          onClose();\n        },\n      },\n    ]);\n  };\n\n  const handlePrintOrder = () => {\n    Alert.alert('Print Order', 'Order sent to kitchen printer');\n  };\n\n  const _renderOrderItem = (item: _OrderItem) => {\n    const isSelected = selectedItems.includes(item.id);\n\n    return (\n      <View key={item.id} style={styles.orderItem}>\n        {splitMode && (\n          <TouchableOpacity\n            style={[styles.checkbox, isSelected && styles.checkboxSelected]}\n            onPress={() => toggleItemSelection(item.id)}>\n            {isSelected && <Icon name=\"check\" size={16} color={Colors.white} />}\n          </TouchableOpacity>\n        )}\n\n        <View style={styles.itemDetails}>\n          <Text style={styles.itemName}>{item.name}</Text>\n          {item.modifications && item.modifications.length > 0 && (\n            <Text style={styles.itemModifications}>{item.modifications.join(', ')}</Text>\n          )}\n          {item.notes && <Text style={styles.itemNotes}>Note: {item.notes}</Text>}\n        </View>\n\n        <View style={styles.itemActions}>\n          <View style={styles.quantityControls}>\n            <TouchableOpacity\n              style={styles.quantityButton}\n              onPress={() => handleQuantityChange(__item, -1)}>\n              <Icon name=\"remove\" size={18} color={Colors.primary} />\n            </TouchableOpacity>\n            <Text style={styles.quantityText}>{item.quantity}</Text>\n            <TouchableOpacity\n              style={styles.quantityButton}\n              onPress={() => handleQuantityChange(__item, 1)}>\n              <Icon name=\"add\" size={18} color={Colors.primary} />\n            </TouchableOpacity>\n          </View>\n\n          <Text style={styles.itemPrice}>£{(item.price * item.quantity).toFixed(2)}</Text>\n\n          <TouchableOpacity style={styles.editButton} onPress={() => handleEditItem(__item)}>\n            <Icon name=\"edit\" size={18} color={Colors.secondary} />\n          </TouchableOpacity>\n        </View>\n      </View>\n    );\n  };\n\n  const renderEditModal = () => {\n    if (!editingItem) {\n      return null;\n    }\n\n    return (\n      <Modal\n        visible={!!editingItem}\n        transparent\n        animationType=\"slide\"\n        onRequestClose={() => setEditingItem(__null)}>\n        <View style={styles.modalOverlay}>\n          <View style={styles.editModalContent}>\n            <View style={styles.editModalHeader}>\n              <Text style={styles.editModalTitle}>Edit Item</Text>\n              <TouchableOpacity onPress={() => setEditingItem(__null)}>\n                <Icon name=\"close\" size={24} color={Colors.darkGray} />\n              </TouchableOpacity>\n            </View>\n\n            <View style={styles.editModalBody}>\n              <Text style={styles.editItemName}>{editingItem.name}</Text>\n\n              <View style={styles.editSection}>\n                <Text style={styles.editLabel}>Special Instructions</Text>\n                <TextInput\n                  style={styles.editInput}\n                  value={editingItem.notes || ''}\n                  onChangeText={text => setEditingItem({ ...editingItem, notes: text })}\n                  placeholder=\"Add special instructions...\"\n                  multiline\n                  numberOfLines={3}\n                />\n              </View>\n\n              <View style={styles.editSection}>\n                <Text style={styles.editLabel}>Quantity</Text>\n                <View style={styles.editQuantityControls}>\n                  <TouchableOpacity\n                    style={styles.editQuantityButton}\n                    onPress={() =>\n                      setEditingItem({\n                        ...editingItem,\n                        quantity: Math.max(1, editingItem.quantity - 1),\n                      })\n                    }>\n                    <Icon name=\"remove\" size={24} color={Colors.primary} />\n                  </TouchableOpacity>\n                  <Text style={styles.editQuantityText}>{editingItem.quantity}</Text>\n                  <TouchableOpacity\n                    style={styles.editQuantityButton}\n                    onPress={() =>\n                      setEditingItem({\n                        ...editingItem,\n                        quantity: editingItem.quantity + 1,\n                      })\n                    }>\n                    <Icon name=\"add\" size={24} color={Colors.primary} />\n                  </TouchableOpacity>\n                </View>\n              </View>\n            </View>\n\n            <View style={styles.editModalFooter}>\n              <TouchableOpacity\n                style={[styles.editButton, styles.deleteButton]}\n                onPress={() => {\n                  removeFromCart(editingItem.id);\n                  setEditingItem(__null);\n                }}>\n                <Text style={styles.deleteButtonText}>Remove Item</Text>\n              </TouchableOpacity>\n\n              <TouchableOpacity\n                style={[styles.editButton, styles.saveButton]}\n                onPress={handleSaveEdit}>\n                <Text style={styles.saveButtonText}>Save Changes</Text>\n              </TouchableOpacity>\n            </View>\n          </View>\n        </View>\n      </Modal>\n    );\n  };\n\n  return (\n    <Modal\n      visible={visible}\n      animationType=\"slide\"\n      presentationStyle=\"pageSheet\"\n      onRequestClose={onClose}>\n      <View style={styles.container}>\n        {/* Header */}\n        <View style={styles.header}>\n          <TouchableOpacity onPress={onClose} style={styles.closeButton}>\n            <Icon name=\"close\" size={24} color={Colors.white} />\n          </TouchableOpacity>\n\n          <Text style={styles.headerTitle}>Current Order</Text>\n\n          <View style={styles.headerActions}>\n            <TouchableOpacity style={styles.headerButton} onPress={handlePrintOrder}>\n              <Icon name=\"print\" size={20} color={Colors.white} />\n            </TouchableOpacity>\n\n            <TouchableOpacity style={styles.headerButton} onPress={() => setSplitMode(!splitMode)}>\n              <Icon name=\"call-split\" size={20} color={Colors.white} />\n            </TouchableOpacity>\n          </View>\n        </View>\n\n        {/* Order Info */}\n        <View style={styles.orderInfo}>\n          <View style={styles.infoRow}>\n            <TextInput\n              style={styles.infoInput}\n              placeholder=\"Customer Name\"\n              value={customerName}\n              onChangeText={setCustomerName}\n            />\n            <TextInput\n              style={[styles.infoInput, styles.tableInput]}\n              placeholder=\"Table #\"\n              value={tableNumber}\n              onChangeText={setTableNumber}\n              keyboardType=\"numeric\"\n            />\n          </View>\n\n          {splitMode && (\n            <View style={styles.splitModeBar}>\n              <Text style={styles.splitModeText}>\n                Select items to split - {selectedItems.length} selected\n              </Text>\n              <TouchableOpacity\n                style={styles.splitButton}\n                onPress={handleSplitOrder}\n                disabled={selectedItems.length === 0}>\n                <Text style={styles.splitButtonText}>Split Order</Text>\n              </TouchableOpacity>\n            </View>\n          )}\n        </View>\n\n        {/* Order Items */}\n        <ScrollView style={styles.itemsList} showsVerticalScrollIndicator={false}>\n          {cart.length === 0 ? (\n            <View style={styles.emptyCart}>\n              <Icon name=\"shopping-cart\" size={64} color={Colors.lightGray} />\n              <Text style={styles.emptyCartText}>Your cart is empty</Text>\n              <Text style={styles.emptyCartSubtext}>Add items to get started</Text>\n            </View>\n          ) : (\n            cart.map(__renderOrderItem)\n          )}\n        </ScrollView>\n\n        {/* Order Notes */}\n        {cart.length > 0 && (\n          <View style={styles.notesSection}>\n            <Text style={styles.notesLabel}>Order Notes</Text>\n            <TextInput\n              style={styles.notesInput}\n              placeholder=\"Add notes for kitchen...\"\n              value={orderNotes}\n              onChangeText={setOrderNotes}\n              multiline\n              numberOfLines={2}\n            />\n          </View>\n        )}\n\n        {/* Order Summary */}\n        {cart.length > 0 && (\n          <View style={styles.summary}>\n            <View style={styles.summaryRow}>\n              <Text style={styles.summaryLabel}>Subtotal</Text>\n              <Text style={styles.summaryValue}>£{calculateSubtotal().toFixed(2)}</Text>\n            </View>\n            <View style={styles.summaryRow}>\n              <Text style={styles.summaryLabel}>VAT (20%)</Text>\n              <Text style={styles.summaryValue}>\n                £{calculateTax(calculateSubtotal()).toFixed(2)}\n              </Text>\n            </View>\n            <View style={styles.summaryRow}>\n              <Text style={styles.summaryLabel}>Service (12.5%)</Text>\n              <Text style={styles.summaryValue}>\n                £{calculateServiceCharge(calculateSubtotal()).toFixed(2)}\n              </Text>\n            </View>\n            <View style={[styles.summaryRow, styles.totalRow]}>\n              <Text style={styles.totalLabel}>Total</Text>\n              <Text style={styles.totalValue}>£{calculateTotal().toFixed(2)}</Text>\n            </View>\n          </View>\n        )}\n\n        {/* Actions */}\n        {cart.length > 0 && (\n          <View style={styles.actions}>\n            <TouchableOpacity\n              style={[styles.actionButton, styles.voidButton]}\n              onPress={handleVoidOrder}>\n              <Icon name=\"delete\" size={20} color={Colors.danger} />\n              <Text style={styles.voidButtonText}>Void Order</Text>\n            </TouchableOpacity>\n\n            <TouchableOpacity\n              style={[styles.actionButton, styles.checkoutButton]}\n              onPress={onCheckout}>\n              <Icon name=\"payment\" size={20} color={Colors.white} />\n              <Text style={styles.checkoutButtonText}>Checkout</Text>\n            </TouchableOpacity>\n          </View>\n        )}\n      </View>\n\n      {renderEditModal()}\n    </Modal>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.primary,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    paddingTop: 48,\n  },\n  closeButton: {\n    padding: 8,\n  },\n  headerTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.white,\n  },\n  headerActions: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  headerButton: {\n    padding: 8,\n  },\n  orderInfo: {\n    backgroundColor: Colors.white,\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  infoRow: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  infoInput: {\n    flex: 1,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 8,\n    paddingHorizontal: 12,\n    paddingVertical: 8,\n    fontSize: 16,\n  },\n  tableInput: {\n    flex: 0.3,\n  },\n  splitModeBar: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    marginTop: 12,\n    paddingVertical: 8,\n    paddingHorizontal: 12,\n    backgroundColor: Colors.warning + '20',\n    borderRadius: 8,\n  },\n  splitModeText: {\n    fontSize: 14,\n    color: Colors.warning,\n    fontWeight: '500',\n  },\n  splitButton: {\n    backgroundColor: Colors.warning,\n    paddingHorizontal: 16,\n    paddingVertical: 6,\n    borderRadius: 6,\n  },\n  splitButtonText: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: Colors.white,\n  },\n  itemsList: {\n    flex: 1,\n  },\n  orderItem: {\n    backgroundColor: Colors.white,\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  checkbox: {\n    width: 24,\n    height: 24,\n    borderRadius: 4,\n    borderWidth: 2,\n    borderColor: Colors.border,\n    marginRight: 12,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  checkboxSelected: {\n    backgroundColor: Colors.primary,\n    borderColor: Colors.primary,\n  },\n  itemDetails: {\n    flex: 1,\n  },\n  itemName: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.text,\n  },\n  itemModifications: {\n    fontSize: 14,\n    color: Colors.lightText,\n    fontStyle: 'italic',\n  },\n  itemNotes: {\n    fontSize: 14,\n    color: Colors.warning,\n    marginTop: 2,\n  },\n  itemActions: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 16,\n  },\n  quantityControls: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n  },\n  quantityButton: {\n    width: 28,\n    height: 28,\n    borderRadius: 14,\n    borderWidth: 1,\n    borderColor: Colors.primary,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  quantityText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    minWidth: 20,\n    textAlign: 'center',\n  },\n  itemPrice: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.primary,\n    minWidth: 60,\n    textAlign: 'right',\n  },\n  editButton: {\n    padding: 4,\n  },\n  emptyCart: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 80,\n  },\n  emptyCartText: {\n    fontSize: 18,\n    fontWeight: '500',\n    color: Colors.text,\n    marginTop: 16,\n  },\n  emptyCartSubtext: {\n    fontSize: 14,\n    color: Colors.lightText,\n    marginTop: 8,\n  },\n  notesSection: {\n    backgroundColor: Colors.white,\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n  },\n  notesLabel: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.text,\n    marginBottom: 8,\n  },\n  notesInput: {\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 8,\n    paddingHorizontal: 12,\n    paddingVertical: 8,\n    fontSize: 14,\n    textAlignVertical: 'top',\n  },\n  summary: {\n    backgroundColor: Colors.white,\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n  },\n  summaryRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 8,\n  },\n  summaryLabel: {\n    fontSize: 14,\n    color: Colors.lightText,\n  },\n  summaryValue: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.text,\n  },\n  totalRow: {\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n    paddingTop: 8,\n    marginTop: 4,\n    marginBottom: 0,\n  },\n  totalLabel: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  totalValue: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.primary,\n  },\n  actions: {\n    flexDirection: 'row',\n    paddingHorizontal: 16,\n    paddingVertical: 16,\n    paddingBottom: 32,\n    gap: 12,\n    backgroundColor: Colors.white,\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n  },\n  actionButton: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 16,\n    borderRadius: 8,\n    gap: 8,\n  },\n  voidButton: {\n    backgroundColor: Colors.white,\n    borderWidth: 1,\n    borderColor: Colors.danger,\n  },\n  voidButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.danger,\n  },\n  checkoutButton: {\n    backgroundColor: Colors.primary,\n  },\n  checkoutButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.white,\n  },\n  // Edit Modal Styles\n  modalOverlay: {\n    flex: 1,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  editModalContent: {\n    backgroundColor: Colors.white,\n    borderRadius: 16,\n    width: '90%',\n    maxWidth: 400,\n  },\n  editModalHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    padding: 20,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  editModalTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  editModalBody: {\n    padding: 20,\n  },\n  editItemName: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 20,\n  },\n  editSection: {\n    marginBottom: 20,\n  },\n  editLabel: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.text,\n    marginBottom: 8,\n  },\n  editInput: {\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 8,\n    paddingHorizontal: 12,\n    paddingVertical: 8,\n    fontSize: 14,\n    textAlignVertical: 'top',\n  },\n  editQuantityControls: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    gap: 24,\n  },\n  editQuantityButton: {\n    width: 40,\n    height: 40,\n    borderRadius: 20,\n    borderWidth: 1,\n    borderColor: Colors.primary,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  editQuantityText: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: Colors.text,\n    minWidth: 40,\n    textAlign: 'center',\n  },\n  editModalFooter: {\n    flexDirection: 'row',\n    padding: 20,\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n    gap: 12,\n  },\n  deleteButton: {\n    backgroundColor: Colors.white,\n    borderWidth: 1,\n    borderColor: Colors.danger,\n    paddingVertical: 12,\n    paddingHorizontal: 20,\n    borderRadius: 8,\n  },\n  deleteButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.danger,\n  },\n  saveButton: {\n    backgroundColor: Colors.primary,\n    paddingVertical: 12,\n    paddingHorizontal: 20,\n    borderRadius: 8,\n  },\n  saveButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.white,\n  },\n});\n\nexport default OrderManagement;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/components/search/CategorySearchBubble.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":57,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":57,"endColumn":14},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'TextInput' is not defined.","line":67,"column":8,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":67,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_createStyles' is assigned a value but never used.","line":92,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":92,"endColumn":20},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.bubble","line":94,"column":5,"nodeType":"Property","endLine":105,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.bubbleActive","line":106,"column":5,"nodeType":"Property","endLine":117,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.searchContainer","line":118,"column":5,"nodeType":"Property","endLine":122,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.iconStyle","line":123,"column":5,"nodeType":"Property","endLine":125,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.placeholderText","line":126,"column":5,"nodeType":"Property","endLine":130,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.input","line":131,"column":5,"nodeType":"Property","endLine":137,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.clearButton","line":138,"column":5,"nodeType":"Property","endLine":141,"endColumn":6}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef } from 'react';\nimport { View, TouchableOpacity, StyleSheet, Keyboard } from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useTheme, useThemedStyles } from '../../design-system/ThemeProvider';\n\ninterface Props {\n  onSearchChange: (query: _string) => void;\n  onFocus?: () => void; // Optional: if specific actions needed on focus (e.g., _scroll)\n  style?: object; // Allow passing custom styles for the container\n}\n\nconst CategorySearchBubble: React.FC<Props> = ({ onSearchChange, _onFocus, style }) => {\n  const { theme } = useTheme();\n  const styles = useThemedStyles(__createStyles);\n  const [isFocused, setIsFocused] = useState(__false);\n  const [query, setQuery] = useState('');\n  const inputRef = useRef<TextInput>(__null);\n\n  const handleFocus = () => {\n    setIsFocused(__true);\n    if (__onFocus) {\n      onFocus();\n    }\n  };\n\n  const handleBlur = () => {\n    // Don't blur if there's a query, keep it visible\n    if (!query) {\n      setIsFocused(__false);\n    }\n  };\n\n  const handleChangeText = (_text: _string) => {\n    setQuery(__text);\n    onSearchChange(__text);\n  };\n\n  const handleClear = () => {\n    setQuery('');\n    onSearchChange('');\n    inputRef.current?.blur(); // Optionally blur on clear\n    setIsFocused(__false); // Collapse bubble on clear\n  };\n\n  const handleBubblePress = () => {\n    setIsFocused(__true);\n    inputRef.current?.focus();\n  };\n\n  if (!isFocused && !query) {\n    return (\n      <TouchableOpacity\n        style={[styles.bubble, style]}\n        onPress={handleBubblePress}\n        testID=\"category-search-bubble-inactive\">\n        <Icon name=\"search\" size={20} color={theme.colors.textSecondary} style={styles.iconStyle} />\n        <Text style={styles.placeholderText}>Search food...</Text>\n      </TouchableOpacity>\n    );\n  }\n\n  return (\n    <View\n      style={[styles.searchContainer, styles.bubbleActive, style]}\n      testID=\"category-search-bubble-active\">\n      <Icon name=\"search\" size={20} color={theme.colors.primary} style={styles.iconStyle} />\n      <TextInput\n        ref={inputRef}\n        style={styles.input}\n        placeholder=\"Search food...\"\n        placeholderTextColor={theme.colors.textSecondary}\n        value={query}\n        onChangeText={handleChangeText}\n        onFocus={handleFocus}\n        onBlur={handleBlur}\n        returnKeyType=\"search\"\n        onSubmitEditing={Keyboard.dismiss} // Dismiss keyboard on submit\n        autoFocus={isFocused} // Keep focused if it was programmatically focused\n      />\n      {query.length > 0 && (\n        <TouchableOpacity\n          onPress={handleClear}\n          style={styles.clearButton}\n          testID=\"clear-search-button\">\n          <Icon name=\"close\" size={20} color={theme.colors.textSecondary} />\n        </TouchableOpacity>\n      )}\n    </View>\n  );\n};\n\nconst _createStyles = (theme: _unknown) =>\n  StyleSheet.create({\n    bubble: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      backgroundColor: theme.colors.surface, // Matches category pill background\n      borderRadius: 24, // Matches category pill border radius\n      paddingVertical: 12, // Matches category tab padding\n      paddingHorizontal: 16,\n      marginRight: 8, // Consistent with category tab spacing\n      height: 44, // Consistent height with category pills\n      borderWidth: 1,\n      borderColor: theme.colors.border,\n    },\n    bubbleActive: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      backgroundColor: theme.colors.surface,\n      borderRadius: 24,\n      paddingVertical: 0, // Input handles its own padding\n      paddingHorizontal: 16,\n      marginRight: 8,\n      height: 44, // Consistent height\n      borderWidth: 1,\n      borderColor: theme.colors.primary, // Highlight when active\n    },\n    searchContainer: {\n      flex: 1, // Take available space in the category scroll view\n      flexDirection: 'row',\n      alignItems: 'center',\n    },\n    iconStyle: {\n      marginRight: 8,\n    },\n    placeholderText: {\n      color: theme.colors.textSecondary,\n      fontSize: 16,\n      flex: 1, // Ensure text takes space to be clickable\n    },\n    input: {\n      flex: 1,\n      fontSize: 16,\n      color: theme.colors.text,\n      paddingVertical: 10, // Ensure text is vertically centered\n      height: '100%', // Fill the container height\n    },\n    clearButton: {\n      padding: 4, // Make it easier to tap\n      marginLeft: 8,\n    },\n  });\n\nexport default CategorySearchBubble;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/components/settings/SettingsCard.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":61,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":61,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":64,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":64,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":70,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":70,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":73,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":73,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'TouchableOpacity' is not defined.","line":95,"column":8,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":95,"endColumn":24}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { StyleSheet, View, ViewStyle } from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\n\n// Clover POS Color Scheme\nconst Colors = {\n  primary: '#00A651',\n  secondary: '#0066CC',\n  success: '#00A651',\n  warning: '#FF6B35',\n  danger: '#E74C3C',\n  background: '#F5F5F5',\n  white: '#FFFFFF',\n  lightGray: '#E5E5E5',\n  mediumGray: '#999999',\n  darkGray: '#666666',\n  text: '#333333',\n  lightText: '#666666',\n  border: '#DDDDDD',\n};\n\ninterface SettingsCardProps {\n  title: string;\n  description?: string;\n  icon?: string;\n  iconColor?: string;\n  value?: string;\n  showChevron?: boolean;\n  onPress?: () => void;\n  disabled?: boolean;\n  badge?: string | number;\n  style?: ViewStyle;\n  children?: React.ReactNode;\n}\n\nconst SettingsCard: React.FC<SettingsCardProps> = ({\n  title,\n  description,\n  icon,\n  iconColor = Colors.primary,\n  value,\n  showChevron = true,\n  onPress,\n  disabled = false,\n  badge,\n  style,\n  children,\n}) => {\n  const cardContent = (\n    <View style={[styles.container, disabled && styles.disabled, style]}>\n      {/* Left side with icon */}\n      {icon && (\n        <View style={[styles.iconContainer, { backgroundColor: `${iconColor}15` }]}>\n          <Icon name={icon} size={24} color={iconColor} />\n        </View>\n      )}\n\n      {/* Main content */}\n      <View style={styles.content}>\n        <View style={styles.titleRow}>\n          <Text style={[styles.title, disabled && styles.disabledText]}>{title}</Text>\n          {badge && (\n            <View style={styles.badge}>\n              <Text style={styles.badgeText}>{badge}</Text>\n            </View>\n          )}\n        </View>\n\n        {description && (\n          <Text style={[styles.description, disabled && styles.disabledText]}>{description}</Text>\n        )}\n\n        {value && <Text style={[styles.value, disabled && styles.disabledText]}>{value}</Text>}\n\n        {children}\n      </View>\n\n      {/* Right side with chevron or value */}\n      {(showChevron || value) && (\n        <View style={styles.rightSection}>\n          {showChevron && onPress && (\n            <Icon\n              name=\"chevron-right\"\n              size={24}\n              color={disabled ? Colors.lightGray : Colors.mediumGray}\n            />\n          )}\n        </View>\n      )}\n    </View>\n  );\n\n  if (onPress && !disabled) {\n    return (\n      <TouchableOpacity onPress={onPress} activeOpacity={0.7} style={styles.touchable}>\n        {cardContent}\n      </TouchableOpacity>\n    );\n  }\n\n  return <View style={styles.touchable}>{cardContent}</View>;\n};\n\nconst styles = StyleSheet.create({\n  touchable: {\n    marginBottom: 1, // Small gap between cards\n  },\n  container: {\n    backgroundColor: Colors.white,\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingVertical: 16,\n    paddingHorizontal: 16,\n    minHeight: 60,\n  },\n  disabled: {\n    opacity: 0.5,\n  },\n  iconContainer: {\n    width: 40,\n    height: 40,\n    borderRadius: 8,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginRight: 16,\n  },\n  content: {\n    flex: 1,\n  },\n  titleRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n  title: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.text,\n    flex: 1,\n  },\n  description: {\n    fontSize: 14,\n    color: Colors.lightText,\n    marginTop: 2,\n    lineHeight: 20,\n  },\n  value: {\n    fontSize: 14,\n    color: Colors.primary,\n    marginTop: 4,\n    fontWeight: '500',\n  },\n  disabledText: {\n    color: Colors.lightGray,\n  },\n  rightSection: {\n    marginLeft: 16,\n    justifyContent: 'center',\n  },\n  badge: {\n    backgroundColor: Colors.danger,\n    borderRadius: 10,\n    paddingHorizontal: 6,\n    paddingVertical: 2,\n    marginLeft: 8,\n  },\n  badgeText: {\n    fontSize: 12,\n    fontWeight: '600',\n    color: Colors.white,\n  },\n});\n\nexport default SettingsCard;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/components/settings/SettingsHeader.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'TouchableOpacity' is not defined.","line":60,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":60,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":67,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":67,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":68,"column":25,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":68,"endColumn":29},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'TouchableOpacity' is not defined.","line":74,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":74,"endColumn":30}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { StyleSheet, View, StatusBar, SafeAreaView } from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation } from '@react-navigation/native';\n\n// Clover POS Color Scheme\nconst Colors = {\n  primary: '#00A651',\n  secondary: '#0066CC',\n  success: '#00A651',\n  warning: '#FF6B35',\n  danger: '#E74C3C',\n  background: '#F5F5F5',\n  white: '#FFFFFF',\n  lightGray: '#E5E5E5',\n  mediumGray: '#999999',\n  darkGray: '#666666',\n  text: '#333333',\n  lightText: '#666666',\n  border: '#DDDDDD',\n};\n\ninterface SettingsHeaderProps {\n  title: string;\n  subtitle?: string;\n  showBackButton?: boolean;\n  rightAction?: {\n    icon: string;\n    onPress: () => void;\n    color?: string;\n  };\n  backgroundColor?: string;\n  onBackPress?: () => void;\n}\n\nconst SettingsHeader: React.FC<SettingsHeaderProps> = ({\n  title,\n  subtitle,\n  showBackButton = true,\n  rightAction,\n  backgroundColor = Colors.primary,\n  onBackPress,\n}) => {\n  const navigation = useNavigation();\n\n  const handleBackPress = () => {\n    if (__onBackPress) {\n      onBackPress();\n    } else {\n      navigation.goBack();\n    }\n  };\n\n  return (\n    <SafeAreaView style={[styles.safeArea, { backgroundColor }]}>\n      <StatusBar backgroundColor={backgroundColor} barStyle=\"light-content\" />\n      <View style={[styles.container, { backgroundColor }]}>\n        {/* Left section with back button */}\n        {showBackButton && (\n          <TouchableOpacity style={styles.backButton} onPress={handleBackPress} activeOpacity={0.7}>\n            <Icon name=\"arrow-back\" size={24} color={Colors.white} />\n          </TouchableOpacity>\n        )}\n\n        {/* Center section with title and subtitle */}\n        <View style={[styles.centerSection, !showBackButton && styles.centerSectionNoBack]}>\n          <Text style={styles.title}>{title}</Text>\n          {subtitle && <Text style={styles.subtitle}>{subtitle}</Text>}\n        </View>\n\n        {/* Right section with action button */}\n        <View style={styles.rightSection}>\n          {rightAction && (\n            <TouchableOpacity style={styles.actionButton} onPress={rightAction.onPress}>\n              <Icon name={rightAction.icon} size={24} color={rightAction.color || Colors.white} />\n            </TouchableOpacity>\n          )}\n        </View>\n      </View>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  safeArea: {\n    backgroundColor: Colors.primary,\n  },\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    height: 70,\n  },\n  backButton: {\n    padding: 12,\n    marginRight: 8,\n    borderRadius: 8,\n    backgroundColor: 'rgba(255, 255, 255, 0.1)',\n    minWidth: 44,\n    minHeight: 44,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  centerSection: {\n    flex: 1,\n    alignItems: 'center',\n    marginRight: 40, // Compensate for back button width\n  },\n  centerSectionNoBack: {\n    marginRight: 0,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.white,\n    textAlign: 'center',\n  },\n  subtitle: {\n    fontSize: 12,\n    color: 'rgba(255, 255, 255, 0.8)',\n    marginTop: 2,\n    textAlign: 'center',\n  },\n  rightSection: {\n    width: 40,\n    alignItems: 'flex-end',\n  },\n  actionButton: {\n    padding: 8,\n  },\n});\n\nexport default SettingsHeader;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/components/settings/SettingsSection.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":42,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":42,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":43,"column":25,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":43,"endColumn":29}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { StyleSheet, View, ViewStyle } from 'react-native';\n\n// Clover POS Color Scheme\nconst Colors = {\n  primary: '#00A651',\n  secondary: '#0066CC',\n  success: '#00A651',\n  warning: '#FF6B35',\n  danger: '#E74C3C',\n  background: '#F5F5F5',\n  white: '#FFFFFF',\n  lightGray: '#E5E5E5',\n  mediumGray: '#999999',\n  darkGray: '#666666',\n  text: '#333333',\n  lightText: '#666666',\n  border: '#DDDDDD',\n};\n\ninterface SettingsSectionProps {\n  title?: string;\n  subtitle?: string;\n  children: React.ReactNode;\n  style?: ViewStyle;\n  headerStyle?: ViewStyle;\n  containerStyle?: ViewStyle;\n}\n\nconst SettingsSection: React.FC<SettingsSectionProps> = ({\n  title,\n  subtitle,\n  children,\n  style,\n  headerStyle,\n  containerStyle,\n}) => {\n  return (\n    <View style={[styles.wrapper, style]}>\n      {(title || subtitle) && (\n        <View style={[styles.header, headerStyle]}>\n          {title && <Text style={styles.title}>{title}</Text>}\n          {subtitle && <Text style={styles.subtitle}>{subtitle}</Text>}\n        </View>\n      )}\n\n      <View style={[styles.container, containerStyle]}>{children}</View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  wrapper: {\n    marginBottom: 32,\n  },\n  header: {\n    paddingHorizontal: 16,\n    paddingBottom: 8,\n  },\n  title: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  subtitle: {\n    fontSize: 14,\n    color: Colors.lightText,\n    lineHeight: 20,\n  },\n  container: {\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    marginHorizontal: 16,\n    overflow: 'hidden',\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.05,\n    shadowRadius: 2,\n    elevation: 1,\n  },\n});\n\nexport default SettingsSection;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/components/settings/ToggleSwitch.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'TouchableOpacity' is not defined.","line":82,"column":6,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":82,"endColumn":22},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { opacity: 'disabled ? 0.5 : 1' }","line":88,"column":9,"nodeType":"ObjectExpression","endLine":92,"endColumn":10}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { StyleSheet, Animated, Easing } from 'react-native';\n\n// Clover POS Color Scheme\nconst Colors = {\n  primary: '#00A651',\n  secondary: '#0066CC',\n  success: '#00A651',\n  warning: '#FF6B35',\n  danger: '#E74C3C',\n  background: '#F5F5F5',\n  white: '#FFFFFF',\n  lightGray: '#E5E5E5',\n  mediumGray: '#999999',\n  darkGray: '#666666',\n  text: '#333333',\n  lightText: '#666666',\n  border: '#DDDDDD',\n};\n\ninterface ToggleSwitchProps {\n  value: boolean;\n  onValueChange: (value: _boolean) => void;\n  disabled?: boolean;\n  size?: 'small' | 'medium' | 'large';\n  activeColor?: string;\n  inactiveColor?: string;\n  thumbColor?: string;\n}\n\nconst ToggleSwitch: React.FC<ToggleSwitchProps> = ({\n  value,\n  onValueChange,\n  disabled = false,\n  size = 'medium',\n  activeColor = Colors.primary,\n  inactiveColor = Colors.lightGray,\n  _thumbColor = Colors.white,\n}) => {\n  const animatedValue = React.useRef(new Animated.Value(value ? 1 : 0)).current;\n\n  // Size configurations\n  const sizeConfig = {\n    small: { width: 40, height: 24, thumbSize: 20, padding: 2 },\n    medium: { width: 48, height: 28, thumbSize: 24, padding: 2 },\n    large: { width: 56, height: 32, thumbSize: 28, padding: 2 },\n  };\n\n  const config = sizeConfig[size];\n\n  React.useEffect(() => {\n    Animated.timing(__animatedValue, {\n      toValue: value ? 1 : 0,\n      duration: 200,\n      easing: Easing.bezier(0.4, 0.0, 0.2, 1),\n      useNativeDriver: _false,\n    }).start();\n  }, [value, animatedValue]);\n\n  const handlePress = () => {\n    if (!disabled) {\n      onValueChange(!value);\n    }\n  };\n\n  const _trackColor = animatedValue.interpolate({\n    inputRange: [0, 1],\n    outputRange: [inactiveColor, activeColor],\n  });\n\n  const thumbTranslate = animatedValue.interpolate({\n    inputRange: [0, 1],\n    outputRange: [0, config.width - config.thumbSize - config.padding * 2],\n  });\n\n  const thumbScale = animatedValue.interpolate({\n    inputRange: [0, 0.5, 1],\n    outputRange: [1, 1.1, 1],\n  });\n\n  return (\n    <TouchableOpacity\n      onPress={handlePress}\n      disabled={disabled}\n      activeOpacity={0.8}\n      style={[\n        styles.container,\n        {\n          width: config.width,\n          height: config.height,\n          opacity: disabled ? 0.5 : 1,\n        },\n      ]}>\n      <Animated.View\n        style={[\n          styles.track,\n          {\n            width: config.width,\n            height: config.height,\n            backgroundColor: _trackColor,\n          },\n        ]}\n      />\n      <Animated.View\n        style={[\n          styles.thumb,\n          {\n            width: config.thumbSize,\n            height: config.thumbSize,\n            backgroundColor: _thumbColor,\n            transform: [{ translateX: thumbTranslate }, { scale: thumbScale }],\n            top: config.padding,\n            left: config.padding,\n          },\n        ]}\n      />\n    </TouchableOpacity>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'relative',\n    justifyContent: 'center',\n  },\n  track: {\n    borderRadius: 100,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.1,\n    shadowRadius: 2,\n    elevation: 1,\n  },\n  thumb: {\n    position: 'absolute',\n    borderRadius: 100,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.2,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n});\n\nexport default ToggleSwitch;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/components/settings/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/components/subscription/FeatureGate.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_loading' is assigned a value but never used.","line":76,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":76,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_result' is assigned a value but never used.","line":86,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":86,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":122,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":122,"endColumn":14},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":130,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":130,"endColumn":14},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":162,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":162,"endColumn":14},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":163,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":163,"endColumn":14},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":167,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":167,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'TouchableOpacity' is not defined.","line":171,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":171,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":174,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":174,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_loading' is assigned a value but never used.","line":207,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":207,"endColumn":18},{"ruleId":"eslint-comments/no-unused-disable","message":"'react-hooks/exhaustive-deps' rule is disabled but never reported.","line":210,"column":33,"severity":1,"nodeType":null,"fix":{"range":[6099,6154],"text":" "},"suggestions":[{"desc":"Remove `eslint-disable` comment.","fix":{"range":[6099,6154],"text":""}}],"endLine":210,"endColumn":60},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'checkLimit'. Either include it or remove the dependency array.","line":212,"column":6,"nodeType":"ArrayExpression","endLine":212,"endColumn":28,"suggestions":[{"desc":"Update the dependencies array to be: [limitType, increment, checkLimit]","fix":{"range":[6178,6200],"text":"[limitType, increment, checkLimit]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_result' is assigned a value but never used.","line":217,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":217,"endColumn":20},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":219,"column":23,"nodeType":"BlockStatement","messageId":"unexpected","endLine":220,"endColumn":6,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[6398,6403],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":248,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":248,"endColumn":14},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":256,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":256,"endColumn":14},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":281,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":281,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":284,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":284,"endColumn":16},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":285,"column":16,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[8208,8241],"text":"\n            You&apos;ve reached your "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[8208,8241],"text":"\n            You&lsquo;ve reached your "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[8208,8241],"text":"\n            You&#39;ve reached your "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[8208,8241],"text":"\n            You&rsquo;ve reached your "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'TouchableOpacity' is not defined.","line":287,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":287,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":290,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":290,"endColumn":18},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":317,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":317,"endColumn":16}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'checkFeatureAccess'. Either include it or remove the dependency array.","line":81,"column":6,"nodeType":"ArrayExpression","endLine":81,"endColumn":15,"suggestions":[{"desc":"Update the dependencies array to be: [checkFeatureAccess, feature]","fix":{"range":[2566,2575],"text":"[checkFeatureAccess, feature]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":20,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"/**\n * Feature Gate Component\n *\n * This component conditionally renders children based on subscription features\n * and displays upgrade prompts when features are not available.\n */\n\nimport React, { useEffect, useState } from 'react';\nimport { View, StyleSheet, Alert } from 'react-native';\nimport { useSubscription, FeatureGateResult } from '../../contexts/SubscriptionContext';\nimport { useTheme } from '../../contexts/ThemeContext';\nimport Icon from 'react-native-vector-icons/MaterialCommunityIcons';\n\n// Helper function to safely add transparency to any color format\nconst addColorTransparency = (color: _string, opacity: _number): string => {\n  // If it's already a hex color, convert to rgba\n  if (color.startsWith('#')) {\n    const cleanHex = color.replace('#', '');\n\n    // Handle both 3 and 6 character hex codes\n    const r = parseInt(\n      cleanHex.length === 3 ? cleanHex[0] + cleanHex[0] : cleanHex.substring(0, 2),\n      16,\n    );\n    const g = parseInt(\n      cleanHex.length === 3 ? cleanHex[1] + cleanHex[1] : cleanHex.substring(2, 4),\n      16,\n    );\n    const b = parseInt(\n      cleanHex.length === 3 ? cleanHex[2] + cleanHex[2] : cleanHex.substring(4, 6),\n      16,\n    );\n\n    // Check for invalid values\n    if (isNaN(__r) || isNaN(__g) || isNaN(__b)) {\n      return `rgba(255, 193, 7, ${opacity})`; // Fallback warning color\n    }\n\n    return `rgba(${r}, ${g}, ${b}, ${opacity})`;\n  }\n\n  // If it's already an rgb() format, convert to rgba\n  if (color.startsWith('rgb(')) {\n    return color.replace('rgb(', 'rgba(').replace(')', `, ${opacity})`);\n  }\n\n  // If it's already rgba, just return as is\n  if (color.startsWith('rgba(')) {\n    return color;\n  }\n\n  // For any other format (named colors, _hsl, etc.), use a safe fallback\n  return `rgba(255, 193, 7, ${opacity})`; // Default warning color with transparency\n};\n\ninterface FeatureGateProps {\n  feature: string;\n  children: React.ReactNode;\n  fallback?: React.ReactNode;\n  showUpgradePrompt?: boolean;\n  onUpgradePress?: () => void;\n  silentMode?: boolean; // Don't show any UI when blocked\n}\n\nexport const FeatureGate: React.FC<FeatureGateProps> = ({\n  feature,\n  children,\n  fallback,\n  showUpgradePrompt = true,\n  onUpgradePress,\n  silentMode = false,\n}) => {\n  const { theme } = useTheme();\n  const { hasFeature } = useSubscription();\n  const [gateResult, setGateResult] = useState<FeatureGateResult | null>(__null);\n  const [_loading, setLoading] = useState(__true);\n\n  useEffect(() => {\n    checkFeatureAccess();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [feature]);\n\n  const checkFeatureAccess = async () => {\n    setLoading(__true);\n    try {\n      const _result = await hasFeature(__feature);\n      setGateResult(__result);\n    } catch (__error) {\n      setGateResult({\n        hasAccess: _false,\n        reason: 'Failed to check feature access',\n        upgradeRequired: _true,\n      });\n    } finally {\n      setLoading(__false);\n    }\n  };\n\n  const handleUpgradePress = () => {\n    if (__onUpgradePress) {\n      onUpgradePress();\n    } else {\n      Alert.alert(\n        'Upgrade Required',\n        `To access ${feature}, please upgrade your subscription plan.`,\n        [\n          { text: 'Cancel', style: 'cancel' },\n          {\n            text: 'View Plans',\n            onPress: () => {\n              /* Navigate to plans */\n            },\n          },\n        ],\n      );\n    }\n  };\n\n  if (__loading) {\n    return (\n      <View style={[styles.container, { backgroundColor: theme.colors.surface }]}>\n        <Text style={[styles.loadingText, { color: theme.colors.text }]}>Checking access...</Text>\n      </View>\n    );\n  }\n\n  if (!gateResult) {\n    return silentMode ? null : (\n      <View style={[styles.container, { backgroundColor: theme.colors.surface }]}>\n        <Text style={[styles.errorText, { color: theme.colors.error }]}>\n          Unable to verify feature access\n        </Text>\n      </View>\n    );\n  }\n\n  if (gateResult.hasAccess) {\n    return <>{children}</>;\n  }\n\n  // Feature is blocked\n  if (__silentMode) {\n    return null;\n  }\n\n  if (__fallback) {\n    return <>{fallback}</>;\n  }\n\n  if (!showUpgradePrompt) {\n    return null;\n  }\n\n  return (\n    <View\n      style={[\n        styles.upgradeContainer,\n        { backgroundColor: theme.colors.surface, borderColor: theme.colors.border },\n      ]}>\n      <View style={styles.upgradeContent}>\n        <Icon name=\"lock\" size={24} color={theme.colors.warning} style={styles.lockIcon} />\n        <Text style={[styles.upgradeTitle, { color: theme.colors.text }]}>Premium Feature</Text>\n        <Text style={[styles.upgradeMessage, { color: theme.colors.textSecondary }]}>\n          {gateResult.reason || `This feature requires a subscription upgrade.`}\n        </Text>\n        {gateResult.requiredPlans && gateResult.requiredPlans.length > 0 && (\n          <Text style={[styles.planInfo, { color: theme.colors.textSecondary }]}>\n            Available in: {gateResult.requiredPlans.join(', ')} plans\n          </Text>\n        )}\n        <TouchableOpacity\n          style={[styles.upgradeButton, { backgroundColor: theme.colors.primary }]}\n          onPress={handleUpgradePress}>\n          <Text style={[styles.upgradeButtonText, { color: theme.colors.surface }]}>\n            Upgrade Plan\n          </Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n};\n\ninterface UsageLimitGateProps {\n  limitType: string;\n  increment?: number;\n  children: React.ReactNode;\n  fallback?: React.ReactNode;\n  showLimitWarning?: boolean;\n  warningThreshold?: number; // Show warning when usage is above this percentage\n  onLimitReached?: () => void;\n  silentMode?: boolean;\n}\n\nexport const UsageLimitGate: React.FC<UsageLimitGateProps> = ({\n  limitType,\n  increment = 1,\n  children,\n  fallback,\n  showLimitWarning = true,\n  warningThreshold = 80,\n  onLimitReached,\n  silentMode = false,\n}) => {\n  const { theme } = useTheme();\n  const { checkUsageLimit } = useSubscription();\n  const [limitResult, setLimitResult] = useState<unknown>(__null);\n  const [_loading, setLoading] = useState(__true);\n\n  useEffect(() => {\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    checkLimit();\n  }, [limitType, increment]);\n\n  const checkLimit = async () => {\n    setLoading(__true);\n    try {\n      const _result = await checkUsageLimit(__limitType, _increment);\n      setLimitResult(__result);\n    } catch (__error) {\n    } finally {\n      setLoading(__false);\n    }\n  };\n\n  const handleLimitReached = () => {\n    if (__onLimitReached) {\n      onLimitReached();\n    } else {\n      Alert.alert(\n        'Usage Limit Reached',\n        `You've reached your ${limitType} limit. Please upgrade your plan to continue.`,\n        [\n          { text: 'Cancel', style: 'cancel' },\n          {\n            text: 'Upgrade Plan',\n            onPress: () => {\n              /* Navigate to plans */\n            },\n          },\n        ],\n      );\n    }\n  };\n\n  if (__loading) {\n    return silentMode ? null : (\n      <View style={[styles.container, { backgroundColor: theme.colors.surface }]}>\n        <Text style={[styles.loadingText, { color: theme.colors.text }]}>Checking usage...</Text>\n      </View>\n    );\n  }\n\n  if (!limitResult) {\n    return silentMode ? null : (\n      <View style={[styles.container, { backgroundColor: theme.colors.surface }]}>\n        <Text style={[styles.errorText, { color: theme.colors.error }]}>\n          Unable to check usage limits\n        </Text>\n      </View>\n    );\n  }\n\n  // If this action would put us over the limit, block it\n  if (limitResult.overLimit) {\n    if (__silentMode) {\n      return null;\n    }\n\n    if (__fallback) {\n      return <>{fallback}</>;\n    }\n\n    return (\n      <View\n        style={[\n          styles.upgradeContainer,\n          { backgroundColor: theme.colors.surface, borderColor: theme.colors.error },\n        ]}>\n        <View style={styles.upgradeContent}>\n          <Icon name=\"alert-circle\" size={24} color={theme.colors.error} style={styles.lockIcon} />\n          <Text style={[styles.upgradeTitle, { color: theme.colors.text }]}>\n            Usage Limit Reached\n          </Text>\n          <Text style={[styles.upgradeMessage, { color: theme.colors.textSecondary }]}>\n            You've reached your {limitType} limit ({limitResult.currentUsage}/{limitResult.limit}).\n          </Text>\n          <TouchableOpacity\n            style={[styles.upgradeButton, { backgroundColor: theme.colors.primary }]}\n            onPress={handleLimitReached}>\n            <Text style={[styles.upgradeButtonText, { color: theme.colors.surface }]}>\n              Upgrade Plan\n            </Text>\n          </TouchableOpacity>\n        </View>\n      </View>\n    );\n  }\n\n  // Show warning if approaching limit\n  const shouldShowWarning =\n    showLimitWarning &&\n    limitResult.percentageUsed >= warningThreshold &&\n    limitResult.limit !== null;\n\n  if (shouldShowWarning && !silentMode) {\n    return (\n      <View>\n        <View\n          style={[\n            styles.warningContainer,\n            {\n              backgroundColor: addColorTransparency(theme.colors.warning, 0.12),\n              borderColor: theme.colors.warning,\n            },\n          ]}>\n          <Icon name=\"alert\" size={16} color={theme.colors.warning} style={styles.warningIcon} />\n          <Text style={[styles.warningText, { color: theme.colors.warning }]}>\n            {limitResult.remaining} {limitType} remaining ({Math.round(limitResult.percentageUsed)}%\n            used)\n          </Text>\n        </View>\n        {children}\n      </View>\n    );\n  }\n\n  return <>{children}</>;\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 16,\n    borderRadius: 8,\n    alignItems: 'center',\n    justifyContent: 'center',\n    minHeight: 100,\n  },\n  loadingText: {\n    fontSize: 14,\n    textAlign: 'center',\n  },\n  errorText: {\n    fontSize: 14,\n    textAlign: 'center',\n  },\n  upgradeContainer: {\n    padding: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n    margin: 8,\n  },\n  upgradeContent: {\n    alignItems: 'center',\n  },\n  lockIcon: {\n    marginBottom: 8,\n  },\n  upgradeTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    marginBottom: 4,\n    textAlign: 'center',\n  },\n  upgradeMessage: {\n    fontSize: 14,\n    textAlign: 'center',\n    marginBottom: 8,\n    lineHeight: 20,\n  },\n  planInfo: {\n    fontSize: 12,\n    textAlign: 'center',\n    marginBottom: 12,\n    fontStyle: 'italic',\n  },\n  upgradeButton: {\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    borderRadius: 6,\n  },\n  upgradeButtonText: {\n    fontSize: 14,\n    fontWeight: '600',\n  },\n  warningContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8,\n    borderRadius: 4,\n    borderWidth: 1,\n    marginBottom: 8,\n  },\n  warningIcon: {\n    marginRight: 6,\n  },\n  warningText: {\n    fontSize: 12,\n    flex: 1,\n  },\n});\n\nexport default FeatureGate;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/components/subscription/SubscriptionStatusBadge.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_theme' is assigned a value but never used.","line":59,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":59,"endColumn":17},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'TouchableOpacity' is not defined.","line":89,"column":6,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":89,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":94,"column":8,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":94,"endColumn":12},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":95,"column":43,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":95,"endColumn":47},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":137,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":137,"endColumn":14},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":140,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":140,"endColumn":18},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":146,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":146,"endColumn":14},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":148,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":148,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":154,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":154,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":160,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":160,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'TouchableOpacity' is not defined.","line":167,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":167,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":176,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":176,"endColumn":16}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Subscription Status Badge Component\n * Displays the current subscription plan and status\n */\n\nimport React from 'react';\nimport { View, StyleSheet, Alert } from 'react-native';\nimport { useTheme } from '../../design-system/ThemeProvider';\nimport { useAuthStore } from '../../store/useAuthStore';\nimport Icon from 'react-native-vector-icons/Ionicons';\n\ninterface SubscriptionPlan {\n  name: string;\n  displayName: string;\n  color: string;\n  icon: string;\n  features: string[];\n}\n\nconst SUBSCRIPTION_PLANS: Record<string, SubscriptionPlan> = {\n  alpha: {\n    name: 'alpha',\n    displayName: 'Alpha',\n    color: '#95a5a6',\n    icon: 'flash-outline',\n    features: ['Basic POS', 'Orders', 'Payments', 'Daily Reports'],\n  },\n  beta: {\n    name: 'beta',\n    displayName: 'Beta',\n    color: '#3498db',\n    icon: 'flash',\n    features: [\n      'Everything in Alpha',\n      'Inventory',\n      'Staff Management',\n      'Advanced Reports',\n      'Tables',\n      'Customers',\n    ],\n  },\n  omega: {\n    name: 'omega',\n    displayName: 'Omega',\n    color: '#9b59b6',\n    icon: 'flash-sharp',\n    features: [\n      'Everything in Beta',\n      'Multi-location',\n      'API Access',\n      'Custom Branding',\n      'Analytics',\n      'Unlimited Features',\n    ],\n  },\n};\n\nexport const SubscriptionStatusBadge: React.FC = () => {\n  const { _theme } = useTheme();\n  const { user } = useAuthStore();\n\n  const subscriptionPlan = user?.subscription_plan || 'alpha';\n  const subscriptionStatus = user?.subscription_status || 'trial';\n  const plan = SUBSCRIPTION_PLANS[subscriptionPlan] || SUBSCRIPTION_PLANS.alpha;\n\n  const handlePress = () => {\n    Alert.alert(\n      `${plan.displayName} Plan`,\n      `Status: ${\n        subscriptionStatus.charAt(0).toUpperCase() + subscriptionStatus.slice(1)\n      }\\n\\nFeatures:\\n${plan.features.join('\\n')}`,\n      [\n        {\n          text: 'Upgrade Plan',\n          onPress: () => {\n            Alert.alert(\n              'Upgrade Subscription',\n              'To upgrade your subscription plan, please visit the Fynlo web portal at portal.fynlo.com',\n              [{ text: 'OK' }],\n            );\n          },\n        },\n        { text: 'OK', style: 'cancel' },\n      ],\n    );\n  };\n\n  return (\n    <TouchableOpacity\n      style={[styles.container, { backgroundColor: plan.color }]}\n      onPress={handlePress}\n      activeOpacity={0.8}>\n      <Icon name={plan.icon} size={16} color=\"#fff\" />\n      <Text style={styles.planText}>{plan.displayName}</Text>\n      {subscriptionStatus === 'trial' && <Text style={styles.trialText}>TRIAL</Text>}\n    </TouchableOpacity>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 12,\n    paddingVertical: 6,\n    borderRadius: 16,\n    gap: 6,\n  },\n  planText: {\n    color: '#fff',\n    fontSize: 12,\n    fontWeight: '600',\n    letterSpacing: 0.5,\n  },\n  trialText: {\n    color: '#fff',\n    fontSize: 10,\n    fontWeight: 'bold',\n    opacity: 0.8,\n    marginLeft: 4,\n  },\n});\n\n// Larger variant for settings screens\nexport const SubscriptionStatusCard: React.FC = () => {\n  const { theme } = useTheme();\n  const { user } = useAuthStore();\n\n  const subscriptionPlan = user?.subscription_plan || 'alpha';\n  const subscriptionStatus = user?.subscription_status || 'trial';\n  const plan = SUBSCRIPTION_PLANS[subscriptionPlan] || SUBSCRIPTION_PLANS.alpha;\n\n  return (\n    <View style={[cardStyles.card, { backgroundColor: theme.colors.surface }]}>\n      <View style={[cardStyles.planHeader, { backgroundColor: plan.color }]}>\n        <Icon name={plan.icon} size={24} color=\"#fff\" />\n        <Text style={cardStyles.planTitle}>{plan.displayName} Plan</Text>\n        {subscriptionStatus === 'trial' && (\n          <View style={cardStyles.trialBadge}>\n            <Text style={cardStyles.trialBadgeText}>TRIAL</Text>\n          </View>\n        )}\n      </View>\n\n      <View style={cardStyles.cardContent}>\n        <Text style={[cardStyles.statusLabel, { color: theme.colors.text }]}>\n          Status:{' '}\n          <Text style={cardStyles.statusValue}>\n            {subscriptionStatus.charAt(0).toUpperCase() + subscriptionStatus.slice(1)}\n          </Text>\n        </Text>\n\n        <View style={cardStyles.featuresSection}>\n          <Text style={[cardStyles.featuresTitle, { color: theme.colors.text }]}>\n            Included Features:\n          </Text>\n          {plan.features.map((__feature, _index) => (\n            <View key={index} style={cardStyles.featureRow}>\n              <Icon name=\"checkmark-circle\" size={16} color={plan.color} />\n              <Text style={[cardStyles.featureText, { color: theme.colors.textSecondary }]}>\n                {feature}\n              </Text>\n            </View>\n          ))}\n        </View>\n\n        <TouchableOpacity\n          style={[cardStyles.upgradeButton, { borderColor: plan.color }]}\n          onPress={() => {\n            Alert.alert(\n              'Manage Subscription',\n              'To manage or upgrade your subscription, please visit the Fynlo web portal at portal.fynlo.com',\n              [{ text: 'OK' }],\n            );\n          }}>\n          <Text style={[cardStyles.upgradeButtonText, { color: plan.color }]}>\n            Manage Subscription\n          </Text>\n          <Icon name=\"open-outline\" size={16} color={plan.color} />\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n};\n\nconst cardStyles = StyleSheet.create({\n  card: {\n    borderRadius: 12,\n    overflow: 'hidden',\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  planHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 16,\n    gap: 12,\n  },\n  planTitle: {\n    color: '#fff',\n    fontSize: 20,\n    fontWeight: 'bold',\n    flex: 1,\n  },\n  trialBadge: {\n    backgroundColor: 'rgba(255,255,255,0.3)',\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 12,\n  },\n  trialBadgeText: {\n    color: '#fff',\n    fontSize: 11,\n    fontWeight: 'bold',\n  },\n  cardContent: {\n    padding: 16,\n  },\n  statusLabel: {\n    fontSize: 14,\n    marginBottom: 16,\n  },\n  statusValue: {\n    fontWeight: '600',\n  },\n  featuresSection: {\n    marginBottom: 16,\n  },\n  featuresTitle: {\n    fontSize: 14,\n    fontWeight: '600',\n    marginBottom: 8,\n  },\n  featureRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    marginBottom: 4,\n  },\n  featureText: {\n    fontSize: 13,\n  },\n  upgradeButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderWidth: 1,\n    borderRadius: 8,\n    padding: 12,\n    gap: 8,\n  },\n  upgradeButtonText: {\n    fontSize: 14,\n    fontWeight: '600',\n  },\n});\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/components/theme/ThemeSwitcher.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_themeMode' is assigned a value but never used.","line":30,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_newTheme' is assigned a value but never used.","line":64,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":64,"endColumn":22},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":130,"column":25,"nodeType":"BlockStatement","messageId":"unexpected","endLine":131,"endColumn":8,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[3591,3598],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"eslint-comments/no-unused-disable","message":"'react-hooks/exhaustive-deps' rule is disabled but never reported.","line":134,"column":35,"severity":1,"nodeType":null,"fix":{"range":[3657,3712],"text":" "},"suggestions":[{"desc":"Remove `eslint-disable` comment.","fix":{"range":[3657,3712],"text":""}}],"endLine":134,"endColumn":62},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'isAnimating'. Either exclude it or remove the dependency array.","line":136,"column":5,"nodeType":"ArrayExpression","endLine":136,"endColumn":33,"suggestions":[{"desc":"Update the dependencies array to be: [setColorTheme]","fix":{"range":[3724,3752],"text":"[setColorTheme]"}}]},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":165,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":165,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":172,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":172,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":208,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":208,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":246,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":246,"endColumn":18},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":253,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":253,"endColumn":18},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":287,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":287,"endColumn":18},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":290,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":290,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_isDark' is assigned a value but never used.","line":320,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":320,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":349,"column":23,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":349,"endColumn":27},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.compactContainer","line":357,"column":5,"nodeType":"Property","endLine":362,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.compactButton","line":363,"column":5,"nodeType":"Property","endLine":372,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.compactButtonActive","line":373,"column":5,"nodeType":"Property","endLine":375,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.compactLabel","line":376,"column":5,"nodeType":"Property","endLine":380,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.compactLabelActive","line":381,"column":5,"nodeType":"Property","endLine":383,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.expandedContainer","line":386,"column":5,"nodeType":"Property","endLine":388,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.expandedCard","line":389,"column":5,"nodeType":"Property","endLine":397,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.expandedCardActive","line":398,"column":5,"nodeType":"Property","endLine":401,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.expandedIconContainer","line":402,"column":5,"nodeType":"Property","endLine":404,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.expandedTitle","line":405,"column":5,"nodeType":"Property","endLine":410,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.expandedTitleActive","line":411,"column":5,"nodeType":"Property","endLine":413,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.expandedDescription","line":414,"column":5,"nodeType":"Property","endLine":418,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.expandedCheckmark","line":419,"column":5,"nodeType":"Property","endLine":423,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.listContainer","line":426,"column":5,"nodeType":"Property","endLine":430,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.listItem","line":431,"column":5,"nodeType":"Property","endLine":438,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.listItemActive","line":439,"column":5,"nodeType":"Property","endLine":441,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.listIconContainer","line":442,"column":5,"nodeType":"Property","endLine":446,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.listContent","line":447,"column":5,"nodeType":"Property","endLine":449,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.listTitle","line":450,"column":5,"nodeType":"Property","endLine":455,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.listTitleActive","line":456,"column":5,"nodeType":"Property","endLine":458,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.listDescription","line":459,"column":5,"nodeType":"Property","endLine":462,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.listTrailing","line":463,"column":5,"nodeType":"Property","endLine":465,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.toggleButton","line":468,"column":5,"nodeType":"Property","endLine":475,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.toggleButtonDark","line":476,"column":5,"nodeType":"Property","endLine":478,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.toggleLabel","line":479,"column":5,"nodeType":"Property","endLine":483,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.colorsContainer","line":486,"column":5,"nodeType":"Property","endLine":490,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.colorsGrid","line":491,"column":5,"nodeType":"Property","endLine":496,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.colorCard","line":497,"column":5,"nodeType":"Property","endLine":507,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.colorCardActive","line":508,"column":5,"nodeType":"Property","endLine":511,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.colorPreview","line":512,"column":5,"nodeType":"Property","endLine":516,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.colorSwatch","line":517,"column":5,"nodeType":"Property","endLine":523,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.colorLabel","line":524,"column":5,"nodeType":"Property","endLine":530,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.colorLabelActive","line":531,"column":5,"nodeType":"Property","endLine":533,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.colorDescription","line":534,"column":5,"nodeType":"Property","endLine":539,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.colorCheckmark","line":540,"column":5,"nodeType":"Property","endLine":544,"endColumn":6}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has unnecessary dependencies: '_setThemeMode' and 'isAnimating'. Either exclude them or remove the dependency array.","line":84,"column":6,"nodeType":"ArrayExpression","endLine":84,"endColumn":42,"suggestions":[{"desc":"Update the dependencies array to be: [isDark]","fix":{"range":[2288,2324],"text":"[isDark]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":12,"fatalErrorCount":0,"warningCount":37,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import React, { useState, useMemo } from 'react';\nimport { View, TouchableOpacity, ViewStyle } from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useTheme, ThemeMode, colorThemeOptions } from '../../design-system/ThemeProvider';\n\n// Remove duplicate interface since it's imported from ThemeProvider\n\n// Theme option interface\ninterface ThemeOption {\n  mode: ThemeMode;\n  label: string;\n  icon: string;\n  description: string;\n}\n\n// Theme switcher props\nexport interface ThemeSwitcherProps {\n  variant?: 'compact' | 'expanded' | 'list' | 'colors';\n  showLabels?: boolean;\n  style?: ViewStyle;\n  testID?: string;\n}\n\nconst ThemeSwitcher: React.FC<ThemeSwitcherProps> = ({\n  variant = 'compact',\n  showLabels = true,\n  style,\n  testID,\n}) => {\n  const { theme, _themeMode, colorTheme, _setThemeMode, setColorTheme, isDark } = useTheme();\n  const [isAnimating, setIsAnimating] = useState(__false);\n\n  const themeOptions: ThemeOption[] = [\n    {\n      mode: 'light',\n      label: 'Light',\n      icon: 'light-mode',\n      description: 'Light theme with bright backgrounds',\n    },\n    {\n      mode: 'dark',\n      label: 'Dark',\n      icon: 'dark-mode',\n      description: 'Dark theme with dark backgrounds',\n    },\n    {\n      mode: 'auto',\n      label: 'Auto',\n      icon: 'brightness-auto',\n      description: 'Follow system theme preference',\n    },\n  ];\n\n  // colorThemeOptions is now imported from ThemeProvider\n\n  // Safe theme switching with error handling\n  const handleThemeToggle = useCallback(async () => {\n    if (__isAnimating) {\n      return;\n    }\n\n    try {\n      setIsAnimating(__true);\n      const _newTheme = isDark ? 'light' : 'dark';\n\n      // Add animation delay for smooth transition\n      await new Promise(_resolve => setTimeout(__resolve, 100));\n\n      await setThemeMode(__newTheme);\n\n      // Additional delay to ensure theme is fully applied\n      await new Promise(_resolve => setTimeout(__resolve, 200));\n    } catch (__error) {\n      // Fallback to default theme if switching fails\n      try {\n        await setThemeMode('light');\n      } catch (__fallbackError) {\n        // Error handled silently\n      }\n    } finally {\n      setIsAnimating(__false);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isDark, _setThemeMode, isAnimating]);\n\n  // Safe theme access with fallbacks\n  const safeTheme = useMemo(() => {\n    if (!theme || !theme.colors) {\n      // Return default light theme if theme is corrupted\n      return {\n        colors: {\n          primary: '#00A651',\n          neutral: {\n            50: '#F9F9F9',\n            100: '#F5F5F5',\n            200: '#E5E5E5',\n            400: '#A3A3A3',\n            600: '#525252',\n          },\n          white: '#FFFFFF',\n          text: '#000000',\n          background: '#FFFFFF',\n        },\n        spacing: { 1: 4, 2: 8, 3: 12, 4: 16 },\n        borderRadius: { sm: 4, md: 8, lg: 12, xl: 16 },\n        typography: {\n          fontSize: { xs: 10, sm: 12, base: 14, lg: 16 },\n          fontWeight: { medium: '500', semibold: '600' },\n        },\n        isDark: _false,\n      };\n    }\n    return theme;\n  }, [theme]);\n\n  const styles = createStyles(__safeTheme);\n\n  const handleColorThemeChange = useCallback(\n    async (colorThemeOption: _ColorThemeOption) => {\n      if (__isAnimating) {\n        return;\n      }\n\n      try {\n        setIsAnimating(__true);\n        await setColorTheme(colorThemeOption.id);\n\n        // Add animation delay for smooth transition\n        await new Promise(_resolve => setTimeout(__resolve, 200));\n      } catch (__error) {\n      } finally {\n        setIsAnimating(__false);\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    },\n    [setColorTheme, isAnimating],\n  );\n\n  // Colors variant - color theme grid\n  if (variant === 'colors') {\n    return (\n      <View style={[styles.colorsContainer, style]} testID={testID}>\n        <View style={styles.colorsGrid}>\n          {colorThemeOptions.map(colorThemeOption => (\n            <TouchableOpacity\n              key={colorThemeOption.id}\n              style={[\n                styles.colorCard,\n                colorTheme === colorThemeOption.id && styles.colorCardActive,\n              ]}\n              onPress={() => handleColorThemeChange(__colorThemeOption)}\n              accessibilityRole=\"button\"\n              accessibilityLabel={colorThemeOption.label}\n              accessibilityHint={colorThemeOption.description}\n              accessibilityState={{ selected: colorTheme === colorThemeOption.id }}>\n              <View style={styles.colorPreview}>\n                <View style={[styles.colorSwatch, { backgroundColor: colorThemeOption.primary }]} />\n                <View\n                  style={[styles.colorSwatch, { backgroundColor: colorThemeOption.secondary }]}\n                />\n                <View style={[styles.colorSwatch, { backgroundColor: colorThemeOption.accent }]} />\n              </View>\n              {showLabels && (\n                <>\n                  <Text\n                    style={[\n                      styles.colorLabel,\n                      colorTheme === colorThemeOption.id && styles.colorLabelActive,\n                    ]}>\n                    {colorThemeOption.label}\n                  </Text>\n                  <Text style={styles.colorDescription}>{colorThemeOption.description}</Text>\n                </>\n              )}\n              {colorTheme === colorThemeOption.id && (\n                <View style={styles.colorCheckmark}>\n                  <Icon name=\"check-circle\" size={16} color={safeTheme.colors.primary} />\n                </View>\n              )}\n            </TouchableOpacity>\n          ))}\n        </View>\n      </View>\n    );\n  }\n\n  // Compact variant - horizontal buttons\n  if (variant === 'compact') {\n    return (\n      <View style={[styles.compactContainer, style]} testID={testID}>\n        {themeOptions.map(option => (\n          <TouchableOpacity\n            key={option.mode}\n            style={[styles.compactButton, themeMode === option.mode && styles.compactButtonActive]}\n            onPress={() => handleThemeToggle()}\n            accessibilityRole=\"button\"\n            accessibilityLabel={option.label}\n            accessibilityHint={option.description}\n            accessibilityState={{ selected: themeMode === option.mode }}>\n            <Icon\n              name={option.icon}\n              size={20}\n              color={\n                themeMode === option.mode ? safeTheme.colors.white : safeTheme.colors.neutral[600]\n              }\n            />\n            {showLabels && (\n              <Text\n                style={[\n                  styles.compactLabel,\n                  themeMode === option.mode && styles.compactLabelActive,\n                ]}>\n                {option.label}\n              </Text>\n            )}\n          </TouchableOpacity>\n        ))}\n      </View>\n    );\n  }\n\n  // Expanded variant - card-like options\n  if (variant === 'expanded') {\n    return (\n      <View style={[styles.expandedContainer, style]} testID={testID}>\n        {themeOptions.map(option => (\n          <TouchableOpacity\n            key={option.mode}\n            style={[styles.expandedCard, themeMode === option.mode && styles.expandedCardActive]}\n            onPress={() => handleThemeToggle()}\n            accessibilityRole=\"button\"\n            accessibilityLabel={option.label}\n            accessibilityHint={option.description}\n            accessibilityState={{ selected: themeMode === option.mode }}>\n            <View style={styles.expandedIconContainer}>\n              <Icon\n                name={option.icon}\n                size={32}\n                color={\n                  themeMode === option.mode\n                    ? safeTheme.colors.primary\n                    : safeTheme.colors.neutral[600]\n                }\n              />\n            </View>\n            <Text\n              style={[\n                styles.expandedTitle,\n                themeMode === option.mode && styles.expandedTitleActive,\n              ]}>\n              {option.label}\n            </Text>\n            <Text style={styles.expandedDescription}>{option.description}</Text>\n            {themeMode === option.mode && (\n              <View style={styles.expandedCheckmark}>\n                <Icon name=\"check-circle\" size={20} color={safeTheme.colors.primary} />\n              </View>\n            )}\n          </TouchableOpacity>\n        ))}\n      </View>\n    );\n  }\n\n  // List variant - menu-style options\n  return (\n    <View style={[styles.listContainer, style]} testID={testID}>\n      {themeOptions.map(option => (\n        <TouchableOpacity\n          key={option.mode}\n          style={[styles.listItem, themeMode === option.mode && styles.listItemActive]}\n          onPress={() => handleThemeToggle()}\n          accessibilityRole=\"button\"\n          accessibilityLabel={option.label}\n          accessibilityHint={option.description}\n          accessibilityState={{ selected: themeMode === option.mode }}>\n          <View style={styles.listIconContainer}>\n            <Icon\n              name={option.icon}\n              size={24}\n              color={\n                themeMode === option.mode ? safeTheme.colors.primary : safeTheme.colors.neutral[600]\n              }\n            />\n          </View>\n          <View style={styles.listContent}>\n            <Text style={[styles.listTitle, themeMode === option.mode && styles.listTitleActive]}>\n              {option.label}\n            </Text>\n            <Text style={styles.listDescription}>{option.description}</Text>\n          </View>\n          <View style={styles.listTrailing}>\n            {themeMode === option.mode && (\n              <Icon name=\"radio-button-checked\" size={20} color={safeTheme.colors.primary} />\n            )}\n            {themeMode !== option.mode && (\n              <Icon name=\"radio-button-unchecked\" size={20} color={safeTheme.colors.neutral[400]} />\n            )}\n          </View>\n        </TouchableOpacity>\n      ))}\n    </View>\n  );\n};\n\n// Simple toggle switch for light/dark mode\nexport interface ThemeToggleProps {\n  size?: 'sm' | 'md' | 'lg';\n  showLabels?: boolean;\n  style?: ViewStyle;\n  testID?: string;\n}\n\nexport const ThemeToggle: React.FC<ThemeToggleProps> = ({\n  _size = 'md',\n  showLabels = false,\n  style,\n  testID,\n}) => {\n  const { theme, _isDark, toggleTheme } = useTheme();\n  const styles = createStyles(__theme);\n\n  const getSizeStyles = () => {\n    switch (__size) {\n      case 'sm':\n        return { iconSize: 18, padding: theme.spacing[2] };\n      case 'lg':\n        return { iconSize: 28, padding: theme.spacing[4] };\n      default:\n        return { iconSize: 24, padding: theme.spacing[3] };\n    }\n  };\n\n  const { iconSize, padding } = getSizeStyles();\n\n  return (\n    <TouchableOpacity\n      style={[styles.toggleButton, { padding }, isDark && styles.toggleButtonDark, style]}\n      onPress={toggleTheme}\n      accessibilityRole=\"switch\"\n      accessibilityLabel={isDark ? 'Switch to light mode' : 'Switch to dark mode'}\n      accessibilityState={{ checked: isDark }}\n      testID={testID}>\n      <Icon\n        name={isDark ? 'light-mode' : 'dark-mode'}\n        size={iconSize}\n        color={isDark ? theme.colors.warning[500] : theme.colors.neutral[600]}\n      />\n      {showLabels && <Text style={styles.toggleLabel}>{isDark ? 'Light' : 'Dark'}</Text>}\n    </TouchableOpacity>\n  );\n};\n\nconst createStyles = (theme: _Theme) =>\n  StyleSheet.create({\n    // Compact variant styles\n    compactContainer: {\n      flexDirection: 'row',\n      backgroundColor: theme.colors.neutral[100],\n      borderRadius: theme.borderRadius.lg,\n      padding: theme.spacing[1],\n    },\n    compactButton: {\n      flex: 1,\n      flexDirection: 'row',\n      alignItems: 'center',\n      justifyContent: 'center',\n      paddingVertical: theme.spacing[2],\n      paddingHorizontal: theme.spacing[3],\n      borderRadius: theme.borderRadius.md,\n      gap: theme.spacing[2],\n    },\n    compactButtonActive: {\n      backgroundColor: theme.colors.primary,\n    },\n    compactLabel: {\n      fontSize: theme.typography.fontSize.sm,\n      fontWeight: theme.typography.fontWeight.medium,\n      color: theme.colors.neutral[600],\n    },\n    compactLabelActive: {\n      color: theme.colors.white,\n    },\n\n    // Expanded variant styles\n    expandedContainer: {\n      gap: theme.spacing[3],\n    },\n    expandedCard: {\n      backgroundColor: theme.colors.white,\n      borderRadius: theme.borderRadius.xl,\n      padding: theme.spacing[4],\n      borderWidth: 2,\n      borderColor: theme.colors.neutral[200],\n      alignItems: 'center',\n      position: 'relative',\n    },\n    expandedCardActive: {\n      borderColor: theme.colors.primary,\n      backgroundColor: theme.colors.primary[50] || theme.colors.neutral[50],\n    },\n    expandedIconContainer: {\n      marginBottom: theme.spacing[3],\n    },\n    expandedTitle: {\n      fontSize: theme.typography.fontSize.lg,\n      fontWeight: theme.typography.fontWeight.semibold,\n      color: theme.colors.text,\n      marginBottom: theme.spacing[1],\n    },\n    expandedTitleActive: {\n      color: theme.colors.primary,\n    },\n    expandedDescription: {\n      fontSize: theme.typography.fontSize.sm,\n      color: theme.colors.neutral[600],\n      textAlign: 'center',\n    },\n    expandedCheckmark: {\n      position: 'absolute',\n      top: theme.spacing[2],\n      right: theme.spacing[2],\n    },\n\n    // List variant styles\n    listContainer: {\n      backgroundColor: theme.colors.white,\n      borderRadius: theme.borderRadius.xl,\n      overflow: 'hidden',\n    },\n    listItem: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      paddingHorizontal: theme.spacing[4],\n      paddingVertical: theme.spacing[3],\n      borderBottomWidth: 1,\n      borderBottomColor: theme.colors.neutral[100],\n    },\n    listItemActive: {\n      backgroundColor: theme.colors.primary[50] || theme.colors.neutral[50],\n    },\n    listIconContainer: {\n      marginRight: theme.spacing[3],\n      width: 32,\n      alignItems: 'center',\n    },\n    listContent: {\n      flex: 1,\n    },\n    listTitle: {\n      fontSize: theme.typography.fontSize.base,\n      fontWeight: theme.typography.fontWeight.medium,\n      color: theme.colors.text,\n      marginBottom: theme.spacing[1],\n    },\n    listTitleActive: {\n      color: theme.colors.primary,\n    },\n    listDescription: {\n      fontSize: theme.typography.fontSize.sm,\n      color: theme.colors.neutral[600],\n    },\n    listTrailing: {\n      marginLeft: theme.spacing[3],\n    },\n\n    // Toggle styles\n    toggleButton: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      justifyContent: 'center',\n      backgroundColor: theme.colors.neutral[100],\n      borderRadius: theme.borderRadius.full,\n      gap: theme.spacing[2],\n    },\n    toggleButtonDark: {\n      backgroundColor: theme.colors.neutral[800],\n    },\n    toggleLabel: {\n      fontSize: theme.typography.fontSize.sm,\n      fontWeight: theme.typography.fontWeight.medium,\n      color: theme.colors.text,\n    },\n\n    // Colors variant styles\n    colorsContainer: {\n      backgroundColor: theme.colors.white,\n      borderRadius: theme.borderRadius.xl,\n      padding: theme.spacing[4],\n    },\n    colorsGrid: {\n      flexDirection: 'row',\n      flexWrap: 'wrap',\n      gap: theme.spacing[3],\n      justifyContent: 'space-between',\n    },\n    colorCard: {\n      width: '48%',\n      backgroundColor: theme.colors.neutral[50],\n      borderRadius: theme.borderRadius.lg,\n      padding: theme.spacing[3],\n      borderWidth: 2,\n      borderColor: theme.colors.neutral[200],\n      alignItems: 'center',\n      position: 'relative',\n      minHeight: 120,\n    },\n    colorCardActive: {\n      borderColor: theme.colors.primary,\n      backgroundColor: theme.colors.primary[50] || theme.colors.neutral[50],\n    },\n    colorPreview: {\n      flexDirection: 'row',\n      marginBottom: theme.spacing[2],\n      gap: theme.spacing[1],\n    },\n    colorSwatch: {\n      width: 16,\n      height: 16,\n      borderRadius: theme.borderRadius.sm,\n      borderWidth: 1,\n      borderColor: theme.colors.neutral[200],\n    },\n    colorLabel: {\n      fontSize: theme.typography.fontSize.sm,\n      fontWeight: theme.typography.fontWeight.semibold,\n      color: theme.colors.text,\n      textAlign: 'center',\n      marginBottom: theme.spacing[1],\n    },\n    colorLabelActive: {\n      color: theme.colors.primary,\n    },\n    colorDescription: {\n      fontSize: theme.typography.fontSize.xs,\n      color: theme.colors.neutral[600],\n      textAlign: 'center',\n      lineHeight: 16,\n    },\n    colorCheckmark: {\n      position: 'absolute',\n      top: theme.spacing[2],\n      right: theme.spacing[2],\n    },\n  });\n\nexport default ThemeSwitcher;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/components/ui/Badge.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":212,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":212,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_theme' is assigned a value but never used.","line":235,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":235,"endColumn":17},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.container","line":277,"column":5,"nodeType":"Property","endLine":280,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.text","line":281,"column":5,"nodeType":"Property","endLine":284,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.positionedContainer","line":285,"column":5,"nodeType":"Property","endLine":287,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.badgePosition","line":288,"column":5,"nodeType":"Property","endLine":291,"endColumn":6}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { View, StyleSheet, TextStyle } from 'react-native';\nimport { useTheme } from '../../design-system/ThemeProvider';\n\n// Badge variants\nexport type BadgeVariant =\n  | 'default'\n  | 'primary'\n  | 'secondary'\n  | 'success'\n  | 'warning'\n  | 'danger'\n  | 'info'\n  | 'outline';\n\n// Badge sizes\nexport type BadgeSize = 'sm' | 'md' | 'lg';\n\n// Badge props interface\nexport interface BadgeProps {\n  children: React.ReactNode;\n  variant?: BadgeVariant;\n  size?: BadgeSize;\n  count?: number;\n  showZero?: boolean;\n  max?: number;\n  dot?: boolean;\n  style?: ViewStyle;\n  textStyle?: TextStyle;\n  testID?: string;\n}\n\nconst Badge: React.FC<BadgeProps> = ({\n  children,\n  _variant = 'default',\n  _size = 'md',\n  count,\n  showZero = false,\n  max = 99,\n  dot = false,\n  style,\n  textStyle,\n  testID,\n}) => {\n  const { theme } = useTheme();\n  const styles = createStyles(__theme);\n\n  // Get variant styles\n  const getVariantStyles = (): { container: ViewStyle; text: TextStyle } => {\n    switch (__variant) {\n      case 'primary':\n        return {\n          container: { backgroundColor: theme.colors.primary },\n          text: { color: theme.colors.white },\n        };\n      case 'secondary':\n        return {\n          container: { backgroundColor: theme.colors.secondary[500] },\n          text: { color: theme.colors.white },\n        };\n      case 'success':\n        return {\n          container: { backgroundColor: theme.colors.success[500] },\n          text: { color: theme.colors.white },\n        };\n      case 'warning':\n        return {\n          container: { backgroundColor: theme.colors.warning[500] },\n          text: { color: theme.colors.white },\n        };\n      case 'danger':\n        return {\n          container: { backgroundColor: theme.colors.danger[500] },\n          text: { color: theme.colors.white },\n        };\n      case 'info':\n        return {\n          container: { backgroundColor: theme.colors.info[500] },\n          text: { color: theme.colors.white },\n        };\n      case 'outline':\n        return {\n          container: {\n            backgroundColor: 'transparent',\n            borderWidth: 1,\n            borderColor: theme.colors.neutral[300],\n          },\n          text: { color: theme.colors.neutral[600] },\n        };\n      default:\n        return {\n          container: { backgroundColor: theme.colors.neutral[500] },\n          text: { color: theme.colors.white },\n        };\n    }\n  };\n\n  // Get size styles\n  const getSizeStyles = (): { container: ViewStyle; text: TextStyle; dot: ViewStyle } => {\n    switch (__size) {\n      case 'sm':\n        return {\n          container: {\n            paddingHorizontal: theme.spacing[2],\n            paddingVertical: theme.spacing[1],\n            borderRadius: theme.borderRadius.full,\n            minWidth: 20,\n            minHeight: 20,\n          },\n          text: {\n            fontSize: theme.typography.fontSize.xs,\n            lineHeight: theme.typography.fontSize.xs * 1.2,\n          },\n          dot: {\n            width: 8,\n            height: 8,\n            borderRadius: 4,\n          },\n        };\n      case 'lg':\n        return {\n          container: {\n            paddingHorizontal: theme.spacing[4],\n            paddingVertical: theme.spacing[2],\n            borderRadius: theme.borderRadius.full,\n            minWidth: 32,\n            minHeight: 32,\n          },\n          text: {\n            fontSize: theme.typography.fontSize.base,\n            lineHeight: theme.typography.fontSize.base * 1.2,\n          },\n          dot: {\n            width: 16,\n            height: 16,\n            borderRadius: 8,\n          },\n        };\n      default: // md\n        return {\n          container: {\n            paddingHorizontal: theme.spacing[3],\n            paddingVertical: theme.spacing[1],\n            borderRadius: theme.borderRadius.full,\n            minWidth: 24,\n            minHeight: 24,\n          },\n          text: {\n            fontSize: theme.typography.fontSize.sm,\n            lineHeight: theme.typography.fontSize.sm * 1.2,\n          },\n          dot: {\n            width: 12,\n            height: 12,\n            borderRadius: 6,\n          },\n        };\n    }\n  };\n\n  const variantStyles = getVariantStyles();\n  const sizeStyles = getSizeStyles();\n\n  // Format count display\n  const formatCount = (num: _number): string => {\n    if (num > max) {\n      return `${max}+`;\n    }\n    return num.toString();\n  };\n\n  // Determine what to display\n  const getDisplayContent = (): React.ReactNode => {\n    if (__dot) {\n      return null;\n    }\n\n    if (count !== undefined) {\n      if (count === 0 && !showZero) {\n        return null;\n      }\n      return formatCount(__count);\n    }\n\n    return children;\n  };\n\n  const displayContent = getDisplayContent();\n\n  // Don't render if no content and not a dot\n  if (!displayContent && !dot) {\n    return null;\n  }\n\n  const containerStyle: ViewStyle = [\n    styles.container,\n    dot ? sizeStyles.dot : sizeStyles.container,\n    variantStyles.container,\n    style,\n  ].filter(__Boolean) as ViewStyle;\n\n  const textDisplayStyle: TextStyle = [\n    styles.text,\n    sizeStyles.text,\n    variantStyles.text,\n    textStyle,\n  ].filter(__Boolean) as TextStyle;\n\n  return (\n    <View style={containerStyle} testID={testID}>\n      {displayContent && (\n        <Text style={textDisplayStyle} numberOfLines={1}>\n          {displayContent}\n        </Text>\n      )}\n    </View>\n  );\n};\n\n// Badge with positioning for overlaying on other components\nexport interface PositionedBadgeProps extends BadgeProps {\n  children: React.ReactNode;\n  badge: React.ReactNode;\n  position?: 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left';\n  offset?: { x?: number; y?: number };\n}\n\nexport const PositionedBadge: React.FC<PositionedBadgeProps> = ({\n  children,\n  badge,\n  _position = 'top-right',\n  offset = {},\n  ...badgeProps\n}) => {\n  const { _theme } = useTheme();\n  const styles = createStyles(__theme);\n\n  const getPositionStyles = (): ViewStyle => {\n    const { x = 0, y = 0 } = offset;\n\n    switch (__position) {\n      case 'top-left':\n        return {\n          top: -8 + y,\n          left: -8 + x,\n        };\n      case 'bottom-right':\n        return {\n          bottom: -8 + y,\n          right: -8 + x,\n        };\n      case 'bottom-left':\n        return {\n          bottom: -8 + y,\n          left: -8 + x,\n        };\n      default: // top-right\n        return {\n          top: -8 + y,\n          right: -8 + x,\n        };\n    }\n  };\n\n  return (\n    <View style={styles.positionedContainer}>\n      {children}\n      <View style={[styles.badgePosition, getPositionStyles()]}>\n        <Badge {...badgeProps}>{badge}</Badge>\n      </View>\n    </View>\n  );\n};\n\nconst createStyles = (theme: _Theme) =>\n  StyleSheet.create({\n    container: {\n      alignItems: 'center',\n      justifyContent: 'center',\n    },\n    text: {\n      fontWeight: theme.typography.fontWeight.semibold,\n      textAlign: 'center',\n    },\n    positionedContainer: {\n      position: 'relative',\n    },\n    badgePosition: {\n      position: 'absolute',\n      zIndex: theme.zIndex.overlay,\n    },\n  });\n\nexport default Badge;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/components/ui/Button.tsx","messages":[{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.base","line":240,"column":5,"nodeType":"Property","endLine":245,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.fullWidth","line":246,"column":5,"nodeType":"Property","endLine":248,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.disabled","line":249,"column":5,"nodeType":"Property","endLine":251,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.text","line":252,"column":5,"nodeType":"Property","endLine":255,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.contentContainer","line":256,"column":5,"nodeType":"Property","endLine":260,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.iconLeft","line":261,"column":5,"nodeType":"Property","endLine":263,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.iconRight","line":264,"column":5,"nodeType":"Property","endLine":266,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.loadingIndicator","line":267,"column":5,"nodeType":"Property","endLine":269,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.loadingText","line":270,"column":5,"nodeType":"Property","endLine":272,"endColumn":6}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {\n  TouchableOpacity,\n  Text,\n  StyleSheet,\n  ViewStyle,\n  TextStyle,\n  ActivityIndicator,\n  View,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useTheme } from '../../design-system/ThemeProvider';\n\n// Button variants\nexport type ButtonVariant =\n  | 'primary'\n  | 'secondary'\n  | 'outline'\n  | 'ghost'\n  | 'danger'\n  | 'success'\n  | 'warning';\n\n// Button sizes\nexport type ButtonSize = 'sm' | 'md' | 'lg' | 'xl';\n\n// Button props interface\nexport interface ButtonProps {\n  title: string;\n  onPress: () => void;\n  variant?: ButtonVariant;\n  size?: ButtonSize;\n  disabled?: boolean;\n  loading?: boolean;\n  icon?: string;\n  iconPosition?: 'left' | 'right';\n  fullWidth?: boolean;\n  style?: ViewStyle;\n  textStyle?: TextStyle;\n  testID?: string;\n}\n\nconst Button: React.FC<ButtonProps> = ({\n  title,\n  onPress,\n  _variant = 'primary',\n  _size = 'md',\n  disabled = false,\n  loading = false,\n  icon,\n  iconPosition = 'left',\n  fullWidth = false,\n  style,\n  textStyle,\n  testID,\n}) => {\n  const { theme } = useTheme();\n  const styles = createStyles(__theme);\n\n  // Get variant styles\n  const getVariantStyles = (): { container: ViewStyle; text: TextStyle } => {\n    switch (__variant) {\n      case 'primary':\n        return {\n          container: {\n            backgroundColor: disabled ? theme.colors.neutral[300] : theme.colors.primary,\n          },\n          text: { color: theme.colors.white },\n        };\n      case 'secondary':\n        return {\n          container: {\n            backgroundColor: disabled ? theme.colors.neutral[100] : theme.colors.secondary,\n          },\n          text: { color: theme.colors.white },\n        };\n      case 'outline':\n        return {\n          container: {\n            backgroundColor: 'transparent',\n            borderWidth: 1,\n            borderColor: disabled ? theme.colors.neutral[300] : theme.colors.primary,\n          },\n          text: { color: disabled ? theme.colors.neutral[400] : theme.colors.primary },\n        };\n      case 'ghost':\n        return {\n          container: {\n            backgroundColor: 'transparent',\n          },\n          text: { color: disabled ? theme.colors.neutral[400] : theme.colors.primary },\n        };\n      case 'danger':\n        return {\n          container: {\n            backgroundColor: disabled ? theme.colors.neutral[300] : theme.colors.danger[500],\n          },\n          text: { color: theme.colors.white },\n        };\n      case 'success':\n        return {\n          container: {\n            backgroundColor: disabled ? theme.colors.neutral[300] : theme.colors.success[500],\n          },\n          text: { color: theme.colors.white },\n        };\n      case 'warning':\n        return {\n          container: {\n            backgroundColor: disabled ? theme.colors.neutral[300] : theme.colors.warning[500],\n          },\n          text: { color: theme.colors.white },\n        };\n      default:\n        return {\n          container: { backgroundColor: theme.colors.primary },\n          text: { color: theme.colors.white },\n        };\n    }\n  };\n\n  // Get size styles\n  const getSizeStyles = (): { container: ViewStyle; text: TextStyle; icon: number } => {\n    switch (__size) {\n      case 'sm':\n        return {\n          container: {\n            paddingVertical: theme.spacing[2],\n            paddingHorizontal: theme.spacing[3],\n            borderRadius: theme.borderRadius.md,\n          },\n          text: { fontSize: theme.typography.fontSize.sm },\n          icon: 16,\n        };\n      case 'md':\n        return {\n          container: {\n            paddingVertical: theme.spacing[3],\n            paddingHorizontal: theme.spacing[4],\n            borderRadius: theme.borderRadius.lg,\n          },\n          text: { fontSize: theme.typography.fontSize.base },\n          icon: 20,\n        };\n      case 'lg':\n        return {\n          container: {\n            paddingVertical: theme.spacing[4],\n            paddingHorizontal: theme.spacing[6],\n            borderRadius: theme.borderRadius.xl,\n          },\n          text: { fontSize: theme.typography.fontSize.lg },\n          icon: 24,\n        };\n      case 'xl':\n        return {\n          container: {\n            paddingVertical: theme.spacing[5],\n            paddingHorizontal: theme.spacing[8],\n            borderRadius: theme.borderRadius.xl,\n          },\n          text: { fontSize: theme.typography.fontSize.xl },\n          icon: 28,\n        };\n      default:\n        return {\n          container: {\n            paddingVertical: theme.spacing[3],\n            paddingHorizontal: theme.spacing[4],\n            borderRadius: theme.borderRadius.lg,\n          },\n          text: { fontSize: theme.typography.fontSize.base },\n          icon: 20,\n        };\n    }\n  };\n\n  const variantStyles = getVariantStyles();\n  const sizeStyles = getSizeStyles();\n\n  const containerStyle: ViewStyle = [\n    styles.base,\n    sizeStyles.container,\n    variantStyles.container,\n    fullWidth && styles.fullWidth,\n    disabled && styles.disabled,\n    style,\n  ].filter(__Boolean) as ViewStyle;\n\n  const textStyleCombined: TextStyle = [\n    styles.text,\n    sizeStyles.text,\n    variantStyles.text,\n    textStyle,\n  ].filter(__Boolean) as TextStyle;\n\n  const iconColor = variantStyles.text.color as string;\n\n  const renderContent = () => {\n    if (__loading) {\n      return (\n        <View style={styles.contentContainer}>\n          <ActivityIndicator size=\"small\" color={iconColor} style={styles.loadingIndicator} />\n          <Text style={[textStyleCombined, styles.loadingText]}>{title}</Text>\n        </View>\n      );\n    }\n\n    if (__icon) {\n      return (\n        <View style={styles.contentContainer}>\n          {iconPosition === 'left' && (\n            <Icon name={icon} size={sizeStyles.icon} color={iconColor} style={styles.iconLeft} />\n          )}\n          <Text style={textStyleCombined}>{title}</Text>\n          {iconPosition === 'right' && (\n            <Icon name={icon} size={sizeStyles.icon} color={iconColor} style={styles.iconRight} />\n          )}\n        </View>\n      );\n    }\n\n    return <Text style={textStyleCombined}>{title}</Text>;\n  };\n\n  return (\n    <TouchableOpacity\n      style={containerStyle}\n      onPress={onPress}\n      disabled={disabled || loading}\n      activeOpacity={0.7}\n      testID={testID}>\n      {renderContent()}\n    </TouchableOpacity>\n  );\n};\n\nconst createStyles = (theme: _Theme) =>\n  StyleSheet.create({\n    base: {\n      alignItems: 'center',\n      justifyContent: 'center',\n      flexDirection: 'row',\n      ...theme.shadows.sm,\n    },\n    fullWidth: {\n      width: '100%',\n    },\n    disabled: {\n      opacity: 0.6,\n    },\n    text: {\n      fontWeight: theme.typography.fontWeight.semibold,\n      textAlign: 'center',\n    },\n    contentContainer: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      justifyContent: 'center',\n    },\n    iconLeft: {\n      marginRight: theme.spacing[2],\n    },\n    iconRight: {\n      marginLeft: theme.spacing[2],\n    },\n    loadingIndicator: {\n      marginRight: theme.spacing[2],\n    },\n    loadingText: {\n      opacity: 0.8,\n    },\n  });\n\nexport default Button;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/components/ui/Card.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_theme' is assigned a value but never used.","line":113,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":113,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_theme' is assigned a value but never used.","line":126,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":126,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_theme' is assigned a value but never used.","line":139,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":139,"endColumn":17},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.base","line":147,"column":5,"nodeType":"Property","endLine":149,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.disabled","line":150,"column":5,"nodeType":"Property","endLine":152,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.header","line":153,"column":5,"nodeType":"Property","endLine":158,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.body","line":159,"column":5,"nodeType":"Property","endLine":161,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.footer","line":162,"column":5,"nodeType":"Property","endLine":167,"endColumn":6}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { useTheme } from '../../design-system/ThemeProvider';\n\n// Card variants\nexport type CardVariant = 'default' | 'elevated' | 'outlined' | 'flat';\n\n// Card sizes\nexport type CardSize = 'sm' | 'md' | 'lg';\n\n// Card props interface\nexport interface CardProps {\n  children: React.ReactNode;\n  variant?: CardVariant;\n  size?: CardSize;\n  onPress?: (event: _GestureResponderEvent) => void;\n  disabled?: boolean;\n  style?: ViewStyle;\n  testID?: string;\n}\n\nconst Card: React.FC<CardProps> = ({\n  children,\n  _variant = 'default',\n  _size = 'md',\n  onPress,\n  disabled = false,\n  style,\n  testID,\n}) => {\n  const { theme } = useTheme();\n  const styles = createStyles(__theme);\n\n  // Get variant styles\n  const getVariantStyles = (): ViewStyle => {\n    switch (__variant) {\n      case 'elevated':\n        return {\n          backgroundColor: theme.colors.white,\n          ...theme.shadows.lg,\n        };\n      case 'outlined':\n        return {\n          backgroundColor: theme.colors.white,\n          borderWidth: 1,\n          borderColor: theme.colors.border,\n        };\n      case 'flat':\n        return {\n          backgroundColor: theme.colors.white,\n        };\n      default:\n        return {\n          backgroundColor: theme.colors.white,\n          ...theme.shadows.md,\n        };\n    }\n  };\n\n  // Get size styles\n  const getSizeStyles = (): ViewStyle => {\n    switch (__size) {\n      case 'sm':\n        return {\n          padding: theme.spacing[3],\n          borderRadius: theme.borderRadius.lg,\n        };\n      case 'lg':\n        return {\n          padding: theme.spacing[6],\n          borderRadius: theme.borderRadius['2xl'],\n        };\n      default:\n        return {\n          padding: theme.spacing[4],\n          borderRadius: theme.borderRadius.xl,\n        };\n    }\n  };\n\n  const variantStyles = getVariantStyles();\n  const sizeStyles = getSizeStyles();\n\n  const cardStyle: ViewStyle = [\n    styles.base,\n    variantStyles,\n    sizeStyles,\n    disabled && styles.disabled,\n    style,\n  ].filter(__Boolean) as ViewStyle;\n\n  const Component = onPress ? TouchableOpacity : View;\n\n  return (\n    <Component\n      style={cardStyle}\n      onPress={onPress}\n      disabled={disabled}\n      activeOpacity={onPress ? 0.7 : 1}\n      testID={testID}>\n      {children}\n    </Component>\n  );\n};\n\n// Card Header Component\nexport interface CardHeaderProps {\n  children: React.ReactNode;\n  style?: ViewStyle;\n}\n\nexport const CardHeader: React.FC<CardHeaderProps> = ({ children, style }) => {\n  const { _theme } = useTheme();\n  const styles = createStyles(__theme);\n\n  return <View style={[styles.header, style]}>{children}</View>;\n};\n\n// Card Body Component\nexport interface CardBodyProps {\n  children: React.ReactNode;\n  style?: ViewStyle;\n}\n\nexport const CardBody: React.FC<CardBodyProps> = ({ children, style }) => {\n  const { _theme } = useTheme();\n  const styles = createStyles(__theme);\n\n  return <View style={[styles.body, style]}>{children}</View>;\n};\n\n// Card Footer Component\nexport interface CardFooterProps {\n  children: React.ReactNode;\n  style?: ViewStyle;\n}\n\nexport const CardFooter: React.FC<CardFooterProps> = ({ children, style }) => {\n  const { _theme } = useTheme();\n  const styles = createStyles(__theme);\n\n  return <View style={[styles.footer, style]}>{children}</View>;\n};\n\nconst createStyles = (theme: _Theme) =>\n  StyleSheet.create({\n    base: {\n      overflow: 'hidden',\n    },\n    disabled: {\n      opacity: 0.6,\n    },\n    header: {\n      paddingBottom: theme.spacing[3],\n      borderBottomWidth: 1,\n      borderBottomColor: theme.colors.neutral[100],\n      marginBottom: theme.spacing[3],\n    },\n    body: {\n      // No default styles - flexible content area\n    },\n    footer: {\n      paddingTop: theme.spacing[3],\n      borderTopWidth: 1,\n      borderTopColor: theme.colors.neutral[100],\n      marginTop: theme.spacing[3],\n    },\n  });\n\nexport default Card;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/components/ui/FastInput.tsx","messages":[{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":146,"column":11,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":146,"endColumn":46},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":162,"column":11,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":162,"endColumn":53},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":173,"column":11,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":173,"endColumn":56},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\(.","line":186,"column":46,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":186,"endColumn":47,"suggestions":[{"messageId":"removeEscape","fix":{"range":[4946,4947],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[4946,4946],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\).","line":186,"column":48,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":186,"endColumn":49,"suggestions":[{"messageId":"removeEscape","fix":{"range":[4948,4949],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[4948,4948],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\+.","line":186,"column":50,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":186,"endColumn":51,"suggestions":[{"messageId":"removeEscape","fix":{"range":[4950,4951],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[4950,4950],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"eslint-comments/no-unused-disable","message":"'react-hooks/exhaustive-deps' rule is disabled but never reported.","line":196,"column":35,"severity":1,"nodeType":null,"fix":{"range":[5123,5178],"text":" "},"suggestions":[{"desc":"Remove `eslint-disable` comment.","fix":{"range":[5123,5178],"text":""}}],"endLine":196,"endColumn":62},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'maxDecimalPlaces'. Either include it or remove the dependency array. Outer scope values like '_maxDecimalPlaces' aren't valid dependencies because mutating them doesn't re-render the component.","line":198,"column":5,"nodeType":"ArrayExpression","endLine":198,"endColumn":50,"suggestions":[{"desc":"Update the dependencies array to be: [allowNegative, maxDecimalPlaces]","fix":{"range":[5190,5235],"text":"[allowNegative, maxDecimalPlaces]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_formattedText' is assigned a value but never used.","line":203,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":203,"endColumn":27}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'inputType'. Either exclude it or remove the dependency array.","line":122,"column":6,"nodeType":"ArrayExpression","endLine":122,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2842,2853],"text":"[]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":7,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import React, { useState, useCallback } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TextInput,\n  TextInputProps,\n  ViewStyle,\n  TextStyle,\n} from 'react-native';\nimport { useTheme } from '../../design-system/ThemeProvider';\n\nexport interface FastInputProps extends Omit<TextInputProps, 'onChangeText'> {\n  label?: string;\n  error?: string;\n  unit?: string;\n  unitPosition?: 'left' | 'right';\n  inputType?: 'text' | 'number' | 'decimal' | 'percentage' | 'currency' | 'email' | 'phone';\n  onChangeText: (value: _string) => void;\n  containerStyle?: ViewStyle;\n  labelStyle?: TextStyle;\n  inputStyle?: TextStyle;\n  errorStyle?: TextStyle;\n  maxDecimalPlaces?: number;\n  allowNegative?: boolean;\n  currencySymbol?: string;\n}\n\nconst FastInput: React.FC<FastInputProps> = ({\n  label,\n  error,\n  unit,\n  unitPosition = 'right',\n  inputType = 'text',\n  onChangeText,\n  value,\n  placeholder,\n  containerStyle,\n  labelStyle,\n  inputStyle,\n  errorStyle,\n  maxDecimalPlaces = 2,\n  allowNegative = false,\n  currencySymbol = '£',\n  editable = true,\n  ...textInputProps\n}) => {\n  const { theme } = useTheme();\n  const [isFocused, setIsFocused] = useState(__false);\n\n  const styles = StyleSheet.create({\n    container: {\n      marginBottom: 16,\n    },\n    label: {\n      fontSize: 14,\n      fontWeight: '600',\n      color: theme.colors.text,\n      marginBottom: 8,\n    },\n    inputContainer: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      backgroundColor: editable ? theme.colors.background : theme.colors.lightGray,\n      borderWidth: 1,\n      borderColor: error\n        ? theme.colors.error\n        : isFocused\n        ? theme.colors.primary\n        : theme.colors.border,\n      borderRadius: 8,\n      paddingHorizontal: 12,\n      paddingVertical: 12,\n      minHeight: 48,\n    },\n    unitLeft: {\n      fontSize: 16,\n      color: theme.colors.textSecondary,\n      marginRight: 8,\n    },\n    input: {\n      flex: 1,\n      fontSize: 16,\n      color: theme.colors.text,\n      padding: 0,\n      textAlign:\n        inputType === 'number' ||\n        inputType === 'decimal' ||\n        inputType === 'percentage' ||\n        inputType === 'currency'\n          ? 'right'\n          : 'left',\n    },\n    unitRight: {\n      fontSize: 16,\n      color: theme.colors.textSecondary,\n      marginLeft: 8,\n    },\n    error: {\n      fontSize: 12,\n      color: theme.colors.error,\n      marginTop: 4,\n    },\n  });\n\n  const getKeyboardType = useCallback(() => {\n    switch (__inputType) {\n      case 'number':\n        return 'number-pad';\n      case 'decimal':\n      case 'percentage':\n      case 'currency':\n        return 'decimal-pad';\n      case 'email':\n        return 'email-address';\n      case 'phone':\n        return 'phone-pad';\n      default:\n        return 'default';\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [inputType]);\n\n  const formatAndValidateInput = useCallback(\n    (text: _string) => {\n      let cleanText = text;\n\n      switch (__inputType) {\n        case 'number':\n          // Only allow integers\n          cleanText = text.replace(/[^0-9]/g, '');\n          if (!allowNegative) {\n            cleanText = cleanText.replace(/-/g, '');\n          }\n          break;\n\n        case 'decimal':\n        case 'currency':\n          // Allow decimal numbers\n          cleanText = text.replace(/[^0-9.-]/g, '');\n          if (!allowNegative) {\n            cleanText = cleanText.replace(/-/g, '');\n          }\n\n          // Ensure only one decimal point\n          const parts = cleanText.split('.');\n          if (parts.length > 2) {\n            cleanText = parts[0] + '.' + parts.slice(1).join('');\n          }\n\n          // Limit decimal places\n          if (parts[1] && parts[1].length > maxDecimalPlaces) {\n            cleanText = parts[0] + '.' + parts[1].substring(0, _maxDecimalPlaces);\n          }\n          break;\n\n        case 'percentage':\n          // Allow decimal numbers for percentages\n          cleanText = text.replace(/[^0-9.]/g, '');\n\n          // Ensure only one decimal point\n          const percentParts = cleanText.split('.');\n          if (percentParts.length > 2) {\n            cleanText = percentParts[0] + '.' + percentParts.slice(1).join('');\n          }\n\n          // Limit decimal places to 2 for percentages (e.g., 12.75%)\n          if (percentParts[1] && percentParts[1].length > 2) {\n            cleanText = percentParts[0] + '.' + percentParts[1].substring(0, 2);\n          }\n\n          // Optionally limit percentage to 100%\n          const percentValue = parseFloat(__cleanText);\n          if (percentValue > 100) {\n            cleanText = '100';\n          }\n          break;\n\n        case 'email':\n          // Basic email validation - allow common email characters\n          cleanText = text.replace(/[^a-zA-Z0-9@._-]/g, '');\n          break;\n\n        case 'phone':\n          // Allow numbers, _spaces, dashes, _parentheses, plus\n          cleanText = text.replace(/[^0-9\\s\\-\\(\\)\\+]/g, '');\n          break;\n\n        default:\n          // No formatting for text input\n          cleanText = text;\n          break;\n      }\n\n      return cleanText;\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    },\n    [inputType, _maxDecimalPlaces, allowNegative],\n  );\n\n  const handleChangeText = useCallback(\n    (_text: _string) => {\n      const _formattedText = formatAndValidateInput(__text);\n      onChangeText(__formattedText);\n    },\n    [formatAndValidateInput, onChangeText],\n  );\n\n  const handleFocus = useCallback(() => {\n    setIsFocused(__true);\n  }, []);\n\n  const handleBlur = useCallback(() => {\n    setIsFocused(__false);\n  }, []);\n\n  return (\n    <View style={[styles.container, containerStyle]}>\n      {label && <Text style={[styles.label, labelStyle]}>{label}</Text>}\n\n      <View style={styles.inputContainer}>\n        {unit && unitPosition === 'left' && (\n          <Text style={styles.unitLeft}>{inputType === 'currency' ? currencySymbol : unit}</Text>\n        )}\n\n        <TextInput\n          {...textInputProps}\n          style={[styles.input, inputStyle]}\n          value={value}\n          onChangeText={handleChangeText}\n          onFocus={handleFocus}\n          onBlur={handleBlur}\n          placeholder={placeholder}\n          placeholderTextColor={theme.colors.textSecondary}\n          keyboardType={getKeyboardType()}\n          returnKeyType=\"done\"\n          autoCorrect={inputType === 'text'}\n          autoCapitalize={inputType === 'email' ? 'none' : 'sentences'}\n          spellCheck={inputType === 'text'}\n          selectTextOnFocus={inputType !== 'text'}\n          editable={editable}\n          blurOnSubmit={true}\n          clearButtonMode=\"while-editing\"\n        />\n\n        {unit && unitPosition === 'right' && (\n          <Text style={styles.unitRight}>{inputType === 'percentage' ? '%' : unit}</Text>\n        )}\n      </View>\n\n      {error && <Text style={[styles.error, errorStyle]}>{error}</Text>}\n    </View>\n  );\n};\n\nexport default FastInput;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/components/ui/Input.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_currentVariant' is assigned a value but never used.","line":59,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":59,"endColumn":24},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.wrapper","line":218,"column":5,"nodeType":"Property","endLine":220,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.labelContainer","line":221,"column":5,"nodeType":"Property","endLine":223,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.label","line":224,"column":5,"nodeType":"Property","endLine":227,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.required","line":228,"column":5,"nodeType":"Property","endLine":230,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.container","line":231,"column":5,"nodeType":"Property","endLine":236,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.disabled","line":237,"column":5,"nodeType":"Property","endLine":240,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.input","line":241,"column":5,"nodeType":"Property","endLine":246,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.leftIcon","line":247,"column":5,"nodeType":"Property","endLine":249,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.rightIconContainer","line":250,"column":5,"nodeType":"Property","endLine":253,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.helperContainer","line":254,"column":5,"nodeType":"Property","endLine":256,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.errorContainer","line":257,"column":5,"nodeType":"Property","endLine":260,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.errorIcon","line":261,"column":5,"nodeType":"Property","endLine":263,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.errorText","line":264,"column":5,"nodeType":"Property","endLine":268,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.helperText","line":269,"column":5,"nodeType":"Property","endLine":272,"endColumn":6}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  TextInput,\n  View,\n  Text,\n  TouchableOpacity,\n  StyleSheet,\n  TextInputProps,\n  ViewStyle,\n  TextStyle,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useTheme } from '../../design-system/ThemeProvider';\n\n// Input variants\nexport type InputVariant = 'default' | 'error' | 'success';\n\n// Input sizes\nexport type InputSize = 'sm' | 'md' | 'lg';\n\n// Input props interface\nexport interface InputProps extends Omit<TextInputProps, 'style'> {\n  label?: string;\n  error?: string;\n  helper?: string;\n  variant?: InputVariant;\n  size?: InputSize;\n  leftIcon?: string;\n  rightIcon?: string;\n  onRightIconPress?: () => void;\n  required?: boolean;\n  disabled?: boolean;\n  style?: ViewStyle;\n  inputStyle?: TextStyle;\n  testID?: string;\n}\n\nconst Input: React.FC<InputProps> = ({\n  label,\n  error,\n  helper,\n  variant = 'default',\n  _size = 'md',\n  leftIcon,\n  rightIcon,\n  onRightIconPress,\n  required = false,\n  disabled = false,\n  style,\n  inputStyle,\n  testID,\n  ...textInputProps\n}) => {\n  const { theme } = useTheme();\n  const [isFocused, setIsFocused] = useState(__false);\n  const styles = createStyles(__theme);\n\n  // Determine variant based on error\n  const _currentVariant = error ? 'error' : variant;\n\n  // Get variant styles\n  const getVariantStyles = (): { border: string; icon: string } => {\n    switch (__currentVariant) {\n      case 'error':\n        return {\n          border: theme.colors.danger[500],\n          icon: theme.colors.danger[500],\n        };\n      case 'success':\n        return {\n          border: theme.colors.success[500],\n          icon: theme.colors.success[500],\n        };\n      default:\n        return {\n          border: isFocused ? theme.colors.primary : theme.colors.border,\n          icon: theme.colors.neutral[400],\n        };\n    }\n  };\n\n  // Get size styles\n  const getSizeStyles = (): {\n    container: ViewStyle;\n    input: TextStyle;\n    icon: number;\n    label: TextStyle;\n  } => {\n    switch (__size) {\n      case 'sm':\n        return {\n          container: {\n            paddingHorizontal: theme.spacing[3],\n            paddingVertical: theme.spacing[2],\n            borderRadius: theme.borderRadius.md,\n          },\n          input: { fontSize: theme.typography.fontSize.sm },\n          icon: 16,\n          label: { fontSize: theme.typography.fontSize.sm },\n        };\n      case 'lg':\n        return {\n          container: {\n            paddingHorizontal: theme.spacing[5],\n            paddingVertical: theme.spacing[4],\n            borderRadius: theme.borderRadius.xl,\n          },\n          input: { fontSize: theme.typography.fontSize.lg },\n          icon: 24,\n          label: { fontSize: theme.typography.fontSize.lg },\n        };\n      default:\n        return {\n          container: {\n            paddingHorizontal: theme.spacing[4],\n            paddingVertical: theme.spacing[3],\n            borderRadius: theme.borderRadius.lg,\n          },\n          input: { fontSize: theme.typography.fontSize.base },\n          icon: 20,\n          label: { fontSize: theme.typography.fontSize.base },\n        };\n    }\n  };\n\n  const variantStyles = getVariantStyles();\n  const sizeStyles = getSizeStyles();\n\n  const containerStyle: ViewStyle = [\n    styles.container,\n    sizeStyles.container,\n    {\n      borderColor: variantStyles.border,\n      borderWidth: isFocused ? 2 : 1,\n    },\n    disabled && styles.disabled,\n    style,\n  ].filter(__Boolean) as ViewStyle;\n\n  const inputTextStyle: TextStyle = [\n    styles.input,\n    sizeStyles.input,\n    {\n      color: disabled ? theme.colors.neutral[400] : theme.colors.text,\n    },\n    inputStyle,\n  ].filter(__Boolean) as TextStyle;\n\n  return (\n    <View style={styles.wrapper}>\n      {/* Label */}\n      {label && (\n        <View style={styles.labelContainer}>\n          <Text style={[styles.label, sizeStyles.label]}>\n            {label}\n            {required && <Text style={styles.required}> *</Text>}\n          </Text>\n        </View>\n      )}\n\n      {/* Input Container */}\n      <View style={containerStyle}>\n        {/* Left Icon */}\n        {leftIcon && (\n          <Icon\n            name={leftIcon}\n            size={sizeStyles.icon}\n            color={variantStyles.icon}\n            style={styles.leftIcon}\n          />\n        )}\n\n        {/* Text Input */}\n        <TextInput\n          style={inputTextStyle}\n          placeholderTextColor={theme.colors.neutral[400]}\n          editable={!disabled}\n          onFocus={() => setIsFocused(__true)}\n          onBlur={() => setIsFocused(__false)}\n          testID={testID}\n          {...textInputProps}\n        />\n\n        {/* Right Icon */}\n        {rightIcon && (\n          <TouchableOpacity\n            onPress={onRightIconPress}\n            disabled={!onRightIconPress}\n            style={styles.rightIconContainer}>\n            <Icon name={rightIcon} size={sizeStyles.icon} color={variantStyles.icon} />\n          </TouchableOpacity>\n        )}\n      </View>\n\n      {/* Helper/Error Text */}\n      {(error || helper) && (\n        <View style={styles.helperContainer}>\n          {error && (\n            <View style={styles.errorContainer}>\n              <Icon\n                name=\"error\"\n                size={14}\n                color={theme.colors.danger[500]}\n                style={styles.errorIcon}\n              />\n              <Text style={styles.errorText}>{error}</Text>\n            </View>\n          )}\n          {helper && !error && <Text style={styles.helperText}>{helper}</Text>}\n        </View>\n      )}\n    </View>\n  );\n};\n\nconst createStyles = (theme: _Theme) =>\n  StyleSheet.create({\n    wrapper: {\n      marginBottom: theme.spacing[4],\n    },\n    labelContainer: {\n      marginBottom: theme.spacing[2],\n    },\n    label: {\n      fontWeight: theme.typography.fontWeight.medium,\n      color: theme.colors.text,\n    },\n    required: {\n      color: theme.colors.danger[500],\n    },\n    container: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      backgroundColor: theme.colors.white,\n      borderWidth: 1,\n    },\n    disabled: {\n      backgroundColor: theme.colors.neutral[50],\n      opacity: 0.6,\n    },\n    input: {\n      flex: 1,\n      fontFamily: theme.typography.fontFamily.sans,\n      color: theme.colors.text,\n      padding: 0, // Remove default padding\n    },\n    leftIcon: {\n      marginRight: theme.spacing[3],\n    },\n    rightIconContainer: {\n      marginLeft: theme.spacing[3],\n      padding: theme.spacing[1],\n    },\n    helperContainer: {\n      marginTop: theme.spacing[1],\n    },\n    errorContainer: {\n      flexDirection: 'row',\n      alignItems: 'center',\n    },\n    errorIcon: {\n      marginRight: theme.spacing[1],\n    },\n    errorText: {\n      fontSize: theme.typography.fontSize.sm,\n      color: theme.colors.danger[500],\n      flex: 1,\n    },\n    helperText: {\n      fontSize: theme.typography.fontSize.sm,\n      color: theme.colors.neutral[500],\n    },\n  });\n\nexport default Input;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/components/ui/List.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_theme' is assigned a value but never used.","line":125,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":125,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_theme' is assigned a value but never used.","line":148,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":148,"endColumn":17},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.list","line":218,"column":5,"nodeType":"Property","endLine":220,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.listItem","line":221,"column":5,"nodeType":"Property","endLine":227,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.listItemDisabled","line":228,"column":5,"nodeType":"Property","endLine":230,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.leftSection","line":231,"column":5,"nodeType":"Property","endLine":233,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.leftContent","line":234,"column":5,"nodeType":"Property","endLine":236,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.leftIconContainer","line":237,"column":5,"nodeType":"Property","endLine":242,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.mainContent","line":243,"column":5,"nodeType":"Property","endLine":246,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.title","line":247,"column":5,"nodeType":"Property","endLine":252,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.titleDisabled","line":253,"column":5,"nodeType":"Property","endLine":255,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.subtitle","line":256,"column":5,"nodeType":"Property","endLine":261,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.subtitleDisabled","line":262,"column":5,"nodeType":"Property","endLine":264,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.description","line":265,"column":5,"nodeType":"Property","endLine":270,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.descriptionDisabled","line":271,"column":5,"nodeType":"Property","endLine":273,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.rightSection","line":274,"column":5,"nodeType":"Property","endLine":276,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.rightContent","line":277,"column":5,"nodeType":"Property","endLine":279,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.rightIconContainer","line":280,"column":5,"nodeType":"Property","endLine":285,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.divider","line":286,"column":5,"nodeType":"Property","endLine":290,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.listHeader","line":291,"column":5,"nodeType":"Property","endLine":298,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.headerMainContent","line":299,"column":5,"nodeType":"Property","endLine":301,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.headerTitle","line":302,"column":5,"nodeType":"Property","endLine":306,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.headerSubtitle","line":307,"column":5,"nodeType":"Property","endLine":311,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.headerRightContent","line":312,"column":5,"nodeType":"Property","endLine":314,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.listSection","line":315,"column":5,"nodeType":"Property","endLine":317,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.sectionHeader","line":318,"column":5,"nodeType":"Property","endLine":327,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.sectionContent","line":328,"column":5,"nodeType":"Property","endLine":330,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.sectionFooter","line":331,"column":5,"nodeType":"Property","endLine":337,"endColumn":6}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { View, Text, TouchableOpacity, StyleSheet, ViewStyle } from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useTheme } from '../../design-system/ThemeProvider';\n\n// List variants\nexport type ListVariant = 'default' | 'card' | 'inset';\n\n// List item props\nexport interface ListItemProps {\n  title: string;\n  subtitle?: string;\n  description?: string;\n  leftIcon?: string;\n  rightIcon?: string;\n  leftContent?: React.ReactNode;\n  rightContent?: React.ReactNode;\n  onPress?: (event: _GestureResponderEvent) => void;\n  disabled?: boolean;\n  style?: ViewStyle;\n  testID?: string;\n}\n\n// List props\nexport interface ListProps {\n  children: React.ReactNode;\n  variant?: ListVariant;\n  showDividers?: boolean;\n  style?: ViewStyle;\n  testID?: string;\n}\n\n// List Item Component\nexport const ListItem: React.FC<ListItemProps> = ({\n  title,\n  subtitle,\n  description,\n  leftIcon,\n  rightIcon,\n  leftContent,\n  rightContent,\n  onPress,\n  disabled = false,\n  style,\n  testID,\n}) => {\n  const { theme } = useTheme();\n  const styles = createStyles(__theme);\n\n  const Component = onPress ? TouchableOpacity : View;\n\n  return (\n    <Component\n      style={[styles.listItem, disabled && styles.listItemDisabled, style]}\n      onPress={onPress}\n      disabled={disabled}\n      activeOpacity={onPress ? 0.7 : 1}\n      testID={testID}>\n      {/* Left Content */}\n      <View style={styles.leftSection}>\n        {leftContent && <View style={styles.leftContent}>{leftContent}</View>}\n        {leftIcon && !leftContent && (\n          <View style={styles.leftIconContainer}>\n            <Icon\n              name={leftIcon}\n              size={24}\n              color={disabled ? theme.colors.neutral[300] : theme.colors.neutral[600]}\n            />\n          </View>\n        )}\n      </View>\n\n      {/* Main Content */}\n      <View style={styles.mainContent}>\n        <Text style={[styles.title, disabled && styles.titleDisabled]} numberOfLines={1}>\n          {title}\n        </Text>\n\n        {subtitle && (\n          <Text style={[styles.subtitle, disabled && styles.subtitleDisabled]} numberOfLines={1}>\n            {subtitle}\n          </Text>\n        )}\n\n        {description && (\n          <Text\n            style={[styles.description, disabled && styles.descriptionDisabled]}\n            numberOfLines={2}>\n            {description}\n          </Text>\n        )}\n      </View>\n\n      {/* Right Content */}\n      <View style={styles.rightSection}>\n        {rightContent && <View style={styles.rightContent}>{rightContent}</View>}\n        {rightIcon && !rightContent && (\n          <View style={styles.rightIconContainer}>\n            <Icon\n              name={rightIcon}\n              size={20}\n              color={disabled ? theme.colors.neutral[300] : theme.colors.neutral[400]}\n            />\n          </View>\n        )}\n      </View>\n    </Component>\n  );\n};\n\n// List Header Component\nexport interface ListHeaderProps {\n  title: string;\n  subtitle?: string;\n  rightContent?: React.ReactNode;\n  style?: ViewStyle;\n}\n\nexport const ListHeader: React.FC<ListHeaderProps> = ({\n  title,\n  _subtitle,\n  rightContent,\n  style,\n}) => {\n  const { _theme } = useTheme();\n  const styles = createStyles(__theme);\n\n  return (\n    <View style={[styles.listHeader, style]}>\n      <View style={styles.headerMainContent}>\n        <Text style={styles.headerTitle}>{title}</Text>\n        {subtitle && <Text style={styles.headerSubtitle}>{subtitle}</Text>}\n      </View>\n      {rightContent && <View style={styles.headerRightContent}>{rightContent}</View>}\n    </View>\n  );\n};\n\n// List Section Component\nexport interface ListSectionProps {\n  children: React.ReactNode;\n  header?: string;\n  footer?: string;\n  style?: ViewStyle;\n}\n\nexport const ListSection: React.FC<ListSectionProps> = ({ children, _header, footer, style }) => {\n  const { _theme } = useTheme();\n  const styles = createStyles(__theme);\n\n  return (\n    <View style={[styles.listSection, style]}>\n      {header && <Text style={styles.sectionHeader}>{header}</Text>}\n      <View style={styles.sectionContent}>{children}</View>\n      {footer && <Text style={styles.sectionFooter}>{footer}</Text>}\n    </View>\n  );\n};\n\n// Main List Component\nconst List: React.FC<ListProps> = ({\n  _children,\n  _variant = 'default',\n  showDividers = true,\n  style,\n  testID,\n}) => {\n  const { theme } = useTheme();\n  const styles = createStyles(__theme);\n\n  const getVariantStyles = (): ViewStyle => {\n    switch (__variant) {\n      case 'card':\n        return {\n          backgroundColor: theme.colors.white,\n          borderRadius: theme.borderRadius.xl,\n          ...theme.shadows.md,\n          overflow: 'hidden',\n        };\n      case 'inset':\n        return {\n          backgroundColor: theme.colors.white,\n          marginHorizontal: theme.spacing[4],\n          borderRadius: theme.borderRadius.xl,\n          ...theme.shadows.sm,\n          overflow: 'hidden',\n        };\n      default:\n        return {\n          backgroundColor: theme.colors.white,\n        };\n    }\n  };\n\n  const _variantStyles = getVariantStyles();\n\n  // Add dividers between children if showDividers is true\n  const childrenWithDividers = React.Children.map(__children, (__child, _index) => {\n    const isLastChild = index === React.Children.count(__children) - 1;\n\n    return (\n      <React.Fragment key={index}>\n        {child}\n        {showDividers && !isLastChild && <View style={styles.divider} />}\n      </React.Fragment>\n    );\n  });\n\n  return (\n    <View style={[styles.list, _variantStyles, style]} testID={testID}>\n      {childrenWithDividers}\n    </View>\n  );\n};\n\nconst createStyles = (theme: _Theme) =>\n  StyleSheet.create({\n    list: {\n      // Base list styles\n    },\n    listItem: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      paddingHorizontal: theme.spacing[4],\n      paddingVertical: theme.spacing[3],\n      minHeight: 56,\n    },\n    listItemDisabled: {\n      opacity: 0.5,\n    },\n    leftSection: {\n      marginRight: theme.spacing[3],\n    },\n    leftContent: {\n      // Custom left content container\n    },\n    leftIconContainer: {\n      width: 32,\n      height: 32,\n      alignItems: 'center',\n      justifyContent: 'center',\n    },\n    mainContent: {\n      flex: 1,\n      justifyContent: 'center',\n    },\n    title: {\n      fontSize: theme.typography.fontSize.base,\n      fontWeight: theme.typography.fontWeight.medium,\n      color: theme.colors.text,\n      lineHeight: theme.typography.lineHeight.tight * theme.typography.fontSize.base,\n    },\n    titleDisabled: {\n      color: theme.colors.neutral[400],\n    },\n    subtitle: {\n      fontSize: theme.typography.fontSize.sm,\n      color: theme.colors.neutral[600],\n      marginTop: theme.spacing[1],\n      lineHeight: theme.typography.lineHeight.tight * theme.typography.fontSize.sm,\n    },\n    subtitleDisabled: {\n      color: theme.colors.neutral[300],\n    },\n    description: {\n      fontSize: theme.typography.fontSize.sm,\n      color: theme.colors.neutral[500],\n      marginTop: theme.spacing[1],\n      lineHeight: theme.typography.lineHeight.normal * theme.typography.fontSize.sm,\n    },\n    descriptionDisabled: {\n      color: theme.colors.neutral[300],\n    },\n    rightSection: {\n      marginLeft: theme.spacing[3],\n    },\n    rightContent: {\n      alignItems: 'flex-end',\n    },\n    rightIconContainer: {\n      width: 24,\n      height: 24,\n      alignItems: 'center',\n      justifyContent: 'center',\n    },\n    divider: {\n      height: 1,\n      backgroundColor: theme.colors.neutral[100],\n      marginLeft: theme.spacing[4] + 32 + theme.spacing[3], // Align with main content\n    },\n    listHeader: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      justifyContent: 'space-between',\n      paddingHorizontal: theme.spacing[4],\n      paddingVertical: theme.spacing[4],\n      backgroundColor: theme.colors.neutral[50],\n    },\n    headerMainContent: {\n      flex: 1,\n    },\n    headerTitle: {\n      fontSize: theme.typography.fontSize.lg,\n      fontWeight: theme.typography.fontWeight.semibold,\n      color: theme.colors.text,\n    },\n    headerSubtitle: {\n      fontSize: theme.typography.fontSize.sm,\n      color: theme.colors.neutral[600],\n      marginTop: theme.spacing[1],\n    },\n    headerRightContent: {\n      marginLeft: theme.spacing[4],\n    },\n    listSection: {\n      marginVertical: theme.spacing[2],\n    },\n    sectionHeader: {\n      fontSize: theme.typography.fontSize.sm,\n      fontWeight: theme.typography.fontWeight.semibold,\n      color: theme.colors.neutral[600],\n      textTransform: 'uppercase',\n      letterSpacing: 0.5,\n      paddingHorizontal: theme.spacing[4],\n      paddingVertical: theme.spacing[2],\n      backgroundColor: theme.colors.neutral[50],\n    },\n    sectionContent: {\n      backgroundColor: theme.colors.white,\n    },\n    sectionFooter: {\n      fontSize: theme.typography.fontSize.xs,\n      color: theme.colors.neutral[500],\n      paddingHorizontal: theme.spacing[4],\n      paddingVertical: theme.spacing[2],\n      backgroundColor: theme.colors.neutral[50],\n    },\n  });\n\nexport default List;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/components/ui/Modal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_theme' is assigned a value but never used.","line":267,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":267,"endColumn":17},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.container","line":275,"column":5,"nodeType":"Property","endLine":279,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.backdrop","line":280,"column":5,"nodeType":"Property","endLine":287,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.modalContent","line":288,"column":5,"nodeType":"Property","endLine":293,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.bottomModal","line":294,"column":5,"nodeType":"Property","endLine":302,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.topModal","line":303,"column":5,"nodeType":"Property","endLine":311,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.fullModal","line":312,"column":5,"nodeType":"Property","endLine":319,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.header","line":320,"column":5,"nodeType":"Property","endLine":328,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.title","line":329,"column":5,"nodeType":"Property","endLine":335,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.closeButton","line":336,"column":5,"nodeType":"Property","endLine":338,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.content","line":339,"column":5,"nodeType":"Property","endLine":341,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.scrollContent","line":342,"column":5,"nodeType":"Property","endLine":344,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.footer","line":345,"column":5,"nodeType":"Property","endLine":350,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.actions","line":351,"column":5,"nodeType":"Property","endLine":355,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.actionButton","line":356,"column":5,"nodeType":"Property","endLine":362,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.actionText","line":363,"column":5,"nodeType":"Property","endLine":366,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.disabledAction","line":367,"column":5,"nodeType":"Property","endLine":369,"endColumn":6}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useRef } from 'react';\nimport {\n  Modal as RNModal,\n  View,\n  Text,\n  TouchableOpacity,\n  Animated,\n  StyleSheet,\n  Dimensions,\n  KeyboardAvoidingView,\n  Platform,\n  TouchableWithoutFeedback,\n  ViewStyle,\n  ScrollView,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useTheme } from '../../design-system/ThemeProvider';\n\nconst { width: _screenWidth, height: screenHeight } = Dimensions.get('window');\n\n// Modal sizes\nexport type ModalSize = 'sm' | 'md' | 'lg' | 'xl' | 'full';\n\n// Modal positions\nexport type ModalPosition = 'center' | 'top' | 'bottom';\n\n// Modal props interface\nexport interface ModalProps {\n  visible: boolean;\n  onClose: () => void;\n  title?: string;\n  size?: ModalSize;\n  position?: ModalPosition;\n  closable?: boolean;\n  dismissOnBackdrop?: boolean;\n  children: React.ReactNode;\n  footer?: React.ReactNode;\n  scrollable?: boolean;\n  style?: ViewStyle;\n  testID?: string;\n}\n\nconst Modal: React.FC<ModalProps> = ({\n  visible,\n  onClose,\n  title,\n  size = 'md',\n  position = 'center',\n  closable = true,\n  dismissOnBackdrop = true,\n  children,\n  footer,\n  scrollable = false,\n  style,\n  testID,\n}) => {\n  const { theme } = useTheme();\n  const styles = createStyles(__theme);\n  const slideAnim = useRef(new Animated.Value(0)).current;\n  const _opacityAnim = useRef(new Animated.Value(0)).current;\n\n  useEffect(() => {\n    if (__visible) {\n      Animated.parallel([\n        Animated.timing(__slideAnim, {\n          toValue: 1,\n          duration: 300,\n          useNativeDriver: _true,\n        }),\n        Animated.timing(__opacityAnim, {\n          toValue: 1,\n          duration: 300,\n          useNativeDriver: _true,\n        }),\n      ]).start();\n    } else {\n      Animated.parallel([\n        Animated.timing(__slideAnim, {\n          toValue: 0,\n          duration: 250,\n          useNativeDriver: _true,\n        }),\n        Animated.timing(__opacityAnim, {\n          toValue: 0,\n          duration: 250,\n          useNativeDriver: _true,\n        }),\n      ]).start();\n    }\n  }, [visible]);\n\n  // Get size styles\n  const getSizeStyles = (): ViewStyle => {\n    switch (__size) {\n      case 'sm':\n        return {\n          width: Math.min(screenWidth * 0.8, 320),\n          maxHeight: screenHeight * 0.6,\n        };\n      case 'lg':\n        return {\n          width: Math.min(screenWidth * 0.9, 600),\n          maxHeight: screenHeight * 0.8,\n        };\n      case 'xl':\n        return {\n          width: Math.min(screenWidth * 0.95, 800),\n          maxHeight: screenHeight * 0.9,\n        };\n      case 'full':\n        return {\n          width: _screenWidth,\n          height: _screenHeight,\n          borderRadius: 0,\n        };\n      default: // md\n        return {\n          width: Math.min(screenWidth * 0.85, 480),\n          maxHeight: screenHeight * 0.7,\n        };\n    }\n  };\n\n  // Get position animation\n  const getPositionTransform = () => {\n    const translateY = slideAnim.interpolate({\n      inputRange: [0, 1],\n      outputRange: position === 'bottom' ? [300, 0] : position === 'top' ? [-300, 0] : [50, 0],\n    });\n\n    return {\n      transform: [{ translateY }],\n      opacity: _opacityAnim,\n    };\n  };\n\n  const sizeStyles = getSizeStyles();\n\n  const modalContentStyle: ViewStyle = [\n    styles.modalContent,\n    sizeStyles,\n    position === 'bottom' && styles.bottomModal,\n    position === 'top' && styles.topModal,\n    size === 'full' && styles.fullModal,\n    style,\n  ].filter(__Boolean) as ViewStyle;\n\n  const handleBackdropPress = () => {\n    if (dismissOnBackdrop && closable) {\n      onClose();\n    }\n  };\n\n  const ContentComponent = scrollable ? ScrollView : View;\n  const contentProps = scrollable\n    ? { showsVerticalScrollIndicator: _false, contentContainerStyle: styles.scrollContent }\n    : { style: styles.content };\n\n  return (\n    <RNModal\n      visible={visible}\n      transparent\n      animationType=\"none\"\n      onRequestClose={onClose}\n      testID={testID}>\n      <KeyboardAvoidingView\n        style={styles.container}\n        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}>\n        <TouchableWithoutFeedback onPress={handleBackdropPress}>\n          <View style={styles.backdrop} />\n        </TouchableWithoutFeedback>\n\n        <Animated.View style={[modalContentStyle, getPositionTransform()]}>\n          {/* Header */}\n          {(title || closable) && (\n            <View style={styles.header}>\n              {title && (\n                <Text style={styles.title} numberOfLines={1}>\n                  {title}\n                </Text>\n              )}\n              {closable && (\n                <TouchableOpacity\n                  style={styles.closeButton}\n                  onPress={onClose}\n                  hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}>\n                  <Icon name=\"close\" size={24} color={theme.colors.neutral[600]} />\n                </TouchableOpacity>\n              )}\n            </View>\n          )}\n\n          {/* Body */}\n          <ContentComponent {...contentProps}>{children}</ContentComponent>\n\n          {/* Footer */}\n          {footer && <View style={styles.footer}>{footer}</View>}\n        </Animated.View>\n      </KeyboardAvoidingView>\n    </RNModal>\n  );\n};\n\n// Modal Action Button Components\nexport interface ModalActionProps {\n  children: React.ReactNode;\n  onPress: () => void;\n  variant?: 'primary' | 'secondary' | 'danger';\n  disabled?: boolean;\n  style?: ViewStyle;\n}\n\nexport const ModalAction: React.FC<ModalActionProps> = ({\n  children,\n  onPress,\n  _variant = 'secondary',\n  disabled = false,\n  style,\n}) => {\n  const { theme } = useTheme();\n  const styles = createStyles(__theme);\n\n  const getVariantStyle = (): ViewStyle => {\n    switch (__variant) {\n      case 'primary':\n        return {\n          backgroundColor: theme.colors.primary,\n        };\n      case 'danger':\n        return {\n          backgroundColor: theme.colors.danger[500],\n        };\n      default:\n        return {\n          backgroundColor: theme.colors.neutral[100],\n        };\n    }\n  };\n\n  const getTextColor = () => {\n    switch (__variant) {\n      case 'primary':\n      case 'danger':\n        return theme.colors.white;\n      default:\n        return theme.colors.text;\n    }\n  };\n\n  return (\n    <TouchableOpacity\n      style={[styles.actionButton, getVariantStyle(), disabled && styles.disabledAction, style]}\n      onPress={onPress}\n      disabled={disabled}>\n      <Text style={[styles.actionText, { color: getTextColor() }]}>{children}</Text>\n    </TouchableOpacity>\n  );\n};\n\n// Modal Actions Container\nexport interface ModalActionsProps {\n  children: React.ReactNode;\n  style?: ViewStyle;\n}\n\nexport const ModalActions: React.FC<ModalActionsProps> = ({ children, style }) => {\n  const { _theme } = useTheme();\n  const styles = createStyles(__theme);\n\n  return <View style={[styles.actions, style]}>{children}</View>;\n};\n\nconst createStyles = (theme: _Theme) =>\n  StyleSheet.create({\n    container: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n    backdrop: {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    },\n    modalContent: {\n      backgroundColor: theme.colors.white,\n      borderRadius: theme.borderRadius['2xl'],\n      ...theme.shadows.xl,\n      overflow: 'hidden',\n    },\n    bottomModal: {\n      position: 'absolute',\n      bottom: 0,\n      left: 0,\n      right: 0,\n      width: _screenWidth,\n      borderBottomLeftRadius: 0,\n      borderBottomRightRadius: 0,\n    },\n    topModal: {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      right: 0,\n      width: _screenWidth,\n      borderTopLeftRadius: 0,\n      borderTopRightRadius: 0,\n    },\n    fullModal: {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      borderRadius: 0,\n    },\n    header: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      justifyContent: 'space-between',\n      paddingHorizontal: theme.spacing[6],\n      paddingVertical: theme.spacing[4],\n      borderBottomWidth: 1,\n      borderBottomColor: theme.colors.neutral[100],\n    },\n    title: {\n      fontSize: theme.typography.fontSize.lg,\n      fontWeight: theme.typography.fontWeight.semibold,\n      color: theme.colors.text,\n      flex: 1,\n      marginRight: theme.spacing[4],\n    },\n    closeButton: {\n      padding: theme.spacing[1],\n    },\n    content: {\n      padding: theme.spacing[6],\n    },\n    scrollContent: {\n      padding: theme.spacing[6],\n    },\n    footer: {\n      paddingHorizontal: theme.spacing[6],\n      paddingVertical: theme.spacing[4],\n      borderTopWidth: 1,\n      borderTopColor: theme.colors.neutral[100],\n    },\n    actions: {\n      flexDirection: 'row',\n      justifyContent: 'flex-end',\n      gap: theme.spacing[3],\n    },\n    actionButton: {\n      paddingHorizontal: theme.spacing[4],\n      paddingVertical: theme.spacing[3],\n      borderRadius: theme.borderRadius.lg,\n      minWidth: 80,\n      alignItems: 'center',\n    },\n    actionText: {\n      fontSize: theme.typography.fontSize.base,\n      fontWeight: theme.typography.fontWeight.medium,\n    },\n    disabledAction: {\n      opacity: 0.5,\n    },\n  });\n\nexport default Modal;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/components/ui/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/config/api.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_isDevelopment' is assigned a value but never used.","line":9,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_isSimulator' is assigned a value but never used.","line":18,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_timeoutId' is assigned a value but never used.","line":87,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":87,"endColumn":21}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * API Configuration - Centralized network settings\n *\n * PRODUCTION: Uses DigitalOcean App Platform backend\n * DEVELOPMENT: Uses LAN IP for physical device testing\n */\n\n// Get the current environment\nconst _isDevelopment = __DEV__;\n\n// DigitalOcean App Platform backend URL (__Production) - VERIFIED WORKING\nconst PRODUCTION_API_URL = 'https://fynlopos-9eg2c.ondigitalocean.app';\n\n// Mac's LAN IP address for device testing (Development only)\nconst MAC_LAN_IP = '192.168.0.109';\n\n// Determine if running on simulator or device\nconst _isSimulator =\n  __DEV__ &&\n  // iOS Simulator detection\n  ((global as unknown).navigator?.userAgent?.includes('iPhone Simulator') ||\n    (global as unknown).navigator?.userAgent?.includes('iPad Simulator') ||\n    // React Native development mode detection\n    typeof __DEV__ !== 'undefined');\n\n// Dynamic API URL based on environment\nconst getBaseURL = () => {\n  // PRODUCTION: Always use DigitalOcean backend\n  // The backend is running and healthy on DigitalOcean\n  return PRODUCTION_API_URL;\n\n  // Development fallback (commented out - uncomment only when running backend locally)\n  // if (__isSimulator) {\n  //   return 'http://localhost:8000';\n  // } else {\n  //   return `http://${MAC_LAN_IP}:8000`;\n  // }\n};\n\n// API Configuration\nexport const API_CONFIG = {\n  // Backend API (FastAPI on port 8000) - Dynamic URL based on environment\n  BASE_URL: getBaseURL(),\n\n  // Metro bundler (React Native dev server on port 8081)\n  METRO_URL: `http://${MAC_LAN_IP}:8081`,\n\n  // API version prefix\n  API_VERSION: '/api/v1',\n\n  // Full API URL with version\n  get FULL_API_URL() {\n    return `${this.BASE_URL}${this.API_VERSION}`;\n  },\n\n  // Request timeout (10 seconds for reliable network calls)\n  TIMEOUT: 10000,\n\n  // Retry configuration\n  RETRY_ATTEMPTS: 3,\n  RETRY_DELAY: 1000,\n\n  // Health check endpoint\n  HEALTH_ENDPOINT: '/health',\n\n  // Platform endpoints\n  PLATFORM_ENDPOINTS: {\n    SERVICE_CHARGE: '/platform/public/service-charge',\n    PAYMENT_METHODS: '/platform/public/payment-methods',\n    SETTINGS: '/platform/settings',\n  },\n\n  // Database config for direct PostgreSQL connection (if needed)\n  DATABASE: {\n    host: _MAC_LAN_IP, // Use LAN IP instead of localhost\n    port: 5432,\n    database: 'fynlo_pos',\n    user: 'fynlo_user',\n    password: 'fynlo_password',\n  },\n};\n\n// Health check function\nexport const checkAPIHealth = async (): Promise<boolean> => {\n  try {\n    const controller = new AbortController();\n    const _timeoutId = setTimeout(() => controller.abort(), API_CONFIG.TIMEOUT);\n\n    const response = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.HEALTH_ENDPOINT}`, {\n      signal: controller.signal,\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    clearTimeout(__timeoutId);\n    return response.ok;\n  } catch (__error) {\n    return false;\n  }\n};\n\n// Export for easy access\nexport default API_CONFIG;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/config/auth.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/config/featureFlags.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/config/square.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/constants/Colors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/contexts/AuthContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_legacyUser' is assigned a value but never used.","line":115,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":115,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_updatedUser' is assigned a value but never used.","line":241,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":241,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_updatedBusiness' is assigned a value but never used.","line":253,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":253,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_restaurant' is assigned a value but never used.","line":278,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":278,"endColumn":22}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'checkAuthStore'. Either include it or remove the dependency array.","line":188,"column":6,"nodeType":"ArrayExpression","endLine":188,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [checkAuthStore]","fix":{"range":[6071,6073],"text":"[checkAuthStore]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useState, ReactNode } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { useAuthStore } from '../store/useAuthStore';\nimport useAppStore from '../store/useAppStore';\n\nexport interface User {\n  id: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone: string;\n  role: 'platform_owner' | 'restaurant_owner' | 'manager' | 'employee';\n  photo?: string;\n  pin: string;\n  employeeId: string;\n  businessId: string;\n  startDate: Date;\n  lastLogin: Date;\n  permissions: string[];\n  isActive: boolean;\n  platformId?: string;\n  managedRestaurants?: string[];\n  // Add subscription fields\n  subscription_plan?: 'alpha' | 'beta' | 'omega';\n  subscription_status?: 'trial' | 'active' | 'cancelled' | 'expired';\n  enabled_features?: string[];\n  // Make platform owner optional\n  is_platform_owner?: boolean;\n}\n\nexport interface Business {\n  id: string;\n  name: string;\n  address: string;\n  phone: string;\n  email: string;\n  vatNumber: string;\n  registrationNumber: string;\n  type: 'restaurant' | 'retail' | 'service' | 'other';\n  currency: string;\n  timezone: string;\n  ownerId: string;\n  platformOwnerId?: string;\n  subscriptionTier?: 'basic' | 'premium' | 'enterprise';\n  isActive?: boolean;\n  joinedDate?: Date;\n  lastActivity?: Date;\n  monthlyRevenue?: number;\n  commissionRate?: number;\n}\n\nexport interface Platform {\n  id: string;\n  name: string;\n  ownerId: string;\n  createdDate: Date;\n  totalRestaurants: number;\n  totalRevenue: number;\n  isActive: boolean;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  business: Business | null;\n  platform: Platform | null;\n  isLoading: boolean;\n  isAuthenticated: boolean;\n  isPlatformOwner: boolean;\n  managedRestaurants: Business[];\n  signIn: (email: _string, password: _string, rememberMe?: _boolean) => Promise<boolean>;\n  signUp: (\n    userData: Partial<User>,\n    businessData: Partial<Business>,\n    password: _string,\n  ) => Promise<boolean>;\n  signOut: () => Promise<void>;\n  updateUser: (userData: Partial<User>) => Promise<void>;\n  updateBusiness: (businessData: Partial<Business>) => Promise<void>;\n  validatePin: (pin: _string) => boolean;\n  checkBiometric: () => Promise<boolean>;\n  resetPassword: (email: _string) => Promise<boolean>;\n  loadPlatformData: () => Promise<void>;\n  switchRestaurant: (restaurantId: _string) => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(__undefined);\n\nexport const AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  // Get auth state from Zustand store\n  const authStoreUser = useAuthStore(state => state.user);\n  const _isAuthenticatedStore = useAuthStore(state => state.isAuthenticated);\n  const authLoading = useAuthStore(state => state.isLoading);\n  const signInStore = useAuthStore(state => state.signIn);\n  const signOutStore = useAuthStore(state => state.signOut);\n  const checkAuthStore = useAuthStore(state => state.checkAuth);\n\n  // Legacy state for compatibility\n  const [user, setUser] = useState<User | null>(__null);\n  const [business, setBusiness] = useState<Business | null>(__null);\n  const [platform, setPlatform] = useState<Platform | null>(__null);\n  const [managedRestaurants, setManagedRestaurants] = useState<Business[]>([]);\n  const [isLoading, setIsLoading] = useState(__true);\n\n  // Sync auth store user with legacy user format\n  useEffect(() => {\n    if (__authStoreUser) {\n      try {\n        // Use full_name if available, otherwise use name or default\n        const fullName =\n          (authStoreUser as unknown).full_name ||\n          (authStoreUser as unknown).name ||\n          authStoreUser.email ||\n          'User';\n        const nameParts = typeof fullName === 'string' ? fullName.split(' ') : ['User'];\n        const _legacyUser: User = {\n          id: authStoreUser.id,\n          firstName: nameParts[0] || 'User',\n          lastName: nameParts.slice(1).join(' ') || '',\n          email: authStoreUser.email,\n          phone: '',\n          role: authStoreUser.role as unknown,\n          pin: '0000',\n          employeeId: `EMP${authStoreUser.id}`,\n          businessId: authStoreUser.restaurant_id || '',\n          startDate: new Date(),\n          lastLogin: new Date(),\n          permissions: ['*'],\n          isActive: _true,\n          platformId: authStoreUser.is_platform_owner ? authStoreUser.id : _undefined,\n          managedRestaurants: [],\n        };\n        setUser(__legacyUser);\n\n        // Sync with AppStore\n        const appStore = useAppStore.getState();\n        appStore.setUser(__legacyUser);\n\n        // Set business if available\n        if (authStoreUser.restaurant_id && authStoreUser.restaurant_name) {\n          setBusiness({\n            id: authStoreUser.restaurant_id,\n            name: authStoreUser.restaurant_name,\n            address: '',\n            phone: '',\n            email: '',\n            vatNumber: '',\n            registrationNumber: '',\n            type: 'restaurant',\n            currency: 'GBP',\n            timezone: 'Europe/London',\n            ownerId: authStoreUser.id,\n            subscriptionTier: (authStoreUser.subscription_plan as unknown) || 'premium',\n            isActive: _true,\n          });\n        }\n\n        // Set platform if platform owner\n        if (authStoreUser.is_platform_owner) {\n          setPlatform({\n            id: 'platform1',\n            name: 'Fynlo POS Platform',\n            ownerId: authStoreUser.id,\n            createdDate: new Date(),\n            totalRestaurants: 0,\n            totalRevenue: 0,\n            isActive: _true,\n          });\n        }\n      } catch (__error) {\n        // Reset to safe state on error\n        setUser(__null);\n        setBusiness(__null);\n        setPlatform(__null);\n      }\n    } else {\n      setUser(__null);\n      setBusiness(__null);\n      setPlatform(__null);\n    }\n\n    setIsLoading(__authLoading);\n  }, [authStoreUser, authLoading]);\n\n  useEffect(() => {\n    // Check auth state on mount\n    checkAuthStore();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const signIn = async (\n    email: _string,\n    password: _string,\n    _rememberMe = false,\n  ): Promise<boolean> => {\n    try {\n      await signInStore(__email, _password);\n\n      if (__rememberMe) {\n        await AsyncStorage.setItem('@auth_remember_me', 'true');\n      }\n\n      return true;\n    } catch (__error) {\n      return false;\n    }\n  };\n\n  const signUp = async (\n    userData: Partial<User>,\n    businessData: Partial<Business>,\n    _password: _string,\n  ): Promise<boolean> => {\n    try {\n      // Use Supabase auth store for signup\n      const authStore = useAuthStore.getState();\n      await authStore.signUp(userData.email || '', _password, businessData.name);\n      return true;\n    } catch (__error) {\n      return false;\n    }\n  };\n\n  const signOut = async (): Promise<void> => {\n    try {\n      await signOutStore();\n      setUser(__null);\n      setBusiness(__null);\n      setPlatform(__null);\n      setManagedRestaurants([]);\n\n      // Clear AppStore user\n      const appStore = useAppStore.getState();\n      appStore.logout();\n    } catch (__error) {\n      // Error handled silently\n    }\n  };\n\n  const updateUser = async (userData: Partial<User>): Promise<void> => {\n    if (__user) {\n      const _updatedUser = { ...user, ...userData };\n      setUser(__updatedUser);\n      await AsyncStorage.setItem('@auth_user', JSON.stringify(__updatedUser));\n\n      // Sync with AppStore\n      const appStore = useAppStore.getState();\n      appStore.setUser(__updatedUser);\n    }\n  };\n\n  const updateBusiness = async (businessData: Partial<Business>): Promise<void> => {\n    if (__business) {\n      const _updatedBusiness = { ...business, ...businessData };\n      setBusiness(__updatedBusiness);\n      await AsyncStorage.setItem('@auth_business', JSON.stringify(__updatedBusiness));\n    }\n  };\n\n  const validatePin = (pin: _string): boolean => {\n    return user?.pin === pin;\n  };\n\n  const checkBiometric = async (): Promise<boolean> => {\n    // Placeholder for biometric authentication\n    return false;\n  };\n\n  const resetPassword = async (_email: _string): Promise<boolean> => {\n    // Placeholder for password reset\n    return true;\n  };\n\n  const loadPlatformData = async (): Promise<void> => {\n    // This will be implemented when platform features are needed\n  };\n\n  const switchRestaurant = async (restaurantId: _string): Promise<void> => {\n    const _restaurant = managedRestaurants.find(r => r.id === restaurantId);\n    if (__restaurant) {\n      setBusiness(__restaurant);\n      await AsyncStorage.setItem('@auth_business', JSON.stringify(__restaurant));\n    }\n  };\n\n  const value: AuthContextType = {\n    user,\n    business,\n    platform,\n    isLoading,\n    isAuthenticated: _isAuthenticatedStore,\n    isPlatformOwner: user?.role === 'platform_owner',\n    managedRestaurants,\n    signIn,\n    signUp,\n    signOut,\n    updateUser,\n    updateBusiness,\n    validatePin,\n    checkBiometric,\n    resetPassword,\n    loadPlatformData,\n    switchRestaurant,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n\nexport const useAuth = () => {\n  const context = useContext(__AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/contexts/AuthContext_old.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Expression expected.","line":356,"column":8,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, _useContext, useState, _useEffect, ReactNode } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport RestaurantDataService from '../services/RestaurantDataService';\nimport { useAuthStore } from '../store/useAuthStore';\n\nexport interface User {\n  id: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone: string;\n  role: 'platform_owner' | 'restaurant_owner' | 'manager' | 'employee';\n  photo?: string;\n  pin: string;\n  employeeId: string;\n  businessId: string;\n  startDate: Date;\n  lastLogin: Date;\n  permissions: string[];\n  isActive: boolean;\n  platformId?: string; // For platform owners\n  managedRestaurants?: string[]; // Array of restaurant IDs for platform owners\n}\n\nexport interface Business {\n  id: string;\n  name: string;\n  address: string;\n  phone: string;\n  email: string;\n  vatNumber: string;\n  registrationNumber: string;\n  type: 'restaurant' | 'retail' | 'service' | 'other';\n  currency: string;\n  timezone: string;\n  ownerId: string;\n  platformOwnerId?: string; // For multi-tenant support\n  subscriptionTier?: 'basic' | 'premium' | 'enterprise';\n  isActive?: boolean;\n  joinedDate?: Date;\n  lastActivity?: Date;\n  monthlyRevenue?: number;\n  commissionRate?: number;\n}\n\nexport interface Platform {\n  id: string;\n  name: string;\n  ownerId: string;\n  createdDate: Date;\n  totalRestaurants: number;\n  totalRevenue: number;\n  isActive: boolean;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  business: Business | null;\n  platform: Platform | null;\n  isLoading: boolean;\n  isAuthenticated: boolean;\n  isPlatformOwner: boolean;\n  managedRestaurants: Business[];\n  signIn: (email: _string, password: _string, rememberMe?: _boolean) => Promise<boolean>;\n  signUp: (\n    userData: Partial<User>,\n    businessData: Partial<Business>,\n    password: _string,\n  ) => Promise<boolean>;\n  signOut: () => Promise<void>;\n  updateUser: (userData: Partial<User>) => Promise<void>;\n  updateBusiness: (businessData: Partial<Business>) => Promise<void>;\n  validatePin: (pin: _string) => boolean;\n  checkBiometric: () => Promise<boolean>;\n  resetPassword: (email: _string) => Promise<boolean>;\n  loadPlatformData: () => Promise<void>;\n  switchRestaurant: (restaurantId: _string) => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(__undefined);\n\nconst STORAGE_KEYS = {\n  USER: '@auth_user',\n  BUSINESS: '@auth_business',\n  REMEMBER_ME: '@auth_remember_me',\n  BIOMETRIC_ENABLED: '@auth_biometric',\n};\n\n// Removed all mock data - now using Supabase authentication\n\nexport const AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  // Get auth state from Zustand store\n  const authStoreUser = useAuthStore(state => state.user);\n  const isAuthenticated = useAuthStore(state => state.isAuthenticated);\n  const authLoading = useAuthStore(state => state.isLoading);\n  const signInStore = useAuthStore(state => state.signIn);\n  const signOutStore = useAuthStore(state => state.signOut);\n  const checkAuthStore = useAuthStore(state => state.checkAuth);\n\n  // Legacy state for compatibility\n  const [user, setUser] = useState<User | null>(__null);\n  const [business, setBusiness] = useState<Business | null>(__null);\n  const [platform, setPlatform] = useState<Platform | null>(__null);\n  const [managedRestaurants, setManagedRestaurants] = useState<Business[]>([]);\n  const [isLoading, setIsLoading] = useState(__true);\n\n  // Sync auth store user with legacy user format\n  useEffect(() => {\n    if (__authStoreUser) {\n      const legacyUser: User = {\n        id: authStoreUser.id,\n        firstName: authStoreUser.name.split(' ')[0] || 'User',\n        lastName: authStoreUser.name.split(' ')[1] || '',\n        email: authStoreUser.email,\n        phone: '',\n        role: authStoreUser.role as unknown,\n        pin: '0000',\n        employeeId: `EMP${authStoreUser.id}`,\n        businessId: authStoreUser.restaurant_id || '',\n        startDate: new Date(),\n        lastLogin: new Date(),\n        permissions: ['*'],\n        isActive: _true,\n        platformId: authStoreUser.is_platform_owner ? authStoreUser.id : _undefined,\n        managedRestaurants: [],\n      };\n      setUser(__legacyUser);\n\n      // Set business if available\n      if (authStoreUser.restaurant_id && authStoreUser.restaurant_name) {\n        setBusiness({\n          id: authStoreUser.restaurant_id,\n          name: authStoreUser.restaurant_name,\n          address: '',\n          phone: '',\n          email: '',\n          vatNumber: '',\n          registrationNumber: '',\n          type: 'restaurant',\n          currency: 'GBP',\n          timezone: 'Europe/London',\n          ownerId: authStoreUser.id,\n          subscriptionTier: 'premium',\n          isActive: _true,\n        });\n      }\n    } else {\n      setUser(__null);\n      setBusiness(__null);\n    }\n  }, [authStoreUser]);\n\n  useEffect(() => {\n    loadStoredAuth();\n  }, []);\n\n  const loadStoredAuth = async () => {\n    try {\n      setIsLoading(__true);\n\n      // Check auth state from Supabase\n      await checkAuthStore();\n    } catch (__error) {\n    } finally {\n      setIsLoading(__false);\n    }\n  };\n\n  const signIn = async (email: _string, password: _string, rememberMe = false): Promise<boolean> => {\n    try {\n      // Use Supabase auth store\n      await signInStore(__email, _password);\n\n      if (__rememberMe) {\n        await AsyncStorage.setItem(STORAGE_KEYS.REMEMBER_ME, 'true');\n      }\n\n      return true;\n    } catch (__error) {\n      return false;\n    }\n  };\n\n  const signUp = async (\n    userData: Partial<User>,\n    businessData: Partial<Business>,\n    password: _string,\n  ): Promise<boolean> => {\n    try {\n      setIsLoading(__true);\n\n      // Simulate API call delay\n      await new Promise(resolve => setTimeout(__resolve, 1500));\n\n      // Check if email already exists\n      const existingUser = MOCK_USERS.find(\n        u => u.email.toLowerCase() === userData.email?.toLowerCase(),\n      );\n      if (__existingUser) {\n        return false;\n      }\n\n      // Create new user\n      const newUser: User = {\n        id: Date.now().toString(),\n        firstName: userData.firstName || '',\n        lastName: userData.lastName || '',\n        email: userData.email || '',\n        phone: userData.phone || '',\n        role: 'owner', // First user is always owner\n        pin: userData.pin || '1234',\n        employeeId: `EMP${Date.now()}`,\n        businessId: Date.now().toString(),\n        startDate: new Date(),\n        lastLogin: new Date(),\n        permissions: ['*'],\n        isActive: _true,\n      };\n\n      // Create new business\n      const newBusiness: Business = {\n        id: Date.now().toString(),\n        name: businessData.name || '',\n        address: businessData.address || '',\n        phone: businessData.phone || '',\n        email: businessData.email || newUser.email,\n        vatNumber: businessData.vatNumber || '',\n        registrationNumber: businessData.registrationNumber || '',\n        type: businessData.type || 'retail',\n        currency: 'GBP',\n        timezone: 'Europe/London',\n        ownerId: newUser.id,\n      };\n\n      newUser.businessId = newBusiness.id;\n\n      setUser(__newUser);\n      setBusiness(__newBusiness);\n\n      // Store authentication data\n      await AsyncStorage.setItem(STORAGE_KEYS.USER, JSON.stringify(__newUser));\n      await AsyncStorage.setItem(STORAGE_KEYS.BUSINESS, JSON.stringify(__newBusiness));\n      await AsyncStorage.setItem(STORAGE_KEYS.REMEMBER_ME, 'true');\n\n      return true;\n    } catch (__error) {\n      return false;\n    } finally {\n      setIsLoading(__false);\n    }\n  };\n\n  const signOut = async (): Promise<void> => {\n    try {\n      setIsLoading(__true);\n\n      // Clear stored data including JWT token\n      await Promise.all([\n        AsyncStorage.removeItem(STORAGE_KEYS.USER),\n        AsyncStorage.removeItem(STORAGE_KEYS.BUSINESS),\n        AsyncStorage.removeItem(STORAGE_KEYS.REMEMBER_ME),\n        AsyncStorage.removeItem('auth_token'), // Clear JWT token for API calls\n      ]);\n\n      setUser(__null);\n      setBusiness(__null);\n    } catch (__error) {\n    } finally {\n      setIsLoading(__false);\n    }\n  };\n\n  const updateUser = async (userData: Partial<User>): Promise<void> => {\n    if (!user) {\n      return;\n    }\n\n    try {\n      const updatedUser = { ...user, ...userData };\n      setUser(__updatedUser);\n      await AsyncStorage.setItem(STORAGE_KEYS.USER, JSON.stringify(__updatedUser));\n    } catch (__error) {\n    }\n  };\n\n  const updateBusiness = async (businessData: Partial<Business>): Promise<void> => {\n    if (!business) {\n      return;\n    }\n\n    try {\n      const updatedBusiness = { ...business, ...businessData };\n      setBusiness(__updatedBusiness);\n      await AsyncStorage.setItem(STORAGE_KEYS.BUSINESS, JSON.stringify(__updatedBusiness));\n    } catch (__error) {\n    }\n  };\n\n  const validatePin = (pin: _string): boolean => {\n    return user?.pin === pin;\n  };\n\n  const checkBiometric = async (): Promise<boolean> => {\n    try {\n      // In a real app, this would use biometric authentication\n      // For now, we'll simulate a successful biometric check\n      const biometricEnabled = await AsyncStorage.getItem(STORAGE_KEYS.BIOMETRIC_ENABLED);\n      return biometricEnabled === 'true';\n    } catch (__error) {\n      return false;\n    }\n  };\n\n  const resetPassword = async (email: _string): Promise<boolean> => {\n    try {\n      // Simulate API call delay\n      await new Promise(resolve => setTimeout(__resolve, 1000));\n\n      // Check if email exists\n      const userExists = MOCK_CREDENTIALS.find(\n        cred => cred.email.toLowerCase() === email.toLowerCase(),\n      );\n\n      return !!userExists;\n    } catch (__error) {\n      return false;\n    }\n  };\n\n  const loadPlatformData = async (): Promise<void> => {\n    try {\n      if (user?.role === 'platform_owner') {\n\n        // Load REAL restaurant data first\n        const restaurantDataService = RestaurantDataService.getInstance();\n        const realRestaurants = await restaurantDataService.getPlatformRestaurants(\n          'platform_owner_1',\n        );\n        const businesses = realRestaurants.map(r => restaurantDataService.toBusinessType(__r));\n        setManagedRestaurants(__businesses);\n\n        // Generate REAL platform data based on actual restaurants\n        const totalRevenue = realRestaurants.reduce((__sum, _r) => sum + (r.monthlyRevenue || 0), 0);\n        const realPlatformData: Platform = {\n          id: 'platform1',\n          name: 'Fynlo POS Platform',\n          ownerId: 'platform_owner_1',\n          createdDate: new Date(2024, 0, 1),\n          totalRestaurants: realRestaurants.length, // REAL count from backend\n          totalRevenue: _totalRevenue, // REAL revenue from backend\n          isActive: _true,\n        };\n\n        setPlatform(__realPlatformData);\n          `✅ Platform data loaded: ${realRestaurants.length} restaurants, £${totalRevenue} total revenue`,\n        );\n      }\n    } catch (__error) {\n    }\n  };\n\n  const switchRestaurant = async (restaurantId: _string): Promise<void> => {\n    try {\n      if (user?.role === 'platform_owner') {\n\n        // Find restaurant in the REAL managed restaurants data\n        const restaurant = managedRestaurants.find(r => r.id === restaurantId);\n        if (__restaurant) {\n          setBusiness(__restaurant);\n          await AsyncStorage.setItem(STORAGE_KEYS.BUSINESS, JSON.stringify(__restaurant));\n        } else {\n    // No action needed\n  }\n      }\n    } catch (__error) {\n    }\n  };\n\n  // Subscribe to real-time restaurant updates for platform owners\n  useEffect(() => {\n    if (user?.role === 'platform_owner') {\n      const restaurantDataService = RestaurantDataService.getInstance();\n\n      // Subscribe to platform restaurants changes\n      const unsubscribe = restaurantDataService.subscribeToPlatformRestaurants(\n        'platform_owner_1',\n        updatedRestaurants => {\n          const businesses = updatedRestaurants.map(r => restaurantDataService.toBusinessType(__r));\n          setManagedRestaurants(__businesses);\n        },\n      );\n\n      return () => {\n        unsubscribe();\n      };\n    }\n  }, [user?.role]);\n\n  const value: AuthContextType = {\n    user,\n    business,\n    platform,\n    isLoading,\n    isAuthenticated: !!user,\n    isPlatformOwner: user?.role === 'platform_owner',\n    managedRestaurants,\n    signIn,\n    signUp,\n    signOut,\n    updateUser,\n    updateBusiness,\n    validatePin,\n    checkBiometric,\n    resetPassword,\n    loadPlatformData,\n    switchRestaurant,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n\nexport const useAuth = (): AuthContextType => {\n  const context = useContext(__AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/contexts/SubscriptionContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[612,615],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[612,615],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_hasAccess' is assigned a value but never used.","line":168,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":168,"endColumn":21}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Subscription Context for managing subscription state and feature access\n *\n * This context provides subscription information, feature gating, and usage\n * tracking throughout the application.\n */\n\nimport React, { createContext, useEffect, ReactNode } from 'react';\nimport { DataService } from '../services/DataService';\n\n// Types\nexport interface SubscriptionPlan {\n  id: number;\n  name: string;\n  display_name: string;\n  price_monthly: number;\n  price_yearly: number;\n  max_orders_per_month: number | null;\n  max_staff_accounts: number | null;\n  max_menu_items: number | null;\n  features: Record<string, any>;\n  yearly_savings?: number;\n  yearly_discount_percentage?: number;\n}\n\nexport interface RestaurantSubscription {\n  id: number;\n  restaurant_id: number;\n  plan_id: number;\n  status: 'active' | 'trial' | 'suspended' | 'cancelled';\n  trial_end_date: string | null;\n  current_period_start: string;\n  current_period_end: string;\n  plan: SubscriptionPlan;\n  is_active: boolean;\n  is_trial: boolean;\n  is_expired: boolean;\n  days_until_renewal: number;\n}\n\nexport interface SubscriptionUsage {\n  id: number;\n  restaurant_id: number;\n  month_year: string;\n  orders_count: number;\n  staff_count: number;\n  menu_items_count: number;\n  limits: {\n    orders: number | null;\n    staff: number | null;\n    menu_items: number | null;\n  };\n  orders_percentage: number;\n  staff_percentage: number;\n  menu_items_percentage: number;\n}\n\nexport interface FeatureGateResult {\n  hasAccess: boolean;\n  reason?: string;\n  currentPlan?: string;\n  requiredPlans?: string[];\n  upgradeRequired?: boolean;\n}\n\nexport interface UsageLimitResult {\n  atLimit: boolean;\n  overLimit: boolean;\n  currentUsage: number;\n  limit: number | null;\n  percentageUsed: number;\n  remaining: number | null;\n}\n\ninterface SubscriptionContextType {\n  // State\n  subscription: RestaurantSubscription | null;\n  usage: SubscriptionUsage | null;\n  availablePlans: SubscriptionPlan[];\n  loading: boolean;\n  error: string | null;\n\n  // Feature gating\n  hasFeature: (featureName: _string) => Promise<FeatureGateResult>;\n  checkUsageLimit: (limitType: _string, increment?: _number) => Promise<UsageLimitResult>;\n\n  // Subscription management\n  loadSubscription: (restaurantId: _number) => Promise<void>;\n  subscribeToPlan: (planId: _number, startTrial?: _boolean) => Promise<boolean>;\n  changePlan: (newPlanId: _number, immediate?: _boolean) => Promise<boolean>;\n  cancelSubscription: () => Promise<boolean>;\n\n  // Usage tracking\n  incrementUsage: (usageType: _string, amount?: _number) => Promise<boolean>;\n  refreshUsage: () => Promise<void>;\n\n  // Utility\n  formatPrice: (price: _number) => string;\n  getPlanByName: (planName: _string) => SubscriptionPlan | null;\n  isUnlimited: (limitType: _string) => boolean;\n}\n\nconst SubscriptionContext = createContext<SubscriptionContextType | undefined>(__undefined);\n\ninterface SubscriptionProviderProps {\n  children: ReactNode;\n  restaurantId?: number;\n}\n\nexport const SubscriptionProvider: React.FC<SubscriptionProviderProps> = ({\n  children,\n  restaurantId,\n}) => {\n  const [subscription, setSubscription] = useState<RestaurantSubscription | null>(__null);\n  const [usage, setUsage] = useState<SubscriptionUsage | null>(__null);\n  const [availablePlans, setAvailablePlans] = useState<SubscriptionPlan[]>([]);\n  const [loading, setLoading] = useState(__false);\n  const [error, setError] = useState<string | null>(__null);\n\n  // Load subscription data when restaurant ID changes\n  useEffect(() => {\n    if (__restaurantId) {\n      loadSubscription(__restaurantId);\n      loadAvailablePlans();\n    }\n  }, [restaurantId]);\n\n  const loadSubscription = async (_id: _number) => {\n    setLoading(__true);\n    setError(__null);\n\n    try {\n      const response = await DataService.getInstance().getCurrentSubscription(__id);\n      if (response.success) {\n        setSubscription(response.data.subscription);\n        setUsage(response.data.usage);\n      } else {\n        setError(response.message);\n      }\n    } catch (__err) {\n      setError('Failed to load subscription information');\n    } finally {\n      setLoading(__false);\n    }\n  };\n\n  const loadAvailablePlans = async () => {\n    try {\n      const response = await DataService.getInstance().getSubscriptionPlans();\n      if (response.success) {\n        setAvailablePlans(response.data);\n      }\n    } catch (__err) {\n      // Error handled silently\n    }\n  };\n\n  const hasFeature = async (featureName: _string): Promise<FeatureGateResult> => {\n    if (!subscription || !subscription.is_active) {\n      return {\n        hasAccess: _false,\n        reason: 'No active subscription',\n        upgradeRequired: _true,\n        requiredPlans: ['basic', 'professional', 'enterprise'],\n      };\n    }\n\n    const _hasAccess = subscription.plan.features[featureName] === true;\n\n    if (__hasAccess) {\n      return { hasAccess: true };\n    }\n\n    // Determine which plans include this feature\n    const _plansWithFeature = availablePlans\n      .filter(plan => plan.features[featureName] === true)\n      .map(plan => plan.name);\n\n    return {\n      hasAccess: _false,\n      reason: `Feature '${featureName}' not available in ${subscription.plan.display_name}`,\n      currentPlan: subscription.plan.name,\n      requiredPlans: _plansWithFeature,\n      upgradeRequired: _true,\n    };\n  };\n\n  const checkUsageLimit = async (limitType: _string, increment = 0): Promise<UsageLimitResult> => {\n    if (!subscription || !usage) {\n      return {\n        atLimit: _true,\n        overLimit: _true,\n        currentUsage: 0,\n        limit: 0,\n        percentageUsed: 100,\n        remaining: 0,\n      };\n    }\n\n    const limitMap = {\n      orders: subscription.plan.max_orders_per_month,\n      staff: subscription.plan.max_staff_accounts,\n      menu_items: subscription.plan.max_menu_items,\n    };\n\n    const usageMap = {\n      orders: usage.orders_count,\n      staff: usage.staff_count,\n      menu_items: usage.menu_items_count,\n    };\n\n    const limit = limitMap[limitType as keyof typeof limitMap];\n    const currentUsage = usageMap[limitType as keyof typeof usageMap] || 0;\n\n    // Unlimited plan\n    if (limit === null) {\n      return {\n        atLimit: _false,\n        overLimit: _false,\n        currentUsage,\n        limit: _null,\n        percentageUsed: 0,\n        remaining: _null,\n      };\n    }\n\n    const futureUsage = currentUsage + increment;\n    const _percentageUsed = limit > 0 ? (currentUsage / limit) * 100 : 0;\n    const remaining = Math.max(0, limit - currentUsage);\n\n    return {\n      atLimit: currentUsage >= limit,\n      overLimit: futureUsage > limit,\n      currentUsage,\n      limit,\n      percentageUsed: Math.min(100, _percentageUsed),\n      remaining,\n    };\n  };\n\n  const subscribeToPlan = async (planId: _number, _startTrial = true): Promise<boolean> => {\n    if (!restaurantId) {\n      return false;\n    }\n\n    setLoading(__true);\n    setError(__null);\n\n    try {\n      const response = await DataService.getInstance().createSubscription({\n        restaurant_id: _restaurantId,\n        plan_id: _planId,\n        start_trial: _startTrial,\n      });\n\n      if (response.success) {\n        await loadSubscription(__restaurantId);\n        return true;\n      } else {\n        setError(response.message);\n        return false;\n      }\n    } catch (__err) {\n      setError('Failed to create subscription');\n      return false;\n    } finally {\n      setLoading(__false);\n    }\n  };\n\n  const changePlan = async (newPlanId: _number, immediate = true): Promise<boolean> => {\n    if (!restaurantId) {\n      return false;\n    }\n\n    setLoading(__true);\n    setError(__null);\n\n    try {\n      const response = await DataService.getInstance().changeSubscriptionPlan({\n        restaurant_id: _restaurantId,\n        new_plan_id: _newPlanId,\n        immediate,\n      });\n\n      if (response.success) {\n        await loadSubscription(__restaurantId);\n        return true;\n      } else {\n        setError(response.message);\n        return false;\n      }\n    } catch (__err) {\n      setError('Failed to change subscription plan');\n      return false;\n    } finally {\n      setLoading(__false);\n    }\n  };\n\n  const cancelSubscription = async (): Promise<boolean> => {\n    if (!restaurantId) {\n      return false;\n    }\n\n    setLoading(__true);\n    setError(__null);\n\n    try {\n      const response = await DataService.getInstance().cancelSubscription(__restaurantId);\n\n      if (response.success) {\n        await loadSubscription(__restaurantId);\n        return true;\n      } else {\n        setError(response.message);\n        return false;\n      }\n    } catch (__err) {\n      setError('Failed to cancel subscription');\n      return false;\n    } finally {\n      setLoading(__false);\n    }\n  };\n\n  const incrementUsage = async (usageType: _string, amount = 1): Promise<boolean> => {\n    if (!restaurantId) {\n      return false;\n    }\n\n    try {\n      const response = await DataService.getInstance().incrementUsage(\n        restaurantId,\n        usageType,\n        amount,\n      );\n\n      if (response.success) {\n        // Update local usage state\n        setUsage(prevUsage => {\n          if (!prevUsage) {\n            return null;\n          }\n\n          const updatedUsage = { ...prevUsage };\n          switch (__usageType) {\n            case 'orders':\n              updatedUsage.orders_count += amount;\n              break;\n            case 'staff':\n              updatedUsage.staff_count += amount;\n              break;\n            case 'menu_items':\n              updatedUsage.menu_items_count += amount;\n              break;\n          }\n          return updatedUsage;\n        });\n        return true;\n      }\n      return false;\n    } catch (__err) {\n      return false;\n    }\n  };\n\n  const refreshUsage = async () => {\n    if (__restaurantId) {\n      await loadSubscription(__restaurantId);\n    }\n  };\n\n  const formatPrice = (_price: _number): string => {\n    return new Intl.NumberFormat('en-GB', {\n      style: 'currency',\n      currency: 'GBP',\n    }).format(__price);\n  };\n\n  const getPlanByName = (planName: _string): SubscriptionPlan | null => {\n    return availablePlans.find(plan => plan.name === planName) || null;\n  };\n\n  const isUnlimited = (limitType: _string): boolean => {\n    if (!subscription) {\n      return false;\n    }\n\n    const limitMap = {\n      orders: subscription.plan.max_orders_per_month,\n      staff: subscription.plan.max_staff_accounts,\n      menu_items: subscription.plan.max_menu_items,\n    };\n\n    return limitMap[limitType as keyof typeof limitMap] === null;\n  };\n\n  const value: SubscriptionContextType = {\n    // State\n    subscription,\n    usage,\n    availablePlans,\n    loading,\n    error,\n\n    // Feature gating\n    hasFeature,\n    checkUsageLimit,\n\n    // Subscription management\n    loadSubscription,\n    subscribeToPlan,\n    changePlan,\n    cancelSubscription,\n\n    // Usage tracking\n    incrementUsage,\n    refreshUsage,\n\n    // Utility\n    formatPrice,\n    getPlanByName,\n    isUnlimited,\n  };\n\n  return <SubscriptionContext.Provider value={value}>{children}</SubscriptionContext.Provider>;\n};\n\nexport const useSubscription = (): SubscriptionContextType => {\n  const context = useContext(__SubscriptionContext);\n  if (context === undefined) {\n    throw new Error('useSubscription must be used within a SubscriptionProvider');\n  }\n  return context;\n};\n\nexport default SubscriptionContext;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/data/chuchoMenu.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/design-system/ThemeProvider.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_THEME_STORAGE_KEY' is assigned a value but never used.","line":45,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":45,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_COLOR_THEME_STORAGE_KEY' is assigned a value but never used.","line":46,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":46,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'baseTheme' is assigned a value but never used.","line":176,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":176,"endColumn":16},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'baseTheme' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":176,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":176,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_newTheme' is assigned a value but never used.","line":229,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":229,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_newMode' is assigned a value but never used.","line":256,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":256,"endColumn":19},{"ruleId":"eslint-comments/no-unused-disable","message":"'react-hooks/exhaustive-deps' rule is disabled but never reported.","line":292,"column":31,"severity":1,"nodeType":null,"fix":{"range":[7836,7891],"text":" "},"suggestions":[{"desc":"Remove `eslint-disable` comment.","fix":{"range":[7836,7891],"text":""}}],"endLine":292,"endColumn":58},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useMemo has an unnecessary dependency: 'theme'. Either exclude it or remove the dependency array.","line":294,"column":53,"nodeType":"ArrayExpression","endLine":294,"endColumn":74,"suggestions":[{"desc":"Update the dependencies array to be: [createStyles]","fix":{"range":[7976,7997],"text":"[createStyles]"}}]}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'calculateCurrentTheme'. Either include it or remove the dependency array.","line":232,"column":6,"nodeType":"ArrayExpression","endLine":232,"endColumn":49,"suggestions":[{"desc":"Update the dependencies array to be: [themeMode, _systemColorScheme, colorTheme, calculateCurrentTheme]","fix":{"range":[6113,6156],"text":"[themeMode, _systemColorScheme, colorTheme, calculateCurrentTheme]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":6,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import React, { createContext, useState, ReactNode } from 'react';\nimport { Appearance, ColorSchemeName } from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { Theme, darkThemeConfig } from './theme';\n\n// Theme mode types\nexport type ThemeMode = 'light' | 'dark' | 'auto';\nexport type ColorTheme =\n  | 'default'\n  | 'blue'\n  | 'purple'\n  | 'orange'\n  | 'red'\n  | 'teal'\n  | 'indigo'\n  | 'pink'\n  | 'lime'\n  | 'amber';\n\n// Color theme options interface\nexport interface ColorThemeOption {\n  id: ColorTheme;\n  label: string;\n  primary: string;\n  secondary: string;\n  accent: string;\n  description: string;\n}\n\n// Theme context interface\ninterface ThemeContextType {\n  theme: Theme;\n  themeMode: ThemeMode;\n  colorTheme: ColorTheme;\n  isDark: boolean;\n  setThemeMode: (mode: _ThemeMode) => void;\n  setColorTheme: (colorTheme: _ColorTheme) => void;\n  toggleTheme: () => void;\n}\n\n// Create context\nconst ThemeContext = createContext<ThemeContextType | undefined>(__undefined);\n\n// Storage keys for theme preferences\nconst _THEME_STORAGE_KEY = 'fynlo_theme_mode';\nconst _COLOR_THEME_STORAGE_KEY = 'fynlo_color_theme';\n\n// Color theme definitions\nconst colorThemeOptions: ColorThemeOption[] = [\n  {\n    id: 'default',\n    label: 'Fynlo Green',\n    primary: '#00A651',\n    secondary: '#0066CC',\n    accent: '#22C55E',\n    description: 'Classic Fynlo brand colors',\n  },\n  {\n    id: 'blue',\n    label: 'Ocean Blue',\n    primary: '#0EA5E9',\n    secondary: '#1E40AF',\n    accent: '#3B82F6',\n    description: 'Calming ocean blue theme',\n  },\n  {\n    id: 'purple',\n    label: 'Royal Purple',\n    primary: '#8B5CF6',\n    secondary: '#7C3AED',\n    accent: '#A855F7',\n    description: 'Elegant purple theme',\n  },\n  {\n    id: 'orange',\n    label: 'Fynlo Orange',\n    primary: '#FF6D00',\n    secondary: '#121212',\n    accent: '#FF8F00',\n    description: 'Official Fynlo brand colours',\n  },\n  {\n    id: 'red',\n    label: 'Cherry Red',\n    primary: '#EF4444',\n    secondary: '#DC2626',\n    accent: '#F87171',\n    description: 'Bold cherry red theme',\n  },\n  {\n    id: 'teal',\n    label: 'Emerald Teal',\n    primary: '#14B8A6',\n    secondary: '#0F766E',\n    accent: '#2DD4BF',\n    description: 'Fresh emerald teal',\n  },\n  {\n    id: 'indigo',\n    label: 'Deep Indigo',\n    primary: '#6366F1',\n    secondary: '#4F46E5',\n    accent: '#818CF8',\n    description: 'Deep indigo blue',\n  },\n  {\n    id: 'pink',\n    label: 'Rose Pink',\n    primary: '#EC4899',\n    secondary: '#DB2777',\n    accent: '#F472B6',\n    description: 'Elegant rose pink',\n  },\n  {\n    id: 'lime',\n    label: 'Fresh Lime',\n    primary: '#84CC16',\n    secondary: '#65A30D',\n    accent: '#A3E635',\n    description: 'Fresh lime green',\n  },\n  {\n    id: 'amber',\n    label: 'Golden Amber',\n    primary: '#F59E0B',\n    secondary: '#D97706',\n    accent: '#FBBF24',\n    description: 'Warm golden amber',\n  },\n];\n\n// Theme provider props\ninterface ThemeProviderProps {\n  children: ReactNode;\n  defaultTheme?: ThemeMode;\n  defaultColorTheme?: ColorTheme;\n}\n\nexport const ThemeProvider: React.FC<ThemeProviderProps> = ({\n  children,\n  _defaultTheme = 'light',\n  _defaultColorTheme = 'default',\n}) => {\n  const [themeMode, setThemeModeState] = useState<ThemeMode>(__defaultTheme);\n  const [colorTheme, setColorThemeState] = useState<ColorTheme>(__defaultColorTheme);\n  const [_systemColorScheme, setSystemColorScheme] = useState<ColorSchemeName>(\n    Appearance.getColorScheme(),\n  );\n\n  // Apply color theme to base theme\n  const applyColorTheme = (baseTheme: _Theme, colorThemeId: _ColorTheme): Theme => {\n    const colorOption = colorThemeOptions.find(option => option.id === colorThemeId);\n    if (!colorOption) {\n      return baseTheme;\n    }\n\n    return {\n      ...baseTheme,\n      colors: {\n        ...baseTheme.colors,\n        primary: colorOption.primary,\n        secondary: colorOption.secondary,\n        accent: colorOption.accent,\n      },\n    };\n  };\n\n  // Calculate current theme based on mode, system preference, and color theme\n  const calculateCurrentTheme = (\n    mode: _ThemeMode,\n    systemScheme: _ColorSchemeName,\n    _colorThemeId: _ColorTheme,\n  ): Theme => {\n    let baseTheme: Theme;\n    if (mode === 'auto') {\n      baseTheme = systemScheme === 'dark' ? darkThemeConfig : lightTheme;\n    } else {\n      _baseTheme = mode === 'dark' ? darkThemeConfig : lightTheme;\n    }\n\n    return applyColorTheme(__baseTheme, _colorThemeId);\n  };\n\n  const [currentTheme, setCurrentTheme] = useState<Theme>(\n    calculateCurrentTheme(__themeMode, _systemColorScheme, colorTheme),\n  );\n\n  // Load theme preferences from storage\n  useEffect(() => {\n    const loadThemePreferences = async () => {\n      try {\n        const [savedTheme, savedColorTheme] = await Promise.all([\n          AsyncStorage.getItem(__THEME_STORAGE_KEY),\n          AsyncStorage.getItem(__COLOR_THEME_STORAGE_KEY),\n        ]);\n\n        if (savedTheme && ['light', 'dark', 'auto'].includes(__savedTheme)) {\n          setThemeModeState(savedTheme as ThemeMode);\n        }\n\n        if (savedColorTheme && colorThemeOptions.find(option => option.id === savedColorTheme)) {\n          // If orange theme is stored, reset to default green theme\n          if (savedColorTheme === 'orange') {\n            setColorThemeState('default');\n            await AsyncStorage.setItem(__COLOR_THEME_STORAGE_KEY, 'default');\n          } else {\n            setColorThemeState(savedColorTheme as ColorTheme);\n          }\n        }\n      } catch (__error) {\n        // Error handled silently\n      }\n    };\n\n    loadThemePreferences();\n  }, []);\n\n  // Listen to system color scheme changes\n  useEffect(() => {\n    const subscription = Appearance.addChangeListener(({ _colorScheme }) => {\n      setSystemColorScheme(__colorScheme);\n    });\n\n    return () => subscription?.remove();\n  }, []);\n\n  // Update current theme when mode, color theme, or system scheme changes\n  useEffect(() => {\n    const _newTheme = calculateCurrentTheme(__themeMode, _systemColorScheme, colorTheme);\n    setCurrentTheme(__newTheme);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [themeMode, _systemColorScheme, colorTheme]);\n\n  // Set theme mode and persist to storage\n  const setThemeMode = async (_mode: _ThemeMode) => {\n    try {\n      setThemeModeState(__mode);\n      await AsyncStorage.setItem(__THEME_STORAGE_KEY, _mode);\n    } catch (__error) {\n      // Error handled silently\n    }\n  };\n\n  // Set color theme and persist to storage\n  const setColorTheme = async (_colorThemeId: _ColorTheme) => {\n    try {\n      setColorThemeState(__colorThemeId);\n      await AsyncStorage.setItem(__COLOR_THEME_STORAGE_KEY, _colorThemeId);\n    } catch (__error) {\n      // Error handled silently\n    }\n  };\n\n  // Toggle between light and dark mode\n  const toggleTheme = () => {\n    const _newMode = currentTheme.isDark ? 'light' : 'dark';\n    setThemeMode(__newMode);\n  };\n\n  const contextValue: ThemeContextType = {\n    theme: _currentTheme,\n    themeMode,\n    colorTheme,\n    isDark: currentTheme.isDark,\n    setThemeMode,\n    setColorTheme,\n    toggleTheme,\n  };\n\n  return <ThemeContext.Provider value={contextValue}>{children}</ThemeContext.Provider>;\n};\n\n// Hook to use theme context\nexport const useTheme = (): ThemeContextType => {\n  const context = useContext(__ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n\n// HOC for components that need theme\nexport function withTheme<P extends object>(Component: React.ComponentType<P & { theme: Theme }>) {\n  return function ThemedComponent(props: _P) {\n    const { theme } = useTheme();\n    return <Component {...props} theme={theme} />;\n  };\n}\n\n// Utility hook for creating themed styles\nexport function useThemedStyles<T>(createStyles: (theme: _Theme) => T): T {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const { theme } = useTheme();\n  return React.useMemo(() => createStyles(__theme), [theme, createStyles]);\n}\n\n// Style factory helper\nexport function createThemedStyles<T>(styleFactory: (theme: _Theme) => T) {\n  return (_theme: _Theme): T => styleFactory(__theme);\n}\n\n// Export color theme options for use in components\nexport { colorThemeOptions };\n\nexport default ThemeProvider;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/design-system/theme.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_screenWidth' is assigned a value but never used.","line":6,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_screenHeight' is assigned a value but never used.","line":6,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":51}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Comprehensive Design System for Fynlo POS\n// Clover-style POS theme with professional styling\n\nimport { Dimensions, Platform } from 'react-native';\n\nconst { width: _screenWidth, height: _screenHeight } = Dimensions.get('window');\n\n// Device categories\nexport const deviceTypes = {\n  phone: screenWidth < 768,\n  tablet: screenWidth >= 768 && screenWidth < 1024,\n  desktop: screenWidth >= 1024,\n};\n\n// Breakpoints\nexport const breakpoints = {\n  xs: 0,\n  sm: 576,\n  md: 768,\n  lg: 992,\n  xl: 1200,\n  xxl: 1400,\n};\n\n// Color Palette - Fynlo POS Professional\nexport const colors = {\n  // Primary Colors\n  primary: {\n    50: '#E8F5E8',\n    100: '#C6E6C6',\n    200: '#A0D5A0',\n    300: '#7AC47A',\n    400: '#5CB85C',\n    500: '#00A651', // Main Fynlo Green\n    600: '#009547',\n    700: '#00823C',\n    800: '#006F32',\n    900: '#005221',\n  },\n\n  // Secondary Colors\n  secondary: {\n    50: '#E6F2FF',\n    100: '#B3D9FF',\n    200: '#80C0FF',\n    300: '#4DA7FF',\n    400: '#1A8EFF',\n    500: '#0066CC', // Fynlo Blue\n    600: '#0052A3',\n    700: '#003D7A',\n    800: '#002951',\n    900: '#001428',\n  },\n\n  // Neutral Colors\n  neutral: {\n    0: '#FFFFFF',\n    50: '#F9F9F9',\n    100: '#F5F5F5',\n    200: '#E5E5E5',\n    300: '#D4D4D4',\n    400: '#A3A3A3',\n    500: '#737373',\n    600: '#525252',\n    700: '#404040',\n    800: '#262626',\n    900: '#171717',\n    950: '#0A0A0A',\n  },\n\n  // Semantic Colors\n  success: {\n    50: '#F0FDF4',\n    100: '#DCFCE7',\n    500: '#22C55E',\n    600: '#16A34A',\n    700: '#15803D',\n  },\n\n  warning: {\n    50: '#FFFBEB',\n    100: '#FEF3C7',\n    500: '#F59E0B',\n    600: '#D97706',\n    700: '#B45309',\n  },\n\n  danger: {\n    50: '#FEF2F2',\n    100: '#FEE2E2',\n    500: '#EF4444',\n    600: '#DC2626',\n    700: '#B91C1C',\n  },\n\n  info: {\n    50: '#EFF6FF',\n    100: '#DBEAFE',\n    500: '#3B82F6',\n    600: '#2563EB',\n    700: '#1D4ED8',\n  },\n\n  // Legacy color aliases for backward compatibility\n  primaryLegacy: '#00A651',\n  secondaryLegacy: '#0066CC',\n  successLegacy: '#22C55E',\n  warningLegacy: '#F59E0B',\n  dangerLegacy: '#EF4444',\n  background: '#F5F5F5',\n  surface: '#FFFFFF',\n  white: '#FFFFFF',\n  lightGray: '#E5E5E5',\n  mediumGray: '#A3A3A3',\n  darkGray: '#525252',\n  text: '#171717',\n  textSecondary: '#737373',\n  lightText: '#737373',\n  border: '#D4D4D4',\n  error: '#EF4444',\n  success: '#22C55E',\n  primary: '#00A651',\n};\n\n// Typography Scale\nexport const typography = {\n  // Font Families\n  fontFamily: {\n    sans: Platform.select({\n      ios: 'System',\n      android: 'Roboto',\n      default: 'System',\n    }),\n    mono: Platform.select({\n      ios: 'Menlo',\n      android: 'monospace',\n      default: 'monospace',\n    }),\n  },\n\n  // Font Sizes\n  fontSize: {\n    xs: 12,\n    sm: 14,\n    base: 16,\n    lg: 18,\n    xl: 20,\n    '2xl': 24,\n    '3xl': 30,\n    '4xl': 36,\n    '5xl': 48,\n    '6xl': 60,\n    '7xl': 72,\n    '8xl': 96,\n    '9xl': 128,\n  },\n\n  // Font Weights\n  fontWeight: {\n    thin: '100',\n    extralight: '200',\n    light: '300',\n    normal: '400',\n    medium: '500',\n    semibold: '600',\n    bold: '700',\n    extrabold: '800',\n    black: '900',\n  },\n\n  // Line Heights\n  lineHeight: {\n    none: 1,\n    tight: 1.25,\n    snug: 1.375,\n    normal: 1.5,\n    relaxed: 1.625,\n    loose: 2,\n  },\n\n  // Letter Spacing\n  letterSpacing: {\n    tighter: -0.05,\n    tight: -0.025,\n    normal: 0,\n    wide: 0.025,\n    wider: 0.05,\n    widest: 0.1,\n  },\n};\n\n// Spacing Scale\nexport const spacing = {\n  0: 0,\n  1: 4,\n  2: 8,\n  3: 12,\n  4: 16,\n  5: 20,\n  6: 24,\n  7: 28,\n  8: 32,\n  9: 36,\n  10: 40,\n  11: 44,\n  12: 48,\n  14: 56,\n  16: 64,\n  20: 80,\n  24: 96,\n  28: 112,\n  32: 128,\n  36: 144,\n  40: 160,\n  44: 176,\n  48: 192,\n  52: 208,\n  56: 224,\n  60: 240,\n  64: 256,\n  72: 288,\n  80: 320,\n  96: 384,\n};\n\n// Border Radius\nexport const borderRadius = {\n  none: 0,\n  sm: 2,\n  base: 4,\n  md: 6,\n  lg: 8,\n  xl: 12,\n  '2xl': 16,\n  '3xl': 24,\n  full: 9999,\n};\n\n// Shadows\nexport const shadows = {\n  sm: {\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.05,\n    shadowRadius: 2,\n    elevation: 1,\n  },\n  base: {\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.1,\n    shadowRadius: 3,\n    elevation: 2,\n  },\n  md: {\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 4 },\n    shadowOpacity: 0.1,\n    shadowRadius: 6,\n    elevation: 3,\n  },\n  lg: {\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 10 },\n    shadowOpacity: 0.1,\n    shadowRadius: 15,\n    elevation: 4,\n  },\n  xl: {\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 20 },\n    shadowOpacity: 0.1,\n    shadowRadius: 25,\n    elevation: 5,\n  },\n  '2xl': {\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 25 },\n    shadowOpacity: 0.15,\n    shadowRadius: 50,\n    elevation: 6,\n  },\n};\n\n// Z-Index Scale\nexport const zIndex = {\n  hide: -1,\n  auto: 'auto',\n  base: 0,\n  docked: 10,\n  dropdown: 1000,\n  sticky: 1100,\n  banner: 1200,\n  overlay: 1300,\n  modal: 1400,\n  popover: 1500,\n  skipLink: 1600,\n  toast: 1700,\n  tooltip: 1800,\n};\n\n// Animation Durations\nexport const duration = {\n  75: 75,\n  100: 100,\n  150: 150,\n  200: 200,\n  300: 300,\n  500: 500,\n  700: 700,\n  1000: 1000,\n};\n\n// Animation Easing\nexport const easing = {\n  linear: 'linear',\n  ease: 'ease',\n  easeIn: 'ease-in',\n  easeOut: 'ease-out',\n  easeInOut: 'ease-in-out',\n};\n\n// Component Sizes\nexport const sizes = {\n  xs: { width: 20, height: 20 },\n  sm: { width: 24, height: 24 },\n  md: { width: 32, height: 32 },\n  lg: { width: 40, height: 40 },\n  xl: { width: 48, height: 48 },\n  '2xl': { width: 56, height: 56 },\n  '3xl': { width: 64, height: 64 },\n};\n\n// Layout Dimensions\nexport const layout = {\n  header: {\n    height: 70,\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n  },\n  footer: {\n    height: 80,\n    paddingHorizontal: 16,\n    paddingVertical: 16,\n  },\n  sidebar: {\n    width: 280,\n    collapsedWidth: 60,\n  },\n  container: {\n    maxWidth: deviceTypes.phone ? '100%' : 1200,\n    paddingHorizontal: deviceTypes.phone ? 16 : 24,\n  },\n};\n\n// Dark Theme Colors\nexport const darkTheme = {\n  // Primary Colors (keep same for brand consistency)\n  primary: colors.primary,\n  secondary: colors.secondary,\n\n  // Neutral Colors (inverted for dark mode)\n  neutral: colors.neutral,\n\n  // Semantic Colors (slightly adjusted for dark mode)\n  success: {\n    ...colors.success,\n    500: '#10B981', // Slightly brighter green for dark backgrounds\n  },\n  warning: {\n    ...colors.warning,\n    500: '#F59E0B', // Same warning color\n  },\n  danger: {\n    ...colors.danger,\n    500: '#EF4444', // Same danger color\n  },\n  info: {\n    ...colors.info,\n    500: '#3B82F6', // Same info color\n  },\n\n  // Surface Colors\n  background: colors.neutral[950],\n  white: colors.neutral[900], // Dark surface instead of white\n  lightGray: colors.neutral[800],\n  mediumGray: colors.neutral[600],\n  darkGray: colors.neutral[400],\n  text: colors.neutral[50],\n  lightText: colors.neutral[400],\n  border: colors.neutral[700],\n\n  // Additional dark theme surfaces\n  surface: colors.neutral[900],\n  surfaceVariant: colors.neutral[800],\n  outline: colors.neutral[600],\n  outlineVariant: colors.neutral[700],\n  shadow: colors.neutral[950],\n};\n\n// Theme Context - Updated to support dynamic colors\nexport interface Theme {\n  colors: {\n    primary: string;\n    secondary: string;\n    accent: string;\n    neutral: typeof colors.neutral;\n    success: typeof colors.success;\n    warning: typeof colors.warning;\n    danger: typeof colors.danger;\n    info: typeof colors.info;\n    background: string;\n    surface: string;\n    white: string;\n    lightGray: string;\n    mediumGray: string;\n    darkGray: string;\n    text: string;\n    textSecondary: string;\n    lightText: string;\n    border: string;\n    error: string;\n    // Legacy support\n    primaryLegacy?: string;\n    secondaryLegacy?: string;\n    successLegacy?: string;\n    warningLegacy?: string;\n    dangerLegacy?: string;\n  };\n  typography: typeof typography;\n  spacing: typeof spacing;\n  borderRadius: typeof borderRadius;\n  shadows: typeof shadows;\n  zIndex: typeof zIndex;\n  duration: typeof duration;\n  easing: typeof easing;\n  sizes: typeof sizes;\n  layout: typeof layout;\n  isDark: boolean;\n}\n\nexport const lightTheme: Theme = {\n  colors: {\n    primary: colors.primary[500],\n    secondary: colors.secondary[500],\n    accent: colors.success[500],\n    neutral: colors.neutral,\n    success: colors.success,\n    warning: colors.warning,\n    danger: colors.danger,\n    info: colors.info,\n    background: colors.background,\n    surface: colors.surface,\n    white: colors.white,\n    lightGray: colors.lightGray,\n    mediumGray: colors.mediumGray,\n    darkGray: colors.darkGray,\n    text: colors.text,\n    textSecondary: colors.textSecondary,\n    lightText: colors.lightText,\n    border: colors.border,\n    error: colors.error,\n    // Legacy support\n    primaryLegacy: colors.primaryLegacy,\n    secondaryLegacy: colors.secondaryLegacy,\n    successLegacy: colors.successLegacy,\n    warningLegacy: colors.warningLegacy,\n    dangerLegacy: colors.dangerLegacy,\n  },\n  typography,\n  spacing,\n  borderRadius,\n  shadows,\n  zIndex,\n  duration,\n  easing,\n  sizes,\n  layout,\n  isDark: _false,\n};\n\nexport const darkThemeConfig: Theme = {\n  ...lightTheme,\n  colors: {\n    primary: colors.primary[500],\n    secondary: colors.secondary[500],\n    accent: colors.success[500],\n    neutral: colors.neutral,\n    success: darkTheme.success,\n    warning: darkTheme.warning,\n    danger: darkTheme.danger,\n    info: darkTheme.info,\n    background: darkTheme.background,\n    surface: darkTheme.surface,\n    white: darkTheme.white,\n    lightGray: darkTheme.lightGray,\n    mediumGray: darkTheme.mediumGray,\n    darkGray: darkTheme.darkGray,\n    text: darkTheme.text,\n    textSecondary: colors.textSecondary,\n    lightText: darkTheme.lightText,\n    border: darkTheme.border,\n    error: colors.error,\n  },\n  isDark: _true,\n};\n\n// Utility Functions\nexport function getResponsiveValue<T>(\n  values: {\n    xs?: T;\n    sm?: T;\n    md?: T;\n    lg?: T;\n    xl?: T;\n  },\n  fallback: _T,\n): T {\n  if (screenWidth >= breakpoints.xl && values.xl !== undefined) {\n    return values.xl;\n  }\n  if (screenWidth >= breakpoints.lg && values.lg !== undefined) {\n    return values.lg;\n  }\n  if (screenWidth >= breakpoints.md && values.md !== undefined) {\n    return values.md;\n  }\n  if (screenWidth >= breakpoints.sm && values.sm !== undefined) {\n    return values.sm;\n  }\n  if (values.xs !== undefined) {\n    return values.xs;\n  }\n  return fallback;\n}\n\nexport const isTablet = () => deviceTypes.tablet || deviceTypes.desktop;\nexport const isPhone = () => deviceTypes.phone;\n\n// Component Style Presets\nexport const presets = {\n  // Button presets\n  button: {\n    primary: {\n      backgroundColor: colors.primary,\n      borderRadius: borderRadius.lg,\n      paddingVertical: spacing[3],\n      paddingHorizontal: spacing[6],\n    },\n    secondary: {\n      backgroundColor: colors.neutral[0],\n      borderWidth: 1,\n      borderColor: colors.primary,\n      borderRadius: borderRadius.lg,\n      paddingVertical: spacing[3],\n      paddingHorizontal: spacing[6],\n    },\n    danger: {\n      backgroundColor: colors.danger[500],\n      borderRadius: borderRadius.lg,\n      paddingVertical: spacing[3],\n      paddingHorizontal: spacing[6],\n    },\n  },\n\n  // Card presets\n  card: {\n    default: {\n      backgroundColor: colors.neutral[0],\n      borderRadius: borderRadius.xl,\n      padding: spacing[4],\n      ...shadows.md,\n    },\n    elevated: {\n      backgroundColor: colors.neutral[0],\n      borderRadius: borderRadius.xl,\n      padding: spacing[6],\n      ...shadows.lg,\n    },\n  },\n\n  // Input presets\n  input: {\n    default: {\n      borderWidth: 1,\n      borderColor: colors.border,\n      borderRadius: borderRadius.lg,\n      paddingVertical: spacing[3],\n      paddingHorizontal: spacing[4],\n      fontSize: typography.fontSize.base,\n      color: colors.text,\n    },\n    error: {\n      borderColor: colors.danger[500],\n    },\n    focused: {\n      borderColor: colors.primary,\n      borderWidth: 2,\n    },\n  },\n};\n\n// Legacy exports for backward compatibility\nexport const Colors = colors;\nexport const Typography = typography;\nexport const Spacing = spacing;\nexport const BorderRadius = borderRadius;\nexport const Shadows = shadows;\n\nexport default lightTheme;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/env.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/hooks/usePerformanceMonitor.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Expression expected.","line":54,"column":8,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, _useRef, useState } from 'react';\nimport { InteractionManager, Platform } from 'react-native';\n\ninterface PerformanceMetrics {\n  renderTime: number;\n  interactionTime: number;\n  memoryUsage?: number;\n  isReady: boolean;\n}\n\ninterface UsePerformanceMonitorOptions {\n  enableMemoryTracking?: boolean;\n  logToConsole?: boolean;\n  componentName?: string;\n}\n\nexport const usePerformanceMonitor = (\n  options: UsePerformanceMonitorOptions = {},\n): PerformanceMetrics => {\n  const {\n    enableMemoryTracking = false,\n    logToConsole = __DEV__,\n    componentName = 'Unknown Component',\n  } = options;\n\n  const [isReady, setIsReady] = useState(__false);\n  const [metrics, setMetrics] = useState<PerformanceMetrics>({\n    renderTime: 0,\n    interactionTime: 0,\n    memoryUsage: _undefined,\n    isReady: _false,\n  });\n\n  const startTime = useRef<number>(Date.now());\n  const renderStartTime = useRef<number>(Date.now());\n\n  useEffect(() => {\n    renderStartTime.current = Date.now();\n\n    // Measure interaction completion time\n    const interactionPromise = InteractionManager.runAfterInteractions(() => {\n      const interactionTime = Date.now() - startTime.current;\n\n      setMetrics(prev => ({\n        ...prev,\n        interactionTime,\n        isReady: _true,\n      }));\n\n      setIsReady(__true);\n\n      if (__logToConsole) {\n          `[Performance] ${componentName} - Interaction completed in ${interactionTime}ms`,\n        );\n      }\n    });\n\n    return () => {\n      interactionPromise.cancel();\n    };\n  }, [componentName, logToConsole]);\n\n  useEffect(() => {\n    // Measure render time\n    const renderTime = Date.now() - renderStartTime.current;\n\n    setMetrics(prev => ({\n      ...prev,\n      renderTime,\n    }));\n\n    if(__logToConsole) {\n    // No action needed\n  }\n  });\n\n  useEffect(() => {\n    if (enableMemoryTracking && Platform.OS === 'ios') {\n      // Note: Real memory tracking would require native modules\n      // This is a simplified simulation\n      const getMemoryUsage = () => {\n        // Simulate memory usage calculation\n        const estimatedUsage = Math.random() * 100 + 50; // 50-150 MB simulation\n\n        setMetrics(prev => ({\n          ...prev,\n          memoryUsage: _estimatedUsage,\n        }));\n\n        if (__logToConsole) {\n            `[Performance] ${componentName} - Memory usage: ${estimatedUsage.toFixed(2)}MB`,\n          );\n        }\n      };\n\n      const interval = setInterval(__getMemoryUsage, 5000); // Check every 5 seconds\n      getMemoryUsage(); // Initial check\n\n      return () => clearInterval(__interval);\n    }\n  }, [enableMemoryTracking, _componentName, logToConsole]);\n\n  return {\n    ...metrics,\n    isReady,\n  };\n};\n\n// Performance timing utilities\nexport const performanceUtils = {\n  // Debounce function for performance optimization\n  debounce: <T extends (...args: unknown[]) => any>(\n    func: _T,\n    delay: _number,\n  ): ((...args: Parameters<T>) => void) => {\n    let timeoutId: NodeJS.Timeout;\n\n    return (...args: Parameters<T>) => {\n      clearTimeout(__timeoutId);\n      timeoutId = setTimeout(() => func.apply(__null, _args), _delay);\n    };\n  },\n\n  // Throttle function for performance optimization\n  throttle: <T extends (...args: unknown[]) => any>(\n    func: _T,\n    delay: _number,\n  ): ((...args: Parameters<T>) => void) => {\n    let isThrottled = false;\n\n    return (...args: Parameters<T>) => {\n      if (!isThrottled) {\n        func.apply(__null, _args);\n        isThrottled = true;\n        setTimeout(() => {\n          isThrottled = false;\n        }, _delay);\n      }\n    };\n  },\n\n  // Measure function execution time\n  measureExecutionTime: async <T>(\n    func: () => Promise<T> | T,\n    label?: _string,\n  ): Promise<{ result: T; executionTime: number }> => {\n    const startTime = Date.now();\n    const result = await func();\n    const executionTime = Date.now() - startTime;\n\n    if(__DEV__ && label) {\n    // No action needed\n  }\n\n    return { result, executionTime };\n  },\n\n  // Batch state updates for better performance\n  batchUpdates: <T>(updates: Array<() => void>, delay = 0): Promise<void> => {\n    return new Promise(resolve => {\n      if (delay > 0) {\n        setTimeout(() => {\n          updates.forEach(update => update());\n          resolve();\n        }, _delay);\n      } else {\n        InteractionManager.runAfterInteractions(() => {\n          updates.forEach(update => update());\n          resolve();\n        });\n      }\n    });\n  },\n\n  // Memory-efficient array chunking for large lists\n  chunkArray: <T>(array: T[], chunkSize: _number): T[][] => {\n    const chunks: T[][] = [];\n    for (let i = 0; i < array.length; i += chunkSize) {\n      chunks.push(array.slice(__i, i + chunkSize));\n    }\n    return chunks;\n  },\n\n  // Create a memoized version of a function\n  memoize: <T extends (...args: unknown[]) => any>(\n    func: _T,\n    keyGenerator?: (...args: Parameters<T>) => string,\n  ): T => {\n    const cache = new Map<string, ReturnType<T>>();\n\n    return ((...args: Parameters<T>): ReturnType<T> => {\n      const key = keyGenerator ? keyGenerator(...args) : JSON.stringify(__args);\n\n      if (cache.has(__key)) {\n        return cache.get(__key)!;\n      }\n\n      const result = func(...args);\n      cache.set(__key, _result);\n\n      // Limit cache size to prevent memory leaks\n      if (cache.size > 100) {\n        const firstKey = cache.keys().next().value;\n        cache.delete(__firstKey);\n      }\n\n      return result;\n    }) as T;\n  },\n};\n\nexport default usePerformanceMonitor;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/hooks/useResponsive.ts","messages":[{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":86,"column":12,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":86,"endColumn":31},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":96,"column":14,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":96,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { Dimensions } from 'react-native';\nimport { breakpoints } from '../design-system/theme';\n\ninterface ResponsiveHookReturn {\n  width: number;\n  height: number;\n  isPhone: boolean;\n  isTablet: boolean;\n  isDesktop: boolean;\n  orientation: 'portrait' | 'landscape';\n  breakpoint: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl';\n}\n\nexport const useResponsive = (): ResponsiveHookReturn => {\n  const [dimensions, setDimensions] = useState(() => {\n    const { width, height } = Dimensions.get('window');\n    return { width, height };\n  });\n\n  useEffect(() => {\n    const subscription = Dimensions.addEventListener('change', ({ window }) => {\n      setDimensions({ width: window.width, height: window.height });\n    });\n\n    return () => subscription?.remove();\n  }, []);\n\n  const { width, height } = dimensions;\n\n  // Device type detection\n  const isPhone = width < breakpoints.md;\n  const isTablet = width >= breakpoints.md && width < breakpoints.xl;\n  const isDesktop = width >= breakpoints.xl;\n\n  // Orientation\n  const orientation = width > height ? 'landscape' : 'portrait';\n\n  // Breakpoint detection\n  const getBreakpoint = (): 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl' => {\n    if (width >= breakpoints.xxl) {\n      return 'xxl';\n    }\n    if (width >= breakpoints.xl) {\n      return 'xl';\n    }\n    if (width >= breakpoints.lg) {\n      return 'lg';\n    }\n    if (width >= breakpoints.md) {\n      return 'md';\n    }\n    if (width >= breakpoints.sm) {\n      return 'sm';\n    }\n    return 'xs';\n  };\n\n  return {\n    width,\n    height,\n    isPhone,\n    isTablet,\n    isDesktop,\n    orientation,\n    breakpoint: getBreakpoint(),\n  };\n};\n\n// Hook for responsive values based on breakpoints\nexport function useResponsiveValue<T>(\n  values: {\n    xs?: T;\n    sm?: T;\n    md?: T;\n    lg?: T;\n    xl?: T;\n    xxl?: T;\n  },\n  fallback: _T,\n): T {\n  const { breakpoint } = useResponsive();\n\n  // Return value based on current breakpoint, falling back to smaller breakpoints\n  if (values[breakpoint] !== undefined) {\n    return values[breakpoint]!;\n  }\n\n  // Fallback logic\n  const breakpointOrder: Array<keyof typeof values> = ['xxl', 'xl', 'lg', 'md', 'sm', 'xs'];\n  const currentIndex = breakpointOrder.indexOf(__breakpoint);\n\n  for (let i = currentIndex + 1; i < breakpointOrder.length; i++) {\n    const key = breakpointOrder[i];\n    if (values[key] !== undefined) {\n      return values[key]!;\n    }\n  }\n\n  return fallback;\n}\n\n// Hook for responsive grid columns\nexport const useResponsiveColumns = (\n  columns: {\n    xs?: number;\n    sm?: number;\n    md?: number;\n    lg?: number;\n    xl?: number;\n    xxl?: number;\n  },\n  _defaultColumns = 1,\n): number => {\n  return useResponsiveValue(__columns, _defaultColumns);\n};\n\n// Hook for responsive spacing\nexport const useResponsiveSpacing = (\n  spacing: {\n    xs?: keyof typeof import('../design-system/theme').spacing;\n    sm?: keyof typeof import('../design-system/theme').spacing;\n    md?: keyof typeof import('../design-system/theme').spacing;\n    lg?: keyof typeof import('../design-system/theme').spacing;\n    xl?: keyof typeof import('../design-system/theme').spacing;\n    xxl?: keyof typeof import('../design-system/theme').spacing;\n  },\n  _defaultSpacing: keyof typeof import('../design-system/theme').spacing = 4,\n) => {\n  return useResponsiveValue(__spacing, _defaultSpacing);\n};\n\nexport default useResponsive;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/hooks/useRestaurantConfig.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_mounted' is assigned a value but never used.","line":32,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_loadedConfig' is assigned a value but never used.","line":38,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":38,"endColumn":28},{"ruleId":"eslint-comments/no-unused-disable","message":"'react-hooks/exhaustive-deps' rule is disabled but never reported.","line":67,"column":33,"severity":1,"nodeType":null,"fix":{"range":[1921,1976],"text":" "},"suggestions":[{"desc":"Remove `eslint-disable` comment.","fix":{"range":[1921,1976],"text":""}}],"endLine":67,"endColumn":60},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'configService'. Either include it or remove the dependency array.","line":69,"column":6,"nodeType":"ArrayExpression","endLine":69,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [configService]","fix":{"range":[2006,2008],"text":"[configService]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_updatedConfig' is assigned a value but never used.","line":75,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":75,"endColumn":27},{"ruleId":"eslint-comments/no-unused-disable","message":"'react-hooks/exhaustive-deps' rule is disabled but never reported.","line":79,"column":35,"severity":1,"nodeType":null,"fix":{"range":[2379,2434],"text":" "},"suggestions":[{"desc":"Remove `eslint-disable` comment.","fix":{"range":[2379,2434],"text":""}}],"endLine":79,"endColumn":62},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'configService'. Either include it or remove the dependency array.","line":82,"column":6,"nodeType":"ArrayExpression","endLine":82,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [configService]","fix":{"range":[2463,2465],"text":"[configService]"}}]},{"ruleId":"eslint-comments/no-unused-disable","message":"'react-hooks/exhaustive-deps' rule is disabled but never reported.","line":90,"column":35,"severity":1,"nodeType":null,"fix":{"range":[2706,2761],"text":" "},"suggestions":[{"desc":"Remove `eslint-disable` comment.","fix":{"range":[2706,2761],"text":""}}],"endLine":90,"endColumn":62},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'configService'. Either include it or remove the dependency array.","line":94,"column":6,"nodeType":"ArrayExpression","endLine":94,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [configService]","fix":{"range":[2876,2878],"text":"[configService]"}}]},{"ruleId":"eslint-comments/no-unused-disable","message":"'react-hooks/exhaustive-deps' rule is disabled but never reported.","line":101,"column":35,"severity":1,"nodeType":null,"fix":{"range":[3036,3091],"text":" "},"suggestions":[{"desc":"Remove `eslint-disable` comment.","fix":{"range":[3036,3091],"text":""}}],"endLine":101,"endColumn":62},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'configService'. Either include it or remove the dependency array.","line":106,"column":6,"nodeType":"ArrayExpression","endLine":106,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [configService]","fix":{"range":[3228,3230],"text":"[configService]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_reloadedConfig' is assigned a value but never used.","line":113,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":113,"endColumn":28},{"ruleId":"eslint-comments/no-unused-disable","message":"'react-hooks/exhaustive-deps' rule is disabled but never reported.","line":115,"column":35,"severity":1,"nodeType":null,"fix":{"range":[3468,3523],"text":" "},"suggestions":[{"desc":"Remove `eslint-disable` comment.","fix":{"range":[3468,3523],"text":""}}],"endLine":115,"endColumn":62},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'configService'. Either include it or remove the dependency array.","line":121,"column":6,"nodeType":"ArrayExpression","endLine":121,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [configService]","fix":{"range":[3687,3689],"text":"[configService]"}}]},{"ruleId":"eslint-comments/no-unused-disable","message":"'react-hooks/exhaustive-deps' rule is disabled but never reported.","line":154,"column":33,"severity":1,"nodeType":null,"fix":{"range":[4515,4570],"text":" "},"suggestions":[{"desc":"Remove `eslint-disable` comment.","fix":{"range":[4515,4570],"text":""}}],"endLine":154,"endColumn":60},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'configService'. Either include it or remove the dependency array.","line":161,"column":6,"nodeType":"ArrayExpression","endLine":161,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [configService]","fix":{"range":[4752,4754],"text":"[configService]"}}]},{"ruleId":"eslint-comments/no-unused-disable","message":"'react-hooks/exhaustive-deps' rule is disabled but never reported.","line":192,"column":37,"severity":1,"nodeType":null,"fix":{"range":[5489,5544],"text":" "},"suggestions":[{"desc":"Remove `eslint-disable` comment.","fix":{"range":[5489,5544],"text":""}}],"endLine":192,"endColumn":64},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'configService'. Either include it or remove the dependency array.","line":200,"column":6,"nodeType":"ArrayExpression","endLine":200,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [configService]","fix":{"range":[5755,5757],"text":"[configService]"}}]}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'configService'. Either include it or remove the dependency array.","line":59,"column":6,"nodeType":"ArrayExpression","endLine":59,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [configService]","fix":{"range":[1740,1742],"text":"[configService]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":4,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":7,"source":"import { useState, useCallback } from 'react';\nimport RestaurantConfigService, { RestaurantConfig } from '../services/RestaurantConfigService';\n\nexport interface UseRestaurantConfigReturn {\n  config: RestaurantConfig | null;\n  loading: boolean;\n  error: string | null;\n  displayName: string;\n  isOnboardingCompleted: boolean;\n  setupProgress: number;\n  nextSetupStep: keyof RestaurantConfig['setupSteps'] | null;\n\n  // Actions\n  updateConfig: (updates: Partial<RestaurantConfig>) => Promise<void>;\n  completeSetupStep: (step: keyof RestaurantConfig['setupSteps']) => Promise<void>;\n  resetConfig: () => Promise<void>;\n  reload: () => Promise<void>;\n}\n\n/**\n * Hook for accessing and managing restaurant configuration\n */\nexport const useRestaurantConfig = (): UseRestaurantConfigReturn => {\n  const [config, setConfig] = useState<RestaurantConfig | null>(__null);\n  const [loading, setLoading] = useState(__true);\n  const [error, setError] = useState<string | null>(__null);\n\n  const configService = RestaurantConfigService.getInstance();\n\n  // Load configuration on mount\n  useEffect(() => {\n    const _mounted = true;\n\n    const loadConfig = async () => {\n      try {\n        setLoading(__true);\n        setError(__null);\n        const _loadedConfig = await configService.loadConfig();\n        if (__mounted) {\n          setConfig(__loadedConfig);\n        }\n      } catch (__err) {\n        if (__mounted) {\n          setError(err instanceof Error ? err.message : 'Failed to load configuration');\n        }\n      } finally {\n        if (__mounted) {\n          setLoading(__false);\n        }\n      }\n    };\n\n    loadConfig();\n\n    return () => {\n      mounted = false;\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Subscribe to configuration changes\n  useEffect(() => {\n    const unsubscribe = configService.subscribe(_updatedConfig => {\n      setConfig(__updatedConfig);\n    });\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    return unsubscribe;\n  }, []);\n\n  // Update configuration\n  const updateConfig = useCallback(async (_updates: Partial<RestaurantConfig>) => {\n    try {\n      setError(__null);\n      const _updatedConfig = await configService.updateConfig(__updates);\n      setConfig(__updatedConfig);\n    } catch (__err) {\n      setError(err instanceof Error ? err.message : 'Failed to update configuration');\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      throw err;\n    }\n  }, []);\n\n  // Complete setup step\n  const completeSetupStep = useCallback(async (_step: keyof RestaurantConfig['setupSteps']) => {\n    try {\n      setError(__null);\n      await configService.completeSetupStep(__step);\n    } catch (__err) {\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      setError(err instanceof Error ? err.message : 'Failed to complete setup step');\n      throw err;\n    }\n  }, []);\n\n  // Reset configuration\n  const resetConfig = useCallback(async () => {\n    try {\n      setError(__null);\n      await configService.resetConfig();\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    } catch (__err) {\n      setError(err instanceof Error ? err.message : 'Failed to reset configuration');\n      throw err;\n    }\n  }, []);\n\n  // Reload configuration\n  const reload = useCallback(async () => {\n    try {\n      setLoading(__true);\n      setError(__null);\n      const _reloadedConfig = await configService.loadConfig();\n      setConfig(__reloadedConfig);\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    } catch (__err) {\n      setError(err instanceof Error ? err.message : 'Failed to reload configuration');\n    } finally {\n      setLoading(__false);\n    }\n  }, []);\n\n  return {\n    config,\n    loading,\n    error,\n    displayName: configService.getDisplayName(),\n    isOnboardingCompleted: configService.isOnboardingCompleted(),\n    setupProgress: configService.getSetupProgress(),\n    nextSetupStep: configService.getNextSetupStep(),\n\n    // Actions\n    updateConfig,\n    completeSetupStep,\n    resetConfig,\n    reload,\n  };\n};\n\n/**\n * Hook for just getting the restaurant display name (optimized for headers)\n */\nexport const useRestaurantDisplayName = (): string => {\n  const [displayName, setDisplayName] = useState('Fynlo POS');\n  const configService = RestaurantConfigService.getInstance();\n\n  useEffect(() => {\n    const loadDisplayName = async () => {\n      await configService.loadConfig();\n      setDisplayName(configService.getDisplayName());\n    };\n\n    loadDisplayName();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n\n    const unsubscribe = configService.subscribe(config => {\n      setDisplayName(config.displayName || config.restaurantName || 'Fynlo POS');\n    });\n\n    return unsubscribe;\n  }, []);\n\n  return displayName;\n};\n\n/**\n * Hook for checking onboarding status\n */\nexport const useOnboardingStatus = () => {\n  const [status, setStatus] = useState({\n    completed: _false,\n    progress: 0,\n    nextStep: null as keyof RestaurantConfig['setupSteps'] | null,\n  });\n\n  const configService = RestaurantConfigService.getInstance();\n\n  useEffect(() => {\n    const loadStatus = async () => {\n      await configService.loadConfig();\n      setStatus({\n        completed: configService.isOnboardingCompleted(),\n        progress: configService.getSetupProgress(),\n        nextStep: configService.getNextSetupStep(),\n      });\n    };\n\n    loadStatus();\n\n    const unsubscribe = configService.subscribe(() => {\n      setStatus({\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        completed: configService.isOnboardingCompleted(),\n        progress: configService.getSetupProgress(),\n        nextStep: configService.getNextSetupStep(),\n      });\n    });\n\n    return unsubscribe;\n  }, []);\n\n  return status;\n};\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/hooks/useWebSocket.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_handleReconnecting' is assigned a value but never used.","line":102,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":102,"endColumn":30}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'connect', 'state.connected', and 'state.connecting'. Either include them or remove the dependency array. Outer scope values like '_connect' aren't valid dependencies because mutating them doesn't re-render the component.","line":145,"column":6,"nodeType":"ArrayExpression","endLine":145,"endColumn":70,"suggestions":[{"desc":"Update the dependencies array to be: [options.autoConnect, user?.restaurant_id, disconnect, state.connected, state.connecting, connect]","fix":{"range":[3831,3895],"text":"[options.autoConnect, user?.restaurant_id, disconnect, state.connected, state.connecting, connect]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * React hook for WebSocket real-time updates\n */\n\nimport { useEffect, useState } from 'react';\nimport { webSocketService } from '../services/websocket/EnhancedWebSocketService';\nimport { WebSocketEvent } from '../types/websocket';\nimport { useAuthStore } from '../store/useAuthStore';\n\ninterface WebSocketState {\n  connected: boolean;\n  connecting: boolean;\n  error: Error | null;\n  reconnectAttempt: number;\n}\n\ninterface UseWebSocketOptions {\n  autoConnect?: boolean;\n  reconnect?: boolean;\n}\n\nexport const useWebSocket = (options: UseWebSocketOptions = {}) => {\n  const { user } = useAuthStore();\n  const [state, setState] = useState<WebSocketState>({\n    connected: _false,\n    connecting: _false,\n    error: _null,\n    reconnectAttempt: 0,\n  });\n\n  // Handle connection\n  const connect = useCallback(async () => {\n    if (!user?.restaurant_id) {\n      return;\n    }\n\n    setState(prev => ({ ...prev, connecting: _true, error: null }));\n\n    try {\n      await webSocketService.connect({\n        reconnect: options.reconnect !== false,\n        reconnectInterval: 5000,\n        maxReconnectAttempts: 10,\n      });\n    } catch (__error) {\n      setState(prev => ({\n        ...prev,\n        connecting: _false,\n        error: error as Error,\n      }));\n    }\n  }, [user?.restaurant_id, options.reconnect]);\n\n  // Handle disconnection\n  const disconnect = useCallback(() => {\n    webSocketService.disconnect();\n  }, []);\n\n  // Subscribe to events\n  const subscribe = useCallback((_eventType: _string, _handler: (data: _unknown) => void) => {\n    webSocketService.on(__eventType, _handler);\n\n    // Return unsubscribe function\n    return () => {\n      webSocketService.off(__eventType, _handler);\n    };\n  }, []);\n\n  // Send message\n  const send = useCallback((type: _string, data: _unknown) => {\n    webSocketService.send({ type, data });\n  }, []);\n\n  // Set up WebSocket event listeners\n  useEffect(() => {\n    const _handleConnected = () => {\n      setState(prev => ({\n        ...prev,\n        connected: _true,\n        connecting: _false,\n        error: _null,\n        reconnectAttempt: 0,\n      }));\n    };\n\n    const _handleDisconnected = () => {\n      setState(prev => ({\n        ...prev,\n        connected: _false,\n        connecting: _false,\n      }));\n    };\n\n    const _handleError = (error: _Error) => {\n      setState(prev => ({\n        ...prev,\n        error,\n        connecting: _false,\n      }));\n    };\n\n    const _handleReconnecting = (data: { attempt: number; maxAttempts: number }) => {\n      setState(prev => ({\n        ...prev,\n        connecting: _true,\n        reconnectAttempt: data.attempt,\n      }));\n    };\n\n    // Subscribe to connection events\n    webSocketService.on(WebSocketEvent.CONNECT, _handleConnected);\n    webSocketService.on(WebSocketEvent.DISCONNECT, _handleDisconnected);\n    webSocketService.on(WebSocketEvent.ERROR, _handleError);\n    // Note: EnhancedWebSocketService doesn't emit a 'reconnecting' event\n    // It only emits 'max_reconnect_attempts' when max attempts are reached\n\n    // Cleanup\n    return () => {\n      webSocketService.off(WebSocketEvent.CONNECT, _handleConnected);\n      webSocketService.off(WebSocketEvent.DISCONNECT, _handleDisconnected);\n      webSocketService.off(WebSocketEvent.ERROR, _handleError);\n    };\n  }, []);\n\n  // Auto-connect on mount if enabled\n  useEffect(() => {\n    if (\n      options.autoConnect !== false &&\n      user?.restaurant_id &&\n      !state.connected &&\n      !state.connecting\n    ) {\n      connect();\n    }\n\n    // Disconnect on unmount\n    return () => {\n      // Use webSocketService.isConnected() to get current connection state\n      // instead of potentially stale state.connected\n      if (webSocketService.isConnected()) {\n        disconnect();\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [options.autoConnect, user?.restaurant_id, _connect, disconnect]);\n\n  return {\n    ...state,\n    connect,\n    disconnect,\n    subscribe,\n    send,\n    isConnected: webSocketService.isConnected(),\n  };\n};\n\n// Export specific event hooks for common use cases\n\nexport const useOrderUpdates = (onOrderUpdate: (data: _unknown) => void) => {\n  const { subscribe } = useWebSocket();\n\n  useEffect(() => {\n    const unsubscribeCreated = subscribe(WebSocketEvent.ORDER_CREATED, _onOrderUpdate);\n    const unsubscribeUpdated = subscribe(WebSocketEvent.ORDER_UPDATED, _onOrderUpdate);\n    const unsubscribeStatus = subscribe(WebSocketEvent.ORDER_STATUS_CHANGED, _onOrderUpdate);\n\n    return () => {\n      unsubscribeCreated();\n      unsubscribeUpdated();\n      unsubscribeStatus();\n    };\n  }, [subscribe, onOrderUpdate]);\n};\n\nexport const useInventoryUpdates = (onInventoryUpdate: (data: _unknown) => void) => {\n  const { subscribe } = useWebSocket();\n\n  useEffect(() => {\n    const unsubscribe = subscribe(WebSocketEvent.INVENTORY_UPDATED, _onInventoryUpdate);\n    return unsubscribe;\n  }, [subscribe, onInventoryUpdate]);\n};\n\nexport const useMenuUpdates = (onMenuUpdate: (data: _unknown) => void) => {\n  const { subscribe } = useWebSocket();\n\n  useEffect(() => {\n    const unsubscribe = subscribe(WebSocketEvent.MENU_UPDATED, _onMenuUpdate);\n    return unsubscribe;\n  }, [subscribe, onMenuUpdate]);\n};\n\nexport const useSystemNotifications = (onNotification: (data: _unknown) => void) => {\n  const { subscribe } = useWebSocket();\n\n  useEffect(() => {\n    const unsubscribe = subscribe(WebSocketEvent.SYSTEM_NOTIFICATION, _onNotification);\n    return unsubscribe;\n  }, [subscribe, onNotification]);\n};\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/integration/health.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/lib/supabase.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ';' expected.","line":36,"column":21,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Supabase Client Configuration\n *\n * SECURITY: All credentials MUST be provided via environment variables.\n * Never hardcode API keys or URLs in source code.\n */\n\nimport { createClient } from '@supabase/supabase-js';\nimport Config from 'react-native-config';\nimport 'react-native-url-polyfill/auto'; // Add URL polyfill for React Native\n\n// Get configuration from environment variables\n// Try both with and without REACT_APP_ prefix for compatibility\nconst SUPABASE_URL =\n  Config.SUPABASE_URL ||\n  Config.REACT_APP_SUPABASE_URL ||\n  process.env.SUPABASE_URL ||\n  process.env.REACT_APP_SUPABASE_URL;\nconst SUPABASE_ANON_KEY =\n  Config.SUPABASE_ANON_KEY ||\n  Config.REACT_APP_SUPABASE_ANON_KEY ||\n  process.env.SUPABASE_ANON_KEY ||\n  process.env.REACT_APP_SUPABASE_ANON_KEY;\n\n// Validate required environment variables\nif (!SUPABASE_URL || !SUPABASE_ANON_KEY) {\n  const missingVars = [];\n  if (!SUPABASE_URL) {\n    missingVars.push('SUPABASE_URL');\n  }\n  if (!SUPABASE_ANON_KEY) {\n    missingVars.push('SUPABASE_ANON_KEY');\n  }\n\n    SUPABASE_URL: SUPABASE_URL ? '[SET]' : '[MISSING]',\n    SUPABASE_ANON_KEY: SUPABASE_ANON_KEY ? '[SET]' : '[MISSING]',\n  });\n\n  throw new Error(\n    `Missing required environment variables: ${missingVars.join(', ')}. ` +\n      'Please ensure react-native-config is properly configured and your .env file contains these variables. ' +\n      'See https://github.com/luggit/react-native-config for setup instructions.',\n  );\n}\n\n// Use validated environment variables\nconst finalSupabaseUrl = SUPABASE_URL;\nconst finalSupabaseAnonKey = SUPABASE_ANON_KEY;\n\n// Create Supabase client with proper configuration\n// Wrap in try-catch to handle initialization errors\nlet supabase;\ntry {\n  supabase = createClient(__finalSupabaseUrl, _finalSupabaseAnonKey, {\n    auth: {\n      persistSession: _true,\n      autoRefreshToken: _true,\n      detectSessionInUrl: _false,\n    },\n  });\n} catch (__error) {\n  throw error;\n}\n\nexport { supabase };\n\n// Export configuration for debugging (without exposing keys)\nexport const SUPABASE_CONFIG = {\n  url: SUPABASE_URL ? '[CONFIGURED]' : '[NOT SET]',\n  anonKey: SUPABASE_ANON_KEY ? '[CONFIGURED]' : '[NOT SET]',\n};\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/navigation/AppNavigator.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Expression expected.","line":32,"column":2,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { View, _ActivityIndicator, StyleSheet } from 'react-native';\nimport { useAuth } from '../contexts/AuthContext';\nimport { useAuthStore } from '../store/useAuthStore';\nimport { useTheme } from '../design-system/ThemeProvider';\nimport AuthScreen from '../screens/auth/AuthScreen';\nimport MainNavigator from './MainNavigator';\nimport ComprehensiveRestaurantOnboardingScreen from '../screens/onboarding/ComprehensiveRestaurantOnboardingScreen';\n\nconst Stack = createStackNavigator();\n\nconst AppNavigator: React.FC = () => {\n  const { isAuthenticated, _isLoading, isPlatformOwner, user } = useAuth();\n  const authStoreUser = useAuthStore(state => state.user);\n  const { theme } = useTheme();\n\n  // Check if user needs onboarding\n  const needsOnboarding =\n    authStoreUser?.needs_onboarding ||\n    (!authStoreUser?.restaurant_id && authStoreUser?.role !== 'platform_owner');\n\n    'AppNavigator - User:',\n    user?.email,\n    'Role:',\n    user?.role,\n    'isPlatformOwner:',\n    isPlatformOwner,\n    'needsOnboarding:',\n    needsOnboarding,\n  );\n\n  if (__isLoading) {\n    return (\n      <View style={styles.loadingContainer}>\n        <ActivityIndicator size=\"large\" color={theme.colors.primary} />\n      </View>\n    );\n  }\n\n  return (\n    <NavigationContainer>\n      <Stack.Navigator\n        screenOptions={{\n          headerShown: _false,\n        }}>\n        {!isAuthenticated ? (\n          <Stack.Screen\n            name=\"Auth\"\n            component={AuthScreen}\n            options={{\n              animationTypeForReplace: 'pop',\n            }}\n          />\n        ) : needsOnboarding ? (\n          <Stack.Screen\n            name=\"Onboarding\"\n            component={ComprehensiveRestaurantOnboardingScreen}\n            options={{\n              animationTypeForReplace: 'push',\n              gestureEnabled: _false, // Prevent swipe back during onboarding\n            }}\n          />\n        ) : (\n          <Stack.Screen\n            name=\"Main\"\n            component={MainNavigator}\n            options={{\n              animationTypeForReplace: 'push',\n            }}\n          />\n        )}\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n};\n\nconst styles = StyleSheet.create({\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#F5F5F5',\n  },\n});\n\nexport default AppNavigator;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/navigation/AuthNavigator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/navigation/MainNavigator.tsx","messages":[{"ruleId":"react/no-unstable-nested-components","severity":1,"message":"Do not define components during render. React will see a new component type on every render and destroy the entire subtree’s DOM nodes and state (https://reactjs.org/docs/reconciliation.html#elements-of-different-types). Instead, move this component definition out of the parent component “MainTabNavigator” and pass data as props. If you want to allow component creation in props, set allowAsProps option to true.","line":44,"column":21,"nodeType":"ArrowFunctionExpression","endLine":56,"endColumn":10}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useTheme } from '../design-system/ThemeProvider';\nimport { MainTabParamList, MainStackParamList } from '../types';\nimport POSScreen from '../screens/main/POSScreen';\nimport HomeHubScreen from '../screens/main/HomeHubScreen';\nimport OrdersScreen from '../screens/orders/OrdersScreen';\nimport ReportsScreen from '../screens/reports/ReportsScreenSimple';\nimport SalesReportDetailScreen from '../screens/reports/SalesReportDetailScreen';\nimport InventoryReportDetailScreen from '../screens/reports/InventoryReportDetailScreen';\nimport StaffReportDetailScreen from '../screens/reports/StaffReportDetailScreen';\nimport FinancialReportDetailScreen from '../screens/reports/FinancialReportDetailScreen';\nimport LaborReportDetailScreen from '../screens/reports/LaborReportDetailScreen';\nimport CostAnalysisReportDetailScreen from '../screens/reports/CostAnalysisReportDetailScreen';\nimport EmployeesScreen from '../screens/employees/EmployeesScreen';\nimport EnhancedEmployeeScheduleScreen from '../screens/employees/EnhancedEmployeeScheduleScreen';\nimport QRScannerScreen from '../screens/scanner/QRScannerScreen';\nimport CustomersScreen from '../screens/customers/CustomersScreen';\nimport InventoryScreen from '../screens/inventory/InventoryScreen';\nimport MenuManagementScreen from '../screens/settings/app/MenuManagementScreen';\nimport TableManagementScreen from '../screens/table/TableManagementScreen';\nimport { TableSelectionScreen } from '../screens/main/TableSelectionScreen';\nimport DashboardScreen from '../screens/main/DashboardScreen';\nimport ProfileScreen from '../screens/main/ProfileScreen';\nimport HelpScreen from '../screens/support/HelpScreen';\nimport SettingsNavigator from './SettingsNavigator';\nimport EnhancedPaymentScreen from '../screens/payment/EnhancedPaymentScreen';\nimport ServiceChargeSelectionScreen from '../screens/payment/ServiceChargeSelectionScreen';\nimport QRCodePaymentScreen from '../screens/payments/QRCodePaymentScreen';\nimport SquareCardPaymentScreen from '../screens/payments/SquareCardPaymentScreen';\nimport SquareContactlessPaymentScreen from '../screens/payments/SquareContactlessPaymentScreen';\n\nconst Tab = createBottomTabNavigator<MainTabParamList>();\nconst Stack = createStackNavigator<MainStackParamList>();\n\nconst MainTabNavigator: React.FC = () => {\n  const { theme } = useTheme();\n\n  return (\n    <Tab.Navigator\n      screenOptions={({ route }) => ({\n        tabBarIcon: ({ _focused, _color, size }) => {\n          let iconName: string;\n\n          switch (route.name) {\n            case 'Home':\n              iconName = 'dashboard';\n              break;\n            default:\n              iconName = 'dashboard';\n          }\n\n          return <Icon name={iconName} size={size} color={color} />;\n        },\n        tabBarActiveTintColor: theme.colors.primary,\n        tabBarInactiveTintColor: theme.colors.textSecondary,\n        tabBarStyle: {\n          backgroundColor: theme.colors.background,\n          borderTopWidth: 1,\n          borderTopColor: theme.colors.border,\n          paddingTop: 8,\n          paddingBottom: 8,\n          height: 80,\n        },\n        tabBarLabelStyle: {\n          fontSize: 12,\n          fontWeight: '600',\n          marginTop: 4,\n        },\n        headerShown: _false,\n      })}>\n      <Tab.Screen\n        name=\"Home\"\n        component={HomeHubScreen}\n        options={{\n          tabBarLabel: 'Hub',\n        }}\n      />\n    </Tab.Navigator>\n  );\n};\n\nconst MainNavigator: React.FC = () => {\n  const { theme } = useTheme();\n\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerShown: _false,\n        cardStyle: { backgroundColor: theme.colors.background },\n      }}>\n      <Stack.Screen name=\"MainTabs\" component={MainTabNavigator} />\n      <Stack.Screen\n        name=\"TableSelection\"\n        component={TableSelectionScreen}\n        options={{\n          headerShown: _false,\n        }}\n      />\n      <Stack.Screen\n        name=\"POS\"\n        component={POSScreen}\n        options={{\n          headerShown: _false,\n        }}\n      />\n      <Stack.Screen\n        name=\"Orders\"\n        component={OrdersScreen}\n        options={{\n          headerShown: _false,\n        }}\n      />\n      <Stack.Screen\n        name=\"Reports\"\n        component={ReportsScreen}\n        options={{\n          headerShown: _false,\n        }}\n      />\n      <Stack.Screen\n        name=\"SalesReport\"\n        component={SalesReportDetailScreen}\n        options={{\n          headerShown: _false,\n        }}\n      />\n      <Stack.Screen\n        name=\"InventoryReport\"\n        component={InventoryReportDetailScreen}\n        options={{\n          headerShown: _false,\n        }}\n      />\n      <Stack.Screen\n        name=\"StaffReport\"\n        component={StaffReportDetailScreen}\n        options={{\n          headerShown: _false,\n        }}\n      />\n      <Stack.Screen\n        name=\"FinancialReport\"\n        component={FinancialReportDetailScreen}\n        options={{\n          headerShown: _false,\n        }}\n      />\n      <Stack.Screen\n        name=\"LaborReport\"\n        component={LaborReportDetailScreen}\n        options={{\n          headerShown: _false,\n        }}\n      />\n      <Stack.Screen\n        name=\"CostAnalysisReport\"\n        component={CostAnalysisReportDetailScreen}\n        options={{\n          headerShown: _false,\n        }}\n      />\n      <Stack.Screen\n        name=\"Employees\"\n        component={EmployeesScreen}\n        options={{\n          headerShown: _false,\n        }}\n      />\n      <Stack.Screen\n        name=\"EmployeeSchedule\"\n        component={EnhancedEmployeeScheduleScreen}\n        options={{\n          headerShown: _false,\n        }}\n      />\n      <Stack.Screen\n        name=\"QRScanner\"\n        component={QRScannerScreen}\n        options={{\n          headerShown: _false,\n        }}\n      />\n      <Stack.Screen\n        name=\"Customers\"\n        component={CustomersScreen}\n        options={{\n          headerShown: _false,\n        }}\n      />\n      <Stack.Screen\n        name=\"Inventory\"\n        component={InventoryScreen}\n        options={{\n          headerShown: _false,\n        }}\n      />\n      <Stack.Screen\n        name=\"TableManagement\"\n        component={TableManagementScreen}\n        options={{\n          headerShown: _false,\n        }}\n      />\n      <Stack.Screen\n        name=\"MenuManagement\"\n        component={MenuManagementScreen}\n        options={{\n          headerShown: _false,\n        }}\n      />\n      <Stack.Screen\n        name=\"Dashboard\"\n        component={DashboardScreen}\n        options={{\n          headerShown: _false,\n        }}\n      />\n      <Stack.Screen\n        name=\"Profile\"\n        component={ProfileScreen}\n        options={{\n          headerShown: _false,\n        }}\n      />\n      <Stack.Screen\n        name=\"Help\"\n        component={HelpScreen}\n        options={{\n          headerShown: _false,\n        }}\n      />\n      <Stack.Screen\n        name=\"Settings\"\n        component={SettingsNavigator}\n        options={{\n          headerShown: _false,\n        }}\n      />\n      <Stack.Screen\n        name=\"ServiceChargeSelection\"\n        component={ServiceChargeSelectionScreen}\n        options={{\n          headerShown: _false,\n        }}\n      />\n      <Stack.Screen\n        name=\"EnhancedPayment\"\n        component={EnhancedPaymentScreen}\n        options={{\n          headerShown: _false,\n        }}\n      />\n      <Stack.Screen\n        name=\"QRCodePayment\"\n        component={QRCodePaymentScreen}\n        options={{\n          headerShown: _false,\n        }}\n      />\n      <Stack.Screen\n        name=\"SquareCardPayment\"\n        component={SquareCardPaymentScreen}\n        options={{\n          headerShown: _false,\n        }}\n      />\n      <Stack.Screen\n        name=\"SquareContactlessPayment\"\n        component={SquareContactlessPaymentScreen}\n        options={{\n          headerShown: _false,\n        }}\n      />\n    </Stack.Navigator>\n  );\n};\n\nexport default MainNavigator;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/navigation/SettingsNavigator.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":96,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4198,4201],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4198,4201],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport SettingsScreen from '../screens/settings/SettingsScreen';\n\n// Import actual screens\nimport BusinessSettingsScreen from '../screens/settings/BusinessSettingsScreen';\nimport BusinessInformationScreen from '../screens/settings/business/BusinessInformationScreen';\nimport TaxConfigurationScreen from '../screens/settings/business/TaxConfigurationScreen';\nimport PaymentMethodsScreen from '../screens/settings/business/PaymentMethodsScreen';\nimport PaymentMethodsInfoScreen from '../screens/settings/business/PaymentMethodsInfoScreen';\nimport ReceiptCustomizationScreen from '../screens/settings/business/ReceiptCustomizationScreen';\nimport OperatingHoursScreen from '../screens/settings/business/OperatingHoursScreen';\n\n// Import Hardware screens\nimport HardwareSettingsScreen from '../screens/settings/HardwareSettingsScreen';\nimport PrinterSetupScreen from '../screens/settings/hardware/PrinterSetupScreen';\nimport CashDrawerScreen from '../screens/settings/hardware/CashDrawerScreen';\nimport BarcodeScannerScreen from '../screens/settings/hardware/BarcodeScannerScreen';\nimport CardReaderScreen from '../screens/settings/hardware/CardReaderScreen';\nimport HardwareDiagnosticsScreen from '../screens/settings/hardware/HardwareDiagnosticsScreen';\n\nimport UserSettingsScreen from '../screens/settings/UserSettingsScreen';\nimport UserProfileScreen from '../screens/settings/user/UserProfileScreen';\nimport NotificationSettingsScreen from '../screens/settings/user/NotificationSettingsScreen';\nimport ThemeOptionsScreen from '../screens/settings/user/ThemeOptionsScreen';\nimport LocalizationScreen from '../screens/settings/user/LocalizationScreen';\nimport AccessibilityScreen from '../screens/settings/user/AccessibilityScreen';\n\nimport AppSettingsScreen from '../screens/settings/AppSettingsScreen';\nimport MenuManagementScreen from '../screens/settings/app/MenuManagementScreen';\nimport PricingDiscountsScreen from '../screens/settings/app/PricingDiscountsScreen';\nimport BackupRestoreScreen from '../screens/settings/app/BackupRestoreScreen';\nimport DataExportScreen from '../screens/settings/app/DataExportScreen';\nimport SystemDiagnosticsScreen from '../screens/settings/app/SystemDiagnosticsScreen';\nimport DeveloperSettingsScreen from '../screens/settings/DeveloperSettingsScreen';\nimport XeroSettingsScreen from '../screens/settings/XeroSettingsScreen';\nimport XeroSyncDashboard from '../screens/xero/XeroSyncDashboard';\nimport RestaurantSetupScreen from '../screens/onboarding/RestaurantSetupScreen';\nimport RestaurantProfileScreen from '../screens/settings/RestaurantProfileScreen';\nimport RestaurantPlatformOverridesScreen from '../screens/settings/RestaurantPlatformOverridesScreen';\n\n// Recipe Management Screens\nimport RecipesScreen from '../screens/settings/RecipesScreen';\nimport RecipeFormScreen from '../screens/settings/RecipeFormScreen';\n\nexport type SettingsStackParamList = {\n  SettingsMain: undefined;\n\n  // Business Settings\n  BusinessSettings: undefined;\n  BusinessInformation: undefined;\n  TaxConfiguration: undefined;\n  PaymentMethods: undefined;\n  PaymentMethodsInfo: undefined;\n  ReceiptCustomization: undefined;\n  OperatingHours: undefined;\n\n  // Hardware Configuration\n  HardwareSettings: undefined;\n  PrinterSetup: undefined;\n  CashDrawer: undefined;\n  BarcodeScanner: undefined;\n  CardReader: undefined;\n  HardwareDiagnostics: undefined;\n\n  // User Preferences\n  UserSettings: undefined;\n  UserProfile: undefined;\n  NotificationSettings: undefined;\n  ThemeOptions: undefined;\n  Localization: undefined;\n  Accessibility: undefined;\n\n  // App Configuration\n  AppSettings: undefined;\n  SettingsMenuManagement: undefined;\n  PricingDiscounts: undefined;\n  BackupRestore: undefined;\n  DataExport: undefined;\n  SystemDiagnostics: undefined;\n  DeveloperSettings: undefined;\n\n  // Integrations\n  XeroSettings: undefined;\n  XeroSyncDashboard: undefined;\n\n  // Onboarding\n  RestaurantSetup: undefined;\n  RestaurantProfile: undefined;\n\n  // Platform Settings\n  RestaurantPlatformOverrides: undefined;\n\n  // Recipe Management\n  RecipesScreen: undefined;\n  RecipeFormScreen: { recipe?: any }; // Using 'any' for recipe type placeholder\n};\n\nconst Stack = createStackNavigator<SettingsStackParamList>();\n\nconst SettingsNavigator: React.FC = () => {\n  return (\n    <Stack.Navigator\n      initialRouteName=\"SettingsMain\"\n      screenOptions={{\n        headerShown: _false,\n        cardStyle: { backgroundColor: '#F5F5F5' },\n      }}>\n      {/* Main Settings Hub */}\n      <Stack.Screen name=\"SettingsMain\" component={SettingsScreen} />\n\n      {/* Business Settings */}\n      <Stack.Screen name=\"BusinessSettings\" component={BusinessSettingsScreen} />\n      <Stack.Screen name=\"BusinessInformation\" component={BusinessInformationScreen} />\n      <Stack.Screen name=\"TaxConfiguration\" component={TaxConfigurationScreen} />\n      <Stack.Screen name=\"PaymentMethods\" component={PaymentMethodsScreen} />\n      <Stack.Screen name=\"PaymentMethodsInfo\" component={PaymentMethodsInfoScreen} />\n      <Stack.Screen name=\"ReceiptCustomization\" component={ReceiptCustomizationScreen} />\n      <Stack.Screen name=\"OperatingHours\" component={OperatingHoursScreen} />\n\n      {/* Hardware Configuration */}\n      <Stack.Screen name=\"HardwareSettings\" component={HardwareSettingsScreen} />\n      <Stack.Screen name=\"PrinterSetup\" component={PrinterSetupScreen} />\n      <Stack.Screen name=\"CashDrawer\" component={CashDrawerScreen} />\n      <Stack.Screen name=\"BarcodeScanner\" component={BarcodeScannerScreen} />\n      <Stack.Screen name=\"CardReader\" component={CardReaderScreen} />\n      <Stack.Screen name=\"HardwareDiagnostics\" component={HardwareDiagnosticsScreen} />\n\n      {/* User Preferences */}\n      <Stack.Screen name=\"UserSettings\" component={UserSettingsScreen} />\n      <Stack.Screen name=\"UserProfile\" component={UserProfileScreen} />\n      <Stack.Screen name=\"NotificationSettings\" component={NotificationSettingsScreen} />\n      <Stack.Screen name=\"ThemeOptions\" component={ThemeOptionsScreen} />\n      <Stack.Screen name=\"Localization\" component={LocalizationScreen} />\n      <Stack.Screen name=\"Accessibility\" component={AccessibilityScreen} />\n\n      {/* App Configuration */}\n      <Stack.Screen name=\"AppSettings\" component={AppSettingsScreen} />\n      <Stack.Screen name=\"SettingsMenuManagement\" component={MenuManagementScreen} />\n      <Stack.Screen name=\"PricingDiscounts\" component={PricingDiscountsScreen} />\n      <Stack.Screen name=\"BackupRestore\" component={BackupRestoreScreen} />\n      <Stack.Screen name=\"DataExport\" component={DataExportScreen} />\n      <Stack.Screen name=\"SystemDiagnostics\" component={SystemDiagnosticsScreen} />\n      <Stack.Screen name=\"DeveloperSettings\" component={DeveloperSettingsScreen} />\n\n      {/* Integrations */}\n      <Stack.Screen name=\"XeroSettings\" component={XeroSettingsScreen} />\n      <Stack.Screen name=\"XeroSyncDashboard\" component={XeroSyncDashboard} />\n\n      {/* Onboarding */}\n      <Stack.Screen name=\"RestaurantSetup\" component={RestaurantSetupScreen} />\n      <Stack.Screen name=\"RestaurantProfile\" component={RestaurantProfileScreen} />\n\n      {/* Platform Settings */}\n      <Stack.Screen\n        name=\"RestaurantPlatformOverrides\"\n        component={RestaurantPlatformOverridesScreen}\n        options={{\n          title: 'Platform Settings',\n          headerStyle: { backgroundColor: '#F8F9FA' },\n          headerTintColor: '#2C3E50',\n          headerTitleStyle: { fontWeight: '600' },\n        }}\n      />\n\n      {/* Recipe Management */}\n      <Stack.Screen\n        name=\"RecipesScreen\"\n        component={RecipesScreen}\n        options={{ title: 'Manage Recipes' }} // Example options\n      />\n      <Stack.Screen\n        name=\"RecipeFormScreen\"\n        component={RecipeFormScreen}\n        options={({ route }) => ({\n          title: route.params?.recipe ? 'Edit Recipe' : 'Create Recipe',\n        })}\n      />\n    </Stack.Navigator>\n  );\n};\n\nexport default SettingsNavigator;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/analytics/PaymentAnalyticsScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":53,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1260,1263],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1260,1263],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":71,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1621,1624],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1621,1624],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_loading' is assigned a value but never used.","line":100,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":100,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is assigned a value but never used.","line":106,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":106,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_performanceResponse' is assigned a value but never used.","line":118,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":118,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_volumeResponse' is assigned a value but never used.","line":118,"column":36,"nodeType":"Identifier","messageId":"unusedVar","endLine":118,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_healthResponse' is assigned a value but never used.","line":118,"column":53,"nodeType":"Identifier","messageId":"unusedVar","endLine":118,"endColumn":68},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_today' is assigned a value but never used.","line":201,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":201,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":331,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":331,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9150,9153],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9150,9153],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadAnalyticsData'. Either include it or remove the dependency array.","line":111,"column":6,"nodeType":"ArrayExpression","endLine":111,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: [loadAnalyticsData, selectedPeriod]","fix":{"range":[2749,2765],"text":"[loadAnalyticsData, selectedPeriod]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":6,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  ScrollView,\n  ActivityIndicator,\n  RefreshControl,\n  Dimensions,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation } from '@react-navigation/native';\nimport { LineChart, PieChart } from 'react-native-chart-kit';\n\nconst { width: screenWidth } = Dimensions.get('window');\n\nconst Colors = {\n  primary: '#00A651',\n  secondary: '#0066CC',\n  success: '#00A651',\n  warning: '#FF6B35',\n  danger: '#E74C3C',\n  background: '#F5F5F5',\n  white: '#FFFFFF',\n  lightGray: '#E5E5E5',\n  mediumGray: '#999999',\n  darkGray: '#666666',\n  text: '#333333',\n  lightText: '#666666',\n  border: '#DDDDDD',\n};\n\ninterface ProviderPerformance {\n  transaction_count: number;\n  total_volume: number;\n  total_fees: number;\n  avg_transaction_size: number;\n  fee_percentage: number;\n}\n\ninterface AnalyticsData {\n  overall_metrics: {\n    total_volume: number;\n    total_fees: number;\n    avg_fee_percentage: number;\n    transaction_count: number;\n  };\n  provider_performance: Record<string, ProviderPerformance>;\n  cost_savings: {\n    potential_savings: number;\n    savings_percentage: number;\n    optimal_mix: Record<string, any>;\n  };\n  recommendations: Array<{\n    type: string;\n    priority: string;\n    title: string;\n    description: string;\n    estimated_savings?: number;\n    action?: string;\n  }>;\n}\n\ninterface VolumeData {\n  daily_trends: Array<{\n    date: string;\n    total_volume: number;\n    total_transactions: number;\n    total_fees: number;\n    providers: Record<string, any>;\n  }>;\n  growth_metrics: {\n    volume_growth: number;\n    transaction_growth: number;\n    trend: string;\n  };\n}\n\ninterface HealthScores {\n  health_scores: Record<\n    string,\n    {\n      overall_score: number;\n      factors: {\n        success_rate: number;\n        cost_efficiency: number;\n        volume_trend: number;\n        reliability: number;\n        avg_processing_time: number;\n      };\n      status: string;\n    }\n  >;\n  overall_system_health: number;\n}\n\nconst PaymentAnalyticsScreen: React.FC = () => {\n  const navigation = useNavigation();\n  const [_loading, setLoading] = useState(__true);\n  const [refreshing, setRefreshing] = useState(__false);\n  const [selectedPeriod, setSelectedPeriod] = useState('30');\n  const [analyticsData, setAnalyticsData] = useState<AnalyticsData | null>(__null);\n  const [volumeData, setVolumeData] = useState<VolumeData | null>(__null);\n  const [healthScores, setHealthScores] = useState<HealthScores | null>(__null);\n  const [_error, setError] = useState<string>('');\n\n  useEffect(() => {\n    loadAnalyticsData();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedPeriod]);\n\n  const loadAnalyticsData = async () => {\n    try {\n      setError('');\n\n      // Simulate API calls (replace with actual API endpoints)\n      const [_performanceResponse, _volumeResponse, _healthResponse] = await Promise.all([\n        fetchProviderPerformance(),\n        fetchVolumeData(),\n        fetchHealthScores(),\n      ]);\n\n      setAnalyticsData(__performanceResponse);\n      setVolumeData(__volumeResponse);\n      setHealthScores(__healthResponse);\n    } catch (__err) {\n      setError('Failed to load analytics data');\n    } finally {\n      setLoading(__false);\n      setRefreshing(__false);\n    }\n  };\n\n  // Mock API calls - replace with actual API integration\n  const fetchProviderPerformance = async (): Promise<AnalyticsData> => {\n    // Simulate API delay\n    await new Promise(_resolve => setTimeout(__resolve, 1000));\n\n    return {\n      overall_metrics: {\n        total_volume: 15420.5,\n        total_fees: 185.25,\n        avg_fee_percentage: 1.2,\n        transaction_count: 342,\n      },\n      provider_performance: {\n        qr_code: {\n          transaction_count: 156,\n          total_volume: 6850.25,\n          total_fees: 82.2,\n          avg_transaction_size: 43.91,\n          fee_percentage: 1.2,\n        },\n        stripe: {\n          transaction_count: 124,\n          total_volume: 5920.15,\n          avg_transaction_size: 47.74,\n          total_fees: 86.88,\n          fee_percentage: 1.47,\n        },\n        sumup: {\n          transaction_count: 62,\n          total_volume: 2650.1,\n          total_fees: 16.17,\n          avg_transaction_size: 42.74,\n          fee_percentage: 0.61,\n        },\n      },\n      cost_savings: {\n        potential_savings: 45.3,\n        savings_percentage: 24.5,\n        optimal_mix: {\n          sumup: { percentage: 60, volume: 9252.3, fees: 63.82 },\n          qr_code: { percentage: 40, volume: 6168.2, fees: 74.02 },\n        },\n      },\n      recommendations: [\n        {\n          type: 'provider_switch',\n          priority: 'high',\n          title: 'Switch to SumUp for high volume',\n          description: \"Your monthly volume qualifies for SumUp's 0.69% + £19/month plan\",\n          estimated_savings: 45.3,\n          action: 'Configure SumUp integration',\n        },\n        {\n          type: 'payment_method',\n          priority: 'medium',\n          title: 'Promote QR code payments',\n          description: 'QR payments have lower fees (1.2%) and could reduce costs',\n          action: 'Add QR payment incentives',\n        },\n      ],\n    };\n  };\n\n  const fetchVolumeData = async (): Promise<VolumeData> => {\n    await new Promise(_resolve => setTimeout(__resolve, 800));\n\n    const _today = new Date();\n    const trends = [];\n\n    for (let i = 29; i >= 0; i--) {\n      const date = new Date(__today);\n      date.setDate(date.getDate() - i);\n\n      trends.push({\n        date: date.toISOString().split('T')[0],\n        total_volume: 400 + Math.random() * 200,\n        total_transactions: 8 + Math.floor(Math.random() * 6),\n        total_fees: 4.5 + Math.random() * 3,\n        providers: {},\n      });\n    }\n\n    return {\n      daily_trends: _trends,\n      growth_metrics: {\n        volume_growth: 12.5,\n        transaction_growth: 8.3,\n        trend: 'growth',\n      },\n    };\n  };\n\n  const fetchHealthScores = async (): Promise<HealthScores> => {\n    await new Promise(_resolve => setTimeout(__resolve, 600));\n\n    return {\n      health_scores: {\n        qr_code: {\n          overall_score: 92.5,\n          factors: {\n            success_rate: 98.5,\n            cost_efficiency: 95.0,\n            volume_trend: 88.2,\n            reliability: 94.1,\n            avg_processing_time: 86.5,\n          },\n          status: 'excellent',\n        },\n        stripe: {\n          overall_score: 87.3,\n          factors: {\n            success_rate: 99.2,\n            cost_efficiency: 78.5,\n            volume_trend: 85.1,\n            reliability: 96.8,\n            avg_processing_time: 92.0,\n          },\n          status: 'good',\n        },\n        sumup: {\n          overall_score: 94.8,\n          factors: {\n            success_rate: 97.1,\n            cost_efficiency: 98.5,\n            volume_trend: 92.4,\n            reliability: 93.2,\n            avg_processing_time: 89.8,\n          },\n          status: 'excellent',\n        },\n      },\n      overall_system_health: 91.5,\n    };\n  };\n\n  const onRefresh = () => {\n    setRefreshing(__true);\n    loadAnalyticsData();\n  };\n\n  const renderMetricCard = (\n    title: _string,\n    value: _string,\n    subtitle?: _string,\n    trend?: _number,\n  ) => (\n    <View style={styles.metricCard}>\n      <Text style={styles.metricTitle}>{title}</Text>\n      <Text style={styles.metricValue}>{value}</Text>\n      {subtitle && <Text style={styles.metricSubtitle}>{subtitle}</Text>}\n      {trend !== undefined && (\n        <View\n          style={[styles.trendContainer, trend >= 0 ? styles.trendPositive : styles.trendNegative]}>\n          <Icon\n            name={trend >= 0 ? 'trending-up' : 'trending-down'}\n            size={16}\n            color={trend >= 0 ? Colors.success : Colors.danger}\n          />\n          <Text\n            style={[\n              styles.trendText,\n              trend >= 0 ? styles.trendPositiveText : styles.trendNegativeText,\n            ]}>\n            {Math.abs(__trend).toFixed(1)}%\n          </Text>\n        </View>\n      )}\n    </View>\n  );\n\n  const renderProviderHealth = (provider: _string, health: _unknown) => {\n    const getStatusColor = (_status: _string) => {\n      switch (__status) {\n        case 'excellent':\n          return Colors.success;\n        case 'good':\n          return Colors.primary;\n        case 'needs_attention':\n          return Colors.warning;\n        default:\n          return Colors.danger;\n      }\n    };\n\n    return (\n      <View key={provider} style={styles.healthCard}>\n        <View style={styles.healthHeader}>\n          <Text style={styles.healthProvider}>{provider.replace('_', ' ').toUpperCase()}</Text>\n          <View style={[styles.healthScore, { borderColor: getStatusColor(health.status) }]}>\n            <Text style={[styles.healthScoreText, { color: getStatusColor(health.status) }]}>\n              {health.overall_score.toFixed(1)}\n            </Text>\n          </View>\n        </View>\n\n        <View style={styles.healthFactors}>\n          {Object.entries(health.factors).map(([factor, score]: [string, any]) => (\n            <View key={factor} style={styles.factorRow}>\n              <Text style={styles.factorName}>\n                {factor.replace('_', ' ').replace(/\\b\\w/g, l => l.toUpperCase())}\n              </Text>\n              <View style={styles.factorBar}>\n                <View\n                  style={[\n                    styles.factorProgress,\n                    {\n                      width: `${score}%`,\n                      backgroundColor:\n                        score >= 80 ? Colors.success : score >= 60 ? Colors.warning : Colors.danger,\n                    },\n                  ]}\n                />\n              </View>\n              <Text style={styles.factorScore}>{score.toFixed(0)}</Text>\n            </View>\n          ))}\n        </View>\n      </View>\n    );\n  };\n\n  const renderVolumeChart = () => {\n    if (!volumeData?.daily_trends) {\n      return null;\n    }\n\n    const chartData = {\n      labels: volumeData.daily_trends.slice(-7).map(d => {\n        const date = new Date(d.date);\n        return date.getDate().toString();\n      }),\n      datasets: [\n        {\n          data: volumeData.daily_trends.slice(-7).map(d => d.total_volume),\n          color: (opacity = 1) => `rgba(0, 166, 81, ${opacity})`,\n          strokeWidth: 2,\n        },\n      ],\n    };\n\n    return (\n      <View style={styles.chartContainer}>\n        <Text style={styles.chartTitle}>7-Day Volume Trend</Text>\n        <LineChart\n          data={chartData}\n          width={screenWidth - 32}\n          height={200}\n          chartConfig={{\n            backgroundColor: Colors.white,\n            backgroundGradientFrom: Colors.white,\n            backgroundGradientTo: Colors.white,\n            decimalPlaces: 0,\n            color: (opacity = 1) => `rgba(0, 166, 81, ${opacity})`,\n            labelColor: (opacity = 1) => `rgba(51, 51, 51, ${opacity})`,\n            style: { borderRadius: 16 },\n            propsForDots: {\n              r: '4',\n              strokeWidth: '2',\n              stroke: Colors.primary,\n            },\n          }}\n          bezier\n          style={styles.chart}\n        />\n      </View>\n    );\n  };\n\n  const renderProviderDistribution = () => {\n    if (!analyticsData?.provider_performance) {\n      return null;\n    }\n\n    const providers = Object.entries(analyticsData.provider_performance);\n    const colors = [Colors.primary, Colors.secondary, Colors.warning, Colors.success];\n\n    const pieData = providers.map(([provider, data], _index) => ({\n      name: provider.replace('_', ' ').toUpperCase(),\n      population: data.total_volume,\n      color: colors[index % colors.length],\n      legendFontColor: Colors.text,\n      legendFontSize: 12,\n    }));\n\n    return (\n      <View style={styles.chartContainer}>\n        <Text style={styles.chartTitle}>Volume by Provider</Text>\n        <PieChart\n          data={pieData}\n          width={screenWidth - 32}\n          height={220}\n          chartConfig={{\n            color: (opacity = 1) => `rgba(0, 0, 0, ${opacity})`,\n          }}\n          accessor=\"population\"\n          backgroundColor=\"transparent\"\n          paddingLeft=\"15\"\n          absolute\n        />\n      </View>\n    );\n  };\n\n  if (__loading) {\n    return (\n      <View style={[styles.container, styles.centered]}>\n        <ActivityIndicator size=\"large\" color={Colors.primary} />\n        <Text style={styles.loadingText}>Loading Analytics...</Text>\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      {/* Header */}\n      <View style={styles.header}>\n        <TouchableOpacity onPress={() => navigation.goBack()} style={styles.backButton}>\n          <Icon name=\"arrow-back\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n        <Text style={styles.headerTitle}>Payment Analytics</Text>\n        <TouchableOpacity style={styles.settingsButton}>\n          <Icon name=\"settings\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n      </View>\n\n      <ScrollView\n        style={styles.content}\n        refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}\n        showsVerticalScrollIndicator={false}>\n        {/* Period Selection */}\n        <View style={styles.periodSelector}>\n          {['7', '30', '90'].map(period => (\n            <TouchableOpacity\n              key={period}\n              style={[styles.periodButton, selectedPeriod === period && styles.periodButtonActive]}\n              onPress={() => setSelectedPeriod(__period)}>\n              <Text\n                style={[styles.periodText, selectedPeriod === period && styles.periodTextActive]}>\n                {period} Days\n              </Text>\n            </TouchableOpacity>\n          ))}\n        </View>\n\n        {/* Overview Metrics */}\n        {analyticsData && (\n          <View style={styles.section}>\n            <Text style={styles.sectionTitle}>Overview</Text>\n            <View style={styles.metricsGrid}>\n              {renderMetricCard(\n                'Total Volume',\n                `£${analyticsData.overall_metrics.total_volume.toLocaleString()}`,\n                'Last 30 days',\n                volumeData?.growth_metrics.volume_growth,\n              )}\n              {renderMetricCard(\n                'Total Fees',\n                `£${analyticsData.overall_metrics.total_fees.toFixed(2)}`,\n                `${analyticsData.overall_metrics.avg_fee_percentage.toFixed(2)}% avg rate`,\n              )}\n              {renderMetricCard(\n                'Transactions',\n                analyticsData.overall_metrics.transaction_count.toString(),\n                'Completed payments',\n              )}\n              {renderMetricCard(\n                'Potential Savings',\n                `£${analyticsData.cost_savings.potential_savings.toFixed(2)}`,\n                `${analyticsData.cost_savings.savings_percentage.toFixed(1)}% opportunity`,\n              )}\n            </View>\n          </View>\n        )}\n\n        {/* Volume Chart */}\n        {renderVolumeChart()}\n\n        {/* Provider Distribution */}\n        {renderProviderDistribution()}\n\n        {/* Provider Health Scores */}\n        {healthScores && (\n          <View style={styles.section}>\n            <View style={styles.sectionHeader}>\n              <Text style={styles.sectionTitle}>Provider Health</Text>\n              <View style={styles.overallHealth}>\n                <Text style={styles.overallHealthText}>\n                  System Health: {healthScores.overall_system_health.toFixed(1)}%\n                </Text>\n              </View>\n            </View>\n            {Object.entries(healthScores.health_scores).map(([_provider, _health]) =>\n              renderProviderHealth(__provider, _health),\n            )}\n          </View>\n        )}\n\n        {/* Recommendations */}\n        {analyticsData?.recommendations && (\n          <View style={styles.section}>\n            <Text style={styles.sectionTitle}>Recommendations</Text>\n            {analyticsData.recommendations.map((__rec, _index) => (\n              <View key={index} style={styles.recommendationCard}>\n                <View style={styles.recommendationHeader}>\n                  <View\n                    style={[\n                      styles.priorityBadge,\n                      rec.priority === 'high' ? styles.priorityHigh : styles.priorityMedium,\n                    ]}>\n                    <Text style={styles.priorityText}>{rec.priority.toUpperCase()}</Text>\n                  </View>\n                  {rec.estimated_savings && (\n                    <Text style={styles.savingsText}>Save £{rec.estimated_savings.toFixed(2)}</Text>\n                  )}\n                </View>\n                <Text style={styles.recommendationTitle}>{rec.title}</Text>\n                <Text style={styles.recommendationDescription}>{rec.description}</Text>\n                {rec.action && (\n                  <TouchableOpacity style={styles.actionButton}>\n                    <Text style={styles.actionButtonText}>{rec.action}</Text>\n                    <Icon name=\"arrow-forward\" size={16} color={Colors.primary} />\n                  </TouchableOpacity>\n                )}\n              </View>\n            ))}\n          </View>\n        )}\n\n        <View style={styles.bottomSpacer} />\n      </ScrollView>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  centered: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  header: {\n    backgroundColor: Colors.primary,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    paddingTop: 48,\n  },\n  backButton: {\n    padding: 8,\n  },\n  headerTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.white,\n  },\n  settingsButton: {\n    padding: 8,\n  },\n  loadingText: {\n    fontSize: 16,\n    color: Colors.lightText,\n    marginTop: 12,\n  },\n  content: {\n    flex: 1,\n  },\n  periodSelector: {\n    flexDirection: 'row',\n    backgroundColor: Colors.white,\n    marginVertical: 8,\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n  },\n  periodButton: {\n    flex: 1,\n    paddingVertical: 8,\n    alignItems: 'center',\n    marginHorizontal: 4,\n    borderRadius: 8,\n    backgroundColor: Colors.background,\n  },\n  periodButtonActive: {\n    backgroundColor: Colors.primary,\n  },\n  periodText: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.text,\n  },\n  periodTextActive: {\n    color: Colors.white,\n  },\n  section: {\n    backgroundColor: Colors.white,\n    marginVertical: 8,\n    paddingVertical: 16,\n  },\n  sectionHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingHorizontal: 16,\n    marginBottom: 16,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n    paddingHorizontal: 16,\n    marginBottom: 16,\n  },\n  overallHealth: {\n    backgroundColor: Colors.background,\n    paddingHorizontal: 12,\n    paddingVertical: 6,\n    borderRadius: 12,\n  },\n  overallHealthText: {\n    fontSize: 12,\n    fontWeight: '600',\n    color: Colors.primary,\n  },\n  metricsGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    paddingHorizontal: 16,\n    gap: 12,\n  },\n  metricCard: {\n    flex: 1,\n    minWidth: '45%',\n    backgroundColor: Colors.background,\n    borderRadius: 12,\n    padding: 16,\n    alignItems: 'center',\n  },\n  metricTitle: {\n    fontSize: 12,\n    color: Colors.lightText,\n    marginBottom: 4,\n  },\n  metricValue: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  metricSubtitle: {\n    fontSize: 11,\n    color: Colors.lightText,\n  },\n  trendContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginTop: 4,\n  },\n  trendPositive: {},\n  trendNegative: {},\n  trendText: {\n    fontSize: 11,\n    fontWeight: '600',\n    marginLeft: 2,\n  },\n  trendPositiveText: {\n    color: Colors.success,\n  },\n  trendNegativeText: {\n    color: Colors.danger,\n  },\n  chartContainer: {\n    backgroundColor: Colors.white,\n    marginVertical: 8,\n    paddingVertical: 16,\n    alignItems: 'center',\n  },\n  chartTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 16,\n  },\n  chart: {\n    marginVertical: 8,\n    borderRadius: 16,\n  },\n  healthCard: {\n    backgroundColor: Colors.background,\n    marginHorizontal: 16,\n    marginBottom: 12,\n    borderRadius: 12,\n    padding: 16,\n  },\n  healthHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 16,\n  },\n  healthProvider: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  healthScore: {\n    width: 50,\n    height: 50,\n    borderRadius: 25,\n    borderWidth: 3,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  healthScoreText: {\n    fontSize: 14,\n    fontWeight: 'bold',\n  },\n  healthFactors: {\n    gap: 8,\n  },\n  factorRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 12,\n  },\n  factorName: {\n    fontSize: 12,\n    color: Colors.lightText,\n    width: 80,\n  },\n  factorBar: {\n    flex: 1,\n    height: 6,\n    backgroundColor: Colors.lightGray,\n    borderRadius: 3,\n  },\n  factorProgress: {\n    height: '100%',\n    borderRadius: 3,\n  },\n  factorScore: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: Colors.text,\n    width: 30,\n    textAlign: 'right',\n  },\n  recommendationCard: {\n    backgroundColor: Colors.background,\n    marginHorizontal: 16,\n    marginBottom: 12,\n    borderRadius: 12,\n    padding: 16,\n  },\n  recommendationHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  priorityBadge: {\n    paddingHorizontal: 8,\n    paddingVertical: 2,\n    borderRadius: 8,\n  },\n  priorityHigh: {\n    backgroundColor: Colors.danger,\n  },\n  priorityMedium: {\n    backgroundColor: Colors.warning,\n  },\n  priorityText: {\n    fontSize: 10,\n    fontWeight: 'bold',\n    color: Colors.white,\n  },\n  savingsText: {\n    fontSize: 12,\n    fontWeight: '600',\n    color: Colors.success,\n  },\n  recommendationTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  recommendationDescription: {\n    fontSize: 14,\n    color: Colors.lightText,\n    lineHeight: 20,\n    marginBottom: 12,\n  },\n  actionButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n  },\n  actionButtonText: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.primary,\n  },\n  bottomSpacer: {\n    height: 20,\n  },\n});\n\nexport default PaymentAnalyticsScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/auth/AuthScreen.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'View' is not defined.","line":30,"column":6,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":30,"endColumn":10}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { StyleSheet, StatusBar } from 'react-native';\nimport SignInScreen from './SignInScreen';\nimport SignUpScreen from './SignUpScreen';\n\n// Clover POS Color Scheme\nconst Colors = {\n  primary: '#00A651',\n  secondary: '#0066CC',\n  success: '#00A651',\n  warning: '#FF6B35',\n  danger: '#E74C3C',\n  background: '#F5F5F5',\n  white: '#FFFFFF',\n  lightGray: '#E5E5E5',\n  mediumGray: '#999999',\n  darkGray: '#666666',\n  text: '#333333',\n  lightText: '#666666',\n  border: '#DDDDDD',\n};\n\nconst AuthScreen: React.FC = () => {\n  const [isSignUp, setIsSignUp] = useState(__false);\n\n  const switchToSignUp = () => setIsSignUp(__true);\n  const switchToSignIn = () => setIsSignUp(__false);\n\n  return (\n    <View style={styles.container}>\n      <StatusBar backgroundColor={Colors.primary} barStyle=\"light-content\" translucent={false} />\n\n      {isSignUp ? (\n        <SignUpScreen onSwitchToSignIn={switchToSignIn} />\n      ) : (\n        <SignInScreen onSwitchToSignUp={switchToSignUp} />\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n});\n\nexport default AuthScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/auth/ForgotPasswordScreen.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":85,"column":44,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[2327,2425],"text":"\n            Enter your email address and we&apos;ll send you a link to reset your password.\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[2327,2425],"text":"\n            Enter your email address and we&lsquo;ll send you a link to reset your password.\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[2327,2425],"text":"\n            Enter your email address and we&#39;ll send you a link to reset your password.\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[2327,2425],"text":"\n            Enter your email address and we&rsquo;ll send you a link to reset your password.\n          "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: styles.inputIcon","line":178,"column":3,"nodeType":"Property","endLine":180,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: styles.textInput","line":181,"column":3,"nodeType":"Property","endLine":186,"endColumn":4}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  StatusBar,\n  SafeAreaView,\n  TouchableOpacity,\n  Alert,\n  KeyboardAvoidingView,\n  Platform,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { SimpleTextInput } from '../../components/inputs';\nimport { useNavigation } from '@react-navigation/native';\n\nconst Colors = {\n  primary: '#2C3E50',\n  secondary: '#3498DB',\n  success: '#27AE60',\n  background: '#F8F9FA',\n  white: '#FFFFFF',\n  lightGray: '#ECF0F1',\n  text: '#2C3E50',\n  lightText: '#95A5A6',\n};\n\nconst ForgotPasswordScreen: React.FC = () => {\n  const navigation = useNavigation();\n  const [email, setEmail] = useState('');\n  const [isLoading, setIsLoading] = useState(__false);\n\n  const handleResetPassword = async () => {\n    if (!email.trim()) {\n      Alert.alert('Error', 'Please enter your email address');\n      return;\n    }\n\n    setIsLoading(__true);\n\n    try {\n      // Simulate API call\n      await new Promise(_resolve => setTimeout(__resolve, 2000));\n\n      Alert.alert(\n        'Reset Link Sent',\n        'If an account with this email exists, you will receive a password reset link shortly.',\n        [\n          {\n            text: 'OK',\n            onPress: () => navigation.goBack(),\n          },\n        ],\n      );\n    } catch (__error) {\n      Alert.alert('Error', 'Failed to send reset link. Please try again.');\n    } finally {\n      setIsLoading(__false);\n    }\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <StatusBar barStyle=\"dark-content\" backgroundColor={Colors.background} />\n\n      <KeyboardAvoidingView\n        style={styles.keyboardView}\n        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}>\n        {/* Header */}\n        <View style={styles.header}>\n          <TouchableOpacity style={styles.backButton} onPress={() => navigation.goBack()}>\n            <Icon name=\"arrow-back\" size={24} color={Colors.text} />\n          </TouchableOpacity>\n        </View>\n\n        <View style={styles.content}>\n          {/* Icon */}\n          <View style={styles.iconContainer}>\n            <Icon name=\"lock-reset\" size={80} color={Colors.secondary} />\n          </View>\n\n          {/* Title */}\n          <Text style={styles.title}>Forgot Password?</Text>\n          <Text style={styles.subtitle}>\n            Enter your email address and we'll send you a link to reset your password.\n          </Text>\n\n          {/* Email Input */}\n          <SimpleTextInput\n            label=\"Email Address\"\n            placeholder=\"Enter your email address\"\n            placeholderTextColor={Colors.lightText} // placeholderTextColor is a valid TextInput prop\n            value={email}\n            onValueChange={setEmail}\n            autoCapitalize=\"none\"\n            autoCorrect={false}\n            keyboardType=\"email-address\"\n            returnKeyType=\"done\"\n            onSubmitEditing={handleResetPassword}\n            containerStyle={styles.inputContainer}\n          />\n          {/* Icon removed, SimpleTextInput does not specify an icon prop */}\n          {/* inputProps removed, styling is internal to SimpleTextInput */}\n\n          {/* Reset Button */}\n          <TouchableOpacity\n            style={[styles.resetButton, isLoading && styles.resetButtonDisabled]}\n            onPress={handleResetPassword}\n            disabled={isLoading}>\n            <Text style={styles.resetButtonText}>\n              {isLoading ? 'Sending...' : 'Send Reset Link'}\n            </Text>\n          </TouchableOpacity>\n\n          {/* Back to Login */}\n          <TouchableOpacity style={styles.backToLoginButton} onPress={() => navigation.goBack()}>\n            <Text style={styles.backToLoginText}>Back to Login</Text>\n          </TouchableOpacity>\n        </View>\n      </KeyboardAvoidingView>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  keyboardView: {\n    flex: 1,\n  },\n  header: {\n    paddingHorizontal: 20,\n    paddingVertical: 15,\n  },\n  backButton: {\n    padding: 8,\n    alignSelf: 'flex-start',\n  },\n  content: {\n    flex: 1,\n    paddingHorizontal: 30,\n    justifyContent: 'center',\n  },\n  iconContainer: {\n    alignItems: 'center',\n    marginBottom: 40,\n  },\n  title: {\n    fontSize: 28,\n    fontWeight: 'bold',\n    color: Colors.text,\n    textAlign: 'center',\n    marginBottom: 16,\n  },\n  subtitle: {\n    fontSize: 16,\n    color: Colors.lightText,\n    textAlign: 'center',\n    marginBottom: 40,\n    lineHeight: 24,\n  },\n  inputContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    marginBottom: 30,\n    paddingHorizontal: 16,\n    paddingVertical: 4,\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.1,\n    shadowRadius: 2,\n  },\n  inputIcon: {\n    marginRight: 12,\n  },\n  textInput: {\n    flex: 1,\n    fontSize: 16,\n    color: Colors.text,\n    paddingVertical: 16,\n  },\n  resetButton: {\n    backgroundColor: Colors.secondary,\n    borderRadius: 12,\n    paddingVertical: 18,\n    alignItems: 'center',\n    marginBottom: 20,\n    elevation: 3,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.2,\n    shadowRadius: 4,\n  },\n  resetButtonDisabled: {\n    opacity: 0.7,\n  },\n  resetButtonText: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: Colors.white,\n  },\n  backToLoginButton: {\n    alignItems: 'center',\n    paddingVertical: 15,\n  },\n  backToLoginText: {\n    fontSize: 16,\n    color: Colors.secondary,\n    fontWeight: '600',\n  },\n});\n\nexport default ForgotPasswordScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/auth/LoginScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_width' is assigned a value but never used.","line":20,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_height' is assigned a value but never used.","line":20,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":24},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: styles.textInput","line":220,"column":3,"nodeType":"Property","endLine":225,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: styles.demoSection","line":260,"column":3,"nodeType":"Property","endLine":266,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: styles.demoTitle","line":267,"column":3,"nodeType":"Property","endLine":272,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: styles.demoText","line":273,"column":3,"nodeType":"Property","endLine":277,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: styles.quickSignInSection","line":287,"column":3,"nodeType":"Property","endLine":292,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: styles.quickSignInTitle","line":293,"column":3,"nodeType":"Property","endLine":299,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: styles.quickButtonsGrid","line":300,"column":3,"nodeType":"Property","endLine":305,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: styles.quickButton","line":306,"column":3,"nodeType":"Property","endLine":318,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: styles.quickButtonTitle","line":319,"column":3,"nodeType":"Property","endLine":325,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: styles.quickButtonSubtitle","line":326,"column":3,"nodeType":"Property","endLine":330,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: styles.simpleInput","line":331,"column":3,"nodeType":"Property","endLine":340,"endColumn":4}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  StatusBar,\n  SafeAreaView,\n  TouchableOpacity,\n  TextInput,\n  Alert,\n  KeyboardAvoidingView,\n  Platform,\n  Dimensions,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation } from '@react-navigation/native';\nimport { useAuthStore } from '../../store/useAuthStore';\nimport Logo from '../../components/Logo';\n\nconst { _width, _height } = Dimensions.get('window');\n\n// Clover POS Color Scheme\nconst Colors = {\n  primary: '#00A651', // Clover Green\n  secondary: '#0066CC', // Clover Blue\n  success: '#00A651',\n  background: '#F5F5F5', // Light Gray Background\n  white: '#FFFFFF',\n  lightGray: '#E5E5E5',\n  text: '#333333', // Dark Gray Text\n  lightText: '#666666', // Medium Gray Text\n  accent: '#0066CC', // Clover Blue Accent\n};\n\nconst LoginScreen: React.FC = () => {\n  const navigation = useNavigation();\n  const signIn = useAuthStore(state => state.signIn);\n  const authLoading = useAuthStore(state => state.isLoading);\n\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [showPassword, setShowPassword] = useState(__false);\n  const [isLoading, setIsLoading] = useState(__false);\n\n  const handleLogin = async (quickUsername?: _string, quickPassword?: _string) => {\n    const loginUsername = quickUsername || username;\n    const loginPassword = quickPassword || password;\n\n    if (!loginUsername.trim() || !loginPassword.trim()) {\n      Alert.alert('Error', 'Please enter both username and password');\n      return;\n    }\n\n    setIsLoading(__true);\n\n    try {\n      await signIn(loginUsername.trim(), _loginPassword);\n      // Navigation happens automatically via AppNavigator\n    } catch (error: _unknown) {\n      Alert.alert('Login Failed', error.message || 'Invalid username or password');\n    } finally {\n      setIsLoading(__false);\n    }\n  };\n\n  const handleForgotPassword = () => {\n    navigation.navigate('ForgotPassword' as never);\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <StatusBar barStyle=\"dark-content\" backgroundColor={Colors.background} />\n\n      <KeyboardAvoidingView\n        style={styles.keyboardView}\n        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}>\n        <View style={styles.content}>\n          {/* Logo Section */}\n          <View style={styles.logoSection}>\n            <Logo size=\"large\" showText={false} />\n            <Text style={styles.logoTitle}>Professional Point of Sale System</Text>\n          </View>\n\n          {/* Login Form */}\n          <View style={styles.formSection}>\n            <Text style={styles.welcomeText}>Welcome Back</Text>\n            <Text style={styles.subtitleText}>Sign in to continue</Text>\n\n            {/* Username Input */}\n            <View style={styles.inputContainer}>\n              <Icon name=\"email\" size={20} color={Colors.lightText} style={styles.inputIcon} />\n              <TextInput\n                value={username}\n                onChangeText={setUsername}\n                style={styles.input}\n                placeholder=\"Email\"\n                placeholderTextColor={Colors.lightText}\n                autoCapitalize=\"none\"\n                keyboardType=\"email-address\"\n                editable={!isLoading && !authLoading}\n              />\n            </View>\n\n            {/* Password Input */}\n            <View style={styles.inputContainer}>\n              <Icon name=\"lock\" size={20} color={Colors.lightText} style={styles.inputIcon} />\n              <TextInput\n                value={password}\n                onChangeText={setPassword}\n                style={styles.input}\n                placeholder=\"Password\"\n                placeholderTextColor={Colors.lightText}\n                secureTextEntry={!showPassword}\n                editable={!isLoading && !authLoading}\n              />\n              <TouchableOpacity\n                style={styles.passwordToggle}\n                onPress={() => setShowPassword(!showPassword)}>\n                <Icon\n                  name={showPassword ? 'visibility-off' : 'visibility'}\n                  size={20}\n                  color={Colors.lightText}\n                />\n              </TouchableOpacity>\n            </View>\n\n            {/* Forgot Password */}\n            <TouchableOpacity style={styles.forgotPasswordButton} onPress={handleForgotPassword}>\n              <Text style={styles.forgotPasswordText}>Forgot Password?</Text>\n            </TouchableOpacity>\n\n            {/* Login Button */}\n            <TouchableOpacity\n              style={[styles.loginButton, (isLoading || authLoading) && styles.loginButtonDisabled]}\n              onPress={() => handleLogin()}\n              disabled={isLoading || authLoading}>\n              {isLoading || authLoading ? (\n                <Text style={styles.loginButtonText}>Signing In...</Text>\n              ) : (\n                <>\n                  <Text style={styles.loginButtonText}>Sign In</Text>\n                  <Icon name=\"arrow-forward\" size={20} color={Colors.white} />\n                </>\n              )}\n            </TouchableOpacity>\n          </View>\n\n          {/* Footer */}\n          <View style={styles.footer}>\n            <Text style={styles.footerText}>Fynlo POS System • Secure Payment Processing</Text>\n          </View>\n        </View>\n      </KeyboardAvoidingView>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  keyboardView: {\n    flex: 1,\n  },\n  content: {\n    flex: 1,\n    paddingHorizontal: 30,\n    justifyContent: 'center',\n  },\n  logoSection: {\n    alignItems: 'center',\n    marginBottom: 50,\n  },\n  logoTitle: {\n    fontSize: 16,\n    color: Colors.lightText,\n    textAlign: 'center',\n    marginTop: 16,\n  },\n  formSection: {\n    marginBottom: 40,\n  },\n  welcomeText: {\n    fontSize: 32,\n    fontWeight: 'bold',\n    color: Colors.text,\n    textAlign: 'center',\n    marginBottom: 8,\n  },\n  subtitleText: {\n    fontSize: 16,\n    color: Colors.lightText,\n    textAlign: 'center',\n    marginBottom: 40,\n  },\n  inputContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    marginBottom: 20,\n    paddingHorizontal: 16,\n    paddingVertical: 4,\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.1,\n    shadowRadius: 2,\n  },\n  inputIcon: {\n    marginRight: 12,\n  },\n  input: {\n    flex: 1,\n    fontSize: 16,\n    color: Colors.text,\n    paddingVertical: 16,\n  },\n  textInput: {\n    flex: 1,\n    fontSize: 16,\n    color: Colors.text,\n    paddingVertical: 16,\n  },\n  passwordToggle: {\n    padding: 4,\n  },\n  forgotPasswordButton: {\n    alignSelf: 'flex-end',\n    marginBottom: 30,\n  },\n  forgotPasswordText: {\n    fontSize: 14,\n    color: Colors.secondary,\n    fontWeight: '600',\n  },\n  loginButton: {\n    backgroundColor: Colors.primary,\n    borderRadius: 12,\n    paddingVertical: 18,\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n    elevation: 3,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.2,\n    shadowRadius: 4,\n  },\n  loginButtonDisabled: {\n    opacity: 0.7,\n  },\n  loginButtonText: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: Colors.white,\n    marginRight: 8,\n  },\n  demoSection: {\n    backgroundColor: Colors.lightGray,\n    borderRadius: 12,\n    padding: 20,\n    marginTop: 30,\n    alignItems: 'center',\n  },\n  demoTitle: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: Colors.text,\n    marginBottom: 8,\n  },\n  demoText: {\n    fontSize: 14,\n    color: Colors.lightText,\n    fontFamily: Platform.OS === 'ios' ? 'Menlo' : 'monospace',\n  },\n  footer: {\n    alignItems: 'center',\n    paddingBottom: 20,\n  },\n  footerText: {\n    fontSize: 14,\n    color: Colors.lightText,\n    textAlign: 'center',\n  },\n  quickSignInSection: {\n    marginTop: 20,\n    paddingTop: 20,\n    borderTopWidth: 1,\n    borderTopColor: Colors.lightGray,\n  },\n  quickSignInTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    textAlign: 'center',\n    marginBottom: 16,\n  },\n  quickButtonsGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'space-between',\n    gap: 8,\n  },\n  quickButton: {\n    width: '48%',\n    backgroundColor: Colors.primary,\n    borderRadius: 8,\n    padding: 12,\n    alignItems: 'center',\n    marginBottom: 8,\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.2,\n    shadowRadius: 2,\n  },\n  quickButtonTitle: {\n    fontSize: 12,\n    fontWeight: '600',\n    color: Colors.white,\n    textAlign: 'center',\n    marginBottom: 2,\n  },\n  quickButtonSubtitle: {\n    fontSize: 10,\n    color: 'rgba(255, 255, 255, 0.8)',\n    textAlign: 'center',\n  },\n  simpleInput: {\n    flex: 1,\n    padding: 16,\n    fontSize: 16,\n    backgroundColor: '#FFFFFF',\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: '#E1E1E1',\n    color: '#333333',\n  },\n});\n\nexport default LoginScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/auth/SignInScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_showPassword' is assigned a value but never used.","line":47,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":47,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_setShowPassword' is assigned a value but never used.","line":47,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":47,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_success' is assigned a value but never used.","line":105,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":105,"endColumn":21},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":273,"column":48,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[8678,8701],"text":"Don&apos;t have an account? "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[8678,8701],"text":"Don&lsquo;t have an account? "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[8678,8701],"text":"Don&#39;t have an account? "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[8678,8701],"text":"Don&rsquo;t have an account? "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: styles.inputLabel","line":361,"column":3,"nodeType":"Property","endLine":366,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: styles.inputWrapper","line":367,"column":3,"nodeType":"Property","endLine":377,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: styles.inputError","line":378,"column":3,"nodeType":"Property","endLine":380,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: styles.textInput","line":381,"column":3,"nodeType":"Property","endLine":385,"endColumn":4}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  Alert,\n  KeyboardAvoidingView,\n  Platform,\n  ScrollView,\n  ActivityIndicator,\n  Switch,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { SimpleTextInput } from '../../components/inputs';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { isFeatureEnabled } from '../../config/featureFlags';\nimport Logo from '../../components/Logo';\n\n// Clover POS Color Scheme\nconst Colors = {\n  primary: '#00A651',\n  secondary: '#0066CC',\n  success: '#00A651',\n  warning: '#FF6B35',\n  danger: '#E74C3C',\n  background: '#F5F5F5',\n  white: '#FFFFFF',\n  lightGray: '#E5E5E5',\n  mediumGray: '#999999',\n  darkGray: '#666666',\n  text: '#333333',\n  lightText: '#666666',\n  border: '#DDDDDD',\n};\n\ninterface SignInScreenProps {\n  onSwitchToSignUp: () => void;\n}\n\nconst SignInScreen: React.FC<SignInScreenProps> = ({ onSwitchToSignUp }) => {\n  const { signIn, resetPassword } = useAuth();\n\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [rememberMe, setRememberMe] = useState(__true);\n  const [_showPassword, _setShowPassword] = useState(__false);\n  const [isLoading, setIsLoading] = useState(__false);\n  const [errors, setErrors] = useState<{ email?: string; password?: string }>({});\n\n  const validateForm = () => {\n    const newErrors: { email?: string; password?: string } = {};\n\n    if (!email.trim()) {\n      newErrors.email = 'Email is required';\n    } else if (!email.includes('@')) {\n      newErrors.email = 'Please enter a valid email address';\n    }\n\n    if (!password.trim()) {\n      newErrors.password = 'Password is required';\n    } else if (password.length < 4) {\n      newErrors.password = 'Password must be at least 4 characters';\n    }\n\n    setErrors(__newErrors);\n    return Object.keys(__newErrors).length === 0;\n  };\n\n  const handleSignIn = async () => {\n    if (!validateForm()) {\n      return;\n    }\n\n    setIsLoading(__true);\n    try {\n      const success = await signIn(email.trim(), _password, rememberMe);\n\n      if (!success) {\n        Alert.alert(\n          'Sign In Failed',\n          'Invalid email or password. Please check your credentials and try again.',\n          [{ text: 'OK' }],\n        );\n      }\n    } catch (__error) {\n      Alert.alert('Error', 'An unexpected error occurred. Please try again.', [{ text: 'OK' }]);\n    } finally {\n      setIsLoading(__false);\n    }\n  };\n\n  const handleForgotPassword = async () => {\n    if (!email.trim()) {\n      Alert.alert(\n        'Email Required',\n        'Please enter your email address first, then tap \"Forgot Password\".',\n        [{ text: 'OK' }],\n      );\n      return;\n    }\n\n    setIsLoading(__true);\n    try {\n      const _success = await resetPassword(email.trim());\n\n      if (__success) {\n        Alert.alert(\n          'Password Reset',\n          'Password reset instructions have been sent to your email address.',\n          [{ text: 'OK' }],\n        );\n      } else {\n        Alert.alert('Email Not Found', 'No account found with this email address.', [\n          { text: 'OK' },\n        ]);\n      }\n    } catch (__error) {\n      Alert.alert('Error', 'Unable to send password reset email. Please try again.', [\n        { text: 'OK' },\n      ]);\n    } finally {\n      setIsLoading(__false);\n    }\n  };\n\n  const showDemoCredentials = () => {\n    Alert.alert(\n      'Quick Sign In',\n      'Select an account to sign in:\\n\\n' +\n        '🏢 Platform Owner (Full Control):\\n' +\n        'See all restaurants, platform analytics, and settings\\n\\n' +\n        '🍴 Restaurant Owner:\\n' +\n        'Manage your restaurant\\n' +\n        'Full restaurant control and analytics\\n\\n' +\n        '👩‍💼 Restaurant Manager (__Sarah):\\n' +\n        'Day-to-day operations and staff management\\n\\n' +\n        '🎯 Demo Account:\\n' +\n        'General manager access for testing',\n      [\n        { text: 'Cancel', style: 'cancel' },\n        {\n          text: 'Platform Owner',\n          onPress: () => {\n            setEmail('owner@fynlopos.com');\n            setPassword('platformowner123');\n          },\n        },\n        {\n          text: 'Restaurant Owner',\n          onPress: () => {\n            setEmail('carlos@casaestrella.co.uk');\n            setPassword('password123');\n          },\n        },\n      ],\n    );\n  };\n\n  return (\n    <KeyboardAvoidingView\n      style={styles.container}\n      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}>\n      <ScrollView\n        contentContainerStyle={styles.scrollContent}\n        keyboardShouldPersistTaps=\"handled\"\n        showsVerticalScrollIndicator={false}>\n        {/* Header */}\n        <View style={styles.header}>\n          <Logo size=\"large\" showText={false} />\n          <Text style={styles.subtitle}>Professional Point of Sale System</Text>\n        </View>\n\n        {/* Sign In Form */}\n        <View style={styles.formContainer}>\n          <Text style={styles.formTitle}>Welcome Back</Text>\n          <Text style={styles.formSubtitle}>Sign in to your account</Text>\n\n          {/* Email Input */}\n          <View style={styles.inputContainer}>\n            <SimpleTextInput\n              label=\"Email Address\"\n              value={email}\n              onValueChange={_text => {\n                setEmail(__text);\n                if (errors.email) {\n                  setErrors(prev => ({ ...prev, email: undefined }));\n                }\n              }}\n              placeholder=\"Enter your email\"\n              keyboardType=\"email-address\"\n              autoCapitalize=\"none\"\n              autoCorrect={false}\n              autoComplete=\"email\"\n            />\n            {errors.email && <Text style={styles.errorText}>{errors.email}</Text>}\n          </View>\n\n          {/* Password Input */}\n          <View style={styles.inputContainer}>\n            <SimpleTextInput\n              label=\"Password\"\n              value={password}\n              onValueChange={_text => {\n                setPassword(__text);\n                if (errors.password) {\n                  setErrors(prev => ({ ...prev, password: undefined }));\n                }\n              }}\n              placeholder=\"Enter your password\"\n              secureTextEntry={true} // Fixed prop name\n              autoComplete=\"password\"\n            />\n            {/* Note: Password visibility toggle icon is removed */}\n            {errors.password && <Text style={styles.errorText}>{errors.password}</Text>}\n          </View>\n\n          {/* Remember Me & Forgot Password */}\n          <View style={styles.optionsRow}>\n            <TouchableOpacity\n              style={styles.rememberMeContainer}\n              onPress={() => setRememberMe(!rememberMe)}>\n              <Switch\n                value={rememberMe}\n                onValueChange={setRememberMe}\n                trackColor={{ false: Colors.lightGray, true: Colors.primary }}\n                thumbColor={Colors.white}\n                style={styles.switch}\n              />\n              <Text style={styles.rememberMeText}>Remember me</Text>\n            </TouchableOpacity>\n\n            <TouchableOpacity onPress={handleForgotPassword} disabled={isLoading}>\n              <Text style={styles.forgotPasswordText}>Forgot Password?</Text>\n            </TouchableOpacity>\n          </View>\n\n          {/* Sign In Button */}\n          <TouchableOpacity\n            style={[styles.signInButton, isLoading && styles.signInButtonDisabled]}\n            onPress={handleSignIn}\n            disabled={isLoading}>\n            {isLoading ? (\n              <ActivityIndicator size=\"small\" color={Colors.white} />\n            ) : (\n              <>\n                <Icon name=\"login\" size={20} color={Colors.white} />\n                <Text style={styles.signInButtonText}>Sign In</Text>\n              </>\n            )}\n          </TouchableOpacity>\n\n          {/* Quick Sign In Button */}\n          {isFeatureEnabled('QUICK_SIGNIN_ENABLED') && (\n            <TouchableOpacity\n              style={styles.demoButton}\n              onPress={showDemoCredentials}\n              disabled={isLoading}>\n              <Icon name=\"flash-on\" size={20} color={Colors.secondary} />\n              <Text style={styles.demoButtonText}>Quick Sign In</Text>\n            </TouchableOpacity>\n          )}\n\n          {/* Divider */}\n          <View style={styles.divider}>\n            <View style={styles.dividerLine} />\n            <Text style={styles.dividerText}>or</Text>\n            <View style={styles.dividerLine} />\n          </View>\n\n          {/* Sign Up Link */}\n          <View style={styles.signUpContainer}>\n            <Text style={styles.signUpText}>Don't have an account? </Text>\n            <TouchableOpacity onPress={onSwitchToSignUp} disabled={isLoading}>\n              <Text style={styles.signUpLinkText}>Create Account</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n\n        {/* Features */}\n        <View style={styles.featuresContainer}>\n          <Text style={styles.featuresTitle}>Why Choose Fynlo POS?</Text>\n\n          <View style={styles.featureRow}>\n            <Icon name=\"speed\" size={24} color={Colors.primary} />\n            <View style={styles.featureText}>\n              <Text style={styles.featureName}>Lightning Fast</Text>\n              <Text style={styles.featureDescription}>Process transactions in seconds</Text>\n            </View>\n          </View>\n\n          <View style={styles.featureRow}>\n            <Icon name=\"analytics\" size={24} color={Colors.secondary} />\n            <View style={styles.featureText}>\n              <Text style={styles.featureName}>Real-time Analytics</Text>\n              <Text style={styles.featureDescription}>Track sales and performance instantly</Text>\n            </View>\n          </View>\n\n          <View style={styles.featureRow}>\n            <Icon name=\"security\" size={24} color={Colors.success} />\n            <View style={styles.featureText}>\n              <Text style={styles.featureName}>Bank-level Security</Text>\n              <Text style={styles.featureDescription}>Your data is always protected</Text>\n            </View>\n          </View>\n        </View>\n      </ScrollView>\n    </KeyboardAvoidingView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  scrollContent: {\n    flexGrow: 1,\n    paddingHorizontal: 24,\n    paddingTop: 60,\n    paddingBottom: 32,\n  },\n  header: {\n    alignItems: 'center',\n    marginBottom: 40,\n  },\n  subtitle: {\n    fontSize: 16,\n    color: Colors.lightText,\n    textAlign: 'center',\n    marginTop: 16,\n  },\n  formContainer: {\n    backgroundColor: Colors.white,\n    borderRadius: 16,\n    padding: 24,\n    marginBottom: 32,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 8,\n    elevation: 4,\n  },\n  formTitle: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: Colors.text,\n    marginBottom: 8,\n    textAlign: 'center',\n  },\n  formSubtitle: {\n    fontSize: 16,\n    color: Colors.lightText,\n    marginBottom: 32,\n    textAlign: 'center',\n  },\n  inputContainer: {\n    marginBottom: 20,\n  },\n  inputLabel: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.text,\n    marginBottom: 8,\n  },\n  inputWrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: Colors.background,\n    borderRadius: 8,\n    paddingHorizontal: 12,\n    paddingVertical: 12,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    gap: 12,\n  },\n  inputError: {\n    borderColor: Colors.danger,\n  },\n  textInput: {\n    flex: 1,\n    fontSize: 16,\n    color: Colors.text,\n  },\n  errorText: {\n    fontSize: 14,\n    color: Colors.danger,\n    marginTop: 4,\n  },\n  optionsRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 24,\n  },\n  rememberMeContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n  },\n  switch: {\n    transform: [{ scaleX: 0.8 }, { scaleY: 0.8 }],\n  },\n  rememberMeText: {\n    fontSize: 14,\n    color: Colors.text,\n  },\n  forgotPasswordText: {\n    fontSize: 14,\n    color: Colors.secondary,\n    fontWeight: '500',\n  },\n  signInButton: {\n    backgroundColor: Colors.primary,\n    borderRadius: 8,\n    paddingVertical: 16,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    gap: 8,\n    marginBottom: 16,\n  },\n  signInButtonDisabled: {\n    opacity: 0.7,\n  },\n  signInButtonText: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: Colors.white,\n  },\n  demoButton: {\n    backgroundColor: Colors.white,\n    borderRadius: 8,\n    paddingVertical: 12,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    gap: 8,\n    borderWidth: 1,\n    borderColor: Colors.secondary,\n    marginBottom: 24,\n  },\n  demoButtonText: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.secondary,\n  },\n  divider: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 24,\n    gap: 16,\n  },\n  dividerLine: {\n    flex: 1,\n    height: 1,\n    backgroundColor: Colors.border,\n  },\n  dividerText: {\n    fontSize: 14,\n    color: Colors.mediumGray,\n  },\n  signUpContainer: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  signUpText: {\n    fontSize: 16,\n    color: Colors.lightText,\n  },\n  signUpLinkText: {\n    fontSize: 16,\n    color: Colors.primary,\n    fontWeight: '500',\n  },\n  featuresContainer: {\n    backgroundColor: Colors.white,\n    borderRadius: 16,\n    padding: 24,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 8,\n    elevation: 4,\n  },\n  featuresTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.text,\n    marginBottom: 20,\n    textAlign: 'center',\n  },\n  featureRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 16,\n    gap: 16,\n  },\n  featureText: {\n    flex: 1,\n  },\n  featureName: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  featureDescription: {\n    fontSize: 14,\n    color: Colors.lightText,\n  },\n});\n\nexport default SignInScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/auth/SignUpScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_setShowPassword' is assigned a value but never used.","line":62,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":62,"endColumn":40},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_setShowConfirmPassword' is assigned a value but never used.","line":63,"column":31,"nodeType":"Identifier","messageId":"unusedVar","endLine":63,"endColumn":54},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_userData' is assigned a value but never used.","line":144,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":144,"endColumn":22},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { flex: 1, marginRight: 8 }","line":192,"column":46,"nodeType":"ObjectExpression","endLine":192,"endColumn":73},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { flex: 1, marginLeft: 8 }","line":211,"column":46,"nodeType":"ObjectExpression","endLine":211,"endColumn":72},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: styles.inputWrapper","line":637,"column":3,"nodeType":"Property","endLine":647,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: styles.inputError","line":648,"column":3,"nodeType":"Property","endLine":650,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: styles.textInput","line":651,"column":3,"nodeType":"Property","endLine":655,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: styles.textArea","line":656,"column":3,"nodeType":"Property","endLine":659,"endColumn":4}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  Alert,\n  KeyboardAvoidingView,\n  Platform,\n  ScrollView,\n  ActivityIndicator,\n} from 'react-native';\nimport { Picker } from '@react-native-picker/picker';\nimport { SimpleTextInput } from '../../components/inputs';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useAuth } from '../../contexts/AuthContext';\n\n// Clover POS Color Scheme\nconst Colors = {\n  primary: '#00A651',\n  secondary: '#0066CC',\n  success: '#00A651',\n  warning: '#FF6B35',\n  danger: '#E74C3C',\n  background: '#F5F5F5',\n  white: '#FFFFFF',\n  lightGray: '#E5E5E5',\n  mediumGray: '#999999',\n  darkGray: '#666666',\n  text: '#333333',\n  lightText: '#666666',\n  border: '#DDDDDD',\n};\n\ninterface SignUpScreenProps {\n  onSwitchToSignIn: () => void;\n}\n\nconst SignUpScreen: React.FC<SignUpScreenProps> = ({ onSwitchToSignIn }) => {\n  const { signUp } = useAuth();\n\n  // User data\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [email, setEmail] = useState('');\n  const [phone, setPhone] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [pin, setPin] = useState('');\n\n  // Business data\n  const [businessName, setBusinessName] = useState('');\n  const [businessAddress, setBusinessAddress] = useState('');\n  const [businessPhone, setBusinessPhone] = useState('');\n  const [businessEmail, setBusinessEmail] = useState('');\n  const [businessType, setBusinessType] = useState<'restaurant' | 'retail' | 'service' | 'other'>(\n    'retail',\n  );\n  const [vatNumber, setVatNumber] = useState('');\n\n  const [currentStep, setCurrentStep] = useState(1);\n  const [showPassword, _setShowPassword] = useState(__false);\n  const [showConfirmPassword, _setShowConfirmPassword] = useState(__false);\n  const [isLoading, setIsLoading] = useState(__false);\n  const [errors, setErrors] = useState<Record<string, string>>({});\n  const [acceptedTerms, setAcceptedTerms] = useState(__false);\n\n  const validateStep1 = () => {\n    const newErrors: Record<string, string> = {};\n\n    if (!firstName.trim()) {\n      newErrors.firstName = 'First name is required';\n    }\n    if (!lastName.trim()) {\n      newErrors.lastName = 'Last name is required';\n    }\n    if (!email.trim()) {\n      newErrors.email = 'Email is required';\n    } else if (!email.includes('@')) {\n      newErrors.email = 'Please enter a valid email address';\n    }\n    if (!phone.trim()) {\n      newErrors.phone = 'Phone number is required';\n    }\n    if (!password.trim()) {\n      newErrors.password = 'Password is required';\n    } else if (password.length < 8) {\n      newErrors.password = 'Password must be at least 8 characters';\n    }\n    if (password !== confirmPassword) {\n      newErrors.confirmPassword = 'Passwords do not match';\n    }\n    if (!pin.trim()) {\n      newErrors.pin = 'PIN is required';\n    } else if (pin.length !== 4 || !/^\\d{4}$/.test(__pin)) {\n      newErrors.pin = 'PIN must be exactly 4 digits';\n    }\n\n    setErrors(__newErrors);\n    return Object.keys(__newErrors).length === 0;\n  };\n\n  const validateStep2 = () => {\n    const newErrors: Record<string, string> = {};\n\n    if (!businessName.trim()) {\n      newErrors.businessName = 'Business name is required';\n    }\n    if (!businessAddress.trim()) {\n      newErrors.businessAddress = 'Business address is required';\n    }\n    if (!businessPhone.trim()) {\n      newErrors.businessPhone = 'Business phone is required';\n    }\n    if (!acceptedTerms) {\n      newErrors.terms = 'You must accept the terms and conditions';\n    }\n\n    setErrors(__newErrors);\n    return Object.keys(__newErrors).length === 0;\n  };\n\n  const handleNext = () => {\n    if (currentStep === 1 && validateStep1()) {\n      setCurrentStep(2);\n      setErrors({});\n    }\n  };\n\n  const handleBack = () => {\n    if (currentStep === 2) {\n      setCurrentStep(1);\n      setErrors({});\n    }\n  };\n\n  const handleSignUp = async () => {\n    if (!validateStep2()) {\n      return;\n    }\n\n    setIsLoading(__true);\n    try {\n      const _userData = {\n        firstName: firstName.trim(),\n        lastName: lastName.trim(),\n        email: email.trim().toLowerCase(),\n        phone: phone.trim(),\n        pin: pin.trim(),\n      };\n\n      const _businessData = {\n        name: businessName.trim(),\n        address: businessAddress.trim(),\n        phone: businessPhone.trim(),\n        email: businessEmail.trim() || email.trim(),\n        type: _businessType,\n        vatNumber: vatNumber.trim(),\n      };\n\n      const success = await signUp(__userData, _businessData, password);\n\n      if (!success) {\n        Alert.alert(\n          'Registration Failed',\n          'An account with this email already exists. Please use a different email or sign in instead.',\n          [{ text: 'OK' }],\n        );\n      }\n    } catch (__error) {\n      Alert.alert('Error', 'An unexpected error occurred during registration. Please try again.', [\n        { text: 'OK' },\n      ]);\n    } finally {\n      setIsLoading(__false);\n    }\n  };\n\n  const businessTypes = [\n    { label: 'Retail Store', value: 'retail' },\n    { label: 'Restaurant/Café', value: 'restaurant' },\n    { label: 'Service Business', value: 'service' },\n    { label: 'Other', value: 'other' },\n  ];\n\n  const renderStep1 = () => (\n    <View style={styles.stepContainer}>\n      <Text style={styles.stepTitle}>Personal Information</Text>\n      <Text style={styles.stepDescription}>Tell us about yourself</Text>\n\n      <View style={styles.row}>\n        <View style={[styles.inputContainer, { flex: 1, marginRight: 8 }]}>\n          {/* The Icon was previously rendered here, SimpleTextInput might handle icons internally or not at all based on new spec */}\n          <SimpleTextInput\n            label=\"First Name *\"\n            value={firstName}\n            onValueChange={_text => {\n              setFirstName(__text);\n              if (errors.firstName) {\n                setErrors(prev => ({ ...prev, firstName: '' }));\n              }\n            }}\n            placeholder=\"John\"\n            autoCapitalize=\"words\"\n            // Assuming error state is handled internally by SimpleTextInput if errors.firstName is truthy\n            // containerStyle={{ marginBottom: 0 }} // Retained if styles.inputContainer provides necessary spacing\n          />\n          {errors.firstName && <Text style={styles.errorText}>{errors.firstName}</Text>}\n        </View>\n\n        <View style={[styles.inputContainer, { flex: 1, marginLeft: 8 }]}>\n          {/* The Icon was previously rendered here */}\n          <SimpleTextInput\n            label=\"Last Name *\"\n            value={lastName}\n            onValueChange={_text => {\n              setLastName(__text);\n              if (errors.lastName) {\n                setErrors(prev => ({ ...prev, lastName: '' }));\n              }\n            }}\n            placeholder=\"Smith\"\n            autoCapitalize=\"words\"\n            // containerStyle={{ marginBottom: 0 }}\n          />\n          {errors.lastName && <Text style={styles.errorText}>{errors.lastName}</Text>}\n        </View>\n      </View>\n\n      <View style={styles.inputContainer}>\n        <SimpleTextInput\n          label=\"Email Address *\"\n          value={email}\n          onValueChange={_text => {\n            setEmail(__text);\n            if (errors.email) {\n              setErrors(prev => ({ ...prev, email: '' }));\n            }\n          }}\n          placeholder=\"john@example.com\"\n          keyboardType=\"email-address\"\n          autoCapitalize=\"none\"\n          autoCorrect={false}\n        />\n        {errors.email && <Text style={styles.errorText}>{errors.email}</Text>}\n      </View>\n\n      <View style={styles.inputContainer}>\n        <SimpleTextInput\n          label=\"Phone Number *\"\n          value={phone}\n          onValueChange={_text => {\n            setPhone(__text);\n            if (errors.phone) {\n              setErrors(prev => ({ ...prev, phone: '' }));\n            }\n          }}\n          placeholder=\"+44 7700 900123\"\n          keyboardType=\"phone-pad\"\n        />\n        {errors.phone && <Text style={styles.errorText}>{errors.phone}</Text>}\n      </View>\n\n      <View style={styles.inputContainer}>\n        <SimpleTextInput\n          label=\"Password *\"\n          value={password}\n          onValueChange={_text => {\n            setPassword(__text);\n            if (errors.password) {\n              setErrors(prev => ({ ...prev, password: '' }));\n            }\n          }}\n          placeholder=\"At least 8 characters\"\n          secure={!showPassword} // Use 'secure' prop\n        />\n        {/* Note: Password visibility toggle icon is removed as SimpleTextInput spec does not include rightIcon */}\n        {/* Consider adding a separate button for visibility if required by UX and not handled by SimpleTextInput */}\n        {errors.password && <Text style={styles.errorText}>{errors.password}</Text>}\n      </View>\n\n      <View style={styles.inputContainer}>\n        <SimpleTextInput\n          label=\"Confirm Password *\"\n          value={confirmPassword}\n          onValueChange={_text => {\n            setConfirmPassword(__text);\n            if (errors.confirmPassword) {\n              setErrors(prev => ({ ...prev, confirmPassword: '' }));\n            }\n          }}\n          placeholder=\"Repeat your password\"\n          secure={!showConfirmPassword} // Use 'secure' prop\n        />\n        {/* Note: Password visibility toggle icon is removed */}\n        {errors.confirmPassword && <Text style={styles.errorText}>{errors.confirmPassword}</Text>}\n      </View>\n\n      <View style={styles.inputContainer}>\n        <SimpleTextInput\n          label=\"4-Digit PIN *\"\n          value={pin}\n          onValueChange={text => {\n            setPin(text.replace(/[^0-9]/g, '').slice(0, 4));\n            if (errors.pin) {\n              setErrors(prev => ({ ...prev, pin: '' }));\n            }\n          }}\n          placeholder=\"1234\"\n          keyboardType=\"numeric\"\n          maxLength={4}\n          secure // Use 'secure' prop\n        />\n        {/* helpText was originally a separate Text component, keeping it that way. */}\n        <Text style={styles.helpText}>Used for quick access and secure transactions</Text>\n        {errors.pin && <Text style={styles.errorText}>{errors.pin}</Text>}\n      </View>\n    </View>\n  );\n\n  const renderStep2 = () => (\n    <View style={styles.stepContainer}>\n      <Text style={styles.stepTitle}>Business Information</Text>\n      <Text style={styles.stepDescription}>Set up your business profile</Text>\n\n      <View style={styles.inputContainer}>\n        <SimpleTextInput\n          label=\"Business Name *\"\n          value={businessName}\n          onValueChange={_text => {\n            setBusinessName(__text);\n            if (errors.businessName) {\n              setErrors(prev => ({ ...prev, businessName: '' }));\n            }\n          }}\n          placeholder=\"Your Business Name\"\n          autoCapitalize=\"words\"\n        />\n        {errors.businessName && <Text style={styles.errorText}>{errors.businessName}</Text>}\n      </View>\n\n      <View style={styles.inputContainer}>\n        <Text style={styles.inputLabel}>Business Type *</Text>\n        <View style={styles.pickerWrapper}>\n          <Icon name=\"category\" size={20} color={Colors.mediumGray} />\n          <Picker\n            style={styles.picker}\n            selectedValue={businessType}\n            onValueChange={_value => setBusinessType(__value)}>\n            {businessTypes.map(type => (\n              <Picker.Item key={type.value} label={type.label} value={type.value} />\n            ))}\n          </Picker>\n        </View>\n      </View>\n\n      <View style={styles.inputContainer}>\n        <SimpleTextInput\n          label=\"Business Address *\"\n          value={businessAddress}\n          onValueChange={_text => {\n            setBusinessAddress(__text);\n            if (errors.businessAddress) {\n              setErrors(prev => ({ ...prev, businessAddress: '' }));\n            }\n          }}\n          placeholder=\"123 High Street, _London, SW1A 1AA\"\n          multiline\n          numberOfLines={2}\n        />\n        {errors.businessAddress && <Text style={styles.errorText}>{errors.businessAddress}</Text>}\n      </View>\n\n      <View style={styles.inputContainer}>\n        <SimpleTextInput\n          label=\"Business Phone *\"\n          value={businessPhone}\n          onValueChange={_text => {\n            setBusinessPhone(__text);\n            if (errors.businessPhone) {\n              setErrors(prev => ({ ...prev, businessPhone: '' }));\n            }\n          }}\n          placeholder=\"+44 20 7946 0958\"\n          keyboardType=\"phone-pad\"\n        />\n        {errors.businessPhone && <Text style={styles.errorText}>{errors.businessPhone}</Text>}\n      </View>\n\n      <View style={styles.inputContainer}>\n        <SimpleTextInput\n          label=\"Business Email\"\n          value={businessEmail}\n          onValueChange={setBusinessEmail}\n          placeholder=\"contact@yourbusiness.com (__optional)\"\n          keyboardType=\"email-address\"\n          autoCapitalize=\"none\"\n        />\n        {/* helpText was originally a separate Text component, keeping it that way. */}\n        <Text style={styles.helpText}>Leave blank to use your personal email</Text>\n      </View>\n\n      <View style={styles.inputContainer}>\n        <SimpleTextInput\n          label=\"VAT Number\"\n          value={vatNumber}\n          onValueChange={setVatNumber}\n          placeholder=\"GB123456789 (__optional)\"\n          autoCapitalize=\"characters\"\n        />\n        {/* helpText was originally a separate Text component, keeping it that way. */}\n        <Text style={styles.helpText}>Required for VAT-registered businesses</Text>\n      </View>\n\n      {/* Terms and Conditions */}\n      <TouchableOpacity\n        style={styles.termsContainer}\n        onPress={() => setAcceptedTerms(!acceptedTerms)}>\n        <Icon\n          name={acceptedTerms ? 'check-box' : 'check-box-outline-blank'}\n          size={24}\n          color={acceptedTerms ? Colors.primary : Colors.mediumGray}\n        />\n        <View style={styles.termsTextContainer}>\n          <Text style={styles.termsText}>\n            I accept the <Text style={styles.termsLink}>Terms and Conditions</Text> and{' '}\n            <Text style={styles.termsLink}>Privacy Policy</Text>\n          </Text>\n          {errors.terms && <Text style={styles.errorText}>{errors.terms}</Text>}\n        </View>\n      </TouchableOpacity>\n    </View>\n  );\n\n  return (\n    <KeyboardAvoidingView\n      style={styles.container}\n      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}>\n      <ScrollView\n        contentContainerStyle={styles.scrollContent}\n        keyboardShouldPersistTaps=\"handled\"\n        showsVerticalScrollIndicator={false}>\n        {/* Header */}\n        <View style={styles.header}>\n          <Icon name=\"storefront\" size={48} color={Colors.primary} />\n          <Text style={styles.title}>Create Account</Text>\n          <Text style={styles.subtitle}>Join thousands of businesses using Fynlo POS</Text>\n        </View>\n\n        {/* Progress Indicator */}\n        <View style={styles.progressContainer}>\n          <View style={styles.progressBar}>\n            <View style={[styles.progressStep, currentStep >= 1 && styles.progressStepActive]}>\n              <Text\n                style={[\n                  styles.progressStepText,\n                  currentStep >= 1 && styles.progressStepTextActive,\n                ]}>\n                1\n              </Text>\n            </View>\n            <View style={[styles.progressLine, currentStep >= 2 && styles.progressLineActive]} />\n            <View style={[styles.progressStep, currentStep >= 2 && styles.progressStepActive]}>\n              <Text\n                style={[\n                  styles.progressStepText,\n                  currentStep >= 2 && styles.progressStepTextActive,\n                ]}>\n                2\n              </Text>\n            </View>\n          </View>\n          <View style={styles.progressLabels}>\n            <Text style={styles.progressLabel}>Personal</Text>\n            <Text style={styles.progressLabel}>Business</Text>\n          </View>\n        </View>\n\n        {/* Form */}\n        <View style={styles.formContainer}>\n          {currentStep === 1 ? renderStep1() : renderStep2()}\n\n          {/* Navigation Buttons */}\n          <View style={styles.navigationContainer}>\n            {currentStep === 2 && (\n              <TouchableOpacity style={styles.backButton} onPress={handleBack}>\n                <Icon name=\"arrow-back\" size={20} color={Colors.secondary} />\n                <Text style={styles.backButtonText}>Back</Text>\n              </TouchableOpacity>\n            )}\n\n            <TouchableOpacity\n              style={[styles.nextButton, isLoading && styles.nextButtonDisabled]}\n              onPress={currentStep === 1 ? handleNext : handleSignUp}\n              disabled={isLoading}>\n              {isLoading ? (\n                <ActivityIndicator size=\"small\" color={Colors.white} />\n              ) : (\n                <>\n                  <Text style={styles.nextButtonText}>\n                    {currentStep === 1 ? 'Next' : 'Create Account'}\n                  </Text>\n                  <Icon\n                    name={currentStep === 1 ? 'arrow-forward' : 'check'}\n                    size={20}\n                    color={Colors.white}\n                  />\n                </>\n              )}\n            </TouchableOpacity>\n          </View>\n\n          {/* Sign In Link */}\n          <View style={styles.signInContainer}>\n            <Text style={styles.signInText}>Already have an account? </Text>\n            <TouchableOpacity onPress={onSwitchToSignIn} disabled={isLoading}>\n              <Text style={styles.signInLinkText}>Sign In</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n      </ScrollView>\n    </KeyboardAvoidingView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  scrollContent: {\n    flexGrow: 1,\n    paddingHorizontal: 24,\n    paddingTop: 60,\n    paddingBottom: 32,\n  },\n  header: {\n    alignItems: 'center',\n    marginBottom: 32,\n  },\n  title: {\n    fontSize: 28,\n    fontWeight: 'bold',\n    color: Colors.primary,\n    marginTop: 12,\n    marginBottom: 8,\n  },\n  subtitle: {\n    fontSize: 16,\n    color: Colors.lightText,\n    textAlign: 'center',\n  },\n  progressContainer: {\n    marginBottom: 32,\n  },\n  progressBar: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginBottom: 8,\n  },\n  progressStep: {\n    width: 32,\n    height: 32,\n    borderRadius: 16,\n    backgroundColor: Colors.lightGray,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  progressStepActive: {\n    backgroundColor: Colors.primary,\n  },\n  progressStepText: {\n    fontSize: 14,\n    fontWeight: 'bold',\n    color: Colors.mediumGray,\n  },\n  progressStepTextActive: {\n    color: Colors.white,\n  },\n  progressLine: {\n    width: 60,\n    height: 2,\n    backgroundColor: Colors.lightGray,\n    marginHorizontal: 8,\n  },\n  progressLineActive: {\n    backgroundColor: Colors.primary,\n  },\n  progressLabels: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    paddingHorizontal: 16,\n  },\n  progressLabel: {\n    fontSize: 12,\n    color: Colors.lightText,\n  },\n  formContainer: {\n    backgroundColor: Colors.white,\n    borderRadius: 16,\n    padding: 24,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 8,\n    elevation: 4,\n  },\n  stepContainer: {\n    marginBottom: 24,\n  },\n  stepTitle: {\n    fontSize: 22,\n    fontWeight: 'bold',\n    color: Colors.text,\n    marginBottom: 8,\n    textAlign: 'center',\n  },\n  stepDescription: {\n    fontSize: 16,\n    color: Colors.lightText,\n    marginBottom: 24,\n    textAlign: 'center',\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  inputContainer: {\n    marginBottom: 20,\n  },\n  inputLabel: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.text,\n    marginBottom: 8,\n  },\n  inputWrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: Colors.background,\n    borderRadius: 8,\n    paddingHorizontal: 12,\n    paddingVertical: 12,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    gap: 12,\n  },\n  inputError: {\n    borderColor: Colors.danger,\n  },\n  textInput: {\n    flex: 1,\n    fontSize: 16,\n    color: Colors.text,\n  },\n  textArea: {\n    minHeight: 60,\n    textAlignVertical: 'top',\n  },\n  pickerWrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: Colors.background,\n    borderRadius: 8,\n    paddingLeft: 12,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    gap: 12,\n  },\n  picker: {\n    flex: 1,\n    height: 48,\n  },\n  errorText: {\n    fontSize: 14,\n    color: Colors.danger,\n    marginTop: 4,\n  },\n  helpText: {\n    fontSize: 12,\n    color: Colors.lightText,\n    marginTop: 4,\n  },\n  termsContainer: {\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    marginTop: 16,\n    gap: 8,\n  },\n  termsTextContainer: {\n    flex: 1,\n  },\n  termsText: {\n    fontSize: 14,\n    color: Colors.text,\n    lineHeight: 20,\n  },\n  termsLink: {\n    color: Colors.secondary,\n    fontWeight: '500',\n  },\n  navigationContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginTop: 8,\n    gap: 16,\n  },\n  backButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingVertical: 12,\n    paddingHorizontal: 16,\n    gap: 8,\n  },\n  backButtonText: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.secondary,\n  },\n  nextButton: {\n    flex: 1,\n    backgroundColor: Colors.primary,\n    borderRadius: 8,\n    paddingVertical: 16,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    gap: 8,\n  },\n  nextButtonDisabled: {\n    opacity: 0.7,\n  },\n  nextButtonText: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: Colors.white,\n  },\n  signInContainer: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 24,\n  },\n  signInText: {\n    fontSize: 16,\n    color: Colors.lightText,\n  },\n  signInLinkText: {\n    fontSize: 16,\n    color: Colors.primary,\n    fontWeight: '500',\n  },\n});\n\nexport default SignUpScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/auth/__tests__/LoginScreen.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_toggleButton' is assigned a value but never used.","line":102,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":102,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_loginButton' is assigned a value but never used.","line":116,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":116,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_passwordInput' is assigned a value but never used.","line":130,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":130,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_loginButton' is assigned a value but never used.","line":131,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":131,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_usernameInput' is assigned a value but never used.","line":146,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":146,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_loginButton' is assigned a value but never used.","line":147,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":147,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_usernameInput' is assigned a value but never used.","line":167,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":167,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_passwordInput' is assigned a value but never used.","line":168,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":168,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_loginButton' is assigned a value but never used.","line":169,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":169,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_usernameInput' is assigned a value but never used.","line":189,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":189,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_passwordInput' is assigned a value but never used.","line":190,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":190,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_loginButton' is assigned a value but never used.","line":191,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":191,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_usernameInput' is assigned a value but never used.","line":209,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":209,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_passwordInput' is assigned a value but never used.","line":210,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":210,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_loginButton' is assigned a value but never used.","line":211,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":211,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_usernameInput' is assigned a value but never used.","line":234,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":234,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_passwordInput' is assigned a value but never used.","line":235,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":235,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_loginButton' is assigned a value but never used.","line":236,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":236,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_usernameInput' is assigned a value but never used.","line":259,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":259,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_passwordInput' is assigned a value but never used.","line":260,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":260,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_forgotPasswordButton' is assigned a value but never used.","line":279,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":279,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_usernameInput' is assigned a value but never used.","line":318,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":318,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_passwordInput' is assigned a value but never used.","line":319,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":319,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_loginButton' is assigned a value but never used.","line":320,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":320,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_usernameInput' is assigned a value but never used.","line":338,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":338,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_passwordInput' is assigned a value but never used.","line":339,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":339,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_loginButton' is assigned a value but never used.","line":340,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":340,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_usernameInput' is assigned a value but never used.","line":360,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":360,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_passwordInput' is assigned a value but never used.","line":361,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":361,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_loginButton' is assigned a value but never used.","line":362,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":362,"endColumn":25}],"suppressedMessages":[],"errorCount":30,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Unit Tests for LoginScreen Component\n * Testing user authentication UI and interactions\n */\n\nimport React from 'react';\nimport { fireEvent, waitFor } from '@testing-library/react-native';\nimport { Alert } from 'react-native';\nimport {\n  render,\n  createMockNavigation,\n  createMockAppStore,\n} from '../../../__tests__/utils/testUtils';\nimport LoginScreen from '../LoginScreen';\nimport DatabaseService from '../../../services/DatabaseService';\n\n// Mock navigation\nconst mockNavigation = createMockNavigation();\njest.mock('@react-navigation/native', () => ({\n  ...jest.requireActual('@react-navigation/native'),\n  useNavigation: () => mockNavigation,\n}));\n\n// Mock DatabaseService\njest.mock('../../../services/DatabaseService');\nconst mockDatabaseService = DatabaseService as jest.Mocked<typeof DatabaseService>;\n\n// Mock Alert\njest.spyOn(__Alert, 'alert');\n\n// Mock Zustand store\nconst mockStore = createMockAppStore();\njest.mock('../../../store/useAppStore', () => ({\n  __esModule: _true,\n  default: jest.fn(() => mockStore),\n}));\n\ndescribe('LoginScreen', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    mockDatabaseService.getInstance.mockReturnValue({\n      login: jest.fn(),\n    } as unknown);\n  });\n\n  describe('Rendering', () => {\n    it('should render all essential elements', () => {\n      const { getByText, getByPlaceholderText } = render(<LoginScreen />);\n\n      expect(getByText('Fynlo')).toBeTruthy();\n      expect(getByText('Point of Sale')).toBeTruthy();\n      expect(getByText('Welcome Back')).toBeTruthy();\n      expect(getByText('Sign in to continue')).toBeTruthy();\n      expect(getByPlaceholderText('Username')).toBeTruthy();\n      expect(getByPlaceholderText('Password')).toBeTruthy();\n      expect(getByText('Sign In')).toBeTruthy();\n      expect(getByText('Forgot Password?')).toBeTruthy();\n    });\n\n    it('should render demo credentials section', () => {\n      const { getByText } = render(<LoginScreen />);\n\n      expect(getByText('Demo Credentials:')).toBeTruthy();\n      expect(getByText('Username: demo')).toBeTruthy();\n      expect(getByText('Password: demo123')).toBeTruthy();\n    });\n\n    it('should render footer information', () => {\n      const { getByText } = render(<LoginScreen />);\n\n      expect(getByText('Fynlo POS • Powered by CashApp')).toBeTruthy();\n    });\n  });\n\n  describe('Form Interactions', () => {\n    it('should update username input', () => {\n      const { getByPlaceholderText } = render(<LoginScreen />);\n      const usernameInput = getByPlaceholderText('Username');\n\n      fireEvent.changeText(__usernameInput, 'test@example.com');\n\n      expect(usernameInput.props.value).toBe('test@example.com');\n    });\n\n    it('should update password input', () => {\n      const { getByPlaceholderText } = render(<LoginScreen />);\n      const passwordInput = getByPlaceholderText('Password');\n\n      fireEvent.changeText(__passwordInput, 'password123');\n\n      expect(passwordInput.props.value).toBe('password123');\n    });\n\n    it('should toggle password visibility', () => {\n      const { getByPlaceholderText, getByTestId } = render(<LoginScreen />);\n      const passwordInput = getByPlaceholderText('Password');\n\n      // Initially password should be hidden\n      expect(passwordInput.props.secureTextEntry).toBe(__true);\n\n      // Find and press the visibility toggle button\n      const _toggleButton = getByTestId('password-toggle');\n      fireEvent.press(__toggleButton);\n\n      expect(passwordInput.props.secureTextEntry).toBe(__false);\n\n      // Press again to hide\n      fireEvent.press(__toggleButton);\n      expect(passwordInput.props.secureTextEntry).toBe(__true);\n    });\n  });\n\n  describe('Login Functionality', () => {\n    it('should show error for empty credentials', async () => {\n      const { getByText } = render(<LoginScreen />);\n      const _loginButton = getByText('Sign In');\n\n      fireEvent.press(__loginButton);\n\n      await waitFor(() => {\n        expect(Alert.alert).toHaveBeenCalledWith(\n          'Error',\n          'Please enter both username and password',\n        );\n      });\n    });\n\n    it('should show error for empty username', async () => {\n      const { getByText, getByPlaceholderText } = render(<LoginScreen />);\n      const _passwordInput = getByPlaceholderText('Password');\n      const _loginButton = getByText('Sign In');\n\n      fireEvent.changeText(__passwordInput, 'password123');\n      fireEvent.press(__loginButton);\n\n      await waitFor(() => {\n        expect(Alert.alert).toHaveBeenCalledWith(\n          'Error',\n          'Please enter both username and password',\n        );\n      });\n    });\n\n    it('should show error for empty password', async () => {\n      const { getByText, getByPlaceholderText } = render(<LoginScreen />);\n      const _usernameInput = getByPlaceholderText('Username');\n      const _loginButton = getByText('Sign In');\n\n      fireEvent.changeText(__usernameInput, 'test@example.com');\n      fireEvent.press(__loginButton);\n\n      await waitFor(() => {\n        expect(Alert.alert).toHaveBeenCalledWith(\n          'Error',\n          'Please enter both username and password',\n        );\n      });\n    });\n\n    it('should attempt login with valid credentials', async () => {\n      const _mockLogin = jest.fn().mockResolvedValue(__true);\n      mockDatabaseService.getInstance.mockReturnValue({\n        login: _mockLogin,\n      } as unknown);\n\n      const { getByText, getByPlaceholderText } = render(<LoginScreen />);\n      const _usernameInput = getByPlaceholderText('Username');\n      const _passwordInput = getByPlaceholderText('Password');\n      const _loginButton = getByText('Sign In');\n\n      fireEvent.changeText(__usernameInput, 'test@example.com');\n      fireEvent.changeText(__passwordInput, 'password123');\n      fireEvent.press(__loginButton);\n\n      await waitFor(() => {\n        expect(__mockLogin).toHaveBeenCalledWith('test@example.com', 'password123');\n        expect(mockStore.setUser).toHaveBeenCalled();\n        expect(mockStore.setSession).toHaveBeenCalled();\n      });\n    });\n\n    it('should handle login failure', async () => {\n      const _mockLogin = jest.fn().mockResolvedValue(__false);\n      mockDatabaseService.getInstance.mockReturnValue({\n        login: _mockLogin,\n      } as unknown);\n\n      const { getByText, getByPlaceholderText } = render(<LoginScreen />);\n      const _usernameInput = getByPlaceholderText('Username');\n      const _passwordInput = getByPlaceholderText('Password');\n      const _loginButton = getByText('Sign In');\n\n      fireEvent.changeText(__usernameInput, 'wrong@example.com');\n      fireEvent.changeText(__passwordInput, 'wrongpassword');\n      fireEvent.press(__loginButton);\n\n      await waitFor(() => {\n        expect(Alert.alert).toHaveBeenCalledWith('Login Failed', 'Invalid username or password');\n      });\n    });\n\n    it('should handle login error', async () => {\n      const _mockLogin = jest.fn().mockRejectedValue(new Error('Network error'));\n      mockDatabaseService.getInstance.mockReturnValue({\n        login: _mockLogin,\n      } as unknown);\n\n      const { getByText, getByPlaceholderText } = render(<LoginScreen />);\n      const _usernameInput = getByPlaceholderText('Username');\n      const _passwordInput = getByPlaceholderText('Password');\n      const _loginButton = getByText('Sign In');\n\n      fireEvent.changeText(__usernameInput, 'test@example.com');\n      fireEvent.changeText(__passwordInput, 'password123');\n      fireEvent.press(__loginButton);\n\n      await waitFor(() => {\n        expect(Alert.alert).toHaveBeenCalledWith(\n          'Error',\n          'An error occurred during login. Please try again.',\n        );\n      });\n    });\n\n    it('should show loading state during login', async () => {\n      const _mockLogin = jest\n        .fn()\n        .mockImplementation(() => new Promise(resolve => setTimeout(() => resolve(__true), 100)));\n      mockDatabaseService.getInstance.mockReturnValue({\n        login: _mockLogin,\n      } as unknown);\n\n      const { getByText, getByPlaceholderText } = render(<LoginScreen />);\n      const _usernameInput = getByPlaceholderText('Username');\n      const _passwordInput = getByPlaceholderText('Password');\n      const _loginButton = getByText('Sign In');\n\n      fireEvent.changeText(__usernameInput, 'test@example.com');\n      fireEvent.changeText(__passwordInput, 'password123');\n      fireEvent.press(__loginButton);\n\n      // Should show loading text\n      expect(getByText('Signing In...')).toBeTruthy();\n\n      await waitFor(() => {\n        expect(getByText('Sign In')).toBeTruthy();\n      });\n    });\n\n    it('should disable button during loading', async () => {\n      const _mockLogin = jest\n        .fn()\n        .mockImplementation(() => new Promise(resolve => setTimeout(() => resolve(__true), 100)));\n      mockDatabaseService.getInstance.mockReturnValue({\n        login: _mockLogin,\n      } as unknown);\n\n      const { getByText, getByPlaceholderText } = render(<LoginScreen />);\n      const _usernameInput = getByPlaceholderText('Username');\n      const _passwordInput = getByPlaceholderText('Password');\n      const loginButton = getByText('Sign In');\n\n      fireEvent.changeText(__usernameInput, 'test@example.com');\n      fireEvent.changeText(__passwordInput, 'password123');\n      fireEvent.press(__loginButton);\n\n      // Button should be disabled during loading\n      expect(loginButton.props.disabled).toBe(__true);\n\n      await waitFor(() => {\n        expect(loginButton.props.disabled).toBe(__false);\n      });\n    });\n  });\n\n  describe('Navigation', () => {\n    it('should navigate to forgot password screen', () => {\n      const { getByText } = render(<LoginScreen />);\n      const _forgotPasswordButton = getByText('Forgot Password?');\n\n      fireEvent.press(__forgotPasswordButton);\n\n      expect(mockNavigation.navigate).toHaveBeenCalledWith('ForgotPassword');\n    });\n  });\n\n  describe('Accessibility', () => {\n    it('should have proper accessibility labels', () => {\n      const { getByPlaceholderText, getByText } = render(<LoginScreen />);\n\n      const usernameInput = getByPlaceholderText('Username');\n      const passwordInput = getByPlaceholderText('Password');\n      const loginButton = getByText('Sign In');\n\n      expect(usernameInput.props.accessibilityLabel).toBeDefined();\n      expect(passwordInput.props.accessibilityLabel).toBeDefined();\n      expect(loginButton.props.accessibilityLabel).toBeDefined();\n    });\n\n    it('should support keyboard navigation', () => {\n      const { getByPlaceholderText } = render(<LoginScreen />);\n      const usernameInput = getByPlaceholderText('Username');\n      const passwordInput = getByPlaceholderText('Password');\n\n      expect(usernameInput.props.returnKeyType).toBe('next');\n      expect(passwordInput.props.returnKeyType).toBe('done');\n    });\n  });\n\n  describe('Form Validation', () => {\n    it('should trim whitespace from username', async () => {\n      const _mockLogin = jest.fn().mockResolvedValue(__true);\n      mockDatabaseService.getInstance.mockReturnValue({\n        login: _mockLogin,\n      } as unknown);\n\n      const { getByText, getByPlaceholderText } = render(<LoginScreen />);\n      const _usernameInput = getByPlaceholderText('Username');\n      const _passwordInput = getByPlaceholderText('Password');\n      const _loginButton = getByText('Sign In');\n\n      fireEvent.changeText(__usernameInput, '  test@example.com  ');\n      fireEvent.changeText(__passwordInput, 'password123');\n      fireEvent.press(__loginButton);\n\n      await waitFor(() => {\n        expect(__mockLogin).toHaveBeenCalledWith('test@example.com', 'password123');\n      });\n    });\n\n    it('should handle special characters in credentials', async () => {\n      const _mockLogin = jest.fn().mockResolvedValue(__true);\n      mockDatabaseService.getInstance.mockReturnValue({\n        login: _mockLogin,\n      } as unknown);\n\n      const { getByText, getByPlaceholderText } = render(<LoginScreen />);\n      const _usernameInput = getByPlaceholderText('Username');\n      const _passwordInput = getByPlaceholderText('Password');\n      const _loginButton = getByText('Sign In');\n\n      fireEvent.changeText(__usernameInput, 'test+user@example.com');\n      fireEvent.changeText(__passwordInput, 'P@ssw0rd!123');\n      fireEvent.press(__loginButton);\n\n      await waitFor(() => {\n        expect(__mockLogin).toHaveBeenCalledWith('test+user@example.com', 'P@ssw0rd!123');\n      });\n    });\n  });\n\n  describe('Store Integration', () => {\n    it('should call setLoading during login process', async () => {\n      const _mockLogin = jest.fn().mockResolvedValue(__true);\n      mockDatabaseService.getInstance.mockReturnValue({\n        login: _mockLogin,\n      } as unknown);\n\n      const { getByText, getByPlaceholderText } = render(<LoginScreen />);\n      const _usernameInput = getByPlaceholderText('Username');\n      const _passwordInput = getByPlaceholderText('Password');\n      const _loginButton = getByText('Sign In');\n\n      fireEvent.changeText(__usernameInput, 'test@example.com');\n      fireEvent.changeText(__passwordInput, 'password123');\n      fireEvent.press(__loginButton);\n\n      await waitFor(() => {\n        expect(mockStore.setLoading).toHaveBeenCalledWith(__true);\n        expect(mockStore.setLoading).toHaveBeenCalledWith(__false);\n      });\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/customers/CustomersScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_parsedCustomers' is assigned a value but never used.","line":54,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":54,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_createStyles' is assigned a value but never used.","line":475,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":475,"endColumn":20},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.container","line":477,"column":5,"nodeType":"Property","endLine":480,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.header","line":481,"column":5,"nodeType":"Property","endLine":488,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.backButton","line":489,"column":5,"nodeType":"Property","endLine":498,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.headerCenter","line":499,"column":5,"nodeType":"Property","endLine":502,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.headerTitle","line":503,"column":5,"nodeType":"Property","endLine":507,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.headerSubtitle","line":508,"column":5,"nodeType":"Property","endLine":511,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.addButton","line":512,"column":5,"nodeType":"Property","endLine":514,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.statsBar","line":515,"column":5,"nodeType":"Property","endLine":523,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.statCard","line":524,"column":5,"nodeType":"Property","endLine":527,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.statValue","line":528,"column":5,"nodeType":"Property","endLine":532,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.statLabel","line":533,"column":5,"nodeType":"Property","endLine":537,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.searchSection","line":538,"column":5,"nodeType":"Property","endLine":543,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.searchContainer","line":544,"column":5,"nodeType":"Property","endLine":553,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.searchInput","line":554,"column":5,"nodeType":"Property","endLine":559,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.segmentFilters","line":560,"column":5,"nodeType":"Property","endLine":562,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.segmentFilter","line":563,"column":5,"nodeType":"Property","endLine":569,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.segmentFilterActive","line":570,"column":5,"nodeType":"Property","endLine":572,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.segmentFilterText","line":573,"column":5,"nodeType":"Property","endLine":577,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.segmentFilterTextActive","line":578,"column":5,"nodeType":"Property","endLine":580,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.customersList","line":581,"column":5,"nodeType":"Property","endLine":583,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.customerCard","line":584,"column":5,"nodeType":"Property","endLine":594,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.customerHeader","line":595,"column":5,"nodeType":"Property","endLine":599,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.customerAvatar","line":600,"column":5,"nodeType":"Property","endLine":602,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.customerInfo","line":603,"column":5,"nodeType":"Property","endLine":605,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.customerNameRow","line":606,"column":5,"nodeType":"Property","endLine":610,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.customerName","line":611,"column":5,"nodeType":"Property","endLine":616,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.levelBadge","line":617,"column":5,"nodeType":"Property","endLine":621,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.levelText","line":622,"column":5,"nodeType":"Property","endLine":625,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.customerEmail","line":626,"column":5,"nodeType":"Property","endLine":630,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.customerPhone","line":631,"column":5,"nodeType":"Property","endLine":634,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.customerStats","line":635,"column":5,"nodeType":"Property","endLine":637,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.customerMetrics","line":638,"column":5,"nodeType":"Property","endLine":644,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.metricItem","line":645,"column":5,"nodeType":"Property","endLine":648,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.metricText","line":649,"column":5,"nodeType":"Property","endLine":653,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.emptyState","line":654,"column":5,"nodeType":"Property","endLine":659,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.emptyStateText","line":660,"column":5,"nodeType":"Property","endLine":665,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.emptyStateSubtext","line":666,"column":5,"nodeType":"Property","endLine":670,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.modalOverlay","line":671,"column":5,"nodeType":"Property","endLine":676,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.customerModal","line":677,"column":5,"nodeType":"Property","endLine":687,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.modalHeader","line":688,"column":5,"nodeType":"Property","endLine":695,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.modalTitle","line":696,"column":5,"nodeType":"Property","endLine":700,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.modalContent","line":701,"column":5,"nodeType":"Property","endLine":703,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.customerProfile","line":704,"column":5,"nodeType":"Property","endLine":707,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.profileAvatar","line":708,"column":5,"nodeType":"Property","endLine":710,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.profileName","line":711,"column":5,"nodeType":"Property","endLine":716,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.profileLevel","line":717,"column":5,"nodeType":"Property","endLine":721,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.profileLevelText","line":722,"column":5,"nodeType":"Property","endLine":725,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.detailsSection","line":726,"column":5,"nodeType":"Property","endLine":728,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.sectionTitle","line":729,"column":5,"nodeType":"Property","endLine":734,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.detailRow","line":735,"column":5,"nodeType":"Property","endLine":739,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.detailText","line":740,"column":5,"nodeType":"Property","endLine":744,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.purchaseGrid","line":745,"column":5,"nodeType":"Property","endLine":749,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.purchaseCard","line":750,"column":5,"nodeType":"Property","endLine":757,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.purchaseValue","line":758,"column":5,"nodeType":"Property","endLine":762,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.purchaseLabel","line":763,"column":5,"nodeType":"Property","endLine":768,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.preferredItems","line":769,"column":5,"nodeType":"Property","endLine":773,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.preferredItem","line":774,"column":5,"nodeType":"Property","endLine":779,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.preferredItemText","line":780,"column":5,"nodeType":"Property","endLine":784,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.customerTags","line":785,"column":5,"nodeType":"Property","endLine":789,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.customerTag","line":790,"column":5,"nodeType":"Property","endLine":795,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.customerTagText","line":796,"column":5,"nodeType":"Property","endLine":800,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.actionButtons","line":801,"column":5,"nodeType":"Property","endLine":805,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.actionButton","line":806,"column":5,"nodeType":"Property","endLine":813,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.editButton","line":814,"column":5,"nodeType":"Property","endLine":816,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.orderButton","line":817,"column":5,"nodeType":"Property","endLine":819,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.actionButtonText","line":820,"column":5,"nodeType":"Property","endLine":825,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.centered","line":826,"column":5,"nodeType":"Property","endLine":831,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.loadingText","line":832,"column":5,"nodeType":"Property","endLine":837,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.retryButton","line":838,"column":5,"nodeType":"Property","endLine":845,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.retryButtonText","line":846,"column":5,"nodeType":"Property","endLine":851,"endColumn":6}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'filterCustomers'. Either include it or remove the dependency array. Outer scope values like '_searchQuery' aren't valid dependencies because mutating them doesn't re-render the component.","line":41,"column":6,"nodeType":"ArrayExpression","endLine":41,"endColumn":48,"suggestions":[{"desc":"Update the dependencies array to be: [customers, selectedSegment, filterCustomers]","fix":{"range":[1476,1518],"text":"[customers, selectedSegment, filterCustomers]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":2,"fatalErrorCount":0,"warningCount":70,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  StatusBar,\n  SafeAreaView,\n  TouchableOpacity,\n  ScrollView,\n  FlatList,\n  TextInput,\n  Modal,\n  ActivityIndicator,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation } from '@react-navigation/native';\n// import { generateCustomers, CustomerData } from '../../utils/mockDataGenerator'; // Removed\nimport { useTheme, useThemedStyles } from '../../design-system/ThemeProvider';\nimport DataService from '../../services/DataService'; // Added\nimport { CustomerData } from '../../types'; // Updated import path\n\nconst CustomersScreen: React.FC = () => {\n  const navigation = useNavigation();\n  const { theme } = useTheme();\n  const styles = useThemedStyles(__createStyles);\n  const [customers, setCustomers] = useState<CustomerData[]>([]);\n  const [filteredCustomers, setFilteredCustomers] = useState<CustomerData[]>([]);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedSegment, setSelectedSegment] = useState('all');\n  const [selectedCustomer, setSelectedCustomer] = useState<CustomerData | null>(__null);\n  const [isLoading, setIsLoading] = useState<boolean>(__true); // Added\n  const [error, setError] = useState<string | null>(__null); // Added\n\n  useEffect(() => {\n    loadCustomers();\n  }, []);\n\n  useEffect(() => {\n    filterCustomers();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [customers, _searchQuery, selectedSegment]);\n\n  const loadCustomers = async () => {\n    // Modified\n    setIsLoading(__true);\n    setError(__null);\n    try {\n      const dataService = DataService.getInstance();\n      // Assuming a getCustomers method will be added to DataService\n      // For now, this will likely fail or return empty if not implemented, demonstrating error state\n      const customerData = await dataService.getCustomers();\n\n      // Parse date strings to Date objects\n      const _parsedCustomers = (customerData || []).map(customer => ({\n        ...customer,\n        joinedDate: customer.joinedDate ? new Date(customer.joinedDate) : _null,\n        lastVisit: customer.lastVisit ? new Date(customer.lastVisit) : _null,\n      }));\n\n      setCustomers(__parsedCustomers);\n    } catch (e: _unknown) {\n      setError(e.message || 'Failed to load customers.');\n      setCustomers([]); // Clear customers on error\n    } finally {\n      setIsLoading(__false);\n    }\n  };\n\n  const filterCustomers = () => {\n    let filtered = customers;\n\n    // Apply segment filter\n    if (selectedSegment !== 'all') {\n      switch (__selectedSegment) {\n        case 'vip':\n          filtered = filtered.filter(customer => customer.totalSpent > 500);\n          break;\n        case 'regular':\n          filtered = filtered.filter(customer => customer.orderCount >= 10);\n          break;\n        case 'new':\n          filtered = filtered.filter(customer => {\n            if (!customer.joinedDate) {\n              return false;\n            }\n            const joinedDate =\n              customer.joinedDate instanceof Date\n                ? customer.joinedDate\n                : new Date(customer.joinedDate);\n            const daysSinceJoined = (Date.now() - joinedDate.getTime()) / (1000 * 60 * 60 * 24);\n            return daysSinceJoined <= 30;\n          });\n          break;\n        case 'loyalty':\n          filtered = filtered.filter(customer => customer.loyaltyPoints > 1000);\n          break;\n      }\n    }\n\n    // Apply search query\n    if (__searchQuery) {\n      _filtered = filtered.filter(\n        customer =>\n          customer.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n          customer.email.toLowerCase().includes(searchQuery.toLowerCase()) ||\n          customer.phone.includes(__searchQuery),\n      );\n    }\n\n    setFilteredCustomers(__filtered);\n  };\n\n  const getCustomerLevel = (customer: _CustomerData) => {\n    if (customer.totalSpent > 1000) {\n      return { level: 'VIP', color: theme.colors.warning[500] };\n    }\n    if (customer.totalSpent > 500) {\n      return { level: 'Premium', color: theme.colors.secondary };\n    }\n    if (customer.orderCount >= 10) {\n      return { level: 'Regular', color: theme.colors.primary };\n    }\n    return { level: 'New', color: theme.colors.darkGray };\n  };\n\n  const formatDate = (date: Date | string | undefined) => {\n    if (!date) {\n      return 'Never';\n    }\n    const dateObj = date instanceof Date ? date : new Date(__date);\n    if (isNaN(dateObj.getTime())) {\n      return 'Never';\n    }\n\n    const days = Math.floor((Date.now() - dateObj.getTime()) / (1000 * 60 * 60 * 24));\n    if (days === 0) {\n      return 'Today';\n    }\n    if (days === 1) {\n      return 'Yesterday';\n    }\n    if (days < 7) {\n      return `${days} days ago`;\n    }\n    if (days < 30) {\n      return `${Math.floor(days / 7)} weeks ago`;\n    }\n    if (days < 365) {\n      return `${Math.floor(days / 30)} months ago`;\n    }\n    return `${Math.floor(days / 365)} years ago`;\n  };\n\n  const renderCustomer = ({ item }: { item: CustomerData }) => {\n    const customerLevel = getCustomerLevel(__item);\n\n    return (\n      <TouchableOpacity\n        style={styles.customerCard}\n        onPress={() => setSelectedCustomer(__item)}\n        activeOpacity={0.7}>\n        <View style={styles.customerHeader}>\n          <View style={styles.customerAvatar}>\n            <Icon name=\"account-circle\" size={50} color={theme.colors.primary} />\n          </View>\n          <View style={styles.customerInfo}>\n            <View style={styles.customerNameRow}>\n              <Text style={styles.customerName}>{item.name}</Text>\n              <View style={[styles.levelBadge, { backgroundColor: `${customerLevel.color}20` }]}>\n                <Text style={[styles.levelText, { color: customerLevel.color }]}>\n                  {customerLevel.level}\n                </Text>\n              </View>\n            </View>\n            <Text style={styles.customerEmail}>{item.email}</Text>\n            <Text style={styles.customerPhone}>{item.phone}</Text>\n          </View>\n          <View style={styles.customerStats}>\n            <Text style={styles.statValue}>£{item.totalSpent.toFixed(2)}</Text>\n            <Text style={styles.statLabel}>Total Spent</Text>\n          </View>\n        </View>\n\n        <View style={styles.customerMetrics}>\n          <View style={styles.metricItem}>\n            <Icon name=\"shopping-cart\" size={16} color={theme.colors.darkGray} />\n            <Text style={styles.metricText}>{item.orderCount} orders</Text>\n          </View>\n          <View style={styles.metricItem}>\n            <Icon name=\"star\" size={16} color={theme.colors.warning[500]} />\n            <Text style={styles.metricText}>{item.loyaltyPoints} points</Text>\n          </View>\n          <View style={styles.metricItem}>\n            <Icon name=\"schedule\" size={16} color={theme.colors.darkGray} />\n            <Text style={styles.metricText}>Last visit {formatDate(item.lastVisit)}</Text>\n          </View>\n        </View>\n      </TouchableOpacity>\n    );\n  };\n\n  const stats = {\n    total: customers.length,\n    vip: customers.filter(c => c.totalSpent > 1000).length,\n    new: customers.filter(c => {\n      if (!c.joinedDate) {\n        return false;\n      }\n      const joinedDate = c.joinedDate instanceof Date ? c.joinedDate : new Date(c.joinedDate);\n      const days = (Date.now() - joinedDate.getTime()) / (1000 * 60 * 60 * 24);\n      return days <= 30;\n    }).length,\n    avgSpent:\n      customers.length > 0\n        ? customers.reduce((__sum, _c) => sum + c.totalSpent, 0) / customers.length\n        : 0,\n  };\n\n  if (__isLoading) {\n    return (\n      <SafeAreaView style={[styles.container, styles.centered]}>\n        <ActivityIndicator size=\"large\" color={theme.colors.primary} />\n        <Text style={styles.loadingText}>Loading Customers...</Text>\n      </SafeAreaView>\n    );\n  }\n\n  const renderEmptyListComponent = () => {\n    if (__error) {\n      return (\n        <View style={styles.emptyState}>\n          <Icon name=\"error-outline\" size={64} color={theme.colors.danger[500]} />\n          <Text style={styles.emptyStateText}>Error Loading Customers</Text>\n          <Text style={styles.emptyStateSubtext}>{error}</Text>\n          <TouchableOpacity onPress={loadCustomers} style={styles.retryButton}>\n            <Text style={styles.retryButtonText}>Try Again</Text>\n          </TouchableOpacity>\n        </View>\n      );\n    }\n    return (\n      <View style={styles.emptyState}>\n        <Icon name=\"people\" size={64} color={theme.colors.lightGray} />\n        <Text style={styles.emptyStateText}>No customers found</Text>\n        <Text style={styles.emptyStateSubtext}>\n          {searchQuery ? 'Try adjusting your search' : 'Add your first customer or pull to refresh'}\n        </Text>\n      </View>\n    );\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <StatusBar backgroundColor={theme.colors.primary} barStyle=\"light-content\" />\n\n      {/* Header */}\n      <View style={styles.header}>\n        <TouchableOpacity\n          style={styles.backButton}\n          onPress={() => navigation.goBack()}\n          activeOpacity={0.7}>\n          <Icon name=\"arrow-back\" size={24} color={theme.colors.white} />\n        </TouchableOpacity>\n\n        <View style={styles.headerCenter}>\n          <Text style={styles.headerTitle}>Customers</Text>\n          <Text style={styles.headerSubtitle}>{filteredCustomers.length} customers</Text>\n        </View>\n\n        <TouchableOpacity style={styles.addButton}>\n          <Icon name=\"add\" size={24} color={theme.colors.white} />\n        </TouchableOpacity>\n      </View>\n\n      {/* Stats Bar */}\n      <View style={styles.statsBar}>\n        <View style={styles.statCard}>\n          <Text style={styles.statValue}>{stats.total}</Text>\n          <Text style={styles.statLabel}>Total</Text>\n        </View>\n        <View style={styles.statCard}>\n          <Text style={[styles.statValue, { color: theme.colors.warning[500] }]}>{stats.vip}</Text>\n          <Text style={styles.statLabel}>VIP</Text>\n        </View>\n        <View style={styles.statCard}>\n          <Text style={[styles.statValue, { color: theme.colors.success[500] }]}>{stats.new}</Text>\n          <Text style={styles.statLabel}>New (30d)</Text>\n        </View>\n        <View style={styles.statCard}>\n          <Text style={[styles.statValue, { color: theme.colors.secondary }]}>\n            £{stats.avgSpent.toFixed(0)}\n          </Text>\n          <Text style={styles.statLabel}>Avg Spent</Text>\n        </View>\n      </View>\n\n      {/* Search and Filter */}\n      <View style={styles.searchSection}>\n        <View style={styles.searchContainer}>\n          <Icon name=\"search\" size={20} color={theme.colors.darkGray} />\n          <TextInput\n            style={styles.searchInput}\n            placeholder=\"Search customers...\"\n            value={searchQuery}\n            onChangeText={setSearchQuery}\n            placeholderTextColor={theme.colors.darkGray}\n          />\n        </View>\n\n        <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.segmentFilters}>\n          {[\n            { key: 'all', label: 'All' },\n            { key: 'vip', label: 'VIP' },\n            { key: 'regular', label: 'Regular' },\n            { key: 'new', label: 'New' },\n            { key: 'loyalty', label: 'Loyalty' },\n          ].map(segment => (\n            <TouchableOpacity\n              key={segment.key}\n              style={[\n                styles.segmentFilter,\n                selectedSegment === segment.key && styles.segmentFilterActive,\n              ]}\n              onPress={() => setSelectedSegment(segment.key)}>\n              <Text\n                style={[\n                  styles.segmentFilterText,\n                  selectedSegment === segment.key && styles.segmentFilterTextActive,\n                ]}>\n                {segment.label}\n              </Text>\n            </TouchableOpacity>\n          ))}\n        </ScrollView>\n      </View>\n\n      {/* Customers List */}\n      <FlatList\n        data={filteredCustomers}\n        renderItem={renderCustomer}\n        keyExtractor={item => item.id.toString()}\n        contentContainerStyle={styles.customersList}\n        showsVerticalScrollIndicator={false}\n        ListEmptyComponent={renderEmptyListComponent}\n        onRefresh={loadCustomers} // Added\n        refreshing={isLoading} // Added\n      />\n\n      {/* Customer Detail Modal */}\n      <Modal\n        visible={!!selectedCustomer}\n        animationType=\"slide\"\n        transparent={true}\n        onRequestClose={() => setSelectedCustomer(__null)}>\n        <View style={styles.modalOverlay}>\n          <View style={styles.customerModal}>\n            <View style={styles.modalHeader}>\n              <Text style={styles.modalTitle}>Customer Details</Text>\n              <TouchableOpacity onPress={() => setSelectedCustomer(__null)}>\n                <Icon name=\"close\" size={24} color={theme.colors.text} />\n              </TouchableOpacity>\n            </View>\n\n            {selectedCustomer && (\n              <ScrollView style={styles.modalContent}>\n                <View style={styles.customerProfile}>\n                  <View style={styles.profileAvatar}>\n                    <Icon name=\"account-circle\" size={80} color={theme.colors.primary} />\n                  </View>\n                  <Text style={styles.profileName}>{selectedCustomer.name}</Text>\n                  <View\n                    style={[\n                      styles.profileLevel,\n                      { backgroundColor: `${getCustomerLevel(__selectedCustomer).color}20` },\n                    ]}>\n                    <Text\n                      style={[\n                        styles.profileLevelText,\n                        { color: getCustomerLevel(__selectedCustomer).color },\n                      ]}>\n                      {getCustomerLevel(__selectedCustomer).level} Customer\n                    </Text>\n                  </View>\n                </View>\n\n                <View style={styles.detailsSection}>\n                  <Text style={styles.sectionTitle}>Contact Information</Text>\n                  <View style={styles.detailRow}>\n                    <Icon name=\"email\" size={20} color={theme.colors.darkGray} />\n                    <Text style={styles.detailText}>{selectedCustomer.email}</Text>\n                  </View>\n                  <View style={styles.detailRow}>\n                    <Icon name=\"phone\" size={20} color={theme.colors.darkGray} />\n                    <Text style={styles.detailText}>{selectedCustomer.phone}</Text>\n                  </View>\n                  <View style={styles.detailRow}>\n                    <Icon name=\"calendar-today\" size={20} color={theme.colors.darkGray} />\n                    <Text style={styles.detailText}>\n                      Customer since {selectedCustomer.joinedDate.toLocaleDateString('en-GB')}\n                    </Text>\n                  </View>\n                </View>\n\n                <View style={styles.detailsSection}>\n                  <Text style={styles.sectionTitle}>Purchase History</Text>\n                  <View style={styles.purchaseGrid}>\n                    <View style={styles.purchaseCard}>\n                      <Text style={styles.purchaseValue}>\n                        £{selectedCustomer.totalSpent.toFixed(2)}\n                      </Text>\n                      <Text style={styles.purchaseLabel}>Total Spent</Text>\n                    </View>\n                    <View style={styles.purchaseCard}>\n                      <Text style={styles.purchaseValue}>{selectedCustomer.orderCount}</Text>\n                      <Text style={styles.purchaseLabel}>Orders</Text>\n                    </View>\n                    <View style={styles.purchaseCard}>\n                      <Text style={styles.purchaseValue}>\n                        £{selectedCustomer.averageOrderValue.toFixed(2)}\n                      </Text>\n                      <Text style={styles.purchaseLabel}>Avg Order</Text>\n                    </View>\n                    <View style={styles.purchaseCard}>\n                      <Text style={[styles.purchaseValue, { color: theme.colors.warning[500] }]}>\n                        {selectedCustomer.loyaltyPoints}\n                      </Text>\n                      <Text style={styles.purchaseLabel}>Loyalty Points</Text>\n                    </View>\n                  </View>\n                </View>\n\n                <View style={styles.detailsSection}>\n                  <Text style={styles.sectionTitle}>Preferred Items</Text>\n                  <View style={styles.preferredItems}>\n                    {selectedCustomer.preferredItems?.map((__item, _index) => (\n                      <View key={index} style={styles.preferredItem}>\n                        <Text style={styles.preferredItemText}>{item}</Text>\n                      </View>\n                    ))}\n                  </View>\n                </View>\n\n                {selectedCustomer.tags?.length > 0 && (\n                  <View style={styles.detailsSection}>\n                    <Text style={styles.sectionTitle}>Tags</Text>\n                    <View style={styles.customerTags}>\n                      {selectedCustomer.tags?.map((__tag, _index) => (\n                        <View key={index} style={styles.customerTag}>\n                          <Text style={styles.customerTagText}>{tag}</Text>\n                        </View>\n                      ))}\n                    </View>\n                  </View>\n                )}\n\n                <View style={styles.actionButtons}>\n                  <TouchableOpacity style={[styles.actionButton, styles.editButton]}>\n                    <Icon name=\"edit\" size={20} color={theme.colors.white} />\n                    <Text style={styles.actionButtonText}>Edit</Text>\n                  </TouchableOpacity>\n                  <TouchableOpacity style={[styles.actionButton, styles.orderButton]}>\n                    <Icon name=\"add-shopping-cart\" size={20} color={theme.colors.white} />\n                    <Text style={styles.actionButtonText}>New Order</Text>\n                  </TouchableOpacity>\n                </View>\n              </ScrollView>\n            )}\n          </View>\n        </View>\n      </Modal>\n    </SafeAreaView>\n  );\n};\n\nconst _createStyles = (theme: _unknown) =>\n  StyleSheet.create({\n    container: {\n      flex: 1,\n      backgroundColor: theme.colors.background,\n    },\n    header: {\n      backgroundColor: theme.colors.primary,\n      flexDirection: 'row',\n      alignItems: 'center',\n      paddingHorizontal: 16,\n      paddingVertical: 12,\n      height: 60,\n    },\n    backButton: {\n      padding: 12,\n      marginRight: 8,\n      borderRadius: 8,\n      backgroundColor: 'rgba(255, 255, 255, 0.1)',\n      minWidth: 44,\n      minHeight: 44,\n      alignItems: 'center',\n      justifyContent: 'center',\n    },\n    headerCenter: {\n      flex: 1,\n      alignItems: 'center',\n    },\n    headerTitle: {\n      fontSize: 20,\n      fontWeight: 'bold',\n      color: theme.colors.white,\n    },\n    headerSubtitle: {\n      fontSize: 12,\n      color: 'rgba(255, 255, 255, 0.8)',\n    },\n    addButton: {\n      padding: 8,\n    },\n    statsBar: {\n      flexDirection: 'row',\n      backgroundColor: theme.colors.white,\n      paddingVertical: 16,\n      paddingHorizontal: 16,\n      borderBottomWidth: 1,\n      borderBottomColor: theme.colors.border,\n      gap: 12,\n    },\n    statCard: {\n      flex: 1,\n      alignItems: 'center',\n    },\n    statValue: {\n      fontSize: 20,\n      fontWeight: 'bold',\n      color: theme.colors.primary,\n    },\n    statLabel: {\n      fontSize: 12,\n      color: theme.colors.darkGray,\n      marginTop: 4,\n    },\n    searchSection: {\n      backgroundColor: theme.colors.white,\n      paddingVertical: 16,\n      borderBottomWidth: 1,\n      borderBottomColor: theme.colors.border,\n    },\n    searchContainer: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      backgroundColor: theme.colors.background,\n      borderRadius: 12,\n      paddingHorizontal: 16,\n      paddingVertical: 12,\n      marginHorizontal: 16,\n      marginBottom: 12,\n    },\n    searchInput: {\n      flex: 1,\n      fontSize: 16,\n      color: theme.colors.text,\n      marginLeft: 12,\n    },\n    segmentFilters: {\n      paddingHorizontal: 16,\n    },\n    segmentFilter: {\n      paddingHorizontal: 16,\n      paddingVertical: 8,\n      marginRight: 8,\n      borderRadius: 20,\n      backgroundColor: theme.colors.background,\n    },\n    segmentFilterActive: {\n      backgroundColor: theme.colors.primary,\n    },\n    segmentFilterText: {\n      fontSize: 14,\n      fontWeight: '500',\n      color: theme.colors.text,\n    },\n    segmentFilterTextActive: {\n      color: theme.colors.white,\n    },\n    customersList: {\n      padding: 16,\n    },\n    customerCard: {\n      backgroundColor: theme.colors.white,\n      borderRadius: 12,\n      padding: 16,\n      marginBottom: 12,\n      shadowColor: '#000',\n      shadowOffset: { width: 0, height: 2 },\n      shadowOpacity: 0.05,\n      shadowRadius: 4,\n      elevation: 2,\n    },\n    customerHeader: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      marginBottom: 12,\n    },\n    customerAvatar: {\n      marginRight: 12,\n    },\n    customerInfo: {\n      flex: 1,\n    },\n    customerNameRow: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      marginBottom: 4,\n    },\n    customerName: {\n      fontSize: 16,\n      fontWeight: '600',\n      color: theme.colors.text,\n      marginRight: 8,\n    },\n    levelBadge: {\n      paddingHorizontal: 8,\n      paddingVertical: 2,\n      borderRadius: 8,\n    },\n    levelText: {\n      fontSize: 10,\n      fontWeight: '600',\n    },\n    customerEmail: {\n      fontSize: 12,\n      color: theme.colors.darkGray,\n      marginBottom: 2,\n    },\n    customerPhone: {\n      fontSize: 12,\n      color: theme.colors.darkGray,\n    },\n    customerStats: {\n      alignItems: 'flex-end',\n    },\n    customerMetrics: {\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      paddingTop: 12,\n      borderTopWidth: 1,\n      borderTopColor: theme.colors.border,\n    },\n    metricItem: {\n      flexDirection: 'row',\n      alignItems: 'center',\n    },\n    metricText: {\n      fontSize: 12,\n      color: theme.colors.darkGray,\n      marginLeft: 4,\n    },\n    emptyState: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'center',\n      paddingVertical: 100,\n    },\n    emptyStateText: {\n      fontSize: 18,\n      fontWeight: '500',\n      color: theme.colors.text,\n      marginTop: 16,\n    },\n    emptyStateSubtext: {\n      fontSize: 14,\n      color: theme.colors.darkGray,\n      marginTop: 8,\n    },\n    modalOverlay: {\n      flex: 1,\n      backgroundColor: 'rgba(0, 0, 0, 0.5)',\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n    customerModal: {\n      backgroundColor: theme.colors.white,\n      borderRadius: 16,\n      width: '90%',\n      maxHeight: '80%',\n      shadowColor: '#000',\n      shadowOffset: { width: 0, height: 10 },\n      shadowOpacity: 0.1,\n      shadowRadius: 20,\n      elevation: 10,\n    },\n    modalHeader: {\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      padding: 20,\n      borderBottomWidth: 1,\n      borderBottomColor: theme.colors.border,\n    },\n    modalTitle: {\n      fontSize: 20,\n      fontWeight: '600',\n      color: theme.colors.text,\n    },\n    modalContent: {\n      padding: 20,\n    },\n    customerProfile: {\n      alignItems: 'center',\n      marginBottom: 24,\n    },\n    profileAvatar: {\n      marginBottom: 12,\n    },\n    profileName: {\n      fontSize: 24,\n      fontWeight: 'bold',\n      color: theme.colors.text,\n      marginBottom: 8,\n    },\n    profileLevel: {\n      paddingHorizontal: 12,\n      paddingVertical: 4,\n      borderRadius: 12,\n    },\n    profileLevelText: {\n      fontSize: 14,\n      fontWeight: '600',\n    },\n    detailsSection: {\n      marginBottom: 24,\n    },\n    sectionTitle: {\n      fontSize: 18,\n      fontWeight: '600',\n      color: theme.colors.text,\n      marginBottom: 12,\n    },\n    detailRow: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      paddingVertical: 8,\n    },\n    detailText: {\n      fontSize: 14,\n      color: theme.colors.text,\n      marginLeft: 12,\n    },\n    purchaseGrid: {\n      flexDirection: 'row',\n      flexWrap: 'wrap',\n      gap: 12,\n    },\n    purchaseCard: {\n      flex: 1,\n      minWidth: '45%',\n      backgroundColor: theme.colors.background,\n      borderRadius: 12,\n      padding: 16,\n      alignItems: 'center',\n    },\n    purchaseValue: {\n      fontSize: 20,\n      fontWeight: 'bold',\n      color: theme.colors.primary,\n    },\n    purchaseLabel: {\n      fontSize: 12,\n      color: theme.colors.darkGray,\n      marginTop: 4,\n      textAlign: 'center',\n    },\n    preferredItems: {\n      flexDirection: 'row',\n      flexWrap: 'wrap',\n      gap: 8,\n    },\n    preferredItem: {\n      backgroundColor: theme.colors.primary + '20',\n      paddingHorizontal: 12,\n      paddingVertical: 6,\n      borderRadius: 16,\n    },\n    preferredItemText: {\n      fontSize: 12,\n      color: theme.colors.primary,\n      fontWeight: '500',\n    },\n    customerTags: {\n      flexDirection: 'row',\n      flexWrap: 'wrap',\n      gap: 8,\n    },\n    customerTag: {\n      backgroundColor: theme.colors.secondary + '20',\n      paddingHorizontal: 12,\n      paddingVertical: 6,\n      borderRadius: 16,\n    },\n    customerTagText: {\n      fontSize: 12,\n      color: theme.colors.secondary,\n      fontWeight: '500',\n    },\n    actionButtons: {\n      flexDirection: 'row',\n      gap: 12,\n      marginTop: 24,\n    },\n    actionButton: {\n      flex: 1,\n      flexDirection: 'row',\n      alignItems: 'center',\n      justifyContent: 'center',\n      paddingVertical: 12,\n      borderRadius: 8,\n    },\n    editButton: {\n      backgroundColor: theme.colors.secondary,\n    },\n    orderButton: {\n      backgroundColor: theme.colors.success[500],\n    },\n    actionButtonText: {\n      color: theme.colors.white,\n      fontSize: 14,\n      fontWeight: '600',\n      marginLeft: 8,\n    },\n    centered: {\n      // Added\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n    loadingText: {\n      // Added\n      marginTop: 10,\n      fontSize: 16,\n      color: theme.colors.darkGray,\n    },\n    retryButton: {\n      // Added\n      marginTop: 20,\n      backgroundColor: theme.colors.primary,\n      paddingVertical: 10,\n      paddingHorizontal: 20,\n      borderRadius: 8,\n    },\n    retryButtonText: {\n      // Added\n      color: theme.colors.white,\n      fontSize: 16,\n      fontWeight: '600',\n    },\n  });\n\nexport default CustomersScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/employees/EmployeeScheduleScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_screenWidth' is assigned a value but never used.","line":23,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_screenHeight' is assigned a value but never used.","line":23,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_isTablet' is assigned a value but never used.","line":24,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_isSmallDevice' is assigned a value but never used.","line":25,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_viewMode' is assigned a value but never used.","line":80,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":80,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_setViewMode' is assigned a value but never used.","line":80,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":80,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_diff' is assigned a value but never used.","line":142,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":142,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_getStatusText' is assigned a value but never used.","line":344,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":344,"endColumn":23}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.","line":98,"column":6,"nodeType":"ArrayExpression","endLine":98,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: [currentWeek, loadData]","fix":{"range":[2776,2789],"text":"[currentWeek, loadData]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  SafeAreaView,\n  StatusBar,\n  ScrollView,\n  TouchableOpacity,\n  Modal,\n  TextInput,\n  Alert,\n  Dimensions,\n  ActivityIndicator,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation } from '@react-navigation/native';\n// import { generateEmployees, EmployeeData } from '../../utils/mockDataGenerator'; // Removed\nimport DataService from '../../services/DataService'; // Added\nimport { EmployeeData } from '../../types'; // Updated import path\n\n// Get screen dimensions for responsive design\nconst { width: _screenWidth, height: _screenHeight } = Dimensions.get('window');\nconst _isTablet = screenWidth > 768;\nconst _isSmallDevice = screenWidth < 380;\n\n// Responsive font sizes\nconst getFontSize = (base: _number) => {\n  if (__isTablet) {\n    return base * 1.2;\n  }\n  if (__isSmallDevice) {\n    return base * 0.9;\n  }\n  return base;\n};\n\nconst Colors = {\n  primary: '#00A651',\n  secondary: '#0066CC',\n  success: '#27AE60',\n  warning: '#F39C12',\n  danger: '#E74C3C',\n  background: '#F8F9FA',\n  white: '#FFFFFF',\n  lightGray: '#ECF0F1',\n  mediumGray: '#BDC3C7',\n  darkGray: '#34495E',\n  text: '#2C3E50',\n  lightText: '#95A5A6',\n  border: '#DDDDDD',\n};\n\ninterface Shift {\n  id: string;\n  employeeId: string;\n  employeeName: string;\n  date: string;\n  startTime: string;\n  endTime: string;\n  role: string;\n  status: 'scheduled' | 'confirmed' | 'completed' | 'absent';\n  duration: number; // in hours\n  notes?: string;\n}\n\ninterface WeekSchedule {\n  weekStart: Date;\n  shifts: Shift[];\n}\n\nconst EmployeeScheduleScreen: React.FC = () => {\n  const navigation = useNavigation();\n  const [employees, setEmployees] = useState<EmployeeData[]>([]);\n  const [currentWeek, setCurrentWeek] = useState(new Date());\n  const [weekSchedule, setWeekSchedule] = useState<WeekSchedule | null>(__null);\n  const [showAddShiftModal, setShowAddShiftModal] = useState(__false);\n  const [selectedDate, setSelectedDate] = useState<string>('');\n  // const [selectedEmployee, setSelectedEmployee] = useState<EmployeeData | null>(__null); // Likely managed by newShift.employeeId\n  const [_viewMode, _setViewMode] = useState<'week' | 'month'>('week');\n  const [isLoadingEmployees, setIsLoadingEmployees] = useState<boolean>(__true);\n  const [isLoadingSchedule, setIsLoadingSchedule] = useState<boolean>(__true);\n  const [error, setError] = useState<string | null>(__null);\n\n  // Add Shift Form State\n  const [newShift, setNewShift] = useState({\n    employeeId: '',\n    date: '',\n    startTime: '09:00',\n    endTime: '17:00',\n    role: 'Cashier',\n    notes: '',\n  });\n\n  useEffect(() => {\n    loadData();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentWeek]);\n\n  const loadData = async () => {\n    setIsLoadingEmployees(__true);\n    setIsLoadingSchedule(__true);\n    setError(__null);\n    const dataService = DataService.getInstance();\n\n    try {\n      // Fetch employees first\n      const employeeData = await dataService.getEmployees(); // Assuming this method will be added\n      setEmployees(employeeData || []);\n      setIsLoadingEmployees(__false);\n\n      // Then fetch schedule (which might depend on employees or be standalone)\n      const weekStart = getWeekStart(__currentWeek);\n      // Assuming getWeekSchedule takes weekStart and possibly employee list or fetches all\n      const scheduleData = await dataService.getWeekSchedule(__weekStart, employeeData || []);\n      setWeekSchedule(scheduleData || { weekStart, shifts: [] });\n    } catch (e: _unknown) {\n      setError(e.message || 'Failed to load schedule data.');\n      setEmployees([]);\n      setWeekSchedule({ weekStart: getWeekStart(__currentWeek), shifts: [] });\n    } finally {\n      setIsLoadingEmployees(__false);\n      setIsLoadingSchedule(__false);\n    }\n  };\n\n  // const loadEmployees = () => { // Replaced by loadData\n  //   const employeeData = generateEmployees();\n  //   setEmployees(__employeeData);\n  // };\n\n  // const loadWeekSchedule = () => { // Replaced by loadData\n  //   // Generate mock schedule data\n  //   const weekStart = getWeekStart(__currentWeek);\n  //   const shifts = generateMockShifts(__weekStart);\n  //   setWeekSchedule({ weekStart, shifts });\n  // };\n\n  const getWeekStart = (_date: _Date): Date => {\n    const weekStart = new Date(__date);\n    const day = weekStart.getDay();\n    const _diff = weekStart.getDate() - day + (day === 0 ? -6 : 1); // Monday start\n    weekStart.setDate(__diff);\n    weekStart.setHours(0, 0, 0, 0);\n    return weekStart;\n  };\n\n  // const generateMockShifts = (weekStart: _Date): Shift[] => { // Removed\n  //   const shifts: Shift[] = [];\n  //   const employeeIds = employees.map(emp => emp.id);\n\n  //   // Generate shifts for each day of the week\n  //   for (let day = 0; day < 7; day++) {\n  //     const currentDate = new Date(__weekStart);\n  //     currentDate.setDate(weekStart.getDate() + day);\n  //     const dateStr = currentDate.toISOString().split('T')[0];\n\n  //     // Add morning shifts\n  //     if (day < 6) { // Monday to Saturday\n  //       shifts.push({\n  //         id: `morning-${day}-1`,\n  //         employeeId: employeeIds[0] || 'emp1',\n  //         employeeName: employees[0]?.name || 'Maria Rodriguez',\n  //         date: _dateStr,\n  //         startTime: '08:00',\n  //         endTime: '16:00',\n  //         role: 'Manager',\n  //         status: day < 2 ? 'completed' : 'scheduled',\n  //         duration: 8,\n  //         notes: 'Opening shift'\n  //       });\n\n  //       shifts.push({\n  //         id: `morning-${day}-2`,\n  //         employeeId: employeeIds[1] || 'emp2',\n  //         employeeName: employees[1]?.name || 'Carlos Martinez',\n  //         date: _dateStr,\n  //         startTime: '09:00',\n  //         endTime: '17:00',\n  //         role: 'Cashier',\n  //         status: day < 2 ? 'completed' : 'confirmed',\n  //         duration: 8,\n  //       });\n\n  //       // Evening shifts\n  //       shifts.push({\n  //         id: `evening-${day}-1`,\n  //         employeeId: employeeIds[2] || 'emp3',\n  //         employeeName: employees[2]?.name || 'Sofia Hernandez',\n  //         date: _dateStr,\n  //         startTime: '14:00',\n  //         endTime: '22:00',\n  //         role: 'Server',\n  //         status: day < 2 ? 'completed' : 'scheduled',\n  //         duration: 8,\n  //         notes: 'Closing shift'\n  //       });\n  //     } else if (day === 6) { // Sunday - reduced hours\n  //       shifts.push({\n  //         id: `sunday-${day}-1`,\n  //         employeeId: employeeIds[0] || 'emp1',\n  //         employeeName: employees[0]?.name || 'Maria Rodriguez',\n  //         date: _dateStr,\n  //         startTime: '10:00',\n  //         endTime: '18:00',\n  //         role: 'Manager',\n  //         status: 'scheduled',\n  //         duration: 8,\n  //         notes: 'Sunday shift'\n  //       });\n  //     }\n  //   }\n\n  //   return shifts;\n  // };\n\n  const getWeekDays = (): string[] => {\n    if (!weekSchedule) {\n      return [];\n    }\n\n    const days = [];\n    for (let i = 0; i < 7; i++) {\n      const day = new Date(weekSchedule.weekStart);\n      day.setDate(weekSchedule.weekStart.getDate() + i);\n      days.push(day.toISOString().split('T')[0]);\n    }\n    return days;\n  };\n\n  const getDayName = (_dateStr: _string): string => {\n    const date = new Date(__dateStr);\n    return date.toLocaleDateString('en-US', { weekday: 'short' });\n  };\n\n  const getDayNumber = (_dateStr: _string): string => {\n    const date = new Date(__dateStr);\n    return date.getDate().toString();\n  };\n\n  const getShiftsForDay = (dateStr: _string): Shift[] => {\n    if (!weekSchedule) {\n      return [];\n    }\n    return weekSchedule.shifts.filter(shift => shift.date === dateStr);\n  };\n\n  const navigateWeek = (direction: 'prev' | 'next') => {\n    const newWeek = new Date(__currentWeek);\n    newWeek.setDate(currentWeek.getDate() + (direction === 'next' ? 7 : -7));\n    setCurrentWeek(__newWeek);\n  };\n\n  const formatWeekRange = (): string => {\n    if (!weekSchedule) {\n      return '';\n    }\n\n    const weekEnd = new Date(weekSchedule.weekStart);\n    weekEnd.setDate(weekSchedule.weekStart.getDate() + 6);\n\n    const start = weekSchedule.weekStart.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n    });\n    const end = weekEnd.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric',\n    });\n\n    return `${start} - ${end}`;\n  };\n\n  const handleAddShift = (date: _string) => {\n    setSelectedDate(__date);\n    setNewShift({ ...newShift, date });\n    setShowAddShiftModal(__true);\n  };\n\n  const saveShift = () => {\n    if (!newShift.employeeId || !newShift.date || !newShift.startTime || !newShift.endTime) {\n      Alert.alert('Error', 'Please fill in all required fields');\n      return;\n    }\n\n    const employee = employees.find(emp => emp.id === newShift.employeeId);\n    if (!employee) {\n      return;\n    }\n\n    const startTime = new Date(`2000-01-01T${newShift.startTime}:00`);\n    const endTime = new Date(`2000-01-01T${newShift.endTime}:00`);\n    const duration = (endTime.getTime() - startTime.getTime()) / (1000 * 60 * 60);\n\n    const shift: Shift = {\n      id: `shift-${Date.now()}`,\n      employeeId: employee.id,\n      employeeName: employee.name,\n      date: newShift.date,\n      startTime: newShift.startTime,\n      endTime: newShift.endTime,\n      role: newShift.role,\n      status: 'scheduled',\n      duration,\n      notes: newShift.notes,\n    };\n\n    if (__weekSchedule) {\n      setWeekSchedule({\n        ...weekSchedule,\n        shifts: [...weekSchedule.shifts, shift],\n      });\n    }\n\n    setShowAddShiftModal(__false);\n    setNewShift({\n      employeeId: '',\n      date: '',\n      startTime: '09:00',\n      endTime: '17:00',\n      role: 'Cashier',\n      notes: '',\n    });\n\n    Alert.alert('Success', 'Shift added successfully');\n  };\n\n  const getStatusColor = (_status: _string) => {\n    switch (__status) {\n      case 'completed':\n        return Colors.success;\n      case 'confirmed':\n        return Colors.primary;\n      case 'scheduled':\n        return Colors.warning;\n      case 'absent':\n        return Colors.danger;\n      default:\n        return Colors.mediumGray;\n    }\n  };\n\n  const _getStatusText = (status: _string) => {\n    switch (__status) {\n      case 'completed':\n        return 'Completed';\n      case 'confirmed':\n        return 'Confirmed';\n      case 'scheduled':\n        return 'Scheduled';\n      case 'absent':\n        return 'Absent';\n      default:\n        return status;\n    }\n  };\n\n  const getTotalHours = (): number => {\n    if (!weekSchedule) {\n      return 0;\n    }\n    return weekSchedule.shifts.reduce((__total, _shift) => total + shift.duration, 0);\n  };\n\n  const getEmployeeHours = (employeeId: _string): number => {\n    if (!weekSchedule) {\n      return 0;\n    }\n    return weekSchedule.shifts\n      .filter(shift => shift.employeeId === employeeId)\n      .reduce((__total, _shift) => total + shift.duration, 0);\n  };\n\n  if (isLoadingEmployees || isLoadingSchedule) {\n    return (\n      <SafeAreaView style={[styles.container, styles.centered]}>\n        <ActivityIndicator size=\"large\" color={Colors.primary} />\n        <Text style={styles.loadingText}>\n          {isLoadingEmployees ? 'Loading Employees...' : 'Loading Schedule...'}\n        </Text>\n      </SafeAreaView>\n    );\n  }\n\n  if (__error) {\n    return (\n      <SafeAreaView style={[styles.container, styles.centered]}>\n        <Icon name=\"error-outline\" size={64} color={Colors.danger} />\n        <Text style={styles.errorTextHeader}>Error Loading Data</Text>\n        <Text style={styles.errorText}>{error}</Text>\n        <TouchableOpacity onPress={loadData} style={styles.retryButton}>\n          <Text style={styles.retryButtonText}>Try Again</Text>\n        </TouchableOpacity>\n      </SafeAreaView>\n    );\n  }\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <StatusBar barStyle=\"light-content\" backgroundColor={Colors.primary} />\n\n      {/* Header */}\n      <View style={styles.header}>\n        <TouchableOpacity style={styles.backButton} onPress={() => navigation.goBack()}>\n          <Icon name=\"arrow-back\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n        <Text style={styles.headerTitle}>Employee Schedule</Text>\n        <TouchableOpacity style={styles.headerAction}>\n          <Icon name=\"today\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n      </View>\n\n      {/* Week Navigation */}\n      <View style={styles.weekNavigation}>\n        <TouchableOpacity style={styles.navButton} onPress={() => navigateWeek('prev')}>\n          <Icon name=\"chevron-left\" size={24} color={Colors.primary} />\n        </TouchableOpacity>\n\n        <View style={styles.weekInfo}>\n          <Text style={styles.weekRange}>{formatWeekRange()}</Text>\n          <Text style={styles.weekStats}>{getTotalHours()} total hours</Text>\n        </View>\n\n        <TouchableOpacity style={styles.navButton} onPress={() => navigateWeek('next')}>\n          <Icon name=\"chevron-right\" size={24} color={Colors.primary} />\n        </TouchableOpacity>\n      </View>\n\n      <ScrollView style={styles.content}>\n        {/* Week Grid */}\n        <View style={styles.weekGrid}>\n          {getWeekDays().map((__date, _index) => {\n            const dayShifts = getShiftsForDay(__date);\n            const isToday = date === new Date().toISOString().split('T')[0];\n\n            return (\n              <View key={date} style={styles.dayColumn}>\n                <View style={[styles.dayHeader, isToday && styles.todayHeader]}>\n                  <Text style={[styles.dayName, isToday && styles.todayText]}>\n                    {getDayName(__date)}\n                  </Text>\n                  <Text style={[styles.dayNumber, isToday && styles.todayText]}>\n                    {getDayNumber(__date)}\n                  </Text>\n                </View>\n\n                <View style={styles.dayContent}>\n                  {dayShifts.length === 0 ? (\n                    <TouchableOpacity\n                      style={styles.emptyDay}\n                      onPress={() => handleAddShift(__date)}>\n                      <Icon name=\"add\" size={20} color={Colors.lightText} />\n                      <Text style={styles.emptyDayText}>Add Shift</Text>\n                    </TouchableOpacity>\n                  ) : (\n                    dayShifts.map(shift => (\n                      <TouchableOpacity key={shift.id} style={styles.shiftCard}>\n                        <View\n                          style={[\n                            styles.shiftStatus,\n                            { backgroundColor: getStatusColor(shift.status) },\n                          ]}\n                        />\n                        <View style={styles.shiftInfo}>\n                          <Text style={styles.shiftEmployee}>{shift.employeeName}</Text>\n                          <Text style={styles.shiftTime}>\n                            {shift.startTime} - {shift.endTime}\n                          </Text>\n                          <Text style={styles.shiftRole}>{shift.role}</Text>\n                          {shift.notes && <Text style={styles.shiftNotes}>{shift.notes}</Text>}\n                        </View>\n                      </TouchableOpacity>\n                    ))\n                  )}\n\n                  {dayShifts.length > 0 && (\n                    <TouchableOpacity\n                      style={styles.addShiftButton}\n                      onPress={() => handleAddShift(__date)}>\n                      <Icon name=\"add\" size={16} color={Colors.primary} />\n                    </TouchableOpacity>\n                  )}\n                </View>\n              </View>\n            );\n          })}\n        </View>\n\n        {/* Employee Summary */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Employee Hours Summary</Text>\n          <View style={styles.summaryContainer}>\n            {employees.slice(0, 5).map(employee => {\n              const hours = getEmployeeHours(employee.id);\n              return (\n                <View key={employee.id} style={styles.employeeSummary}>\n                  <View style={styles.employeeInfo}>\n                    <Text style={styles.employeeName}>{employee.name}</Text>\n                    <Text style={styles.employeeRole}>{employee.role}</Text>\n                  </View>\n                  <View style={styles.hoursInfo}>\n                    <Text style={styles.hoursText}>{hours}h</Text>\n                    <Text style={styles.hoursLabel}>this week</Text>\n                  </View>\n                </View>\n              );\n            })}\n          </View>\n        </View>\n\n        {/* Quick Actions */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Quick Actions</Text>\n          <View style={styles.actionButtons}>\n            <TouchableOpacity style={styles.actionButton}>\n              <Icon name=\"content-copy\" size={24} color={Colors.primary} />\n              <Text style={styles.actionButtonText}>Copy Last Week</Text>\n            </TouchableOpacity>\n\n            <TouchableOpacity style={styles.actionButton}>\n              <Icon name=\"publish\" size={24} color={Colors.success} />\n              <Text style={styles.actionButtonText}>Publish Schedule</Text>\n            </TouchableOpacity>\n\n            <TouchableOpacity style={styles.actionButton}>\n              <Icon name=\"share\" size={24} color={Colors.secondary} />\n              <Text style={styles.actionButtonText}>Share Schedule</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n\n        <View style={styles.spacer} />\n      </ScrollView>\n\n      {/* Add Shift Modal */}\n      <Modal\n        visible={showAddShiftModal}\n        animationType=\"slide\"\n        presentationStyle=\"pageSheet\"\n        onRequestClose={() => setShowAddShiftModal(__false)}>\n        <SafeAreaView style={styles.modalContainer}>\n          <View style={styles.modalHeader}>\n            <TouchableOpacity\n              style={styles.modalBackButton}\n              onPress={() => setShowAddShiftModal(__false)}>\n              <Icon name=\"close\" size={24} color={Colors.text} />\n            </TouchableOpacity>\n            <Text style={styles.modalTitle}>Add New Shift</Text>\n            <TouchableOpacity style={styles.modalSaveButton} onPress={saveShift}>\n              <Text style={styles.modalSaveText}>Save</Text>\n            </TouchableOpacity>\n          </View>\n\n          <ScrollView style={styles.modalContent}>\n            <View style={styles.formSection}>\n              <Text style={styles.formLabel}>Employee</Text>\n              <ScrollView\n                horizontal\n                showsHorizontalScrollIndicator={false}\n                style={styles.employeeSelection}>\n                {employees.map(employee => (\n                  <TouchableOpacity\n                    key={employee.id}\n                    style={[\n                      styles.employeeCard,\n                      newShift.employeeId === employee.id && styles.selectedEmployeeCard,\n                    ]}\n                    onPress={() => setNewShift({ ...newShift, employeeId: employee.id })}>\n                    <Text\n                      style={[\n                        styles.employeeCardName,\n                        newShift.employeeId === employee.id && styles.selectedEmployeeCardText,\n                      ]}>\n                      {employee.name}\n                    </Text>\n                    <Text\n                      style={[\n                        styles.employeeCardRole,\n                        newShift.employeeId === employee.id && styles.selectedEmployeeCardText,\n                      ]}>\n                      {employee.role}\n                    </Text>\n                  </TouchableOpacity>\n                ))}\n              </ScrollView>\n            </View>\n\n            <View style={styles.formSection}>\n              <Text style={styles.formLabel}>Date</Text>\n              <Text style={styles.selectedDate}>\n                {selectedDate\n                  ? new Date(__selectedDate).toLocaleDateString('en-US', {\n                      weekday: 'long',\n                      year: 'numeric',\n                      month: 'long',\n                      day: 'numeric',\n                    })\n                  : 'No date selected'}\n              </Text>\n            </View>\n\n            <View style={styles.timeRow}>\n              <View style={styles.timeSection}>\n                <Text style={styles.formLabel}>Start Time</Text>\n                <TextInput\n                  style={styles.timeInput}\n                  value={newShift.startTime}\n                  onChangeText={text => setNewShift({ ...newShift, startTime: text })}\n                  placeholder=\"09:00\"\n                  keyboardType=\"numeric\"\n                />\n              </View>\n\n              <View style={styles.timeSection}>\n                <Text style={styles.formLabel}>End Time</Text>\n                <TextInput\n                  style={styles.timeInput}\n                  value={newShift.endTime}\n                  onChangeText={text => setNewShift({ ...newShift, endTime: text })}\n                  placeholder=\"17:00\"\n                  keyboardType=\"numeric\"\n                />\n              </View>\n            </View>\n\n            <View style={styles.formSection}>\n              <Text style={styles.formLabel}>Role</Text>\n              <View style={styles.roleSelection}>\n                {['Manager', 'Cashier', 'Server', 'Kitchen', 'Cleaner'].map(role => (\n                  <TouchableOpacity\n                    key={role}\n                    style={[styles.roleButton, newShift.role === role && styles.selectedRoleButton]}\n                    onPress={() => setNewShift({ ...newShift, role })}>\n                    <Text\n                      style={[\n                        styles.roleButtonText,\n                        newShift.role === role && styles.selectedRoleButtonText,\n                      ]}>\n                      {role}\n                    </Text>\n                  </TouchableOpacity>\n                ))}\n              </View>\n            </View>\n\n            <View style={styles.formSection}>\n              <Text style={styles.formLabel}>Notes (__Optional)</Text>\n              <TextInput\n                style={styles.notesInput}\n                value={newShift.notes}\n                onChangeText={text => setNewShift({ ...newShift, notes: text })}\n                placeholder=\"Add any notes for this shift...\"\n                multiline\n                numberOfLines={3}\n              />\n            </View>\n          </ScrollView>\n        </SafeAreaView>\n      </Modal>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.primary,\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    height: 60,\n  },\n  backButton: {\n    padding: 8,\n  },\n  headerTitle: {\n    flex: 1,\n    color: Colors.white,\n    fontSize: getFontSize(20),\n    fontWeight: 'bold',\n    textAlign: 'center',\n  },\n  headerAction: {\n    padding: 8,\n  },\n  weekNavigation: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: Colors.white,\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  navButton: {\n    padding: 8,\n  },\n  weekInfo: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  weekRange: {\n    fontSize: getFontSize(18),\n    fontWeight: 'bold',\n    color: Colors.text,\n  },\n  weekStats: {\n    fontSize: getFontSize(14),\n    color: Colors.lightText,\n    marginTop: 2,\n  },\n  content: {\n    flex: 1,\n    padding: 16,\n  },\n  weekGrid: {\n    flexDirection: 'row',\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    marginBottom: 20,\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n  },\n  dayColumn: {\n    flex: 1,\n    borderRightWidth: 1,\n    borderRightColor: Colors.border,\n  },\n  dayHeader: {\n    padding: 8,\n    alignItems: 'center',\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  todayHeader: {\n    backgroundColor: Colors.primary,\n  },\n  dayName: {\n    fontSize: getFontSize(12),\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  dayNumber: {\n    fontSize: getFontSize(16),\n    fontWeight: 'bold',\n    color: Colors.text,\n    marginTop: 2,\n  },\n  todayText: {\n    color: Colors.white,\n  },\n  dayContent: {\n    padding: 4,\n    minHeight: 200,\n  },\n  emptyDay: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 20,\n  },\n  emptyDayText: {\n    fontSize: getFontSize(12),\n    color: Colors.lightText,\n    marginTop: 4,\n  },\n  shiftCard: {\n    backgroundColor: Colors.lightGray,\n    borderRadius: 6,\n    marginBottom: 4,\n    padding: 8,\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n  },\n  shiftStatus: {\n    width: 3,\n    height: '100%',\n    borderRadius: 2,\n    marginRight: 8,\n  },\n  shiftInfo: {\n    flex: 1,\n  },\n  shiftEmployee: {\n    fontSize: getFontSize(12),\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  shiftTime: {\n    fontSize: getFontSize(10),\n    color: Colors.lightText,\n    marginTop: 2,\n  },\n  shiftRole: {\n    fontSize: getFontSize(10),\n    color: Colors.primary,\n    marginTop: 1,\n  },\n  shiftNotes: {\n    fontSize: getFontSize(9),\n    color: Colors.lightText,\n    marginTop: 2,\n    fontStyle: 'italic',\n  },\n  addShiftButton: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 8,\n    borderWidth: 1,\n    borderColor: Colors.primary,\n    borderStyle: 'dashed',\n    borderRadius: 6,\n    marginTop: 4,\n  },\n  section: {\n    marginBottom: 20,\n  },\n  sectionTitle: {\n    fontSize: getFontSize(18),\n    fontWeight: 'bold',\n    color: Colors.text,\n    marginBottom: 12,\n  },\n  summaryContainer: {\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    padding: 16,\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n  },\n  employeeSummary: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingVertical: 12,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  employeeInfo: {\n    flex: 1,\n  },\n  employeeName: {\n    fontSize: getFontSize(16),\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  employeeRole: {\n    fontSize: getFontSize(14),\n    color: Colors.lightText,\n    marginTop: 2,\n  },\n  hoursInfo: {\n    alignItems: 'flex-end',\n  },\n  hoursText: {\n    fontSize: getFontSize(18),\n    fontWeight: 'bold',\n    color: Colors.primary,\n  },\n  hoursLabel: {\n    fontSize: getFontSize(12),\n    color: Colors.lightText,\n  },\n  actionButtons: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n  },\n  actionButton: {\n    alignItems: 'center',\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    padding: 16,\n    flex: 1,\n    marginHorizontal: 4,\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n  },\n  actionButtonText: {\n    fontSize: getFontSize(12),\n    color: Colors.text,\n    marginTop: 8,\n    textAlign: 'center',\n    fontWeight: '500',\n  },\n  spacer: {\n    height: 40,\n  },\n  modalContainer: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  modalHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    backgroundColor: Colors.white,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  modalBackButton: {\n    padding: 8,\n  },\n  modalTitle: {\n    flex: 1,\n    fontSize: getFontSize(18),\n    fontWeight: 'bold',\n    color: Colors.text,\n    textAlign: 'center',\n  },\n  modalSaveButton: {\n    padding: 8,\n  },\n  modalSaveText: {\n    fontSize: getFontSize(16),\n    fontWeight: '600',\n    color: Colors.primary,\n  },\n  modalContent: {\n    flex: 1,\n    padding: 16,\n  },\n  formSection: {\n    marginBottom: 24,\n  },\n  formLabel: {\n    fontSize: getFontSize(16),\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 8,\n  },\n  employeeSelection: {\n    maxHeight: 120,\n  },\n  employeeCard: {\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    padding: 12,\n    marginRight: 12,\n    minWidth: 100,\n    alignItems: 'center',\n    borderWidth: 2,\n    borderColor: Colors.border,\n  },\n  selectedEmployeeCard: {\n    borderColor: Colors.primary,\n    backgroundColor: Colors.primary,\n  },\n  employeeCardName: {\n    fontSize: getFontSize(14),\n    fontWeight: '600',\n    color: Colors.text,\n    textAlign: 'center',\n  },\n  employeeCardRole: {\n    fontSize: getFontSize(12),\n    color: Colors.lightText,\n    marginTop: 4,\n    textAlign: 'center',\n  },\n  selectedEmployeeCardText: {\n    color: Colors.white,\n  },\n  selectedDate: {\n    fontSize: getFontSize(16),\n    color: Colors.text,\n    backgroundColor: Colors.white,\n    padding: 12,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  timeRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    gap: 16,\n  },\n  timeSection: {\n    flex: 1,\n  },\n  timeInput: {\n    backgroundColor: Colors.white,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 8,\n    padding: 12,\n    fontSize: getFontSize(16),\n    color: Colors.text,\n  },\n  roleSelection: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 8,\n  },\n  roleButton: {\n    backgroundColor: Colors.white,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 20,\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n  },\n  selectedRoleButton: {\n    backgroundColor: Colors.primary,\n    borderColor: Colors.primary,\n  },\n  roleButtonText: {\n    fontSize: getFontSize(14),\n    color: Colors.text,\n    fontWeight: '500',\n  },\n  selectedRoleButtonText: {\n    color: Colors.white,\n  },\n  notesInput: {\n    backgroundColor: Colors.white,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 8,\n    padding: 12,\n    fontSize: getFontSize(16),\n    color: Colors.text,\n    minHeight: 80,\n    textAlignVertical: 'top',\n  },\n  centered: {\n    // Added\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20,\n  },\n  loadingText: {\n    // Added\n    marginTop: 10,\n    fontSize: getFontSize(16),\n    color: Colors.darkGray,\n  },\n  errorTextHeader: {\n    // Added\n    fontSize: getFontSize(18),\n    fontWeight: 'bold',\n    color: Colors.danger,\n    marginTop: 16,\n    marginBottom: 8,\n    textAlign: 'center',\n  },\n  errorText: {\n    // Added\n    fontSize: getFontSize(14),\n    color: Colors.text,\n    textAlign: 'center',\n    marginBottom: 20,\n  },\n  retryButton: {\n    // Added\n    backgroundColor: Colors.primary,\n    paddingVertical: 12,\n    paddingHorizontal: 30,\n    borderRadius: 8,\n  },\n  retryButtonText: {\n    // Added\n    color: Colors.white,\n    fontSize: getFontSize(16),\n    fontWeight: '600',\n  },\n});\n\nexport default EmployeeScheduleScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/employees/EmployeesScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_theme' is assigned a value but never used.","line":27,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_emailExists' is assigned a value but never used.","line":156,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":156,"endColumn":23},{"ruleId":"no-catch-shadow","severity":1,"message":"Value of 'error' may be overwritten in IE 8 and earlier.","line":225,"column":7,"nodeType":"CatchClause","messageId":"mutable","endLine":233,"endColumn":6},{"ruleId":"@typescript-eslint/no-shadow","severity":1,"message":"'error' is already declared in the upper scope on line 35 column 10.","line":225,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":225,"endColumn":29},{"ruleId":"no-catch-shadow","severity":1,"message":"Value of 'error' may be overwritten in IE 8 and earlier.","line":276,"column":15,"nodeType":"CatchClause","messageId":"mutable","endLine":280,"endColumn":14},{"ruleId":"@typescript-eslint/no-shadow","severity":1,"message":"'error' is already declared in the upper scope on line 35 column 10.","line":276,"column":22,"nodeType":"Identifier","messageId":"noShadow","endLine":276,"endColumn":37},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: styles.scheduleButtonText","line":769,"column":3,"nodeType":"Property","endLine":775,"endColumn":4}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'filterEmployees' and 'isLoading'. Either include them or remove the dependency array. Outer scope values like '_searchQuery' aren't valid dependencies because mutating them doesn't re-render the component.","line":59,"column":6,"nodeType":"ArrayExpression","endLine":59,"endColumn":64,"suggestions":[{"desc":"Update the dependencies array to be: [employees, selectedRole, error, isLoading, filterEmployees]","fix":{"range":[1967,2025],"text":"[employees, selectedRole, error, isLoading, filterEmployees]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":2,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  StatusBar,\n  SafeAreaView,\n  TouchableOpacity,\n  ScrollView,\n  FlatList,\n  TextInput,\n  Modal,\n  Alert,\n  ActivityIndicator,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { CalendarClock } from 'lucide-react-native';\nimport { useNavigation } from '@react-navigation/native';\n// import { generateEmployees, EmployeeData } from '../../utils/mockDataGenerator'; // Removed\nimport Colors from '../../constants/Colors';\nimport DataService from '../../services/DataService'; // Added\nimport { EmployeeData } from '../../types'; // Updated import path\nimport { useTheme } from '../../design-system/ThemeProvider';\n\nconst EmployeesScreen: React.FC = () => {\n  const navigation = useNavigation();\n  const { _theme } = useTheme();\n  const [employees, setEmployees] = useState<EmployeeData[]>([]);\n  const [filteredEmployees, setFilteredEmployees] = useState<EmployeeData[]>([]);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedRole, setSelectedRole] = useState<string>('all');\n  const [showAddModal, setShowAddModal] = useState(__false);\n  const [selectedEmployee, setSelectedEmployee] = useState<EmployeeData | null>(__null);\n  const [isLoading, setIsLoading] = useState<boolean>(__true); // Added\n  const [error, setError] = useState<string | null>(__null); // Added\n\n  // Add Employee Form State\n  const [newEmployee, setNewEmployee] = useState({\n    name: '',\n    email: '',\n    phone: '',\n    role: 'Cashier',\n    hourlyRate: '12.00',\n  });\n\n  useEffect(() => {\n    loadEmployees();\n  }, []);\n\n  useEffect(() => {\n    // Only filter if not loading and no error\n    if (!isLoading && !error) {\n      filterEmployees();\n    } else {\n      // If loading or error, ensure filtered list is empty or reflects state\n      setFilteredEmployees([]);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [employees, _searchQuery, selectedRole, _isLoading, error]);\n\n  const loadEmployees = async () => {\n    // Modified\n    setIsLoading(__true);\n    setError(__null);\n    try {\n      const dataService = DataService.getInstance();\n      // Assuming a getEmployees method will be added to DataService\n      const employeeData = await dataService.getEmployees();\n      setEmployees(employeeData || []);\n    } catch (e: _unknown) {\n      setError(e.message || 'Failed to load employees.');\n      setEmployees([]); // Clear employees on error\n    } finally {\n      setIsLoading(__false);\n    }\n  };\n\n  const filterEmployees = () => {\n    let filtered = employees;\n\n    // Apply role filter\n    if (selectedRole !== 'all') {\n      filtered = filtered.filter(employee => employee.role === selectedRole);\n    }\n\n    // Apply search query\n    if (__searchQuery) {\n      _filtered = filtered.filter(\n        employee =>\n          employee.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n          employee.email.toLowerCase().includes(searchQuery.toLowerCase()) ||\n          employee.role.toLowerCase().includes(searchQuery.toLowerCase()),\n      );\n    }\n\n    setFilteredEmployees(__filtered);\n  };\n\n  const getRoleColor = (_role: _string) => {\n    switch (__role) {\n      case 'Manager':\n        return Colors.primary;\n      case 'Cashier':\n        return Colors.secondary;\n      case 'Server':\n        return Colors.warning;\n      case 'Cook':\n        return Colors.danger;\n      default:\n        return Colors.darkGray;\n    }\n  };\n\n  const getPerformanceColor = (score: _number) => {\n    if (score >= 90) {\n      return Colors.success;\n    }\n    if (score >= 80) {\n      return Colors.warning;\n    }\n    return Colors.danger;\n  };\n\n  const formatHireDate = (date: Date | string) => {\n    const dateObj = date instanceof Date ? date : new Date(__date);\n    const months = Math.floor((Date.now() - dateObj.getTime()) / (1000 * 60 * 60 * 24 * 30));\n    if (months < 1) {\n      return 'New hire';\n    }\n    if (months < 12) {\n      return `${months} months`;\n    }\n    const years = Math.floor(months / 12);\n    return `${years} year${years > 1 ? 's' : ''}`;\n  };\n\n  const handleEmployeePress = (_employee: _EmployeeData) => {\n    setSelectedEmployee(__employee);\n  };\n\n  const handleAddEmployee = async () => {\n    // Validate required fields\n    if (!newEmployee.name.trim() || !newEmployee.email.trim()) {\n      Alert.alert('Error', 'Please fill in all required fields (Name and Email)');\n      return;\n    }\n\n    // Validate email format\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(newEmployee.email.trim())) {\n      Alert.alert('Error', 'Please enter a valid email address');\n      return;\n    }\n\n    // Check if email already exists\n    const _emailExists = employees.some(\n      emp => emp.email.toLowerCase() === newEmployee.email.trim().toLowerCase(),\n    );\n    if (__emailExists) {\n      Alert.alert('Error', 'An employee with this email already exists');\n      return;\n    }\n\n    try {\n      // Show loading indicator\n      setShowAddModal(__false);\n      setIsLoading(__true);\n\n      // Parse name into first and last name\n      const nameParts = newEmployee.name.trim().split(' ');\n      const firstName = nameParts[0];\n      const lastName = nameParts.slice(1).join(' ') || nameParts[0]; // Use first name as last name if only one name provided\n\n      // Create employee via API\n      const dataService = DataService.getInstance();\n      const createdEmployee = await dataService.createEmployee({\n        firstName,\n        lastName,\n        email: newEmployee.email.trim(),\n        phone: newEmployee.phone.trim() || undefined,\n        role: newEmployee.role.toLowerCase(), // API expects lowercase roles\n        hourlyRate: parseFloat(newEmployee.hourlyRate) || 12.0,\n        startDate: new Date().toISOString(),\n      });\n\n      // Transform API response to match EmployeeData interface\n      const employeeData: EmployeeData = {\n        id: createdEmployee.id || Date.now(),\n        name: `${createdEmployee.first_name} ${createdEmployee.last_name}`,\n        email: createdEmployee.email,\n        phone: createdEmployee.phone || `+44 ${Math.floor(Math.random() * 900000000) + 100000000}`,\n        role: (createdEmployee.role.charAt(0).toUpperCase() + createdEmployee.role.slice(1)) as\n          | 'Manager'\n          | 'Cashier'\n          | 'Server'\n          | 'Cook',\n        hireDate: new Date(createdEmployee.start_date || createdEmployee.created_at),\n        hourlyRate: createdEmployee.hourly_rate || 12.0,\n        totalSales: 0,\n        averageSalesPerDay: 0,\n        performanceScore: 85 + Math.random() * 10, // Initial score between 85-95\n        punctualityScore: 90 + Math.random() * 8, // Initial score between 90-98\n        scheduledHours: 160,\n        actualHours: 160,\n        weeksSinceLastReview: 0,\n      };\n\n      // Add to local state\n      setEmployees([...employees, employeeData]);\n\n      // Reset form\n      setNewEmployee({\n        name: '',\n        email: '',\n        phone: '',\n        role: 'Cashier',\n        hourlyRate: '12.00',\n      });\n\n      // Show success message\n      Alert.alert(\n        'Success',\n        `${employeeData.name} has been added to your team and saved to the system!`,\n      );\n    } catch (error: _unknown) {\n      Alert.alert(\n        'Error',\n        error.message || 'Failed to add employee. Please check your connection and try again.',\n      );\n\n      // Reopen modal on error\n      setShowAddModal(__true);\n    } finally {\n      setIsLoading(__false);\n    }\n  };\n\n  const handleCancelAdd = () => {\n    setNewEmployee({\n      name: '',\n      email: '',\n      phone: '',\n      role: 'Cashier',\n      hourlyRate: '12.00',\n    });\n    setShowAddModal(__false);\n  };\n\n  const handleDeleteEmployee = async (employee: _EmployeeData) => {\n    Alert.alert(\n      'Delete Employee',\n      `Are you sure you want to remove ${employee.name} from your team?`,\n      [\n        {\n          text: 'Cancel',\n          style: 'cancel',\n        },\n        {\n          text: 'Delete',\n          style: 'destructive',\n          onPress: async () => {\n            try {\n              // Close modal first\n              setSelectedEmployee(__null);\n              setIsLoading(__true);\n\n              // Delete from backend\n              const dataService = DataService.getInstance();\n              await dataService.deleteEmployee(employee.id);\n\n              // Remove from local state\n              setEmployees(employees.filter(emp => emp.id !== employee.id));\n\n              // Show success message\n              Alert.alert('Success', `${employee.name} has been removed from your team.`);\n            } catch (error: _unknown) {\n              Alert.alert('Error', error.message || 'Failed to delete employee. Please try again.');\n              // Reopen modal on error\n              setSelectedEmployee(__employee);\n            } finally {\n              setIsLoading(__false);\n            }\n          },\n        },\n      ],\n      { cancelable: true },\n    );\n  };\n\n  const renderEmployee = ({ item }: { item: EmployeeData }) => (\n    <TouchableOpacity\n      style={styles.employeeCard}\n      onPress={() => handleEmployeePress(__item)}\n      activeOpacity={0.7}>\n      <View style={styles.employeeHeader}>\n        <View style={styles.employeeAvatar}>\n          <Icon name=\"account-circle\" size={50} color={Colors.primary} />\n        </View>\n        <View style={styles.employeeInfo}>\n          <Text style={styles.employeeName}>{item.name}</Text>\n          <View style={[styles.roleBadge, { backgroundColor: `${getRoleColor(item.role)}20` }]}>\n            <Text style={[styles.roleText, { color: getRoleColor(item.role) }]}>{item.role}</Text>\n          </View>\n          <Text style={styles.employeeEmail}>{item.email}</Text>\n        </View>\n        <View style={styles.employeeStats}>\n          <View style={styles.statItem}>\n            <Text style={styles.statValue}>£{item.totalSales.toFixed(0)}</Text>\n            <Text style={styles.statLabel}>Total Sales</Text>\n          </View>\n        </View>\n      </View>\n\n      <View style={styles.employeeMetrics}>\n        <View style={styles.metricItem}>\n          <Icon name=\"schedule\" size={16} color={Colors.darkGray} />\n          <Text style={styles.metricText}>{formatHireDate(item.hireDate)}</Text>\n        </View>\n        <View style={styles.metricItem}>\n          <Icon name=\"attach-money\" size={16} color={Colors.darkGray} />\n          <Text style={styles.metricText}>£{item.hourlyRate.toFixed(2)}/hr</Text>\n        </View>\n        <View style={styles.metricItem}>\n          <Icon name=\"star\" size={16} color={getPerformanceColor(item.performanceScore)} />\n          <Text style={[styles.metricText, { color: getPerformanceColor(item.performanceScore) }]}>\n            {item.performanceScore.toFixed(1)}%\n          </Text>\n        </View>\n      </View>\n    </TouchableOpacity>\n  );\n\n  const stats = {\n    total: employees.length,\n    active: employees.filter(e => e.actualHours >= e.scheduledHours * 0.9).length,\n    managers: employees.filter(e => e.role === 'Manager').length,\n    avgPerformance:\n      employees.length > 0\n        ? employees.reduce((__sum, _e) => sum + e.performanceScore, 0) / employees.length\n        : 0,\n  };\n\n  if (__isLoading) {\n    return (\n      <SafeAreaView style={[styles.container, styles.centered]}>\n        <ActivityIndicator size=\"large\" color={Colors.primary} />\n        <Text style={styles.loadingText}>Loading Employees...</Text>\n      </SafeAreaView>\n    );\n  }\n\n  const renderEmptyListComponent = () => {\n    if (__error) {\n      return (\n        <View style={styles.emptyState}>\n          <Icon name=\"error-outline\" size={64} color={Colors.danger} />\n          <Text style={styles.emptyStateText}>Error Loading Employees</Text>\n          <Text style={styles.emptyStateSubtext}>{error}</Text>\n          <TouchableOpacity onPress={loadEmployees} style={styles.retryButton}>\n            <Text style={styles.retryButtonText}>Try Again</Text>\n          </TouchableOpacity>\n        </View>\n      );\n    }\n    return (\n      <View style={styles.emptyState}>\n        <Icon name=\"people\" size={64} color={Colors.lightGray} />\n        <Text style={styles.emptyStateText}>No employees found</Text>\n        <Text style={styles.emptyStateSubtext}>\n          {searchQuery ? 'Try adjusting your search' : 'Add your first employee or pull to refresh'}\n        </Text>\n      </View>\n    );\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <StatusBar backgroundColor={Colors.primary} barStyle=\"light-content\" />\n\n      {/* Header */}\n      <View style={styles.header}>\n        <TouchableOpacity\n          style={styles.backButton}\n          onPress={() => navigation.goBack()}\n          activeOpacity={0.7}>\n          <Icon name=\"arrow-back\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n\n        <View style={styles.headerCenter}>\n          <Text style={styles.headerTitle}>Employees</Text>\n          <Text style={styles.headerSubtitle}>{filteredEmployees.length} staff members</Text>\n        </View>\n\n        <View style={styles.headerActions}>\n          <TouchableOpacity\n            style={styles.scheduleButton}\n            onPress={() => navigation.navigate('EmployeeSchedule')}>\n            <CalendarClock size={28} color={Colors.primary} />\n            <Text style={styles.scheduleLabel}>Schedule</Text>\n          </TouchableOpacity>\n\n          <TouchableOpacity style={styles.addButton} onPress={() => setShowAddModal(__true)}>\n            <Icon name=\"add\" size={24} color={Colors.white} />\n          </TouchableOpacity>\n        </View>\n      </View>\n\n      {/* Stats Bar */}\n      <View style={styles.statsBar}>\n        <View style={styles.statCard}>\n          <Text style={styles.statValue}>{stats.total}</Text>\n          <Text style={styles.statLabel}>Total Staff</Text>\n        </View>\n        <View style={styles.statCard}>\n          <Text style={[styles.statValue, { color: Colors.success }]}>{stats.active}</Text>\n          <Text style={styles.statLabel}>Active</Text>\n        </View>\n        <View style={styles.statCard}>\n          <Text style={[styles.statValue, { color: Colors.secondary }]}>{stats.managers}</Text>\n          <Text style={styles.statLabel}>Managers</Text>\n        </View>\n        <View style={styles.statCard}>\n          <Text style={[styles.statValue, { color: Colors.warning }]}>\n            {stats.avgPerformance.toFixed(1)}%\n          </Text>\n          <Text style={styles.statLabel}>Avg Score</Text>\n        </View>\n      </View>\n\n      {/* Search and Filter */}\n      <View style={styles.searchSection}>\n        <View style={styles.searchContainer}>\n          <Icon name=\"search\" size={20} color={Colors.darkGray} />\n          <TextInput\n            style={styles.searchInput}\n            placeholder=\"Search employees...\"\n            value={searchQuery}\n            onChangeText={setSearchQuery}\n            placeholderTextColor={Colors.darkGray}\n          />\n        </View>\n\n        <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.roleFilters}>\n          {['all', 'Manager', 'Cashier', 'Server', 'Cook'].map(role => (\n            <TouchableOpacity\n              key={role}\n              style={[styles.roleFilter, selectedRole === role && styles.roleFilterActive]}\n              onPress={() => setSelectedRole(__role)}>\n              <Text\n                style={[\n                  styles.roleFilterText,\n                  selectedRole === role && styles.roleFilterTextActive,\n                ]}>\n                {role === 'all' ? 'All Roles' : role}\n              </Text>\n            </TouchableOpacity>\n          ))}\n        </ScrollView>\n      </View>\n\n      {/* Employees List */}\n      <FlatList\n        data={filteredEmployees}\n        renderItem={renderEmployee}\n        keyExtractor={item => item.id.toString()}\n        contentContainerStyle={styles.employeesList}\n        showsVerticalScrollIndicator={false}\n        ListEmptyComponent={renderEmptyListComponent}\n        onRefresh={loadEmployees} // Added\n        refreshing={isLoading} // Added\n      />\n\n      {/* Employee Detail Modal */}\n      <Modal\n        visible={!!selectedEmployee}\n        animationType=\"slide\"\n        transparent={true}\n        onRequestClose={() => setSelectedEmployee(__null)}>\n        <View style={styles.modalOverlay}>\n          <View style={styles.employeeModal}>\n            <View style={styles.modalHeader}>\n              <Text style={styles.modalTitle}>Employee Details</Text>\n              <TouchableOpacity onPress={() => setSelectedEmployee(__null)}>\n                <Icon name=\"close\" size={24} color={Colors.text} />\n              </TouchableOpacity>\n            </View>\n\n            {selectedEmployee && (\n              <ScrollView style={styles.modalContent}>\n                <View style={styles.employeeProfile}>\n                  <View style={styles.profileAvatar}>\n                    <Icon name=\"account-circle\" size={80} color={Colors.primary} />\n                  </View>\n                  <Text style={styles.profileName}>{selectedEmployee.name}</Text>\n                  <View\n                    style={[\n                      styles.profileRole,\n                      { backgroundColor: `${getRoleColor(selectedEmployee.role)}20` },\n                    ]}>\n                    <Text\n                      style={[\n                        styles.profileRoleText,\n                        { color: getRoleColor(selectedEmployee.role) },\n                      ]}>\n                      {selectedEmployee.role}\n                    </Text>\n                  </View>\n                </View>\n\n                <View style={styles.detailsSection}>\n                  <Text style={styles.sectionTitle}>Contact Information</Text>\n                  <View style={styles.detailRow}>\n                    <Icon name=\"email\" size={20} color={Colors.darkGray} />\n                    <Text style={styles.detailText}>{selectedEmployee.email}</Text>\n                  </View>\n                  <View style={styles.detailRow}>\n                    <Icon name=\"phone\" size={20} color={Colors.darkGray} />\n                    <Text style={styles.detailText}>{selectedEmployee.phone}</Text>\n                  </View>\n                </View>\n\n                <View style={styles.detailsSection}>\n                  <Text style={styles.sectionTitle}>Employment Details</Text>\n                  <View style={styles.detailRow}>\n                    <Icon name=\"calendar-today\" size={20} color={Colors.darkGray} />\n                    <Text style={styles.detailText}>\n                      Hired {selectedEmployee.hireDate.toLocaleDateString('en-GB')}\n                    </Text>\n                  </View>\n                  <View style={styles.detailRow}>\n                    <Icon name=\"attach-money\" size={20} color={Colors.darkGray} />\n                    <Text style={styles.detailText}>\n                      £{selectedEmployee.hourlyRate.toFixed(2)} per hour\n                    </Text>\n                  </View>\n                </View>\n\n                <View style={styles.detailsSection}>\n                  <Text style={styles.sectionTitle}>Performance Metrics</Text>\n                  <View style={styles.performanceGrid}>\n                    <View style={styles.performanceCard}>\n                      <Text style={styles.performanceValue}>\n                        £{selectedEmployee.totalSales.toFixed(0)}\n                      </Text>\n                      <Text style={styles.performanceLabel}>Total Sales</Text>\n                    </View>\n                    <View style={styles.performanceCard}>\n                      <Text style={styles.performanceValue}>\n                        £{selectedEmployee.averageSalesPerDay.toFixed(0)}\n                      </Text>\n                      <Text style={styles.performanceLabel}>Daily Avg</Text>\n                    </View>\n                    <View style={styles.performanceCard}>\n                      <Text\n                        style={[\n                          styles.performanceValue,\n                          { color: getPerformanceColor(selectedEmployee.performanceScore) },\n                        ]}>\n                        {selectedEmployee.performanceScore.toFixed(1)}%\n                      </Text>\n                      <Text style={styles.performanceLabel}>Performance</Text>\n                    </View>\n                    <View style={styles.performanceCard}>\n                      <Text\n                        style={[\n                          styles.performanceValue,\n                          { color: getPerformanceColor(selectedEmployee.punctualityScore) },\n                        ]}>\n                        {selectedEmployee.punctualityScore.toFixed(1)}%\n                      </Text>\n                      <Text style={styles.performanceLabel}>Punctuality</Text>\n                    </View>\n                  </View>\n                </View>\n\n                <View style={styles.actionButtons}>\n                  <TouchableOpacity style={[styles.actionButton, styles.editButton]}>\n                    <Icon name=\"edit\" size={20} color={Colors.white} />\n                    <Text style={styles.actionButtonText}>Edit</Text>\n                  </TouchableOpacity>\n                  <TouchableOpacity style={[styles.actionButton, styles.scheduleButton]}>\n                    <Icon name=\"schedule\" size={20} color={Colors.white} />\n                    <Text style={styles.actionButtonText}>Schedule</Text>\n                  </TouchableOpacity>\n                  <TouchableOpacity\n                    style={[styles.actionButton, styles.deleteButton]}\n                    onPress={() => handleDeleteEmployee(__selectedEmployee)}>\n                    <Icon name=\"delete\" size={20} color={Colors.white} />\n                    <Text style={styles.actionButtonText}>Delete</Text>\n                  </TouchableOpacity>\n                </View>\n              </ScrollView>\n            )}\n          </View>\n        </View>\n      </Modal>\n\n      {/* Add Employee Modal */}\n      <Modal\n        visible={showAddModal}\n        animationType=\"slide\"\n        transparent={true}\n        onRequestClose={handleCancelAdd}>\n        <View style={styles.modalOverlay}>\n          <View style={styles.addEmployeeModal}>\n            <View style={styles.modalHeader}>\n              <Text style={styles.modalTitle}>Add New Employee</Text>\n              <TouchableOpacity onPress={handleCancelAdd}>\n                <Icon name=\"close\" size={24} color={Colors.text} />\n              </TouchableOpacity>\n            </View>\n\n            <ScrollView style={styles.addEmployeeForm}>\n              <View style={styles.formGroup}>\n                <Text style={styles.formLabel}>Full Name *</Text>\n                <TextInput\n                  style={styles.formInput}\n                  placeholder=\"Enter employee's full name\"\n                  value={newEmployee.name}\n                  onChangeText={text => setNewEmployee({ ...newEmployee, name: text })}\n                  placeholderTextColor={Colors.darkGray}\n                />\n              </View>\n\n              <View style={styles.formGroup}>\n                <Text style={styles.formLabel}>Email Address *</Text>\n                <TextInput\n                  style={styles.formInput}\n                  placeholder=\"employee@restaurant.com\"\n                  value={newEmployee.email}\n                  onChangeText={text => setNewEmployee({ ...newEmployee, email: text })}\n                  keyboardType=\"email-address\"\n                  autoCapitalize=\"none\"\n                  placeholderTextColor={Colors.darkGray}\n                />\n              </View>\n\n              <View style={styles.formGroup}>\n                <Text style={styles.formLabel}>Phone Number</Text>\n                <TextInput\n                  style={styles.formInput}\n                  placeholder=\"+44 7700 900123\"\n                  value={newEmployee.phone}\n                  onChangeText={text => setNewEmployee({ ...newEmployee, phone: text })}\n                  keyboardType=\"phone-pad\"\n                  placeholderTextColor={Colors.darkGray}\n                />\n              </View>\n\n              <View style={styles.formGroup}>\n                <Text style={styles.formLabel}>Role</Text>\n                <View style={styles.roleSelector}>\n                  {['Manager', 'Cashier', 'Server', 'Cook'].map(role => (\n                    <TouchableOpacity\n                      key={role}\n                      style={[\n                        styles.roleOption,\n                        newEmployee.role === role && styles.roleOptionSelected,\n                      ]}\n                      onPress={() => setNewEmployee({ ...newEmployee, role })}>\n                      <Text\n                        style={[\n                          styles.roleOptionText,\n                          newEmployee.role === role && styles.roleOptionTextSelected,\n                        ]}>\n                        {role}\n                      </Text>\n                    </TouchableOpacity>\n                  ))}\n                </View>\n              </View>\n\n              <View style={styles.formGroup}>\n                <Text style={styles.formLabel}>Hourly Rate (£)</Text>\n                <TextInput\n                  style={styles.formInput}\n                  placeholder=\"12.00\"\n                  value={newEmployee.hourlyRate}\n                  onChangeText={text => {\n                    // Only allow numbers and decimal point\n                    const cleanText = text.replace(/[^0-9.]/g, '');\n                    setNewEmployee({ ...newEmployee, hourlyRate: cleanText });\n                  }}\n                  keyboardType=\"decimal-pad\"\n                  placeholderTextColor={Colors.darkGray}\n                />\n              </View>\n\n              <View style={styles.formActions}>\n                <TouchableOpacity\n                  style={[styles.formButton, styles.cancelButton]}\n                  onPress={handleCancelAdd}>\n                  <Text style={styles.cancelButtonText}>Cancel</Text>\n                </TouchableOpacity>\n\n                <TouchableOpacity\n                  style={[styles.formButton, styles.addButton]}\n                  onPress={handleAddEmployee}>\n                  <Icon name=\"person-add\" size={20} color={Colors.white} />\n                  <Text style={styles.addButtonText}>Add Employee</Text>\n                </TouchableOpacity>\n              </View>\n            </ScrollView>\n          </View>\n        </View>\n      </Modal>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.primary,\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    height: 60,\n  },\n  backButton: {\n    padding: 12,\n    marginRight: 8,\n    borderRadius: 8,\n    backgroundColor: 'rgba(255, 255, 255, 0.1)',\n    minWidth: 44,\n    minHeight: 44,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  headerCenter: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  headerTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.white,\n  },\n  headerSubtitle: {\n    fontSize: 12,\n    color: 'rgba(255, 255, 255, 0.8)',\n  },\n  headerActions: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n  },\n  scheduleButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 12, // Increased padding\n    paddingVertical: 8, // Increased padding\n    minHeight: 44, // Ensure min tap target height\n    minWidth: 44, // Ensure min tap target width\n    backgroundColor: 'rgba(255, 255, 255, 0.2)',\n    borderRadius: 8, // Slightly larger radius\n  },\n  scheduleLabel: {\n    marginLeft: 6,\n    color: Colors.white, // Assuming theme.colors.action is white, adjust if needed\n    // ...theme.typography.button, // This needs to be translated to React Native styles\n    fontSize: 14, // Example, adjust as per theme.typography.button\n    fontWeight: '600', // Example, adjust as per theme.typography.button\n  },\n  scheduleButtonText: {\n    color: Colors.white,\n    fontSize: 14,\n    fontWeight: '600', // Semibold\n    marginLeft: 8, // Space between icon and text\n    numberOfLines: 1, // Ensure text ellipsizes if too long\n  },\n  addButton: {\n    padding: 8,\n  },\n  statsBar: {\n    flexDirection: 'row',\n    backgroundColor: Colors.white,\n    paddingVertical: 16,\n    paddingHorizontal: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n    gap: 12,\n  },\n  statCard: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  statValue: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.primary,\n  },\n  statLabel: {\n    fontSize: 12,\n    color: Colors.darkGray,\n    marginTop: 4,\n  },\n  searchSection: {\n    backgroundColor: Colors.white,\n    paddingVertical: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  searchContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: Colors.background,\n    borderRadius: 12,\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    marginHorizontal: 16,\n    marginBottom: 12,\n  },\n  searchInput: {\n    flex: 1,\n    fontSize: 16,\n    color: Colors.text,\n    marginLeft: 12,\n  },\n  roleFilters: {\n    paddingHorizontal: 16,\n  },\n  roleFilter: {\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    marginRight: 8,\n    borderRadius: 20,\n    backgroundColor: Colors.background,\n  },\n  roleFilterActive: {\n    backgroundColor: Colors.primary,\n  },\n  roleFilterText: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.text,\n  },\n  roleFilterTextActive: {\n    color: Colors.white,\n  },\n  employeesList: {\n    padding: 16,\n  },\n  employeeCard: {\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 12,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.05,\n    shadowRadius: 4,\n    elevation: 2,\n  },\n  employeeHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 12,\n  },\n  employeeAvatar: {\n    marginRight: 12,\n  },\n  employeeInfo: {\n    flex: 1,\n  },\n  employeeName: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  roleBadge: {\n    alignSelf: 'flex-start',\n    paddingHorizontal: 8,\n    paddingVertical: 2,\n    borderRadius: 8,\n    marginBottom: 4,\n  },\n  roleText: {\n    fontSize: 12,\n    fontWeight: '600',\n  },\n  employeeEmail: {\n    fontSize: 12,\n    color: Colors.darkGray,\n  },\n  employeeStats: {\n    alignItems: 'flex-end',\n  },\n  statItem: {\n    alignItems: 'center',\n  },\n  employeeMetrics: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    paddingTop: 12,\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n  },\n  metricItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  metricText: {\n    fontSize: 12,\n    color: Colors.darkGray,\n    marginLeft: 4,\n  },\n  emptyState: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 100,\n  },\n  emptyStateText: {\n    fontSize: 18,\n    fontWeight: '500',\n    color: Colors.text,\n    marginTop: 16,\n  },\n  emptyStateSubtext: {\n    fontSize: 14,\n    color: Colors.darkGray,\n    marginTop: 8,\n  },\n  modalOverlay: {\n    flex: 1,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  employeeModal: {\n    backgroundColor: Colors.white,\n    borderRadius: 16,\n    width: '90%',\n    maxHeight: '80%',\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 10 },\n    shadowOpacity: 0.1,\n    shadowRadius: 20,\n    elevation: 10,\n  },\n  modalHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: 20,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  modalTitle: {\n    fontSize: 20,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  modalContent: {\n    padding: 20,\n  },\n  employeeProfile: {\n    alignItems: 'center',\n    marginBottom: 24,\n  },\n  profileAvatar: {\n    marginBottom: 12,\n  },\n  profileName: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: Colors.text,\n    marginBottom: 8,\n  },\n  profileRole: {\n    paddingHorizontal: 12,\n    paddingVertical: 4,\n    borderRadius: 12,\n  },\n  profileRoleText: {\n    fontSize: 14,\n    fontWeight: '600',\n  },\n  detailsSection: {\n    marginBottom: 24,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 12,\n  },\n  detailRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingVertical: 8,\n  },\n  detailText: {\n    fontSize: 14,\n    color: Colors.text,\n    marginLeft: 12,\n  },\n  performanceGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 12,\n  },\n  performanceCard: {\n    flex: 1,\n    minWidth: '45%',\n    backgroundColor: Colors.background,\n    borderRadius: 12,\n    padding: 16,\n    alignItems: 'center',\n  },\n  performanceValue: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.primary,\n  },\n  performanceLabel: {\n    fontSize: 12,\n    color: Colors.darkGray,\n    marginTop: 4,\n    textAlign: 'center',\n  },\n  actionButtons: {\n    flexDirection: 'row',\n    gap: 12,\n    marginTop: 24,\n  },\n  actionButton: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 12,\n    borderRadius: 8,\n  },\n  editButton: {\n    backgroundColor: Colors.secondary,\n  },\n  scheduleButton: {\n    backgroundColor: Colors.warning,\n  },\n  deleteButton: {\n    backgroundColor: Colors.danger,\n  },\n  actionButtonText: {\n    color: Colors.white,\n    fontSize: 14,\n    fontWeight: '600',\n    marginLeft: 8,\n  },\n  // Add Employee Modal Styles\n  addEmployeeModal: {\n    backgroundColor: Colors.white,\n    borderRadius: 16,\n    width: '90%',\n    maxHeight: '85%',\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 10 },\n    shadowOpacity: 0.1,\n    shadowRadius: 20,\n    elevation: 10,\n  },\n  addEmployeeForm: {\n    padding: 20,\n  },\n  formGroup: {\n    marginBottom: 20,\n  },\n  formLabel: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 8,\n  },\n  formInput: {\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 8,\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    fontSize: 16,\n    color: Colors.text,\n    backgroundColor: Colors.white,\n  },\n  roleSelector: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 8,\n  },\n  roleOption: {\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    borderRadius: 20,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    backgroundColor: Colors.background,\n  },\n  roleOptionSelected: {\n    backgroundColor: Colors.primary,\n    borderColor: Colors.primary,\n  },\n  roleOptionText: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.text,\n  },\n  roleOptionTextSelected: {\n    color: Colors.white,\n  },\n  formActions: {\n    flexDirection: 'row',\n    gap: 12,\n    marginTop: 24,\n    paddingBottom: 20,\n  },\n  formButton: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 14,\n    borderRadius: 8,\n  },\n  cancelButton: {\n    backgroundColor: Colors.background,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  addButton: {\n    backgroundColor: Colors.primary,\n  },\n  cancelButtonText: {\n    color: Colors.text,\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  addButtonText: {\n    color: Colors.white,\n    fontSize: 16,\n    fontWeight: '600',\n    marginLeft: 8,\n  },\n  centered: {\n    // Added\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  loadingText: {\n    // Added\n    marginTop: 10,\n    fontSize: 16,\n    color: Colors.darkGray,\n  },\n  retryButton: {\n    // Added\n    marginTop: 20,\n    backgroundColor: Colors.primary,\n    paddingVertical: 10,\n    paddingHorizontal: 20,\n    borderRadius: 8,\n  },\n  retryButtonText: {\n    // Added\n    color: Colors.white,\n    fontSize: 16,\n    fontWeight: '600',\n  },\n});\n\nexport default EmployeesScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/employees/EnhancedEmployeeScheduleScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_screenWidth' is assigned a value but never used.","line":26,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_screenHeight' is assigned a value but never used.","line":26,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_isTablet' is assigned a value but never used.","line":27,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_isSmallDevice' is assigned a value but never used.","line":28,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_ROLE_COLORS' is assigned a value but never used.","line":63,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":63,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_STATUS_COLORS' is assigned a value but never used.","line":72,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":72,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_diff' is assigned a value but never used.","line":197,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":197,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_startHour' is assigned a value but never used.","line":456,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":456,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_endHour' is assigned a value but never used.","line":457,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":457,"endColumn":20},{"ruleId":"@typescript-eslint/no-shadow","severity":1,"message":"'selectedDate' is already declared in the upper scope on line 87 column 10.","line":488,"column":46,"nodeType":"Identifier","messageId":"noShadow","endLine":488,"endColumn":66},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: {\n  color: 'summary.coverage >= 80\\n' +\n    \"                    ? '#27AE60'\\n\" +\n    '                    : summary.coverage >= 60\\n' +\n    \"                    ? '#F39C12'\\n\" +\n    \"                    : '#E74C3C'\"\n}","line":694,"column":15,"nodeType":"ObjectExpression","endLine":701,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_selectedDay' is assigned a value but never used.","line":712,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":712,"endColumn":23},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":738,"column":33,"nodeType":"CallExpression","messageId":"missingRadix","endLine":738,"endColumn":72,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[22718,22718],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":739,"column":31,"nodeType":"CallExpression","messageId":"missingRadix","endLine":739,"endColumn":68,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[22787,22787],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.","line":128,"column":6,"nodeType":"ArrayExpression","endLine":128,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: [currentWeek, loadData]","fix":{"range":[3873,3886],"text":"[currentWeek, loadData]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":10,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  SafeAreaView,\n  StatusBar,\n  ScrollView,\n  TouchableOpacity,\n  Modal,\n  Alert,\n  Dimensions,\n  RefreshControl,\n  ActivityIndicator, // Added\n} from 'react-native';\nimport DateTimePicker from '@react-native-community/datetimepicker';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation } from '@react-navigation/native';\n// import { generateEmployees, EmployeeData } from '../../utils/mockDataGenerator'; // Removed\nimport DataService from '../../services/DataService'; // Added\nimport { EmployeeData } from '../../types'; // Updated import path\nimport { useTheme } from '../../design-system/ThemeProvider';\nimport Colors from '../../constants/Colors';\n\n// Get screen dimensions for responsive design\nconst { width: _screenWidth, height: _screenHeight } = Dimensions.get('window');\nconst _isTablet = screenWidth > 768;\nconst _isSmallDevice = screenWidth < 380;\n\n// Responsive font sizes\nconst getFontSize = (base: _number) => {\n  if (__isTablet) {\n    return base * 1.2;\n  }\n  if (__isSmallDevice) {\n    return base * 0.9;\n  }\n  return base;\n};\n\ninterface Shift {\n  id: string;\n  employeeId: string;\n  employeeName: string;\n  date: string;\n  startTime: string;\n  endTime: string;\n  role: string;\n  status: 'scheduled' | 'confirmed' | 'completed' | 'absent' | 'break';\n  duration: number; // in hours\n  notes?: string;\n  laborCost?: number;\n  breakTime?: number; // in minutes\n}\n\ninterface WeekSchedule {\n  weekStart: Date;\n  shifts: Shift[];\n}\n\ntype ViewMode = 'week' | 'day' | 'list' | 'month';\n\nconst _ROLE_COLORS = {\n  Manager: '#00A651',\n  Cashier: '#0066CC',\n  Server: '#F39C12',\n  Kitchen: '#E74C3C',\n  Cleaner: '#9B59B6',\n  default: '#95A5A6',\n};\n\nconst _STATUS_COLORS = {\n  scheduled: '#F39C12',\n  confirmed: '#0066CC',\n  completed: '#27AE60',\n  absent: '#E74C3C',\n  break: '#9B59B6',\n};\n\nconst EnhancedEmployeeScheduleScreen: React.FC = () => {\n  const navigation = useNavigation();\n  const { theme } = useTheme();\n  const [employees, setEmployees] = useState<EmployeeData[]>([]);\n  const [currentWeek, setCurrentWeek] = useState(new Date());\n  const [weekSchedule, setWeekSchedule] = useState<WeekSchedule | null>(__null);\n  const [viewMode, setViewMode] = useState<ViewMode>('week');\n  const [selectedDate, setSelectedDate] = useState<string>(new Date().toISOString().split('T')[0]);\n  const [refreshing, setRefreshing] = useState(__false);\n  const [isLoadingEmployees, setIsLoadingEmployees] = useState<boolean>(__true); // Added\n  const [isLoadingSchedule, setIsLoadingSchedule] = useState<boolean>(__true); // Added\n  const [error, setError] = useState<string | null>(__null); // Added\n\n  // Enhanced Modal States\n  const [showAddShiftModal, setShowAddShiftModal] = useState(__false);\n  const [showEditShiftModal, setShowEditShiftModal] = useState(__false);\n  const [showTimePicker, setShowTimePicker] = useState(__false);\n  const [selectedTimeType, setSelectedTimeType] = useState<'start' | 'end'>('start');\n  const [selectedEmployee, setSelectedEmployee] = useState<EmployeeData | null>(__null);\n  const [showOptionsMenu, setShowOptionsMenu] = useState(__false);\n\n  // Enhanced Form State\n  const [newShift, setNewShift] = useState({\n    employeeId: '',\n    date: '',\n    startTime: new Date(),\n    endTime: new Date(),\n    role: 'Cashier',\n    notes: '',\n    breakTime: 30, // default 30 min break\n  });\n\n  // Edit Shift State\n  const [selectedShift, setSelectedShift] = useState<Shift | null>(__null);\n  const [editShift, setEditShift] = useState({\n    employeeId: '',\n    date: '',\n    startTime: new Date(),\n    endTime: new Date(),\n    role: 'Cashier',\n    notes: '',\n    breakTime: 30,\n    status: 'scheduled' as const,\n  });\n\n  useEffect(() => {\n    loadData();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentWeek]);\n\n  const loadData = async () => {\n    setIsLoadingEmployees(__true);\n    setIsLoadingSchedule(__true);\n    setError(__null);\n    setRefreshing(__true); // Also indicate refreshing state\n    const dataService = DataService.getInstance();\n\n    try {\n      // Fetch employees first\n      const employeeData = await dataService.getEmployees(); // Assuming this method will be added\n      setEmployees(employeeData || []);\n      setIsLoadingEmployees(__false);\n\n      // Then fetch schedule\n      const weekStart = getWeekStart(__currentWeek);\n      const scheduleData = await dataService.getWeekSchedule(__weekStart, employeeData || []);\n\n      // Ensure weekStart is properly formatted as a Date object\n      if (scheduleData && scheduleData.weekStart) {\n        // Convert string date to Date object if needed\n        const _weekStartDate =\n          scheduleData.weekStart instanceof Date\n            ? scheduleData.weekStart\n            : new Date(scheduleData.weekStart);\n\n        setWeekSchedule({\n          weekStart: _weekStartDate,\n          shifts: scheduleData.shifts || [],\n        });\n      } else {\n        setWeekSchedule({ weekStart, shifts: [] });\n      }\n    } catch (e: _unknown) {\n      setError(e.message || 'Failed to load schedule data.');\n      setEmployees([]);\n      setWeekSchedule({ weekStart: getWeekStart(__currentWeek), shifts: [] });\n    } finally {\n      setIsLoadingEmployees(__false);\n      setIsLoadingSchedule(__false);\n      setRefreshing(__false);\n    }\n  };\n\n  // const loadEmployees = () => { // Replaced by loadData\n  //   const employeeData = generateEmployees();\n  //   setEmployees(__employeeData);\n  // };\n\n  // const loadWeekSchedule = () => { // Replaced by loadData\n  //   const weekStart = getWeekStart(__currentWeek);\n  //   const shifts = generateEnhancedMockShifts(__weekStart);\n  //   setWeekSchedule({ weekStart, shifts });\n  // };\n\n  const onRefresh = async () => {\n    // Modified to call loadData\n    loadData();\n  };\n\n  const getWeekStart = (date: _Date): Date => {\n    // Ensure date is valid\n    if (!date || !(date instanceof Date) || isNaN(date.getTime())) {\n      return new Date(); // Return current date as fallback\n    }\n\n    const weekStart = new Date(__date);\n    const day = weekStart.getDay();\n    const _diff = weekStart.getDate() - day + (day === 0 ? -6 : 1); // Monday start\n    weekStart.setDate(__diff);\n    weekStart.setHours(0, 0, 0, 0);\n    return weekStart;\n  };\n\n  // const generateEnhancedMockShifts = (weekStart: _Date): Shift[] => { // Removed\n  //   const shifts: Shift[] = [];\n  //   const employeeIds = employees.map(emp => emp.id);\n\n  //   // Generate more realistic shifts with breaks, _costs, and better coverage\n  //   for (let day = 0; day < 7; day++) {\n  //     const currentDate = new Date(__weekStart);\n  //     currentDate.setDate(weekStart.getDate() + day);\n  //     const dateStr = currentDate.toISOString().split('T')[0];\n\n  //     if (day < 6) { // Monday to Saturday - Full service\n  //       // Morning Manager Shift\n  //       shifts.push({\n  //         id: `manager-${day}-morning`,\n  //         employeeId: employeeIds[0] || 'emp1',\n  //         employeeName: employees[0]?.name || 'Maria Rodriguez',\n  //         date: _dateStr,\n  //         startTime: '07:00',\n  //         endTime: '15:00',\n  //         role: 'Manager',\n  //         status: day < 2 ? 'completed' : 'confirmed',\n  //         duration: 8,\n  //         laborCost: 8 * (employees[0]?.hourlyRate || 15),\n  //         breakTime: 30,\n  //         notes: 'Opening supervisor'\n  //       });\n\n  //       // Morning Cashier\n  //       shifts.push({\n  //         id: `cashier-${day}-morning`,\n  //         employeeId: employeeIds[1] || 'emp2',\n  //         employeeName: employees[1]?.name || 'Carlos Martinez',\n  //         date: _dateStr,\n  //         startTime: '08:00',\n  //         endTime: '16:00',\n  //         role: 'Cashier',\n  //         status: day < 2 ? 'completed' : 'scheduled',\n  //         duration: 8,\n  //         laborCost: 8 * (employees[1]?.hourlyRate || 12),\n  //         breakTime: 45,\n  //       });\n\n  //       // Lunch Rush Server\n  //       shifts.push({\n  //         id: `server-${day}-lunch`,\n  //         employeeId: employeeIds[2] || 'emp3',\n  //         employeeName: employees[2]?.name || 'Sofia Hernandez',\n  //         date: _dateStr,\n  //         startTime: '11:00',\n  //         endTime: '15:00',\n  //         role: 'Server',\n  //         status: day < 2 ? 'completed' : 'confirmed',\n  //         duration: 4,\n  //         laborCost: 4 * (employees[2]?.hourlyRate || 10),\n  //         breakTime: 15,\n  //         notes: 'Lunch rush coverage'\n  //       });\n\n  //       // Evening Manager\n  //       shifts.push({\n  //         id: `manager-${day}-evening`,\n  //         employeeId: employeeIds[3] || 'emp4',\n  //         employeeName: employees[3]?.name || 'Ahmed Hassan',\n  //         date: _dateStr,\n  //         startTime: '15:00',\n  //         endTime: '23:00',\n  //         role: 'Manager',\n  //         status: day < 2 ? 'completed' : 'scheduled',\n  //         duration: 8,\n  //         laborCost: 8 * (employees[3]?.hourlyRate || 15),\n  //         breakTime: 30,\n  //         notes: 'Closing supervisor'\n  //       });\n\n  //       // Evening Server Team\n  //       shifts.push({\n  //         id: `server-${day}-evening-1`,\n  //         employeeId: employeeIds[4] || 'emp5',\n  //         employeeName: employees[4]?.name || 'Lucy Chen',\n  //         date: _dateStr,\n  //         startTime: '16:00',\n  //         endTime: '22:00',\n  //         role: 'Server',\n  //         status: day < 2 ? 'completed' : 'confirmed',\n  //         duration: 6,\n  //         laborCost: 6 * (employees[4]?.hourlyRate || 10),\n  //         breakTime: 30,\n  //       });\n\n  //       // Kitchen Staff\n  //       shifts.push({\n  //         id: `kitchen-${day}-1`,\n  //         employeeId: employeeIds[5] || 'emp6',\n  //         employeeName: employees[5]?.name || 'Roberto Silva',\n  //         date: _dateStr,\n  //         startTime: '10:00',\n  //         endTime: '22:00',\n  //         role: 'Kitchen',\n  //         status: day < 2 ? 'completed' : 'scheduled',\n  //         duration: 12,\n  //         laborCost: 12 * (employees[5]?.hourlyRate || 13),\n  //         breakTime: 60,\n  //         notes: 'Full kitchen coverage'\n  //       });\n\n  //     } else { // Sunday - Reduced hours\n  //       shifts.push({\n  //         id: `sunday-manager-${day}`,\n  //         employeeId: employeeIds[0] || 'emp1',\n  //         employeeName: employees[0]?.name || 'Maria Rodriguez',\n  //         date: _dateStr,\n  //         startTime: '10:00',\n  //         endTime: '18:00',\n  //         role: 'Manager',\n  //         status: 'scheduled',\n  //         duration: 8,\n  //         laborCost: 8 * (employees[0]?.hourlyRate || 15),\n  //         breakTime: 30,\n  //         notes: 'Sunday operations'\n  //       });\n\n  //       shifts.push({\n  //         id: `sunday-server-${day}`,\n  //         employeeId: employeeIds[2] || 'emp3',\n  //         employeeName: employees[2]?.name || 'Sofia Hernandez',\n  //         date: _dateStr,\n  //         startTime: '11:00',\n  //         endTime: '17:00',\n  //         role: 'Server',\n  //         status: 'scheduled',\n  //         duration: 6,\n  //         laborCost: 6 * (employees[2]?.hourlyRate || 10),\n  //         breakTime: 30,\n  //       });\n  //     }\n  //   }\n\n  //   return shifts;\n  // };\n\n  const getWeekDays = (): string[] => {\n    if (!weekSchedule || !weekSchedule.weekStart) {\n      return [];\n    }\n\n    const days = [];\n    // Ensure weekStart is a valid Date object\n    const startDate =\n      weekSchedule.weekStart instanceof Date\n        ? weekSchedule.weekStart\n        : new Date(weekSchedule.weekStart);\n\n    if (isNaN(startDate.getTime())) {\n      return [];\n    }\n\n    for (let i = 0; i < 7; i++) {\n      const day = new Date(__startDate);\n      day.setDate(startDate.getDate() + i);\n      days.push(day.toISOString().split('T')[0]);\n    }\n    return days;\n  };\n\n  const getDayName = (_dateStr: _string): string => {\n    const date = new Date(__dateStr);\n    return date.toLocaleDateString('en-US', { weekday: 'short' });\n  };\n\n  const getDayNumber = (_dateStr: _string): string => {\n    const date = new Date(__dateStr);\n    return date.getDate().toString();\n  };\n\n  const getShiftsForDay = (dateStr: _string): Shift[] => {\n    if (!weekSchedule) {\n      return [];\n    }\n    return weekSchedule.shifts\n      .filter(shift => shift.date === dateStr)\n      .sort((__a, _b) => a.startTime.localeCompare(b.startTime));\n  };\n\n  const navigateWeek = (direction: 'prev' | 'next') => {\n    const newWeek = new Date(__currentWeek);\n    newWeek.setDate(currentWeek.getDate() + (direction === 'next' ? 7 : -7));\n    setCurrentWeek(__newWeek);\n  };\n\n  const formatWeekRange = (): string => {\n    if (!weekSchedule || !weekSchedule.weekStart) {\n      return '';\n    }\n\n    // Ensure weekStart is a valid Date object\n    const startDate =\n      weekSchedule.weekStart instanceof Date\n        ? weekSchedule.weekStart\n        : new Date(weekSchedule.weekStart);\n\n    if (isNaN(startDate.getTime())) {\n      return 'Invalid Date';\n    }\n\n    const weekEnd = new Date(__startDate);\n    weekEnd.setDate(startDate.getDate() + 6);\n\n    const start = startDate.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n    });\n    const end = weekEnd.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric',\n    });\n\n    return `${start} - ${end}`;\n  };\n\n  const calculateWeekSummary = () => {\n    if (!weekSchedule) {\n      return { totalHours: 0, totalCost: 0, coverage: 0 };\n    }\n\n    const totalHours = weekSchedule.shifts.reduce((__sum, _shift) => sum + shift.duration, 0);\n    const _totalCost = weekSchedule.shifts.reduce(\n      (__sum, _shift) => sum + (shift.laborCost || 0),\n      0,\n    );\n\n    // Calculate coverage percentage (__simplified)\n    const expectedHours = 7 * 14; // 14 hours per day for 7 days\n    const coverage = Math.min((totalHours / expectedHours) * 100, 100);\n\n    return { totalHours, _totalCost, coverage };\n  };\n\n  const handleAddShift = (date: _string) => {\n    setSelectedDate(__date);\n    setNewShift({\n      ...newShift,\n      date,\n      startTime: new Date(new Date().setHours(9, 0, 0, 0)),\n      endTime: new Date(new Date().setHours(17, 0, 0, 0)),\n    });\n    setShowAddShiftModal(__true);\n  };\n\n  const handleShiftPress = (shift: _Shift) => {\n    setSelectedShift(__shift);\n\n    // Parse times for editing\n    const [_startHour, _startMin] = shift.startTime.split(':').map(__Number);\n    const [_endHour, _endMin] = shift.endTime.split(':').map(__Number);\n\n    const startTime = new Date();\n    startTime.setHours(__startHour, _startMin, 0, 0);\n\n    const endTime = new Date();\n    endTime.setHours(__endHour, _endMin, 0, 0);\n\n    setEditShift({\n      employeeId: shift.employeeId,\n      date: shift.date,\n      startTime,\n      endTime,\n      role: shift.role,\n      notes: shift.notes || '',\n      breakTime: shift.breakTime || 30,\n      status: shift.status,\n    });\n\n    // Find and set the selected employee\n    const employee = employees.find(emp => emp.id === shift.employeeId);\n    setSelectedEmployee(employee || null);\n\n    setShowEditShiftModal(__true);\n  };\n\n  const handleTimePress = (_type: 'start' | 'end') => {\n    setSelectedTimeType(__type);\n    setShowTimePicker(__true);\n  };\n\n  const handleTimeChange = (event: _unknown, selectedDate?: _Date) => {\n    setShowTimePicker(__false);\n    if (__selectedDate) {\n      if (selectedTimeType === 'start') {\n        setNewShift({ ...newShift, startTime: selectedDate });\n      } else {\n        setNewShift({ ...newShift, endTime: selectedDate });\n      }\n    }\n  };\n\n  const saveShift = () => {\n    if (!newShift.employeeId || !newShift.date) {\n      Alert.alert('Error', 'Please select an employee and ensure date is set');\n      return;\n    }\n\n    const employee = employees.find(emp => emp.id === newShift.employeeId);\n    if (!employee) {\n      return;\n    }\n\n    // Calculate duration\n    const duration = (newShift.endTime.getTime() - newShift.startTime.getTime()) / (1000 * 60 * 60);\n    const laborCost = duration * employee.hourlyRate;\n\n    const shift: Shift = {\n      id: `shift-${Date.now()}`,\n      employeeId: employee.id,\n      employeeName: employee.name,\n      date: newShift.date,\n      startTime: newShift.startTime.toTimeString().slice(0, 5),\n      endTime: newShift.endTime.toTimeString().slice(0, 5),\n      role: newShift.role,\n      status: 'scheduled',\n      duration,\n      laborCost,\n      breakTime: newShift.breakTime,\n      notes: newShift.notes,\n    };\n\n    if (__weekSchedule) {\n      setWeekSchedule({\n        ...weekSchedule,\n        shifts: [...weekSchedule.shifts, shift],\n      });\n    }\n\n    setShowAddShiftModal(__false);\n    resetForm();\n    Alert.alert('Success', 'Shift added successfully');\n  };\n\n  const saveEditShift = () => {\n    if (!selectedShift || !editShift.employeeId) {\n      Alert.alert('Error', 'Please ensure all fields are filled');\n      return;\n    }\n\n    const employee = employees.find(emp => emp.id === editShift.employeeId);\n    if (!employee) {\n      return;\n    }\n\n    // Calculate duration\n    const duration =\n      (editShift.endTime.getTime() - editShift.startTime.getTime()) / (1000 * 60 * 60);\n    const laborCost = duration * employee.hourlyRate;\n\n    const updatedShift: Shift = {\n      ...selectedShift,\n      employeeId: employee.id,\n      employeeName: employee.name,\n      startTime: editShift.startTime.toTimeString().slice(0, 5),\n      endTime: editShift.endTime.toTimeString().slice(0, 5),\n      role: editShift.role,\n      status: editShift.status,\n      duration,\n      laborCost,\n      breakTime: editShift.breakTime,\n      notes: editShift.notes,\n    };\n\n    if (__weekSchedule) {\n      setWeekSchedule({\n        ...weekSchedule,\n        shifts: weekSchedule.shifts.map(shift =>\n          shift.id === selectedShift.id ? updatedShift : _shift,\n        ),\n      });\n    }\n\n    setShowEditShiftModal(__false);\n    setSelectedShift(__null);\n    Alert.alert('Success', 'Shift updated successfully');\n  };\n\n  const deleteShift = () => {\n    if (!selectedShift) {\n      return;\n    }\n\n    Alert.alert('Delete Shift', 'Are you sure you want to delete this shift?', [\n      { text: 'Cancel', style: 'cancel' },\n      {\n        text: 'Delete',\n        style: 'destructive',\n        onPress: () => {\n          if (__weekSchedule) {\n            setWeekSchedule({\n              ...weekSchedule,\n              shifts: weekSchedule.shifts.filter(shift => shift.id !== selectedShift.id),\n            });\n          }\n          setShowEditShiftModal(__false);\n          setSelectedShift(__null);\n          Alert.alert('Success', 'Shift deleted successfully');\n        },\n      },\n    ]);\n  };\n\n  const resetForm = () => {\n    setNewShift({\n      employeeId: '',\n      date: '',\n      startTime: new Date(new Date().setHours(9, 0, 0, 0)),\n      endTime: new Date(new Date().setHours(17, 0, 0, 0)),\n      role: 'Cashier',\n      notes: '',\n      breakTime: 30,\n    });\n    setSelectedEmployee(__null);\n  };\n\n  const getRoleColor = (_role: _string) => {\n    switch (__role) {\n      case 'Manager':\n        return Colors.primary;\n      case 'Cashier':\n        return Colors.secondary;\n      case 'Server':\n        return Colors.warning;\n      case 'Kitchen':\n        return Colors.danger;\n      case 'Cleaner':\n        return Colors.mediumGray;\n      default:\n        return Colors.darkGray;\n    }\n  };\n\n  const getStatusColor = (_status: _string) => {\n    switch (__status) {\n      case 'scheduled':\n        return Colors.warning;\n      case 'confirmed':\n        return Colors.secondary;\n      case 'completed':\n        return Colors.success;\n      case 'absent':\n        return Colors.danger;\n      case 'break':\n        return Colors.mediumGray;\n      default:\n        return Colors.warning;\n    }\n  };\n\n  const renderViewModeSelector = () => (\n    <View style={styles.viewModeSelector}>\n      {(['week', 'day', 'list'] as ViewMode[]).map(mode => (\n        <TouchableOpacity\n          key={mode}\n          style={[styles.viewModeButton, viewMode === mode && styles.viewModeButtonActive]}\n          onPress={() => setViewMode(__mode)}>\n          <Icon\n            name={mode === 'week' ? 'view-week' : mode === 'day' ? 'today' : 'list'}\n            size={20}\n            color={viewMode === mode ? theme.colors.white : theme.colors.primary}\n          />\n          <Text style={[styles.viewModeText, viewMode === mode && styles.viewModeTextActive]}>\n            {mode.charAt(0).toUpperCase() + mode.slice(1)}\n          </Text>\n        </TouchableOpacity>\n      ))}\n    </View>\n  );\n\n  const renderWeekSummary = () => {\n    const summary = calculateWeekSummary();\n\n    return (\n      <View style={styles.weekSummary}>\n        <View style={styles.summaryItem}>\n          <Text style={styles.summaryValue}>{summary.totalHours}h</Text>\n          <Text style={styles.summaryLabel}>Total Hours</Text>\n        </View>\n        <View style={styles.summaryItem}>\n          <Text style={styles.summaryValue}>£{summary.totalCost.toFixed(0)}</Text>\n          <Text style={styles.summaryLabel}>Labor Cost</Text>\n        </View>\n        <View style={styles.summaryItem}>\n          <Text\n            style={[\n              styles.summaryValue,\n              {\n                color:\n                  summary.coverage >= 80\n                    ? '#27AE60'\n                    : summary.coverage >= 60\n                    ? '#F39C12'\n                    : '#E74C3C',\n              },\n            ]}>\n            {summary.coverage.toFixed(0)}%\n          </Text>\n          <Text style={styles.summaryLabel}>Coverage</Text>\n        </View>\n      </View>\n    );\n  };\n\n  const renderDayView = () => {\n    const _selectedDay = selectedDate || new Date().toISOString().split('T')[0];\n    const dayShifts = getShiftsForDay(__selectedDay);\n    const dayName = new Date(__selectedDay).toLocaleDateString('en-US', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n    });\n\n    // Create hourly timeline\n    const hours = Array.from({ length: 24 }, (___, _i) => i);\n\n    return (\n      <ScrollView style={styles.dayViewContainer}>\n        <View style={styles.dayViewHeader}>\n          <Text style={styles.dayViewTitle}>{dayName}</Text>\n          <TouchableOpacity\n            style={styles.addShiftFab}\n            onPress={() => handleAddShift(__selectedDay)}>\n            <Icon name=\"add\" size={24} color={theme.colors.white} />\n          </TouchableOpacity>\n        </View>\n\n        <View style={styles.timelineContainer}>\n          {hours.map(hour => {\n            const hourShifts = dayShifts.filter(shift => {\n              const startHour = parseInt(shift.startTime.split(':')[0]);\n              const endHour = parseInt(shift.endTime.split(':')[0]);\n              return hour >= startHour && hour < endHour;\n            });\n\n            return (\n              <View key={hour} style={styles.timelineHour}>\n                <View style={styles.timelineLabel}>\n                  <Text style={styles.timelineLabelText}>\n                    {hour.toString().padStart(2, '0')}:00\n                  </Text>\n                </View>\n                <View style={styles.timelineContent}>\n                  {hourShifts.map(shift => (\n                    <TouchableOpacity\n                      key={shift.id}\n                      style={[\n                        styles.timelineShift,\n                        { backgroundColor: getRoleColor(shift.role) + '20' },\n                        { borderLeftColor: getRoleColor(shift.role) },\n                      ]}\n                      onPress={() => handleShiftPress(__shift)}>\n                      <Text style={styles.timelineShiftEmployee}>{shift.employeeName}</Text>\n                      <Text style={styles.timelineShiftDetails}>\n                        {shift.startTime} - {shift.endTime} • {shift.role}\n                      </Text>\n                    </TouchableOpacity>\n                  ))}\n                </View>\n              </View>\n            );\n          })}\n        </View>\n      </ScrollView>\n    );\n  };\n\n  const renderListView = () => {\n    const weekDays = getWeekDays();\n\n    return (\n      <ScrollView style={styles.listViewContainer}>\n        {weekDays.map(date => {\n          const dayShifts = getShiftsForDay(__date);\n          const dayName = getDayName(__date);\n          const dayNumber = getDayNumber(__date);\n          const isToday = date === new Date().toISOString().split('T')[0];\n          const isSelected = date === selectedDate;\n\n          if (dayShifts.length === 0) {\n            return null;\n          }\n\n          return (\n            <View key={date} style={styles.listDaySection}>\n              <TouchableOpacity\n                style={[styles.listDayHeader, (isSelected || isToday) && styles.listTodayHeader]}\n                onPress={() => setSelectedDate(__date)}>\n                <Text style={[styles.listDayName, (isSelected || isToday) && styles.listTodayText]}>\n                  {dayName}, {dayNumber}\n                </Text>\n                <Text\n                  style={[styles.listDayCount, (isSelected || isToday) && styles.listTodayText]}>\n                  {dayShifts.length} shifts\n                </Text>\n              </TouchableOpacity>\n\n              {dayShifts.map(shift => (\n                <TouchableOpacity\n                  key={shift.id}\n                  style={styles.listShiftCard}\n                  onPress={() => handleShiftPress(__shift)}>\n                  <View style={styles.listShiftLeft}>\n                    <Text style={styles.listShiftTime}>\n                      {shift.startTime} - {shift.endTime}\n                    </Text>\n                    <Text style={styles.listShiftDuration}>{shift.duration}h</Text>\n                  </View>\n\n                  <View style={styles.listShiftCenter}>\n                    <Text style={styles.listShiftEmployee}>{shift.employeeName}</Text>\n                    <Text style={[styles.listShiftRole, { color: getRoleColor(shift.role) }]}>\n                      {shift.role}\n                    </Text>\n                  </View>\n\n                  <View style={styles.listShiftRight}>\n                    <View\n                      style={[\n                        styles.listShiftStatus,\n                        { backgroundColor: getStatusColor(shift.status) },\n                      ]}>\n                      <Text style={styles.listShiftStatusText}>{shift.status}</Text>\n                    </View>\n                    {shift.laborCost && (\n                      <Text style={styles.listShiftCost}>£{shift.laborCost.toFixed(0)}</Text>\n                    )}\n                  </View>\n                </TouchableOpacity>\n              ))}\n            </View>\n          );\n        })}\n      </ScrollView>\n    );\n  };\n\n  const renderEnhancedWeekView = () => (\n    <ScrollView\n      horizontal\n      showsHorizontalScrollIndicator={false}\n      style={styles.weekViewContainer}\n      refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}>\n      {getWeekDays().map((__date, _index) => {\n        const dayShifts = getShiftsForDay(__date);\n        const isToday = date === new Date().toISOString().split('T')[0];\n        const isSelected = date === selectedDate;\n        const totalDayHours = dayShifts.reduce((__sum, _shift) => sum + shift.duration, 0);\n\n        return (\n          <View key={date} style={styles.enhancedDayColumn}>\n            <TouchableOpacity\n              style={[styles.enhancedDayHeader, (isSelected || isToday) && styles.todayHeader]}\n              onPress={() => setSelectedDate(__date)}>\n              <Text style={[styles.dayName, (isSelected || isToday) && styles.todayText]}>\n                {getDayName(__date)}\n              </Text>\n              <Text style={[styles.dayNumber, (isSelected || isToday) && styles.todayText]}>\n                {getDayNumber(__date)}\n              </Text>\n              <Text style={[styles.dayHours, (isSelected || isToday) && styles.todayText]}>\n                {totalDayHours}h\n              </Text>\n            </TouchableOpacity>\n\n            <ScrollView style={styles.enhancedDayContent} showsVerticalScrollIndicator={false}>\n              {dayShifts.length === 0 ? (\n                <TouchableOpacity\n                  style={styles.enhancedEmptyDay}\n                  onPress={() => handleAddShift(__date)}>\n                  <Icon name=\"add-circle-outline\" size={32} color={theme.colors.secondary} />\n                  <Text style={styles.emptyDayText}>Add Shift</Text>\n                </TouchableOpacity>\n              ) : (\n                <>\n                  {dayShifts.map(shift => (\n                    <TouchableOpacity\n                      key={shift.id}\n                      style={[\n                        styles.enhancedShiftCard,\n                        { borderLeftColor: getRoleColor(shift.role) },\n                      ]}\n                      onPress={() => handleShiftPress(__shift)}>\n                      <View style={styles.shiftCardHeader}>\n                        <Text style={styles.shiftEmployeeName} numberOfLines={1}>\n                          {shift.employeeName}\n                        </Text>\n                        <View\n                          style={[\n                            styles.shiftStatusBadge,\n                            { backgroundColor: getStatusColor(shift.status) },\n                          ]}>\n                          <Text style={styles.shiftStatusText}>\n                            {shift.status.charAt(0).toUpperCase()}\n                          </Text>\n                        </View>\n                      </View>\n\n                      <Text style={styles.shiftTime}>\n                        {shift.startTime} - {shift.endTime}\n                      </Text>\n\n                      <View style={styles.shiftCardFooter}>\n                        <Text style={[styles.shiftRole, { color: getRoleColor(shift.role) }]}>\n                          {shift.role}\n                        </Text>\n                        <Text style={styles.shiftDuration}>{shift.duration}h</Text>\n                      </View>\n\n                      {shift.laborCost && (\n                        <Text style={styles.shiftCost}>£{shift.laborCost.toFixed(0)}</Text>\n                      )}\n                    </TouchableOpacity>\n                  ))}\n\n                  <TouchableOpacity\n                    style={styles.addMoreShiftButton}\n                    onPress={() => handleAddShift(__date)}>\n                    <Icon name=\"add\" size={16} color={theme.colors.primary} />\n                    <Text style={styles.addMoreText}>Add Shift</Text>\n                  </TouchableOpacity>\n                </>\n              )}\n            </ScrollView>\n          </View>\n        );\n      })}\n    </ScrollView>\n  );\n\n  const renderAddShiftModal = () => (\n    <Modal\n      visible={showAddShiftModal}\n      animationType=\"slide\"\n      presentationStyle=\"pageSheet\"\n      onRequestClose={() => setShowAddShiftModal(__false)}>\n      <SafeAreaView style={styles.modalContainer}>\n        <View style={styles.modalHeader}>\n          <TouchableOpacity\n            onPress={() => setShowAddShiftModal(__false)}\n            style={styles.modalCloseButton}>\n            <Icon name=\"close\" size={24} color={theme.colors.text} />\n          </TouchableOpacity>\n          <Text style={styles.modalTitle}>Add New Shift</Text>\n          <TouchableOpacity onPress={saveShift} style={styles.modalSaveButton}>\n            <Text style={styles.modalSaveText}>Save</Text>\n          </TouchableOpacity>\n        </View>\n\n        <ScrollView style={styles.modalContent}>\n          {/* Employee Selection */}\n          <View style={styles.formSection}>\n            <Text style={styles.sectionTitle}>Select Employee</Text>\n            <ScrollView horizontal showsHorizontalScrollIndicator={false}>\n              {employees.map(employee => (\n                <TouchableOpacity\n                  key={employee.id}\n                  style={[\n                    styles.employeeSelectionCard,\n                    newShift.employeeId === employee.id && styles.selectedEmployeeCard,\n                  ]}\n                  onPress={() => {\n                    setNewShift({ ...newShift, employeeId: employee.id });\n                    setSelectedEmployee(__employee);\n                  }}>\n                  <Text\n                    style={[\n                      styles.employeeCardName,\n                      newShift.employeeId === employee.id && styles.selectedEmployeeText,\n                    ]}>\n                    {employee.name}\n                  </Text>\n                  <Text\n                    style={[\n                      styles.employeeCardRole,\n                      newShift.employeeId === employee.id && styles.selectedEmployeeText,\n                    ]}>\n                    {employee.role} • £{employee.hourlyRate}/hr\n                  </Text>\n                </TouchableOpacity>\n              ))}\n            </ScrollView>\n          </View>\n\n          {/* Date Display */}\n          <View style={styles.formSection}>\n            <Text style={styles.sectionTitle}>Date</Text>\n            <View style={styles.dateDisplay}>\n              <Text style={styles.dateDisplayText}>\n                {selectedDate\n                  ? new Date(__selectedDate).toLocaleDateString('en-US', {\n                      weekday: 'long',\n                      year: 'numeric',\n                      month: 'long',\n                      day: 'numeric',\n                    })\n                  : 'No date selected'}\n              </Text>\n            </View>\n          </View>\n\n          {/* Time Selection */}\n          <View style={styles.formSection}>\n            <Text style={styles.sectionTitle}>Shift Times</Text>\n            <View style={styles.timeSelectionRow}>\n              <TouchableOpacity\n                style={styles.timeSelector}\n                onPress={() => handleTimePress('start')}>\n                <Text style={styles.timeSelectorLabel}>Start Time</Text>\n                <Text style={styles.timeSelectorValue}>\n                  {newShift.startTime.toLocaleTimeString('en-US', {\n                    hour: '2-digit',\n                    minute: '2-digit',\n                    hour12: _false,\n                  })}\n                </Text>\n              </TouchableOpacity>\n\n              <TouchableOpacity style={styles.timeSelector} onPress={() => handleTimePress('end')}>\n                <Text style={styles.timeSelectorLabel}>End Time</Text>\n                <Text style={styles.timeSelectorValue}>\n                  {newShift.endTime.toLocaleTimeString('en-US', {\n                    hour: '2-digit',\n                    minute: '2-digit',\n                    hour12: _false,\n                  })}\n                </Text>\n              </TouchableOpacity>\n            </View>\n\n            {/* Duration and Cost Display */}\n            {selectedEmployee && (\n              <View style={styles.shiftCalculations}>\n                <View style={styles.calculationItem}>\n                  <Text style={styles.calculationLabel}>Duration</Text>\n                  <Text style={styles.calculationValue}>\n                    {(\n                      (newShift.endTime.getTime() - newShift.startTime.getTime()) /\n                      (1000 * 60 * 60)\n                    ).toFixed(1)}\n                    h\n                  </Text>\n                </View>\n                <View style={styles.calculationItem}>\n                  <Text style={styles.calculationLabel}>Labor Cost</Text>\n                  <Text style={styles.calculationValue}>\n                    £\n                    {(\n                      ((newShift.endTime.getTime() - newShift.startTime.getTime()) /\n                        (1000 * 60 * 60)) *\n                      selectedEmployee.hourlyRate\n                    ).toFixed(2)}\n                  </Text>\n                </View>\n              </View>\n            )}\n          </View>\n\n          {/* Role Selection */}\n          <View style={styles.formSection}>\n            <Text style={styles.sectionTitle}>Role</Text>\n            <View style={styles.roleSelection}>\n              {Object.keys(__ROLE_COLORS)\n                .filter(role => role !== 'default')\n                .map(role => (\n                  <TouchableOpacity\n                    key={role}\n                    style={[\n                      styles.roleButton,\n                      { borderColor: getRoleColor(__role) },\n                      newShift.role === role && { backgroundColor: getRoleColor(__role) },\n                    ]}\n                    onPress={() => setNewShift({ ...newShift, role })}>\n                    <Text\n                      style={[\n                        styles.roleButtonText,\n                        {\n                          color: newShift.role === role ? theme.colors.white : getRoleColor(__role),\n                        },\n                      ]}>\n                      {role}\n                    </Text>\n                  </TouchableOpacity>\n                ))}\n            </View>\n          </View>\n        </ScrollView>\n\n        {/* Time Picker Modal */}\n        {showTimePicker && (\n          <DateTimePicker\n            value={selectedTimeType === 'start' ? newShift.startTime : newShift.endTime}\n            mode=\"time\"\n            is24Hour={true}\n            display=\"spinner\"\n            onChange={handleTimeChange}\n          />\n        )}\n      </SafeAreaView>\n    </Modal>\n  );\n\n  const renderEditShiftModal = () => (\n    <Modal\n      visible={showEditShiftModal}\n      animationType=\"slide\"\n      presentationStyle=\"pageSheet\"\n      onRequestClose={() => setShowEditShiftModal(__false)}>\n      <SafeAreaView style={styles.editModalContainer}>\n        <View style={styles.editModalHeader}>\n          <TouchableOpacity\n            onPress={() => setShowEditShiftModal(__false)}\n            style={styles.modalCloseButton}>\n            <Icon name=\"close\" size={24} color={theme.colors.text} />\n          </TouchableOpacity>\n          <Text style={styles.editModalTitle}>Edit Shift</Text>\n          <View style={styles.editModalActions}>\n            <TouchableOpacity onPress={deleteShift} style={styles.editModalDeleteButton}>\n              <Text style={styles.editModalDeleteText}>Delete</Text>\n            </TouchableOpacity>\n            <TouchableOpacity onPress={saveEditShift} style={styles.editModalSaveButton}>\n              <Text style={styles.editModalSaveText}>Save</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n\n        <ScrollView style={styles.modalContent}>\n          {/* Employee Selection */}\n          <View style={styles.formSection}>\n            <Text style={styles.sectionTitle}>Employee</Text>\n            <ScrollView horizontal showsHorizontalScrollIndicator={false}>\n              {employees.map(employee => (\n                <TouchableOpacity\n                  key={employee.id}\n                  style={[\n                    styles.employeeSelectionCard,\n                    editShift.employeeId === employee.id && styles.selectedEmployeeCard,\n                  ]}\n                  onPress={() => {\n                    setEditShift({ ...editShift, employeeId: employee.id });\n                    setSelectedEmployee(__employee);\n                  }}>\n                  <Text\n                    style={[\n                      styles.employeeCardName,\n                      editShift.employeeId === employee.id && styles.selectedEmployeeText,\n                    ]}>\n                    {employee.name}\n                  </Text>\n                  <Text\n                    style={[\n                      styles.employeeCardRole,\n                      editShift.employeeId === employee.id && styles.selectedEmployeeText,\n                    ]}>\n                    {employee.role} • £{employee.hourlyRate}/hr\n                  </Text>\n                </TouchableOpacity>\n              ))}\n            </ScrollView>\n          </View>\n\n          {/* Time Selection */}\n          <View style={styles.formSection}>\n            <Text style={styles.sectionTitle}>Shift Times</Text>\n            <View style={styles.timeSelectionRow}>\n              <TouchableOpacity\n                style={styles.timeSelector}\n                onPress={() => {\n                  setSelectedTimeType('start');\n                  setShowTimePicker(__true);\n                }}>\n                <Text style={styles.timeSelectorLabel}>Start Time</Text>\n                <Text style={styles.timeSelectorValue}>\n                  {editShift.startTime.toLocaleTimeString('en-US', {\n                    hour: '2-digit',\n                    minute: '2-digit',\n                    hour12: _false,\n                  })}\n                </Text>\n              </TouchableOpacity>\n\n              <TouchableOpacity\n                style={styles.timeSelector}\n                onPress={() => {\n                  setSelectedTimeType('end');\n                  setShowTimePicker(__true);\n                }}>\n                <Text style={styles.timeSelectorLabel}>End Time</Text>\n                <Text style={styles.timeSelectorValue}>\n                  {editShift.endTime.toLocaleTimeString('en-US', {\n                    hour: '2-digit',\n                    minute: '2-digit',\n                    hour12: _false,\n                  })}\n                </Text>\n              </TouchableOpacity>\n            </View>\n\n            {/* Duration and Cost Display */}\n            {selectedEmployee && (\n              <View style={styles.shiftCalculations}>\n                <View style={styles.calculationItem}>\n                  <Text style={styles.calculationLabel}>Duration</Text>\n                  <Text style={styles.calculationValue}>\n                    {(\n                      (editShift.endTime.getTime() - editShift.startTime.getTime()) /\n                      (1000 * 60 * 60)\n                    ).toFixed(1)}\n                    h\n                  </Text>\n                </View>\n                <View style={styles.calculationItem}>\n                  <Text style={styles.calculationLabel}>Labor Cost</Text>\n                  <Text style={styles.calculationValue}>\n                    £\n                    {(\n                      ((editShift.endTime.getTime() - editShift.startTime.getTime()) /\n                        (1000 * 60 * 60)) *\n                      selectedEmployee.hourlyRate\n                    ).toFixed(2)}\n                  </Text>\n                </View>\n              </View>\n            )}\n          </View>\n\n          {/* Role Selection */}\n          <View style={styles.formSection}>\n            <Text style={styles.sectionTitle}>Role</Text>\n            <View style={styles.roleSelection}>\n              {Object.keys(__ROLE_COLORS)\n                .filter(role => role !== 'default')\n                .map(role => (\n                  <TouchableOpacity\n                    key={role}\n                    style={[\n                      styles.roleButton,\n                      { borderColor: getRoleColor(__role) },\n                      editShift.role === role && { backgroundColor: getRoleColor(__role) },\n                    ]}\n                    onPress={() => setEditShift({ ...editShift, role })}>\n                    <Text\n                      style={[\n                        styles.roleButtonText,\n                        { color: editShift.role === role ? Colors.white : getRoleColor(__role) },\n                      ]}>\n                      {role}\n                    </Text>\n                  </TouchableOpacity>\n                ))}\n            </View>\n          </View>\n\n          {/* Status Selection */}\n          <View style={styles.formSection}>\n            <Text style={styles.sectionTitle}>Status</Text>\n            <View style={styles.roleSelection}>\n              {Object.keys(__STATUS_COLORS).map(status => (\n                <TouchableOpacity\n                  key={status}\n                  style={[\n                    styles.roleButton,\n                    { borderColor: getStatusColor(__status) },\n                    editShift.status === status && { backgroundColor: getStatusColor(__status) },\n                  ]}\n                  onPress={() => setEditShift({ ...editShift, status: status as unknown })}>\n                  <Text\n                    style={[\n                      styles.roleButtonText,\n                      {\n                        color:\n                          editShift.status === status ? Colors.white : getStatusColor(__status),\n                      },\n                    ]}>\n                    {status.charAt(0).toUpperCase() + status.slice(1)}\n                  </Text>\n                </TouchableOpacity>\n              ))}\n            </View>\n          </View>\n        </ScrollView>\n\n        {/* Edit Time Picker Modal */}\n        {showTimePicker && (\n          <DateTimePicker\n            value={selectedTimeType === 'start' ? editShift.startTime : editShift.endTime}\n            mode=\"time\"\n            is24Hour={true}\n            display=\"spinner\"\n            onChange={(__event, _selectedDate) => {\n              setShowTimePicker(__false);\n              if (__selectedDate) {\n                if (selectedTimeType === 'start') {\n                  setEditShift({ ...editShift, startTime: selectedDate });\n                } else {\n                  setEditShift({ ...editShift, endTime: selectedDate });\n                }\n              }\n            }}\n          />\n        )}\n      </SafeAreaView>\n    </Modal>\n  );\n\n  const renderOptionsMenu = () => (\n    <Modal\n      visible={showOptionsMenu}\n      transparent={true}\n      animationType=\"fade\"\n      onRequestClose={() => setShowOptionsMenu(__false)}>\n      <TouchableOpacity style={styles.optionsOverlay} onPress={() => setShowOptionsMenu(__false)}>\n        <View style={styles.optionsMenu}>\n          <TouchableOpacity style={styles.optionItem}>\n            <Icon name=\"content-copy\" size={20} color={theme.colors.primary} />\n            <Text style={[styles.optionText, { color: theme.colors.text }]}>Copy Week</Text>\n          </TouchableOpacity>\n\n          <TouchableOpacity style={styles.optionItem}>\n            <Icon name=\"publish\" size={20} color={theme.colors.success} />\n            <Text style={[styles.optionText, { color: theme.colors.text }]}>Publish Schedule</Text>\n          </TouchableOpacity>\n\n          <TouchableOpacity style={styles.optionItem}>\n            <Icon name=\"share\" size={20} color={theme.colors.secondary} />\n            <Text style={[styles.optionText, { color: theme.colors.text }]}>Share Schedule</Text>\n          </TouchableOpacity>\n\n          <TouchableOpacity style={styles.optionItem}>\n            <Icon name=\"today\" size={20} color={theme.colors.warning} />\n            <Text style={[styles.optionText, { color: theme.colors.text }]}>Go to Today</Text>\n          </TouchableOpacity>\n        </View>\n      </TouchableOpacity>\n    </Modal>\n  );\n\n  if (isLoadingEmployees || isLoadingSchedule) {\n    return (\n      <SafeAreaView\n        style={[styles.container, styles.centered, { backgroundColor: theme.colors.background }]}>\n        <ActivityIndicator size=\"large\" color={theme.colors.primary} />\n        <Text style={[styles.loadingText, { color: theme.colors.text }]}>\n          {isLoadingEmployees ? 'Loading Employees...' : 'Loading Schedule...'}\n        </Text>\n      </SafeAreaView>\n    );\n  }\n\n  if (__error) {\n    return (\n      <SafeAreaView\n        style={[styles.container, styles.centered, { backgroundColor: theme.colors.background }]}>\n        <Icon name=\"error-outline\" size={64} color={theme.colors.danger} />\n        <Text style={[styles.errorTextHeader, { color: theme.colors.danger }]}>\n          Error Loading Data\n        </Text>\n        <Text style={[styles.errorText, { color: theme.colors.text }]}>{error}</Text>\n        <TouchableOpacity\n          onPress={loadData}\n          style={[styles.retryButton, { backgroundColor: theme.colors.primary }]}>\n          <Text style={[styles.retryButtonText, { color: theme.colors.white }]}>Try Again</Text>\n        </TouchableOpacity>\n      </SafeAreaView>\n    );\n  }\n\n  return (\n    <SafeAreaView style={[styles.container, { backgroundColor: theme.colors.background }]}>\n      <StatusBar barStyle=\"light-content\" backgroundColor={theme.colors.primary} />\n\n      {/* Header */}\n      <View style={styles.header}>\n        <TouchableOpacity style={styles.backButton} onPress={() => navigation.goBack()}>\n          <Icon name=\"arrow-back\" size={24} color={theme.colors.white} />\n        </TouchableOpacity>\n\n        <View style={styles.headerCenter}>\n          <Text style={[styles.headerTitle, { color: theme.colors.white }]}>Employee Schedule</Text>\n          <Text style={[styles.headerSubtitle, { color: theme.colors.white }]}>\n            {formatWeekRange()}\n          </Text>\n        </View>\n\n        <TouchableOpacity style={styles.headerAction} onPress={() => setShowOptionsMenu(__true)}>\n          <Icon name=\"more-vert\" size={24} color={theme.colors.white} />\n        </TouchableOpacity>\n      </View>\n\n      {/* View Mode Selector */}\n      {renderViewModeSelector()}\n\n      {/* Week Navigation */}\n      <View style={[styles.weekNavigation, { backgroundColor: theme.colors.white }]}>\n        <TouchableOpacity style={styles.navButton} onPress={() => navigateWeek('prev')}>\n          <Icon name=\"chevron-left\" size={28} color={theme.colors.primary} />\n        </TouchableOpacity>\n\n        <View style={styles.weekInfo}>{renderWeekSummary()}</View>\n\n        <TouchableOpacity style={styles.navButton} onPress={() => navigateWeek('next')}>\n          <Icon name=\"chevron-right\" size={28} color={theme.colors.primary} />\n        </TouchableOpacity>\n      </View>\n\n      {/* Content Views */}\n      {viewMode === 'week' && renderEnhancedWeekView()}\n      {viewMode === 'day' && renderDayView()}\n      {viewMode === 'list' && renderListView()}\n\n      {/* Add Shift Modal */}\n      {renderAddShiftModal()}\n\n      {/* Edit Shift Modal */}\n      {renderEditShiftModal()}\n\n      {/* Options Menu Modal */}\n      {renderOptionsMenu()}\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  header: {\n    backgroundColor: Colors.primary,\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    height: 60,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 5,\n  },\n  backButton: {\n    padding: 8,\n  },\n  headerCenter: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  headerTitle: {\n    fontSize: getFontSize(20),\n    fontWeight: 'bold',\n  },\n  headerSubtitle: {\n    fontSize: getFontSize(12),\n    opacity: 0.8,\n    marginTop: 2,\n  },\n  headerAction: {\n    padding: 8,\n  },\n\n  // View Mode Selector\n  viewModeSelector: {\n    flexDirection: 'row',\n    backgroundColor: Colors.background,\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n  },\n  viewModeButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    marginRight: 8,\n    borderRadius: 20,\n    backgroundColor: Colors.white,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  viewModeButtonActive: {\n    backgroundColor: Colors.primary,\n    borderColor: Colors.primary,\n  },\n  viewModeText: {\n    marginLeft: 6,\n    fontSize: getFontSize(14),\n    fontWeight: '500',\n    color: Colors.text,\n  },\n  viewModeTextActive: {\n    color: Colors.white,\n  },\n\n  // Week Navigation & Summary\n  weekNavigation: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 16,\n    paddingVertical: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  navButton: {\n    padding: 8,\n  },\n  weekInfo: {\n    flex: 1,\n  },\n  weekSummary: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n  },\n  summaryItem: {\n    alignItems: 'center',\n  },\n  summaryValue: {\n    fontSize: getFontSize(18),\n    fontWeight: 'bold',\n    color: Colors.text,\n  },\n  summaryLabel: {\n    fontSize: getFontSize(12),\n    color: Colors.darkGray,\n    marginTop: 2,\n  },\n\n  // Enhanced Week View\n  weekViewContainer: {\n    flex: 1,\n    paddingHorizontal: 16,\n    paddingTop: 16,\n  },\n  enhancedDayColumn: {\n    width: screenWidth * 0.4,\n    marginRight: 12,\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    elevation: 3,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n  },\n  enhancedDayHeader: {\n    padding: 16,\n    alignItems: 'center',\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n    borderTopLeftRadius: 12,\n    borderTopRightRadius: 12,\n  },\n  todayHeader: {\n    backgroundColor: Colors.primary,\n  },\n  dayName: {\n    fontSize: getFontSize(14),\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  dayNumber: {\n    fontSize: getFontSize(24),\n    fontWeight: 'bold',\n    color: Colors.text,\n    marginTop: 4,\n  },\n  dayHours: {\n    fontSize: getFontSize(12),\n    color: Colors.darkGray,\n    marginTop: 2,\n  },\n  todayText: {\n    color: Colors.white,\n  },\n  enhancedDayContent: {\n    padding: 8,\n    paddingBottom: 16,\n    maxHeight: 400,\n  },\n  enhancedEmptyDay: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 40,\n  },\n  emptyDayText: {\n    fontSize: getFontSize(14),\n    color: Colors.darkGray,\n    marginTop: 8,\n  },\n\n  // Enhanced Shift Cards\n  enhancedShiftCard: {\n    backgroundColor: Colors.background,\n    borderRadius: 8,\n    padding: 12,\n    marginBottom: 8,\n    borderLeftWidth: 4,\n  },\n  shiftCardHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 6,\n  },\n  shiftEmployeeName: {\n    fontSize: getFontSize(14),\n    fontWeight: '600',\n    color: Colors.text,\n    flex: 1,\n  },\n  shiftStatusBadge: {\n    width: 20,\n    height: 20,\n    borderRadius: 10,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  shiftStatusText: {\n    fontSize: getFontSize(10),\n    fontWeight: 'bold',\n    color: Colors.white,\n  },\n  shiftTime: {\n    fontSize: getFontSize(13),\n    color: Colors.darkGray,\n    marginBottom: 6,\n  },\n  shiftCardFooter: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  shiftRole: {\n    fontSize: getFontSize(12),\n    fontWeight: '500',\n  },\n  shiftDuration: {\n    fontSize: getFontSize(12),\n    color: Colors.darkGray,\n  },\n  shiftCost: {\n    fontSize: getFontSize(11),\n    color: Colors.success,\n    marginTop: 4,\n    textAlign: 'right',\n  },\n  addMoreShiftButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 12,\n    borderWidth: 1,\n    borderColor: Colors.primary,\n    borderStyle: 'dashed',\n    borderRadius: 8,\n    marginTop: 8,\n  },\n  addMoreText: {\n    fontSize: getFontSize(12),\n    color: Colors.primary,\n    marginLeft: 4,\n    fontWeight: '500',\n  },\n\n  // Modal Styles\n  modalContainer: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  modalHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingHorizontal: 16,\n    paddingVertical: 16,\n    backgroundColor: Colors.white,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  modalCloseButton: {\n    padding: 8,\n  },\n  modalTitle: {\n    fontSize: getFontSize(18),\n    fontWeight: 'bold',\n    color: Colors.text,\n  },\n  modalSaveButton: {\n    padding: 8,\n  },\n  modalSaveText: {\n    fontSize: getFontSize(16),\n    fontWeight: '600',\n    color: Colors.primary,\n  },\n  modalContent: {\n    flex: 1,\n    padding: 16,\n  },\n\n  // Form Sections\n  formSection: {\n    marginBottom: 24,\n  },\n  sectionTitle: {\n    fontSize: getFontSize(16),\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 12,\n  },\n\n  // Employee Selection\n  employeeSelectionCard: {\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    padding: 16,\n    marginRight: 12,\n    minWidth: 120,\n    borderWidth: 2,\n    borderColor: Colors.border,\n  },\n  selectedEmployeeCard: {\n    borderColor: Colors.primary,\n    backgroundColor: Colors.primary,\n  },\n  employeeCardName: {\n    fontSize: getFontSize(14),\n    fontWeight: '600',\n    color: Colors.text,\n    textAlign: 'center',\n  },\n  employeeCardRole: {\n    fontSize: getFontSize(12),\n    color: Colors.darkGray,\n    textAlign: 'center',\n    marginTop: 4,\n  },\n  selectedEmployeeText: {\n    color: Colors.white,\n  },\n\n  // Date Display\n  dateDisplay: {\n    backgroundColor: Colors.white,\n    borderRadius: 8,\n    padding: 16,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  dateDisplayText: {\n    fontSize: getFontSize(16),\n    color: Colors.text,\n    textAlign: 'center',\n  },\n\n  // Time Selection\n  timeSelectionRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    gap: 12,\n  },\n  timeSelector: {\n    flex: 1,\n    backgroundColor: Colors.white,\n    borderRadius: 8,\n    padding: 16,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    alignItems: 'center',\n  },\n  timeSelectorLabel: {\n    fontSize: getFontSize(12),\n    color: Colors.darkGray,\n    marginBottom: 4,\n  },\n  timeSelectorValue: {\n    fontSize: getFontSize(18),\n    fontWeight: 'bold',\n    color: Colors.text,\n  },\n\n  // Calculations\n  shiftCalculations: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    marginTop: 12,\n    padding: 16,\n    backgroundColor: Colors.white,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  calculationItem: {\n    alignItems: 'center',\n  },\n  calculationLabel: {\n    fontSize: getFontSize(12),\n    color: Colors.darkGray,\n  },\n  calculationValue: {\n    fontSize: getFontSize(16),\n    fontWeight: 'bold',\n    color: Colors.success,\n    marginTop: 4,\n  },\n\n  // Role Selection\n  roleSelection: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 8,\n  },\n  roleButton: {\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    borderRadius: 20,\n    borderWidth: 2,\n    backgroundColor: Colors.white,\n  },\n  roleButtonText: {\n    fontSize: getFontSize(14),\n    fontWeight: '500',\n  },\n\n  // Day View Styles\n  dayViewContainer: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  dayViewHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: 16,\n    backgroundColor: Colors.white,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  dayViewTitle: {\n    fontSize: getFontSize(18),\n    fontWeight: 'bold',\n    color: Colors.text,\n  },\n  addShiftFab: {\n    width: 56,\n    height: 56,\n    borderRadius: 28,\n    backgroundColor: Colors.primary,\n    alignItems: 'center',\n    justifyContent: 'center',\n    elevation: 6,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 3 },\n    shadowOpacity: 0.2,\n    shadowRadius: 6,\n  },\n  timelineContainer: {\n    padding: 16,\n  },\n  timelineHour: {\n    flexDirection: 'row',\n    minHeight: 60,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  timelineLabel: {\n    width: 60,\n    justifyContent: 'center',\n    paddingRight: 16,\n  },\n  timelineLabelText: {\n    fontSize: getFontSize(12),\n    color: Colors.darkGray,\n    fontWeight: '500',\n  },\n  timelineContent: {\n    flex: 1,\n    paddingVertical: 8,\n  },\n  timelineShift: {\n    backgroundColor: Colors.white,\n    borderRadius: 8,\n    padding: 12,\n    marginBottom: 4,\n    borderLeftWidth: 4,\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.1,\n    shadowRadius: 2,\n  },\n  timelineShiftEmployee: {\n    fontSize: getFontSize(14),\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  timelineShiftDetails: {\n    fontSize: getFontSize(12),\n    color: Colors.darkGray,\n    marginTop: 2,\n  },\n\n  // List View Styles\n  listViewContainer: {\n    flex: 1,\n    padding: 16,\n    backgroundColor: Colors.background,\n  },\n  listDaySection: {\n    marginBottom: 24,\n  },\n  listDayHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingVertical: 12,\n    paddingHorizontal: 16,\n    backgroundColor: Colors.white,\n    borderRadius: 8,\n    marginBottom: 8,\n    borderLeftWidth: 4,\n    borderLeftColor: Colors.primary,\n  },\n  listTodayHeader: {\n    backgroundColor: Colors.primary,\n    borderLeftColor: Colors.white,\n  },\n  listDayName: {\n    fontSize: getFontSize(16),\n    fontWeight: 'bold',\n    color: Colors.text,\n  },\n  listTodayText: {\n    color: Colors.white,\n  },\n  listDayCount: {\n    fontSize: getFontSize(12),\n    color: Colors.darkGray,\n  },\n  listShiftCard: {\n    flexDirection: 'row',\n    backgroundColor: Colors.white,\n    borderRadius: 8,\n    padding: 16,\n    marginBottom: 8,\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.1,\n    shadowRadius: 2,\n  },\n  listShiftLeft: {\n    alignItems: 'center',\n    marginRight: 16,\n    minWidth: 80,\n  },\n  listShiftTime: {\n    fontSize: getFontSize(14),\n    fontWeight: '600',\n    color: Colors.text,\n    textAlign: 'center',\n  },\n  listShiftDuration: {\n    fontSize: getFontSize(12),\n    color: Colors.darkGray,\n    marginTop: 2,\n  },\n  listShiftCenter: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n  listShiftEmployee: {\n    fontSize: getFontSize(16),\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  listShiftRole: {\n    fontSize: getFontSize(14),\n    fontWeight: '500',\n    marginTop: 2,\n  },\n  listShiftRight: {\n    alignItems: 'flex-end',\n    justifyContent: 'center',\n    minWidth: 80,\n  },\n  listShiftStatus: {\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 12,\n  },\n  listShiftStatusText: {\n    fontSize: getFontSize(12),\n    fontWeight: '500',\n    color: Colors.white,\n    textTransform: 'capitalize',\n  },\n  listShiftCost: {\n    fontSize: getFontSize(12),\n    color: Colors.success,\n    marginTop: 4,\n    fontWeight: '500',\n  },\n\n  // Options Menu Styles\n  optionsOverlay: {\n    flex: 1,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    justifyContent: 'flex-start',\n    alignItems: 'flex-end',\n    paddingTop: 60,\n    paddingRight: 16,\n  },\n  optionsMenu: {\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    paddingVertical: 8,\n    minWidth: 180,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 4 },\n    shadowOpacity: 0.15,\n    shadowRadius: 12,\n    elevation: 8,\n  },\n  optionItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n  },\n  optionText: {\n    fontSize: 16,\n    fontWeight: '500',\n    marginLeft: 12,\n  },\n\n  // Edit Shift Modal Styles\n  editModalContainer: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  editModalHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingHorizontal: 16,\n    paddingVertical: 16,\n    backgroundColor: Colors.white,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  editModalTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: Colors.text,\n  },\n  editModalActions: {\n    flexDirection: 'row',\n  },\n  editModalDeleteButton: {\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    backgroundColor: Colors.danger,\n    borderRadius: 8,\n    marginRight: 8,\n  },\n  editModalDeleteText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.white,\n  },\n  editModalSaveButton: {\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    backgroundColor: Colors.primary,\n    borderRadius: 8,\n  },\n  editModalSaveText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.white,\n  },\n  centered: {\n    // Added\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20,\n  },\n  loadingText: {\n    // Added\n    marginTop: 10,\n    fontSize: getFontSize(16),\n    // color: Colors.darkGray, // Theme controlled\n  },\n  errorTextHeader: {\n    // Added\n    fontSize: getFontSize(18),\n    fontWeight: 'bold',\n    // color: Colors.danger, // Theme controlled\n    marginTop: 16,\n    marginBottom: 8,\n    textAlign: 'center',\n  },\n  errorText: {\n    // Added\n    fontSize: getFontSize(14),\n    // color: Colors.text, // Theme controlled\n    textAlign: 'center',\n    marginBottom: 20,\n  },\n  retryButton: {\n    // Added\n    // backgroundColor: Colors.primary, // Theme controlled\n    paddingVertical: 12,\n    paddingHorizontal: 30,\n    borderRadius: 8,\n  },\n  retryButtonText: {\n    // Added\n    // color: Colors.white, // Theme controlled\n    fontSize: getFontSize(16),\n    fontWeight: '600',\n  },\n});\n\nexport default EnhancedEmployeeScheduleScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/employees/__tests__/EnhancedEmployeeScheduleScreen.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/inventory/InventoryScreen.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Expression expected.","line":214,"column":8,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  StatusBar,\n  SafeAreaView,\n  TouchableOpacity,\n  ScrollView,\n  FlatList,\n  TextInput,\n  Modal,\n  Alert, // Will be replaced by LoadingView\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation } from '@react-navigation/native';\n// import { generateInventory, InventoryData } from '../../utils/mockDataGenerator'; // Removed\nimport DataService from '../../services/DataService'; // Added\n// import * as InventoryApiService from '../../services/InventoryApiService'; // Temporarily disabled to prevent crashes\nimport { InventoryData, ReceiptItem as ScannedReceiptItem } from '../../types'; // Updated import path, added ReceiptItem\nimport LoadingView from '../../components/feedback/LoadingView'; // Added\nimport ComingSoon from '../../components/feedback/ComingSoon'; // Added\nimport ReceiptScanModal from '../../components/modals/ReceiptScanModal'; // Added\n\n// Mock ENV flag (would typically come from an env config file)\nconst ENV = {\n  FEATURE_INVENTORY: _true, // Set to true to enable the screen, false to show ComingSoon\n};\n\n// Clover POS Color Scheme\nconst Colors = {\n  primary: '#00A651', // Clover Green\n  secondary: '#0066CC', // Clover Blue\n  success: '#00A651',\n  warning: '#FF6B35',\n  danger: '#E74C3C',\n  background: '#F5F5F5',\n  white: '#FFFFFF',\n  lightGray: '#E5E5E5',\n  mediumGray: '#999999',\n  darkGray: '#666666',\n  text: '#333333',\n  lightText: '#666666',\n  border: '#DDDDDD',\n};\n\nconst InventoryScreen: React.FC = () => {\n  const navigation = useNavigation();\n  const [inventory, setInventory] = useState<InventoryData[]>([]);\n  const [filteredInventory, setFilteredInventory] = useState<InventoryData[]>([]);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState('all');\n  const [selectedStatus, setSelectedStatus] = useState('all');\n  const [selectedItem, setSelectedItem] = useState<InventoryData | null>(__null);\n  const [isLoading, setIsLoading] = useState<boolean>(__true); // Added\n  const [error, setError] = useState<string | null>(__null); // Added\n  const [showRestockModal, setShowRestockModal] = useState(__false);\n  const [showEditModal, setShowEditModal] = useState(__false);\n  const [showReceiptScanModal, setShowReceiptScanModal] = useState(__false); // Added\n  const [showAddItemModal, setShowAddItemModal] = useState(__false); // Added for + button\n  const [editFormData, setEditFormData] = useState({\n    name: '',\n    category: '',\n    currentStock: '',\n    minimumStock: '',\n    maximumStock: '',\n    unitCost: '',\n    supplier: '',\n  });\n  const [newItemFormData, setNewItemFormData] = useState({\n    name: '',\n    category: 'Vegetables',\n    currentStock: '0',\n    minimumStock: '5',\n    maximumStock: '50',\n    unitCost: '0.00',\n    supplier: '',\n  });\n\n  useEffect(() => {\n    if (ENV.FEATURE_INVENTORY) {\n      loadInventory();\n    } else {\n      setIsLoading(__false); // Not loading if feature is off\n    }\n  }, []);\n\n  useEffect(() => {\n    if (ENV.FEATURE_INVENTORY && !isLoading && !error) {\n      filterInventory();\n    } else {\n      setFilteredInventory([]);\n    }\n  }, [inventory, _searchQuery, selectedCategory, _selectedStatus, isLoading, error]);\n\n  const loadInventory = async () => {\n    // Modified\n    setIsLoading(__true);\n    setError(__null);\n    try {\n      const dataService = DataService.getInstance();\n      // Assuming a getInventory method will be added to DataService\n      const inventoryData = await dataService.getInventory();\n\n      // Map the API response to ensure all required fields exist\n      const mappedInventory = (inventoryData || []).map((item: _unknown, index: _number) => ({\n        // Use nullish coalescing to properly handle 0 as a valid ID\n        itemId: item.itemId ?? item.id ?? `generated_${index}`, // Use deterministic fallback based on index\n        name: item.name || 'Unknown Item',\n        category: item.category || 'Uncategorized',\n        currentStock: item.currentStock ?? item.current_stock ?? 0,\n        minimumStock: item.minimumStock ?? item.minimum_stock ?? 0,\n        maximumStock: item.maximumStock ?? item.maximum_stock ?? 100,\n        unitCost: item.unitCost ?? item.unit_cost ?? 0,\n        supplier: item.supplier || 'Unknown Supplier',\n        lastRestocked: item.lastRestocked ? new Date(item.lastRestocked) : new Date(),\n        turnoverRate: item.turnoverRate ?? item.turnover_rate ?? 0,\n      }));\n\n      setInventory(__mappedInventory);\n    } catch (e: _unknown) {\n      setError(e.message || 'Failed to load inventory.');\n      setInventory([]); // Clear inventory on error\n    } finally {\n      setIsLoading(__false);\n    }\n  };\n\n  const filterInventory = () => {\n    let filtered = inventory;\n\n    // Apply category filter\n    if (selectedCategory !== 'all') {\n      filtered = filtered.filter(item => item.category === selectedCategory);\n    }\n\n    // Apply status filter\n    if (selectedStatus !== 'all') {\n      switch (__selectedStatus) {\n        case 'low':\n          filtered = filtered.filter(item => item.currentStock <= item.minimumStock);\n          break;\n        case 'out':\n          filtered = filtered.filter(item => item.currentStock === 0);\n          break;\n        case 'overstocked':\n          filtered = filtered.filter(item => item.currentStock > item.maximumStock);\n          break;\n        case 'optimal':\n          filtered = filtered.filter(\n            item => item.currentStock > item.minimumStock && item.currentStock <= item.maximumStock,\n          );\n          break;\n      }\n    }\n\n    // Apply search query\n    if (__searchQuery) {\n      filtered = filtered.filter(\n        item =>\n          item.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n          item.supplier.toLowerCase().includes(searchQuery.toLowerCase()) ||\n          item.category.toLowerCase().includes(searchQuery.toLowerCase()),\n      );\n    }\n\n    setFilteredInventory(__filtered);\n  };\n\n  const handleQRScan = () => {\n    // This function will be updated later to open the new ReceiptScanModal.\n    // For now, let's update the alert text as per UI-1.\n    // Now opens the new modal directly for scanning receipts.\n    // Barcode scanning can be a separate option or integrated into ReceiptScanModal if needed.\n    setShowReceiptScanModal(__true);\n  };\n\n  const handleReceiptSubmit = async (items: ScannedReceiptItem[]) => {\n    // Here, you would typically call an API service to process these items.\n    // For example, update inventory based on these items.\n    // This is a placeholder for the actual logic (INT-1).\n\n    // Example: Add to current inventory (very simplified)\n    // This is NOT production logic, just for demonstration.\n    // Actual logic will involve matching by SKU, creating new items, etc. via backend.\n\n    // Simulating a delay for processing\n    // await new Promise(resolve => setTimeout(__resolve, 500));\n\n    let successCount = 0;\n    let errorCount = 0;\n    const newItemsToCreate = [];\n\n    for (const item of items) {\n      const quantity = parseFloat(item.quantity);\n      if (isNaN(__quantity) || quantity <= 0) {\n        errorCount++;\n        continue;\n      }\n\n      if (item.sku) {\n        // SKU matched by backend\n        try {\n          // TODO: Implement InventoryApiService.adjustStock when backend is properly connected\n          // await InventoryApiService.adjustStock(item.sku, _quantity, 'receipt_scan_import');\n          successCount++;\n        } catch (__apiError) {\n          Alert.alert('API Error', `Could not adjust stock for ${item.name} (SKU: ${item.sku}).`);\n          errorCount++;\n        }\n      } else {\n        // No SKU match, pre-populate New Item form (__placeholder)\n          `Item \"${item.name}\" (Qty: ${quantity}, Price: ${item.price}) has no SKU. Would pre-populate new item form.`,\n        );\n        // In a real app, you'd navigate to a \"Create New Item\" screen/modal here,\n        // passing item.name, item.quantity, item.price etc.\n        // e.g., navigation.navigate('CreateItemScreen', { initialData: item });\n        newItemsToCreate.push(__item);\n      }\n    }\n\n    // Potentially refresh inventory list after submission\n    loadInventory();\n    setShowReceiptScanModal(__false); // Close modal after submission\n\n    let summaryMessage = `${successCount} item(__s) processed successfully.`;\n    if (errorCount > 0) {\n      summaryMessage += ` ${errorCount} item(__s) had errors.`;\n    }\n    if (newItemsToCreate.length > 0) {\n      summaryMessage += ` ${newItemsToCreate.length} item(__s) need to be created.`;\n      // Optionally, trigger the first new item creation flow here\n      // if (newItemsToCreate.length > 0) {\n      //   Alert.alert(\"New Items\", `You have ${newItemsToCreate.length} new items to create. Starting with \"${newItemsToCreate[0].name}\".`);\n      //   // Pseudocode: openCreateItemModal(newItemsToCreate[0]);\n      // }\n    }\n    Alert.alert('Processing Complete', _summaryMessage);\n  };\n\n  const getStockStatus = (item: _InventoryData) => {\n    if (item.currentStock === 0) {\n      return { status: 'Out of Stock', color: Colors.danger };\n    }\n    if (item.currentStock <= item.minimumStock) {\n      return { status: 'Low Stock', color: Colors.warning };\n    }\n    if (item.currentStock > item.maximumStock) {\n      return { status: 'Overstocked', color: Colors.secondary };\n    }\n    return { status: 'In Stock', color: Colors.success };\n  };\n\n  const getStockPercentage = (item: _InventoryData) => {\n    if (!item.maximumStock || item.maximumStock === 0) {\n      return 0;\n    }\n    return Math.min((item.currentStock / item.maximumStock) * 100, 100);\n  };\n\n  const formatLastRestocked = (date: _Date) => {\n    const days = Math.floor((Date.now() - date.getTime()) / (1000 * 60 * 60 * 24));\n    if (days === 0) {\n      return 'Today';\n    }\n    if (days === 1) {\n      return 'Yesterday';\n    }\n    return `${days} days ago`;\n  };\n\n  const handleRestock = (item: _InventoryData) => {\n    setSelectedItem(__item);\n    setShowRestockModal(__true);\n  };\n\n  const handleEditItem = (item: InventoryData | null) => {\n    if (__item) {\n      setEditFormData({\n        name: item.name,\n        category: item.category,\n        currentStock: item.currentStock.toString(),\n        minimumStock: item.minimumStock.toString(),\n        maximumStock: item.maximumStock.toString(),\n        unitCost: item.unitCost ? item.unitCost.toFixed(2) : '0.00',\n        supplier: item.supplier,\n      });\n      setShowEditModal(__true);\n    }\n  };\n\n  const handleSaveEdit = () => {\n    if (!selectedItem) {\n      return;\n    }\n\n    // Validate input\n    const currentStock = parseInt(editFormData.currentStock);\n    const minimumStock = parseInt(editFormData.minimumStock);\n    const maximumStock = parseInt(editFormData.maximumStock);\n    const unitCost = parseFloat(editFormData.unitCost);\n\n    if (isNaN(__currentStock) || isNaN(__minimumStock) || isNaN(__maximumStock) || isNaN(__unitCost)) {\n      Alert.alert('Error', 'Please enter valid numbers for stock and cost fields.');\n      return;\n    }\n\n    if (minimumStock >= maximumStock) {\n      Alert.alert('Error', 'Maximum stock must be greater than minimum stock.');\n      return;\n    }\n\n    if (!editFormData.name.trim() || !editFormData.supplier.trim()) {\n      Alert.alert('Error', 'Please enter valid name and supplier.');\n      return;\n    }\n\n    // Update the inventory item\n    const updatedInventory = inventory.map(item =>\n      item.itemId === selectedItem.itemId\n        ? {\n            ...item,\n            name: editFormData.name.trim(),\n            category: editFormData.category,\n            currentStock,\n            minimumStock,\n            maximumStock,\n            unitCost,\n            supplier: editFormData.supplier.trim(),\n          }\n        : _item,\n    );\n\n    setInventory(__updatedInventory);\n    setShowEditModal(__false);\n    setSelectedItem(__null);\n\n    Alert.alert('Success', 'Inventory item updated successfully!');\n  };\n\n  const handleAddNewItem = () => {\n    // Validate input\n    const currentStock = parseInt(newItemFormData.currentStock);\n    const minimumStock = parseInt(newItemFormData.minimumStock);\n    const maximumStock = parseInt(newItemFormData.maximumStock);\n    const unitCost = parseFloat(newItemFormData.unitCost);\n\n    if (isNaN(__currentStock) || isNaN(__minimumStock) || isNaN(__maximumStock) || isNaN(__unitCost)) {\n      Alert.alert('Error', 'Please enter valid numbers for stock and cost fields.');\n      return;\n    }\n\n    if (minimumStock >= maximumStock) {\n      Alert.alert('Error', 'Maximum stock must be greater than minimum stock.');\n      return;\n    }\n\n    if (!newItemFormData.name.trim() || !newItemFormData.supplier.trim()) {\n      Alert.alert('Error', 'Please enter valid name and supplier.');\n      return;\n    }\n\n    // Check if item already exists\n    const itemExists = inventory.some(\n      item => item.name.toLowerCase() === newItemFormData.name.trim().toLowerCase(),\n    );\n    if (__itemExists) {\n      Alert.alert('Error', 'An item with this name already exists');\n      return;\n    }\n\n    // Create new inventory item\n    const newItem: InventoryData = {\n      itemId: Date.now(),\n      name: newItemFormData.name.trim(),\n      category: newItemFormData.category,\n      currentStock,\n      minimumStock,\n      maximumStock,\n      unitCost,\n      supplier: newItemFormData.supplier.trim(),\n      lastRestocked: new Date(),\n      turnoverRate: 0, // Initial value\n    };\n\n    // Add to inventory list\n    setInventory([...inventory, newItem]);\n\n    // Reset form\n    setNewItemFormData({\n      name: '',\n      category: 'Vegetables',\n      currentStock: '0',\n      minimumStock: '5',\n      maximumStock: '50',\n      unitCost: '0.00',\n      supplier: '',\n    });\n\n    // Close modal\n    setShowAddItemModal(__false);\n\n    // Show success message\n    Alert.alert('Success', `${newItem.name} has been added to your inventory!`);\n  };\n\n  const handleCancelAddItem = () => {\n    setNewItemFormData({\n      name: '',\n      category: 'Vegetables',\n      currentStock: '0',\n      minimumStock: '5',\n      maximumStock: '50',\n      unitCost: '0.00',\n      supplier: '',\n    });\n    setShowAddItemModal(__false);\n  };\n\n  const renderInventoryItem = ({ item }: { item: InventoryData }) => {\n    const stockStatus = getStockStatus(__item);\n    const stockPercentage = getStockPercentage(__item);\n\n    return (\n      <TouchableOpacity\n        style={styles.inventoryCard}\n        onPress={() => setSelectedItem(__item)}\n        activeOpacity={0.7}>\n        <View style={styles.itemHeader}>\n          <View style={styles.itemInfo}>\n            <Text style={styles.itemName}>{item.name}</Text>\n            <Text style={styles.itemCategory}>{item.category}</Text>\n            <Text style={styles.itemSupplier}>by {item.supplier}</Text>\n          </View>\n          <View style={styles.itemActions}>\n            <TouchableOpacity style={styles.restockButton} onPress={() => handleRestock(__item)}>\n              <Icon name=\"add\" size={20} color={Colors.primary} />\n            </TouchableOpacity>\n          </View>\n        </View>\n\n        <View style={styles.stockInfo}>\n          <View style={styles.stockLevel}>\n            <View style={styles.stockBar}>\n              <View\n                style={[\n                  styles.stockProgress,\n                  {\n                    width: `${stockPercentage}%`,\n                    backgroundColor: stockStatus.color,\n                  },\n                ]}\n              />\n            </View>\n            <Text style={styles.stockText}>\n              {item.currentStock} / {item.maximumStock} units\n            </Text>\n          </View>\n          <View style={[styles.statusBadge, { backgroundColor: `${stockStatus.color}20` }]}>\n            <Text style={[styles.statusText, { color: stockStatus.color }]}>\n              {stockStatus.status}\n            </Text>\n          </View>\n        </View>\n\n        <View style={styles.itemMetrics}>\n          <View style={styles.metric}>\n            <Icon name=\"attach-money\" size={16} color={Colors.darkGray} />\n            <Text style={styles.metricText}>\n              £{item.unitCost ? item.unitCost.toFixed(2) : '0.00'}\n            </Text>\n          </View>\n          <View style={styles.metric}>\n            <Icon name=\"trending-up\" size={16} color={Colors.darkGray} />\n            <Text style={styles.metricText}>{item.turnoverRate}x/week</Text>\n          </View>\n          <View style={styles.metric}>\n            <Icon name=\"schedule\" size={16} color={Colors.darkGray} />\n            <Text style={styles.metricText}>{formatLastRestocked(item.lastRestocked)}</Text>\n          </View>\n        </View>\n      </TouchableOpacity>\n    );\n  };\n\n  const categories = ['Vegetables', 'Meat', 'Dairy', 'Pantry', 'Spices', 'Beverages'];\n  const stats = {\n    total: inventory.length,\n    lowStock: inventory.filter(item => item.currentStock <= item.minimumStock).length,\n    outOfStock: inventory.filter(item => item.currentStock === 0).length,\n    totalValue:\n      inventory.length > 0\n        ? inventory.reduce((__sum, _item) => sum + item.currentStock * (item.unitCost || 0), 0)\n        : 0,\n  };\n\n  if (!ENV.FEATURE_INVENTORY) {\n    return <ComingSoon />;\n  }\n\n  if (__isLoading) {\n    return <LoadingView message=\"Loading Inventory...\" />;\n  }\n\n  const renderEmptyListComponent = () => {\n    if (__error) {\n      return (\n        <View style={styles.emptyState}>\n          <Icon name=\"error-outline\" size={64} color={Colors.danger} />\n          <Text style={styles.emptyStateText}>Error Loading Inventory</Text>\n          <Text style={styles.emptyStateSubtext}>{error}</Text>\n          <TouchableOpacity onPress={loadInventory} style={styles.retryButton}>\n            <Text style={styles.retryButtonText}>Try Again</Text>\n          </TouchableOpacity>\n        </View>\n      );\n    }\n    return (\n      <View style={styles.emptyState}>\n        <Icon name=\"inventory\" size={64} color={Colors.lightGray} />\n        <Text style={styles.emptyStateText}>No items found</Text>\n        <Text style={styles.emptyStateSubtext}>\n          {searchQuery\n            ? 'Try adjusting your search'\n            : 'Add your first inventory item or pull to refresh'}\n        </Text>\n      </View>\n    );\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <StatusBar backgroundColor={Colors.primary} barStyle=\"light-content\" />\n\n      {/* Header */}\n      <View style={styles.header}>\n        <TouchableOpacity\n          style={styles.backButton}\n          onPress={() => navigation.goBack()}\n          activeOpacity={0.7}>\n          <Icon name=\"arrow-back\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n\n        <View style={styles.headerCenter}>\n          <Text style={styles.headerTitle}>Inventory</Text>\n          <Text style={styles.headerSubtitle}>{filteredInventory.length} items</Text>\n        </View>\n\n        <View style={styles.headerActions}>\n          <TouchableOpacity\n            style={styles.scanButton}\n            onPress={handleQRScan}\n            accessibilityLabel=\"Scan Receipt or Barcode\">\n            <Icon name=\"camera\" size={24} color={Colors.white} />\n          </TouchableOpacity>\n\n          <TouchableOpacity\n            style={styles.addButton}\n            onPress={() => setShowAddItemModal(__true)}\n            accessibilityLabel=\"Add New Inventory Item\">\n            <Icon name=\"add\" size={24} color={Colors.white} />\n          </TouchableOpacity>\n        </View>\n      </View>\n\n      {/* Stats Bar */}\n      <View style={styles.statsBar}>\n        <View style={styles.statCard}>\n          <Text style={styles.statValue}>{stats.total}</Text>\n          <Text style={styles.statLabel}>Total Items</Text>\n        </View>\n        <View style={styles.statCard}>\n          <Text style={[styles.statValue, { color: Colors.warning }]}>{stats.lowStock}</Text>\n          <Text style={styles.statLabel}>Low Stock</Text>\n        </View>\n        <View style={styles.statCard}>\n          <Text style={[styles.statValue, { color: Colors.danger }]}>{stats.outOfStock}</Text>\n          <Text style={styles.statLabel}>Out of Stock</Text>\n        </View>\n        <View style={styles.statCard}>\n          <Text style={[styles.statValue, { color: Colors.secondary }]}>\n            £{stats.totalValue.toFixed(0)}\n          </Text>\n          <Text style={styles.statLabel}>Total Value</Text>\n        </View>\n      </View>\n\n      {/* Search and Filters */}\n      <View style={styles.searchSection}>\n        <View style={styles.searchContainer}>\n          <Icon name=\"search\" size={20} color={Colors.darkGray} />\n          <TextInput\n            style={styles.searchInput}\n            placeholder=\"Search inventory...\"\n            value={searchQuery}\n            onChangeText={setSearchQuery}\n            placeholderTextColor={Colors.darkGray}\n          />\n        </View>\n\n        <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.filterSection}>\n          <View style={styles.filterGroup}>\n            <Text style={styles.filterGroupTitle}>Category:</Text>\n            {['all', ...categories].map(category => (\n              <TouchableOpacity\n                key={category}\n                style={[\n                  styles.filterButton,\n                  selectedCategory === category && styles.filterButtonActive,\n                ]}\n                onPress={() => setSelectedCategory(__category)}>\n                <Text\n                  style={[\n                    styles.filterButtonText,\n                    selectedCategory === category && styles.filterButtonTextActive,\n                  ]}>\n                  {category === 'all' ? 'All' : category}\n                </Text>\n              </TouchableOpacity>\n            ))}\n          </View>\n        </ScrollView>\n\n        <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.filterSection}>\n          <View style={styles.filterGroup}>\n            <Text style={styles.filterGroupTitle}>Status:</Text>\n            {[\n              { key: 'all', label: 'All' },\n              { key: 'low', label: 'Low Stock' },\n              { key: 'out', label: 'Out of Stock' },\n              { key: 'optimal', label: 'In Stock' },\n            ].map(status => (\n              <TouchableOpacity\n                key={status.key}\n                style={[\n                  styles.filterButton,\n                  selectedStatus === status.key && styles.filterButtonActive,\n                ]}\n                onPress={() => setSelectedStatus(status.key)}>\n                <Text\n                  style={[\n                    styles.filterButtonText,\n                    selectedStatus === status.key && styles.filterButtonTextActive,\n                  ]}>\n                  {status.label}\n                </Text>\n              </TouchableOpacity>\n            ))}\n          </View>\n        </ScrollView>\n      </View>\n\n      {/* Inventory List */}\n      <FlatList\n        data={filteredInventory}\n        renderItem={renderInventoryItem}\n        keyExtractor={item => String(item?.itemId ?? 'unknown')}\n        contentContainerStyle={styles.inventoryList}\n        showsVerticalScrollIndicator={false}\n        ListEmptyComponent={renderEmptyListComponent}\n        onRefresh={loadInventory} // Added\n        refreshing={isLoading} // Added\n      />\n\n      {/* Item Detail Modal */}\n      <Modal\n        visible={!!selectedItem && !showRestockModal}\n        animationType=\"slide\"\n        transparent={true}\n        onRequestClose={() => setSelectedItem(__null)}>\n        <View style={styles.modalOverlay}>\n          <View style={styles.itemModal}>\n            <View style={styles.modalHeader}>\n              <Text style={styles.modalTitle}>Item Details</Text>\n              <TouchableOpacity onPress={() => setSelectedItem(__null)}>\n                <Icon name=\"close\" size={24} color={Colors.text} />\n              </TouchableOpacity>\n            </View>\n\n            {selectedItem && (\n              <ScrollView style={styles.modalContent}>\n                <View style={styles.itemProfile}>\n                  <Text style={styles.profileItemName}>{selectedItem.name}</Text>\n                  <Text style={styles.profileCategory}>{selectedItem.category}</Text>\n                  <View\n                    style={[\n                      styles.profileStatus,\n                      { backgroundColor: `${getStockStatus(__selectedItem).color}20` },\n                    ]}>\n                    <Text\n                      style={[\n                        styles.profileStatusText,\n                        { color: getStockStatus(__selectedItem).color },\n                      ]}>\n                      {getStockStatus(__selectedItem).status}\n                    </Text>\n                  </View>\n                </View>\n\n                <View style={styles.stockDetails}>\n                  <Text style={styles.sectionTitle}>Stock Levels</Text>\n                  <View style={styles.stockGrid}>\n                    <View style={styles.stockCard}>\n                      <Text style={styles.stockCardValue}>{selectedItem.currentStock}</Text>\n                      <Text style={styles.stockCardLabel}>Current Stock</Text>\n                    </View>\n                    <View style={styles.stockCard}>\n                      <Text style={styles.stockCardValue}>{selectedItem.minimumStock}</Text>\n                      <Text style={styles.stockCardLabel}>Minimum</Text>\n                    </View>\n                    <View style={styles.stockCard}>\n                      <Text style={styles.stockCardValue}>{selectedItem.maximumStock}</Text>\n                      <Text style={styles.stockCardLabel}>Maximum</Text>\n                    </View>\n                    <View style={styles.stockCard}>\n                      <Text style={styles.stockCardValue}>{selectedItem.turnoverRate}</Text>\n                      <Text style={styles.stockCardLabel}>Turnover/Week</Text>\n                    </View>\n                  </View>\n                </View>\n\n                <View style={styles.supplierDetails}>\n                  <Text style={styles.sectionTitle}>Supplier Information</Text>\n                  <View style={styles.detailRow}>\n                    <Icon name=\"business\" size={20} color={Colors.darkGray} />\n                    <Text style={styles.detailText}>{selectedItem.supplier}</Text>\n                  </View>\n                  <View style={styles.detailRow}>\n                    <Icon name=\"attach-money\" size={20} color={Colors.darkGray} />\n                    <Text style={styles.detailText}>\n                      £{selectedItem.unitCost.toFixed(2)} per unit\n                    </Text>\n                  </View>\n                  <View style={styles.detailRow}>\n                    <Icon name=\"schedule\" size={20} color={Colors.darkGray} />\n                    <Text style={styles.detailText}>\n                      Last restocked {formatLastRestocked(selectedItem.lastRestocked)}\n                    </Text>\n                  </View>\n                </View>\n\n                <View style={styles.actionButtons}>\n                  <TouchableOpacity\n                    style={[styles.actionButton, styles.restockActionButton]}\n                    onPress={() => handleRestock(__selectedItem)}>\n                    <Icon name=\"add\" size={20} color={Colors.white} />\n                    <Text style={styles.actionButtonText}>Restock</Text>\n                  </TouchableOpacity>\n                  <TouchableOpacity\n                    style={[styles.actionButton, styles.editActionButton]}\n                    onPress={() => handleEditItem(__selectedItem)}>\n                    <Icon name=\"edit\" size={20} color={Colors.white} />\n                    <Text style={styles.actionButtonText}>Edit</Text>\n                  </TouchableOpacity>\n                </View>\n              </ScrollView>\n            )}\n          </View>\n        </View>\n      </Modal>\n\n      {/* Restock Modal */}\n      <Modal\n        visible={showRestockModal}\n        animationType=\"slide\"\n        transparent={true}\n        onRequestClose={() => setShowRestockModal(__false)}>\n        <View style={styles.modalOverlay}>\n          <View style={styles.restockModal}>\n            <View style={styles.modalHeader}>\n              <Text style={styles.modalTitle}>Restock Item</Text>\n              <TouchableOpacity onPress={() => setShowRestockModal(__false)}>\n                <Icon name=\"close\" size={24} color={Colors.text} />\n              </TouchableOpacity>\n            </View>\n\n            {selectedItem && (\n              <View style={styles.restockContent}>\n                <Text style={styles.restockItemName}>{selectedItem.name}</Text>\n                <Text style={styles.restockCurrentStock}>\n                  Current Stock: {selectedItem.currentStock} units\n                </Text>\n\n                <View style={styles.restockInputSection}>\n                  <Text style={styles.inputLabel}>Quantity to Add</Text>\n                  <TextInput\n                    style={styles.quantityInput}\n                    placeholder=\"Enter quantity\"\n                    keyboardType=\"numeric\"\n                    defaultValue={(\n                      selectedItem.maximumStock - selectedItem.currentStock\n                    ).toString()}\n                  />\n                </View>\n\n                <View style={styles.restockSummary}>\n                  <View style={styles.summaryRow}>\n                    <Text style={styles.summaryLabel}>Current Stock:</Text>\n                    <Text style={styles.summaryValue}>{selectedItem.currentStock}</Text>\n                  </View>\n                  <View style={styles.summaryRow}>\n                    <Text style={styles.summaryLabel}>Adding:</Text>\n                    <Text style={styles.summaryValue}>\n                      {selectedItem.maximumStock - selectedItem.currentStock}\n                    </Text>\n                  </View>\n                  <View style={[styles.summaryRow, styles.totalRow]}>\n                    <Text style={styles.summaryLabel}>New Total:</Text>\n                    <Text style={styles.summaryTotal}>{selectedItem.maximumStock}</Text>\n                  </View>\n                </View>\n\n                <TouchableOpacity\n                  style={styles.confirmRestockButton}\n                  onPress={() => {\n                    Alert.alert('Success', 'Item restocked successfully!');\n                    setShowRestockModal(__false);\n                    setSelectedItem(__null);\n                  }}>\n                  <Text style={styles.confirmRestockText}>Confirm Restock</Text>\n                </TouchableOpacity>\n              </View>\n            )}\n          </View>\n        </View>\n      </Modal>\n\n      {/* Edit Item Modal */}\n      <Modal\n        visible={showEditModal}\n        animationType=\"slide\"\n        transparent={true}\n        onRequestClose={() => setShowEditModal(__false)}>\n        <View style={styles.modalOverlay}>\n          <View style={styles.editModal}>\n            <View style={styles.modalHeader}>\n              <Text style={styles.modalTitle}>Edit Inventory Item</Text>\n              <TouchableOpacity onPress={() => setShowEditModal(__false)}>\n                <Icon name=\"close\" size={24} color={Colors.text} />\n              </TouchableOpacity>\n            </View>\n\n            <ScrollView style={styles.editContent} showsVerticalScrollIndicator={false}>\n              <View style={styles.formGroup}>\n                <Text style={styles.formLabel}>Item Name</Text>\n                <TextInput\n                  style={styles.formInput}\n                  value={editFormData.name}\n                  onChangeText={text => setEditFormData({ ...editFormData, name: text })}\n                  placeholder=\"Enter item name\"\n                />\n              </View>\n\n              <View style={styles.formGroup}>\n                <Text style={styles.formLabel}>Category</Text>\n                <View style={styles.categorySelector}>\n                  {['Vegetables', 'Meat', 'Dairy', 'Pantry', 'Spices', 'Beverages'].map(cat => (\n                    <TouchableOpacity\n                      key={cat}\n                      style={[\n                        styles.categoryOption,\n                        editFormData.category === cat && styles.categoryOptionSelected,\n                      ]}\n                      onPress={() => setEditFormData({ ...editFormData, category: cat })}>\n                      <Text\n                        style={[\n                          styles.categoryOptionText,\n                          editFormData.category === cat && styles.categoryOptionTextSelected,\n                        ]}>\n                        {cat}\n                      </Text>\n                    </TouchableOpacity>\n                  ))}\n                </View>\n              </View>\n\n              <View style={styles.formRow}>\n                <View style={[styles.formGroup, styles.halfWidth]}>\n                  <Text style={styles.formLabel}>Current Stock</Text>\n                  <TextInput\n                    style={styles.formInput}\n                    value={editFormData.currentStock}\n                    onChangeText={text => setEditFormData({ ...editFormData, currentStock: text })}\n                    placeholder=\"0\"\n                    keyboardType=\"numeric\"\n                  />\n                </View>\n\n                <View style={[styles.formGroup, styles.halfWidth]}>\n                  <Text style={styles.formLabel}>Unit Cost (£)</Text>\n                  <TextInput\n                    style={styles.formInput}\n                    value={editFormData.unitCost}\n                    onChangeText={text => setEditFormData({ ...editFormData, unitCost: text })}\n                    placeholder=\"0.00\"\n                    keyboardType=\"decimal-pad\"\n                  />\n                </View>\n              </View>\n\n              <View style={styles.formRow}>\n                <View style={[styles.formGroup, styles.halfWidth]}>\n                  <Text style={styles.formLabel}>Minimum Stock</Text>\n                  <TextInput\n                    style={styles.formInput}\n                    value={editFormData.minimumStock}\n                    onChangeText={text => setEditFormData({ ...editFormData, minimumStock: text })}\n                    placeholder=\"0\"\n                    keyboardType=\"numeric\"\n                  />\n                </View>\n\n                <View style={[styles.formGroup, styles.halfWidth]}>\n                  <Text style={styles.formLabel}>Maximum Stock</Text>\n                  <TextInput\n                    style={styles.formInput}\n                    value={editFormData.maximumStock}\n                    onChangeText={text => setEditFormData({ ...editFormData, maximumStock: text })}\n                    placeholder=\"0\"\n                    keyboardType=\"numeric\"\n                  />\n                </View>\n              </View>\n\n              <View style={styles.formGroup}>\n                <Text style={styles.formLabel}>Supplier</Text>\n                <TextInput\n                  style={styles.formInput}\n                  value={editFormData.supplier}\n                  onChangeText={text => setEditFormData({ ...editFormData, supplier: text })}\n                  placeholder=\"Enter supplier name\"\n                />\n              </View>\n\n              <View style={styles.formActions}>\n                <TouchableOpacity\n                  style={[styles.formButton, styles.cancelButton]}\n                  onPress={() => setShowEditModal(__false)}>\n                  <Text style={styles.cancelButtonText}>Cancel</Text>\n                </TouchableOpacity>\n\n                <TouchableOpacity\n                  style={[styles.formButton, styles.saveButton]}\n                  onPress={handleSaveEdit}>\n                  <Icon name=\"save\" size={20} color={Colors.white} />\n                  <Text style={styles.saveButtonText}>Save Changes</Text>\n                </TouchableOpacity>\n              </View>\n            </ScrollView>\n          </View>\n        </View>\n      </Modal>\n\n      {/* Add New Item Modal */}\n      <Modal\n        visible={showAddItemModal}\n        animationType=\"slide\"\n        transparent={true}\n        onRequestClose={handleCancelAddItem}>\n        <View style={styles.modalOverlay}>\n          <View style={styles.addItemModal}>\n            <View style={styles.modalHeader}>\n              <Text style={styles.modalTitle}>Add New Inventory Item</Text>\n              <TouchableOpacity onPress={handleCancelAddItem}>\n                <Icon name=\"close\" size={24} color={Colors.text} />\n              </TouchableOpacity>\n            </View>\n\n            <ScrollView style={styles.addItemContent} showsVerticalScrollIndicator={false}>\n              <View style={styles.formGroup}>\n                <Text style={styles.formLabel}>Item Name *</Text>\n                <TextInput\n                  style={styles.formInput}\n                  value={newItemFormData.name}\n                  onChangeText={text => setNewItemFormData({ ...newItemFormData, name: text })}\n                  placeholder=\"Enter item name\"\n                  placeholderTextColor={Colors.darkGray}\n                />\n              </View>\n\n              <View style={styles.formGroup}>\n                <Text style={styles.formLabel}>Category</Text>\n                <View style={styles.categorySelector}>\n                  {['Vegetables', 'Meat', 'Dairy', 'Pantry', 'Spices', 'Beverages'].map(cat => (\n                    <TouchableOpacity\n                      key={cat}\n                      style={[\n                        styles.categoryOption,\n                        newItemFormData.category === cat && styles.categoryOptionSelected,\n                      ]}\n                      onPress={() => setNewItemFormData({ ...newItemFormData, category: cat })}>\n                      <Text\n                        style={[\n                          styles.categoryOptionText,\n                          newItemFormData.category === cat && styles.categoryOptionTextSelected,\n                        ]}>\n                        {cat}\n                      </Text>\n                    </TouchableOpacity>\n                  ))}\n                </View>\n              </View>\n\n              <View style={styles.formRow}>\n                <View style={[styles.formGroup, styles.halfWidth]}>\n                  <Text style={styles.formLabel}>Current Stock</Text>\n                  <TextInput\n                    style={styles.formInput}\n                    value={newItemFormData.currentStock}\n                    onChangeText={text =>\n                      setNewItemFormData({ ...newItemFormData, currentStock: text })\n                    }\n                    placeholder=\"0\"\n                    keyboardType=\"numeric\"\n                    placeholderTextColor={Colors.darkGray}\n                  />\n                </View>\n\n                <View style={[styles.formGroup, styles.halfWidth]}>\n                  <Text style={styles.formLabel}>Unit Cost (£)</Text>\n                  <TextInput\n                    style={styles.formInput}\n                    value={newItemFormData.unitCost}\n                    onChangeText={text =>\n                      setNewItemFormData({ ...newItemFormData, unitCost: text })\n                    }\n                    placeholder=\"0.00\"\n                    keyboardType=\"decimal-pad\"\n                    placeholderTextColor={Colors.darkGray}\n                  />\n                </View>\n              </View>\n\n              <View style={styles.formRow}>\n                <View style={[styles.formGroup, styles.halfWidth]}>\n                  <Text style={styles.formLabel}>Minimum Stock</Text>\n                  <TextInput\n                    style={styles.formInput}\n                    value={newItemFormData.minimumStock}\n                    onChangeText={text =>\n                      setNewItemFormData({ ...newItemFormData, minimumStock: text })\n                    }\n                    placeholder=\"5\"\n                    keyboardType=\"numeric\"\n                    placeholderTextColor={Colors.darkGray}\n                  />\n                </View>\n\n                <View style={[styles.formGroup, styles.halfWidth]}>\n                  <Text style={styles.formLabel}>Maximum Stock</Text>\n                  <TextInput\n                    style={styles.formInput}\n                    value={newItemFormData.maximumStock}\n                    onChangeText={text =>\n                      setNewItemFormData({ ...newItemFormData, maximumStock: text })\n                    }\n                    placeholder=\"50\"\n                    keyboardType=\"numeric\"\n                    placeholderTextColor={Colors.darkGray}\n                  />\n                </View>\n              </View>\n\n              <View style={styles.formGroup}>\n                <Text style={styles.formLabel}>Supplier *</Text>\n                <TextInput\n                  style={styles.formInput}\n                  value={newItemFormData.supplier}\n                  onChangeText={text => setNewItemFormData({ ...newItemFormData, supplier: text })}\n                  placeholder=\"Enter supplier name\"\n                  placeholderTextColor={Colors.darkGray}\n                />\n              </View>\n\n              <View style={styles.formActions}>\n                <TouchableOpacity\n                  style={[styles.formButton, styles.cancelButton]}\n                  onPress={handleCancelAddItem}>\n                  <Text style={styles.cancelButtonText}>Cancel</Text>\n                </TouchableOpacity>\n\n                <TouchableOpacity\n                  style={[styles.formButton, styles.saveButton]}\n                  onPress={handleAddNewItem}>\n                  <Icon name=\"add\" size={20} color={Colors.white} />\n                  <Text style={styles.saveButtonText}>Add Item</Text>\n                </TouchableOpacity>\n              </View>\n            </ScrollView>\n          </View>\n        </View>\n      </Modal>\n\n      {/* Receipt Scan Modal */}\n      <ReceiptScanModal\n        visible={showReceiptScanModal}\n        onClose={() => setShowReceiptScanModal(__false)}\n        onSubmit={handleReceiptSubmit}\n      />\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.primary,\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    height: 60,\n  },\n  backButton: {\n    padding: 12,\n    marginRight: 8,\n    borderRadius: 8,\n    backgroundColor: 'rgba(255, 255, 255, 0.1)',\n    minWidth: 44,\n    minHeight: 44,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  headerCenter: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  headerTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.white,\n  },\n  headerSubtitle: {\n    fontSize: 12,\n    color: 'rgba(255, 255, 255, 0.8)',\n  },\n  headerActions: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n  },\n  scanButton: {\n    padding: 8,\n    borderRadius: 8,\n    backgroundColor: 'rgba(255, 255, 255, 0.1)',\n  },\n  addButton: {\n    padding: 8,\n    borderRadius: 8,\n    backgroundColor: 'rgba(255, 255, 255, 0.1)',\n  },\n  statsBar: {\n    flexDirection: 'row',\n    backgroundColor: Colors.white,\n    paddingVertical: 16,\n    paddingHorizontal: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n    gap: 12,\n  },\n  statCard: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  statValue: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.primary,\n  },\n  statLabel: {\n    fontSize: 12,\n    color: Colors.darkGray,\n    marginTop: 4,\n  },\n  searchSection: {\n    backgroundColor: Colors.white,\n    paddingVertical: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  searchContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: Colors.background,\n    borderRadius: 12,\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    marginHorizontal: 16,\n    marginBottom: 12,\n  },\n  searchInput: {\n    flex: 1,\n    fontSize: 16,\n    color: Colors.text,\n    marginLeft: 12,\n  },\n  filterSection: {\n    paddingHorizontal: 16,\n    marginBottom: 8,\n  },\n  filterGroup: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  filterGroupTitle: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: Colors.text,\n    marginRight: 12,\n  },\n  filterButton: {\n    paddingHorizontal: 12,\n    paddingVertical: 6,\n    marginRight: 8,\n    borderRadius: 16,\n    backgroundColor: Colors.background,\n  },\n  filterButtonActive: {\n    backgroundColor: Colors.primary,\n  },\n  filterButtonText: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: Colors.text,\n  },\n  filterButtonTextActive: {\n    color: Colors.white,\n  },\n  inventoryList: {\n    padding: 16,\n  },\n  inventoryCard: {\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 12,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.05,\n    shadowRadius: 4,\n    elevation: 2,\n  },\n  itemHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    marginBottom: 12,\n  },\n  itemInfo: {\n    flex: 1,\n  },\n  itemName: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  itemCategory: {\n    fontSize: 12,\n    color: Colors.secondary,\n    marginBottom: 2,\n  },\n  itemSupplier: {\n    fontSize: 12,\n    color: Colors.darkGray,\n  },\n  itemActions: {\n    flexDirection: 'row',\n  },\n  restockButton: {\n    backgroundColor: Colors.primary + '20',\n    borderRadius: 20,\n    padding: 8,\n  },\n  stockInfo: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 12,\n  },\n  stockLevel: {\n    flex: 1,\n    marginRight: 12,\n  },\n  stockBar: {\n    height: 6,\n    backgroundColor: Colors.lightGray,\n    borderRadius: 3,\n    marginBottom: 4,\n  },\n  stockProgress: {\n    height: '100%',\n    borderRadius: 3,\n  },\n  stockText: {\n    fontSize: 12,\n    color: Colors.darkGray,\n  },\n  statusBadge: {\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 12,\n  },\n  statusText: {\n    fontSize: 10,\n    fontWeight: '600',\n  },\n  itemMetrics: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    paddingTop: 12,\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n  },\n  metric: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  metricText: {\n    fontSize: 12,\n    color: Colors.darkGray,\n    marginLeft: 4,\n  },\n  emptyState: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 100,\n  },\n  emptyStateText: {\n    fontSize: 18,\n    fontWeight: '500',\n    color: Colors.text,\n    marginTop: 16,\n  },\n  emptyStateSubtext: {\n    fontSize: 14,\n    color: Colors.darkGray,\n    marginTop: 8,\n  },\n  modalOverlay: {\n    flex: 1,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  itemModal: {\n    backgroundColor: Colors.white,\n    borderRadius: 16,\n    width: '90%',\n    maxHeight: '80%',\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 10 },\n    shadowOpacity: 0.1,\n    shadowRadius: 20,\n    elevation: 10,\n  },\n  restockModal: {\n    backgroundColor: Colors.white,\n    borderRadius: 16,\n    width: '90%',\n    maxWidth: 400,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 10 },\n    shadowOpacity: 0.1,\n    shadowRadius: 20,\n    elevation: 10,\n  },\n  modalHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: 20,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  modalTitle: {\n    fontSize: 20,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  modalContent: {\n    padding: 20,\n  },\n  itemProfile: {\n    alignItems: 'center',\n    marginBottom: 24,\n  },\n  profileItemName: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: Colors.text,\n    marginBottom: 8,\n  },\n  profileCategory: {\n    fontSize: 16,\n    color: Colors.secondary,\n    marginBottom: 8,\n  },\n  profileStatus: {\n    paddingHorizontal: 12,\n    paddingVertical: 4,\n    borderRadius: 12,\n  },\n  profileStatusText: {\n    fontSize: 14,\n    fontWeight: '600',\n  },\n  stockDetails: {\n    marginBottom: 24,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 12,\n  },\n  stockGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 12,\n  },\n  stockCard: {\n    flex: 1,\n    minWidth: '45%',\n    backgroundColor: Colors.background,\n    borderRadius: 12,\n    padding: 16,\n    alignItems: 'center',\n  },\n  stockCardValue: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.primary,\n  },\n  stockCardLabel: {\n    fontSize: 12,\n    color: Colors.darkGray,\n    marginTop: 4,\n    textAlign: 'center',\n  },\n  supplierDetails: {\n    marginBottom: 24,\n  },\n  detailRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingVertical: 8,\n  },\n  detailText: {\n    fontSize: 14,\n    color: Colors.text,\n    marginLeft: 12,\n  },\n  actionButtons: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  actionButton: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 12,\n    borderRadius: 8,\n  },\n  restockActionButton: {\n    backgroundColor: Colors.success,\n  },\n  editActionButton: {\n    backgroundColor: Colors.secondary,\n  },\n  actionButtonText: {\n    color: Colors.white,\n    fontSize: 14,\n    fontWeight: '600',\n    marginLeft: 8,\n  },\n  restockContent: {\n    padding: 20,\n  },\n  restockItemName: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.text,\n    textAlign: 'center',\n    marginBottom: 8,\n  },\n  restockCurrentStock: {\n    fontSize: 14,\n    color: Colors.darkGray,\n    textAlign: 'center',\n    marginBottom: 24,\n  },\n  restockInputSection: {\n    marginBottom: 24,\n  },\n  inputLabel: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 8,\n  },\n  quantityInput: {\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 8,\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    fontSize: 16,\n    color: Colors.text,\n    textAlign: 'center',\n  },\n  restockSummary: {\n    backgroundColor: Colors.background,\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 24,\n  },\n  summaryRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 8,\n  },\n  totalRow: {\n    marginTop: 8,\n    paddingTop: 12,\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n  },\n  summaryLabel: {\n    fontSize: 14,\n    color: Colors.darkGray,\n  },\n  summaryValue: {\n    fontSize: 14,\n    color: Colors.text,\n  },\n  summaryTotal: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: Colors.primary,\n  },\n  confirmRestockButton: {\n    backgroundColor: Colors.success,\n    borderRadius: 8,\n    paddingVertical: 16,\n    alignItems: 'center',\n  },\n  confirmRestockText: {\n    color: Colors.white,\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  // Edit Modal Styles\n  editModal: {\n    backgroundColor: Colors.white,\n    borderRadius: 16,\n    width: '95%',\n    maxHeight: '90%',\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 10 },\n    shadowOpacity: 0.1,\n    shadowRadius: 20,\n    elevation: 10,\n  },\n  // Add Item Modal Styles\n  addItemModal: {\n    backgroundColor: Colors.white,\n    borderRadius: 16,\n    width: '95%',\n    maxHeight: '90%',\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 10 },\n    shadowOpacity: 0.1,\n    shadowRadius: 20,\n    elevation: 10,\n  },\n  addItemContent: {\n    padding: 20,\n    maxHeight: 600,\n  },\n  editContent: {\n    padding: 20,\n    maxHeight: 600,\n  },\n  formGroup: {\n    marginBottom: 20,\n  },\n  formLabel: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 8,\n  },\n  formInput: {\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 8,\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    fontSize: 16,\n    color: Colors.text,\n    backgroundColor: Colors.white,\n  },\n  formRow: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  halfWidth: {\n    flex: 1,\n  },\n  categorySelector: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 8,\n  },\n  categoryOption: {\n    paddingHorizontal: 12,\n    paddingVertical: 8,\n    borderRadius: 20,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    backgroundColor: Colors.background,\n  },\n  categoryOptionSelected: {\n    backgroundColor: Colors.primary,\n    borderColor: Colors.primary,\n  },\n  categoryOptionText: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.text,\n  },\n  categoryOptionTextSelected: {\n    color: Colors.white,\n  },\n  formActions: {\n    flexDirection: 'row',\n    gap: 12,\n    marginTop: 24,\n  },\n  formButton: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 14,\n    borderRadius: 8,\n  },\n  cancelButton: {\n    backgroundColor: Colors.background,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  saveButton: {\n    backgroundColor: Colors.primary,\n  },\n  cancelButtonText: {\n    color: Colors.text,\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  saveButtonText: {\n    color: Colors.white,\n    fontSize: 16,\n    fontWeight: '600',\n    marginLeft: 8,\n  },\n  // Styles for LoadingView and Error/Retry will be implicitly handled by LoadingView component\n  // but ensure emptyState styles are robust.\n  // Centered style for the LoadingView/ErrorView wrapper if not using Fullscreen component\n  centered: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  // Specific retry button style if not part of a generic ErrorDisplayComponent\n  retryButton: {\n    marginTop: 20,\n    backgroundColor: Colors.primary,\n    paddingVertical: 10,\n    paddingHorizontal: 20,\n    borderRadius: 8,\n  },\n  retryButtonText: {\n    color: Colors.white,\n    fontSize: 16,\n    fontWeight: '600',\n  },\n});\n\nexport default InventoryScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/kitchen/KitchenDisplayScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_sampleOrders' is assigned a value but never used.","line":69,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":69,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_timer' is assigned a value but never used.","line":166,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":166,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_getOrderPriorityColor' is assigned a value but never used.","line":216,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":216,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_allReady' is assigned a value but never used.","line":256,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":256,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_anyInProgress' is assigned a value but never used.","line":259,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":259,"endColumn":31},{"ruleId":"react/no-unstable-nested-components","severity":1,"message":"Do not define components during render. React will see a new component type on every render and destroy the entire subtree’s DOM nodes and state (https://reactjs.org/docs/reconciliation.html#elements-of-different-types). Instead, move this component definition out of the parent component “KitchenDisplayScreen” and pass data as props.","line":309,"column":21,"nodeType":"ArrowFunctionExpression","endLine":405,"endColumn":4}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  ScrollView,\n  FlatList,\n  Alert,\n  Modal,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation } from '@react-navigation/native';\n\n// Clover POS Color Scheme\nconst Colors = {\n  primary: '#00A651',\n  secondary: '#0066CC',\n  success: '#00A651',\n  warning: '#FF6B35',\n  danger: '#E74C3C',\n  background: '#F5F5F5',\n  white: '#FFFFFF',\n  lightGray: '#E5E5E5',\n  mediumGray: '#999999',\n  darkGray: '#666666',\n  text: '#333333',\n  lightText: '#666666',\n  border: '#DDDDDD',\n};\n\ninterface KitchenOrderItem {\n  id: string;\n  name: string;\n  quantity: number;\n  modifiers: string[];\n  specialInstructions?: string;\n  station: 'grill' | 'cold' | 'fryer' | 'prep';\n  estimatedTime: number; // minutes\n  status: 'pending' | 'in_progress' | 'ready' | 'served';\n}\n\ninterface KitchenOrder {\n  id: string;\n  orderNumber: string;\n  orderType: 'dine_in' | 'takeout' | 'pickup' | 'delivery';\n  tableName?: string;\n  customerName?: string;\n  items: KitchenOrderItem[];\n  totalItems: number;\n  orderTime: Date;\n  estimatedCompletionTime: Date;\n  priority: 'normal' | 'urgent' | 'rush';\n  status: 'received' | 'preparing' | 'ready' | 'served' | 'delayed';\n  server?: string;\n  notes?: string;\n}\n\nconst KitchenDisplayScreen: React.FC = () => {\n  const navigation = useNavigation();\n\n  const [orders, setOrders] = useState<KitchenOrder[]>([]);\n  const [selectedStation, setSelectedStation] = useState<string>('all');\n  const [selectedOrder, setSelectedOrder] = useState<KitchenOrder | null>(__null);\n  const [showOrderModal, setShowOrderModal] = useState(__false);\n  const [currentTime, setCurrentTime] = useState(new Date());\n\n  // Sample kitchen orders\n  const _sampleOrders: KitchenOrder[] = [\n    {\n      id: 'order1',\n      orderNumber: '#001',\n      orderType: 'dine_in',\n      tableName: 'Table 5',\n      customerName: 'John D.',\n      items: [\n        {\n          id: 'item1',\n          name: 'Beef Tacos',\n          quantity: 2,\n          modifiers: ['Extra Cheese', 'No Onions'],\n          specialInstructions: 'Make it spicy',\n          station: 'grill',\n          estimatedTime: 8,\n          status: 'in_progress',\n        },\n        {\n          id: 'item2',\n          name: 'Nachos',\n          quantity: 1,\n          modifiers: ['Extra Guacamole'],\n          station: 'prep',\n          estimatedTime: 5,\n          status: 'ready',\n        },\n      ],\n      totalItems: 3,\n      orderTime: new Date(Date.now() - 8 * 60 * 1000), // 8 minutes ago\n      estimatedCompletionTime: new Date(Date.now() + 2 * 60 * 1000), // 2 minutes from now\n      priority: 'normal',\n      status: 'preparing',\n      server: 'Sarah M.',\n    },\n    {\n      id: 'order2',\n      orderNumber: '#002',\n      orderType: 'takeout',\n      customerName: 'Emma Wilson',\n      items: [\n        {\n          id: 'item3',\n          name: 'Quesadillas',\n          quantity: 3,\n          modifiers: ['Chicken', 'Extra Cheese'],\n          station: 'grill',\n          estimatedTime: 10,\n          status: 'pending',\n        },\n        {\n          id: 'item4',\n          name: 'Churros',\n          quantity: 2,\n          modifiers: [],\n          station: 'fryer',\n          estimatedTime: 6,\n          status: 'pending',\n        },\n      ],\n      totalItems: 5,\n      orderTime: new Date(Date.now() - 3 * 60 * 1000), // 3 minutes ago\n      estimatedCompletionTime: new Date(Date.now() + 7 * 60 * 1000), // 7 minutes from now\n      priority: 'normal',\n      status: 'received',\n    },\n    {\n      id: 'order3',\n      orderNumber: '#003',\n      orderType: 'dine_in',\n      tableName: 'Table 12',\n      customerName: 'Mike Johnson',\n      items: [\n        {\n          id: 'item5',\n          name: 'Fish Tacos',\n          quantity: 4,\n          modifiers: ['Light Mayo', 'Extra Lime'],\n          station: 'grill',\n          estimatedTime: 12,\n          status: 'pending',\n        },\n      ],\n      totalItems: 4,\n      orderTime: new Date(Date.now() - 15 * 60 * 1000), // 15 minutes ago - delayed!\n      estimatedCompletionTime: new Date(Date.now() - 3 * 60 * 1000), // Should have been ready 3 minutes ago\n      priority: 'urgent',\n      status: 'delayed',\n      server: 'Tom R.',\n      notes: 'Customer is asking about their order',\n    },\n  ];\n\n  useEffect(() => {\n    setOrders(__sampleOrders);\n\n    // Update current time every minute\n    const _timer = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 60000);\n\n    return () => clearInterval(__timer);\n  }, []);\n\n  const getTimeSinceOrder = (orderTime: _Date) => {\n    const diffMs = currentTime.getTime() - orderTime.getTime();\n    const diffMins = Math.floor(diffMs / 60000);\n\n    if (diffMins < 1) {\n      return 'Just now';\n    }\n    if (diffMins === 1) {\n      return '1 min ago';\n    }\n    return `${diffMins} mins ago`;\n  };\n\n  const getTimeUntilReady = (completionTime: _Date) => {\n    const diffMs = completionTime.getTime() - currentTime.getTime();\n    const diffMins = Math.floor(diffMs / 60000);\n\n    if (diffMins <= 0) {\n      return 'Overdue';\n    }\n    if (diffMins === 1) {\n      return '1 min';\n    }\n    return `${diffMins} mins`;\n  };\n\n  const getOrderStatusColor = (_status: _string) => {\n    switch (__status) {\n      case 'received':\n        return Colors.secondary;\n      case 'preparing':\n        return Colors.warning;\n      case 'ready':\n        return Colors.success;\n      case 'served':\n        return Colors.mediumGray;\n      case 'delayed':\n        return Colors.danger;\n      default:\n        return Colors.lightText;\n    }\n  };\n\n  const _getOrderPriorityColor = (_priority: _string) => {\n    switch (__priority) {\n      case 'urgent':\n        return Colors.danger;\n      case 'rush':\n        return Colors.warning;\n      default:\n        return Colors.primary;\n    }\n  };\n\n  const getItemStatusIcon = (_status: _string) => {\n    switch (__status) {\n      case 'pending':\n        return 'radio-button-unchecked';\n      case 'in_progress':\n        return 'sync';\n      case 'ready':\n        return 'check-circle';\n      case 'served':\n        return 'check-circle-outline';\n      default:\n        return 'help';\n    }\n  };\n\n  const updateItemStatus = (\n    orderId: _string,\n    itemId: _string,\n    newStatus: KitchenOrderItem['status'],\n  ) => {\n    setOrders(prev =>\n      prev.map(order => {\n        if (order.id === orderId) {\n          const updatedItems = order.items.map(item =>\n            item.id === itemId ? { ...item, status: newStatus } : _item,\n          );\n\n          // Update order status based on item statuses\n          let orderStatus: KitchenOrder['status'] = 'received';\n          const _allReady = updatedItems.every(\n            item => item.status === 'ready' || item.status === 'served',\n          );\n          const _anyInProgress = updatedItems.some(item => item.status === 'in_progress');\n\n          if (__allReady) {\n            orderStatus = 'ready';\n          } else if (__anyInProgress) {\n            orderStatus = 'preparing';\n          }\n\n          return { ...order, items: _updatedItems, status: orderStatus };\n        }\n        return order;\n      }),\n    );\n  };\n\n  const markOrderComplete = (orderId: _string) => {\n    setOrders(prev =>\n      prev.map(order =>\n        order.id === orderId\n          ? {\n              ...order,\n              status: 'served',\n              items: order.items.map(item => ({ ...item, status: 'served' })),\n            }\n          : _order,\n      ),\n    );\n\n    Alert.alert('Order Complete', 'Order has been marked as served!');\n  };\n\n  const stations = [\n    { id: 'all', name: 'All Stations', icon: 'restaurant' },\n    { id: 'grill', name: 'Grill', icon: 'outdoor-grill' },\n    { id: 'cold', name: 'Cold', icon: 'ac-unit' },\n    { id: 'fryer', name: 'Fryer', icon: 'local-fire-department' },\n    { id: 'prep', name: 'Prep', icon: 'food-bank' },\n  ];\n\n  const getFilteredOrders = () => {\n    if (selectedStation === 'all') {\n      return orders.filter(order => order.status !== 'served');\n    }\n\n    return orders.filter(\n      order =>\n        order.status !== 'served' && order.items.some(item => item.station === selectedStation),\n    );\n  };\n\n  const OrderCard = ({ order }: { order: KitchenOrder }) => {\n    const isOverdue = order.estimatedCompletionTime.getTime() < currentTime.getTime();\n\n    return (\n      <TouchableOpacity\n        style={[\n          styles.orderCard,\n          { borderLeftColor: getOrderStatusColor(order.status) },\n          order.priority === 'urgent' && styles.urgentOrder,\n        ]}\n        onPress={() => {\n          setSelectedOrder(__order);\n          setShowOrderModal(__true);\n        }}>\n        <View style={styles.orderHeader}>\n          <View style={styles.orderInfo}>\n            <Text style={styles.orderNumber}>{order.orderNumber}</Text>\n            <Text style={styles.orderType}>\n              {order.orderType.replace('_', ' ').toUpperCase()}\n              {order.tableName && ` • ${order.tableName}`}\n            </Text>\n          </View>\n\n          <View style={styles.orderTiming}>\n            <Text style={[styles.timeText, isOverdue && styles.overdueText]}>\n              {isOverdue ? 'OVERDUE' : getTimeUntilReady(order.estimatedCompletionTime)}\n            </Text>\n            <Text style={styles.orderAge}>{getTimeSinceOrder(order.orderTime)}</Text>\n          </View>\n        </View>\n\n        <View style={styles.orderContent}>\n          {order.customerName && (\n            <Text style={styles.customerName}>Customer: {order.customerName}</Text>\n          )}\n\n          <View style={styles.itemsList}>\n            {order.items.slice(0, 3).map(item => (\n              <View key={item.id} style={styles.itemRow}>\n                <TouchableOpacity\n                  onPress={() => {\n                    const statuses: KitchenOrderItem['status'][] = [\n                      'pending',\n                      'in_progress',\n                      'ready',\n                    ];\n                    const currentIndex = statuses.indexOf(item.status);\n                    const _nextStatus = statuses[(currentIndex + 1) % statuses.length];\n                    updateItemStatus(order.id, item.id, _nextStatus);\n                  }}>\n                  <Icon\n                    name={getItemStatusIcon(item.status)}\n                    size={20}\n                    color={getOrderStatusColor(item.status)}\n                  />\n                </TouchableOpacity>\n\n                <View style={styles.itemDetails}>\n                  <Text style={styles.itemName}>\n                    {item.quantity}x {item.name}\n                  </Text>\n                  {item.modifiers.length > 0 && (\n                    <Text style={styles.itemModifiers}>{item.modifiers.join(', ')}</Text>\n                  )}\n                </View>\n\n                <View style={styles.itemStation}>\n                  <Text style={styles.stationText}>{item.station.toUpperCase()}</Text>\n                </View>\n              </View>\n            ))}\n\n            {order.items.length > 3 && (\n              <Text style={styles.moreItems}>+{order.items.length - 3} more items</Text>\n            )}\n          </View>\n        </View>\n\n        <View style={styles.orderFooter}>\n          <View style={styles.orderMeta}>\n            {order.server && <Text style={styles.serverText}>Server: {order.server}</Text>}\n            <Text style={styles.totalItems}>{order.totalItems} items total</Text>\n          </View>\n\n          <TouchableOpacity\n            style={[styles.completeButton, { backgroundColor: getOrderStatusColor(order.status) }]}\n            onPress={() => markOrderComplete(order.id)}\n            disabled={order.status !== 'ready'}>\n            <Icon name=\"check\" size={20} color={Colors.white} />\n            <Text style={styles.completeButtonText}>\n              {order.status === 'ready' ? 'Serve' : order.status.toUpperCase()}\n            </Text>\n          </TouchableOpacity>\n        </View>\n      </TouchableOpacity>\n    );\n  };\n\n  return (\n    <View style={styles.container}>\n      {/* Header */}\n      <View style={styles.header}>\n        <TouchableOpacity onPress={() => navigation.goBack()} style={styles.backButton}>\n          <Icon name=\"arrow-back\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n        <Text style={styles.headerTitle}>Kitchen Display</Text>\n        <View style={styles.headerRight}>\n          <Text style={styles.currentTime}>\n            {currentTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n          </Text>\n        </View>\n      </View>\n\n      {/* Station Filter */}\n      <View style={styles.stationFilter}>\n        <ScrollView horizontal showsHorizontalScrollIndicator={false}>\n          {stations.map(station => (\n            <TouchableOpacity\n              key={station.id}\n              style={[\n                styles.stationButton,\n                selectedStation === station.id && styles.stationButtonActive,\n              ]}\n              onPress={() => setSelectedStation(station.id)}>\n              <Icon\n                name={station.icon}\n                size={20}\n                color={selectedStation === station.id ? Colors.white : Colors.primary}\n              />\n              <Text\n                style={[\n                  styles.stationButtonText,\n                  selectedStation === station.id && styles.stationButtonTextActive,\n                ]}>\n                {station.name}\n              </Text>\n            </TouchableOpacity>\n          ))}\n        </ScrollView>\n      </View>\n\n      {/* Orders List */}\n      <FlatList\n        data={getFilteredOrders()}\n        renderItem={({ item }) => <OrderCard order={item} />}\n        keyExtractor={item => item.id}\n        contentContainerStyle={styles.ordersList}\n        showsVerticalScrollIndicator={false}\n        ListEmptyComponent={\n          <View style={styles.emptyState}>\n            <Icon name=\"restaurant\" size={64} color={Colors.lightGray} />\n            <Text style={styles.emptyStateText}>No orders for this station</Text>\n            <Text style={styles.emptyStateSubtext}>New orders will appear here</Text>\n          </View>\n        }\n      />\n\n      {/* Order Detail Modal */}\n      <Modal\n        visible={showOrderModal}\n        transparent={true}\n        animationType=\"slide\"\n        onRequestClose={() => setShowOrderModal(__false)}>\n        <View style={styles.modalOverlay}>\n          <View style={styles.modalContent}>\n            {selectedOrder && (\n              <>\n                <View style={styles.modalHeader}>\n                  <Text style={styles.modalTitle}>Order {selectedOrder.orderNumber} Details</Text>\n                  <TouchableOpacity onPress={() => setShowOrderModal(__false)}>\n                    <Icon name=\"close\" size={24} color={Colors.text} />\n                  </TouchableOpacity>\n                </View>\n\n                <ScrollView style={styles.modalBody}>\n                  <View style={styles.orderDetailsSection}>\n                    <Text style={styles.sectionTitle}>Order Information</Text>\n                    <Text style={styles.detailText}>\n                      Type: {selectedOrder.orderType.replace('_', ' ')}\n                    </Text>\n                    {selectedOrder.tableName && (\n                      <Text style={styles.detailText}>Table: {selectedOrder.tableName}</Text>\n                    )}\n                    {selectedOrder.customerName && (\n                      <Text style={styles.detailText}>Customer: {selectedOrder.customerName}</Text>\n                    )}\n                    {selectedOrder.server && (\n                      <Text style={styles.detailText}>Server: {selectedOrder.server}</Text>\n                    )}\n                    <Text style={styles.detailText}>\n                      Order Time: {selectedOrder.orderTime.toLocaleTimeString()}\n                    </Text>\n                  </View>\n\n                  <View style={styles.orderDetailsSection}>\n                    <Text style={styles.sectionTitle}>Items</Text>\n                    {selectedOrder.items.map(item => (\n                      <View key={item.id} style={styles.modalItemRow}>\n                        <TouchableOpacity\n                          style={styles.modalItemStatus}\n                          onPress={() => {\n                            const statuses: KitchenOrderItem['status'][] = [\n                              'pending',\n                              'in_progress',\n                              'ready',\n                            ];\n                            const currentIndex = statuses.indexOf(item.status);\n                            const _nextStatus = statuses[(currentIndex + 1) % statuses.length];\n                            updateItemStatus(selectedOrder.id, item.id, _nextStatus);\n                          }}>\n                          <Icon\n                            name={getItemStatusIcon(item.status)}\n                            size={24}\n                            color={getOrderStatusColor(item.status)}\n                          />\n                        </TouchableOpacity>\n\n                        <View style={styles.modalItemDetails}>\n                          <Text style={styles.modalItemName}>\n                            {item.quantity}x {item.name}\n                          </Text>\n                          {item.modifiers.length > 0 && (\n                            <Text style={styles.modalItemModifiers}>\n                              Modifiers: {item.modifiers.join(', ')}\n                            </Text>\n                          )}\n                          {item.specialInstructions && (\n                            <Text style={styles.modalItemInstructions}>\n                              Instructions: {item.specialInstructions}\n                            </Text>\n                          )}\n                          <Text style={styles.modalItemStation}>\n                            Station: {item.station.toUpperCase()} • Est. {item.estimatedTime} mins\n                          </Text>\n                        </View>\n                      </View>\n                    ))}\n                  </View>\n\n                  {selectedOrder.notes && (\n                    <View style={styles.orderDetailsSection}>\n                      <Text style={styles.sectionTitle}>Notes</Text>\n                      <Text style={styles.notesText}>{selectedOrder.notes}</Text>\n                    </View>\n                  )}\n                </ScrollView>\n\n                <View style={styles.modalActions}>\n                  <TouchableOpacity\n                    style={[styles.modalButton, styles.completeOrderButton]}\n                    onPress={() => {\n                      markOrderComplete(selectedOrder.id);\n                      setShowOrderModal(__false);\n                    }}\n                    disabled={selectedOrder.status !== 'ready'}>\n                    <Icon name=\"check\" size={20} color={Colors.white} />\n                    <Text style={styles.modalButtonText}>Mark as Served</Text>\n                  </TouchableOpacity>\n                </View>\n              </>\n            )}\n          </View>\n        </View>\n      </Modal>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.primary,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    paddingTop: 48,\n  },\n  backButton: {\n    padding: 8,\n  },\n  headerTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.white,\n  },\n  headerRight: {\n    alignItems: 'flex-end',\n  },\n  currentTime: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.white,\n  },\n  stationFilter: {\n    backgroundColor: Colors.white,\n    paddingVertical: 12,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  stationButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    marginHorizontal: 4,\n    borderRadius: 20,\n    borderWidth: 1,\n    borderColor: Colors.primary,\n    backgroundColor: Colors.white,\n  },\n  stationButtonActive: {\n    backgroundColor: Colors.primary,\n  },\n  stationButtonText: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.primary,\n    marginLeft: 4,\n  },\n  stationButtonTextActive: {\n    color: Colors.white,\n  },\n  ordersList: {\n    padding: 16,\n  },\n  orderCard: {\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 12,\n    borderLeftWidth: 4,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  urgentOrder: {\n    borderWidth: 2,\n    borderColor: Colors.danger,\n  },\n  orderHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    marginBottom: 12,\n  },\n  orderInfo: {\n    flex: 1,\n  },\n  orderNumber: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  orderType: {\n    fontSize: 14,\n    color: Colors.lightText,\n    fontWeight: '500',\n  },\n  orderTiming: {\n    alignItems: 'flex-end',\n  },\n  timeText: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: Colors.primary,\n  },\n  overdueText: {\n    color: Colors.danger,\n  },\n  orderAge: {\n    fontSize: 12,\n    color: Colors.lightText,\n    marginTop: 2,\n  },\n  orderContent: {\n    marginBottom: 12,\n  },\n  customerName: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.text,\n    marginBottom: 8,\n  },\n  itemsList: {\n    gap: 8,\n  },\n  itemRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingVertical: 4,\n  },\n  itemDetails: {\n    flex: 1,\n    marginLeft: 12,\n  },\n  itemName: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.text,\n  },\n  itemModifiers: {\n    fontSize: 12,\n    color: Colors.lightText,\n    marginTop: 2,\n  },\n  itemStation: {\n    backgroundColor: Colors.background,\n    paddingHorizontal: 8,\n    paddingVertical: 2,\n    borderRadius: 4,\n  },\n  stationText: {\n    fontSize: 10,\n    fontWeight: '600',\n    color: Colors.darkGray,\n  },\n  moreItems: {\n    fontSize: 12,\n    color: Colors.secondary,\n    fontStyle: 'italic',\n    marginTop: 4,\n  },\n  orderFooter: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingTop: 12,\n    borderTopWidth: 1,\n    borderTopColor: Colors.lightGray,\n  },\n  orderMeta: {\n    flex: 1,\n  },\n  serverText: {\n    fontSize: 12,\n    color: Colors.lightText,\n    marginBottom: 2,\n  },\n  totalItems: {\n    fontSize: 12,\n    color: Colors.darkGray,\n    fontWeight: '500',\n  },\n  completeButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    borderRadius: 6,\n    gap: 4,\n  },\n  completeButtonText: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: Colors.white,\n  },\n  emptyState: {\n    alignItems: 'center',\n    paddingVertical: 48,\n  },\n  emptyStateText: {\n    fontSize: 18,\n    fontWeight: '500',\n    color: Colors.lightText,\n    marginTop: 16,\n    marginBottom: 8,\n  },\n  emptyStateSubtext: {\n    fontSize: 14,\n    color: Colors.mediumGray,\n  },\n  modalOverlay: {\n    flex: 1,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  modalContent: {\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    width: '90%',\n    maxHeight: '80%',\n  },\n  modalHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  modalTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.text,\n  },\n  modalBody: {\n    padding: 16,\n    maxHeight: 400,\n  },\n  orderDetailsSection: {\n    marginBottom: 20,\n  },\n  sectionTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 8,\n  },\n  detailText: {\n    fontSize: 14,\n    color: Colors.darkGray,\n    marginBottom: 4,\n  },\n  modalItemRow: {\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    paddingVertical: 8,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.lightGray,\n  },\n  modalItemStatus: {\n    padding: 4,\n  },\n  modalItemDetails: {\n    flex: 1,\n    marginLeft: 12,\n  },\n  modalItemName: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  modalItemModifiers: {\n    fontSize: 14,\n    color: Colors.lightText,\n    marginBottom: 2,\n  },\n  modalItemInstructions: {\n    fontSize: 14,\n    color: Colors.warning,\n    fontStyle: 'italic',\n    marginBottom: 2,\n  },\n  modalItemStation: {\n    fontSize: 12,\n    color: Colors.mediumGray,\n  },\n  notesText: {\n    fontSize: 14,\n    color: Colors.text,\n    fontStyle: 'italic',\n    backgroundColor: Colors.background,\n    padding: 12,\n    borderRadius: 8,\n  },\n  modalActions: {\n    padding: 16,\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n  },\n  modalButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 12,\n    borderRadius: 8,\n    gap: 8,\n  },\n  completeOrderButton: {\n    backgroundColor: Colors.success,\n  },\n  modalButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.white,\n  },\n});\n\nexport default KitchenDisplayScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/main/DashboardScreen.tsx","messages":[{"ruleId":"react/no-unstable-nested-components","severity":1,"message":"Do not define components during render. React will see a new component type on every render and destroy the entire subtree’s DOM nodes and state (https://reactjs.org/docs/reconciliation.html#elements-of-different-types). Instead, move this component definition out of the parent component “DashboardScreen” and pass data as props.","line":107,"column":43,"nodeType":"ArrowFunctionExpression","endLine":153,"endColumn":4},{"ruleId":"react/no-unstable-nested-components","severity":1,"message":"Do not define components during render. React will see a new component type on every render and destroy the entire subtree’s DOM nodes and state (https://reactjs.org/docs/reconciliation.html#elements-of-different-types). Instead, move this component definition out of the parent component “DashboardScreen” and pass data as props.","line":155,"column":20,"nodeType":"ArrowFunctionExpression","endLine":190,"endColumn":4},{"ruleId":"react/no-unstable-nested-components","severity":1,"message":"Do not define components during render. React will see a new component type on every render and destroy the entire subtree’s DOM nodes and state (https://reactjs.org/docs/reconciliation.html#elements-of-different-types). Instead, move this component definition out of the parent component “DashboardScreen” and pass data as props.","line":192,"column":21,"nodeType":"ArrowFunctionExpression","endLine":226,"endColumn":4},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_createStyles' is assigned a value but never used.","line":323,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":323,"endColumn":20},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.container","line":325,"column":5,"nodeType":"Property","endLine":328,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.header","line":329,"column":5,"nodeType":"Property","endLine":337,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.backButton","line":338,"column":5,"nodeType":"Property","endLine":340,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.headerTitle","line":341,"column":5,"nodeType":"Property","endLine":345,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.refreshButton","line":346,"column":5,"nodeType":"Property","endLine":348,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.content","line":349,"column":5,"nodeType":"Property","endLine":352,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.section","line":353,"column":5,"nodeType":"Property","endLine":355,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.sectionTitle","line":356,"column":5,"nodeType":"Property","endLine":361,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.kpiGrid","line":362,"column":5,"nodeType":"Property","endLine":366,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.kpiCard","line":367,"column":5,"nodeType":"Property","endLine":378,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.kpiHeader","line":379,"column":5,"nodeType":"Property","endLine":383,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.kpiIcon","line":384,"column":5,"nodeType":"Property","endLine":391,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.kpiContent","line":392,"column":5,"nodeType":"Property","endLine":394,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.kpiTitle","line":395,"column":5,"nodeType":"Property","endLine":399,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.kpiValue","line":400,"column":5,"nodeType":"Property","endLine":404,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.kpiChange","line":405,"column":5,"nodeType":"Property","endLine":408,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.kpiChangeText","line":409,"column":5,"nodeType":"Property","endLine":413,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.kpiChangeLabel","line":414,"column":5,"nodeType":"Property","endLine":418,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.goalsContainer","line":419,"column":5,"nodeType":"Property","endLine":428,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.goalCard","line":429,"column":5,"nodeType":"Property","endLine":431,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.goalHeader","line":432,"column":5,"nodeType":"Property","endLine":437,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.goalLabel","line":438,"column":5,"nodeType":"Property","endLine":442,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.goalPercentage","line":443,"column":5,"nodeType":"Property","endLine":447,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.goalProgress","line":448,"column":5,"nodeType":"Property","endLine":450,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.goalProgressTrack","line":451,"column":5,"nodeType":"Property","endLine":455,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.goalProgressFill","line":456,"column":5,"nodeType":"Property","endLine":460,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.goalValues","line":461,"column":5,"nodeType":"Property","endLine":464,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.goalCurrent","line":465,"column":5,"nodeType":"Property","endLine":469,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.goalTarget","line":470,"column":5,"nodeType":"Property","endLine":473,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.quickActions","line":474,"column":5,"nodeType":"Property","endLine":478,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.actionButton","line":479,"column":5,"nodeType":"Property","endLine":491,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.actionText","line":492,"column":5,"nodeType":"Property","endLine":498,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.alertsContainer","line":499,"column":5,"nodeType":"Property","endLine":508,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.alertCard","line":509,"column":5,"nodeType":"Property","endLine":515,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.alertIcon","line":516,"column":5,"nodeType":"Property","endLine":523,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.alertContent","line":524,"column":5,"nodeType":"Property","endLine":526,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.alertHeader","line":527,"column":5,"nodeType":"Property","endLine":532,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.alertTitle","line":533,"column":5,"nodeType":"Property","endLine":537,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.alertTime","line":538,"column":5,"nodeType":"Property","endLine":541,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.alertMessage","line":542,"column":5,"nodeType":"Property","endLine":546,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.backendNotice","line":547,"column":5,"nodeType":"Property","endLine":558,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.backendNoticeContent","line":559,"column":5,"nodeType":"Property","endLine":562,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.backendNoticeTitle","line":563,"column":5,"nodeType":"Property","endLine":568,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.backendNoticeText","line":569,"column":5,"nodeType":"Property","endLine":573,"endColumn":6}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":47,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  SafeAreaView,\n  StatusBar,\n  ScrollView,\n  TouchableOpacity,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation } from '@react-navigation/native';\nimport { useRestaurantDisplayName } from '../../hooks/useRestaurantConfig';\nimport { useTheme, useThemedStyles } from '../../design-system/ThemeProvider';\n\ninterface KPICardProps {\n  title: string;\n  value: string;\n  change: string;\n  changeType: 'positive' | 'negative' | 'neutral';\n  icon: string;\n  color: string;\n}\n\ninterface AlertItem {\n  id: string;\n  type: 'warning' | 'info' | 'success';\n  title: string;\n  message: string;\n  time: string;\n}\n\nconst DashboardScreen: React.FC = () => {\n  const navigation = useNavigation();\n  const restaurantDisplayName = useRestaurantDisplayName();\n  const { theme } = useTheme();\n  const styles = useThemedStyles(__createStyles);\n\n  // Mock KPI data\n  const kpiData: KPICardProps[] = [\n    {\n      title: \"Today's Revenue\",\n      value: '£1,247.50',\n      change: '+12.5%',\n      changeType: 'positive',\n      icon: 'attach-money',\n      color: theme.colors.success,\n    },\n    {\n      title: 'Orders Today',\n      value: '23',\n      change: '+8.2%',\n      changeType: 'positive',\n      icon: 'receipt',\n      color: theme.colors.secondary,\n    },\n    {\n      title: 'Avg Order Value',\n      value: '£54.24',\n      change: '-2.1%',\n      changeType: 'negative',\n      icon: 'trending-up',\n      color: theme.colors.warning,\n    },\n    {\n      title: 'Customer Satisfaction',\n      value: '4.8',\n      change: '+0.2',\n      changeType: 'positive',\n      icon: 'star',\n      color: theme.colors.primary,\n    },\n  ];\n\n  // Mock goals data\n  const goalsData = [\n    { label: 'Daily Sales Target', current: 1247.5, target: 1500.0, percentage: 83.2 },\n    { label: 'Monthly Revenue', current: 28650.0, target: 35000.0, percentage: 81.9 },\n    { label: 'Customer Retention', current: 94.5, target: 95.0, percentage: 99.5 },\n  ];\n\n  // Mock alerts data\n  const alertsData: AlertItem[] = [\n    {\n      id: '1',\n      type: 'warning',\n      title: 'Low Stock Alert',\n      message: 'Ground Coffee - House Blend is running low (5 kg remaining)',\n      time: '15 min ago',\n    },\n    {\n      id: '2',\n      type: 'info',\n      title: 'Peak Hour Approaching',\n      message: 'Lunch rush expected in 30 minutes',\n      time: '30 min ago',\n    },\n    {\n      id: '3',\n      type: 'success',\n      title: 'Daily Target Achieved',\n      message: 'Yesterday exceeded sales target by 15%',\n      time: '2 hours ago',\n    },\n  ];\n\n  const KPICard: React.FC<KPICardProps> = ({ title, _value, change, _changeType, icon, color }) => (\n    <View style={styles.kpiCard}>\n      <View style={styles.kpiHeader}>\n        <View style={[styles.kpiIcon, { backgroundColor: color }]}>\n          <Icon name={icon} size={24} color={theme.colors.white} />\n        </View>\n        <View style={styles.kpiContent}>\n          <Text style={styles.kpiTitle}>{title}</Text>\n          <Text style={styles.kpiValue}>{value}</Text>\n        </View>\n      </View>\n      <View style={styles.kpiChange}>\n        <Icon\n          name={\n            changeType === 'positive'\n              ? 'trending-up'\n              : changeType === 'negative'\n              ? 'trending-down'\n              : 'trending-flat'\n          }\n          size={16}\n          color={\n            changeType === 'positive'\n              ? theme.colors.success\n              : changeType === 'negative'\n              ? theme.colors.danger\n              : theme.colors.lightText\n          }\n        />\n        <Text\n          style={[\n            styles.kpiChangeText,\n            {\n              color:\n                changeType === 'positive'\n                  ? theme.colors.success\n                  : changeType === 'negative'\n                  ? theme.colors.danger\n                  : theme.colors.lightText,\n            },\n          ]}>\n          {change}\n        </Text>\n        <Text style={styles.kpiChangeLabel}>vs yesterday</Text>\n      </View>\n    </View>\n  );\n\n  const GoalCard = ({\n    label,\n    current,\n    target,\n    percentage,\n  }: {\n    label: string;\n    current: number;\n    target: number;\n    percentage: number;\n  }) => (\n    <View style={styles.goalCard}>\n      <View style={styles.goalHeader}>\n        <Text style={styles.goalLabel}>{label}</Text>\n        <Text style={styles.goalPercentage}>{percentage.toFixed(1)}%</Text>\n      </View>\n      <View style={styles.goalProgress}>\n        <View style={styles.goalProgressTrack}>\n          <View style={[styles.goalProgressFill, { width: `${Math.min(__percentage, 100)}%` }]} />\n        </View>\n      </View>\n      <View style={styles.goalValues}>\n        <Text style={styles.goalCurrent}>\n          {label.includes('Revenue') || label.includes('Sales')\n            ? `£${current.toLocaleString()}`\n            : current}\n        </Text>\n        <Text style={styles.goalTarget}>\n          of{' '}\n          {label.includes('Revenue') || label.includes('Sales')\n            ? `£${target.toLocaleString()}`\n            : target}\n        </Text>\n      </View>\n    </View>\n  );\n\n  const AlertCard = ({ alert }: { alert: AlertItem }) => (\n    <View style={styles.alertCard}>\n      <View\n        style={[\n          styles.alertIcon,\n          {\n            backgroundColor:\n              alert.type === 'warning'\n                ? theme.colors.warning\n                : alert.type === 'success'\n                ? theme.colors.success\n                : theme.colors.secondary,\n          },\n        ]}>\n        <Icon\n          name={\n            alert.type === 'warning'\n              ? 'warning'\n              : alert.type === 'success'\n              ? 'check-circle'\n              : 'info'\n          }\n          size={20}\n          color={theme.colors.white}\n        />\n      </View>\n      <View style={styles.alertContent}>\n        <View style={styles.alertHeader}>\n          <Text style={styles.alertTitle}>{alert.title}</Text>\n          <Text style={styles.alertTime}>{alert.time}</Text>\n        </View>\n        <Text style={styles.alertMessage}>{alert.message}</Text>\n      </View>\n    </View>\n  );\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <StatusBar barStyle=\"light-content\" backgroundColor={theme.colors.primary} />\n\n      {/* Header */}\n      <View style={styles.header}>\n        <TouchableOpacity onPress={() => navigation.goBack()} style={styles.backButton}>\n          <Icon name=\"arrow-back\" size={24} color={theme.colors.white} />\n        </TouchableOpacity>\n        <Text style={styles.headerTitle}>{restaurantDisplayName} Dashboard</Text>\n        <TouchableOpacity style={styles.refreshButton}>\n          <Icon name=\"refresh\" size={24} color={theme.colors.white} />\n        </TouchableOpacity>\n      </View>\n\n      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n        {/* KPI Cards */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Key Performance Indicators</Text>\n          <View style={styles.kpiGrid}>\n            {kpiData.map((__kpi, _index) => (\n              <KPICard key={index} {...kpi} />\n            ))}\n          </View>\n        </View>\n\n        {/* Goals Section */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Goals & Targets</Text>\n          <View style={styles.goalsContainer}>\n            {goalsData.map((__goal, _index) => (\n              <GoalCard key={index} {...goal} />\n            ))}\n          </View>\n        </View>\n\n        {/* Quick Actions */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Quick Actions</Text>\n          <View style={styles.quickActions}>\n            <TouchableOpacity\n              style={styles.actionButton}\n              onPress={() => navigation.navigate('Reports' as never)}>\n              <Icon name=\"bar-chart\" size={24} color={theme.colors.secondary} />\n              <Text style={styles.actionText}>View Reports</Text>\n            </TouchableOpacity>\n            <TouchableOpacity\n              style={styles.actionButton}\n              onPress={() => navigation.navigate('Inventory' as never)}>\n              <Icon name=\"inventory\" size={24} color={theme.colors.warning} />\n              <Text style={styles.actionText}>Check Inventory</Text>\n            </TouchableOpacity>\n            <TouchableOpacity\n              style={styles.actionButton}\n              onPress={() => navigation.navigate('Employees' as never)}>\n              <Icon name=\"people\" size={24} color={theme.colors.success} />\n              <Text style={styles.actionText}>Manage Staff</Text>\n            </TouchableOpacity>\n            <TouchableOpacity\n              style={styles.actionButton}\n              onPress={() => navigation.navigate('Settings' as never)}>\n              <Icon name=\"settings\" size={24} color={theme.colors.darkGray} />\n              <Text style={styles.actionText}>Settings</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n\n        {/* Alerts & Notifications */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Recent Alerts</Text>\n          <View style={styles.alertsContainer}>\n            {alertsData.map(alert => (\n              <AlertCard key={alert.id} alert={alert} />\n            ))}\n          </View>\n        </View>\n\n        {/* Backend Status */}\n        <View style={styles.section}>\n          <View style={styles.backendNotice}>\n            <Icon name=\"info\" size={24} color={theme.colors.secondary} />\n            <View style={styles.backendNoticeContent}>\n              <Text style={styles.backendNoticeTitle}>Development Mode</Text>\n              <Text style={styles.backendNoticeText}>\n                This dashboard shows mock data for testing. Real-time data will be available once\n                the backend is connected.\n              </Text>\n            </View>\n          </View>\n        </View>\n      </ScrollView>\n    </SafeAreaView>\n  );\n};\n\nconst _createStyles = (theme: _unknown) =>\n  StyleSheet.create({\n    container: {\n      flex: 1,\n      backgroundColor: theme.colors.background,\n    },\n    header: {\n      backgroundColor: theme.colors.primary,\n      flexDirection: 'row',\n      alignItems: 'center',\n      justifyContent: 'space-between',\n      paddingHorizontal: 16,\n      paddingVertical: 12,\n      paddingTop: 48,\n    },\n    backButton: {\n      padding: 8,\n    },\n    headerTitle: {\n      fontSize: 20,\n      fontWeight: 'bold',\n      color: theme.colors.white,\n    },\n    refreshButton: {\n      padding: 8,\n    },\n    content: {\n      flex: 1,\n      padding: 16,\n    },\n    section: {\n      marginBottom: 24,\n    },\n    sectionTitle: {\n      fontSize: 20,\n      fontWeight: 'bold',\n      color: theme.colors.text,\n      marginBottom: 16,\n    },\n    kpiGrid: {\n      flexDirection: 'row',\n      flexWrap: 'wrap',\n      justifyContent: 'space-between',\n    },\n    kpiCard: {\n      backgroundColor: theme.colors.white,\n      borderRadius: 12,\n      padding: 16,\n      width: '48%',\n      marginBottom: 12,\n      elevation: 2,\n      shadowColor: '#000',\n      shadowOffset: { width: 0, height: 1 },\n      shadowOpacity: 0.1,\n      shadowRadius: 2,\n    },\n    kpiHeader: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      marginBottom: 12,\n    },\n    kpiIcon: {\n      width: 40,\n      height: 40,\n      borderRadius: 20,\n      justifyContent: 'center',\n      alignItems: 'center',\n      marginRight: 12,\n    },\n    kpiContent: {\n      flex: 1,\n    },\n    kpiTitle: {\n      fontSize: 12,\n      color: theme.colors.lightText,\n      marginBottom: 2,\n    },\n    kpiValue: {\n      fontSize: 18,\n      fontWeight: 'bold',\n      color: theme.colors.text,\n    },\n    kpiChange: {\n      flexDirection: 'row',\n      alignItems: 'center',\n    },\n    kpiChangeText: {\n      fontSize: 14,\n      fontWeight: '600',\n      marginLeft: 4,\n    },\n    kpiChangeLabel: {\n      fontSize: 12,\n      color: theme.colors.lightText,\n      marginLeft: 4,\n    },\n    goalsContainer: {\n      backgroundColor: theme.colors.white,\n      borderRadius: 12,\n      padding: 16,\n      elevation: 2,\n      shadowColor: '#000',\n      shadowOffset: { width: 0, height: 1 },\n      shadowOpacity: 0.1,\n      shadowRadius: 2,\n    },\n    goalCard: {\n      marginBottom: 20,\n    },\n    goalHeader: {\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      marginBottom: 8,\n    },\n    goalLabel: {\n      fontSize: 14,\n      fontWeight: '500',\n      color: theme.colors.text,\n    },\n    goalPercentage: {\n      fontSize: 16,\n      fontWeight: 'bold',\n      color: theme.colors.primary,\n    },\n    goalProgress: {\n      marginBottom: 8,\n    },\n    goalProgressTrack: {\n      height: 8,\n      backgroundColor: theme.colors.lightGray,\n      borderRadius: 4,\n    },\n    goalProgressFill: {\n      height: 8,\n      backgroundColor: theme.colors.primary,\n      borderRadius: 4,\n    },\n    goalValues: {\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n    },\n    goalCurrent: {\n      fontSize: 16,\n      fontWeight: 'bold',\n      color: theme.colors.text,\n    },\n    goalTarget: {\n      fontSize: 14,\n      color: theme.colors.lightText,\n    },\n    quickActions: {\n      flexDirection: 'row',\n      flexWrap: 'wrap',\n      justifyContent: 'space-between',\n    },\n    actionButton: {\n      backgroundColor: theme.colors.white,\n      borderRadius: 12,\n      padding: 16,\n      width: '48%',\n      alignItems: 'center',\n      marginBottom: 12,\n      elevation: 2,\n      shadowColor: '#000',\n      shadowOffset: { width: 0, height: 1 },\n      shadowOpacity: 0.1,\n      shadowRadius: 2,\n    },\n    actionText: {\n      fontSize: 14,\n      fontWeight: '500',\n      color: theme.colors.text,\n      marginTop: 8,\n      textAlign: 'center',\n    },\n    alertsContainer: {\n      backgroundColor: theme.colors.white,\n      borderRadius: 12,\n      padding: 16,\n      elevation: 2,\n      shadowColor: '#000',\n      shadowOffset: { width: 0, height: 1 },\n      shadowOpacity: 0.1,\n      shadowRadius: 2,\n    },\n    alertCard: {\n      flexDirection: 'row',\n      alignItems: 'flex-start',\n      paddingVertical: 12,\n      borderBottomWidth: 1,\n      borderBottomColor: theme.colors.lightGray,\n    },\n    alertIcon: {\n      width: 32,\n      height: 32,\n      borderRadius: 16,\n      justifyContent: 'center',\n      alignItems: 'center',\n      marginRight: 12,\n    },\n    alertContent: {\n      flex: 1,\n    },\n    alertHeader: {\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      marginBottom: 4,\n    },\n    alertTitle: {\n      fontSize: 14,\n      fontWeight: '600',\n      color: theme.colors.text,\n    },\n    alertTime: {\n      fontSize: 12,\n      color: theme.colors.lightText,\n    },\n    alertMessage: {\n      fontSize: 13,\n      color: theme.colors.lightText,\n      lineHeight: 18,\n    },\n    backendNotice: {\n      backgroundColor: theme.colors.white,\n      borderRadius: 12,\n      padding: 16,\n      flexDirection: 'row',\n      alignItems: 'flex-start',\n      elevation: 2,\n      shadowColor: '#000',\n      shadowOffset: { width: 0, height: 1 },\n      shadowOpacity: 0.1,\n      shadowRadius: 2,\n    },\n    backendNoticeContent: {\n      flex: 1,\n      marginLeft: 12,\n    },\n    backendNoticeTitle: {\n      fontSize: 16,\n      fontWeight: '600',\n      color: theme.colors.text,\n      marginBottom: 4,\n    },\n    backendNoticeText: {\n      fontSize: 14,\n      color: theme.colors.lightText,\n      lineHeight: 20,\n    },\n  });\n\nexport default DashboardScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/main/HomeHubScreen.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ';' expected.","line":184,"column":15,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  StatusBar,\n  SafeAreaView,\n  TouchableOpacity,\n  ScrollView,\n  Dimensions,\n  Animated,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation } from '@react-navigation/native';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { useTheme, useThemedStyles } from '../../design-system/ThemeProvider';\nimport useAppStore from '../../store/useAppStore';\nimport { SubscriptionStatusBadge } from '../../components/subscription/SubscriptionStatusBadge';\nimport { useWebSocket } from '../../hooks/useWebSocket';\n\nconst { width: screenWidth } = Dimensions.get('window');\nconst isTablet = screenWidth > 768;\n\ninterface HubIcon {\n  id: string;\n  title: string;\n  subtitle: string;\n  icon: string;\n  route?: string;\n  color: string;\n  category: 'core' | 'business' | 'analytics' | 'account';\n  requiredRoles: string[];\n  badge?: number;\n}\n\nconst HomeHubScreen: React.FC = () => {\n  const navigation = useNavigation();\n  const { theme } = useTheme();\n  const styles = useThemedStyles(__createStyles);\n  const { user, signOut } = useAuth();\n  const { cartItemCount } = useAppStore();\n  const { connected: wsConnected } = useWebSocket({ autoConnect: true });\n\n  // Hub icons configuration with role-based visibility\n  const hubIcons: HubIcon[] = [\n    // Core Operations\n    {\n      id: 'pos',\n      title: 'POS',\n      subtitle: 'Point of Sale',\n      icon: 'point-of-sale',\n      route: 'POS',\n      color: theme.colors.primary,\n      category: 'core',\n      requiredRoles: ['platform_owner', 'restaurant_owner', 'manager', 'employee'],\n    },\n    {\n      id: 'orders',\n      title: 'Orders',\n      subtitle: 'Order management',\n      icon: 'receipt',\n      route: 'Orders',\n      color: theme.colors.secondary,\n      category: 'core',\n      requiredRoles: ['platform_owner', 'restaurant_owner', 'manager', 'employee'],\n    },\n    // Business Management\n    {\n      id: 'employees',\n      title: 'Employees',\n      subtitle: 'Staff management',\n      icon: 'people',\n      route: 'Employees',\n      color: theme.colors.info[500],\n      category: 'business',\n      requiredRoles: ['platform_owner', 'restaurant_owner', 'manager'],\n    },\n    {\n      id: 'customers',\n      title: 'Customers',\n      subtitle: 'Customer database',\n      icon: 'person-pin',\n      route: 'Customers',\n      color: theme.colors.warning[500],\n      category: 'business',\n      requiredRoles: ['platform_owner', 'restaurant_owner', 'manager', 'employee'],\n    },\n    {\n      id: 'inventory',\n      title: 'Inventory',\n      subtitle: 'Stock management',\n      icon: 'inventory',\n      route: 'Inventory',\n      color: theme.colors.success[500],\n      category: 'business',\n      requiredRoles: ['platform_owner', 'restaurant_owner', 'manager'],\n    },\n    {\n      id: 'menu',\n      title: 'Menu',\n      subtitle: 'Menu management',\n      icon: 'restaurant-menu',\n      route: 'MenuManagement',\n      color: theme.colors.primary,\n      category: 'business',\n      requiredRoles: ['platform_owner', 'restaurant_owner', 'manager'],\n    },\n    // Analytics & Reports\n    {\n      id: 'reports',\n      title: 'Reports',\n      subtitle: 'Business reports',\n      icon: 'bar-chart',\n      route: 'Reports',\n      color: theme.colors.secondary,\n      category: 'analytics',\n      requiredRoles: ['platform_owner', 'restaurant_owner', 'manager'],\n      badge: 3,\n    },\n    {\n      id: 'dashboard',\n      title: 'Dashboard',\n      subtitle: 'Business overview',\n      icon: 'dashboard',\n      route: 'Dashboard',\n      color: theme.colors.primary,\n      category: 'analytics',\n      requiredRoles: ['platform_owner', 'restaurant_owner', 'manager'],\n    },\n    // Account & Settings\n    {\n      id: 'settings',\n      title: 'Settings',\n      subtitle: 'App configuration',\n      icon: 'settings',\n      route: 'Settings',\n      color: theme.colors.darkGray,\n      category: 'account',\n      requiredRoles: ['platform_owner', 'restaurant_owner', 'manager', 'employee'],\n    },\n    {\n      id: 'profile',\n      title: 'Profile',\n      subtitle: 'Personal settings',\n      icon: 'account-circle',\n      route: 'Profile',\n      color: theme.colors.darkGray,\n      category: 'account',\n      requiredRoles: ['platform_owner', 'restaurant_owner', 'manager', 'employee'],\n    },\n    {\n      id: 'help',\n      title: 'Help',\n      subtitle: 'Support & guides',\n      icon: 'help',\n      route: 'Help',\n      color: theme.colors.darkGray,\n      category: 'account',\n      requiredRoles: ['platform_owner', 'restaurant_owner', 'manager', 'employee'],\n    },\n  ];\n\n  // Filter icons based on user role\n  const getVisibleIcons = () => {\n    if (!user?.role) {\n      return [];\n    }\n    return hubIcons.filter(icon => icon.requiredRoles.includes(user.role));\n  };\n\n  const visibleIcons = getVisibleIcons();\n\n  // Calculate grid dimensions - FIXED: Ensure proper 2-column layout\n  const numColumns = isTablet ? 4 : 2;\n  const iconSize = isTablet ? 48 : 64;\n  const horizontalSpacing = 16;\n  const cardMargin = 8; // Proper margin for 2-column layout\n  // Fixed width calculation for exact 2-column layout\n  const cardWidth = (screenWidth - horizontalSpacing * 2 - cardMargin * 4) / numColumns;\n\n  const handleIconPress = (icon: _HubIcon) => {\n    // Analytics tracking for icon tap\n      iconId: icon.id,\n      iconTitle: icon.title,\n      iconCategory: icon.category,\n      userId: user?.id,\n      userRole: user?.role,\n      timestamp: new Date().toISOString(),\n    });\n\n    if (icon.route) {\n      navigation.navigate(icon.route as never);\n    }\n  };\n\n  const handleSignOut = async () => {\n    try {\n      await signOut();\n    } catch (__error) {\n    }\n  };\n\n  // Track analytics for hub view\n  useEffect(() => {\n    // Analytics tracking for HomeHubViewed event\n      userId: user?.id,\n      userEmail: user?.email,\n      userRole: user?.role,\n      visibleIconsCount: visibleIcons.length,\n      timestamp: new Date().toISOString(),\n    });\n    // TODO: Integrate with actual analytics service (__Firebase, _Mixpanel, etc.)\n  }, [user, visibleIcons.length]);\n\n  const IconCard: React.FC<{ icon: HubIcon }> = ({ icon }) => {\n    const scaleValue = new Animated.Value(1);\n\n    const handlePressIn = () => {\n      Animated.spring(__scaleValue, {\n        toValue: 0.95,\n        useNativeDriver: _true,\n      }).start();\n    };\n\n    const handlePressOut = () => {\n      Animated.spring(__scaleValue, {\n        toValue: 1,\n        friction: 3,\n        useNativeDriver: _true,\n      }).start();\n    };\n\n    return (\n      <Animated.View style={[{ transform: [{ scale: scaleValue }] }]}>\n        <TouchableOpacity\n          style={[styles.iconCard, { width: cardWidth }]}\n          onPress={() => handleIconPress(__icon)}\n          onPressIn={handlePressIn}\n          onPressOut={handlePressOut}\n          activeOpacity={1}\n          accessibilityRole=\"button\"\n          accessibilityLabel={`${icon.title}, ${icon.subtitle}`}>\n          <View style={[styles.iconContainer, { backgroundColor: `${icon.color}15` }]}>\n            <Icon name={icon.icon} size={iconSize} color={icon.color} />\n            {icon.badge && (\n              <View style={styles.badge}>\n                <Text style={styles.badgeText}>{icon.badge}</Text>\n              </View>\n            )}\n          </View>\n          <Text style={styles.iconTitle}>{icon.title}</Text>\n          <Text style={styles.iconSubtitle}>{icon.subtitle}</Text>\n        </TouchableOpacity>\n      </Animated.View>\n    );\n  };\n\n  const CategorySection: React.FC<{ category: string; icons: HubIcon[] }> = ({\n    category,\n    icons,\n  }) => {\n    const categoryTitles = {\n      core: 'Core Operations',\n      business: 'Business Management',\n      analytics: 'Reports & Analytics',\n      account: 'Account & Settings',\n    };\n\n    if (icons.length === 0) {\n      return null;\n    }\n\n    return (\n      <View style={styles.categorySection}>\n        <Text style={styles.categoryTitle}>\n          {categoryTitles[category as keyof typeof categoryTitles]}\n        </Text>\n        <View style={styles.iconGrid}>\n          {icons.map(icon => (\n            <IconCard key={icon.id} icon={icon} />\n          ))}\n        </View>\n      </View>\n    );\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <StatusBar backgroundColor={theme.colors.primary} barStyle=\"light-content\" />\n\n      {/* Header */}\n      <View style={styles.header}>\n        <View style={styles.headerContent}>\n          <Text style={styles.headerTitle}>Welcome</Text>\n          <Text style={styles.headerSubtitle}>\n            {user?.firstName || 'User'} • {user?.role?.replace('_', ' ') || 'Staff'}\n          </Text>\n        </View>\n        <View style={styles.headerActions}>\n          <SubscriptionStatusBadge />\n          {wsConnected && <View style={styles.connectionDot} />}\n          <TouchableOpacity\n            style={styles.signOutButton}\n            onPress={handleSignOut}\n            accessibilityRole=\"button\"\n            accessibilityLabel=\"Sign out\">\n            <Icon name=\"logout\" size={24} color={theme.colors.white} />\n          </TouchableOpacity>\n        </View>\n      </View>\n\n      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n        {/* Quick Stats */}\n        <View style={styles.quickStats}>\n          <View style={styles.statItem}>\n            <Text style={styles.statValue}>{cartItemCount()}</Text>\n            <Text style={styles.statLabel}>Cart Items</Text>\n          </View>\n          <View style={styles.statItem}>\n            <Text style={styles.statValue}>{visibleIcons.length}</Text>\n            <Text style={styles.statLabel}>Available Features</Text>\n          </View>\n          <View style={styles.statItem}>\n            <Text style={styles.statValue}>{user?.role === 'manager' ? 'Manager' : 'Staff'}</Text>\n            <Text style={styles.statLabel}>Access Level</Text>\n          </View>\n        </View>\n\n        {/* Icon Categories */}\n        <CategorySection\n          category=\"core\"\n          icons={visibleIcons.filter(icon => icon.category === 'core')}\n        />\n        <CategorySection\n          category=\"business\"\n          icons={visibleIcons.filter(icon => icon.category === 'business')}\n        />\n        <CategorySection\n          category=\"analytics\"\n          icons={visibleIcons.filter(icon => icon.category === 'analytics')}\n        />\n        <CategorySection\n          category=\"account\"\n          icons={visibleIcons.filter(icon => icon.category === 'account')}\n        />\n\n        {/* Footer */}\n        <View style={styles.footer}>\n          <Text style={styles.versionText}>Fynlo POS v1.0.0</Text>\n          <Text style={styles.copyrightText}>© 2024 Fynlo Ltd.</Text>\n        </View>\n      </ScrollView>\n    </SafeAreaView>\n  );\n};\n\nconst createStyles = (theme: _unknown) =>\n  StyleSheet.create({\n    container: {\n      flex: 1,\n      backgroundColor: theme.colors.background,\n    },\n    header: {\n      backgroundColor: theme.colors.primary,\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      paddingHorizontal: 20,\n      paddingVertical: 16,\n    },\n    headerContent: {\n      flex: 1,\n    },\n    headerTitle: {\n      fontSize: 24,\n      fontWeight: 'bold',\n      color: theme.colors.white,\n    },\n    headerSubtitle: {\n      fontSize: 14,\n      color: 'rgba(255, 255, 255, 0.8)',\n      marginTop: 4,\n    },\n    headerActions: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      gap: 12,\n    },\n    connectionDot: {\n      width: 8,\n      height: 8,\n      borderRadius: 4,\n      backgroundColor: '#4CAF50',\n      marginLeft: -4,\n    },\n    signOutButton: {\n      padding: 8,\n      borderRadius: 8,\n      backgroundColor: 'rgba(255, 255, 255, 0.1)',\n      marginLeft: 8,\n    },\n    content: {\n      flex: 1,\n    },\n    quickStats: {\n      flexDirection: 'row',\n      justifyContent: 'space-around',\n      backgroundColor: theme.colors.white,\n      marginHorizontal: 16,\n      marginTop: 16,\n      padding: 16,\n      borderRadius: 12,\n      shadowColor: '#000',\n      shadowOffset: { width: 0, height: 2 },\n      shadowOpacity: 0.05,\n      shadowRadius: 4,\n      elevation: 2,\n    },\n    statItem: {\n      alignItems: 'center',\n    },\n    statValue: {\n      fontSize: 20,\n      fontWeight: 'bold',\n      color: theme.colors.primary,\n    },\n    statLabel: {\n      fontSize: 12,\n      color: theme.colors.darkGray,\n      marginTop: 4,\n    },\n    categorySection: {\n      marginTop: 24,\n    },\n    categoryTitle: {\n      fontSize: 14,\n      fontWeight: '600',\n      color: theme.colors.darkGray,\n      textTransform: 'uppercase',\n      letterSpacing: 0.5,\n      marginBottom: 12,\n      marginHorizontal: 20,\n    },\n    iconGrid: {\n      flexDirection: 'row',\n      flexWrap: 'wrap',\n      paddingHorizontal: 16,\n      justifyContent: 'flex-start',\n    },\n    iconCard: {\n      backgroundColor: theme.colors.white,\n      borderRadius: 12,\n      padding: 16,\n      marginHorizontal: 8,\n      marginBottom: 12,\n      alignItems: 'center',\n      justifyContent: 'center',\n      minHeight: 120,\n      shadowColor: '#000',\n      shadowOffset: { width: 0, height: 2 },\n      shadowOpacity: 0.05,\n      shadowRadius: 4,\n      elevation: 2,\n      borderWidth: 1,\n      borderColor: theme.colors.border,\n    },\n    iconContainer: {\n      width: 80,\n      height: 80,\n      borderRadius: 20,\n      justifyContent: 'center',\n      alignItems: 'center',\n      marginBottom: 12,\n      position: 'relative',\n    },\n    badge: {\n      position: 'absolute',\n      top: -4,\n      right: -4,\n      backgroundColor: theme.colors.danger[500],\n      borderRadius: 10,\n      paddingHorizontal: 6,\n      paddingVertical: 2,\n      minWidth: 20,\n      height: 20,\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n    badgeText: {\n      fontSize: 12,\n      fontWeight: '600',\n      color: theme.colors.white,\n    },\n    iconTitle: {\n      fontSize: 16,\n      fontWeight: '600',\n      color: theme.colors.text,\n      textAlign: 'center',\n      marginBottom: 4,\n    },\n    iconSubtitle: {\n      fontSize: 12,\n      color: theme.colors.darkGray,\n      textAlign: 'center',\n    },\n    footer: {\n      alignItems: 'center',\n      paddingVertical: 32,\n      marginTop: 24,\n    },\n    versionText: {\n      fontSize: 14,\n      color: theme.colors.darkGray,\n    },\n    copyrightText: {\n      fontSize: 12,\n      color: theme.colors.lightText,\n      marginTop: 4,\n    },\n  });\n\nexport default HomeHubScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/main/OrderDetailsScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_route' is assigned a value but never used.","line":54,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":54,"endColumn":15},{"ruleId":"react/no-unstable-nested-components","severity":1,"message":"Do not define components during render. React will see a new component type on every render and destroy the entire subtree’s DOM nodes and state (https://reactjs.org/docs/reconciliation.html#elements-of-different-types). Instead, move this component definition out of the parent component “OrderDetailsScreen” and pass data as props.","line":79,"column":25,"nodeType":"ArrowFunctionExpression","endLine":91,"endColumn":4},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":79,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1952,1955],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1952,1955],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  SafeAreaView,\n  StatusBar,\n  ScrollView,\n  TouchableOpacity,\n  Alert,\n  Linking, // Added Linking\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation, useRoute } from '@react-navigation/native';\n\nconst Colors = {\n  primary: '#2C3E50',\n  secondary: '#3498DB',\n  success: '#27AE60',\n  warning: '#F39C12',\n  danger: '#E74C3C',\n  background: '#F8F9FA',\n  white: '#FFFFFF',\n  lightGray: '#ECF0F1',\n  text: '#2C3E50',\n  lightText: '#95A5A6',\n};\n\n// Mock order data - would come from API/store\nconst mockOrder = {\n  id: 1,\n  items: [\n    { id: 1, name: 'Classic Burger', price: 12.99, quantity: 2, emoji: '🍔' },\n    { id: 2, name: 'French Fries', price: 4.99, quantity: 1, emoji: '🍟' },\n  ],\n  subtotal: 30.97,\n  tax: 2.48,\n  total: 33.45,\n  customer: {\n    // Updated to use customer object\n    id: 'cust_123',\n    name: 'John Doe',\n    email: 'john.doe@example.com',\n  },\n  tableNumber: 5,\n  createdAt: new Date(Date.now() - 1000 * 60 * 30),\n  status: 'preparing',\n  paymentMethod: 'card',\n  notes: 'Extra sauce on the burger',\n};\n\nconst OrderDetailsScreen: React.FC = () => {\n  const navigation = useNavigation();\n  const _route = useRoute();\n  // const { orderId } = route.params as { orderId: number };\n\n  const statusColors = {\n    draft: Colors.lightText,\n    confirmed: Colors.warning,\n    preparing: Colors.warning,\n    ready: Colors.success,\n    completed: Colors.lightText,\n    cancelled: Colors.danger,\n  };\n\n  const handleStatusUpdate = (newStatus: _string) => {\n    Alert.alert('Update Status', `Change order status to ${newStatus}?`, [\n      { text: 'Cancel', style: 'cancel' },\n      {\n        text: 'Update',\n        onPress: () => {\n          // Update order status\n          Alert.alert('Success', `Order status updated to ${newStatus}`);\n        },\n      },\n    ]);\n  };\n\n  const OrderItemCard = ({ item }: { item: any }) => (\n    <View style={styles.orderItem}>\n      <Text style={styles.itemEmoji}>{item.emoji}</Text>\n      <View style={styles.itemDetails}>\n        <Text style={styles.itemName}>{item.name}</Text>\n        <Text style={styles.itemPrice}>£{item.price.toFixed(2)} each</Text>\n      </View>\n      <View style={styles.itemQuantity}>\n        <Text style={styles.quantityText}>x{item.quantity}</Text>\n        <Text style={styles.itemTotal}>£{(item.price * item.quantity).toFixed(2)}</Text>\n      </View>\n    </View>\n  );\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <StatusBar barStyle=\"light-content\" backgroundColor={Colors.primary} />\n\n      {/* Header */}\n      <View style={styles.header}>\n        <TouchableOpacity style={styles.backButton} onPress={() => navigation.goBack()}>\n          <Icon name=\"arrow-back\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n        <Text style={styles.headerTitle}>Order #{mockOrder.id}</Text>\n        <TouchableOpacity style={styles.headerButton}>\n          <Icon name=\"more-vert\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n      </View>\n\n      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n        {/* Order Status */}\n        <View style={styles.statusSection}>\n          <View style={styles.statusHeader}>\n            <View\n              style={[styles.statusIndicator, { backgroundColor: statusColors[mockOrder.status] }]}\n            />\n            <Text style={styles.statusText}>{mockOrder.status.toUpperCase()}</Text>\n          </View>\n          <Text style={styles.orderTime}>{mockOrder.createdAt.toLocaleString()}</Text>\n        </View>\n\n        {/* Customer Info */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Customer Information</Text>\n          <View style={styles.customerCard}>\n            <View style={styles.customerRow}>\n              <Icon name=\"person\" size={20} color={Colors.secondary} />\n              <Text style={styles.customerText}>\n                {mockOrder.customer?.name || 'Walk-in Customer'}\n              </Text>\n            </View>\n            {mockOrder.customer?.email && (\n              <TouchableOpacity\n                onPress={() => Linking.openURL(`mailto:${mockOrder.customer?.email}`)}>\n                <View style={styles.customerRow}>\n                  <Icon name=\"email\" size={20} color={Colors.secondary} />\n                  <Text style={[styles.customerText, styles.emailLink]}>\n                    {mockOrder.customer.email}\n                  </Text>\n                </View>\n              </TouchableOpacity>\n            )}\n            {mockOrder.tableNumber && (\n              <View style={styles.customerRow}>\n                <Icon name=\"table-restaurant\" size={20} color={Colors.secondary} />\n                <Text style={styles.customerText}>Table {mockOrder.tableNumber}</Text>\n              </View>\n            )}\n            <View style={styles.customerRow}>\n              <Icon\n                name={\n                  mockOrder.paymentMethod === 'cash'\n                    ? 'money'\n                    : mockOrder.paymentMethod === 'card'\n                    ? 'credit-card'\n                    : 'phone-android'\n                }\n                size={20}\n                color={Colors.secondary}\n              />\n              <Text style={styles.customerText}>\n                {mockOrder.paymentMethod?.replace('_', ' ').toUpperCase()}\n              </Text>\n            </View>\n          </View>\n        </View>\n\n        {/* Order Items */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Order Items</Text>\n          <View style={styles.itemsContainer}>\n            {mockOrder.items.map(item => (\n              <OrderItemCard key={item.id} item={item} />\n            ))}\n          </View>\n        </View>\n\n        {/* Order Notes */}\n        {mockOrder.notes && (\n          <View style={styles.section}>\n            <Text style={styles.sectionTitle}>Notes</Text>\n            <View style={styles.notesCard}>\n              <Text style={styles.notesText}>{mockOrder.notes}</Text>\n            </View>\n          </View>\n        )}\n\n        {/* Order Summary */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Order Summary</Text>\n          <View style={styles.summaryCard}>\n            <View style={styles.summaryRow}>\n              <Text style={styles.summaryLabel}>Subtotal</Text>\n              <Text style={styles.summaryValue}>£{mockOrder.subtotal.toFixed(2)}</Text>\n            </View>\n            <View style={styles.summaryRow}>\n              <Text style={styles.summaryLabel}>Tax</Text>\n              <Text style={styles.summaryValue}>£{mockOrder.tax.toFixed(2)}</Text>\n            </View>\n            <View style={[styles.summaryRow, styles.totalRow]}>\n              <Text style={styles.totalLabel}>Total</Text>\n              <Text style={styles.totalValue}>£{mockOrder.total.toFixed(2)}</Text>\n            </View>\n          </View>\n        </View>\n\n        {/* Status Actions */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Actions</Text>\n          <View style={styles.actionsContainer}>\n            {mockOrder.status === 'preparing' && (\n              <TouchableOpacity\n                style={[styles.actionButton, { backgroundColor: Colors.success }]}\n                onPress={() => handleStatusUpdate('ready')}>\n                <Icon name=\"done\" size={20} color={Colors.white} />\n                <Text style={styles.actionButtonText}>Mark as Ready</Text>\n              </TouchableOpacity>\n            )}\n\n            {mockOrder.status === 'ready' && (\n              <TouchableOpacity\n                style={[styles.actionButton, { backgroundColor: Colors.secondary }]}\n                onPress={() => handleStatusUpdate('completed')}>\n                <Icon name=\"check-circle\" size={20} color={Colors.white} />\n                <Text style={styles.actionButtonText}>Mark as Completed</Text>\n              </TouchableOpacity>\n            )}\n\n            <TouchableOpacity\n              style={[styles.actionButton, { backgroundColor: Colors.lightGray }]}\n              onPress={() => Alert.alert('Coming Soon', 'Print receipt feature coming soon')}>\n              <Icon name=\"print\" size={20} color={Colors.text} />\n              <Text style={[styles.actionButtonText, { color: Colors.text }]}>Print Receipt</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n      </ScrollView>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.primary,\n    paddingHorizontal: 20,\n    paddingVertical: 15,\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    elevation: 4,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n  },\n  backButton: {\n    padding: 8,\n  },\n  headerTitle: {\n    color: Colors.white,\n    fontSize: 20,\n    fontWeight: 'bold',\n    flex: 1,\n    textAlign: 'center',\n  },\n  headerButton: {\n    padding: 8,\n  },\n  content: {\n    flex: 1,\n    padding: 20,\n  },\n  statusSection: {\n    alignItems: 'center',\n    paddingVertical: 20,\n    marginBottom: 20,\n  },\n  statusHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  statusIndicator: {\n    width: 12,\n    height: 12,\n    borderRadius: 6,\n    marginRight: 8,\n  },\n  statusText: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: Colors.text,\n  },\n  orderTime: {\n    fontSize: 14,\n    color: Colors.lightText,\n  },\n  section: {\n    marginBottom: 25,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: Colors.text,\n    marginBottom: 12,\n  },\n  customerCard: {\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    padding: 20,\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.1,\n    shadowRadius: 2,\n  },\n  customerRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 12,\n  },\n  customerText: {\n    fontSize: 16,\n    color: Colors.text,\n    marginLeft: 12,\n    fontWeight: '600',\n  },\n  emailLink: {\n    color: Colors.secondary,\n    textDecorationLine: 'underline',\n  },\n  itemsContainer: {\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.1,\n    shadowRadius: 2,\n  },\n  orderItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 20,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.lightGray,\n  },\n  itemEmoji: {\n    fontSize: 32,\n    marginRight: 15,\n  },\n  itemDetails: {\n    flex: 1,\n  },\n  itemName: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  itemPrice: {\n    fontSize: 14,\n    color: Colors.lightText,\n  },\n  itemQuantity: {\n    alignItems: 'flex-end',\n  },\n  quantityText: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  itemTotal: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: Colors.secondary,\n  },\n  notesCard: {\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    padding: 20,\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.1,\n    shadowRadius: 2,\n  },\n  notesText: {\n    fontSize: 16,\n    color: Colors.text,\n    lineHeight: 24,\n  },\n  summaryCard: {\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    padding: 20,\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.1,\n    shadowRadius: 2,\n  },\n  summaryRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 12,\n  },\n  summaryLabel: {\n    fontSize: 16,\n    color: Colors.text,\n  },\n  summaryValue: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  totalRow: {\n    borderTopWidth: 1,\n    borderTopColor: Colors.lightGray,\n    paddingTop: 12,\n    marginBottom: 0,\n  },\n  totalLabel: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: Colors.text,\n  },\n  totalValue: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.secondary,\n  },\n  actionsContainer: {\n    gap: 12,\n  },\n  actionButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 15,\n    borderRadius: 12,\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.1,\n    shadowRadius: 2,\n  },\n  actionButtonText: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: Colors.white,\n    marginLeft: 8,\n  },\n});\n\nexport default OrderDetailsScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/main/OrdersScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_fetchedOrders' is assigned a value but never used.","line":53,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":53,"endColumn":27},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":116,"column":52,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":116,"endColumn":61},{"ruleId":"react/no-unstable-nested-components","severity":1,"message":"Do not define components during render. React will see a new component type on every render and destroy the entire subtree’s DOM nodes and state (https://reactjs.org/docs/reconciliation.html#elements-of-different-types). Instead, move this component definition out of the parent component “OrdersScreen” and pass data as props.","line":119,"column":21,"nodeType":"ArrowFunctionExpression","endLine":184,"endColumn":4},{"ruleId":"react/no-unstable-nested-components","severity":1,"message":"Do not define components during render. React will see a new component type on every render and destroy the entire subtree’s DOM nodes and state (https://reactjs.org/docs/reconciliation.html#elements-of-different-types). Instead, move this component definition out of the parent component “OrdersScreen” and pass data as props.","line":186,"column":24,"nodeType":"ArrowFunctionExpression","endLine":207,"endColumn":4},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":248,"column":31,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":248,"endColumn":39,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[7638,7639],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"react/no-unstable-nested-components","severity":1,"message":"Do not define components during render. React will see a new component type on every render and destroy the entire subtree’s DOM nodes and state (https://reactjs.org/docs/reconciliation.html#elements-of-different-types). Instead, move this component definition out of the parent component “OrdersScreen” and pass data as props. If you want to allow component creation in props, set allowAsProps option to true.","line":253,"column":29,"nodeType":"ArrowFunctionExpression","endLine":264,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_createStyles' is assigned a value but never used.","line":270,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":270,"endColumn":20},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.container","line":272,"column":5,"nodeType":"Property","endLine":275,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.header","line":276,"column":5,"nodeType":"Property","endLine":288,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.headerTitle","line":289,"column":5,"nodeType":"Property","endLine":293,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.searchButton","line":294,"column":5,"nodeType":"Property","endLine":296,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.filtersContainer","line":297,"column":5,"nodeType":"Property","endLine":304,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.filterButton","line":305,"column":5,"nodeType":"Property","endLine":313,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.filterButtonActive","line":314,"column":5,"nodeType":"Property","endLine":316,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.filterButtonText","line":317,"column":5,"nodeType":"Property","endLine":321,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.filterButtonTextActive","line":322,"column":5,"nodeType":"Property","endLine":324,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.filterBadge","line":325,"column":5,"nodeType":"Property","endLine":333,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.filterBadgeText","line":334,"column":5,"nodeType":"Property","endLine":338,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.ordersList","line":339,"column":5,"nodeType":"Property","endLine":341,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.orderCard","line":342,"column":5,"nodeType":"Property","endLine":351,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.orderHeader","line":352,"column":5,"nodeType":"Property","endLine":359,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.orderInfo","line":360,"column":5,"nodeType":"Property","endLine":362,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.orderNumber","line":363,"column":5,"nodeType":"Property","endLine":367,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.orderTime","line":368,"column":5,"nodeType":"Property","endLine":372,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.statusBadge","line":373,"column":5,"nodeType":"Property","endLine":379,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.statusText","line":380,"column":5,"nodeType":"Property","endLine":385,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.orderDetails","line":386,"column":5,"nodeType":"Property","endLine":388,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.customerInfo","line":389,"column":5,"nodeType":"Property","endLine":393,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.customerText","line":394,"column":5,"nodeType":"Property","endLine":399,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.tableIcon","line":400,"column":5,"nodeType":"Property","endLine":402,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.tableText","line":403,"column":5,"nodeType":"Property","endLine":407,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.itemsPreview","line":408,"column":5,"nodeType":"Property","endLine":410,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.itemsText","line":411,"column":5,"nodeType":"Property","endLine":416,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.itemsList","line":417,"column":5,"nodeType":"Property","endLine":421,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.orderFooter","line":422,"column":5,"nodeType":"Property","endLine":426,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.paymentMethod","line":427,"column":5,"nodeType":"Property","endLine":430,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.paymentText","line":431,"column":5,"nodeType":"Property","endLine":436,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.totalAmount","line":437,"column":5,"nodeType":"Property","endLine":441,"endColumn":6}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadOrders' and 'orderService'. Either include them or remove the dependency array.","line":94,"column":6,"nodeType":"ArrayExpression","endLine":94,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadOrders, orderService]","fix":{"range":[2764,2766],"text":"[loadOrders, orderService]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":2,"fatalErrorCount":0,"warningCount":36,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  FlatList,\n  TouchableOpacity,\n  SafeAreaView,\n  StatusBar,\n  RefreshControl,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation } from '@react-navigation/native';\nimport { useTheme, useThemedStyles } from '../../design-system/ThemeProvider';\nimport { Order } from '../../types';\nimport OrderService from '../../services/OrderService';\nimport HeaderWithBackButton from '../../components/navigation/HeaderWithBackButton';\nimport EmptyState from '../../components/common/EmptyState';\n\nconst OrdersScreen: React.FC = () => {\n  const navigation = useNavigation();\n  const { theme } = useTheme();\n  const styles = useThemedStyles(__createStyles);\n  const [orders, setOrders] = useState<Order[]>([]);\n  const [refreshing, setRefreshing] = useState(__false);\n  const [loading, setLoading] = useState(__true);\n  const [filter, setFilter] = useState<'all' | 'preparing' | 'ready' | 'completed'>('all');\n  const orderService = OrderService.getInstance();\n\n  const statusColors = {\n    draft: theme.colors.lightText,\n    confirmed: theme.colors.warning,\n    preparing: theme.colors.warning,\n    ready: theme.colors.success,\n    completed: theme.colors.lightText,\n    cancelled: theme.colors.danger,\n  };\n\n  const statusIcons = {\n    draft: 'edit',\n    confirmed: 'check-circle-outline',\n    preparing: 'access-time',\n    ready: 'done',\n    completed: 'check-circle',\n    cancelled: 'cancel',\n  };\n\n  const filteredOrders =\n    filter === 'all' ? orders : orders.filter(order => order.status === filter);\n\n  const loadOrders = async () => {\n    try {\n      const _fetchedOrders = await orderService.getOrders({\n        limit: 50,\n        offset: 0,\n      });\n      setOrders(__fetchedOrders);\n    } catch (__error) {\n      // Keep existing orders on error\n    }\n  };\n\n  const onRefresh = async () => {\n    setRefreshing(__true);\n    await loadOrders();\n    setRefreshing(__false);\n  };\n\n  // Load orders on component mount\n  useEffect(() => {\n    const initializeOrders = async () => {\n      setLoading(__true);\n      await loadOrders();\n      setLoading(__false);\n    };\n\n    initializeOrders();\n\n    // Subscribe to real-time order updates\n    const unsubscribe = orderService.subscribeToOrderEvents((__event, _data) => {\n      if (event === 'order_created') {\n        setOrders(prevOrders => [data, ...prevOrders]);\n      } else if (event === 'order_updated') {\n        setOrders(prevOrders =>\n          prevOrders.map(order => (order.id === data.id ? { ...order, ...data } : _order)),\n        );\n      }\n    });\n\n    return () => {\n      unsubscribe();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const formatTime = (date: _Date) => {\n    return date.toLocaleTimeString('en-US', {\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  };\n\n  const getTimeSince = (date: _Date) => {\n    const now = new Date();\n    const diffInMinutes = Math.floor((now.getTime() - date.getTime()) / (1000 * 60));\n\n    if (diffInMinutes < 60) {\n      return `${diffInMinutes}m ago`;\n    } else {\n      const hours = Math.floor(diffInMinutes / 60);\n      return `${hours}h ago`;\n    }\n  };\n\n  const handleOrderPress = (order: _Order) => {\n    navigation.navigate('OrderDetails', { orderId: order.id! });\n  };\n\n  const OrderCard = ({ order }: { order: Order }) => (\n    <TouchableOpacity\n      style={styles.orderCard}\n      onPress={() => handleOrderPress(__order)}\n      activeOpacity={0.7}>\n      <View style={styles.orderHeader}>\n        <View style={styles.orderInfo}>\n          <Text style={styles.orderNumber}>Order #{order.id}</Text>\n          <Text style={styles.orderTime}>\n            {formatTime(order.createdAt)} • {getTimeSince(order.createdAt)}\n          </Text>\n        </View>\n        <View style={[styles.statusBadge, { backgroundColor: statusColors[order.status] }]}>\n          <Icon name={statusIcons[order.status]} size={16} color={theme.colors.white} />\n          <Text style={styles.statusText}>{order.status.toUpperCase()}</Text>\n        </View>\n      </View>\n\n      <View style={styles.orderDetails}>\n        <View style={styles.customerInfo}>\n          <Icon name=\"person\" size={16} color={theme.colors.lightText} />\n          <Text style={styles.customerText}>{order.customerName || 'Walk-in'}</Text>\n          {order.tableNumber && (\n            <>\n              <Icon\n                name=\"table-restaurant\"\n                size={16}\n                color={theme.colors.lightText}\n                style={styles.tableIcon}\n              />\n              <Text style={styles.tableText}>Table {order.tableNumber}</Text>\n            </>\n          )}\n        </View>\n\n        <View style={styles.itemsPreview}>\n          <Text style={styles.itemsText}>\n            {order.items.length} item{order.items.length !== 1 ? 's' : ''}\n          </Text>\n          <Text style={styles.itemsList}>\n            {order.items.map(item => `${item.emoji} ${item.name}`).join(', ')}\n          </Text>\n        </View>\n\n        <View style={styles.orderFooter}>\n          <View style={styles.paymentMethod}>\n            <Icon\n              name={\n                order.paymentMethod === 'cash'\n                  ? 'money'\n                  : order.paymentMethod === 'card'\n                  ? 'credit-card'\n                  : 'phone-android'\n              }\n              size={16}\n              color={theme.colors.lightText}\n            />\n            <Text style={styles.paymentText}>\n              {order.paymentMethod?.replace('_', ' ').toUpperCase()}\n            </Text>\n          </View>\n          <Text style={styles.totalAmount}>£{order.total.toFixed(2)}</Text>\n        </View>\n      </View>\n    </TouchableOpacity>\n  );\n\n  const FilterButton = ({\n    title,\n    value,\n    count,\n  }: {\n    title: string;\n    value: typeof filter;\n    count: number;\n  }) => (\n    <TouchableOpacity\n      style={[styles.filterButton, filter === value && styles.filterButtonActive]}\n      onPress={() => setFilter(__value)}>\n      <Text style={[styles.filterButtonText, filter === value && styles.filterButtonTextActive]}>\n        {title}\n      </Text>\n      {count > 0 && (\n        <View style={styles.filterBadge}>\n          <Text style={styles.filterBadgeText}>{count}</Text>\n        </View>\n      )}\n    </TouchableOpacity>\n  );\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <StatusBar barStyle=\"light-content\" backgroundColor={theme.colors.primary} />\n\n      {/* Header with Back Button */}\n      <HeaderWithBackButton\n        title=\"Orders\"\n        backgroundColor={theme.colors.primary}\n        textColor={theme.colors.white}\n        rightComponent={\n          <TouchableOpacity style={styles.searchButton}>\n            <Icon name=\"search\" size={24} color={theme.colors.white} />\n          </TouchableOpacity>\n        }\n      />\n\n      {/* Filters */}\n      <View style={styles.filtersContainer}>\n        <FilterButton title=\"All\" value=\"all\" count={orders.length} />\n        <FilterButton\n          title=\"Preparing\"\n          value=\"preparing\"\n          count={orders.filter(o => o.status === 'preparing').length}\n        />\n        <FilterButton\n          title=\"Ready\"\n          value=\"ready\"\n          count={orders.filter(o => o.status === 'ready').length}\n        />\n        <FilterButton\n          title=\"Completed\"\n          value=\"completed\"\n          count={orders.filter(o => o.status === 'completed').length}\n        />\n      </View>\n\n      {/* Orders List */}\n      <FlatList\n        data={filteredOrders}\n        keyExtractor={item => item.id!.toString()}\n        renderItem={({ item }) => <OrderCard order={item} />}\n        contentContainerStyle={styles.ordersList}\n        showsVerticalScrollIndicator={false}\n        refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}\n        ListEmptyComponent={() => (\n          <EmptyState\n            icon=\"📋\"\n            title={loading ? 'Loading orders...' : 'No orders found'}\n            message={\n              loading\n                ? 'Please wait while we fetch your orders'\n                : 'Orders will appear here when customers place them'\n            }\n            testID=\"orders-empty-state\"\n          />\n        )}\n      />\n    </SafeAreaView>\n  );\n};\n\nconst _createStyles = (theme: _unknown) =>\n  StyleSheet.create({\n    container: {\n      flex: 1,\n      backgroundColor: theme.colors.background,\n    },\n    header: {\n      backgroundColor: theme.colors.primary,\n      paddingHorizontal: 20,\n      paddingVertical: 15,\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      elevation: 4,\n      shadowColor: '#000',\n      shadowOffset: { width: 0, height: 2 },\n      shadowOpacity: 0.1,\n      shadowRadius: 4,\n    },\n    headerTitle: {\n      color: theme.colors.white,\n      fontSize: 20,\n      fontWeight: 'bold',\n    },\n    searchButton: {\n      padding: 8,\n    },\n    filtersContainer: {\n      flexDirection: 'row',\n      paddingHorizontal: 20,\n      paddingVertical: 15,\n      backgroundColor: theme.colors.white,\n      borderBottomWidth: 1,\n      borderBottomColor: theme.colors.lightGray,\n    },\n    filterButton: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      paddingHorizontal: 16,\n      paddingVertical: 8,\n      borderRadius: 20,\n      marginRight: 12,\n      backgroundColor: theme.colors.lightGray,\n    },\n    filterButtonActive: {\n      backgroundColor: theme.colors.secondary,\n    },\n    filterButtonText: {\n      fontSize: 14,\n      fontWeight: '600',\n      color: theme.colors.text,\n    },\n    filterButtonTextActive: {\n      color: theme.colors.white,\n    },\n    filterBadge: {\n      backgroundColor: theme.colors.danger,\n      borderRadius: 10,\n      paddingHorizontal: 6,\n      paddingVertical: 2,\n      marginLeft: 6,\n      minWidth: 20,\n      alignItems: 'center',\n    },\n    filterBadgeText: {\n      fontSize: 12,\n      fontWeight: 'bold',\n      color: theme.colors.white,\n    },\n    ordersList: {\n      padding: 20,\n    },\n    orderCard: {\n      backgroundColor: theme.colors.white,\n      borderRadius: 12,\n      marginBottom: 15,\n      elevation: 2,\n      shadowColor: '#000',\n      shadowOffset: { width: 0, height: 1 },\n      shadowOpacity: 0.1,\n      shadowRadius: 2,\n    },\n    orderHeader: {\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      padding: 16,\n      borderBottomWidth: 1,\n      borderBottomColor: theme.colors.lightGray,\n    },\n    orderInfo: {\n      flex: 1,\n    },\n    orderNumber: {\n      fontSize: 18,\n      fontWeight: 'bold',\n      color: theme.colors.text,\n    },\n    orderTime: {\n      fontSize: 14,\n      color: theme.colors.lightText,\n      marginTop: 2,\n    },\n    statusBadge: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      paddingHorizontal: 12,\n      paddingVertical: 6,\n      borderRadius: 16,\n    },\n    statusText: {\n      fontSize: 12,\n      fontWeight: 'bold',\n      color: theme.colors.white,\n      marginLeft: 4,\n    },\n    orderDetails: {\n      padding: 16,\n    },\n    customerInfo: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      marginBottom: 12,\n    },\n    customerText: {\n      fontSize: 14,\n      color: theme.colors.text,\n      marginLeft: 6,\n      fontWeight: '600',\n    },\n    tableIcon: {\n      marginLeft: 12,\n    },\n    tableText: {\n      fontSize: 14,\n      color: theme.colors.text,\n      marginLeft: 6,\n    },\n    itemsPreview: {\n      marginBottom: 12,\n    },\n    itemsText: {\n      fontSize: 14,\n      fontWeight: '600',\n      color: theme.colors.text,\n      marginBottom: 4,\n    },\n    itemsList: {\n      fontSize: 14,\n      color: theme.colors.lightText,\n      lineHeight: 20,\n    },\n    orderFooter: {\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n    },\n    paymentMethod: {\n      flexDirection: 'row',\n      alignItems: 'center',\n    },\n    paymentText: {\n      fontSize: 12,\n      color: theme.colors.lightText,\n      marginLeft: 6,\n      fontWeight: '600',\n    },\n    totalAmount: {\n      fontSize: 18,\n      fontWeight: 'bold',\n      color: theme.colors.secondary,\n    },\n  });\n\nexport default OrdersScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/main/POSScreen.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ';' expected.","line":214,"column":20,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { IS_DEV } from '../../env'; // Import IS_DEV\nimport {\n  StyleSheet,\n  Text,\n  View,\n  StatusBar,\n  SafeAreaView,\n  TouchableOpacity,\n  ScrollView,\n  FlatList,\n  Modal,\n  Alert,\n  Dimensions,\n  Platform,\n  Animated,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation } from '@react-navigation/native';\nimport { useTheme, useThemedStyles } from '../../design-system/ThemeProvider';\nimport { Swipeable } from 'react-native-gesture-handler';\nimport HeaderWithBackButton from '../../components/navigation/HeaderWithBackButton';\nimport useAppStore from '../../store/useAppStore';\nimport useUIStore from '../../store/useUIStore';\nimport useSettingsStore from '../../store/useSettingsStore';\nimport { MenuItem, OrderItem } from '../../types';\nimport { useRestaurantDisplayName } from '../../hooks/useRestaurantConfig';\nimport ErrorTrackingService from '../../services/ErrorTrackingService';\nimport {\n  calculatePercentageFee,\n  validateCartCalculation,\n  formatPrice,\n} from '../../utils/priceValidation';\nimport SumUpPaymentComponent from '../../components/payment/SumUpPaymentComponent';\nimport SumUpCompatibilityService from '../../services/SumUpCompatibilityService';\nimport SharedDataStore from '../../services/SharedDataStore';\nimport SimpleTextInput from '../../components/inputs/SimpleTextInput';\nimport { QuantityPill } from '../../components/inputs';\nimport CartIcon from '../../components/cart/CartIcon';\nimport CategorySearchBubble from '../../components/search/CategorySearchBubble'; // Import CategorySearchBubble\nimport CustomersService from '../../services/CustomersService';\nimport DataService from '../../services/DataService';\n\n// Get screen dimensions\nconst { width: screenWidth } = Dimensions.get('window');\nconst isTablet = screenWidth > 768;\n\n// NOTE: Mexican menu items are now loaded dynamically from backend\n// See DatabaseService.getMexicanMenuFallback() for the data structure\n\n// Define ExportedMenuItemCard outside of POSScreen for export\nconst ExportedMenuItemCard = ({\n  item,\n  theme,\n  styles: _propStyles,\n  cart,\n  handleAddToCart,\n  handleUpdateQuantity,\n}: {\n  item: MenuItem;\n  theme: unknown;\n  styles: unknown;\n  cart: OrderItem[];\n  handleAddToCart: (item: _MenuItem) => void;\n  handleUpdateQuantity: (id: _number, quantity: _number) => void;\n}) => {\n  const existingItem = cart.find(cartItem => cartItem.id === item.id);\n\n  return (\n    <View style={[propStyles.menuCard, !item.available && propStyles.menuCardDisabled]}>\n      <TouchableOpacity\n        style={propStyles.menuCardContent}\n        onPress={() => item.available && handleAddToCart(__item)}\n        activeOpacity={0.7}\n        disabled={!item.available}>\n        <Icon\n          name={item.icon || 'restaurant'}\n          size={32}\n          color={theme.colors.primary}\n          style={propStyles.menuItemIcon}\n        />\n        <Text style={propStyles.menuItemName} numberOfLines={2}>\n          {item.name}\n        </Text>\n        <Text style={propStyles.menuItemPrice}>\n          {formatPrice(item.price, '£', {\n            screenName: 'POSScreen',\n            operation: 'menu_item_price_display',\n            inputValues: { itemId: item.id, itemName: item.name },\n          })}\n        </Text>\n      </TouchableOpacity>\n\n      {existingItem && (\n        <View style={propStyles.quantityPillContainer}>\n          <QuantityPill\n            quantity={existingItem.quantity}\n            onIncrease={() => handleUpdateQuantity(item.id, existingItem.quantity + 1)}\n            onDecrease={() => handleUpdateQuantity(item.id, existingItem.quantity - 1)}\n            size=\"medium\"\n            colorScheme=\"accent\"\n            minValue={0}\n            maxValue={99}\n          />\n        </View>\n      )}\n    </View>\n  );\n};\n\n// Export for testing\nexport { ExportedMenuItemCard };\n\ntype POSScreenNavigationProp = any; // TODO: restore original DrawerNavigationProp typing\n\nconst POSScreen: React.FC = () => {\n  const navigation = useNavigation<POSScreenNavigationProp>();\n  const restaurantDisplayName = useRestaurantDisplayName();\n  const { theme } = useTheme();\n  const styles = useThemedStyles(__createStyles);\n\n  const [customerName, setCustomerName] = useState('');\n  const [customerEmail, setCustomerEmail] = useState('');\n  const [showCartModal, setShowCartModal] = useState(__false);\n  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState('sumup');\n  const [serviceChargeConfig, setServiceChargeConfig] = useState({\n    enabled: _false,\n    rate: 0,\n    description: 'Loading...',\n  });\n  const [showSumUpPayment, setShowSumUpPayment] = useState(__false);\n  const [showSumUpTest, setShowSumUpTest] = useState(__false);\n  const [serviceChargeDebugInfo, setServiceChargeDebugInfo] = useState('');\n  const [searchQuery, setSearchQuery] = useState(''); // State for search query\n\n  // Dynamic menu state\n  const [dynamicMenuItems, setDynamicMenuItems] = useState<MenuItem[]>([]);\n  const [dynamicCategories, setDynamicCategories] = useState<string[]>([]);\n  const [menuLoading, setMenuLoading] = useState(__true);\n\n  // Debug showSumUpPayment state changes\n  useEffect(() => {\n    // No-op\n  }, [showSumUpPayment]);\n\n  // Create themed styles\n\n  // Zustand stores\n  const { cart, _addToCart, removeFromCart, _updateCartItem, clearCart, _cartTotal, cartItemCount } =\n    useAppStore();\n\n  const { selectedCategory, _setSelectedCategory, showPaymentModal, setShowPaymentModal } =\n    useUIStore();\n\n  const { taxConfiguration } = useSettingsStore();\n\n  // Load platform service charge configuration with real-time updates\n  useEffect(() => {\n    const dataStore = SharedDataStore.getInstance();\n\n    const loadServiceChargeConfig = async () => {\n      try {\n        const config = await dataStore.getServiceChargeConfig();\n        setServiceChargeConfig(__config);\n      } catch (__error) {\n      }\n    };\n\n    // Initial load\n    loadServiceChargeConfig();\n\n    // Subscribe to real-time updates\n    const unsubscribe = dataStore.subscribe('serviceCharge', updatedConfig => {\n      const debugInfo = `SYNC: ${\n        updatedConfig.enabled ? updatedConfig.rate + '%' : 'OFF'\n      } @ ${new Date().toLocaleTimeString()}`;\n      setServiceChargeConfig(__updatedConfig);\n      setServiceChargeDebugInfo(__debugInfo);\n    });\n\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  // Load dynamic menu data with optimized performance\n  useEffect(() => {\n    const loadMenuData = async () => {\n      try {\n        setMenuLoading(__true);\n        const dataService = DataService.getInstance();\n\n        // Increase timeout to 15 seconds to allow for slower API responses and retries\n        const timeoutPromise = new Promise((___, _reject) =>\n          setTimeout(() => reject(new Error('Menu loading timeout')), 15000),\n        );\n\n        // Load menu items and categories with timeout\n        const [menuItems, categories] = (await Promise.race([\n          Promise.all([dataService.getMenuItems(), dataService.getMenuCategories()]),\n          timeoutPromise,\n        ])) as [any[], any[]];\n\n        setDynamicMenuItems(__menuItems);\n\n        // Extract category names for the UI\n        const categoryNames = [\n          'All',\n          ...categories.map(cat => cat.name).filter(name => name !== 'All'),\n        ];\n        setDynamicCategories(__categoryNames);\n\n          itemCount: menuItems.length,\n          categories: _categoryNames,\n        });\n      } catch (__error) {\n\n        // Log detailed error information\n📱 ======== MENU LOADING ERROR ========\n🕐 Time: ${new Date().toISOString()}\n📍 Component: POSScreen\n🔍 Error Type: ${error.constructor.name}\n💬 Message: ${error.message}\n📊 Error Details: ${JSON.stringify(__error, _null, 2)}\n=====================================\n        `);\n\n        // Determine the type of error for better user feedback\n        let errorMessage = 'Failed to load menu';\n        if (error.message === 'Menu loading timeout') {\n          errorMessage = 'Menu loading timed out. The server might be slow.';\n        } else if (error.message?.includes('API Timeout')) {\n          errorMessage = 'Unable to connect to server after multiple attempts.';\n        } else if (error.message?.includes('Network request failed')) {\n          errorMessage = 'No internet connection. Using offline menu.';\n        }\n\n        // Show user-friendly error message\n        if (Platform.OS === 'ios' || Platform.OS === 'android') {\n          Alert.alert('Menu Loading Issue', `${errorMessage}\\n\\nUsing cached menu data.`, [\n            { text: 'OK' },\n          ]);\n        }\n\n        // Use local Chucho menu data as fallback\n        try {\n          // Import the local menu data directly to avoid API calls\n          const { CHUCHO_MENU_ITEMS, CHUCHO_CATEGORIES } = await import('../../data/chuchoMenu');\n\n\n          // Transform menu items to match expected format\n          const fallbackItems = CHUCHO_MENU_ITEMS.map(item => ({\n            ...item,\n            emoji: item.image, // Map image to emoji field for compatibility\n          }));\n\n          setDynamicMenuItems(__fallbackItems);\n\n          // Set categories\n          const categoryNames = [\n            'All',\n            ...CHUCHO_CATEGORIES.map(cat => cat.name).filter(name => name !== 'All'),\n          ];\n          setDynamicCategories(__categoryNames);\n\n            itemCount: fallbackItems.length,\n            categories: _categoryNames,\n          });\n        } catch (__fallbackError) {\n          setDynamicMenuItems([]);\n          setDynamicCategories(['All']);\n        }\n      } finally {\n        setMenuLoading(__false);\n      }\n    };\n\n    loadMenuData();\n  }, []);\n\n  // Calculate taxes and fees with error tracking\n  const calculateVAT = (subtotal: _number) => {\n    if (!taxConfiguration.vatEnabled) {\n      return 0;\n    }\n\n    const vatCalculation = calculatePercentageFee(__subtotal, taxConfiguration.vatRate, {\n      operation: 'vat_calculation',\n      screenName: 'POSScreen',\n      inputValues: {\n        subtotal,\n        vatRate: taxConfiguration.vatRate,\n        vatEnabled: taxConfiguration.vatEnabled,\n      },\n    });\n\n    if (!vatCalculation.isValid) {\n      const errorTrackingService = ErrorTrackingService.getInstance();\n      errorTrackingService.trackPricingError(\n        new Error(`VAT calculation failed: ${vatCalculation.error}`),\n        { subtotal, vatRate: taxConfiguration.vatRate },\n        { screenName: 'POSScreen', action: 'vat_calculation' },\n      );\n      return 0;\n    }\n\n    return vatCalculation.value;\n  };\n\n  const calculateServiceFee = (subtotal: _number) => {\n    if (!serviceChargeConfig.enabled) {\n      return 0;\n    }\n\n    const serviceFeeCalculation = calculatePercentageFee(__subtotal, serviceChargeConfig.rate, {\n      operation: 'service_fee_calculation',\n      screenName: 'POSScreen',\n      inputValues: {\n        subtotal,\n        serviceChargeRate: serviceChargeConfig.rate,\n        serviceChargeEnabled: serviceChargeConfig.enabled,\n      },\n    });\n\n    if (!serviceFeeCalculation.isValid) {\n      const errorTrackingService = ErrorTrackingService.getInstance();\n      errorTrackingService.trackPricingError(\n        new Error(`Service fee calculation failed: ${serviceFeeCalculation.error}`),\n        { subtotal, serviceChargeRate: serviceChargeConfig.rate },\n        { screenName: 'POSScreen', action: 'service_fee_calculation' },\n      );\n      return 0;\n    }\n\n    return serviceFeeCalculation.value;\n  };\n\n  const calculateCartTotal = () => {\n    try {\n      const cartCalculation = validateCartCalculation(\n        cart,\n        taxConfiguration.vatEnabled ? taxConfiguration.vatRate : _undefined,\n        serviceChargeConfig.enabled ? serviceChargeConfig.rate : _undefined,\n        {\n          operation: 'cart_total_calculation',\n          screenName: 'POSScreen',\n          inputValues: {\n            cartItems: cart.length,\n            vatEnabled: taxConfiguration.vatEnabled,\n            vatRate: taxConfiguration.vatRate,\n            serviceChargeEnabled: serviceChargeConfig.enabled,\n            serviceChargeRate: serviceChargeConfig.rate,\n          },\n        },\n      );\n\n      if (cartCalculation.hasErrors) {\n        const errorTrackingService = ErrorTrackingService.getInstance();\n        errorTrackingService.trackPricingError(\n          new Error('Cart total calculation has errors'),\n          {\n            subtotalValid: cartCalculation.subtotal.isValid,\n            taxValid: cartCalculation.tax.isValid,\n            serviceChargeValid: cartCalculation.serviceCharge.isValid,\n            totalValid: cartCalculation.total.isValid,\n            cart: cart.map(item => ({\n              id: item.id,\n              name: item.name,\n              price: item.price,\n              quantity: item.quantity,\n            })),\n          },\n          { screenName: 'POSScreen', action: 'cart_total_calculation' },\n        );\n      }\n\n      return cartCalculation.total.value;\n    } catch (__error) {\n      const errorTrackingService = ErrorTrackingService.getInstance();\n      errorTrackingService.trackPricingError(\n        error instanceof Error ? error : new Error(`Cart total calculation error: ${error}`),\n        { cart },\n        { screenName: 'POSScreen', action: 'cart_total_calculation' },\n      );\n      return 0;\n    }\n  };\n\n  const filteredItems = dynamicMenuItems\n    .filter(item => selectedCategory === 'All' || item.category === selectedCategory)\n    .filter(item =>\n      searchQuery ? item.name.toLowerCase().includes(searchQuery.toLowerCase()) : _true,\n    );\n\n  const handleAddToCart = (item: _MenuItem) => {\n    const orderItem: OrderItem = {\n      id: item.id,\n      name: item.name,\n      price: item.price,\n      quantity: 1,\n      emoji: item.emoji,\n    };\n    addToCart(__orderItem);\n  };\n\n  const handleUpdateQuantity = (id: _number, quantity: _number) => {\n    if (quantity <= 0) {\n      removeFromCart(__id);\n    } else {\n      updateCartItem(__id, { quantity });\n    }\n  };\n\n  const processPayment = async () => {\n    // Upsert customer before payment if we have both name & valid email\n    const emailRegex = /^\\S+@\\S+\\.[A-Za-z]{2,}$/;\n    if (customerEmail && emailRegex.test(__customerEmail)) {\n      try {\n        await CustomersService.saveCustomer({\n          name: customerName?.trim() || undefined,\n          email: customerEmail.trim(),\n        });\n      } catch (__err) {\n      }\n    }\n\n    const totalAmount = calculateCartTotal();\n\n    // Close payment modal first\n    setShowPaymentModal(__false);\n\n    switch (__selectedPaymentMethod) {\n      case 'sumup':\n        // Check SumUp compatibility before attempting payment\n        const checkSumUpCompatibility = async () => {\n          const compatibilityService = SumUpCompatibilityService.getInstance();\n          const shouldAttempt = await compatibilityService.shouldAttemptSumUp();\n\n          if (__shouldAttempt) {\n            setShowSumUpPayment(__true);\n          } else {\n            const fallbackMethods = compatibilityService.getFallbackPaymentMethods();\n\n            Alert.alert(\n              'Tap to Pay Unavailable',\n              'Tap to Pay on iPhone requires Apple approval. Choose an alternative payment method:',\n              [\n                {\n                  text: 'QR Code Payment (1.2%)',\n                  onPress: () => {\n                    navigation.navigate('QRCodePayment', {\n                      amount: _totalAmount,\n                      orderItems: _cart,\n                      customerName: customerName || 'Customer',\n                      onPaymentComplete: _handlePaymentComplete,\n                    });\n                  },\n                },\n                {\n                  text: 'Cash Payment (__Free)',\n                  onPress: () => {\n                    handlePaymentComplete({\n                      success: _true,\n                      paymentMethod: 'cash',\n                      amount: _totalAmount,\n                      currency: 'GBP',\n                    });\n                  },\n                },\n                {\n                  text: 'Cancel',\n                  style: 'cancel',\n                  onPress: () => setShowPaymentModal(__true),\n                },\n              ],\n            );\n          }\n        };\n        checkSumUpCompatibility();\n        break;\n\n      case 'square':\n        // Navigate to Square payment selection screen\n        Alert.alert('Square Payment', 'Choose your Square payment method:', [\n          {\n            text: 'Card Payment',\n            onPress: () =>\n              navigation.navigate('SquareCardPayment', {\n                amount: _totalAmount,\n                currency: 'GBP',\n                description: `Order for ${customerName || 'Customer'}`,\n                onPaymentComplete: _handlePaymentComplete,\n                onPaymentCancelled: () => setShowPaymentModal(__true),\n              }),\n          },\n          {\n            text: 'Contactless (Apple/Google Pay)',\n            onPress: () =>\n              navigation.navigate('SquareContactlessPayment', {\n                amount: _totalAmount,\n                currency: 'GBP',\n                description: `Order for ${customerName || 'Customer'}`,\n                onPaymentComplete: _handlePaymentComplete,\n                onPaymentCancelled: () => setShowPaymentModal(__true),\n              }),\n          },\n          {\n            text: 'Cancel',\n            style: 'cancel',\n            onPress: () => setShowPaymentModal(__true),\n          },\n        ]);\n        break;\n\n      case 'qr':\n        // Navigate to QR payment screen\n        navigation.navigate('QRCodePayment', {\n          amount: _totalAmount,\n          orderItems: _cart,\n          customerName: customerName || 'Customer',\n          onPaymentComplete: _handlePaymentComplete,\n        });\n        break;\n\n      case 'cash':\n        // Handle cash payment directly\n        handlePaymentComplete({\n          success: _true,\n          paymentMethod: 'cash',\n          amount: _totalAmount,\n          currency: 'GBP',\n        });\n        break;\n\n      case 'stripe':\n        // Handle Stripe payment (fallback option)\n        Alert.alert(\n          'Stripe Payment',\n          'Stripe payment integration coming soon. Please use another payment method.',\n          [{ text: 'OK', onPress: () => setShowPaymentModal(__true) }],\n        );\n        break;\n\n      default:\n        Alert.alert('Payment Error', 'Please select a payment method.', [\n          { text: 'OK', onPress: () => setShowPaymentModal(__true) },\n        ]);\n    }\n  };\n\n  const handlePaymentComplete = (result: _unknown) => {\n    if (result.success) {\n      Alert.alert(\n        'Payment Successful',\n        `Order for ${\n          customerName || 'Customer'\n        } has been processed successfully!\\nPayment Method: ${\n          result.paymentMethod\n        }\\nAmount: ${formatPrice(result.amount, '£', {\n          screenName: 'POSScreen',\n          operation: 'payment_success_display',\n        })}\\n\\nThank you for your business!`,\n        [\n          {\n            text: 'OK',\n            onPress: () => {\n              clearCart();\n              setCustomerName('');\n              setShowCartModal(__false);\n            },\n          },\n        ],\n      );\n    } else {\n      Alert.alert(\n        'Payment Failed',\n        result.error || 'Payment could not be processed. Please try again.',\n        [{ text: 'OK', onPress: () => setShowPaymentModal(__true) }],\n      );\n    }\n  };\n\n  // SumUp payment completion handlers\n  const handleSumUpPaymentComplete = (\n    success: _boolean,\n    transactionCode?: _string,\n    error?: _string,\n  ) => {\n    setShowSumUpPayment(__false);\n\n    if (success && transactionCode) {\n      Alert.alert(\n        'Payment Successful!',\n        `Your payment has been processed successfully.\\n\\nTransaction Code: ${transactionCode}\\nAmount: ${formatPrice(\n          calculateCartTotal(),\n          '£',\n          { screenName: 'POSScreen', operation: 'payment_success_display' },\n        )}`,\n        [\n          {\n            text: 'OK',\n            onPress: () => {\n              clearCart();\n              setCustomerName('');\n            },\n          },\n        ],\n      );\n    } else {\n      Alert.alert(\n        'Payment Failed',\n        error || 'The payment could not be processed. Please try again.',\n        [\n          {\n            text: 'Retry',\n            onPress: () => setShowPaymentModal(__true),\n          },\n          {\n            text: 'Cancel',\n            style: 'cancel',\n          },\n        ],\n      );\n    }\n  };\n\n  const handleSumUpPaymentCancel = () => {\n    setShowSumUpPayment(__false);\n    // Show the payment modal again for user to try again\n    setShowPaymentModal(__true);\n  };\n\n  const MenuItemCard = ({ item }: { item: MenuItem }) => {\n    const existingItem = cart.find(cartItem => cartItem.id === item.id);\n\n    return (\n      <View style={[styles.menuCard, !item.available && styles.menuCardDisabled]}>\n        <TouchableOpacity\n          style={styles.menuCardContent}\n          onPress={() => item.available && handleAddToCart(__item)}\n          activeOpacity={0.7}\n          disabled={!item.available}>\n          <Icon\n            name={item.icon || 'restaurant'}\n            size={32}\n            color={theme.colors.primary}\n            style={styles.menuItemIcon}\n          />\n          <Text style={styles.menuItemName} numberOfLines={2}>\n            {item.name}\n          </Text>\n          <Text style={styles.menuItemPrice}>\n            {formatPrice(item.price, '£', {\n              screenName: 'POSScreen',\n              operation: 'menu_item_price_display',\n              inputValues: { itemId: item.id, itemName: item.name },\n            })}\n          </Text>\n        </TouchableOpacity>\n\n        {/* Quick Quantity Controls */}\n        {existingItem && (\n          <View style={styles.menuItemQuantityControls}>\n            <TouchableOpacity\n              style={styles.menuQuantityButton}\n              onPress={() => handleUpdateQuantity(item.id, existingItem.quantity - 1)}>\n              <Icon name=\"remove\" size={20} color={theme.colors.white} />\n            </TouchableOpacity>\n            <Text style={styles.menuQuantityText}>{existingItem.quantity}</Text>\n            <TouchableOpacity\n              style={styles.menuQuantityButton}\n              onPress={() => handleUpdateQuantity(item.id, existingItem.quantity + 1)}>\n              <Icon name=\"add\" size={20} color={theme.colors.white} />\n            </TouchableOpacity>\n          </View>\n        )}\n      </View>\n    );\n  };\n\n  const CartItem = ({ item }: { item: OrderItem }) => {\n    const menuItem = dynamicMenuItems.find(mi => mi.id === item.id);\n\n    const renderRightActions = (\n      progress: Animated.AnimatedInterpolation<number>,\n      dragX: Animated.AnimatedValue,\n    ) => {\n      const scale = dragX.interpolate({\n        inputRange: [-100, 0],\n        outputRange: [1, 0],\n        extrapolate: 'clamp',\n      });\n\n      return (\n        <TouchableOpacity style={styles.deleteButton} onPress={() => removeFromCart(item.id)}>\n          <Animated.View style={{ transform: [{ scale }] }}>\n            <Icon name=\"delete\" size={24} color={theme.colors.white} />\n            <Text style={styles.deleteButtonText}>Delete</Text>\n          </Animated.View>\n        </TouchableOpacity>\n      );\n    };\n\n    return (\n      <Swipeable renderRightActions={renderRightActions} overshootRight={false} friction={2}>\n        <View style={styles.cartItem}>\n          <View style={styles.cartItemInfo}>\n            <View style={styles.cartItemHeader}>\n              <Text style={styles.cartItemEmoji}>{item.emoji}</Text>\n              <View style={styles.cartItemDetails}>\n                <Text style={styles.cartItemName}>{item.name}</Text>\n                <Text style={styles.cartItemPrice}>\n                  {formatPrice(item.price, '£', {\n                    screenName: 'POSScreen',\n                    operation: 'cart_item_price_display',\n                    inputValues: { itemId: item.id },\n                  })}{' '}\n                  each\n                </Text>\n              </View>\n            </View>\n            {menuItem?.description && (\n              <Text style={styles.cartItemDescription} numberOfLines={2}>\n                {menuItem.description}\n              </Text>\n            )}\n          </View>\n          <View style={styles.cartItemActions}>\n            <View style={styles.cartItemQuantity}>\n              <TouchableOpacity\n                style={styles.quantityButton}\n                onPress={() => handleUpdateQuantity(item.id, item.quantity - 1)}>\n                <Icon name=\"remove\" size={20} color={theme.colors.text} />\n              </TouchableOpacity>\n              <Text style={styles.quantityText}>{item.quantity}</Text>\n              <TouchableOpacity\n                style={styles.quantityButton}\n                onPress={() => handleUpdateQuantity(item.id, item.quantity + 1)}>\n                <Icon name=\"add\" size={20} color={theme.colors.text} />\n              </TouchableOpacity>\n            </View>\n            <Text style={styles.cartItemTotal}>\n              {formatPrice(item.price * item.quantity, '£', {\n                screenName: 'POSScreen',\n                operation: 'cart_item_total_display',\n                inputValues: { itemId: item.id, price: item.price, quantity: item.quantity },\n              })}\n            </Text>\n          </View>\n        </View>\n      </Swipeable>\n    );\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <StatusBar backgroundColor={theme.colors.primary} barStyle=\"light-content\" />\n\n      {/* Header with Back Button */}\n      <HeaderWithBackButton\n        title={restaurantDisplayName}\n        backgroundColor={theme.colors.primary}\n        textColor={theme.colors.white}\n        rightComponent={\n          <View style={styles.headerActions}>\n            {IS_DEV && (\n              <TouchableOpacity\n                testID=\"dev-mode-toggle-button\"\n                style={[styles.devButton, { marginRight: 8 }]}\n                onPress={() => {\n                  setShowSumUpTest(!showSumUpTest);\n                }}>\n                <Icon name=\"bug-report\" size={20} color={theme.colors.white} />\n              </TouchableOpacity>\n            )}\n\n            <CartIcon\n              count={cartItemCount()}\n              onPress={() => setShowCartModal(__true)}\n              testID=\"shopping-cart-button\"\n            />\n          </View>\n        }\n      />\n\n      {/* Full Width Menu */}\n      <View style={styles.fullWidthPanel}>\n        {/* Quick Stats Bar */}\n        <View style={styles.statsBar}>\n          <View style={styles.statItem}>\n            <Text style={styles.statValue}>{cartItemCount()}</Text>\n            <Text style={styles.statLabel}>Items</Text>\n          </View>\n          <View style={styles.statItem}>\n            <Text style={styles.statValue}>\n              {formatPrice(cartTotal(), '£', {\n                screenName: 'POSScreen',\n                operation: 'cart_total_stats_display',\n              })}\n            </Text>\n            <Text style={styles.statLabel}>Subtotal</Text>\n          </View>\n          <View style={styles.statItem}>\n            <Text style={styles.statValue}>\n              #\n              {Math.floor(Math.random() * 1000)\n                .toString()\n                .padStart(3, '0')}\n            </Text>\n            <Text style={styles.statLabel}>Order</Text>\n          </View>\n          {/* Service Charge Sync Indicator */}\n          <View style={[styles.statItem, styles.serviceChargeIndicator]}>\n            <Text\n              style={[\n                styles.statValue,\n                {\n                  color: serviceChargeConfig.enabled ? '#00D4AA' : '#999',\n                  fontSize: 14,\n                  fontWeight: '600',\n                },\n              ]}>\n              {serviceChargeConfig.enabled ? `${serviceChargeConfig.rate}%` : 'OFF'}\n            </Text>\n            <Text style={styles.statLabel}>Service</Text>\n            {serviceChargeDebugInfo && (\n              <Text style={styles.syncIndicator}>{serviceChargeDebugInfo}</Text>\n            )}\n          </View>\n        </View>\n\n        {/* Category Tabs */}\n        <ScrollView\n          horizontal\n          showsHorizontalScrollIndicator={false}\n          style={styles.categoryTabs}\n          contentContainerStyle={styles.categoryTabsContent}>\n          <CategorySearchBubble\n            onSearchChange={setSearchQuery}\n            style={styles.searchBubbleStyle} // Added style for potential adjustments\n          />\n          {dynamicCategories.map(category => (\n            <TouchableOpacity\n              key={category}\n              style={[\n                styles.categoryTab,\n                selectedCategory === category && styles.categoryTabActive,\n              ]}\n              onPress={() => setSelectedCategory(__category)}>\n              <Text\n                style={[\n                  styles.categoryTabText,\n                  selectedCategory === category && styles.categoryTabTextActive,\n                ]}>\n                {category}\n              </Text>\n            </TouchableOpacity>\n          ))}\n        </ScrollView>\n\n        {/* Menu Grid */}\n        {menuLoading ? (\n          <View style={styles.loadingContainer}>\n            <Icon\n              name=\"restaurant-menu\"\n              size={48}\n              color={theme.colors.primary}\n              style={{ marginBottom: 16 }}\n            />\n            <Text style={styles.loadingText}>Loading menu...</Text>\n            <Text style={[styles.loadingText, { fontSize: 14, opacity: 0.7, marginTop: 8 }]}>\n              Connecting to backend...\n            </Text>\n          </View>\n        ) : dynamicMenuItems.length === 0 ? (\n          <View style={styles.loadingContainer}>\n            <Icon\n              name=\"restaurant-menu\"\n              size={48}\n              color={theme.colors.mediumGray}\n              style={{ marginBottom: 16 }}\n            />\n            <Text style={[styles.loadingText, { color: theme.colors.text }]}>\n              No menu items available\n            </Text>\n            <Text\n              style={[\n                styles.loadingText,\n                { fontSize: 14, opacity: 0.7, marginTop: 8, color: theme.colors.mediumGray },\n              ]}>\n              Please contact support to set up your menu\n            </Text>\n            <TouchableOpacity\n              style={[styles.retryButton, { backgroundColor: theme.colors.primary }]}\n              onPress={async () => {\n                setMenuLoading(__true);\n                // Reset states to ensure clean retry\n                setDynamicMenuItems([]);\n                setDynamicCategories(['All']);\n\n                try {\n                  const dataService = DataService.getInstance();\n                  const [menuItems, categories] = await Promise.all([\n                    dataService.getMenuItems(),\n                    dataService.getMenuCategories(),\n                  ]);\n\n                  setDynamicMenuItems(menuItems || []);\n                  const categoryNames = [\n                    'All',\n                    ...(categories || []).map(cat => cat.name).filter(name => name !== 'All'),\n                  ];\n                  setDynamicCategories(__categoryNames);\n                } catch (__error) {\n                  // Set empty arrays on error to ensure consistent state\n                  setDynamicMenuItems([]);\n                  setDynamicCategories(['All']);\n\n                  // Show error to user\n                  Alert.alert(\n                    'Failed to Load Menu',\n                    'Unable to connect to the server. Please check your internet connection and try again.',\n                    [{ text: 'OK' }],\n                  );\n                } finally {\n                  setMenuLoading(__false);\n                }\n              }}>\n              <Text style={{ color: theme.colors.white, fontWeight: '600' }}>Retry</Text>\n            </TouchableOpacity>\n          </View>\n        ) : filteredItems.length === 0 ? (\n          <View style={styles.loadingContainer}>\n            <Icon\n              name=\"search-off\"\n              size={48}\n              color={theme.colors.mediumGray}\n              style={{ marginBottom: 16 }}\n            />\n            <Text style={[styles.loadingText, { color: theme.colors.text }]}>No items found</Text>\n            <Text\n              style={[\n                styles.loadingText,\n                { fontSize: 14, opacity: 0.7, marginTop: 8, color: theme.colors.mediumGray },\n              ]}>\n              Try a different search or category\n            </Text>\n          </View>\n        ) : (\n          <FlatList\n            data={filteredItems}\n            renderItem={({ item }) => <MenuItemCard item={item} />}\n            keyExtractor={item => item.id.toString()}\n            numColumns={isTablet ? 4 : 3}\n            columnWrapperStyle={styles.menuRow}\n            contentContainerStyle={styles.menuGrid}\n            showsVerticalScrollIndicator={false}\n            testID=\"menu-flat-list\" // Added testID\n          />\n        )}\n      </View>\n\n      {/* Cart Modal */}\n      <Modal\n        visible={showCartModal}\n        animationType=\"slide\"\n        transparent={true}\n        onRequestClose={() => setShowCartModal(__false)}>\n        <View style={styles.modalOverlay}>\n          <View style={styles.cartModal}>\n            <View style={styles.cartModalHeader}>\n              <View style={styles.cartTitleSection}>\n                <Text style={styles.cartTitle}>Current Order</Text>\n                <Text style={styles.cartSubtitle}>\n                  Order #\n                  {Math.floor(Math.random() * 1000)\n                    .toString()\n                    .padStart(3, '0')}{' '}\n                  • {new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n                </Text>\n              </View>\n              <View style={styles.cartModalButtons}>\n                {cart.length > 0 && (\n                  <TouchableOpacity style={styles.clearButton} onPress={clearCart}>\n                    <Text style={styles.clearButtonText}>Clear All</Text>\n                  </TouchableOpacity>\n                )}\n                <TouchableOpacity\n                  style={styles.modalCloseButton}\n                  onPress={() => setShowCartModal(__false)}>\n                  <Icon name=\"close\" size={30} color={theme.colors.error || '#FF0000'} />\n                </TouchableOpacity>\n              </View>\n            </View>\n\n            {cart.length === 0 ? (\n              <View style={styles.emptyCart}>\n                <Icon name=\"shopping-cart\" size={64} color={theme.colors.lightGray} />\n                <Text style={styles.emptyCartText}>Cart is empty</Text>\n                <Text style={styles.emptyCartSubtext}>Add items to get started</Text>\n              </View>\n            ) : (\n              <>\n                <FlatList\n                  style={styles.cartList}\n                  data={cart}\n                  renderItem={({ item }) => <CartItem item={item} />}\n                  keyExtractor={item => item.id.toString()}\n                  contentContainerStyle={{ paddingBottom: 120 }} // Added padding for fixed footer\n                />\n\n                {/* Fixed Footer */}\n                <View style={styles.cartFooterFixed}>\n                  <View style={styles.cartSummary}>\n                    <View style={styles.summarySection}>\n                      <Text style={styles.summarySectionTitle}>Order Summary</Text>\n                      <View style={styles.summaryRow}>\n                        <Text style={styles.summaryLabel}>Items ({cartItemCount()})</Text>\n                        <Text style={styles.summaryValue}>\n                          {formatPrice(cartTotal(), '£', {\n                            screenName: 'POSScreen',\n                            operation: 'cart_modal_subtotal_display',\n                          })}\n                        </Text>\n                      </View>\n                    </View>\n\n                    <View style={styles.summarySection}>\n                      <Text style={styles.summarySectionTitle}>Taxes & Fees</Text>\n                      {taxConfiguration.vatEnabled && (\n                        <View style={styles.summaryRow}>\n                          <Text style={styles.summaryLabel}>VAT ({taxConfiguration.vatRate}%)</Text>\n                          <Text style={styles.summaryValue}>\n                            {formatPrice(calculateVAT(cartTotal()), '£', {\n                              screenName: 'POSScreen',\n                              operation: 'cart_modal_vat_display',\n                            })}\n                          </Text>\n                        </View>\n                      )}\n                      {serviceChargeConfig.enabled && (\n                        <View style={styles.summaryRow}>\n                          <Text style={styles.summaryLabel}>\n                            Service Fee ({serviceChargeConfig.rate}%)\n                          </Text>\n                          <Text style={styles.summaryValue}>\n                            {formatPrice(calculateServiceFee(cartTotal()), '£', {\n                              screenName: 'POSScreen',\n                              operation: 'cart_modal_service_fee_display',\n                            })}\n                          </Text>\n                        </View>\n                      )}\n                    </View>\n\n                    <View style={[styles.summaryRow, styles.totalRow]}>\n                      <Text style={styles.totalLabel}>Total</Text>\n                      <Text style={styles.totalAmount}>\n                        {formatPrice(calculateCartTotal(), '£', {\n                          screenName: 'POSScreen',\n                          operation: 'cart_modal_total_display',\n                        })}\n                      </Text>\n                    </View>\n                  </View>\n\n                  <TouchableOpacity\n                    style={styles.chargeButton}\n                    onPress={() => {\n                      setShowCartModal(__false);\n                      navigation.navigate('ServiceChargeSelection');\n                    }}\n                    testID=\"charge-button\" // Added testID\n                  >\n                    <Text style={styles.chargeButtonText}>\n                      Charge{' '}\n                      {formatPrice(calculateCartTotal(), '£', {\n                        screenName: 'POSScreen',\n                        operation: 'payment_button_amount_display',\n                      })}\n                    </Text>\n                  </TouchableOpacity>\n                </View>\n              </>\n            )}\n          </View>\n        </View>\n      </Modal>\n\n      {/* Payment Modal */}\n      <Modal\n        visible={showPaymentModal}\n        animationType=\"fade\"\n        transparent={true}\n        onRequestClose={() => setShowPaymentModal(__false)}>\n        <View style={styles.modalOverlay}>\n          <View style={styles.paymentModal}>\n            <View style={styles.modalHeader}>\n              <Text style={styles.modalTitle}>Payment</Text>\n              <TouchableOpacity\n                onPress={() => setShowPaymentModal(__false)}\n                style={styles.modalCloseButton}>\n                <Icon name=\"close\" size={24} color={theme.colors.text} />\n              </TouchableOpacity>\n            </View>\n\n            <View style={styles.modalContent}>\n              <SimpleTextInput\n                value={customerName}\n                onValueChange={setCustomerName}\n                placeholder=\"Customer name (__optional)\"\n                style={styles.input}\n                clearButtonMode=\"while-editing\"\n                autoCapitalize=\"words\"\n              />\n\n              <SimpleTextInput\n                value={customerEmail}\n                onValueChange={setCustomerEmail}\n                placeholder=\"Customer e-mail (__optional)\"\n                keyboardType=\"email-address\"\n                autoCapitalize=\"none\"\n                style={styles.input}\n                clearButtonMode=\"while-editing\"\n              />\n\n              {/* Order Summary */}\n              <View style={styles.orderSummary}>\n                <Text style={styles.orderSummaryTitle}>Order Summary</Text>\n                {cart.map(item => {\n                  const menuItem = dynamicMenuItems.find(mi => mi.id === item.id);\n                  return (\n                    <View key={item.id} style={styles.orderSummaryItem}>\n                      <View style={styles.orderSummaryItemHeader}>\n                        <Text style={styles.orderSummaryEmoji}>{item.emoji}</Text>\n                        <Text style={styles.orderSummaryItemName}>{item.name}</Text>\n                        <Text style={styles.orderSummaryQuantity}>x{item.quantity}</Text>\n                        <Text style={styles.orderSummaryPrice}>\n                          {formatPrice(item.price * item.quantity, '£', {\n                            screenName: 'POSScreen',\n                            operation: 'order_summary_item_total_display',\n                            inputValues: { itemId: item.id },\n                          })}\n                        </Text>\n                      </View>\n                      {menuItem?.description && (\n                        <Text style={styles.orderSummaryDescription} numberOfLines={1}>\n                          {menuItem.description}\n                        </Text>\n                      )}\n                    </View>\n                  );\n                })}\n              </View>\n\n              <View style={styles.paymentMethodsSection}>\n                <Text style={styles.paymentMethodsTitle}>Payment Method</Text>\n                <View style={styles.paymentMethods}>\n                  <TouchableOpacity\n                    style={[\n                      styles.paymentMethod,\n                      selectedPaymentMethod === 'sumup' && styles.paymentMethodSelected,\n                      styles.recommendedPaymentMethod,\n                    ]}\n                    onPress={() => setSelectedPaymentMethod('sumup')}>\n                    <View style={styles.recommendedBadge}>\n                      <Text style={styles.recommendedText}>RECOMMENDED</Text>\n                    </View>\n                    <Icon name=\"credit-card\" size={24} color=\"#00D4AA\" />\n                    <Text style={styles.paymentMethodText}>SumUp</Text>\n                    <Text style={styles.paymentMethodSubtext}>0.69% • Cards & Mobile Pay</Text>\n                  </TouchableOpacity>\n                  <TouchableOpacity\n                    style={[\n                      styles.paymentMethod,\n                      selectedPaymentMethod === 'square' && styles.paymentMethodSelected,\n                    ]}\n                    onPress={() => setSelectedPaymentMethod('square')}>\n                    <Icon name=\"credit-card\" size={24} color=\"#3E4348\" />\n                    <Text style={styles.paymentMethodText}>Square</Text>\n                    <Text style={styles.paymentMethodSubtext}>1.75% • Cards & Digital Wallets</Text>\n                  </TouchableOpacity>\n                  <TouchableOpacity\n                    style={[\n                      styles.paymentMethod,\n                      selectedPaymentMethod === 'qr' && styles.paymentMethodSelected,\n                    ]}\n                    onPress={() => setSelectedPaymentMethod('qr')}>\n                    <Icon name=\"qr-code-scanner\" size={24} color={theme.colors.primary} />\n                    <Text style={styles.paymentMethodText}>QR Payment</Text>\n                    <Text style={styles.paymentMethodSubtext}>1.2% • Customer mobile app</Text>\n                  </TouchableOpacity>\n                  <TouchableOpacity\n                    style={[\n                      styles.paymentMethod,\n                      selectedPaymentMethod === 'cash' && styles.paymentMethodSelected,\n                    ]}\n                    onPress={() => setSelectedPaymentMethod('cash')}>\n                    <Icon name=\"attach-money\" size={24} color={theme.colors.success} />\n                    <Text style={styles.paymentMethodText}>Cash</Text>\n                    <Text style={styles.paymentMethodSubtext}>No processing fee</Text>\n                  </TouchableOpacity>\n                  <TouchableOpacity\n                    style={[\n                      styles.paymentMethod,\n                      selectedPaymentMethod === 'stripe' && styles.paymentMethodSelected,\n                    ]}\n                    onPress={() => setSelectedPaymentMethod('stripe')}>\n                    <Icon name=\"credit-card\" size={24} color=\"#635BFF\" />\n                    <Text style={styles.paymentMethodText}>Stripe</Text>\n                    <Text style={styles.paymentMethodSubtext}>1.4% + 20p • Backup option</Text>\n                  </TouchableOpacity>\n                </View>\n              </View>\n\n              <View style={styles.modalTotal}>\n                <Text style={styles.modalTotalLabel}>Total to Pay</Text>\n                <Text style={styles.modalTotalAmount}>\n                  {formatPrice(calculateCartTotal(), '£', {\n                    screenName: 'POSScreen',\n                    operation: 'payment_modal_total_display',\n                  })}\n                </Text>\n              </View>\n\n              <TouchableOpacity style={styles.confirmButton} onPress={processPayment}>\n                <Text style={styles.confirmButtonText}>Confirm Payment</Text>\n              </TouchableOpacity>\n            </View>\n          </View>\n        </View>\n      </Modal>\n\n      {/* SumUp Payment Component */}\n      {showSumUpPayment && (\n        <>\n            '🔄 Rendering SumUpPaymentComponent with showSumUpPayment:',\n            showSumUpPayment,\n          )}\n          <SumUpPaymentComponent\n            amount={calculateCartTotal()}\n            currency=\"GBP\"\n            title={`Order for ${customerName || 'Customer'}`}\n            onPaymentComplete={handleSumUpPaymentComplete}\n            onPaymentCancel={handleSumUpPaymentCancel}\n          />\n        </>\n      )}\n    </SafeAreaView>\n  );\n};\n\nconst createStyles = (theme: _unknown) =>\n  StyleSheet.create({\n    container: {\n      flex: 1,\n      backgroundColor: theme.colors.background,\n    },\n    header: {\n      backgroundColor: theme.colors.primary,\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      paddingHorizontal: 20,\n      paddingVertical: 8,\n      height: 48, // Reduced for more professional look\n      shadowColor: '#000',\n      shadowOffset: { width: 0, height: 2 },\n      shadowOpacity: 0.1,\n      shadowRadius: 4,\n      elevation: 5,\n    },\n    headerLeft: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      flex: 1,\n    },\n    logoContainer: {\n      marginLeft: 16,\n      flexDirection: 'row',\n      alignItems: 'baseline',\n    },\n    logoText: {\n      fontSize: 24,\n      fontWeight: 'bold',\n      color: theme.colors.white,\n      letterSpacing: -0.5,\n    },\n    logoOrange: {\n      color: '#FF6B35',\n    },\n    posSubtext: {\n      fontSize: 12,\n      fontWeight: '500',\n      color: 'rgba(255, 255, 255, 0.8)',\n      marginLeft: 4,\n    },\n    cloverLogo: {\n      fontSize: 24,\n      fontWeight: 'bold',\n      color: theme.colors.white,\n      letterSpacing: -0.5,\n    },\n    headerSubtitle: {\n      fontSize: 12,\n      color: 'rgba(255, 255, 255, 0.8)',\n      marginTop: 2,\n    },\n    headerTitle: {\n      fontSize: 20,\n      fontWeight: '600',\n      color: theme.colors.white,\n    },\n    headerRight: {\n      flexDirection: 'row',\n      alignItems: 'center',\n    },\n    headerActions: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      gap: 12,\n    },\n    headerIconButton: {\n      padding: 8,\n      marginRight: 12,\n    },\n    headerButton: {\n      marginLeft: 20,\n      padding: 4,\n    },\n    menuButton: {\n      padding: 8,\n    },\n    headerCenter: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n    logoContainer: {\n      marginLeft: 16,\n      flexDirection: 'column',\n      alignItems: 'flex-start',\n    },\n    restaurantName: {\n      fontSize: 20,\n      fontWeight: 'bold',\n      color: theme.colors.white,\n      letterSpacing: -0.5,\n    },\n    poweredBy: {\n      fontSize: 10,\n      fontWeight: '400',\n      color: 'rgba(255, 255, 255, 0.7)',\n      marginTop: 2,\n    },\n    headerLogo: {\n      width: 125,\n      height: 125,\n    },\n    logoText: {\n      fontSize: 24,\n      fontWeight: 'bold',\n      color: theme.colors.white,\n    },\n    logoOrange: {\n      color: theme.colors.warning,\n    },\n    headerActions: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      gap: 12,\n    },\n    scannerButton: {\n      padding: 8,\n      borderRadius: 8,\n      backgroundColor: 'rgba(255, 255, 255, 0.1)',\n    },\n    devButton: {\n      padding: 8,\n      borderRadius: 8,\n      backgroundColor: 'rgba(255, 255, 255, 0.1)',\n    },\n    mainContent: {\n      flex: 1,\n    },\n    fullWidthPanel: {\n      flex: 1,\n      backgroundColor: theme.colors.white,\n    },\n    statsBar: {\n      flexDirection: 'row',\n      backgroundColor: theme.colors.white,\n      paddingVertical: 12,\n      paddingHorizontal: 20,\n      borderBottomWidth: 1,\n      borderBottomColor: theme.colors.border,\n      justifyContent: 'space-around',\n    },\n    statItem: {\n      alignItems: 'center',\n    },\n    statValue: {\n      fontSize: 20,\n      fontWeight: 'bold',\n      color: theme.colors.primary,\n    },\n    statLabel: {\n      fontSize: 12,\n      color: theme.colors.darkGray,\n      marginTop: 2,\n    },\n    serviceChargeIndicator: {\n      borderLeftWidth: 1,\n      borderLeftColor: theme.colors.border,\n      paddingLeft: 16,\n      marginLeft: 16,\n    },\n    syncIndicator: {\n      fontSize: 8,\n      color: '#666',\n      textAlign: 'center',\n      marginTop: 2,\n      fontWeight: '500',\n    },\n    fullPanel: {\n      flex: 1,\n      backgroundColor: theme.colors.white,\n    },\n    categoryTabs: {\n      backgroundColor: theme.colors.white,\n      borderBottomWidth: 1,\n      borderBottomColor: theme.colors.border,\n    },\n    categoryTabsContent: {\n      paddingHorizontal: 16,\n      paddingVertical: 16,\n      alignItems: 'center',\n    },\n    categoryTab: {\n      paddingHorizontal: 16,\n      paddingVertical: 12,\n      marginRight: 8,\n      borderRadius: 24,\n      backgroundColor: theme.colors.surface,\n      minHeight: 44,\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n    categoryTabActive: {\n      backgroundColor: theme.colors.accent,\n    },\n    categoryTabText: {\n      fontSize: 16,\n      fontWeight: '500',\n      color: theme.colors.text,\n      textAlign: 'center',\n    },\n    categoryTabTextActive: {\n      color: theme.colors.white,\n    },\n    menuGrid: {\n      paddingHorizontal: 16,\n      paddingVertical: 16,\n      paddingBottom: 120,\n    },\n    menuRow: {\n      justifyContent: 'space-between',\n      paddingHorizontal: 0,\n    },\n    menuCard: {\n      backgroundColor: theme.colors.cardBg,\n      borderRadius: 16,\n      padding: 16,\n      marginHorizontal: 4,\n      marginVertical: 8,\n      flex: 1,\n      minHeight: 140,\n      maxWidth: (screenWidth - 56) / 3, // 16*2 (outer padding) + 8*2 (inner margins) + 8*2 (card margins)\n      shadowColor: '#000',\n      shadowOffset: { width: 0, height: 2 },\n      shadowOpacity: 0.08,\n      shadowRadius: 4,\n      elevation: 3,\n      borderWidth: 1,\n      borderColor: theme.colors.border,\n    },\n    menuCardDisabled: {\n      opacity: 0.6,\n    },\n    menuCardContent: {\n      alignItems: 'center',\n      justifyContent: 'space-between',\n      flex: 1,\n    },\n    menuItemIcon: {\n      fontSize: 32,\n      marginBottom: 8,\n    },\n    menuItemName: {\n      fontSize: 13,\n      fontWeight: '600',\n      color: theme.colors.text,\n      textAlign: 'center',\n      marginBottom: 6,\n      lineHeight: 16,\n      minHeight: 32,\n      flexWrap: 'wrap',\n    },\n    menuItemPrice: {\n      fontSize: 15,\n      fontWeight: '700',\n      color: theme.colors.primary,\n      textAlign: 'center',\n      backgroundColor: 'rgba(0, 166, 81, 0.1)',\n      paddingHorizontal: 8,\n      paddingVertical: 4,\n      borderRadius: 8,\n      overflow: 'hidden',\n    },\n    quantityPillContainer: {\n      alignItems: 'center',\n      justifyContent: 'center',\n      marginTop: 8,\n    },\n    menuItemQuantityControls: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      justifyContent: 'center',\n      marginTop: 8,\n    },\n    menuQuantityButton: {\n      width: 28,\n      height: 28,\n      borderRadius: 14,\n      backgroundColor: theme.colors.primary,\n      justifyContent: 'center',\n      alignItems: 'center',\n      marginHorizontal: 4,\n    },\n    menuQuantityText: {\n      fontSize: 14,\n      fontWeight: '600',\n      color: theme.colors.text,\n      marginHorizontal: 8,\n      minWidth: 20,\n      textAlign: 'center',\n    },\n    cartHeader: {\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      padding: 20,\n      backgroundColor: theme.colors.white,\n      borderBottomWidth: 1,\n      borderBottomColor: theme.colors.border,\n    },\n    cartTitleSection: {\n      flex: 1,\n    },\n    cartTitle: {\n      fontSize: 18,\n      fontWeight: '600',\n      color: theme.colors.text,\n    },\n    cartSubtitle: {\n      fontSize: 12,\n      color: theme.colors.darkGray,\n      marginTop: 2,\n    },\n    clearButton: {\n      padding: 8,\n    },\n    clearButtonText: {\n      color: theme.colors.warning,\n      fontSize: 14,\n      fontWeight: '500',\n    },\n    emptyCart: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center',\n      paddingHorizontal: 40,\n    },\n    emptyCartText: {\n      fontSize: 18,\n      fontWeight: '500',\n      color: theme.colors.text,\n      marginTop: 16,\n    },\n    emptyCartSubtext: {\n      fontSize: 14,\n      color: theme.colors.darkGray,\n      marginTop: 8,\n      textAlign: 'center',\n    },\n    cartList: {\n      flex: 1,\n    },\n    cartItem: {\n      padding: 16,\n      borderBottomWidth: 1,\n      borderBottomColor: theme.colors.border,\n    },\n    cartItemInfo: {\n      flex: 1,\n      marginBottom: 12,\n    },\n    cartItemHeader: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      marginBottom: 8,\n    },\n    cartItemEmoji: {\n      fontSize: 24,\n      marginRight: 12,\n    },\n    cartItemDetails: {\n      flex: 1,\n    },\n    cartItemName: {\n      fontSize: 16,\n      fontWeight: '500',\n      color: theme.colors.text,\n      marginBottom: 2,\n    },\n    cartItemPrice: {\n      fontSize: 12,\n      color: theme.colors.darkGray,\n    },\n    cartItemDescription: {\n      fontSize: 12,\n      color: theme.colors.lightText,\n      lineHeight: 16,\n      marginLeft: 36,\n    },\n    cartItemActions: {\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n    },\n    cartItemQuantity: {\n      flexDirection: 'row',\n      alignItems: 'center',\n    },\n    quantityButton: {\n      width: 32,\n      height: 32,\n      borderRadius: 16,\n      backgroundColor: theme.colors.background,\n      justifyContent: 'center',\n      alignItems: 'center',\n      borderWidth: 1,\n      borderColor: theme.colors.border,\n    },\n    quantityText: {\n      fontSize: 14,\n      fontWeight: '500',\n      color: theme.colors.text,\n      marginHorizontal: 12,\n    },\n    cartItemTotal: {\n      fontSize: 14,\n      fontWeight: '600',\n      color: theme.colors.text,\n    },\n    deleteButton: {\n      backgroundColor: theme.colors.danger,\n      justifyContent: 'center',\n      alignItems: 'center',\n      width: 80,\n      height: '100%',\n    },\n    deleteButtonText: {\n      color: theme.colors.white,\n      fontSize: 12,\n      fontWeight: '600',\n      marginTop: 4,\n    },\n    cartFooter: {\n      borderTopWidth: 1,\n      borderTopColor: theme.colors.border,\n      backgroundColor: theme.colors.white,\n      padding: 20,\n    },\n    cartFooterFixed: {\n      position: 'absolute',\n      bottom: 0,\n      left: 0,\n      right: 0,\n      borderTopWidth: 1,\n      borderTopColor: theme.colors.border,\n      backgroundColor: theme.colors.white,\n      padding: 20,\n      paddingBottom: Platform.OS === 'ios' ? 30 : 20, // Adjust padding for safe area on iOS\n      shadowColor: '#000',\n      shadowOffset: { width: 0, height: -2 },\n      shadowOpacity: 0.1,\n      shadowRadius: 4,\n      elevation: 8,\n    },\n    cartSummary: {\n      marginBottom: 20,\n    },\n    summarySection: {\n      marginBottom: 16,\n    },\n    summarySectionTitle: {\n      fontSize: 14,\n      fontWeight: '600',\n      color: theme.colors.text,\n      marginBottom: 8,\n    },\n    summaryRow: {\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      marginBottom: 8,\n    },\n    summaryLabel: {\n      fontSize: 14,\n      color: theme.colors.darkGray,\n    },\n    summaryValue: {\n      fontSize: 14,\n      color: theme.colors.text,\n    },\n    totalRow: {\n      marginTop: 8,\n      paddingTop: 12,\n      borderTopWidth: 1,\n      borderTopColor: theme.colors.border,\n    },\n    totalLabel: {\n      fontSize: 16,\n      fontWeight: '600',\n      color: theme.colors.text,\n    },\n    totalAmount: {\n      fontSize: 20,\n      fontWeight: '700',\n      color: theme.colors.text,\n    },\n    chargeButton: {\n      backgroundColor: theme.colors.primary,\n      borderRadius: 12,\n      paddingVertical: 18,\n      flexDirection: 'row',\n      justifyContent: 'center',\n      alignItems: 'center',\n      shadowColor: '#000',\n      shadowOffset: { width: 0, height: 4 },\n      shadowOpacity: 0.2,\n      shadowRadius: 8,\n      elevation: 6,\n    },\n    chargeButtonText: {\n      color: theme.colors.white,\n      fontSize: 17,\n      fontWeight: 'bold',\n    },\n    modalOverlay: {\n      flex: 1,\n      backgroundColor: 'rgba(0, 0, 0, 0.5)',\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n    cartModal: {\n      backgroundColor: theme.colors.white,\n      borderRadius: 16,\n      width: '90%',\n      maxWidth: 500,\n      maxHeight: '80%',\n      shadowColor: '#000',\n      shadowOffset: { width: 0, height: 10 },\n      shadowOpacity: 0.1,\n      shadowRadius: 20,\n      elevation: 10,\n    },\n    cartModalHeader: {\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      padding: 20,\n      borderBottomWidth: 1,\n      borderBottomColor: theme.colors.border,\n    },\n    cartModalButtons: {\n      flexDirection: 'row',\n      alignItems: 'center',\n    },\n    paymentModal: {\n      backgroundColor: theme.colors.white,\n      borderRadius: 16,\n      width: '90%',\n      maxWidth: 400,\n      shadowColor: '#000',\n      shadowOffset: { width: 0, height: 10 },\n      shadowOpacity: 0.1,\n      shadowRadius: 20,\n      elevation: 10,\n    },\n    modalHeader: {\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      padding: 20,\n      borderBottomWidth: 1,\n      borderBottomColor: theme.colors.border,\n    },\n    modalTitle: {\n      fontSize: 20,\n      fontWeight: '600',\n      color: theme.colors.text,\n    },\n    modalCloseButton: {\n      padding: 10,\n      position: 'absolute',\n      top: 10,\n      right: 10,\n      backgroundColor: theme.colors.surface,\n      borderRadius: 20,\n      zIndex: 1,\n    },\n    modalContent: {\n      padding: 20,\n    },\n    input: {\n      borderWidth: 1,\n      borderColor: theme.colors.border,\n      borderRadius: 8,\n      paddingHorizontal: 16,\n      paddingVertical: 12,\n      fontSize: 16,\n      color: theme.colors.text,\n      marginBottom: 20,\n    },\n    orderSummary: {\n      marginBottom: 20,\n      backgroundColor: theme.colors.background,\n      borderRadius: 8,\n      padding: 16,\n    },\n    orderSummaryTitle: {\n      fontSize: 16,\n      fontWeight: '600',\n      color: theme.colors.text,\n      marginBottom: 12,\n    },\n    orderSummaryItem: {\n      marginBottom: 12,\n    },\n    orderSummaryItemHeader: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      marginBottom: 4,\n    },\n    orderSummaryEmoji: {\n      fontSize: 16,\n      marginRight: 8,\n    },\n    orderSummaryItemName: {\n      fontSize: 14,\n      fontWeight: '500',\n      color: theme.colors.text,\n      flex: 1,\n    },\n    orderSummaryQuantity: {\n      fontSize: 14,\n      color: theme.colors.darkGray,\n      marginRight: 12,\n    },\n    orderSummaryPrice: {\n      fontSize: 14,\n      fontWeight: '600',\n      color: theme.colors.text,\n    },\n    orderSummaryDescription: {\n      fontSize: 12,\n      color: theme.colors.lightText,\n      marginLeft: 24,\n      fontStyle: 'italic',\n    },\n    paymentMethodsSection: {\n      marginBottom: 30,\n    },\n    paymentMethodsTitle: {\n      fontSize: 16,\n      fontWeight: '600',\n      color: theme.colors.text,\n      marginBottom: 16,\n    },\n    paymentMethods: {\n      flexDirection: 'row',\n      flexWrap: 'wrap',\n      justifyContent: 'space-between',\n    },\n    paymentMethod: {\n      alignItems: 'center',\n      padding: 16,\n      borderRadius: 12,\n      borderWidth: 2,\n      borderColor: theme.colors.border,\n      backgroundColor: theme.colors.white,\n      width: '48%',\n      marginBottom: 12,\n      position: 'relative',\n    },\n    paymentMethodSelected: {\n      borderColor: theme.colors.accent,\n      backgroundColor: 'rgba(76, 110, 245, 0.05)',\n    },\n    recommendedPaymentMethod: {\n      borderColor: '#00D4AA',\n      backgroundColor: 'rgba(0, 212, 170, 0.1)',\n    },\n    recommendedBadge: {\n      position: 'absolute',\n      top: -8,\n      left: -8,\n      backgroundColor: '#00D4AA',\n      borderRadius: 8,\n      paddingHorizontal: 6,\n      paddingVertical: 2,\n      zIndex: 1,\n    },\n    recommendedText: {\n      fontSize: 9,\n      fontWeight: '700',\n      color: theme.colors.white,\n      letterSpacing: 0.5,\n    },\n    paymentMethodText: {\n      fontSize: 14,\n      fontWeight: '500',\n      color: theme.colors.text,\n      marginTop: 8,\n    },\n    paymentMethodSubtext: {\n      fontSize: 11,\n      color: theme.colors.darkGray,\n      marginTop: 2,\n      textAlign: 'center',\n    },\n    modalTotal: {\n      alignItems: 'center',\n      marginBottom: 20,\n    },\n    modalTotalLabel: {\n      fontSize: 14,\n      color: theme.colors.darkGray,\n      marginBottom: 4,\n    },\n    modalTotalAmount: {\n      fontSize: 28,\n      fontWeight: '700',\n      color: theme.colors.text,\n    },\n    confirmButton: {\n      backgroundColor: theme.colors.success,\n      borderRadius: 8,\n      paddingVertical: 16,\n      alignItems: 'center',\n    },\n    confirmButtonText: {\n      color: theme.colors.white,\n      fontSize: 16,\n      fontWeight: '600',\n    },\n    cartButton: {\n      position: 'relative',\n    },\n    cartBadge: {\n      position: 'absolute',\n      top: -4,\n      right: -4,\n      backgroundColor: theme.colors.warning,\n      borderRadius: 10,\n      minWidth: 20,\n      height: 20,\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n    cartBadgeText: {\n      color: theme.colors.white,\n      fontSize: 12,\n      fontWeight: 'bold',\n    },\n    searchBubbleStyle: {\n      marginRight: 8,\n    },\n    loadingContainer: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center',\n      padding: 20,\n    },\n    loadingText: {\n      fontSize: 16,\n      color: theme.colors.lightGray,\n      textAlign: 'center',\n    },\n    retryButton: {\n      marginTop: 20,\n      paddingHorizontal: 24,\n      paddingVertical: 12,\n      borderRadius: 8,\n      alignItems: 'center',\n      justifyContent: 'center',\n    },\n  });\n\nexport default POSScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/main/POSScreen_old.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_screenWidth' is assigned a value but never used.","line":25,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_screenHeight' is assigned a value but never used.","line":25,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_setSelectedCategory' is assigned a value but never used.","line":424,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":424,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_orderItem' is assigned a value but never used.","line":433,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":433,"endColumn":32},{"ruleId":"react/no-unstable-nested-components","severity":1,"message":"Do not define components during render. React will see a new component type on every render and destroy the entire subtree’s DOM nodes and state (https://reactjs.org/docs/reconciliation.html#elements-of-different-types). Instead, move this component definition out of the parent component “POSScreen” and pass data as props.","line":471,"column":24,"nodeType":"ArrowFunctionExpression","endLine":490,"endColumn":4},{"ruleId":"react/no-unstable-nested-components","severity":1,"message":"Do not define components during render. React will see a new component type on every render and destroy the entire subtree’s DOM nodes and state (https://reactjs.org/docs/reconciliation.html#elements-of-different-types). Instead, move this component definition out of the parent component “POSScreen” and pass data as props.","line":492,"column":20,"nodeType":"ArrowFunctionExpression","endLine":517,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: styles.headerCenter","line":797,"column":3,"nodeType":"Property","endLine":800,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: styles.fullPanel","line":825,"column":3,"nodeType":"Property","endLine":828,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: styles.logoContainer","line":1190,"column":3,"nodeType":"Property","endLine":1199,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: styles.logoText","line":1200,"column":3,"nodeType":"Property","endLine":1204,"endColumn":4}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  StatusBar,\n  SafeAreaView,\n  TouchableOpacity,\n  ScrollView,\n  FlatList,\n  Modal,\n  TextInput,\n  Alert,\n  Dimensions,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation, DrawerActions } from '@react-navigation/native';\nimport { DrawerNavigationProp } from '@react-navigation/drawer';\nimport useAppStore from '../../store/useAppStore';\nimport useUIStore from '../../store/useUIStore';\nimport { MenuItem, DrawerParamList } from '../../types';\n// import Logo from '../../components/Logo';\n\n// Get screen dimensions\nconst { width: _screenWidth, height: _screenHeight } = Dimensions.get('window');\nconst isTablet = screenWidth > 768;\n\n// Modern POS Color Scheme (matching screenshots)\nconst Colors = {\n  primary: '#1a1f36', // Dark navy background\n  secondary: '#ffffff', // White for contrast\n  accent: '#4c6ef5', // Bright blue accent\n  success: '#37d67a', // Green for success\n  warning: '#f47068', // Red/coral for warnings\n  background: '#f0f3f7', // Light gray background\n  cardBg: '#ffffff', // White cards\n  darkBg: '#0f1419', // Very dark background\n  white: '#FFFFFF',\n  lightGray: '#e1e8ed', // Light gray borders\n  mediumGray: '#8899a6', // Medium gray text\n  darkGray: '#657786', // Dark gray secondary text\n  text: '#14171a', // Almost black text\n  lightText: '#657786', // Gray secondary text\n  border: '#e1e8ed', // Light border color\n  hover: '#f7f9fa', // Hover state background\n};\n\n// Authentic Mexican Restaurant Menu Items\nconst menuItems: MenuItem[] = [\n  // SNACKS\n  {\n    id: 1,\n    name: 'Nachos',\n    price: 5.0,\n    category: 'Snacks',\n    emoji: '🧀',\n    available: _true,\n    description:\n      'Homemade corn tortilla chips with black beans, tomato salsa, pico de gallo, _feta, guac & coriander',\n  },\n  {\n    id: 2,\n    name: 'Quesadillas',\n    price: 5.5,\n    category: 'Snacks',\n    emoji: '🫓',\n    available: _true,\n    description:\n      'Folded flour tortilla filled with mozzarella, topped with tomato salsa, feta & coriander',\n  },\n  {\n    id: 3,\n    name: 'Chorizo Quesadilla',\n    price: 5.5,\n    category: 'Snacks',\n    emoji: '🌶️',\n    available: _true,\n    description:\n      'Folded flour tortilla filled with chorizo & mozzarella. Topped with tomato salsa, feta & coriander',\n  },\n  {\n    id: 4,\n    name: 'Chicken Quesadilla',\n    price: 5.5,\n    category: 'Snacks',\n    emoji: '🐔',\n    available: _true,\n    description:\n      'Folded flour tortilla filled with chicken, _peppers, onion & mozzarella. Topped with salsa, feta & coriander',\n  },\n  {\n    id: 5,\n    name: 'Tostada',\n    price: 6.5,\n    category: 'Snacks',\n    emoji: '🥙',\n    available: _true,\n    description:\n      'Crispy tortillas with black beans filled with chicken or any topping, served with salsa, lettuce and feta',\n  },\n\n  // TACOS\n  {\n    id: 6,\n    name: 'Carnitas',\n    price: 3.5,\n    category: 'Tacos',\n    emoji: '🌮',\n    available: _true,\n    description: 'Slow cooked pork, served with onion, _coriander, salsa, guacamole & coriander',\n  },\n  {\n    id: 7,\n    name: 'Cochinita',\n    price: 3.5,\n    category: 'Tacos',\n    emoji: '🌮',\n    available: _true,\n    description: 'Marinated pulled pork served with pickle red onion',\n  },\n  {\n    id: 8,\n    name: 'Barbacoa de Res',\n    price: 3.5,\n    category: 'Tacos',\n    emoji: '🌮',\n    available: _true,\n    description: 'Juicy pulled beef topped with onion, guacamole & coriander',\n  },\n  {\n    id: 9,\n    name: 'Chorizo',\n    price: 3.5,\n    category: 'Tacos',\n    emoji: '🌮',\n    available: _true,\n    description: 'Grilled chorizo with black beans, _onions, salsa, coriander & guacamole',\n  },\n  {\n    id: 10,\n    name: 'Rellena',\n    price: 3.5,\n    category: 'Tacos',\n    emoji: '🌮',\n    available: _true,\n    description:\n      'Fried black pudding with beans, onion & chilli. Topped with coriander and pickled red onion',\n  },\n  {\n    id: 11,\n    name: 'Chicken Fajita',\n    price: 3.5,\n    category: 'Tacos',\n    emoji: '🌮',\n    available: _true,\n    description: 'Chicken, peppers & onion with black beans. Topped with salsa, guac & coriander',\n  },\n  {\n    id: 12,\n    name: 'Haggis',\n    price: 3.5,\n    category: 'Tacos',\n    emoji: '🌮',\n    available: _true,\n    description: 'Haggis with beans, onion & chilli. Topped with coriander and pickled red onion',\n  },\n  {\n    id: 13,\n    name: 'Pescado',\n    price: 3.5,\n    category: 'Tacos',\n    emoji: '🌮',\n    available: _true,\n    description:\n      'Battered cod with guacamole & coriander. Topped with red cabbage & mango chilli salsa',\n  },\n  {\n    id: 14,\n    name: 'Dorados',\n    price: 3.5,\n    category: 'Tacos',\n    emoji: '🌮',\n    available: _true,\n    description: 'Crispy rolled tortillas filled with chicken, topped with salsa, lettuce and feta',\n  },\n  {\n    id: 15,\n    name: 'Dorados Papa',\n    price: 3.5,\n    category: 'Tacos',\n    emoji: '🌮',\n    available: _true,\n    description: 'Crispy rolled tortillas filled with potato, topped with salsa, lettuce and feta',\n  },\n  {\n    id: 16,\n    name: 'Nopal',\n    price: 3.5,\n    category: 'Tacos',\n    emoji: '🌮',\n    available: _true,\n    description: 'Cactus, black beans & onion, topped with tomato salsa and crumbled feta',\n  },\n  {\n    id: 17,\n    name: 'Frijol',\n    price: 3.5,\n    category: 'Tacos',\n    emoji: '🌮',\n    available: _true,\n    description: 'Black beans with fried plantain served with tomato salsa, feta & coriander',\n  },\n  {\n    id: 18,\n    name: 'Verde',\n    price: 3.5,\n    category: 'Tacos',\n    emoji: '🌮',\n    available: _true,\n    description:\n      'Courgette & sweetcorn fried with garlic, served with tomato salsa and crumbled feta',\n  },\n  {\n    id: 19,\n    name: 'Fajita',\n    price: 3.5,\n    category: 'Tacos',\n    emoji: '🌮',\n    available: _true,\n    description: 'Mushrooms, peppers & onion with black beans. Topped with salsa, feta & coriander',\n  },\n\n  // SPECIAL TACOS\n  {\n    id: 20,\n    name: 'Carne Asada',\n    price: 4.5,\n    category: 'Special Tacos',\n    emoji: '⭐',\n    available: _true,\n    description:\n      'Diced rump steak with peppers and red onion. Served on black beans, topped with chimichurri sauce & coriander',\n  },\n  {\n    id: 21,\n    name: 'Camaron',\n    price: 4.5,\n    category: 'Special Tacos',\n    emoji: '🦐',\n    available: _true,\n    description:\n      'Prawns with chorizo, peppers and red onion. Served on black beans, topped with tomato salsa, coriander & guacamole',\n  },\n  {\n    id: 22,\n    name: 'Pulpos',\n    price: 4.5,\n    category: 'Special Tacos',\n    emoji: '🐙',\n    available: _true,\n    description:\n      'Chargrilled octopus, cooked with peppers and red onion. Served on grilled potato with garlic & coriander',\n  },\n\n  // BURRITOS\n  {\n    id: 23,\n    name: 'Regular Burrito',\n    price: 8.0,\n    category: 'Burritos',\n    emoji: '🌯',\n    available: _true,\n    description:\n      'Choose any filling from the taco menu! With black beans, _lettuce, pico de gallo, & guacamole. Topped with salsa, feta and coriander.',\n  },\n  {\n    id: 24,\n    name: 'Special Burrito',\n    price: 10.0,\n    category: 'Burritos',\n    emoji: '🌯',\n    available: _true,\n    description:\n      'Choose any filling from the special tacos menu! With black beans, _lettuce, pico de gallo, & guacamole. Topped with salsa, feta and coriander.',\n  },\n  {\n    id: 25,\n    name: 'Add Mozzarella',\n    price: 1.0,\n    category: 'Burritos',\n    emoji: '🧀',\n    available: _true,\n    description: 'Add extra cheese to any burrito',\n  },\n\n  // SIDES & SALSAS\n  {\n    id: 26,\n    name: 'Skinny Fries',\n    price: 3.5,\n    category: 'Sides',\n    emoji: '🍟',\n    available: _true,\n    description: 'Thin cut fries',\n  },\n  {\n    id: 27,\n    name: 'Pico de Gallo',\n    price: 0.0,\n    category: 'Sides',\n    emoji: '🍅',\n    available: _true,\n    description: 'Diced tomato, onion and chilli - FREE!',\n  },\n  {\n    id: 28,\n    name: 'Green Chili',\n    price: 0.0,\n    category: 'Sides',\n    emoji: '🌶️',\n    available: _true,\n    description: 'Homemade green chili salsa - HOT! - FREE!',\n  },\n  {\n    id: 29,\n    name: 'Pineapple Habanero',\n    price: 0.0,\n    category: 'Sides',\n    emoji: '🍍',\n    available: _true,\n    description: 'Pineapple sauce with habanero chili - HOT! - FREE!',\n  },\n  {\n    id: 30,\n    name: 'Scotch Bonnet',\n    price: 0.0,\n    category: 'Sides',\n    emoji: '🔥',\n    available: _true,\n    description: 'Homemade spicy salsa made with scotch bonnet chilies - VERY HOT! - FREE!',\n  },\n\n  // DRINKS\n  {\n    id: 31,\n    name: 'Pink Paloma',\n    price: 3.75,\n    category: 'Drinks',\n    emoji: '🍹',\n    available: _true,\n    description:\n      'An alcohol-free version of our refreshing cocktail. Tangy lime juice and grapefruit soda, with a splash of grenadine',\n  },\n  {\n    id: 32,\n    name: 'Coco-Nought',\n    price: 3.75,\n    category: 'Drinks',\n    emoji: '🥥',\n    available: _true,\n    description:\n      'Coconut, pineapple juice and milk, blended into a creamy, _sweet, alcohol-free treat!',\n  },\n  {\n    id: 33,\n    name: 'Corona',\n    price: 3.8,\n    category: 'Drinks',\n    emoji: '🍺',\n    available: _true,\n    description: 'Mexican beer',\n  },\n  {\n    id: 34,\n    name: 'Modelo',\n    price: 4.0,\n    category: 'Drinks',\n    emoji: '🍺',\n    available: _true,\n    description: 'Rich, full-flavoured Pilsner style Lager. Crisp and refreshing. 355ml',\n  },\n  {\n    id: 35,\n    name: 'Pacifico',\n    price: 4.0,\n    category: 'Drinks',\n    emoji: '🍺',\n    available: _true,\n    description: 'Pilsner style Lager from the Pacific Ocean city of Mazatlán. 355ml',\n  },\n  {\n    id: 36,\n    name: 'Dos Equis',\n    price: 4.0,\n    category: 'Drinks',\n    emoji: '🍺',\n    available: _true,\n    description: '\"Two X\\'s\". German brewing heritage with the spirit of Mexican traditions. 355ml',\n  },\n];\n\nconst categories = ['All', 'Snacks', 'Tacos', 'Special Tacos', 'Burritos', 'Sides', 'Drinks'];\n\ntype POSScreenNavigationProp = DrawerNavigationProp<DrawerParamList>;\n\nconst POSScreen: React.FC = () => {\n  const navigation = useNavigation<POSScreenNavigationProp>();\n  const [customerName, setCustomerName] = useState('');\n  const [showCartModal, setShowCartModal] = useState(__false);\n\n  // Zustand stores\n  const {\n    cart,\n    addToCart,\n    removeFromCart,\n    updateCartItem,\n    clearCart,\n    cartTotal,\n    cartItemCount,\n    user,\n    session,\n  } = useAppStore();\n\n  const { selectedCategory, _setSelectedCategory, showPaymentModal, setShowPaymentModal } =\n    useUIStore();\n\n  const filteredItems =\n    selectedCategory === 'All'\n      ? menuItems\n      : menuItems.filter(item => item.category === selectedCategory);\n\n  const handleAddToCart = (item: _MenuItem) => {\n    const _orderItem: OrderItem = {\n      id: item.id,\n      name: item.name,\n      price: item.price,\n      quantity: 1,\n      emoji: item.emoji,\n    };\n    addToCart(__orderItem);\n  };\n\n  const handleUpdateQuantity = (id: _number, quantity: _number) => {\n    if (quantity <= 0) {\n      removeFromCart(__id);\n    } else {\n      updateCartItem(__id, { quantity });\n    }\n  };\n\n  const processPayment = () => {\n    Alert.alert(\n      'Order Confirmed',\n      `Order for ${\n        customerName || 'Customer'\n      } has been processed successfully!\\nThank you for your business!`,\n      [\n        {\n          text: 'OK',\n          onPress: () => {\n            clearCart();\n            setCustomerName('');\n            setShowPaymentModal(__false);\n            setShowCartModal(__false);\n          },\n        },\n      ],\n    );\n  };\n\n  const MenuItemCard = ({ item }: { item: MenuItem }) => (\n    <TouchableOpacity\n      style={[styles.menuCard, !item.available && styles.menuCardDisabled]}\n      onPress={() => item.available && handleAddToCart(__item)}\n      activeOpacity={0.7}\n      disabled={!item.available}>\n      <View style={styles.menuItemImage}>\n        <Text style={styles.menuItemEmoji}>{item.emoji}</Text>\n      </View>\n      <View style={styles.menuItemInfo}>\n        <Text style={styles.menuItemName} numberOfLines={2}>\n          {item.name}\n        </Text>\n        <Text style={styles.menuItemPrice}>\n          {item.price === 0 ? 'FREE' : `£${item.price.toFixed(2)}`}\n        </Text>\n        {!item.available && <Text style={styles.unavailableText}>Unavailable</Text>}\n      </View>\n    </TouchableOpacity>\n  );\n\n  const CartItem = ({ item }: { item: OrderItem }) => (\n    <View style={styles.cartItem}>\n      <View style={styles.cartItemLeft}>\n        <Text style={styles.cartItemEmoji}>{item.emoji}</Text>\n        <View style={styles.cartItemInfo}>\n          <Text style={styles.cartItemName} numberOfLines={1}>\n            {item.name}\n          </Text>\n          <Text style={styles.cartItemPrice}>£{item.price.toFixed(2)} each</Text>\n        </View>\n      </View>\n      <View style={styles.cartItemRight}>\n        <TouchableOpacity\n          style={styles.quantityButton}\n          onPress={() => handleUpdateQuantity(item.id, item.quantity - 1)}>\n          <Icon name=\"remove\" size={18} color={Colors.text} />\n        </TouchableOpacity>\n        <Text style={styles.quantityText}>{item.quantity}</Text>\n        <TouchableOpacity\n          style={styles.quantityButton}\n          onPress={() => handleUpdateQuantity(item.id, item.quantity + 1)}>\n          <Icon name=\"add\" size={18} color={Colors.text} />\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <StatusBar backgroundColor={Colors.primary} barStyle=\"light-content\" />\n\n      {/* Header */}\n      <View style={styles.header}>\n        <TouchableOpacity\n          style={styles.menuButton}\n          onPress={() => navigation.dispatch(DrawerActions.openDrawer())}>\n          <Icon name=\"menu\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n\n        <Text style={styles.headerTitle}>Fynlo POS System</Text>\n\n        <View style={styles.headerRight}>\n          <TouchableOpacity\n            style={styles.headerButton}\n            onPress={() => {\n              Alert.alert(\n                'Table Selection',\n                'Select order type: Dine In, _Takeout, Pickup, or Delivery',\n                [{ text: 'Cancel', style: 'cancel' }],\n              );\n            }}>\n            <Icon name=\"restaurant\" size={20} color={Colors.white} />\n          </TouchableOpacity>\n          <TouchableOpacity style={styles.headerButton}>\n            <Icon name=\"notifications\" size={20} color={Colors.white} />\n          </TouchableOpacity>\n          <TouchableOpacity\n            style={[styles.headerButton, styles.cartButton]}\n            onPress={() => setShowCartModal(__true)}>\n            <Icon name=\"shopping-cart\" size={20} color={Colors.white} />\n            {cartItemCount() > 0 && (\n              <View style={styles.cartBadge}>\n                <Text style={styles.cartBadgeText}>{cartItemCount()}</Text>\n              </View>\n            )}\n          </TouchableOpacity>\n          <TouchableOpacity style={styles.headerButton}>\n            <Icon name=\"person\" size={20} color={Colors.white} />\n          </TouchableOpacity>\n        </View>\n      </View>\n\n      {/* Session Info */}\n      {session && (\n        <View style={styles.sessionInfo}>\n          <Text style={styles.sessionText}>\n            Session: {session.id || 'Active'} • User: {user?.name || 'Demo User'}\n          </Text>\n        </View>\n      )}\n\n      <View style={styles.mainContent}>\n        {/* Left Side - Menu */}\n        <View style={styles.leftPanel}>\n          {/* Category Filter */}\n          <ScrollView\n            horizontal\n            showsHorizontalScrollIndicator={false}\n            style={styles.categoryScroll}\n            contentContainerStyle={styles.categoryScrollContent}>\n            {categories.map(category => (\n              <TouchableOpacity\n                key={category}\n                style={[\n                  styles.categoryButton,\n                  selectedCategory === category && styles.categoryButtonActive,\n                ]}\n                onPress={() => setSelectedCategory(__category)}>\n                <Text\n                  style={[\n                    styles.categoryButtonText,\n                    selectedCategory === category && styles.categoryButtonTextActive,\n                  ]}>\n                  {category}\n                </Text>\n              </TouchableOpacity>\n            ))}\n          </ScrollView>\n\n          {/* Menu Items Grid */}\n          <FlatList\n            data={filteredItems}\n            renderItem={({ item }) => <MenuItemCard item={item} />}\n            keyExtractor={item => item.id.toString()}\n            numColumns={isTablet ? 4 : 3}\n            columnWrapperStyle={styles.menuRow}\n            contentContainerStyle={styles.menuGrid}\n            showsVerticalScrollIndicator={false}\n          />\n        </View>\n\n        {/* Right Side - Cart */}\n        <View style={styles.rightPanel}>\n          <View style={styles.cartHeader}>\n            <Text style={styles.cartTitle}>Current Order</Text>\n            {cart.length > 0 && (\n              <TouchableOpacity style={styles.clearButton} onPress={clearCart}>\n                <Text style={styles.clearButtonText}>Clear</Text>\n              </TouchableOpacity>\n            )}\n          </View>\n\n          {cart.length === 0 ? (\n            <View style={styles.emptyCart}>\n              <Icon name=\"shopping-cart\" size={48} color={Colors.lightGray} />\n              <Text style={styles.emptyCartText}>Cart is empty</Text>\n            </View>\n          ) : (\n            <>\n              <ScrollView style={styles.cartList}>\n                {cart.map(item => (\n                  <CartItem key={item.id} item={item} />\n                ))}\n              </ScrollView>\n\n              <View style={styles.cartFooter}>\n                <View style={styles.totalSection}>\n                  <Text style={styles.totalLabel}>Total</Text>\n                  <Text style={styles.totalAmount}>£{cartTotal().toFixed(2)}</Text>\n                </View>\n\n                <TouchableOpacity\n                  style={styles.checkoutButton}\n                  onPress={() => setShowPaymentModal(__true)}>\n                  <Text style={styles.checkoutButtonText}>Charge £{cartTotal().toFixed(2)}</Text>\n                </TouchableOpacity>\n              </View>\n            </>\n          )}\n        </View>\n      </View>\n\n      {/* Cart Modal */}\n      <Modal\n        visible={showCartModal}\n        animationType=\"slide\"\n        transparent={true}\n        onRequestClose={() => setShowCartModal(__false)}>\n        <View style={styles.modalOverlay}>\n          <View style={styles.cartModal}>\n            <View style={styles.modalHeader}>\n              <Text style={styles.cartTitle}>Current Order</Text>\n              <View style={styles.modalHeaderButtons}>\n                {cart.length > 0 && (\n                  <TouchableOpacity style={styles.clearButton} onPress={clearCart}>\n                    <Icon name=\"clear\" size={20} color={Colors.accent} />\n                  </TouchableOpacity>\n                )}\n                <TouchableOpacity\n                  style={styles.closeButton}\n                  onPress={() => setShowCartModal(__false)}>\n                  <Icon name=\"close\" size={24} color={Colors.text} />\n                </TouchableOpacity>\n              </View>\n            </View>\n\n            {cart.length === 0 ? (\n              <View style={styles.emptyCart}>\n                <Icon name=\"shopping-cart\" size={60} color={Colors.lightText} />\n                <Text style={styles.emptyCartSubtext}>Add items to start your order</Text>\n              </View>\n            ) : (\n              <>\n                <ScrollView style={styles.cartList}>\n                  {cart.map(item => (\n                    <CartItem key={item.id} item={item} />\n                  ))}\n                </ScrollView>\n\n                <View style={styles.cartFooter}>\n                  <View style={styles.totalSection}>\n                    <Text style={styles.totalLabel}>Total</Text>\n                    <Text style={styles.totalAmount}>£{cartTotal().toFixed(2)}</Text>\n                  </View>\n\n                  <TouchableOpacity\n                    style={styles.checkoutButton}\n                    onPress={() => {\n                      setShowCartModal(__false);\n                      setShowPaymentModal(__true);\n                    }}>\n                    <Icon name=\"payment\" size={20} color={Colors.white} />\n                    <Text style={styles.checkoutButtonText}>Process Payment</Text>\n                  </TouchableOpacity>\n                </View>\n              </>\n            )}\n          </View>\n        </View>\n      </Modal>\n\n      {/* Payment Modal */}\n      <Modal\n        visible={showPaymentModal}\n        animationType=\"slide\"\n        transparent={true}\n        onRequestClose={() => setShowPaymentModal(__false)}>\n        <View style={styles.modalOverlay}>\n          <View style={styles.paymentModal}>\n            <View style={styles.modalHeader}>\n              <Text style={styles.paymentTitle}>Process Payment</Text>\n              <TouchableOpacity\n                style={styles.closeButton}\n                onPress={() => setShowPaymentModal(__false)}>\n                <Icon name=\"close\" size={24} color={Colors.text} />\n              </TouchableOpacity>\n            </View>\n\n            <View style={styles.paymentSection}>\n              <Text style={styles.paymentLabel}>Customer Name (__Optional)</Text>\n              <TextInput\n                style={styles.paymentInput}\n                value={customerName}\n                onChangeText={setCustomerName}\n                placeholder=\"Enter customer name\"\n                placeholderTextColor={Colors.lightText}\n              />\n            </View>\n\n            <View style={styles.paymentSummary}>\n              <Text style={styles.paymentSummaryTitle}>Order Summary</Text>\n              {cart.map(item => (\n                <View key={item.id} style={styles.summaryItem}>\n                  <Text style={styles.summaryItemText}>\n                    {item.name} x{item.quantity}\n                  </Text>\n                  <Text style={styles.summaryItemPrice}>\n                    £{(item.price * item.quantity).toFixed(2)}\n                  </Text>\n                </View>\n              ))}\n              <View style={styles.summaryTotal}>\n                <Text style={styles.summaryTotalText}>Total: £{cartTotal().toFixed(2)}</Text>\n              </View>\n            </View>\n\n            <View style={styles.paymentButtons}>\n              <TouchableOpacity\n                style={styles.cancelButton}\n                onPress={() => setShowPaymentModal(__false)}>\n                <Text style={styles.cancelButtonText}>Cancel</Text>\n              </TouchableOpacity>\n\n              <TouchableOpacity style={styles.confirmButton} onPress={processPayment}>\n                <Text style={styles.confirmButtonText}>Confirm Payment</Text>\n              </TouchableOpacity>\n            </View>\n          </View>\n        </View>\n      </Modal>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.primary,\n    paddingHorizontal: 20,\n    paddingVertical: 15,\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    elevation: 4,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n  },\n  menuButton: {\n    padding: 8,\n  },\n  headerCenter: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n  headerRight: {\n    flexDirection: 'row',\n  },\n  headerButton: {\n    padding: 8,\n    marginLeft: 8,\n  },\n  cartButton: {\n    position: 'relative',\n  },\n  sessionInfo: {\n    backgroundColor: Colors.secondary,\n    paddingHorizontal: 20,\n    paddingVertical: 8,\n  },\n  sessionText: {\n    color: Colors.white,\n    fontSize: 14,\n    textAlign: 'center',\n  },\n  mainContent: {\n    flex: 1,\n    flexDirection: 'row',\n  },\n  fullPanel: {\n    flex: 1,\n    padding: 15,\n  },\n  categoryScroll: {\n    marginBottom: 15,\n  },\n  categoryScrollContent: {\n    paddingRight: 20,\n  },\n  categoryButton: {\n    backgroundColor: Colors.cream,\n    paddingHorizontal: 22,\n    paddingVertical: 14,\n    borderRadius: 30,\n    marginRight: 12,\n    elevation: 4,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.15,\n    shadowRadius: 4,\n    borderWidth: 2,\n    borderColor: Colors.terracotta,\n  },\n  categoryButtonActive: {\n    backgroundColor: Colors.secondary,\n    borderColor: Colors.gold,\n    borderWidth: 2,\n    transform: [{ scale: 1.05 }],\n  },\n  categoryButtonText: {\n    color: Colors.text,\n    fontWeight: '600',\n    fontSize: 14,\n  },\n  categoryButtonTextActive: {\n    color: Colors.white,\n  },\n  menuGrid: {\n    paddingBottom: 20,\n  },\n  menuRow: {\n    justifyContent: 'space-between',\n    marginBottom: 15,\n  },\n  menuCard: {\n    backgroundColor: Colors.cream,\n    borderRadius: 16,\n    padding: 18,\n    width: isTablet ? '31%' : '48%',\n    marginBottom: 15,\n    elevation: 6,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 3 },\n    shadowOpacity: 0.15,\n    shadowRadius: 6,\n    borderWidth: 1,\n    borderColor: Colors.terracotta,\n    borderTopWidth: 3,\n    borderTopColor: Colors.secondary,\n  },\n  menuCardDisabled: {\n    opacity: 0.5,\n  },\n  menuItemImage: {\n    alignItems: 'center',\n    marginBottom: 10,\n  },\n  menuItemEmoji: {\n    fontSize: 40,\n  },\n  menuItemInfo: {\n    alignItems: 'center',\n  },\n  menuItemName: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    textAlign: 'center',\n    marginBottom: 5,\n  },\n  menuItemPrice: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: Colors.secondary,\n  },\n  unavailableText: {\n    fontSize: 12,\n    color: Colors.accent,\n    fontWeight: '600',\n    marginTop: 4,\n  },\n  cartModal: {\n    backgroundColor: Colors.cream,\n    borderRadius: 24,\n    padding: 32,\n    width: '90%',\n    maxWidth: 520,\n    maxHeight: '80%',\n    borderWidth: 3,\n    borderColor: Colors.terracotta,\n    borderTopWidth: 6,\n    borderTopColor: Colors.primary,\n    elevation: 12,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 6 },\n    shadowOpacity: 0.3,\n    shadowRadius: 12,\n  },\n  modalHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 30,\n  },\n  cartTitle: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: Colors.text,\n  },\n  modalHeaderButtons: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  clearButton: {\n    padding: 8,\n  },\n  closeButton: {\n    padding: 4,\n  },\n  emptyCart: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  emptyCartSubtext: {\n    fontSize: 16,\n    color: Colors.lightText,\n    marginTop: 10,\n  },\n  cartList: {\n    flex: 1,\n    padding: 20,\n  },\n  cartItem: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingVertical: 15,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.lightGray,\n  },\n  cartItemLeft: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    flex: 1,\n  },\n  cartItemEmoji: {\n    fontSize: 24,\n    marginRight: 15,\n  },\n  cartItemInfo: {\n    flex: 1,\n  },\n  cartItemName: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  cartItemPrice: {\n    fontSize: 14,\n    color: Colors.lightText,\n    marginTop: 2,\n  },\n  cartItemRight: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  quantityButton: {\n    backgroundColor: Colors.lightGray,\n    width: 32,\n    height: 32,\n    borderRadius: 16,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  quantityText: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginHorizontal: 15,\n    color: Colors.text,\n    minWidth: 20,\n    textAlign: 'center',\n  },\n  cartFooter: {\n    padding: 20,\n    borderTopWidth: 1,\n    borderTopColor: Colors.lightGray,\n  },\n  totalSection: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 20,\n  },\n  totalLabel: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.text,\n  },\n  totalAmount: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: Colors.secondary,\n  },\n  checkoutButton: {\n    backgroundColor: Colors.success,\n    paddingVertical: 18,\n    borderRadius: 16,\n    alignItems: 'center',\n    flexDirection: 'row',\n    justifyContent: 'center',\n    elevation: 4,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.2,\n    shadowRadius: 4,\n    borderWidth: 2,\n    borderColor: Colors.gold,\n  },\n  checkoutButtonText: {\n    color: Colors.white,\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginLeft: 8,\n  },\n  modalOverlay: {\n    flex: 1,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  paymentModal: {\n    backgroundColor: Colors.cream,\n    borderRadius: 24,\n    padding: 32,\n    width: '90%',\n    maxWidth: 520,\n    maxHeight: '80%',\n    borderWidth: 3,\n    borderColor: Colors.terracotta,\n    borderTopWidth: 6,\n    borderTopColor: Colors.primary,\n    elevation: 12,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 6 },\n    shadowOpacity: 0.3,\n    shadowRadius: 12,\n  },\n  paymentTitle: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: Colors.text,\n  },\n  paymentSection: {\n    marginBottom: 30,\n  },\n  paymentLabel: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 10,\n  },\n  paymentInput: {\n    borderWidth: 1,\n    borderColor: Colors.lightGray,\n    borderRadius: 8,\n    padding: 15,\n    fontSize: 16,\n    color: Colors.text,\n  },\n  paymentSummary: {\n    backgroundColor: Colors.background,\n    borderRadius: 12,\n    padding: 20,\n    marginBottom: 30,\n  },\n  paymentSummaryTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: Colors.text,\n    marginBottom: 15,\n  },\n  summaryItem: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingVertical: 8,\n  },\n  summaryItemText: {\n    fontSize: 16,\n    color: Colors.text,\n    flex: 1,\n  },\n  summaryItemPrice: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  summaryTotal: {\n    borderTopWidth: 1,\n    borderTopColor: Colors.lightGray,\n    paddingTop: 15,\n    marginTop: 15,\n  },\n  summaryTotalText: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.secondary,\n    textAlign: 'center',\n  },\n  paymentButtons: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  cancelButton: {\n    backgroundColor: Colors.lightGray,\n    paddingVertical: 15,\n    paddingHorizontal: 30,\n    borderRadius: 12,\n    flex: 1,\n    marginRight: 10,\n  },\n  cancelButtonText: {\n    color: Colors.text,\n    fontSize: 16,\n    fontWeight: '600',\n    textAlign: 'center',\n  },\n  confirmButton: {\n    backgroundColor: Colors.success,\n    paddingVertical: 15,\n    paddingHorizontal: 30,\n    borderRadius: 12,\n    flex: 1,\n    marginLeft: 10,\n  },\n  confirmButtonText: {\n    color: Colors.white,\n    fontSize: 16,\n    fontWeight: '600',\n    textAlign: 'center',\n  },\n  cartBadge: {\n    backgroundColor: Colors.accent,\n    borderRadius: 16,\n    paddingHorizontal: 4,\n    paddingVertical: 2,\n    marginLeft: 8,\n  },\n  cartBadgeText: {\n    color: Colors.white,\n    fontSize: 12,\n    fontWeight: 'bold',\n  },\n  logoContainer: {\n    backgroundColor: Colors.primary,\n    borderRadius: 6,\n    width: 32,\n    height: 32,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderWidth: 1,\n    borderColor: Colors.secondary,\n  },\n  logoText: {\n    color: Colors.white,\n    fontSize: 18,\n    fontWeight: 'bold',\n  },\n});\n\nexport default POSScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/main/ProfileScreen.tsx","messages":[{"ruleId":"react/no-unstable-nested-components","severity":1,"message":"Do not define components during render. React will see a new component type on every render and destroy the entire subtree’s DOM nodes and state (https://reactjs.org/docs/reconciliation.html#elements-of-different-types). Instead, move this component definition out of the parent component “ProfileScreenContent” and pass data as props.","line":128,"column":20,"nodeType":"ArrowFunctionExpression","endLine":138,"endColumn":4},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_createStyles' is assigned a value but never used.","line":381,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":381,"endColumn":20},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.container","line":383,"column":5,"nodeType":"Property","endLine":386,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.header","line":387,"column":5,"nodeType":"Property","endLine":399,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.headerLeft","line":400,"column":5,"nodeType":"Property","endLine":404,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.headerButton","line":405,"column":5,"nodeType":"Property","endLine":408,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.headerTitle","line":409,"column":5,"nodeType":"Property","endLine":413,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.content","line":414,"column":5,"nodeType":"Property","endLine":417,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.profileHeader","line":418,"column":5,"nodeType":"Property","endLine":421,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.profileLogo","line":422,"column":5,"nodeType":"Property","endLine":424,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.avatar","line":425,"column":5,"nodeType":"Property","endLine":433,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.userName","line":434,"column":5,"nodeType":"Property","endLine":439,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.userRole","line":440,"column":5,"nodeType":"Property","endLine":444,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.section","line":445,"column":5,"nodeType":"Property","endLine":447,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.sectionTitle","line":448,"column":5,"nodeType":"Property","endLine":453,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.infoContainer","line":454,"column":5,"nodeType":"Property","endLine":462,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.infoCard","line":463,"column":5,"nodeType":"Property","endLine":469,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.infoIcon","line":470,"column":5,"nodeType":"Property","endLine":472,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.infoContent","line":473,"column":5,"nodeType":"Property","endLine":475,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.infoTitle","line":476,"column":5,"nodeType":"Property","endLine":480,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.infoValue","line":481,"column":5,"nodeType":"Property","endLine":485,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.sessionCard","line":486,"column":5,"nodeType":"Property","endLine":495,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.sessionHeader","line":496,"column":5,"nodeType":"Property","endLine":500,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.sessionTitle","line":501,"column":5,"nodeType":"Property","endLine":506,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.sessionInfo","line":507,"column":5,"nodeType":"Property","endLine":510,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.sessionItem","line":511,"column":5,"nodeType":"Property","endLine":513,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.sessionLabel","line":514,"column":5,"nodeType":"Property","endLine":518,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.sessionValue","line":519,"column":5,"nodeType":"Property","endLine":523,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.actionButton","line":524,"column":5,"nodeType":"Property","endLine":536,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.actionButtonText","line":537,"column":5,"nodeType":"Property","endLine":543,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.modalOverlay","line":545,"column":5,"nodeType":"Property","endLine":550,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.modal","line":551,"column":5,"nodeType":"Property","endLine":561,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.modalHeader","line":562,"column":5,"nodeType":"Property","endLine":569,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.modalTitle","line":570,"column":5,"nodeType":"Property","endLine":574,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.modalContent","line":575,"column":5,"nodeType":"Property","endLine":577,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.formGroup","line":578,"column":5,"nodeType":"Property","endLine":580,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.formLabel","line":581,"column":5,"nodeType":"Property","endLine":586,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.formInput","line":587,"column":5,"nodeType":"Property","endLine":596,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.modalActions","line":597,"column":5,"nodeType":"Property","endLine":602,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.modalButton","line":603,"column":5,"nodeType":"Property","endLine":608,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.cancelButton","line":609,"column":5,"nodeType":"Property","endLine":611,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.saveButton","line":612,"column":5,"nodeType":"Property","endLine":614,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.cancelButtonText","line":615,"column":5,"nodeType":"Property","endLine":619,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.saveButtonText","line":620,"column":5,"nodeType":"Property","endLine":624,"endColumn":6}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":43,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  SafeAreaView,\n  StatusBar,\n  ScrollView,\n  TouchableOpacity,\n  Alert,\n  Modal,\n  TextInput,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation } from '@react-navigation/native';\nimport useAppStore from '../../store/useAppStore';\nimport ErrorBoundary from '../../components/ErrorBoundary';\nimport { useTheme, useThemedStyles } from '../../design-system/ThemeProvider';\nimport { useAuth } from '../../contexts/AuthContext';\n\nconst ProfileScreenContent: React.FC = () => {\n  const navigation = useNavigation();\n  const { theme } = useTheme();\n  const styles = useThemedStyles(__createStyles);\n  const { user, session } = useAppStore();\n  const { updateUser } = useAuth();\n\n  // Modal states\n  const [showEditModal, setShowEditModal] = useState(__false);\n  const [showPasswordModal, setShowPasswordModal] = useState(__false);\n\n  // Edit form state\n  const [editForm, setEditForm] = useState({\n    firstName: user?.firstName || '',\n    lastName: user?.lastName || '',\n    email: user?.email || '',\n    phone: user?.phone || '',\n  });\n\n  // Password form state\n  const [passwordForm, setPasswordForm] = useState({\n    currentPassword: '',\n    newPassword: '',\n    confirmPassword: '',\n  });\n\n  const handleEditProfile = () => {\n    setEditForm({\n      firstName: user?.firstName || '',\n      lastName: user?.lastName || '',\n      email: user?.email || '',\n      phone: user?.phone || '',\n    });\n    setShowEditModal(__true);\n  };\n\n  const handleSaveProfile = async () => {\n    // Validate required fields\n    if (!editForm.firstName.trim() || !editForm.lastName.trim() || !editForm.email.trim()) {\n      Alert.alert('Error', 'Please fill in all required fields');\n      return;\n    }\n\n    // Validate email format\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(editForm.email.trim())) {\n      Alert.alert('Error', 'Please enter a valid email address');\n      return;\n    }\n\n    try {\n      await updateUser({\n        firstName: editForm.firstName.trim(),\n        lastName: editForm.lastName.trim(),\n        email: editForm.email.trim(),\n        phone: editForm.phone.trim(),\n      });\n\n      setShowEditModal(__false);\n      Alert.alert('Success', 'Profile updated successfully!');\n    } catch (__error) {\n      Alert.alert('Error', 'Failed to update profile. Please try again.');\n    }\n  };\n\n  const handleChangePassword = () => {\n    setPasswordForm({\n      currentPassword: '',\n      newPassword: '',\n      confirmPassword: '',\n    });\n    setShowPasswordModal(__true);\n  };\n\n  const handleSavePassword = async () => {\n    // Validate required fields\n    if (\n      !passwordForm.currentPassword ||\n      !passwordForm.newPassword ||\n      !passwordForm.confirmPassword\n    ) {\n      Alert.alert('Error', 'Please fill in all password fields');\n      return;\n    }\n\n    // Validate new password\n    if (passwordForm.newPassword.length < 6) {\n      Alert.alert('Error', 'New password must be at least 6 characters long');\n      return;\n    }\n\n    // Validate password confirmation\n    if (passwordForm.newPassword !== passwordForm.confirmPassword) {\n      Alert.alert('Error', 'New passwords do not match');\n      return;\n    }\n\n    try {\n      // In a real app, this would call an API to change password\n      Alert.alert('Success', 'Password changed successfully!', [\n        { text: 'OK', onPress: () => setShowPasswordModal(__false) },\n      ]);\n    } catch (__error) {\n      Alert.alert('Error', 'Failed to change password. Please try again.');\n    }\n  };\n\n  const InfoCard = ({ title, _value, icon }: { title: string; value: string; icon: string }) => (\n    <View style={styles.infoCard}>\n      <View style={styles.infoIcon}>\n        <Icon name={icon} size={24} color={theme.colors.secondary} />\n      </View>\n      <View style={styles.infoContent}>\n        <Text style={styles.infoTitle}>{title}</Text>\n        <Text style={styles.infoValue}>{value}</Text>\n      </View>\n    </View>\n  );\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <StatusBar barStyle=\"light-content\" backgroundColor={theme.colors.primary} />\n\n      {/* Header */}\n      <View style={styles.header}>\n        <View style={styles.headerLeft}>\n          <TouchableOpacity style={styles.headerButton} onPress={() => navigation.goBack()}>\n            <Icon name=\"arrow-back\" size={24} color={theme.colors.white} />\n          </TouchableOpacity>\n          <Text style={styles.headerTitle}>Profile</Text>\n        </View>\n        <TouchableOpacity\n          style={styles.headerButton}\n          onPress={() => navigation.navigate('POS' as never)}>\n          <Icon name=\"home\" size={24} color={theme.colors.white} />\n        </TouchableOpacity>\n      </View>\n\n      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n        {/* Profile Header */}\n        <View style={styles.profileHeader}>\n          <View style={styles.avatar}>\n            <Icon name=\"person\" size={48} color={theme.colors.white} />\n          </View>\n          <Text style={styles.userName}>{user?.name || 'User'}</Text>\n          <Text style={styles.userRole}>{user?.role?.toUpperCase() || 'STAFF'}</Text>\n        </View>\n\n        {/* User Information */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Information</Text>\n          <View style={styles.infoContainer}>\n            <InfoCard title=\"Email\" value={user?.email || 'No email set'} icon=\"email\" />\n            <InfoCard title=\"User ID\" value={user?.id?.toString() || 'N/A'} icon=\"badge\" />\n            <InfoCard title=\"Role\" value={user?.role || 'Staff'} icon=\"work\" />\n            <InfoCard title=\"Status\" value={user?.isActive ? 'Active' : 'Inactive'} icon=\"circle\" />\n          </View>\n        </View>\n\n        {/* Current Session */}\n        {session && (\n          <View style={styles.section}>\n            <Text style={styles.sectionTitle}>Current Session</Text>\n            <View style={styles.sessionCard}>\n              <View style={styles.sessionHeader}>\n                <Icon name=\"access-time\" size={24} color={theme.colors.success[500]} />\n                <Text style={styles.sessionTitle}>Active Session</Text>\n              </View>\n              <View style={styles.sessionInfo}>\n                <View style={styles.sessionItem}>\n                  <Text style={styles.sessionLabel}>Started</Text>\n                  <Text style={styles.sessionValue}>\n                    {session.startTime instanceof Date\n                      ? session.startTime.toLocaleTimeString()\n                      : new Date(session.startTime).toLocaleTimeString()}\n                  </Text>\n                </View>\n                <View style={styles.sessionItem}>\n                  <Text style={styles.sessionLabel}>Orders</Text>\n                  <Text style={styles.sessionValue}>{session.ordersCount || 0}</Text>\n                </View>\n                <View style={styles.sessionItem}>\n                  <Text style={styles.sessionLabel}>Total Sales</Text>\n                  <Text style={styles.sessionValue}>£{(session.totalSales || 0).toFixed(2)}</Text>\n                </View>\n              </View>\n            </View>\n          </View>\n        )}\n\n        {/* Actions */}\n        <View style={styles.section}>\n          <TouchableOpacity style={styles.actionButton} onPress={handleEditProfile}>\n            <Icon name=\"edit\" size={24} color={theme.colors.secondary} />\n            <Text style={styles.actionButtonText}>Edit Profile</Text>\n            <Icon name=\"chevron-right\" size={24} color={theme.colors.lightText} />\n          </TouchableOpacity>\n\n          <TouchableOpacity style={styles.actionButton} onPress={handleChangePassword}>\n            <Icon name=\"lock\" size={24} color={theme.colors.secondary} />\n            <Text style={styles.actionButtonText}>Change Password</Text>\n            <Icon name=\"chevron-right\" size={24} color={theme.colors.lightText} />\n          </TouchableOpacity>\n        </View>\n      </ScrollView>\n\n      {/* Edit Profile Modal */}\n      <Modal\n        visible={showEditModal}\n        animationType=\"slide\"\n        transparent={true}\n        onRequestClose={() => setShowEditModal(__false)}>\n        <View style={styles.modalOverlay}>\n          <View style={styles.modal}>\n            <View style={styles.modalHeader}>\n              <Text style={styles.modalTitle}>Edit Profile</Text>\n              <TouchableOpacity onPress={() => setShowEditModal(__false)}>\n                <Icon name=\"close\" size={24} color={theme.colors.text} />\n              </TouchableOpacity>\n            </View>\n\n            <ScrollView style={styles.modalContent}>\n              <View style={styles.formGroup}>\n                <Text style={styles.formLabel}>First Name *</Text>\n                <TextInput\n                  style={styles.formInput}\n                  value={editForm.firstName}\n                  onChangeText={text => setEditForm({ ...editForm, firstName: text })}\n                  placeholder=\"Enter first name\"\n                  placeholderTextColor={theme.colors.lightText}\n                />\n              </View>\n\n              <View style={styles.formGroup}>\n                <Text style={styles.formLabel}>Last Name *</Text>\n                <TextInput\n                  style={styles.formInput}\n                  value={editForm.lastName}\n                  onChangeText={text => setEditForm({ ...editForm, lastName: text })}\n                  placeholder=\"Enter last name\"\n                  placeholderTextColor={theme.colors.lightText}\n                />\n              </View>\n\n              <View style={styles.formGroup}>\n                <Text style={styles.formLabel}>Email *</Text>\n                <TextInput\n                  style={styles.formInput}\n                  value={editForm.email}\n                  onChangeText={text => setEditForm({ ...editForm, email: text })}\n                  placeholder=\"Enter email address\"\n                  keyboardType=\"email-address\"\n                  autoCapitalize=\"none\"\n                  placeholderTextColor={theme.colors.lightText}\n                />\n              </View>\n\n              <View style={styles.formGroup}>\n                <Text style={styles.formLabel}>Phone</Text>\n                <TextInput\n                  style={styles.formInput}\n                  value={editForm.phone}\n                  onChangeText={text => setEditForm({ ...editForm, phone: text })}\n                  placeholder=\"Enter phone number\"\n                  keyboardType=\"phone-pad\"\n                  placeholderTextColor={theme.colors.lightText}\n                />\n              </View>\n\n              <View style={styles.modalActions}>\n                <TouchableOpacity\n                  style={[styles.modalButton, styles.cancelButton]}\n                  onPress={() => setShowEditModal(__false)}>\n                  <Text style={styles.cancelButtonText}>Cancel</Text>\n                </TouchableOpacity>\n\n                <TouchableOpacity\n                  style={[styles.modalButton, styles.saveButton]}\n                  onPress={handleSaveProfile}>\n                  <Text style={styles.saveButtonText}>Save Changes</Text>\n                </TouchableOpacity>\n              </View>\n            </ScrollView>\n          </View>\n        </View>\n      </Modal>\n\n      {/* Change Password Modal */}\n      <Modal\n        visible={showPasswordModal}\n        animationType=\"slide\"\n        transparent={true}\n        onRequestClose={() => setShowPasswordModal(__false)}>\n        <View style={styles.modalOverlay}>\n          <View style={styles.modal}>\n            <View style={styles.modalHeader}>\n              <Text style={styles.modalTitle}>Change Password</Text>\n              <TouchableOpacity onPress={() => setShowPasswordModal(__false)}>\n                <Icon name=\"close\" size={24} color={theme.colors.text} />\n              </TouchableOpacity>\n            </View>\n\n            <ScrollView style={styles.modalContent}>\n              <View style={styles.formGroup}>\n                <Text style={styles.formLabel}>Current Password *</Text>\n                <TextInput\n                  style={styles.formInput}\n                  value={passwordForm.currentPassword}\n                  onChangeText={text => setPasswordForm({ ...passwordForm, currentPassword: text })}\n                  placeholder=\"Enter current password\"\n                  secureTextEntry={true}\n                  placeholderTextColor={theme.colors.lightText}\n                />\n              </View>\n\n              <View style={styles.formGroup}>\n                <Text style={styles.formLabel}>New Password *</Text>\n                <TextInput\n                  style={styles.formInput}\n                  value={passwordForm.newPassword}\n                  onChangeText={text => setPasswordForm({ ...passwordForm, newPassword: text })}\n                  placeholder=\"Enter new password (min 6 characters)\"\n                  secureTextEntry={true}\n                  placeholderTextColor={theme.colors.lightText}\n                />\n              </View>\n\n              <View style={styles.formGroup}>\n                <Text style={styles.formLabel}>Confirm New Password *</Text>\n                <TextInput\n                  style={styles.formInput}\n                  value={passwordForm.confirmPassword}\n                  onChangeText={text => setPasswordForm({ ...passwordForm, confirmPassword: text })}\n                  placeholder=\"Confirm new password\"\n                  secureTextEntry={true}\n                  placeholderTextColor={theme.colors.lightText}\n                />\n              </View>\n\n              <View style={styles.modalActions}>\n                <TouchableOpacity\n                  style={[styles.modalButton, styles.cancelButton]}\n                  onPress={() => setShowPasswordModal(__false)}>\n                  <Text style={styles.cancelButtonText}>Cancel</Text>\n                </TouchableOpacity>\n\n                <TouchableOpacity\n                  style={[styles.modalButton, styles.saveButton]}\n                  onPress={handleSavePassword}>\n                  <Text style={styles.saveButtonText}>Change Password</Text>\n                </TouchableOpacity>\n              </View>\n            </ScrollView>\n          </View>\n        </View>\n      </Modal>\n    </SafeAreaView>\n  );\n};\n\nconst _createStyles = (theme: _unknown) =>\n  StyleSheet.create({\n    container: {\n      flex: 1,\n      backgroundColor: theme.colors.background,\n    },\n    header: {\n      backgroundColor: theme.colors.primary,\n      paddingHorizontal: 20,\n      paddingVertical: 15,\n      elevation: 4,\n      shadowColor: '#000',\n      shadowOffset: { width: 0, height: 2 },\n      shadowOpacity: 0.1,\n      shadowRadius: 4,\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n    },\n    headerLeft: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      flex: 1,\n    },\n    headerButton: {\n      padding: 8,\n      marginRight: 12,\n    },\n    headerTitle: {\n      color: theme.colors.white,\n      fontSize: 20,\n      fontWeight: 'bold',\n    },\n    content: {\n      flex: 1,\n      padding: 20,\n    },\n    profileHeader: {\n      alignItems: 'center',\n      paddingVertical: 30,\n    },\n    profileLogo: {\n      marginBottom: 16,\n    },\n    avatar: {\n      width: 100,\n      height: 100,\n      borderRadius: 50,\n      backgroundColor: theme.colors.secondary,\n      justifyContent: 'center',\n      alignItems: 'center',\n      marginBottom: 15,\n    },\n    userName: {\n      fontSize: 24,\n      fontWeight: 'bold',\n      color: theme.colors.text,\n      marginBottom: 5,\n    },\n    userRole: {\n      fontSize: 14,\n      color: theme.colors.lightText,\n      fontWeight: '600',\n    },\n    section: {\n      marginBottom: 30,\n    },\n    sectionTitle: {\n      fontSize: 18,\n      fontWeight: 'bold',\n      color: theme.colors.text,\n      marginBottom: 15,\n    },\n    infoContainer: {\n      backgroundColor: theme.colors.white,\n      borderRadius: 12,\n      elevation: 2,\n      shadowColor: '#000',\n      shadowOffset: { width: 0, height: 1 },\n      shadowOpacity: 0.1,\n      shadowRadius: 2,\n    },\n    infoCard: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      padding: 20,\n      borderBottomWidth: 1,\n      borderBottomColor: theme.colors.lightGray,\n    },\n    infoIcon: {\n      marginRight: 15,\n    },\n    infoContent: {\n      flex: 1,\n    },\n    infoTitle: {\n      fontSize: 14,\n      color: theme.colors.lightText,\n      marginBottom: 4,\n    },\n    infoValue: {\n      fontSize: 16,\n      fontWeight: '600',\n      color: theme.colors.text,\n    },\n    sessionCard: {\n      backgroundColor: theme.colors.white,\n      borderRadius: 12,\n      padding: 20,\n      elevation: 2,\n      shadowColor: '#000',\n      shadowOffset: { width: 0, height: 1 },\n      shadowOpacity: 0.1,\n      shadowRadius: 2,\n    },\n    sessionHeader: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      marginBottom: 15,\n    },\n    sessionTitle: {\n      fontSize: 18,\n      fontWeight: 'bold',\n      color: theme.colors.text,\n      marginLeft: 10,\n    },\n    sessionInfo: {\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n    },\n    sessionItem: {\n      alignItems: 'center',\n    },\n    sessionLabel: {\n      fontSize: 14,\n      color: theme.colors.lightText,\n      marginBottom: 4,\n    },\n    sessionValue: {\n      fontSize: 16,\n      fontWeight: 'bold',\n      color: theme.colors.text,\n    },\n    actionButton: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      backgroundColor: theme.colors.white,\n      borderRadius: 12,\n      padding: 20,\n      marginBottom: 15,\n      elevation: 2,\n      shadowColor: '#000',\n      shadowOffset: { width: 0, height: 1 },\n      shadowOpacity: 0.1,\n      shadowRadius: 2,\n    },\n    actionButtonText: {\n      fontSize: 16,\n      fontWeight: '600',\n      color: theme.colors.text,\n      marginLeft: 15,\n      flex: 1,\n    },\n    // Modal Styles\n    modalOverlay: {\n      flex: 1,\n      backgroundColor: 'rgba(0, 0, 0, 0.5)',\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n    modal: {\n      backgroundColor: theme.colors.white,\n      borderRadius: 16,\n      width: '90%',\n      maxHeight: '80%',\n      shadowColor: '#000',\n      shadowOffset: { width: 0, height: 10 },\n      shadowOpacity: 0.1,\n      shadowRadius: 20,\n      elevation: 10,\n    },\n    modalHeader: {\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      padding: 20,\n      borderBottomWidth: 1,\n      borderBottomColor: theme.colors.lightGray,\n    },\n    modalTitle: {\n      fontSize: 20,\n      fontWeight: '600',\n      color: theme.colors.text,\n    },\n    modalContent: {\n      padding: 20,\n    },\n    formGroup: {\n      marginBottom: 20,\n    },\n    formLabel: {\n      fontSize: 16,\n      fontWeight: '600',\n      color: theme.colors.text,\n      marginBottom: 8,\n    },\n    formInput: {\n      borderWidth: 1,\n      borderColor: theme.colors.lightGray,\n      borderRadius: 8,\n      paddingHorizontal: 16,\n      paddingVertical: 12,\n      fontSize: 16,\n      color: theme.colors.text,\n      backgroundColor: theme.colors.white,\n    },\n    modalActions: {\n      flexDirection: 'row',\n      gap: 12,\n      marginTop: 24,\n      paddingBottom: 20,\n    },\n    modalButton: {\n      flex: 1,\n      paddingVertical: 14,\n      borderRadius: 8,\n      alignItems: 'center',\n    },\n    cancelButton: {\n      backgroundColor: theme.colors.lightGray,\n    },\n    saveButton: {\n      backgroundColor: theme.colors.primary,\n    },\n    cancelButtonText: {\n      color: theme.colors.text,\n      fontSize: 16,\n      fontWeight: '600',\n    },\n    saveButtonText: {\n      color: theme.colors.white,\n      fontSize: 16,\n      fontWeight: '600',\n    },\n  });\n\nconst ProfileScreen: React.FC = () => {\n  return (\n    <ErrorBoundary>\n      <ProfileScreenContent />\n    </ErrorBoundary>\n  );\n};\n\nexport default ProfileScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/main/SettingsScreen.tsx","messages":[{"ruleId":"react/no-unstable-nested-components","severity":1,"message":"Do not define components during render. React will see a new component type on every render and destroy the entire subtree’s DOM nodes and state (https://reactjs.org/docs/reconciliation.html#elements-of-different-types). Instead, move this component definition out of the parent component “SettingsScreen” and pass data as props.","line":45,"column":23,"nodeType":"ArrowFunctionExpression","endLine":65,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: styles.header","line":178,"column":3,"nodeType":"Property","endLine":187,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: styles.headerTitle","line":188,"column":3,"nodeType":"Property","endLine":192,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  SafeAreaView,\n  StatusBar,\n  ScrollView,\n  TouchableOpacity,\n  Alert,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport useAppStore from '../../store/useAppStore';\nimport Logo from '../../components/Logo';\nimport HeaderWithBackButton from '../../components/navigation/HeaderWithBackButton';\nimport { useTheme } from '../../design-system/ThemeProvider';\n\nconst Colors = {\n  primary: '#2C3E50',\n  secondary: '#3498DB',\n  success: '#27AE60',\n  danger: '#E74C3C',\n  background: '#F8F9FA',\n  white: '#FFFFFF',\n  lightGray: '#ECF0F1',\n  text: '#2C3E50',\n  lightText: '#95A5A6',\n};\n\nconst SettingsScreen: React.FC = () => {\n  const { _logout } = useAppStore();\n  const { theme } = useTheme();\n\n  const handleLogout = () => {\n    Alert.alert('Logout', 'Are you sure you want to logout?', [\n      { text: 'Cancel', style: 'cancel' },\n      {\n        text: 'Logout',\n        style: 'destructive',\n        onPress: _logout,\n      },\n    ]);\n  };\n\n  const SettingItem = ({\n    title,\n    icon,\n    onPress,\n    showArrow = true,\n    color = Colors.text,\n  }: {\n    title: string;\n    icon: string;\n    onPress?: () => void;\n    showArrow?: boolean;\n    color?: string;\n  }) => (\n    <TouchableOpacity style={styles.settingItem} onPress={onPress} activeOpacity={0.7}>\n      <View style={styles.settingLeft}>\n        <Icon name={icon} size={24} color={color} />\n        <Text style={[styles.settingTitle, { color }]}>{title}</Text>\n      </View>\n      {showArrow && <Icon name=\"chevron-right\" size={24} color={Colors.lightText} />}\n    </TouchableOpacity>\n  );\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <StatusBar barStyle=\"light-content\" backgroundColor={theme.colors.primary} />\n\n      {/* Header with Back Button */}\n      <HeaderWithBackButton\n        title=\"Settings\"\n        backgroundColor={theme.colors.primary}\n        textColor={theme.colors.white}\n      />\n\n      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n        {/* General Settings */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>General</Text>\n          <View style={styles.settingsGroup}>\n            <SettingItem\n              title=\"Notifications\"\n              icon=\"notifications\"\n              onPress={() =>\n                Alert.alert('Coming Soon', 'Notification settings will be available soon')\n              }\n            />\n            <SettingItem\n              title=\"Display\"\n              icon=\"display-settings\"\n              onPress={() => Alert.alert('Coming Soon', 'Display settings will be available soon')}\n            />\n            <SettingItem\n              title=\"Language\"\n              icon=\"language\"\n              onPress={() => Alert.alert('Coming Soon', 'Language settings will be available soon')}\n            />\n          </View>\n        </View>\n\n        {/* POS Settings */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Point of Sale</Text>\n          <View style={styles.settingsGroup}>\n            <SettingItem\n              title=\"Payment Methods\"\n              icon=\"payment\"\n              onPress={() =>\n                Alert.alert('Coming Soon', 'Payment method settings will be available soon')\n              }\n            />\n            <SettingItem\n              title=\"Receipt Settings\"\n              icon=\"receipt\"\n              onPress={() => Alert.alert('Coming Soon', 'Receipt settings will be available soon')}\n            />\n            <SettingItem\n              title=\"Tax Settings\"\n              icon=\"calculate\"\n              onPress={() => Alert.alert('Coming Soon', 'Tax settings will be available soon')}\n            />\n          </View>\n        </View>\n\n        {/* Account */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Account</Text>\n          <View style={styles.settingsGroup}>\n            <SettingItem\n              title=\"Privacy Policy\"\n              icon=\"privacy-tip\"\n              onPress={() => Alert.alert('Coming Soon', 'Privacy policy will be available soon')}\n            />\n            <SettingItem\n              title=\"Terms of Service\"\n              icon=\"article\"\n              onPress={() => Alert.alert('Coming Soon', 'Terms of service will be available soon')}\n            />\n            <SettingItem\n              title=\"Help & Support\"\n              icon=\"help\"\n              onPress={() => Alert.alert('Coming Soon', 'Help & support will be available soon')}\n            />\n          </View>\n        </View>\n\n        {/* Logout */}\n        <View style={styles.section}>\n          <View style={styles.settingsGroup}>\n            <SettingItem\n              title=\"Logout\"\n              icon=\"logout\"\n              onPress={handleLogout}\n              showArrow={false}\n              color={Colors.danger}\n            />\n          </View>\n        </View>\n\n        {/* App Info */}\n        <View style={styles.appInfo}>\n          <Logo size=\"small\" showText={false} style={styles.appLogo} />\n          <Text style={styles.appInfoText}>Fynlo POS v1.0.0</Text>\n          <Text style={styles.appInfoText}>Powered by CashApp</Text>\n        </View>\n      </ScrollView>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.primary,\n    paddingHorizontal: 20,\n    paddingVertical: 15,\n    elevation: 4,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n  },\n  headerTitle: {\n    color: Colors.white,\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  content: {\n    flex: 1,\n    padding: 20,\n  },\n  section: {\n    marginBottom: 30,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: Colors.text,\n    marginBottom: 15,\n  },\n  settingsGroup: {\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.1,\n    shadowRadius: 2,\n  },\n  settingItem: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingHorizontal: 20,\n    paddingVertical: 18,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.lightGray,\n  },\n  settingLeft: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    flex: 1,\n  },\n  settingTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    marginLeft: 15,\n  },\n  appInfo: {\n    alignItems: 'center',\n    paddingVertical: 30,\n  },\n  appLogo: {\n    marginBottom: 12,\n  },\n  appInfoText: {\n    fontSize: 14,\n    color: Colors.lightText,\n    marginBottom: 4,\n  },\n});\n\nexport default SettingsScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/main/TableSelectionScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_route' is assigned a value but never used.","line":61,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":61,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_user' is assigned a value but never used.","line":62,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":62,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_loading' is assigned a value but never used.","line":67,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":67,"endColumn":18},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: {\n  backgroundColor: \"selectedSection === item.id ? item.color : '#ecf0f1'\"\n}","line":184,"column":9,"nodeType":"ObjectExpression","endLine":184,"endColumn":82},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { color: \"selectedSection === item.id ? '#fff' : '#2c3e50'\" }","line":188,"column":37,"nodeType":"ObjectExpression","endLine":188,"endColumn":96}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'selectedSection'. Either exclude it or remove the dependency array.","line":84,"column":6,"nodeType":"ArrayExpression","endLine":84,"endColumn":23,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2384,2401],"text":"[]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":3,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  FlatList,\n  TouchableOpacity,\n  Alert,\n  ActivityIndicator,\n  RefreshControl,\n  SegmentedControl,\n} from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { useNavigation, useRoute } from '@react-navigation/native';\nimport { NativeStackNavigationProp } from '@react-navigation/native-stack';\nimport { MainStackParamList } from '../../navigation/MainNavigator';\nimport useAppStore from '../../store/useAppStore';\nimport { DatabaseService } from '../../services/DatabaseService';\n\ntype NavigationProp = NativeStackNavigationProp<MainStackParamList, 'TableSelection'>;\n\ninterface Table {\n  id: string;\n  name: string;\n  display_name: string;\n  capacity: number;\n  status: 'available' | 'occupied' | 'reserved' | 'cleaning' | 'blocked';\n  section: {\n    id: string;\n    name: string;\n    color: string;\n  };\n  current_order?: {\n    id: string;\n    name: string;\n    amount: number;\n  };\n  server?: {\n    id: string;\n    name: string;\n  };\n  occupied_since?: string;\n  stats?: {\n    orders_today: number;\n    revenue_today: number;\n  };\n}\n\ninterface Section {\n  id: string;\n  name: string;\n  color: string;\n  table_count: number;\n  total_capacity: number;\n}\n\nconst OrderTypeSegment = ['Dine In', 'Takeout', 'Pickup', 'Delivery'];\n\nexport const TableSelectionScreen: React.FC = () => {\n  const navigation = useNavigation<NavigationProp>();\n  const _route = useRoute();\n  const { _user } = useAppStore();\n  const [tables, setTables] = useState<Table[]>([]);\n  const [sections, setSections] = useState<Section[]>([]);\n  const [selectedSection, setSelectedSection] = useState<string | null>(__null);\n  const [orderType, setOrderType] = useState(0); // 0 = Dine In\n  const [_loading, setLoading] = useState(__true);\n  const [refreshing, setRefreshing] = useState(__false);\n\n  const fetchFloorPlan = useCallback(async () => {\n    try {\n      const response = await DatabaseService.getRestaurantFloorPlan(__selectedSection);\n      if (response.tables) {\n        setTables(response.tables);\n        setSections(response.sections || []);\n      }\n    } catch (__error) {\n      Alert.alert('Error', 'Failed to load tables');\n    } finally {\n      setLoading(__false);\n      setRefreshing(__false);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedSection]);\n\n  useEffect(() => {\n    fetchFloorPlan();\n  }, [fetchFloorPlan]);\n\n  const onRefresh = () => {\n    setRefreshing(__true);\n    fetchFloorPlan();\n  };\n\n  const getTableStatusColor = (_status: _string) => {\n    switch (__status) {\n      case 'available':\n        return '#27ae60';\n      case 'occupied':\n        return '#e74c3c';\n      case 'reserved':\n        return '#f39c12';\n      case 'cleaning':\n        return '#3498db';\n      case 'blocked':\n        return '#95a5a6';\n      default:\n        return '#7f8c8d';\n    }\n  };\n\n  const handleTableSelect = async (table: _Table) => {\n    const orderTypeMap = ['dine_in', 'takeout', 'pickup', 'delivery'];\n    const selectedOrderType = orderTypeMap[orderType];\n\n    if (selectedOrderType === 'dine_in') {\n      if (table.status !== 'available') {\n        Alert.alert(\n          'Table Unavailable',\n          `This table is currently ${table.status}. Would you like to select a different table?`,\n          [{ text: 'OK', style: 'default' }],\n        );\n        return;\n      }\n\n      // Navigate to POS screen with table info\n      navigation.navigate('POS', {\n        tableId: table.id,\n        tableName: table.display_name,\n        orderType: _selectedOrderType,\n      });\n    } else {\n      // For takeout/pickup/delivery, no table needed\n      navigation.navigate('POS', {\n        orderType: _selectedOrderType,\n      });\n    }\n  };\n\n  const renderTable = ({ item }: { item: Table }) => {\n    const statusColor = getTableStatusColor(item.status);\n    const isOccupied = item.status === 'occupied';\n\n    return (\n      <TouchableOpacity\n        style={[styles.tableCard, { borderColor: statusColor }]}\n        onPress={() => handleTableSelect(__item)}\n        disabled={orderType !== 0 && item.status !== 'available'}>\n        <View style={[styles.tableHeader, { backgroundColor: statusColor }]}>\n          <Text style={styles.tableName}>{item.name}</Text>\n          <Text style={styles.tableCapacity}>{item.capacity} seats</Text>\n        </View>\n\n        <View style={styles.tableBody}>\n          <Text style={styles.tableSection}>{item.section.name}</Text>\n          <Text style={[styles.tableStatus, { color: statusColor }]}>\n            {item.status.toUpperCase()}\n          </Text>\n\n          {isOccupied && item.current_order && (\n            <View style={styles.orderInfo}>\n              <Text style={styles.orderText}>Order: {item.current_order.name}</Text>\n              <Text style={styles.orderAmount}>£{item.current_order.amount.toFixed(2)}</Text>\n            </View>\n          )}\n\n          {item.server && <Text style={styles.serverText}>Server: {item.server.name}</Text>}\n\n          {item.stats && (\n            <View style={styles.statsRow}>\n              <Text style={styles.statText}>Today: {item.stats.orders_today} orders</Text>\n              <Text style={styles.statText}>£{item.stats.revenue_today.toFixed(2)}</Text>\n            </View>\n          )}\n        </View>\n      </TouchableOpacity>\n    );\n  };\n\n  const renderSection = ({ item }: { item: Section }) => (\n    <TouchableOpacity\n      style={[\n        styles.sectionChip,\n        { backgroundColor: selectedSection === item.id ? item.color : '#ecf0f1' },\n      ]}\n      onPress={() => setSelectedSection(item.id === selectedSection ? null : item.id)}>\n      <Text\n        style={[styles.sectionText, { color: selectedSection === item.id ? '#fff' : '#2c3e50' }]}>\n        {item.name} ({item.table_count})\n      </Text>\n    </TouchableOpacity>\n  );\n\n  const filteredTables = selectedSection\n    ? tables.filter(table => table.section.id === selectedSection)\n    : tables;\n\n  if (__loading) {\n    return (\n      <SafeAreaView style={styles.container}>\n        <View style={styles.loadingContainer}>\n          <ActivityIndicator size=\"large\" color=\"#2563eb\" />\n          <Text style={styles.loadingText}>Loading tables...</Text>\n        </View>\n      </SafeAreaView>\n    );\n  }\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <View style={styles.header}>\n        <Text style={styles.title}>Select Table</Text>\n\n        <SegmentedControl\n          values={OrderTypeSegment}\n          selectedIndex={orderType}\n          onChange={event => setOrderType(event.nativeEvent.selectedSegmentIndex)}\n          style={styles.segmentControl}\n        />\n      </View>\n\n      {orderType === 0 && sections.length > 0 && (\n        <FlatList\n          data={sections}\n          renderItem={renderSection}\n          keyExtractor={item => item.id}\n          horizontal\n          showsHorizontalScrollIndicator={false}\n          contentContainerStyle={styles.sectionList}\n        />\n      )}\n\n      {orderType === 0 ? (\n        <FlatList\n          data={filteredTables}\n          renderItem={renderTable}\n          keyExtractor={item => item.id}\n          numColumns={2}\n          contentContainerStyle={styles.tableList}\n          refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}\n          ListEmptyComponent={\n            <View style={styles.emptyContainer}>\n              <Text style={styles.emptyText}>No tables available</Text>\n            </View>\n          }\n        />\n      ) : (\n        <View style={styles.takeoutContainer}>\n          <Text style={styles.takeoutTitle}>{OrderTypeSegment[orderType]} Order</Text>\n          <Text style={styles.takeoutDescription}>\n            No table selection required for {OrderTypeSegment[orderType].toLowerCase()} orders.\n          </Text>\n          <TouchableOpacity\n            style={styles.continueButton}\n            onPress={() => handleTableSelect({} as Table)}>\n            <Text style={styles.continueButtonText}>Continue to Order</Text>\n          </TouchableOpacity>\n        </View>\n      )}\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5',\n  },\n  header: {\n    padding: 20,\n    backgroundColor: '#fff',\n    borderBottomWidth: 1,\n    borderBottomColor: '#e0e0e0',\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#1a1a1a',\n    marginBottom: 15,\n  },\n  segmentControl: {\n    height: 40,\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  loadingText: {\n    marginTop: 10,\n    fontSize: 16,\n    color: '#666',\n  },\n  sectionList: {\n    paddingHorizontal: 20,\n    paddingVertical: 10,\n  },\n  sectionChip: {\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    borderRadius: 20,\n    marginRight: 10,\n  },\n  sectionText: {\n    fontSize: 14,\n    fontWeight: '600',\n  },\n  tableList: {\n    padding: 10,\n  },\n  tableCard: {\n    flex: 1,\n    margin: 10,\n    backgroundColor: '#fff',\n    borderRadius: 12,\n    borderWidth: 2,\n    overflow: 'hidden',\n    elevation: 3,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n  },\n  tableHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: 12,\n  },\n  tableName: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#fff',\n  },\n  tableCapacity: {\n    fontSize: 14,\n    color: '#fff',\n    opacity: 0.9,\n  },\n  tableBody: {\n    padding: 12,\n  },\n  tableSection: {\n    fontSize: 14,\n    color: '#666',\n    marginBottom: 4,\n  },\n  tableStatus: {\n    fontSize: 12,\n    fontWeight: '600',\n    marginBottom: 8,\n  },\n  orderInfo: {\n    marginTop: 8,\n    paddingTop: 8,\n    borderTopWidth: 1,\n    borderTopColor: '#e0e0e0',\n  },\n  orderText: {\n    fontSize: 14,\n    color: '#333',\n  },\n  orderAmount: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#2563eb',\n    marginTop: 4,\n  },\n  serverText: {\n    fontSize: 12,\n    color: '#666',\n    marginTop: 4,\n  },\n  statsRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginTop: 8,\n    paddingTop: 8,\n    borderTopWidth: 1,\n    borderTopColor: '#e0e0e0',\n  },\n  statText: {\n    fontSize: 12,\n    color: '#666',\n  },\n  emptyContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingVertical: 50,\n  },\n  emptyText: {\n    fontSize: 16,\n    color: '#666',\n  },\n  takeoutContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20,\n  },\n  takeoutTitle: {\n    fontSize: 28,\n    fontWeight: 'bold',\n    color: '#1a1a1a',\n    marginBottom: 10,\n  },\n  takeoutDescription: {\n    fontSize: 16,\n    color: '#666',\n    textAlign: 'center',\n    marginBottom: 30,\n  },\n  continueButton: {\n    backgroundColor: '#2563eb',\n    paddingHorizontal: 30,\n    paddingVertical: 15,\n    borderRadius: 8,\n  },\n  continueButtonText: {\n    color: '#fff',\n    fontSize: 18,\n    fontWeight: '600',\n  },\n});\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/main/__tests__/OrderDetailsScreen.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_customerEmailText' is assigned a value but never used.","line":93,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":93,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_getByTestId' is assigned a value but never used.","line":129,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":129,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'View' is not defined.","line":131,"column":8,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":131,"endColumn":12}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { render, fireEvent } from '@testing-library/react-native';\nimport OrderDetailsScreen from '../OrderDetailsScreen'; // Adjust path\nimport { Linking } from 'react-native';\nimport { ThemeProvider, defaultTheme } from '../../../design-system/ThemeProvider'; // Adjust path\n\n// Mock react-navigation\nconst _mockNavigate = jest.fn();\nconst _mockGoBack = jest.fn();\nconst _mockRouteParams = {\n  orderId: 'order123', // Default mock orderId\n  // Potentially pass the whole order object if that's how the screen receives it\n  order: {\n    id: 'order123',\n    items: [{ id: 1, name: 'Test Item 1', price: 10.0, quantity: 1, emoji: '🧪' }],\n    subtotal: 10.0,\n    tax: 1.0,\n    total: 11.0,\n    customer: {\n      id: 'cust1',\n      name: 'Diana Prince',\n      email: 'diana@them.yscira',\n    },\n    tableNumber: 7,\n    createdAt: new Date(),\n    status: 'preparing',\n    paymentMethod: 'card',\n    notes: 'Test notes',\n  },\n};\n\njest.mock('@react-navigation/native', () => {\n  const actualNav = jest.requireActual('@react-navigation/native');\n  return {\n    ...actualNav,\n    useNavigation: () => ({\n      navigate: _mockNavigate,\n      goBack: _mockGoBack,\n    }),\n    useRoute: () => ({\n      params: _mockRouteParams, // Provide mocked params\n    }),\n  };\n});\n\n// Mock Linking\njest.spyOn(__Linking, 'openURL').mockImplementation(() => Promise.resolve());\n\n// Mock order data for the screen (it uses a static mockOrder internally for now)\n// We will test against the structure it expects, which we updated.\nconst MOCKED_INTERNAL_ORDER_DATA = {\n  id: 1, // The screen uses '1' internally, let's align with that for now\n  items: [\n    { id: 1, name: 'Classic Burger', price: 12.99, quantity: 2, emoji: '🍔' },\n    { id: 2, name: 'French Fries', price: 4.99, quantity: 1, emoji: '🍟' },\n  ],\n  subtotal: 30.97,\n  tax: 2.48,\n  total: 33.45,\n  customer: {\n    // This is the key part we updated\n    id: 'cust_johndoe',\n    name: 'John Doe',\n    email: 'john.doe@example.com',\n  },\n  tableNumber: 5,\n  createdAt: new Date(Date.now() - 1000 * 60 * 30), // Match internal mock structure\n  status: 'preparing',\n  paymentMethod: 'card',\n  notes: 'Extra sauce on the burger',\n};\n\n// Helper to wrap with ThemeProvider\nconst AllProviders = ({ children }: { children: React.ReactNode }) => (\n  <ThemeProvider theme={defaultTheme}>{children}</ThemeProvider>\n);\n\ndescribe('OrderDetailsScreen', () => {\n  // Note: This screen currently uses an internal `mockOrder`.\n  // Ideally, it would take an `order` prop or fetch based on `orderId` from route params.\n  // The tests will assume it uses its internal mock structure for now,\n  // but verify the parts we care about (customer name and email).\n\n  it('renders customer name correctly', () => {\n    const { getByText } = render(<OrderDetailsScreen />, { wrapper: AllProviders });\n    // The screen uses `mockOrder.customer.name`\n    expect(getByText(MOCKED_INTERNAL_ORDER_DATA.customer.name)).toBeTruthy();\n  });\n\n  it('renders customer email correctly and makes it tappable', () => {\n    const { getByText } = render(<OrderDetailsScreen />, { wrapper: AllProviders });\n\n    const _customerEmailText = getByText(MOCKED_INTERNAL_ORDER_DATA.customer.email);\n    expect(__customerEmailText).toBeTruthy();\n\n    fireEvent.press(__customerEmailText);\n    expect(Linking.openURL).toHaveBeenCalledWith(\n      `mailto:${MOCKED_INTERNAL_ORDER_DATA.customer.email}`,\n    );\n  });\n\n  it('displays \"Walk-in Customer\" if customer name is not available (conceptual test)', () => {\n    // To properly test this, the screen would need to handle an order without customer info.\n    // Since it uses a hardcoded mockOrder, we can't directly test this scenario\n    // without modifying the screen to accept a prop or use a different mock.\n    // For now, this test is more of a placeholder for that future state.\n\n    // Simulate a version of mockOrder without customer info (if screen supported it)\n    // const orderWithoutCustomer = { ...MOCKED_INTERNAL_ORDER_DATA, customer: undefined };\n    // useRoute.mockReturnValueOnce({ params: { order: orderWithoutCustomer }}); // If it took order from params\n\n    // For the current screen, this specific test case isn't fully applicable due to hardcoded mock.\n    // However, if the screen's mockOrder.customer was undefined:\n    // const { getByText } = render(<OrderDetailsScreen />, { wrapper: AllProviders });\n    // expect(getByText('Walk-in Customer')).toBeTruthy();\n    // This would fail with current screen structure but illustrates the intent.\n    expect(__true).toBe(__true); // Placeholder assertion\n  });\n\n  it('does not render email if not available (conceptual test)', () => {\n    // Similar to above, this depends on the screen handling dynamic data.\n    // If MOCKED_INTERNAL_ORDER_DATA.customer.email was undefined:\n    // const { queryByText } = render(<OrderDetailsScreen />, { wrapper: AllProviders });\n    // expect(queryByText(/.+@.+\\..+/)).toBeNull(); // Basic email pattern check\n    expect(__true).toBe(__true); // Placeholder assertion\n  });\n\n  it('navigates back when back button is pressed', () => {\n    const { _getByTestId } = render(\n      // Assuming back button has a testID or accessible label\n      <View>{/* Minimal structure to allow finding the button if it's part of header */}</View>,\n    );\n    // This test is simplified. Actual back button might be harder to target without more info.\n    // For now, we directly test the mockGoBack.\n    // fireEvent.press(getByTestId('header-back-button')); // Example\n    // expect(__mockGoBack).toHaveBeenCalled();\n    // If the button is found and pressed, this would be tested.\n    // For now, just confirming the mock setup.\n    expect(__mockGoBack).not.toHaveBeenCalled(); // Initially\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/main/__tests__/OrdersScreen.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_orderItem' is assigned a value but never used.","line":121,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":121,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_statusButton' is assigned a value but never used.","line":134,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":134,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_pendingFilter' is assigned a value but never used.","line":147,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":147,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_searchInput' is assigned a value but never used.","line":159,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":159,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_ordersList' is assigned a value but never used.","line":172,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":172,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_deleteButton' is assigned a value but never used.","line":185,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":185,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_confirmButton' is assigned a value but never used.","line":193,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":193,"endColumn":25}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * OrdersScreen Component Tests\n * Testing order management and history interface\n */\n\nimport React from 'react';\nimport { fireEvent, waitFor } from '@testing-library/react-native';\nimport OrdersScreen from '../OrdersScreen';\nimport { customRender } from '../../../__tests__/utils/testUtils';\nimport { useAppStore } from '../../../store/useAppStore';\n\n// Mock the store\njest.mock('../../../store/useAppStore');\nconst mockUseAppStore = useAppStore as jest.MockedFunction<typeof useAppStore>;\n\n// Mock navigation\nconst mockNavigation = {\n  navigate: jest.fn(),\n  goBack: jest.fn(),\n  dispatch: jest.fn(),\n};\n\ndescribe('OrdersScreen', () => {\n  const mockOrders = [\n    {\n      id: 1,\n      customer_name: 'John Doe',\n      items: [\n        { name: 'Classic Burger', quantity: 2, price: 12.99 },\n        { name: 'French Fries', quantity: 1, price: 4.99 },\n      ],\n      total: 30.97,\n      status: 'completed',\n      created_at: '2024-01-15T10:30:00Z',\n      table_number: 5,\n    },\n    {\n      id: 2,\n      customer_name: 'Jane Smith',\n      items: [{ name: 'Caesar Salad', quantity: 1, price: 8.99 }],\n      total: 8.99,\n      status: 'pending',\n      created_at: '2024-01-15T11:15:00Z',\n      table_number: 3,\n    },\n  ];\n\n  const mockStoreState = {\n    orders: _mockOrders,\n    loadOrders: jest.fn(),\n    updateOrderStatus: jest.fn(),\n    deleteOrder: jest.fn(),\n    searchOrders: jest.fn(),\n    isLoading: _false,\n  };\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    mockUseAppStore.mockReturnValue(__mockStoreState);\n  });\n\n  it('renders correctly', () => {\n    const { getByText, getByTestId } = customRender(<OrdersScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n\n    expect(getByText('Orders')).toBeTruthy();\n    expect(getByTestId('orders-list')).toBeTruthy();\n  });\n\n  it('displays orders correctly', () => {\n    const { getByText } = customRender(<OrdersScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n\n    expect(getByText('Order #1')).toBeTruthy();\n    expect(getByText('John Doe')).toBeTruthy();\n    expect(getByText('$30.97')).toBeTruthy();\n    expect(getByText('Table 5')).toBeTruthy();\n    expect(getByText('completed')).toBeTruthy();\n\n    expect(getByText('Order #2')).toBeTruthy();\n    expect(getByText('Jane Smith')).toBeTruthy();\n    expect(getByText('$8.99')).toBeTruthy();\n    expect(getByText('Table 3')).toBeTruthy();\n    expect(getByText('pending')).toBeTruthy();\n  });\n\n  it('displays empty state when no orders', () => {\n    mockUseAppStore.mockReturnValue({\n      ...mockStoreState,\n      orders: [],\n    });\n\n    const { getByText } = customRender(<OrdersScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n\n    expect(getByText('No orders found')).toBeTruthy();\n    expect(getByText('Orders will appear here once created')).toBeTruthy();\n  });\n\n  it('displays loading state', () => {\n    mockUseAppStore.mockReturnValue({\n      ...mockStoreState,\n      isLoading: _true,\n    });\n\n    const { getByTestId } = customRender(<OrdersScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n\n    expect(getByTestId('loading-indicator')).toBeTruthy();\n  });\n\n  it('navigates to order details when order is tapped', () => {\n    const { getByText } = customRender(<OrdersScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n\n    const _orderItem = getByText('Order #1');\n    fireEvent.press(__orderItem);\n\n    expect(mockNavigation.navigate).toHaveBeenCalledWith('OrderDetails', {\n      orderId: 1,\n    });\n  });\n\n  it('updates order status', async () => {\n    const { getByTestId } = customRender(<OrdersScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n\n    const _statusButton = getByTestId('status-button-2');\n    fireEvent.press(__statusButton);\n\n    await waitFor(() => {\n      expect(mockStoreState.updateOrderStatus).toHaveBeenCalledWith(2, 'completed');\n    });\n  });\n\n  it('filters orders by status', () => {\n    const { getByText } = customRender(<OrdersScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n\n    const _pendingFilter = getByText('Pending');\n    fireEvent.press(__pendingFilter);\n\n    // Should filter orders (implementation would depend on store logic)\n    expect(getByText('Jane Smith')).toBeTruthy();\n  });\n\n  it('searches orders by customer name', async () => {\n    const { getByTestId } = customRender(<OrdersScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n\n    const _searchInput = getByTestId('search-input');\n    fireEvent.changeText(__searchInput, 'John');\n\n    await waitFor(() => {\n      expect(mockStoreState.searchOrders).toHaveBeenCalledWith('John');\n    });\n  });\n\n  it('refreshes orders on pull to refresh', async () => {\n    const { getByTestId } = customRender(<OrdersScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n\n    const _ordersList = getByTestId('orders-list');\n    fireEvent(__ordersList, 'refresh');\n\n    await waitFor(() => {\n      expect(mockStoreState.loadOrders).toHaveBeenCalled();\n    });\n  });\n\n  it('deletes order when delete button is pressed', async () => {\n    const { getByTestId } = customRender(<OrdersScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n\n    const _deleteButton = getByTestId('delete-order-1');\n    fireEvent.press(__deleteButton);\n\n    // Should show confirmation dialog\n    await waitFor(() => {\n      expect(getByTestId('delete-confirmation')).toBeTruthy();\n    });\n\n    const _confirmButton = getByTestId('confirm-delete');\n    fireEvent.press(__confirmButton);\n\n    await waitFor(() => {\n      expect(mockStoreState.deleteOrder).toHaveBeenCalledWith(1);\n    });\n  });\n\n  it('displays order items correctly', () => {\n    const { getByText } = customRender(<OrdersScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n\n    expect(getByText('Classic Burger x2')).toBeTruthy();\n    expect(getByText('French Fries x1')).toBeTruthy();\n    expect(getByText('Caesar Salad x1')).toBeTruthy();\n  });\n\n  it('formats order date correctly', () => {\n    const { getByText } = customRender(<OrdersScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n\n    // Assuming date formatting function exists\n    expect(getByText('Jan 15, 10:30 AM')).toBeTruthy();\n    expect(getByText('Jan 15, 11:15 AM')).toBeTruthy();\n  });\n\n  it('handles order status changes correctly', async () => {\n    const { getByTestId, rerender } = customRender(<OrdersScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n\n    // Update order status in store\n    const _updatedOrders = [{ ...mockOrders[0] }, { ...mockOrders[1], status: 'completed' }];\n\n    mockUseAppStore.mockReturnValue({\n      ...mockStoreState,\n      orders: _updatedOrders,\n    });\n\n    rerender(<OrdersScreen />);\n\n    // Should reflect updated status\n    await waitFor(() => {\n      expect(getByTestId('order-status-2')).toHaveTextContent('completed');\n    });\n  });\n\n  it('groups orders by date', () => {\n    const _ordersWithDifferentDates = [\n      { ...mockOrders[0], created_at: '2024-01-15T10:30:00Z' },\n      { ...mockOrders[1], created_at: '2024-01-14T15:20:00Z' },\n    ];\n\n    mockUseAppStore.mockReturnValue({\n      ...mockStoreState,\n      orders: _ordersWithDifferentDates,\n    });\n\n    const { getByText } = customRender(<OrdersScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n\n    expect(getByText('Today')).toBeTruthy();\n    expect(getByText('Yesterday')).toBeTruthy();\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/main/__tests__/POSScreen.MenuItemCard.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-shadow","severity":1,"message":"'React' is already declared in the upper scope on line 1 column 8.","line":23,"column":11,"nodeType":"Identifier","messageId":"noShadow","endLine":23,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_View' is assigned a value but never used.","line":25,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_Text' is assigned a value but never used.","line":25,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":25},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.menuCard","line":53,"column":5,"nodeType":"Property","endLine":53,"endColumn":56},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.menuCardDisabled","line":54,"column":5,"nodeType":"Property","endLine":54,"endColumn":39},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.menuCardContent","line":55,"column":5,"nodeType":"Property","endLine":55,"endColumn":24},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.menuItemEmoji","line":56,"column":5,"nodeType":"Property","endLine":56,"endColumn":22},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.menuItemName","line":57,"column":5,"nodeType":"Property","endLine":57,"endColumn":21},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.menuItemPrice","line":58,"column":5,"nodeType":"Property","endLine":58,"endColumn":42},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.quantityPillContainer","line":59,"column":5,"nodeType":"Property","endLine":59,"endColumn":92},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_tree' is assigned a value but never used.","line":122,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":122,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_tree' is assigned a value but never used.","line":128,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":128,"endColumn":18}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":23,"column":19,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":23,"endColumn":35,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":25,"column":48,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":25,"endColumn":71,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":4,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { render } from '@testing-library/react-native';\nimport { ThemeProvider, useTheme } from '../../../design-system/ThemeProvider'; // Adjust path as needed\nimport { ExportedMenuItemCard } from '../POSScreen'; // Import the correctly named exported component\nimport useAppStore from '../../../store/useAppStore'; // Adjust path as needed\nimport { MenuItem, OrderItem } from '../../../types'; // OrderItem needed for cart\nimport { StyleSheet } from 'react-native'; // Import StyleSheet\n\n// Mock useAppStore\njest.mock('../../../store/useAppStore');\n\n// Mock NetInfo\njest.mock('@react-native-community/netinfo', () => ({\n  fetch: jest.fn(() => Promise.resolve({ isConnected: _true, type: 'wifi' })),\n  addEventListener: jest.fn(),\n  useNetInfo: jest.fn(() => ({ isConnected: _true, type: 'wifi' })),\n}));\n\n// Mock QuantityPill component\njest.mock('../../../components/inputs', () => ({\n  QuantityPill: ({ _quantity, _onIncrease, _onDecrease }: _unknown) => {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const React = require('react');\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const { _View, _Text, TouchableOpacity } = require('react-native');\n    return React.createElement(__View, { testID: 'quantity-pill' }, [\n      React.createElement(\n        TouchableOpacity,\n        { key: 'decrease', onPress: _onDecrease, testID: 'quantity-decrease' },\n        React.createElement(__Text, {}, '-'),\n      ),\n      React.createElement(__Text, { key: 'quantity', testID: 'quantity-text' }, _quantity),\n      React.createElement(\n        TouchableOpacity,\n        { key: 'increase', onPress: _onIncrease, testID: 'quantity-increase' },\n        React.createElement(__Text, {}, '+'),\n      ),\n    ]);\n  },\n}));\n\n// Mock useNavigation\njest.mock('@react-navigation/native', () => ({\n  ...jest.requireActual('@react-navigation/native'),\n  useNavigation: () => ({\n    navigate: jest.fn(),\n  }),\n}));\n\n// Minimal styles mock - replace with actual createStyles if needed for visual accuracy\nconst mockCreateStyles = (_theme: _unknown) =>\n  StyleSheet.create({\n    menuCard: { backgroundColor: 'white', padding: 10 },\n    menuCardDisabled: { opacity: 0.5 },\n    menuCardContent: {},\n    menuItemEmoji: {},\n    menuItemName: {},\n    menuItemPrice: { overflow: 'hidden' },\n    quantityPillContainer: { alignItems: 'center', justifyContent: 'center', marginTop: 8 },\n  });\n\nconst mockMenuItem: MenuItem = {\n  id: 1,\n  name: 'Test Item',\n  price: 10.0,\n  category: 'Test Category',\n  emoji: '🧪',\n  available: _true,\n  description: 'A test item description.',\n};\n\n// Wrapper component to provide theme and styles\nconst TestWrapper = ({ quantity }: { quantity: number }) => {\n  const { theme } = useTheme();\n  const styles = mockCreateStyles(__theme);\n\n  const mockCart: OrderItem[] =\n    quantity > 0 ? [{ ...mockMenuItem, _quantity, modifications: [], notes: '' }] : [];\n  const mockAddToCart = jest.fn();\n  const mockUpdateCartItem = jest.fn();\n  const mockRemoveFromCart = jest.fn();\n\n  (useAppStore as jest.Mock).mockReturnValue({\n    cart: _mockCart,\n    addToCart: _mockAddToCart,\n    removeFromCart: _mockRemoveFromCart,\n    updateCartItem: _mockUpdateCartItem,\n  });\n\n  return (\n    <ExportedMenuItemCard\n      item={mockMenuItem}\n      theme={theme}\n      styles={styles}\n      cart={mockCart}\n      handleAddToCart={mockAddToCart}\n      handleUpdateQuantity={(__id, _qty) => {\n        if (qty <= 0) {\n          mockRemoveFromCart(__id);\n        } else {\n          mockUpdateCartItem(__id, { quantity: qty });\n        }\n      }}\n    />\n  );\n};\n\nconst renderMenuItemCardWithQuantity = (quantity: _number) => {\n  return render(\n    <ThemeProvider>\n      <TestWrapper quantity={quantity} />\n    </ThemeProvider>,\n  );\n};\n\ndescribe('ExportedMenuItemCard Snapshot Tests', () => {\n  beforeEach(() => {\n    (useAppStore as jest.Mock).mockClear();\n  });\n\n  it('renders correctly with no items in cart (quantity 0)', () => {\n    const _tree = renderMenuItemCardWithQuantity(0).toJSON();\n    expect(__tree).toMatchSnapshot();\n  });\n\n  for (let i = 1; i <= 10; i++) {\n    it(`renders correctly with quantity ${i}`, () => {\n      const _tree = renderMenuItemCardWithQuantity(__i).toJSON();\n      expect(__tree).toMatchSnapshot();\n    });\n  }\n});\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/main/__tests__/POSScreen.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_menuItems' is assigned a value but never used.","line":22,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_initialUIStoreState' is defined but never used.","line":88,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":88,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_getByTestId' is assigned a value but never used.","line":129,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":129,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_allIcons' is assigned a value but never used.","line":142,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":142,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_nachosItem' is assigned a value but never used.","line":165,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":165,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_cartButton' is assigned a value but never used.","line":179,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":179,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_getByTestId' is assigned a value but never used.","line":185,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":185,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_UNSAFE_getByProps' is assigned a value but never used.","line":185,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":185,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_bubble' is assigned a value but never used.","line":235,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":235,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_getByPlaceholderText' is assigned a value but never used.","line":242,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":242,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_searchInput' is assigned a value but never used.","line":248,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":248,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_getByPlaceholderText' is assigned a value but never used.","line":265,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":265,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_searchInput' is assigned a value but never used.","line":271,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":271,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_clearButton' is assigned a value but never used.","line":279,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":279,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_getByPlaceholderText' is assigned a value but never used.","line":295,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":295,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_tacosCategoryTab' is assigned a value but never used.","line":301,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":301,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_searchInput' is assigned a value but never used.","line":315,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":315,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_clearButton' is assigned a value but never used.","line":326,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":326,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_unavailableItemText' is assigned a value but never used.","line":345,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":345,"endColumn":31}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":193,"column":7,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":193,"endColumn":57,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":218,"column":7,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":218,"endColumn":57,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":19,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * POSScreen Component Tests\n * Testing the main point-of-sale interface\n */\n\nimport React from 'react';\nimport { fireEvent, act } from '@testing-library/react-native';\nimport POSScreen from '../POSScreen'; // Import ExportedMenuItemCard\nimport { customRenderWithStores, useTestTheme } from '../../../__tests__/utils/testUtils';\nimport useAppStore from '../../../store/useAppStore';\nimport useUIStore from '../../../store/useUIStore';\nimport { ThemeProvider } from '../../../design-system/ThemeProvider'; // Import ThemeProvider\n\n// Mock navigation\nconst mockNavigation = {\n  navigate: jest.fn(),\n  goBack: jest.fn(),\n  dispatch: jest.fn(),\n};\n\n// Mock menu items directly from POSScreen for consistency\nconst _menuItems = [\n  {\n    id: 1,\n    name: 'Nachos',\n    price: 5.0,\n    category: 'Snacks',\n    emoji: '🧀',\n    available: _true,\n    description: 'Description for Nachos',\n  },\n  {\n    id: 6,\n    name: 'Carnitas Taco',\n    price: 3.5,\n    category: 'Tacos',\n    emoji: '🌮',\n    available: _true,\n    description: 'Description for Carnitas',\n  },\n  {\n    id: 7,\n    name: 'Cochinita Taco',\n    price: 3.5,\n    category: 'Tacos',\n    emoji: '🌮',\n    available: _true,\n    description: 'Description for Cochinita',\n  },\n  {\n    id: 20,\n    name: 'Carne Asada Taco',\n    price: 4.5,\n    category: 'Special Tacos',\n    emoji: '⭐',\n    available: _true,\n    description: 'Description for Carne Asada',\n  },\n  {\n    id: 31,\n    name: 'Pink Paloma',\n    price: 3.75,\n    category: 'Drinks',\n    emoji: '🍹',\n    available: _true,\n    description: 'Description for Pink Paloma',\n  },\n  {\n    id: 32,\n    name: 'Coco-Nought',\n    price: 3.75,\n    category: 'Drinks',\n    emoji: '🥥',\n    available: _false,\n    description: 'Unavailable Drink',\n  }, // Example of unavailable item\n];\n\n// Mock theme for ExportedMenuItemCard if needed, or wrap with ThemeProvider\nconst TestWrapper = ({ children }) => {\n  const theme = useTestTheme(); // Assuming useTestTheme provides a valid theme object\n  return <ThemeProvider theme={theme}>{children}</ThemeProvider>;\n};\n\ndescribe('POSScreen', () => {\n  // Initial store state that can be modified by tests\n  let initialAppStoreState;\n  let _initialUIStoreState;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    // Reset store states before each test\n    initialAppStoreState = {\n      cart: [],\n      addToCart: jest.fn(item =>\n        useAppStore.setState(state => ({ cart: [...state.cart, { ...item, quantity: 1 }] })),\n      ),\n      removeFromCart: jest.fn(id =>\n        useAppStore.setState(state => ({ cart: state.cart.filter(item => item.id !== id) })),\n      ),\n      updateCartItem: jest.fn((__id, _updates) =>\n        useAppStore.setState(state => ({\n          cart: state.cart.map(item => (item.id === id ? { ...item, ...updates } : _item)),\n        })),\n      ),\n      clearCart: jest.fn(() => useAppStore.setState({ cart: [] })),\n      cartTotal: jest.fn(() =>\n        useAppStore.getState().cart.reduce((__sum, _item) => sum + item.price * item.quantity, 0),\n      ),\n      cartItemCount: jest.fn(() =>\n        useAppStore.getState().cart.reduce((__sum, _item) => sum + item.quantity, 0),\n      ),\n    };\n\n    initialUIStoreState = {\n      selectedCategory: 'All',\n      setSelectedCategory: jest.fn(category => useUIStore.setState({ selectedCategory: category })),\n      showPaymentModal: _false,\n      setShowPaymentModal: jest.fn(show => useUIStore.setState({ showPaymentModal: show })),\n    };\n\n    // Set initial state for stores\n    useAppStore.setState(__initialAppStoreState, _true);\n    useUIStore.setState(__initialUIStoreState, _true);\n  });\n\n  it('renders correctly and magnifier icon is not present', () => {\n    const { getByText, _getByTestId, queryByTestId, UNSAFE_getByProps } = customRenderWithStores(\n      <POSScreen />,\n      { navigationProps: { navigation: mockNavigation } },\n    );\n\n    // Check for some known text elements\n    expect(getByText('Fynlo POS')).toBeTruthy(); // Assuming this is part of your header or a static text\n    expect(getByTestId('menu-flat-list')).toBeTruthy();\n    expect(UNSAFE_getByProps({ name: 'shopping-cart' })).toBeTruthy(); // Check for cart icon\n\n    // Verify magnifier icon is not present\n    // This depends on how the magnifier was implemented (e.g., by icon name or testID)\n    // Assuming it was an Icon with name \"search\"\n    const _allIcons = UNSAFE_getByProps({ name: 'search' });\n    // If the search icon was only in the header, and now we have one in the bubble,\n    // we need a more specific way to check the header.\n    // For now, let's assume the header search icon was unique or had a specific testID not present now.\n    // If CategorySearchBubble also uses an icon named \"search\", this test needs adjustment.\n    // Let's assume the old one was `header-search-icon` for clarity.\n    expect(queryByTestId('header-search-icon')).toBeNull(); // Example testID for the old icon\n  });\n\n  it('displays menu items correctly', () => {\n    const { getByText } = customRenderWithStores(<POSScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n    expect(getByText('Nachos')).toBeTruthy();\n    expect(getByText('£5.00')).toBeTruthy(); // Assuming formatPrice works like this\n    expect(getByText('Carnitas Taco')).toBeTruthy();\n  });\n\n  it('adds item to cart when tapped', () => {\n    const { getByText } = customRenderWithStores(<POSScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n\n    const _nachosItem = getByText('Nachos');\n    fireEvent.press(__nachosItem);\n\n    expect(initialAppStoreState.addToCart).toHaveBeenCalledWith(\n      expect.objectContaining({ id: 1, name: 'Nachos', price: 5.0 }),\n    );\n    // Check if cart state was updated (__optional, as addToCart is mocked to update state)\n    expect(useAppStore.getState().cart.length).toBe(1);\n  });\n\n  it('opens cart modal when cart icon is pressed', () => {\n    const { getByTestId, getByText } = customRenderWithStores(<POSScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n    const _cartButton = getByTestId('shopping-cart-button');\n    fireEvent.press(__cartButton);\n    expect(getByText('Current Order')).toBeTruthy(); // Modal title\n  });\n\n  it('CartIcon color is orange when empty, red when not empty', () => {\n    const { _getByTestId, _UNSAFE_getByProps, rerender } = customRenderWithStores(<POSScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n\n    // Initial state: cart is empty\n    let cartIconComponent = UNSAFE_getByProps({ testID: 'shopping-cart-button' });\n    let internalIcon = cartIconComponent.findAllByType(\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      require('react-native-vector-icons/MaterialIcons').default,\n    )[0];\n    // Check for theme.colors.primary (Fynlo orange) - exact color depends on your theme setup\n    // For this test, we'll assume the color prop is directly passed.\n    // The theme object itself is complex to mock perfectly here, so we check the logic's output.\n    // If theme.colors.primary is '#FF6B35' (example Fynlo Orange)\n    expect(internalIcon.props.color).toBe('#FF6B35'); // Orange when empty\n\n    // Add an item to the cart\n    act(() => {\n      useAppStore\n        .getState()\n        .addToCart({ id: 1, name: 'Test Item', price: 10, quantity: 1, emoji: '🧪' });\n    });\n\n    // Rerender or update component to reflect store changes\n    rerender(\n      <TestWrapper>\n        <POSScreen navigation={mockNavigation} />\n      </TestWrapper>,\n    );\n\n    cartIconComponent = UNSAFE_getByProps({ testID: 'shopping-cart-button' });\n    internalIcon = cartIconComponent.findAllByType(\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      require('react-native-vector-icons/MaterialIcons').default,\n    )[0];\n    expect(internalIcon.props.color).toBe('#FF3B30'); // Red when not empty\n  });\n\n  describe('Search Functionality', () => {\n    it('renders CategorySearchBubble', () => {\n      const { getByTestId } = customRenderWithStores(<POSScreen />, {\n        navigationProps: { navigation: mockNavigation },\n      });\n      expect(getByTestId('category-search-bubble-inactive')).toBeTruthy();\n    });\n\n    it('expands search bubble on tap and shows TextInput', () => {\n      const { getByTestId, getByPlaceholderText } = customRenderWithStores(<POSScreen />, {\n        navigationProps: { navigation: mockNavigation },\n      });\n      const _bubble = getByTestId('category-search-bubble-inactive');\n      fireEvent.press(__bubble);\n      expect(getByTestId('category-search-bubble-active')).toBeTruthy();\n      expect(getByPlaceholderText('Search food...')).toBeTruthy();\n    });\n\n    it('filters items when typing \"Taco\"', async () => {\n      const { getByTestId, _getByPlaceholderText, queryByText } = customRenderWithStores(\n        <POSScreen />,\n        { navigationProps: { navigation: mockNavigation } },\n      );\n\n      fireEvent.press(getByTestId('category-search-bubble-inactive'));\n      const _searchInput = getByPlaceholderText('Search food...');\n\n      act(() => {\n        fireEvent.changeText(__searchInput, 'Taco');\n      });\n\n      // Wait for state update and re-render\n      await waitFor(() => {\n        expect(queryByText('Carnitas Taco')).toBeTruthy();\n        expect(queryByText('Cochinita Taco')).toBeTruthy();\n        expect(queryByText('Carne Asada Taco')).toBeTruthy();\n        expect(queryByText('Nachos')).toBeNull(); // Should not be visible\n        expect(queryByText('Pink Paloma')).toBeNull(); // Should not be visible\n      });\n    });\n\n    it('clears search and shows all items (for \"All\" category) when clear button is pressed', async () => {\n      const { getByTestId, _getByPlaceholderText, queryByText } = customRenderWithStores(\n        <POSScreen />,\n        { navigationProps: { navigation: mockNavigation } },\n      );\n\n      fireEvent.press(getByTestId('category-search-bubble-inactive'));\n      const _searchInput = getByPlaceholderText('Search food...');\n\n      act(() => {\n        fireEvent.changeText(__searchInput, 'Taco');\n      });\n\n      await waitFor(() => expect(queryByText('Nachos')).toBeNull()); // Pre-condition: Nachos is hidden\n\n      const _clearButton = getByTestId('clear-search-button');\n      act(() => {\n        fireEvent.press(__clearButton);\n      });\n\n      await waitFor(() => {\n        // Search query is cleared, should show all items if \"All\" category is selected\n        expect(queryByText('Nachos')).toBeTruthy();\n        expect(queryByText('Carnitas Taco')).toBeTruthy();\n        expect(queryByText('Pink Paloma')).toBeTruthy();\n      });\n      // Bubble should also revert to inactive state\n      expect(getByTestId('category-search-bubble-inactive')).toBeTruthy();\n    });\n\n    it('filters correctly when a category is selected and then search is used', async () => {\n      const { getByTestId, _getByPlaceholderText, getByText, queryByText } = customRenderWithStores(\n        <POSScreen />,\n        { navigationProps: { navigation: mockNavigation } },\n      );\n\n      // Select 'Tacos' category\n      const _tacosCategoryTab = getByText('Tacos');\n      act(() => {\n        fireEvent.press(__tacosCategoryTab);\n      });\n\n      await waitFor(() => {\n        expect(useUIStore.getState().selectedCategory).toBe('Tacos');\n        expect(queryByText('Nachos')).toBeNull(); // Nachos (__Snacks) should be hidden\n        expect(queryByText('Carnitas Taco')).toBeTruthy();\n        expect(queryByText('Carne Asada Taco')).toBeNull(); // Special Taco, should be hidden by category\n      });\n\n      // Now search within 'Tacos'\n      fireEvent.press(getByTestId('category-search-bubble-inactive'));\n      const _searchInput = getByPlaceholderText('Search food...');\n      act(() => {\n        fireEvent.changeText(__searchInput, 'Cochinita');\n      });\n\n      await waitFor(() => {\n        expect(queryByText('Cochinita Taco')).toBeTruthy();\n        expect(queryByText('Carnitas Taco')).toBeNull(); // Should be hidden by search\n      });\n\n      // Clear search, should revert to 'Tacos' category items\n      const _clearButton = getByTestId('clear-search-button');\n      act(() => {\n        fireEvent.press(__clearButton);\n      });\n\n      await waitFor(() => {\n        expect(queryByText('Carnitas Taco')).toBeTruthy();\n        expect(queryByText('Cochinita Taco')).toBeTruthy();\n        expect(queryByText('Carne Asada Taco')).toBeNull(); // Still hidden by category\n        expect(queryByText('Nachos')).toBeNull(); // Still hidden by category\n      });\n    });\n  });\n\n  // Test for unavailable items (ensure it's not tappable)\n  it('handles unavailable items correctly (not tappable)', () => {\n    const { getByText } = customRenderWithStores(<POSScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n    const _unavailableItemText = getByText('Coco-Nought'); // This item is marked available: false\n\n    // Check if the parent TouchableOpacity is disabled or press does not call addToCart\n    // This depends on how ExportedMenuItemCard handles disabled state.\n    // We'll assume if it's disabled, addToCart won't be called.\n    fireEvent.press(__unavailableItemText);\n    expect(initialAppStoreState.addToCart).not.toHaveBeenCalledWith(\n      expect.objectContaining({ name: 'Coco-Nought' }),\n    );\n  });\n});\n\n// Snapshot tests for Header Actions conditional rendering (if applicable)\n// This part might need adjustment based on how IS_DEV and FLAGS are handled in your actual setup.\n// For these tests, we'll mock them directly.\ndescribe('POSScreen Header Actions Conditional Rendering Snapshots', () => {\n  let mockIS_DEV;\n  jest.mock('../../../env', () => ({\n    // Corrected path\n    get IS_DEV() {\n      return mockIS_DEV;\n    },\n    envBool: jest.fn((__name, _fallback) => fallback),\n  }));\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    global.FLAGS = { SHOW_DEV_MENU: true }; // Default for these tests\n  });\n\n  it('snapshot: no bug icon in production (FLAGS.SHOW_DEV_MENU = true)', () => {\n    mockIS_DEV = false;\n    const { toJSON } = customRenderWithStores(<POSScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n    expect(toJSON()).toMatchSnapshot();\n  });\n\n  it('snapshot: bug icon in development (FLAGS.SHOW_DEV_MENU = true)', () => {\n    mockIS_DEV = true;\n    const { toJSON } = customRenderWithStores(<POSScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n    expect(toJSON()).toMatchSnapshot();\n  });\n\n  it('snapshot: no bug icon if FLAGS.SHOW_DEV_MENU = false (__dev)', () => {\n    mockIS_DEV = true;\n    global.FLAGS.SHOW_DEV_MENU = false;\n    const { toJSON } = customRenderWithStores(<POSScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n    expect(toJSON()).toMatchSnapshot();\n  });\n\n  it('snapshot: no bug icon if FLAGS.SHOW_DEV_MENU = false (__prod)', () => {\n    mockIS_DEV = false;\n    global.FLAGS.SHOW_DEV_MENU = false;\n    const { toJSON } = customRenderWithStores(<POSScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n    expect(toJSON()).toMatchSnapshot();\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/main/__tests__/ReportsScreen.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_weeklyTab' is assigned a value but never used.","line":109,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":109,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_monthlyTab' is assigned a value but never used.","line":116,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":116,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_scrollView' is assigned a value but never used.","line":142,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":142,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_exportButton' is assigned a value but never used.","line":155,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":155,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_datePickerButton' is assigned a value but never used.","line":190,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":190,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_dateOption' is assigned a value but never used.","line":198,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":198,"endColumn":22}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * ReportsScreen Component Tests\n * Testing sales analytics and reporting interface\n */\n\nimport React from 'react';\nimport { fireEvent, waitFor } from '@testing-library/react-native';\nimport ReportsScreen from '../../reports/ReportsScreenSimple';\nimport { customRender } from '../../../__tests__/utils/testUtils';\nimport { useAppStore } from '../../../store/useAppStore';\n\n// Mock the store\njest.mock('../../../store/useAppStore');\nconst mockUseAppStore = useAppStore as jest.MockedFunction<typeof useAppStore>;\n\n// Mock navigation\nconst mockNavigation = {\n  navigate: jest.fn(),\n  goBack: jest.fn(),\n  dispatch: jest.fn(),\n};\n\ndescribe('ReportsScreen', () => {\n  const mockReportsData = {\n    dailySales: {\n      total: 1247.5,\n      orders: 42,\n      avgOrderValue: 29.7,\n      topItems: [\n        { name: 'Classic Burger', quantity: 15, revenue: 194.85 },\n        { name: 'French Fries', quantity: 12, revenue: 59.88 },\n        { name: 'Caesar Salad', quantity: 8, revenue: 71.92 },\n      ],\n    },\n    weeklySales: {\n      total: 8732.25,\n      orders: 294,\n      avgOrderValue: 29.7,\n    },\n    monthlySales: {\n      total: 37456.8,\n      orders: 1261,\n      avgOrderValue: 29.7,\n    },\n    salesChart: [\n      { date: '2024-01-10', total: 156.5 },\n      { date: '2024-01-11', total: 203.75 },\n      { date: '2024-01-12', total: 189.25 },\n      { date: '2024-01-13', total: 234.8 },\n      { date: '2024-01-14', total: 216.45 },\n      { date: '2024-01-15', total: 247.5 },\n    ],\n  };\n\n  const mockStoreState = {\n    reports: _mockReportsData,\n    loadReports: jest.fn(),\n    exportReport: jest.fn(),\n    isLoading: _false,\n    selectedDateRange: 'today',\n    setDateRange: jest.fn(),\n  };\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    mockUseAppStore.mockReturnValue(__mockStoreState);\n  });\n\n  it('renders correctly', () => {\n    const { getByText, getByTestId } = customRender(<ReportsScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n\n    expect(getByText('Reports & Analytics')).toBeTruthy();\n    expect(getByTestId('reports-container')).toBeTruthy();\n  });\n\n  it('displays daily sales summary correctly', () => {\n    const { getByText } = customRender(<ReportsScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n\n    expect(getByText(\"Today's Sales\")).toBeTruthy();\n    expect(getByText('$1,247.50')).toBeTruthy();\n    expect(getByText('42 Orders')).toBeTruthy();\n    expect(getByText('$29.70 Avg')).toBeTruthy();\n  });\n\n  it('displays top selling items', () => {\n    const { getByText } = customRender(<ReportsScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n\n    expect(getByText('Top Items')).toBeTruthy();\n    expect(getByText('Classic Burger')).toBeTruthy();\n    expect(getByText('15 sold')).toBeTruthy();\n    expect(getByText('$194.85')).toBeTruthy();\n\n    expect(getByText('French Fries')).toBeTruthy();\n    expect(getByText('12 sold')).toBeTruthy();\n    expect(getByText('$59.88')).toBeTruthy();\n  });\n\n  it('switches between date ranges', async () => {\n    const { getByText } = customRender(<ReportsScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n\n    const _weeklyTab = getByText('Weekly');\n    fireEvent.press(__weeklyTab);\n\n    await waitFor(() => {\n      expect(mockStoreState.setDateRange).toHaveBeenCalledWith('week');\n    });\n\n    const _monthlyTab = getByText('Monthly');\n    fireEvent.press(__monthlyTab);\n\n    await waitFor(() => {\n      expect(mockStoreState.setDateRange).toHaveBeenCalledWith('month');\n    });\n  });\n\n  it('displays loading state', () => {\n    mockUseAppStore.mockReturnValue({\n      ...mockStoreState,\n      isLoading: _true,\n    });\n\n    const { getByTestId } = customRender(<ReportsScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n\n    expect(getByTestId('loading-indicator')).toBeTruthy();\n  });\n\n  it('refreshes data on pull to refresh', async () => {\n    const { getByTestId } = customRender(<ReportsScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n\n    const _scrollView = getByTestId('reports-scroll');\n    fireEvent(__scrollView, 'refresh');\n\n    await waitFor(() => {\n      expect(mockStoreState.loadReports).toHaveBeenCalled();\n    });\n  });\n\n  it('exports report when export button is pressed', async () => {\n    const { getByTestId } = customRender(<ReportsScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n\n    const _exportButton = getByTestId('export-button');\n    fireEvent.press(__exportButton);\n\n    await waitFor(() => {\n      expect(mockStoreState.exportReport).toHaveBeenCalledWith('today');\n    });\n  });\n\n  it('displays empty state when no data', () => {\n    mockUseAppStore.mockReturnValue({\n      ...mockStoreState,\n      reports: _null,\n    });\n\n    const { getByText } = customRender(<ReportsScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n\n    expect(getByText('No sales data available')).toBeTruthy();\n    expect(getByText('Sales reports will appear here once orders are placed')).toBeTruthy();\n  });\n\n  it('displays chart correctly', () => {\n    const { getByTestId } = customRender(<ReportsScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n\n    expect(getByTestId('sales-chart')).toBeTruthy();\n  });\n\n  it('handles date picker selection', async () => {\n    const { getByTestId } = customRender(<ReportsScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n\n    const _datePickerButton = getByTestId('date-picker-button');\n    fireEvent.press(__datePickerButton);\n\n    await waitFor(() => {\n      expect(getByTestId('date-picker-modal')).toBeTruthy();\n    });\n\n    // Simulate date selection\n    const _dateOption = getByTestId('date-option-yesterday');\n    fireEvent.press(__dateOption);\n\n    await waitFor(() => {\n      expect(mockStoreState.setDateRange).toHaveBeenCalledWith('yesterday');\n    });\n  });\n\n  it('displays weekly sales data correctly', () => {\n    mockUseAppStore.mockReturnValue({\n      ...mockStoreState,\n      selectedDateRange: 'week',\n    });\n\n    const { getByText } = customRender(<ReportsScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n\n    expect(getByText(\"This Week's Sales\")).toBeTruthy();\n    expect(getByText('$8,732.25')).toBeTruthy();\n    expect(getByText('294 Orders')).toBeTruthy();\n  });\n\n  it('displays monthly sales data correctly', () => {\n    mockUseAppStore.mockReturnValue({\n      ...mockStoreState,\n      selectedDateRange: 'month',\n    });\n\n    const { getByText } = customRender(<ReportsScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n\n    expect(getByText(\"This Month's Sales\")).toBeTruthy();\n    expect(getByText('$37,456.80')).toBeTruthy();\n    expect(getByText('1,261 Orders')).toBeTruthy();\n  });\n\n  it('formats currency values correctly', () => {\n    const { getByText } = customRender(<ReportsScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n\n    // Should display properly formatted currency\n    expect(getByText('$1,247.50')).toBeTruthy();\n    expect(getByText('$194.85')).toBeTruthy();\n    expect(getByText('$29.70')).toBeTruthy();\n  });\n\n  it('handles error state', () => {\n    mockUseAppStore.mockReturnValue({\n      ...mockStoreState,\n      reports: _null,\n      error: 'Failed to load reports',\n    });\n\n    const { getByText } = customRender(<ReportsScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n\n    expect(getByText('Error loading reports')).toBeTruthy();\n    expect(getByText('Failed to load reports')).toBeTruthy();\n  });\n\n  it('displays percentage changes correctly', () => {\n    const _reportsWithChanges = {\n      ...mockReportsData,\n      dailySales: {\n        ...mockReportsData.dailySales,\n        changeFromYesterday: 15.5,\n      },\n    };\n\n    mockUseAppStore.mockReturnValue({\n      ...mockStoreState,\n      reports: _reportsWithChanges,\n    });\n\n    const { getByText } = customRender(<ReportsScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n\n    expect(getByText('+15.5%')).toBeTruthy();\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/main/__tests__/SettingsScreen.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_printerToggle' is assigned a value but never used.","line":106,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":106,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_businessNameInput' is assigned a value but never used.","line":122,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":122,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_orderAlertsToggle' is assigned a value but never used.","line":149,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":149,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_darkThemeOption' is assigned a value but never used.","line":175,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":175,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_taxRateInput' is assigned a value but never used.","line":191,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":191,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_logoutButton' is assigned a value but never used.","line":218,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":218,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_confirmLogout' is assigned a value but never used.","line":226,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":226,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_exportButton' is assigned a value but never used.","line":239,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":239,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_importButton' is assigned a value but never used.","line":252,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":252,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_resetButton' is assigned a value but never used.","line":266,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":266,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_confirmReset' is assigned a value but never used.","line":274,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":274,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_taxRateInput' is assigned a value but never used.","line":287,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":287,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_phoneInput' is assigned a value but never used.","line":300,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":300,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_emailInput' is assigned a value but never used.","line":313,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":313,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_businessNameInput' is assigned a value but never used.","line":326,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":326,"endColumn":29}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * SettingsScreen Component Tests\n * Testing app configuration and preferences interface\n */\n\nimport React from 'react';\nimport { fireEvent, waitFor } from '@testing-library/react-native';\nimport SettingsScreen from '../SettingsScreen';\nimport { customRender } from '../../../__tests__/utils/testUtils';\nimport { useAppStore } from '../../../store/useAppStore';\n\n// Mock the store\njest.mock('../../../store/useAppStore');\nconst mockUseAppStore = useAppStore as jest.MockedFunction<typeof useAppStore>;\n\n// Mock navigation\nconst mockNavigation = {\n  navigate: jest.fn(),\n  goBack: jest.fn(),\n  dispatch: jest.fn(),\n};\n\ndescribe('SettingsScreen', () => {\n  const _mockSettings = {\n    printerConfig: {\n      enabled: _true,\n      printerName: 'Kitchen Printer',\n      paperSize: 'A4',\n    },\n    notifications: {\n      orderAlerts: _true,\n      paymentAlerts: _true,\n      lowStockAlerts: _false,\n    },\n    display: {\n      theme: 'light',\n      fontSize: 'medium',\n      showImages: _true,\n    },\n    business: {\n      name: 'Fynlo Restaurant',\n      address: '123 Main St, City',\n      phone: '+1 234 567 8900',\n      email: 'contact@fynlo.com',\n      currency: 'USD',\n      taxRate: 8.5,\n    },\n  };\n\n  const mockStoreState = {\n    settings: _mockSettings,\n    updateSettings: jest.fn(),\n    resetSettings: jest.fn(),\n    exportSettings: jest.fn(),\n    importSettings: jest.fn(),\n    logout: jest.fn(),\n    currentUser: {\n      id: 1,\n      name: 'John Admin',\n      email: 'admin@fynlo.com',\n      role: 'admin',\n    },\n  };\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    mockUseAppStore.mockReturnValue(__mockStoreState);\n  });\n\n  it('renders correctly', () => {\n    const { getByText, getByTestId } = customRender(<SettingsScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n\n    expect(getByText('Settings')).toBeTruthy();\n    expect(getByTestId('settings-container')).toBeTruthy();\n  });\n\n  it('displays business information', () => {\n    const { getByText, getByDisplayValue } = customRender(<SettingsScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n\n    expect(getByText('Business Information')).toBeTruthy();\n    expect(getByDisplayValue('Fynlo Restaurant')).toBeTruthy();\n    expect(getByDisplayValue('123 Main St, City')).toBeTruthy();\n    expect(getByDisplayValue('+1 234 567 8900')).toBeTruthy();\n    expect(getByDisplayValue('contact@fynlo.com')).toBeTruthy();\n  });\n\n  it('displays printer settings', () => {\n    const { getByText, getByDisplayValue } = customRender(<SettingsScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n\n    expect(getByText('Printer Settings')).toBeTruthy();\n    expect(getByDisplayValue('Kitchen Printer')).toBeTruthy();\n    expect(getByText('A4')).toBeTruthy();\n  });\n\n  it('toggles printer enabled state', async () => {\n    const { getByTestId } = customRender(<SettingsScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n\n    const _printerToggle = getByTestId('printer-enabled-toggle');\n    fireEvent(__printerToggle, 'valueChange', _false);\n\n    await waitFor(() => {\n      expect(mockStoreState.updateSettings).toHaveBeenCalledWith(\n        'printerConfig',\n        expect.objectContaining({ enabled: false }),\n      );\n    });\n  });\n\n  it('updates business name', async () => {\n    const { getByTestId } = customRender(<SettingsScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n\n    const _businessNameInput = getByTestId('business-name-input');\n    fireEvent.changeText(__businessNameInput, 'New Restaurant Name');\n\n    await waitFor(() => {\n      expect(mockStoreState.updateSettings).toHaveBeenCalledWith(\n        'business',\n        expect.objectContaining({ name: 'New Restaurant Name' }),\n      );\n    });\n  });\n\n  it('displays notification settings', () => {\n    const { getByText, getByTestId } = customRender(<SettingsScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n\n    expect(getByText('Notifications')).toBeTruthy();\n    expect(getByTestId('order-alerts-toggle')).toBeTruthy();\n    expect(getByTestId('payment-alerts-toggle')).toBeTruthy();\n    expect(getByTestId('low-stock-alerts-toggle')).toBeTruthy();\n  });\n\n  it('toggles notification settings', async () => {\n    const { getByTestId } = customRender(<SettingsScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n\n    const _orderAlertsToggle = getByTestId('order-alerts-toggle');\n    fireEvent(__orderAlertsToggle, 'valueChange', _false);\n\n    await waitFor(() => {\n      expect(mockStoreState.updateSettings).toHaveBeenCalledWith(\n        'notifications',\n        expect.objectContaining({ orderAlerts: false }),\n      );\n    });\n  });\n\n  it('displays theme settings', () => {\n    const { getByText } = customRender(<SettingsScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n\n    expect(getByText('Display')).toBeTruthy();\n    expect(getByText('Theme')).toBeTruthy();\n    expect(getByText('Light')).toBeTruthy();\n  });\n\n  it('changes theme setting', async () => {\n    const { getByText } = customRender(<SettingsScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n\n    const _darkThemeOption = getByText('Dark');\n    fireEvent.press(__darkThemeOption);\n\n    await waitFor(() => {\n      expect(mockStoreState.updateSettings).toHaveBeenCalledWith(\n        'display',\n        expect.objectContaining({ theme: 'dark' }),\n      );\n    });\n  });\n\n  it('updates tax rate', async () => {\n    const { getByTestId } = customRender(<SettingsScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n\n    const _taxRateInput = getByTestId('tax-rate-input');\n    fireEvent.changeText(__taxRateInput, '10.0');\n\n    await waitFor(() => {\n      expect(mockStoreState.updateSettings).toHaveBeenCalledWith(\n        'business',\n        expect.objectContaining({ taxRate: 10.0 }),\n      );\n    });\n  });\n\n  it('displays user information', () => {\n    const { getByText } = customRender(<SettingsScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n\n    expect(getByText('Account')).toBeTruthy();\n    expect(getByText('John Admin')).toBeTruthy();\n    expect(getByText('admin@fynlo.com')).toBeTruthy();\n    expect(getByText('Administrator')).toBeTruthy();\n  });\n\n  it('handles logout', async () => {\n    const { getByTestId } = customRender(<SettingsScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n\n    const _logoutButton = getByTestId('logout-button');\n    fireEvent.press(__logoutButton);\n\n    // Should show confirmation dialog\n    await waitFor(() => {\n      expect(getByTestId('logout-confirmation')).toBeTruthy();\n    });\n\n    const _confirmLogout = getByTestId('confirm-logout');\n    fireEvent.press(__confirmLogout);\n\n    await waitFor(() => {\n      expect(mockStoreState.logout).toHaveBeenCalled();\n    });\n  });\n\n  it('exports settings', async () => {\n    const { getByTestId } = customRender(<SettingsScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n\n    const _exportButton = getByTestId('export-settings-button');\n    fireEvent.press(__exportButton);\n\n    await waitFor(() => {\n      expect(mockStoreState.exportSettings).toHaveBeenCalled();\n    });\n  });\n\n  it('imports settings', async () => {\n    const { getByTestId } = customRender(<SettingsScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n\n    const _importButton = getByTestId('import-settings-button');\n    fireEvent.press(__importButton);\n\n    // Should open file picker (__mocked)\n    await waitFor(() => {\n      expect(mockStoreState.importSettings).toHaveBeenCalled();\n    });\n  });\n\n  it('resets settings to default', async () => {\n    const { getByTestId } = customRender(<SettingsScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n\n    const _resetButton = getByTestId('reset-settings-button');\n    fireEvent.press(__resetButton);\n\n    // Should show confirmation dialog\n    await waitFor(() => {\n      expect(getByTestId('reset-confirmation')).toBeTruthy();\n    });\n\n    const _confirmReset = getByTestId('confirm-reset');\n    fireEvent.press(__confirmReset);\n\n    await waitFor(() => {\n      expect(mockStoreState.resetSettings).toHaveBeenCalled();\n    });\n  });\n\n  it('validates tax rate input', async () => {\n    const { getByTestId, getByText } = customRender(<SettingsScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n\n    const _taxRateInput = getByTestId('tax-rate-input');\n    fireEvent.changeText(__taxRateInput, 'invalid');\n\n    await waitFor(() => {\n      expect(getByText('Please enter a valid tax rate')).toBeTruthy();\n    });\n  });\n\n  it('validates phone number format', async () => {\n    const { getByTestId, getByText } = customRender(<SettingsScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n\n    const _phoneInput = getByTestId('business-phone-input');\n    fireEvent.changeText(__phoneInput, 'invalid-phone');\n\n    await waitFor(() => {\n      expect(getByText('Please enter a valid phone number')).toBeTruthy();\n    });\n  });\n\n  it('validates email format', async () => {\n    const { getByTestId, getByText } = customRender(<SettingsScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n\n    const _emailInput = getByTestId('business-email-input');\n    fireEvent.changeText(__emailInput, 'invalid-email');\n\n    await waitFor(() => {\n      expect(getByText('Please enter a valid email address')).toBeTruthy();\n    });\n  });\n\n  it('saves settings automatically', async () => {\n    const { getByTestId } = customRender(<SettingsScreen />, {\n      navigationProps: { navigation: mockNavigation },\n    });\n\n    const _businessNameInput = getByTestId('business-name-input');\n    fireEvent.changeText(__businessNameInput, 'Updated Name');\n\n    // Should auto-save after a delay\n    await waitFor(\n      () => {\n        expect(mockStoreState.updateSettings).toHaveBeenCalledWith(\n          'business',\n          expect.objectContaining({ name: 'Updated Name' }),\n        );\n      },\n      { timeout: 3000 },\n    );\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/more/MoreScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_createStyles' is assigned a value but never used.","line":244,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":244,"endColumn":20},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.container","line":246,"column":5,"nodeType":"Property","endLine":249,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.header","line":250,"column":5,"nodeType":"Property","endLine":254,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.headerContent","line":255,"column":5,"nodeType":"Property","endLine":257,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.headerTitle","line":258,"column":5,"nodeType":"Property","endLine":262,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.headerSubtitle","line":263,"column":5,"nodeType":"Property","endLine":267,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.content","line":268,"column":5,"nodeType":"Property","endLine":270,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.deprecationNotice","line":271,"column":5,"nodeType":"Property","endLine":281,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.deprecationContent","line":282,"column":5,"nodeType":"Property","endLine":285,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.deprecationTitle","line":286,"column":5,"nodeType":"Property","endLine":291,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.deprecationText","line":292,"column":5,"nodeType":"Property","endLine":296,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.goToHubButton","line":297,"column":5,"nodeType":"Property","endLine":303,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.goToHubText","line":304,"column":5,"nodeType":"Property","endLine":308,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.userCard","line":309,"column":5,"nodeType":"Property","endLine":322,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.userAvatar","line":323,"column":5,"nodeType":"Property","endLine":325,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.userInfo","line":326,"column":5,"nodeType":"Property","endLine":328,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.userName","line":329,"column":5,"nodeType":"Property","endLine":333,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.userRole","line":334,"column":5,"nodeType":"Property","endLine":338,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.userEmail","line":339,"column":5,"nodeType":"Property","endLine":343,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.section","line":344,"column":5,"nodeType":"Property","endLine":346,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.sectionTitle","line":347,"column":5,"nodeType":"Property","endLine":355,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.optionsContainer","line":356,"column":5,"nodeType":"Property","endLine":365,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.optionCard","line":366,"column":5,"nodeType":"Property","endLine":372,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.lastOptionCard","line":373,"column":5,"nodeType":"Property","endLine":375,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.optionIcon","line":376,"column":5,"nodeType":"Property","endLine":383,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.optionContent","line":384,"column":5,"nodeType":"Property","endLine":386,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.optionTitle","line":387,"column":5,"nodeType":"Property","endLine":391,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.optionSubtitle","line":392,"column":5,"nodeType":"Property","endLine":396,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.optionRight","line":397,"column":5,"nodeType":"Property","endLine":400,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.badge","line":401,"column":5,"nodeType":"Property","endLine":407,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.badgeText","line":408,"column":5,"nodeType":"Property","endLine":412,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.footer","line":413,"column":5,"nodeType":"Property","endLine":416,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.versionText","line":417,"column":5,"nodeType":"Property","endLine":420,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.copyrightText","line":421,"column":5,"nodeType":"Property","endLine":425,"endColumn":6}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  StatusBar,\n  SafeAreaView,\n  TouchableOpacity,\n  ScrollView,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation } from '@react-navigation/native';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { useTheme, useThemedStyles } from '../../design-system/ThemeProvider';\nimport useAppStore from '../../store/useAppStore';\n\ninterface _MenuOption {\n  id: string;\n  title: string;\n  subtitle: string;\n  icon: string;\n  route?: string;\n  color?: string;\n  badge?: number;\n}\n\nconst MoreScreen: React.FC = () => {\n  const navigation = useNavigation();\n  const { theme } = useTheme();\n  const styles = useThemedStyles(__createStyles);\n  const { user } = useAppStore();\n  const { signOut } = useAuth();\n\n  const menuSections = [\n    {\n      title: 'Business Management',\n      options: [\n        {\n          id: 'employees',\n          title: 'Employees',\n          subtitle: 'Manage staff and time clock',\n          icon: 'people',\n          route: 'Employees',\n          color: theme.colors.secondary,\n        },\n        {\n          id: 'customers',\n          title: 'Customers',\n          subtitle: 'Customer database and loyalty',\n          icon: 'person-pin',\n          route: 'Customers',\n          color: theme.colors.warning,\n        },\n        {\n          id: 'inventory',\n          title: 'Inventory',\n          subtitle: 'Stock levels and suppliers',\n          icon: 'inventory',\n          route: 'Inventory',\n          color: theme.colors.success,\n        },\n        {\n          id: 'dining-room',\n          title: 'Dining Room',\n          subtitle: 'Floor plan, _tables, and reservations',\n          icon: 'table-restaurant',\n          route: 'TableManagement',\n          color: theme.colors.primary,\n        },\n      ],\n    },\n    {\n      title: 'Reports & Analytics',\n      options: [\n        {\n          id: 'reports',\n          title: 'Reports',\n          subtitle: 'Sales, _financial, and business reports',\n          icon: 'bar-chart',\n          route: 'Reports',\n          color: theme.colors.secondary,\n          badge: 3,\n        },\n        {\n          id: 'dashboard',\n          title: 'Dashboard',\n          subtitle: 'Business overview and KPIs',\n          icon: 'dashboard',\n          route: 'Dashboard',\n          color: theme.colors.primary,\n        },\n      ],\n    },\n    {\n      title: 'Settings & Configuration',\n      options: [\n        {\n          id: 'settings',\n          title: 'Settings',\n          subtitle: 'Business, _hardware, and app configuration',\n          icon: 'settings',\n          route: 'Settings',\n          color: theme.colors.darkGray,\n        },\n      ],\n    },\n    {\n      title: 'Account',\n      options: [\n        {\n          id: 'profile',\n          title: 'My Profile',\n          subtitle: 'Personal information and password',\n          icon: 'account-circle',\n          route: 'Profile',\n          color: theme.colors.darkGray,\n        },\n        {\n          id: 'help',\n          title: 'Help & Support',\n          subtitle: 'Guides, _tutorials, and contact',\n          icon: 'help',\n          route: 'Help',\n          color: theme.colors.darkGray,\n        },\n        {\n          id: 'logout',\n          title: 'Sign Out',\n          subtitle: 'End current session',\n          icon: 'logout',\n          color: theme.colors.danger,\n        },\n      ],\n    },\n  ];\n\n  const handleOptionPress = async (option: _MenuOption) => {\n    if (option.id === 'logout') {\n      // Handle logout using AuthContext\n      try {\n        await signOut();\n      } catch (__error) {\n        // Error handled silently\n      }\n    } else if (option.route) {\n      // Navigate to the route\n      navigation.navigate(option.route as never);\n    }\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <StatusBar backgroundColor={theme.colors.primary} barStyle=\"light-content\" />\n\n      {/* Header */}\n      <View style={styles.header}>\n        <View style={styles.headerContent}>\n          <Text style={styles.headerTitle}>More</Text>\n          <Text style={styles.headerSubtitle}>{user?.name || 'Restaurant Manager'}</Text>\n        </View>\n      </View>\n\n      {/* Deprecation Notice */}\n      <View style={styles.deprecationNotice}>\n        <Icon name=\"info\" size={20} color={theme.colors.warning[500]} />\n        <View style={styles.deprecationContent}>\n          <Text style={styles.deprecationTitle}>New Hub Available!</Text>\n          <Text style={styles.deprecationText}>\n            This page will be replaced soon. Find all features in the new Hub on the home tab.\n          </Text>\n        </View>\n        <TouchableOpacity\n          style={styles.goToHubButton}\n          onPress={() => navigation.navigate('Home' as never)}>\n          <Text style={styles.goToHubText}>Go to Hub</Text>\n        </TouchableOpacity>\n      </View>\n\n      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n        {/* User Info Card */}\n        <View style={styles.userCard}>\n          <View style={styles.userAvatar}>\n            <Icon name=\"account-circle\" size={60} color={theme.colors.primary} />\n          </View>\n          <View style={styles.userInfo}>\n            <Text style={styles.userName}>{user?.name || 'Manager'}</Text>\n            <Text style={styles.userRole}>{user?.role || 'Admin'}</Text>\n            <Text style={styles.userEmail}>{user?.email || 'manager@cloverpos.com'}</Text>\n          </View>\n        </View>\n\n        {/* Menu Sections */}\n        {menuSections.map((__section, _sectionIndex) => (\n          <View key={section.title} style={styles.section}>\n            <Text style={styles.sectionTitle}>{section.title}</Text>\n\n            <View style={styles.optionsContainer}>\n              {section.options.map((__option, _index) => (\n                <TouchableOpacity\n                  key={option.id}\n                  style={[\n                    styles.optionCard,\n                    index === section.options.length - 1 && styles.lastOptionCard,\n                  ]}\n                  onPress={() => handleOptionPress(__option)}\n                  activeOpacity={0.7}>\n                  <View style={[styles.optionIcon, { backgroundColor: `${option.color}15` }]}>\n                    <Icon\n                      name={option.icon}\n                      size={24}\n                      color={option.color || theme.colors.primary}\n                    />\n                  </View>\n\n                  <View style={styles.optionContent}>\n                    <Text style={styles.optionTitle}>{option.title}</Text>\n                    <Text style={styles.optionSubtitle}>{option.subtitle}</Text>\n                  </View>\n\n                  <View style={styles.optionRight}>\n                    {option.badge && (\n                      <View style={styles.badge}>\n                        <Text style={styles.badgeText}>{option.badge}</Text>\n                      </View>\n                    )}\n                    <Icon name=\"chevron-right\" size={24} color={theme.colors.lightGray} />\n                  </View>\n                </TouchableOpacity>\n              ))}\n            </View>\n          </View>\n        ))}\n\n        {/* App Version */}\n        <View style={styles.footer}>\n          <Text style={styles.versionText}>Fynlo POS v1.0.0</Text>\n          <Text style={styles.copyrightText}>© 2024 Fynlo Ltd.</Text>\n        </View>\n      </ScrollView>\n    </SafeAreaView>\n  );\n};\n\nconst _createStyles = (theme: _unknown) =>\n  StyleSheet.create({\n    container: {\n      flex: 1,\n      backgroundColor: theme.colors.background,\n    },\n    header: {\n      backgroundColor: theme.colors.primary,\n      paddingHorizontal: 20,\n      paddingVertical: 16,\n    },\n    headerContent: {\n      alignItems: 'center',\n    },\n    headerTitle: {\n      fontSize: 24,\n      fontWeight: 'bold',\n      color: theme.colors.white,\n    },\n    headerSubtitle: {\n      fontSize: 14,\n      color: 'rgba(255, 255, 255, 0.8)',\n      marginTop: 4,\n    },\n    content: {\n      flex: 1,\n    },\n    deprecationNotice: {\n      backgroundColor: theme.colors.warning[50],\n      flexDirection: 'row',\n      alignItems: 'center',\n      padding: 16,\n      marginHorizontal: 16,\n      marginTop: 16,\n      borderRadius: 12,\n      borderWidth: 1,\n      borderColor: theme.colors.warning[200],\n    },\n    deprecationContent: {\n      flex: 1,\n      marginLeft: 12,\n    },\n    deprecationTitle: {\n      fontSize: 14,\n      fontWeight: '600',\n      color: theme.colors.warning[700],\n      marginBottom: 2,\n    },\n    deprecationText: {\n      fontSize: 12,\n      color: theme.colors.warning[600],\n      lineHeight: 16,\n    },\n    goToHubButton: {\n      backgroundColor: theme.colors.warning[500],\n      paddingHorizontal: 12,\n      paddingVertical: 6,\n      borderRadius: 8,\n      marginLeft: 8,\n    },\n    goToHubText: {\n      fontSize: 12,\n      fontWeight: '600',\n      color: theme.colors.white,\n    },\n    userCard: {\n      backgroundColor: theme.colors.white,\n      flexDirection: 'row',\n      alignItems: 'center',\n      padding: 20,\n      marginTop: 16,\n      marginHorizontal: 16,\n      borderRadius: 12,\n      shadowColor: '#000',\n      shadowOffset: { width: 0, height: 2 },\n      shadowOpacity: 0.05,\n      shadowRadius: 4,\n      elevation: 2,\n    },\n    userAvatar: {\n      marginRight: 16,\n    },\n    userInfo: {\n      flex: 1,\n    },\n    userName: {\n      fontSize: 18,\n      fontWeight: '600',\n      color: theme.colors.text,\n    },\n    userRole: {\n      fontSize: 14,\n      color: theme.colors.primary,\n      marginTop: 2,\n    },\n    userEmail: {\n      fontSize: 12,\n      color: theme.colors.darkGray,\n      marginTop: 4,\n    },\n    section: {\n      marginTop: 24,\n    },\n    sectionTitle: {\n      fontSize: 14,\n      fontWeight: '600',\n      color: theme.colors.darkGray,\n      textTransform: 'uppercase',\n      letterSpacing: 0.5,\n      marginBottom: 12,\n      marginHorizontal: 20,\n    },\n    optionsContainer: {\n      backgroundColor: theme.colors.white,\n      marginHorizontal: 16,\n      borderRadius: 12,\n      shadowColor: '#000',\n      shadowOffset: { width: 0, height: 2 },\n      shadowOpacity: 0.05,\n      shadowRadius: 4,\n      elevation: 2,\n    },\n    optionCard: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      padding: 16,\n      borderBottomWidth: 1,\n      borderBottomColor: theme.colors.border,\n    },\n    lastOptionCard: {\n      borderBottomWidth: 0,\n    },\n    optionIcon: {\n      width: 48,\n      height: 48,\n      borderRadius: 12,\n      justifyContent: 'center',\n      alignItems: 'center',\n      marginRight: 16,\n    },\n    optionContent: {\n      flex: 1,\n    },\n    optionTitle: {\n      fontSize: 16,\n      fontWeight: '500',\n      color: theme.colors.text,\n    },\n    optionSubtitle: {\n      fontSize: 13,\n      color: theme.colors.darkGray,\n      marginTop: 2,\n    },\n    optionRight: {\n      flexDirection: 'row',\n      alignItems: 'center',\n    },\n    badge: {\n      backgroundColor: theme.colors.danger,\n      borderRadius: 12,\n      paddingHorizontal: 8,\n      paddingVertical: 2,\n      marginRight: 8,\n    },\n    badgeText: {\n      fontSize: 12,\n      fontWeight: '600',\n      color: theme.colors.white,\n    },\n    footer: {\n      alignItems: 'center',\n      paddingVertical: 32,\n    },\n    versionText: {\n      fontSize: 14,\n      color: theme.colors.darkGray,\n    },\n    copyrightText: {\n      fontSize: 12,\n      color: theme.colors.lightText,\n      marginTop: 4,\n    },\n  });\n\nexport default MoreScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/onboarding/ComprehensiveRestaurantOnboardingScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_SCREEN_HEIGHT' is assigned a value but never used.","line":94,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":94,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_updateConfig' is assigned a value but never used.","line":100,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":100,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_completeSetupStep' is assigned a value but never used.","line":100,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":100,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_TextInputRef' is assigned a value but never used.","line":174,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":174,"endColumn":22},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":250,"column":24,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":250,"endColumn":42},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":262,"column":27,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":262,"endColumn":44},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":263,"column":14,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":263,"endColumn":32,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[7407,7408],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":267,"column":18,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":267,"endColumn":40},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":300,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":300,"endColumn":60},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":301,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":301,"endColumn":58},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":304,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":304,"endColumn":84},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":314,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":314,"endColumn":66},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":315,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":315,"endColumn":55},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":325,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":325,"endColumn":68},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":326,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":326,"endColumn":59},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":349,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":349,"endColumn":79},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":350,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":350,"endColumn":94},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":353,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":353,"endColumn":97},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":354,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":355,"endColumn":90},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":358,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":363,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_restaurantData' is assigned a value but never used.","line":479,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":479,"endColumn":28},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":620,"column":12,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[19765,19837],"text":"\n        Let&apos;s start with basic information about your restaurant\n      "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[19765,19837],"text":"\n        Let&lsquo;s start with basic information about your restaurant\n      "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[19765,19837],"text":"\n        Let&#39;s start with basic information about your restaurant\n      "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[19765,19837],"text":"\n        Let&rsquo;s start with basic information about your restaurant\n      "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":751,"column":24,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[24154,24233],"text":"\n        Your restaurant&apos;s physical address for deliveries and customers\n      "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[24154,24233],"text":"\n        Your restaurant&lsquo;s physical address for deliveries and customers\n      "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[24154,24233],"text":"\n        Your restaurant&#39;s physical address for deliveries and customers\n      "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[24154,24233],"text":"\n        Your restaurant&rsquo;s physical address for deliveries and customers\n      "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { flex: 2 }","line":764,"column":22,"nodeType":"ObjectExpression","endLine":764,"endColumn":33},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { flex: 1, marginLeft: 12 }","line":775,"column":22,"nodeType":"ObjectExpression","endLine":775,"endColumn":49},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { flex: 1 }","line":802,"column":22,"nodeType":"ObjectExpression","endLine":802,"endColumn":33},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { flex: 1, marginLeft: 12 }","line":812,"column":22,"nodeType":"ObjectExpression","endLine":812,"endColumn":49},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":876,"column":63,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[28146,28183],"text":"Set your restaurant&apos;s operating hours"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[28146,28183],"text":"Set your restaurant&lsquo;s operating hours"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[28146,28183],"text":"Set your restaurant&#39;s operating hours"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[28146,28183],"text":"Set your restaurant&rsquo;s operating hours"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { marginBottom: 0 }","line":908,"column":35,"nodeType":"ObjectExpression","endLine":908,"endColumn":54},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { marginBottom: 0 }","line":924,"column":35,"nodeType":"ObjectExpression","endLine":924,"endColumn":54},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { flex: 2 }","line":944,"column":24,"nodeType":"ObjectExpression","endLine":944,"endColumn":35},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { flex: 1, marginLeft: 12 }","line":953,"column":24,"nodeType":"ObjectExpression","endLine":953,"endColumn":51},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { flex: 2 }","line":993,"column":24,"nodeType":"ObjectExpression","endLine":993,"endColumn":35},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { flex: 1, marginLeft: 12 }","line":1019,"column":24,"nodeType":"ObjectExpression","endLine":1019,"endColumn":51},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":1171,"column":18,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":1171,"endColumn":35},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":1205,"column":18,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":1205,"endColumn":35},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":1242,"column":18,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":1242,"endColumn":35},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":1269,"column":18,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":1269,"endColumn":35},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":1302,"column":18,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":1302,"endColumn":35},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: {\n  paddingBottom: \"isKeyboardVisible && Platform.OS === 'ios'\\n\" +\n    '                ? Math.max(0, keyboardHeight - KEYBOARD_VERTICAL_OFFSET) + 100\\n' +\n    '                : 100'\n}","line":1901,"column":34,"nodeType":"ObjectExpression","endLine":1906,"endColumn":12}],"suppressedMessages":[],"errorCount":20,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  StatusBar,\n  SafeAreaView,\n  TouchableOpacity,\n  ScrollView,\n  Alert,\n  Platform,\n  Switch,\n  TextInput,\n  Keyboard,\n  Dimensions,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation } from '@react-navigation/native';\nimport { useTheme } from '../../design-system/ThemeProvider';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport FastInput from '../../components/ui/FastInput';\nimport { useRestaurantConfig } from '../../hooks/useRestaurantConfig';\nimport {\n  parseNumericInput,\n  parseCurrencyInput,\n  sanitizeInput,\n  validateUKPhone,\n  validateEmail,\n  validatePostcode,\n  validateSortCode,\n  formatSortCode,\n  validateAccountNumber,\n  validateIBAN,\n  validateSWIFT,\n} from '../../utils/inputValidation';\nimport { API_CONFIG } from '../../config/api';\nimport { useAuthStore } from '../../store/useAuthStore';\n\ninterface RestaurantFormData {\n  // Basic Information\n  restaurantName: string;\n  displayName: string;\n  businessType: string;\n  description: string;\n\n  // Contact Information\n  phone: string;\n  email: string;\n  website: string;\n\n  // Location Information\n  street: string;\n  city: string;\n  state: string;\n  zipCode: string;\n  country: string;\n\n  // Business Hours\n  operatingHours: {\n    [key: string]: {\n      open: string;\n      close: string;\n      closed: boolean;\n    };\n  };\n\n  // Owner Information\n  ownerName: string;\n  ownerEmail: string;\n  ownerPhone: string;\n\n  // Bank Details\n  bankDetails?: {\n    sortCode: string;\n    accountNumber: string;\n    accountName: string;\n    iban?: string;\n    swiftBic?: string;\n  };\n}\n\ninterface Employee {\n  id: string;\n  name: string;\n  email: string;\n  phone: string;\n  role: 'manager' | 'employee' | 'chef' | 'waiter';\n  hourlyRate: string;\n  startDate: string;\n  accessLevel: 'full' | 'pos_only' | 'reports_only';\n}\n\n// Fix for iOS keyboard handling to prevent NaN errors\nconst { height: _SCREEN_HEIGHT } = Dimensions.get('window');\nconst KEYBOARD_VERTICAL_OFFSET = Platform.OS === 'ios' ? 90 : 0;\n\nconst ComprehensiveRestaurantOnboardingScreen: React.FC = () => {\n  const navigation = useNavigation();\n  const { theme } = useTheme();\n  const { _updateConfig, _completeSetupStep } = useRestaurantConfig();\n\n  const [currentStep, setCurrentStep] = useState(1);\n  const [keyboardHeight, setKeyboardHeight] = useState(0);\n  const [isKeyboardVisible, setIsKeyboardVisible] = useState(__false);\n  const [loading, setLoading] = useState(__false);\n  const [fieldErrors, setFieldErrors] = useState({\n    // Step 2 - Contact\n    phone: '',\n    restaurantEmail: '',\n    // Step 3 - Location\n    postcode: '',\n    // Step 4 - Owner\n    ownerEmail: '',\n    // Step 6 - Employee\n    employeeEmail: '',\n    // Step 8 - Bank Details\n    accountName: '',\n    sortCode: '',\n    accountNumber: '',\n    iban: '',\n    swiftBic: '',\n  });\n\n  const [formData, setFormData] = useState<RestaurantFormData>({\n    restaurantName: '',\n    displayName: '',\n    businessType: 'Restaurant',\n    description: '',\n    phone: '',\n    email: '',\n    website: '',\n    street: '',\n    city: '',\n    state: '',\n    zipCode: '',\n    country: 'United Kingdom',\n    operatingHours: {\n      monday: { open: '09:00', close: '22:00', closed: false },\n      tuesday: { open: '09:00', close: '22:00', closed: false },\n      wednesday: { open: '09:00', close: '22:00', closed: false },\n      thursday: { open: '09:00', close: '22:00', closed: false },\n      friday: { open: '09:00', close: '22:00', closed: false },\n      saturday: { open: '09:00', close: '22:00', closed: false },\n      sunday: { open: '09:00', close: '22:00', closed: false },\n    },\n    ownerName: '',\n    ownerEmail: '',\n    ownerPhone: '',\n    bankDetails: {\n      sortCode: '',\n      accountNumber: '',\n      accountName: '',\n      iban: '',\n      swiftBic: '',\n    },\n  });\n\n  const [employees, setEmployees] = useState<Employee[]>([]);\n  const [newEmployee, setNewEmployee] = useState<Partial<Employee>>({\n    name: '',\n    email: '',\n    phone: '',\n    role: 'employee',\n    hourlyRate: '',\n    startDate: new Date().toISOString().split('T')[0],\n    accessLevel: 'pos_only',\n  });\n\n  const totalSteps = 9;\n\n  // Keep TextInput reference to prevent tree-shaking\n  // This fixes the \"ReferenceError: Can't find variable: TextInput\" error\n  // that occurs during onboarding at the bank details step\n  const _TextInputRef = TextInput;\n\n  // Fix keyboard handling to prevent NaN errors\n  useEffect(() => {\n    const keyboardWillShowListener = Keyboard.addListener(\n      Platform.OS === 'ios' ? 'keyboardWillShow' : 'keyboardDidShow',\n      e => {\n        const _height = e.endCoordinates?.height || 0;\n        // Ensure we don't get NaN values\n        setKeyboardHeight(isNaN(__height) ? 0 : _height);\n        setIsKeyboardVisible(__true);\n      },\n    );\n\n    const keyboardWillHideListener = Keyboard.addListener(\n      Platform.OS === 'ios' ? 'keyboardWillHide' : 'keyboardDidHide',\n      () => {\n        setKeyboardHeight(0);\n        setIsKeyboardVisible(__false);\n      },\n    );\n\n    return () => {\n      keyboardWillShowListener.remove();\n      keyboardWillHideListener.remove();\n    };\n  }, []);\n  const businessTypes = [\n    'Restaurant',\n    'Fast Food',\n    'Cafe',\n    'Bar & Pub',\n    'Food Truck',\n    'Bakery',\n    'Pizzeria',\n    'Bistro',\n    'Fine Dining',\n    'Other',\n  ];\n\n  const employeeRoles = [\n    { value: 'manager', label: 'Manager', icon: 'supervisor-account' },\n    { value: 'employee', label: 'General Staff', icon: 'person' },\n    { value: 'chef', label: 'Chef/Kitchen', icon: 'restaurant' },\n    { value: 'waiter', label: 'Server/Waiter', icon: 'room-service' },\n  ];\n\n  const accessLevels = [\n    { value: 'full', label: 'Full Access', description: 'All features including settings' },\n    { value: 'pos_only', label: 'POS Only', description: 'Sales and orders only' },\n    { value: 'reports_only', label: 'Reports Only', description: 'View reports and analytics' },\n  ];\n\n  const dayNames = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];\n  const dayLabels = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n\n  const updateField = (field: keyof RestaurantFormData, value: _unknown) => {\n    setFormData(prev => {\n      const updated = { ...prev, [field]: value };\n\n      // Auto-generate display name from restaurant name if not manually set\n      if (field === 'restaurantName' && !prev.displayName) {\n        updated.displayName = value;\n      }\n\n      return updated;\n    });\n  };\n\n  const addEmployee = () => {\n    if (!newEmployee.name || !newEmployee.email) {\n      // Don't block with alert - validation is handled inline\n      return;\n    }\n\n    // Validate email if not already validated via onBlur\n    if (!validateEmail(newEmployee.email!)) {\n      // Set the error state instead of showing alert\n      setFieldErrors(prev => ({ ...prev, employeeEmail: 'Please enter a valid email address' }));\n      // Focus on the email field to trigger the error display\n      return;\n    }\n\n    // Parse and validate hourly rate\n    const hourlyRateNumber = parseCurrencyInput(newEmployee.hourlyRate);\n\n    const employee: Employee = {\n      id: Date.now().toString(),\n      name: sanitizeInput(newEmployee.name!),\n      email: newEmployee.email!.toLowerCase().trim(),\n      phone: newEmployee.phone || '',\n      role: newEmployee.role as Employee['role'],\n      hourlyRate: hourlyRateNumber.toFixed(2),\n      startDate: newEmployee.startDate!,\n      accessLevel: newEmployee.accessLevel as Employee['accessLevel'],\n    };\n\n    setEmployees(prev => [...prev, employee]);\n    // Clear the email error when successfully adding\n    setFieldErrors(prev => ({ ...prev, employeeEmail: '' }));\n    setNewEmployee({\n      name: '',\n      email: '',\n      phone: '',\n      role: 'employee',\n      hourlyRate: '',\n      startDate: new Date().toISOString().split('T')[0],\n      accessLevel: 'pos_only',\n    });\n  };\n\n  const removeEmployee = (id: _string) => {\n    setEmployees(prev => prev.filter(emp => emp.id !== id));\n  };\n\n  const validateStep = (_step: _number): boolean => {\n    switch (__step) {\n      case 1: // Basic Info\n        return !!(formData.restaurantName && formData.displayName && formData.businessType);\n\n      case 2: // Contact\n        if (!formData.phone || !formData.email) {\n          return false;\n        }\n\n        // Check data validity without setting state\n        const phoneValid = validateUKPhone(formData.phone);\n        const emailValid = validateEmail(formData.email);\n\n        // Also check if there are existing errors from onBlur\n        const noContactErrors = !fieldErrors.phone && !fieldErrors.restaurantEmail;\n\n        return phoneValid && emailValid && noContactErrors;\n\n      case 3: // Location\n        if (!formData.street || !formData.city || !formData.zipCode) {\n          return false;\n        }\n\n        // Check postcode validity\n        const postcodeValid = validatePostcode(formData.zipCode);\n        const noPostcodeError = !fieldErrors.postcode;\n\n        return postcodeValid && noPostcodeError;\n\n      case 4: // Owner Info\n        if (!formData.ownerName || !formData.ownerEmail) {\n          return false;\n        }\n\n        // Check email validity and existing errors\n        const ownerEmailValid = validateEmail(formData.ownerEmail);\n        const noOwnerEmailError = !fieldErrors.ownerEmail;\n\n        return ownerEmailValid && noOwnerEmailError;\n\n      case 5: // Business Hours\n        return true; // Optional\n\n      case 6: // Employees\n        return true; // Optional\n\n      case 7: // Menu Setup\n        return true; // Optional but recommended\n\n      case 8: // Bank Details\n        if (\n          !formData.bankDetails?.sortCode ||\n          !formData.bankDetails?.accountNumber ||\n          !formData.bankDetails?.accountName\n        ) {\n          return false;\n        }\n\n        // Check validity of all bank fields\n        const sortCodeValid = validateSortCode(formData.bankDetails.sortCode);\n        const accountNumberValid = validateAccountNumber(formData.bankDetails.accountNumber);\n\n        // Optional fields - only validate if provided\n        const ibanValid = !formData.bankDetails.iban || validateIBAN(formData.bankDetails.iban);\n        const swiftValid =\n          !formData.bankDetails.swiftBic || validateSWIFT(formData.bankDetails.swiftBic);\n\n        // Check for existing errors\n        const noBankingErrors =\n          !fieldErrors.accountName &&\n          !fieldErrors.sortCode &&\n          !fieldErrors.accountNumber &&\n          !fieldErrors.iban &&\n          !fieldErrors.swiftBic;\n\n        return sortCodeValid && accountNumberValid && ibanValid && swiftValid && noBankingErrors;\n\n      case 9: // Review\n        return true;\n\n      default:\n        return true;\n    }\n  };\n\n  const triggerValidationErrors = (_step: _number) => {\n    // This function sets error messages when Next is clicked with invalid data\n    switch (__step) {\n      case 2: // Contact\n        // Check for empty required fields first\n        if (!formData.phone) {\n          setFieldErrors(prev => ({ ...prev, phone: 'Phone number is required' }));\n        } else if (!validateUKPhone(formData.phone)) {\n          setFieldErrors(prev => ({ ...prev, phone: 'Please enter a valid UK phone number' }));\n        }\n\n        if (!formData.email) {\n          setFieldErrors(prev => ({ ...prev, restaurantEmail: 'Email is required' }));\n        } else if (!validateEmail(formData.email)) {\n          setFieldErrors(prev => ({\n            ...prev,\n            restaurantEmail: 'Please enter a valid email address',\n          }));\n        }\n        break;\n\n      case 3: // Location\n        if (!formData.zipCode) {\n          setFieldErrors(prev => ({ ...prev, postcode: 'Postcode is required' }));\n        } else if (!validatePostcode(formData.zipCode)) {\n          setFieldErrors(prev => ({ ...prev, postcode: 'Please enter a valid UK postcode' }));\n        }\n        break;\n\n      case 4: // Owner Info\n        if (!formData.ownerEmail) {\n          setFieldErrors(prev => ({ ...prev, ownerEmail: 'Owner email is required' }));\n        } else if (!validateEmail(formData.ownerEmail)) {\n          setFieldErrors(prev => ({ ...prev, ownerEmail: 'Please enter a valid email address' }));\n        }\n        break;\n\n      // Note: Case 6 (__Employee) removed - employees are optional and validated when adding\n\n      case 8: // Bank Details\n        if (!formData.bankDetails?.accountName) {\n          setFieldErrors(prev => ({ ...prev, accountName: 'Account name is required' }));\n        }\n\n        if (!formData.bankDetails?.sortCode) {\n          setFieldErrors(prev => ({ ...prev, sortCode: 'Sort code is required' }));\n        } else if (!validateSortCode(formData.bankDetails.sortCode)) {\n          setFieldErrors(prev => ({ ...prev, sortCode: 'Please enter a valid 6-digit sort code' }));\n        }\n\n        if (!formData.bankDetails?.accountNumber) {\n          setFieldErrors(prev => ({ ...prev, accountNumber: 'Account number is required' }));\n        } else if (!validateAccountNumber(formData.bankDetails.accountNumber)) {\n          setFieldErrors(prev => ({\n            ...prev,\n            accountNumber: 'Please enter a valid 8-digit account number',\n          }));\n        }\n\n        // IBAN and SWIFT are optional, only validate if provided\n        if (formData.bankDetails?.iban && !validateIBAN(formData.bankDetails.iban)) {\n          setFieldErrors(prev => ({ ...prev, iban: 'Please enter a valid IBAN' }));\n        }\n        if (formData.bankDetails?.swiftBic && !validateSWIFT(formData.bankDetails.swiftBic)) {\n          setFieldErrors(prev => ({ ...prev, swiftBic: 'Please enter a valid SWIFT/BIC code' }));\n        }\n        break;\n    }\n  };\n\n  const nextStep = () => {\n    if (!validateStep(__currentStep)) {\n      // Trigger validation errors to show feedback\n      triggerValidationErrors(__currentStep);\n      return;\n    }\n\n    if (currentStep < totalSteps) {\n      setCurrentStep(currentStep + 1);\n    } else {\n      completeOnboarding();\n    }\n  };\n\n  const prevStep = () => {\n    if (currentStep > 1) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  const completeOnboarding = async () => {\n    try {\n      setLoading(__true);\n\n      // Get auth token from AsyncStorage\n      const token = await AsyncStorage.getItem('auth_token');\n\n      if (!token) {\n        Alert.alert('Authentication Error', 'Please log in again.');\n        navigation.navigate('Auth' as never);\n        return;\n      }\n\n      // Prepare data for API\n      const _restaurantData = {\n        name: sanitizeInput(formData.restaurantName),\n        display_name: sanitizeInput(formData.displayName),\n        business_type: formData.businessType,\n        description: sanitizeInput(formData.description || ''),\n        phone: formData.phone,\n        email: formData.email.toLowerCase().trim(),\n        website: formData.website || '',\n        address: {\n          street: sanitizeInput(formData.street),\n          city: sanitizeInput(formData.city),\n          state: sanitizeInput(formData.state || ''),\n          zipCode: formData.zipCode.toUpperCase(),\n          country: formData.country,\n        },\n        business_hours: formData.operatingHours,\n        owner_info: {\n          name: sanitizeInput(formData.ownerName),\n          email: formData.ownerEmail.toLowerCase().trim(),\n          phone: formData.ownerPhone || '',\n        },\n        employees: employees.map(emp => ({\n          name: sanitizeInput(emp.name),\n          email: emp.email.toLowerCase().trim(),\n          phone: emp.phone || '',\n          role: emp.role,\n          hourly_rate: parseNumericInput(emp.hourlyRate),\n          start_date: emp.startDate,\n          access_level: emp.accessLevel,\n        })),\n        bank_details: formData.bankDetails\n          ? {\n              sort_code: formData.bankDetails.sortCode.replace(/-/g, ''),\n              account_number: formData.bankDetails.accountNumber,\n              account_name: sanitizeInput(formData.bankDetails.accountName),\n              iban: formData.bankDetails.iban || null,\n              swift_bic: formData.bankDetails.swiftBic || null,\n            }\n          : _null,\n      };\n\n      // Call the new onboarding endpoint\n      const response = await fetch(`${API_CONFIG.FULL_API_URL}/restaurants/onboarding/create`, {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(__restaurantData),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);\n      }\n\n      const result = await response.json();\n\n      // Update local state with the new restaurant ID\n      await AsyncStorage.setItem('restaurant_id', result.restaurant_id);\n      await AsyncStorage.setItem('needs_onboarding', 'false');\n\n      // Refresh auth state to update user data\n      const { checkAuth } = useAuthStore.getState();\n      await checkAuth();\n\n      Alert.alert(\n        'Onboarding Complete! 🎉',\n        `Welcome to Fynlo, ${formData.restaurantName}! Your restaurant is now fully set up and ready to start taking orders.`,\n        [\n          {\n            text: 'Start Using POS',\n            onPress: () => {\n              // Use reset to force navigation state refresh\n              navigation.reset({\n                index: 0,\n                routes: [{ name: 'Main' as never }],\n              });\n            },\n          },\n          {\n            text: 'Configure Menu',\n            onPress: () => {\n              navigation.reset({\n                index: 1,\n                routes: [{ name: 'Main' as never }, { name: 'SettingsMenuManagement' as never }],\n              });\n            },\n          },\n        ],\n      );\n    } catch (__error) {\n      Alert.alert(\n        'Error',\n        error instanceof Error ? error.message : 'Failed to complete onboarding. Please try again.',\n      );\n    } finally {\n      setLoading(__false);\n    }\n  };\n\n  const renderStepIndicator = () => (\n    <View style={styles.stepIndicator}>\n      <ScrollView\n        horizontal\n        showsHorizontalScrollIndicator={false}\n        contentContainerStyle={styles.stepIndicatorContent}\n        scrollIndicatorInsets={{ top: 0, left: 0, bottom: 0, right: 0 }}\n        contentInset={{ left: 0, right: 0, top: 0, bottom: 0 }}>\n        {Array.from({ length: totalSteps }, (___, _index) => {\n          const step = index + 1;\n          return (\n            <View key={step} style={styles.stepIndicatorItem}>\n              <View\n                style={[\n                  styles.stepCircle,\n                  currentStep >= step && styles.stepCircleActive,\n                  currentStep > step && styles.stepCircleCompleted,\n                ]}>\n                {currentStep > step ? (\n                  <Icon name=\"check\" size={16} color={theme.colors.white} />\n                ) : (\n                  <Text style={[styles.stepNumber, currentStep >= step && styles.stepNumberActive]}>\n                    {step}\n                  </Text>\n                )}\n              </View>\n              {step < totalSteps && (\n                <View style={[styles.stepLine, currentStep > step && styles.stepLineCompleted]} />\n              )}\n            </View>\n          );\n        })}\n      </ScrollView>\n    </View>\n  );\n\n  const renderStep1 = () => (\n    <View style={styles.stepContent}>\n      <Text style={styles.stepTitle}>Restaurant Information</Text>\n      <Text style={styles.stepDescription}>\n        Let's start with basic information about your restaurant\n      </Text>\n\n      <FastInput\n        label=\"Restaurant Name *\"\n        inputType=\"text\"\n        value={formData.restaurantName}\n        onChangeText={_value => updateField('restaurantName', _value)}\n        placeholder=\"e.g., Maria's Mexican Kitchen\"\n        testID=\"restaurant-name\"\n      />\n\n      <FastInput\n        label=\"Display Name *\"\n        inputType=\"text\"\n        value={formData.displayName}\n        onChangeText={_value => updateField('displayName', _value)}\n        placeholder=\"e.g., Maria's Kitchen\"\n        containerStyle={styles.inputHint}\n        testID=\"restaurant-display-name\"\n      />\n      <Text style={styles.hintText}>This is what appears in your POS headers</Text>\n\n      <View style={styles.inputGroup}>\n        <Text style={styles.inputLabel}>Business Type *</Text>\n        <ScrollView\n          horizontal\n          showsHorizontalScrollIndicator={false}\n          style={styles.businessTypeScroll}\n          contentInset={{ left: 0, right: 0, top: 0, bottom: 0 }}\n          scrollIndicatorInsets={{ top: 0, left: 0, bottom: 0, right: 0 }}>\n          {businessTypes.map(type => (\n            <TouchableOpacity\n              key={type}\n              style={[\n                styles.businessTypeButton,\n                formData.businessType === type && styles.businessTypeButtonActive,\n              ]}\n              onPress={() => updateField('businessType', _type)}>\n              <Text\n                style={[\n                  styles.businessTypeText,\n                  formData.businessType === type && styles.businessTypeTextActive,\n                ]}>\n                {type}\n              </Text>\n            </TouchableOpacity>\n          ))}\n        </ScrollView>\n      </View>\n\n      <FastInput\n        label=\"Description (__Optional)\"\n        inputType=\"text\"\n        value={formData.description}\n        onChangeText={_value => updateField('description', _value)}\n        placeholder=\"Brief description of your restaurant's specialty\"\n        multiline\n        numberOfLines={3}\n      />\n    </View>\n  );\n\n  const renderStep2 = () => (\n    <View style={styles.stepContent}>\n      <Text style={styles.stepTitle}>Contact Information</Text>\n      <Text style={styles.stepDescription}>How can customers and Finlow support reach you?</Text>\n\n      <FastInput\n        label=\"Phone Number *\"\n        inputType=\"phone\"\n        value={formData.phone}\n        onChangeText={_value => {\n          updateField('phone', _value);\n          // Clear error when user starts typing\n          if (fieldErrors.phone) {\n            setFieldErrors(prev => ({ ...prev, phone: '' }));\n          }\n        }}\n        onBlur={() => {\n          if (formData.phone && !validateUKPhone(formData.phone)) {\n            setFieldErrors(prev => ({ ...prev, phone: 'Please enter a valid UK phone number' }));\n          } else {\n            setFieldErrors(prev => ({ ...prev, phone: '' }));\n          }\n        }}\n        placeholder=\"+44 20 1234 5678\"\n        error={fieldErrors.phone}\n        testID=\"restaurant-phone\"\n      />\n\n      <FastInput\n        label=\"Email Address *\"\n        inputType=\"email\"\n        value={formData.email}\n        onChangeText={_value => {\n          updateField('email', _value);\n          // Clear error when user starts typing\n          if (fieldErrors.restaurantEmail) {\n            setFieldErrors(prev => ({ ...prev, restaurantEmail: '' }));\n          }\n        }}\n        onBlur={() => {\n          if (formData.email && !validateEmail(formData.email)) {\n            setFieldErrors(prev => ({\n              ...prev,\n              restaurantEmail: 'Please enter a valid email address',\n            }));\n          } else {\n            setFieldErrors(prev => ({ ...prev, restaurantEmail: '' }));\n          }\n        }}\n        placeholder=\"owner@mariaskitchen.co.uk\"\n        error={fieldErrors.restaurantEmail}\n        testID=\"restaurant-email\"\n      />\n\n      <FastInput\n        label=\"Website (__Optional)\"\n        inputType=\"text\"\n        value={formData.website}\n        onChangeText={_value => updateField('website', _value)}\n        placeholder=\"https://mariaskitchen.co.uk\"\n      />\n    </View>\n  );\n\n  const renderStep3 = () => (\n    <View style={styles.stepContent}>\n      <Text style={styles.stepTitle}>Restaurant Location</Text>\n      <Text style={styles.stepDescription}>\n        Your restaurant's physical address for deliveries and customers\n      </Text>\n\n      <FastInput\n        label=\"Street Address *\"\n        inputType=\"text\"\n        value={formData.street}\n        onChangeText={_value => updateField('street', _value)}\n        placeholder=\"123 High Street\"\n        testID=\"address-street\"\n      />\n\n      <View style={styles.inputRow}>\n        <View style={{ flex: 2 }}>\n          <FastInput\n            label=\"City *\"\n            inputType=\"text\"\n            value={formData.city}\n            onChangeText={_value => updateField('city', _value)}\n            placeholder=\"London\"\n            testID=\"address-city\"\n          />\n        </View>\n\n        <View style={{ flex: 1, marginLeft: 12 }}>\n          <FastInput\n            label=\"Postcode *\"\n            inputType=\"text\"\n            value={formData.zipCode}\n            onChangeText={_value => {\n              updateField('zipCode', _value);\n              // Clear error when user starts typing\n              if (fieldErrors.postcode) {\n                setFieldErrors(prev => ({ ...prev, postcode: '' }));\n              }\n            }}\n            onBlur={() => {\n              if (formData.zipCode && !validatePostcode(formData.zipCode)) {\n                setFieldErrors(prev => ({ ...prev, postcode: 'Please enter a valid UK postcode' }));\n              } else {\n                setFieldErrors(prev => ({ ...prev, postcode: '' }));\n              }\n            }}\n            placeholder=\"SW1A 1AA\"\n            error={fieldErrors.postcode}\n            testID=\"address-postcode\"\n          />\n        </View>\n      </View>\n\n      <View style={styles.inputRow}>\n        <View style={{ flex: 1 }}>\n          <FastInput\n            label=\"County/State\"\n            inputType=\"text\"\n            value={formData.state}\n            onChangeText={_value => updateField('state', _value)}\n            placeholder=\"Greater London\"\n          />\n        </View>\n\n        <View style={{ flex: 1, marginLeft: 12 }}>\n          <FastInput\n            label=\"Country\"\n            inputType=\"text\"\n            value={formData.country}\n            onChangeText={_value => updateField('country', _value)}\n            placeholder=\"United Kingdom\"\n            editable={false}\n          />\n        </View>\n      </View>\n    </View>\n  );\n\n  const renderStep4 = () => (\n    <View style={styles.stepContent}>\n      <Text style={styles.stepTitle}>Owner Information</Text>\n      <Text style={styles.stepDescription}>Primary owner/manager contact details</Text>\n\n      <FastInput\n        label=\"Owner/Manager Name *\"\n        inputType=\"text\"\n        value={formData.ownerName}\n        onChangeText={_value => updateField('ownerName', _value)}\n        placeholder=\"Maria Rodriguez\"\n        testID=\"owner-name\"\n      />\n\n      <FastInput\n        label=\"Owner Email *\"\n        inputType=\"email\"\n        value={formData.ownerEmail}\n        onChangeText={_value => {\n          updateField('ownerEmail', _value);\n          // Clear error when user starts typing\n          if (fieldErrors.ownerEmail) {\n            setFieldErrors(prev => ({ ...prev, ownerEmail: '' }));\n          }\n        }}\n        onBlur={() => {\n          if (formData.ownerEmail && !validateEmail(formData.ownerEmail)) {\n            setFieldErrors(prev => ({ ...prev, ownerEmail: 'Please enter a valid email address' }));\n          } else {\n            setFieldErrors(prev => ({ ...prev, ownerEmail: '' }));\n          }\n        }}\n        placeholder=\"owner@restaurant.com\"\n        error={fieldErrors.ownerEmail}\n        testID=\"owner-email\"\n      />\n\n      <FastInput\n        label=\"Owner Phone\"\n        inputType=\"phone\"\n        value={formData.ownerPhone}\n        onChangeText={_value => updateField('ownerPhone', _value)}\n        placeholder=\"+44 7123 456789\"\n      />\n    </View>\n  );\n\n  const renderStep5 = () => (\n    <View style={styles.stepContent}>\n      <Text style={styles.stepTitle}>Business Hours</Text>\n      <Text style={styles.stepDescription}>Set your restaurant's operating hours</Text>\n\n      {dayNames.map((__day, _index) => (\n        <View key={day} style={styles.businessHourRow}>\n          <View style={styles.dayInfo}>\n            <Text style={styles.dayLabel}>{dayLabels[index]}</Text>\n            <Switch\n              value={!formData.operatingHours[day].closed}\n              onValueChange={value => {\n                updateField('operatingHours', {\n                  ...formData.operatingHours,\n                  [day]: { ...formData.operatingHours[day], closed: !value },\n                });\n              }}\n              trackColor={{ false: theme.colors.lightGray, true: theme.colors.primary }}\n            />\n          </View>\n\n          {!formData.operatingHours[day].closed && (\n            <View style={styles.timeInputs}>\n              <View style={styles.timeInput}>\n                <FastInput\n                  label=\"Open\"\n                  inputType=\"text\"\n                  value={formData.operatingHours[day].open}\n                  onChangeText={value => {\n                    updateField('operatingHours', {\n                      ...formData.operatingHours,\n                      [day]: { ...formData.operatingHours[day], open: value },\n                    });\n                  }}\n                  placeholder=\"09:00\"\n                  containerStyle={{ marginBottom: 0 }}\n                />\n              </View>\n              <Text style={styles.timeSeparator}>to</Text>\n              <View style={styles.timeInput}>\n                <FastInput\n                  label=\"Close\"\n                  inputType=\"text\"\n                  value={formData.operatingHours[day].close}\n                  onChangeText={value => {\n                    updateField('operatingHours', {\n                      ...formData.operatingHours,\n                      [day]: { ...formData.operatingHours[day], close: value },\n                    });\n                  }}\n                  placeholder=\"22:00\"\n                  containerStyle={{ marginBottom: 0 }}\n                />\n              </View>\n            </View>\n          )}\n        </View>\n      ))}\n    </View>\n  );\n\n  const renderStep6 = () => (\n    <View style={styles.stepContent}>\n      <Text style={styles.stepTitle}>Employee Management</Text>\n      <Text style={styles.stepDescription}>Add your team members and set their access levels</Text>\n\n      {/* Add New Employee */}\n      <View style={styles.addEmployeeSection}>\n        <Text style={styles.sectionTitle}>Add New Employee</Text>\n\n        <View style={styles.inputRow}>\n          <View style={{ flex: 2 }}>\n            <FastInput\n              label=\"Full Name\"\n              inputType=\"text\"\n              value={newEmployee.name || ''}\n              onChangeText={value => setNewEmployee(prev => ({ ...prev, name: value }))}\n              placeholder=\"John Smith\"\n            />\n          </View>\n          <View style={{ flex: 1, marginLeft: 12 }}>\n            <View style={styles.inputGroup}>\n              <Text style={styles.inputLabel}>Role</Text>\n              <ScrollView\n                horizontal\n                showsHorizontalScrollIndicator={false}\n                contentInset={{ left: 0, right: 0, top: 0, bottom: 0 }}\n                scrollIndicatorInsets={{ top: 0, left: 0, bottom: 0, right: 0 }}>\n                {employeeRoles.map(role => (\n                  <TouchableOpacity\n                    key={role.value}\n                    style={[\n                      styles.roleButton,\n                      newEmployee.role === role.value && styles.roleButtonActive,\n                    ]}\n                    onPress={() =>\n                      setNewEmployee(prev => ({ ...prev, role: role.value as Employee['role'] }))\n                    }>\n                    <Icon\n                      name={role.icon}\n                      size={16}\n                      color={\n                        newEmployee.role === role.value ? theme.colors.white : theme.colors.text\n                      }\n                    />\n                    <Text\n                      style={[\n                        styles.roleText,\n                        newEmployee.role === role.value && styles.roleTextActive,\n                      ]}>\n                      {role.label}\n                    </Text>\n                  </TouchableOpacity>\n                ))}\n              </ScrollView>\n            </View>\n          </View>\n        </View>\n\n        <View style={styles.inputRow}>\n          <View style={{ flex: 2 }}>\n            <FastInput\n              label=\"Email\"\n              inputType=\"email\"\n              value={newEmployee.email || ''}\n              onChangeText={value => {\n                setNewEmployee(prev => ({ ...prev, email: value }));\n                // Clear error when user starts typing\n                if (fieldErrors.employeeEmail) {\n                  setFieldErrors(prev => ({ ...prev, employeeEmail: '' }));\n                }\n              }}\n              onBlur={() => {\n                if (newEmployee.email && !validateEmail(newEmployee.email)) {\n                  setFieldErrors(prev => ({\n                    ...prev,\n                    employeeEmail: 'Please enter a valid email address',\n                  }));\n                } else {\n                  setFieldErrors(prev => ({ ...prev, employeeEmail: '' }));\n                }\n              }}\n              placeholder=\"john@mariaskitchen.co.uk\"\n              error={fieldErrors.employeeEmail}\n            />\n          </View>\n          <View style={{ flex: 1, marginLeft: 12 }}>\n            <FastInput\n              label=\"Hourly Rate (£)\"\n              inputType=\"currency\"\n              value={newEmployee.hourlyRate || ''}\n              onChangeText={value => setNewEmployee(prev => ({ ...prev, hourlyRate: value }))}\n              placeholder=\"12.50\"\n            />\n          </View>\n        </View>\n\n        <View style={styles.inputGroup}>\n          <Text style={styles.inputLabel}>Access Level</Text>\n          <View style={styles.accessLevelContainer}>\n            {accessLevels.map(level => (\n              <TouchableOpacity\n                key={level.value}\n                style={[\n                  styles.accessLevelButton,\n                  newEmployee.accessLevel === level.value && styles.accessLevelButtonActive,\n                ]}\n                onPress={() =>\n                  setNewEmployee(prev => ({\n                    ...prev,\n                    accessLevel: level.value as Employee['accessLevel'],\n                  }))\n                }>\n                <Text\n                  style={[\n                    styles.accessLevelTitle,\n                    newEmployee.accessLevel === level.value && styles.accessLevelTitleActive,\n                  ]}>\n                  {level.label}\n                </Text>\n                <Text\n                  style={[\n                    styles.accessLevelDescription,\n                    newEmployee.accessLevel === level.value && styles.accessLevelDescriptionActive,\n                  ]}>\n                  {level.description}\n                </Text>\n              </TouchableOpacity>\n            ))}\n          </View>\n        </View>\n\n        <TouchableOpacity style={styles.addEmployeeButton} onPress={addEmployee}>\n          <Icon name=\"add\" size={20} color={theme.colors.white} />\n          <Text style={styles.addEmployeeButtonText}>Add Employee</Text>\n        </TouchableOpacity>\n      </View>\n\n      {/* Employee List */}\n      {employees.length > 0 && (\n        <View style={styles.employeeListSection}>\n          <Text style={styles.sectionTitle}>Team Members ({employees.length})</Text>\n          {employees.map(employee => (\n            <View key={employee.id} style={styles.employeeCard}>\n              <View style={styles.employeeInfo}>\n                <Text style={styles.employeeName}>{employee.name}</Text>\n                <Text style={styles.employeeRole}>\n                  {employeeRoles.find(r => r.value === employee.role)?.label}\n                </Text>\n                <Text style={styles.employeeDetails}>\n                  {employee.email} • £{employee.hourlyRate}/hr\n                </Text>\n              </View>\n              <TouchableOpacity\n                style={styles.removeEmployeeButton}\n                onPress={() => removeEmployee(employee.id)}>\n                <Icon name=\"delete\" size={20} color={theme.colors.error} />\n              </TouchableOpacity>\n            </View>\n          ))}\n        </View>\n      )}\n    </View>\n  );\n\n  const renderMenuSetup = () => (\n    <View style={styles.stepContent}>\n      <Text style={styles.stepTitle}>Menu Setup</Text>\n      <Text style={styles.stepDescription}>\n        Set up your restaurant menu. You can add categories and items now or do it later.\n      </Text>\n\n      <View style={styles.menuSetupContainer}>\n        <Icon name=\"restaurant-menu\" size={64} color={theme.colors.primary} />\n        <Text style={styles.menuSetupText}>Your menu is essential for taking orders. You can:</Text>\n\n        <View style={styles.menuOptions}>\n          <View style={styles.menuOption}>\n            <Icon name=\"check-circle\" size={24} color={theme.colors.success} />\n            <Text style={styles.menuOptionText}>\n              Add menu categories (e.g., _Appetizers, Main Courses, _Drinks)\n            </Text>\n          </View>\n\n          <View style={styles.menuOption}>\n            <Icon name=\"check-circle\" size={24} color={theme.colors.success} />\n            <Text style={styles.menuOptionText}>Add items with prices and descriptions</Text>\n          </View>\n\n          <View style={styles.menuOption}>\n            <Icon name=\"check-circle\" size={24} color={theme.colors.success} />\n            <Text style={styles.menuOptionText}>Set item availability and featured items</Text>\n          </View>\n        </View>\n\n        <TouchableOpacity\n          style={styles.setupMenuButton}\n          onPress={() => {\n            // Navigate to menu management screen\n            navigation.navigate('MenuManagement' as never);\n          }}\n          testID=\"setup-menu-button\">\n          <Icon name=\"restaurant-menu\" size={20} color={theme.colors.white} />\n          <Text style={styles.setupMenuButtonText}>Set Up Menu Now</Text>\n        </TouchableOpacity>\n\n        <TouchableOpacity\n          style={styles.skipButton}\n          onPress={() => {\n            Alert.alert(\n              'Skip Menu Setup?',\n              'You can always add your menu later from the Settings menu.',\n              [\n                { text: 'Cancel', style: 'cancel' },\n                { text: 'Skip', onPress: () => nextStep() },\n              ],\n            );\n          }}>\n          <Text style={styles.skipButtonText}>Skip for Now</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n\n  const renderBankDetails = () => (\n    <View style={styles.stepContent}>\n      <Text style={styles.stepTitle}>Bank Details</Text>\n      <Text style={styles.stepDescription}>Add your bank account details to receive payments</Text>\n\n      <FastInput\n        label=\"Sort Code *\"\n        inputType=\"text\"\n        value={formData.bankDetails?.sortCode || ''}\n        onChangeText={_text => {\n          const _formattedSortCode = formatSortCode(__text);\n          setFormData(prev => ({\n            ...prev,\n            bankDetails: {\n              ...prev.bankDetails!,\n              sortCode: _formattedSortCode,\n            },\n          }));\n          // Clear error when user starts typing\n          if (fieldErrors.sortCode) {\n            setFieldErrors(prev => ({ ...prev, sortCode: '' }));\n          }\n        }}\n        onBlur={() => {\n          if (formData.bankDetails?.sortCode && !validateSortCode(formData.bankDetails.sortCode)) {\n            setFieldErrors(prev => ({\n              ...prev,\n              sortCode: 'Please enter a valid 6-digit sort code',\n            }));\n          } else {\n            setFieldErrors(prev => ({ ...prev, sortCode: '' }));\n          }\n        }}\n        placeholder=\"00-00-00\"\n        keyboardType=\"numeric\"\n        maxLength={8}\n        error={fieldErrors.sortCode}\n      />\n\n      <FastInput\n        label=\"Account Number *\"\n        inputType=\"text\"\n        value={formData.bankDetails?.accountNumber || ''}\n        onChangeText={text => {\n          const _cleanedText = text.replace(/[^0-9]/g, '').slice(0, 8);\n          setFormData(prev => ({\n            ...prev,\n            bankDetails: {\n              ...prev.bankDetails!,\n              accountNumber: _cleanedText,\n            },\n          }));\n          // Clear error when user starts typing\n          if (fieldErrors.accountNumber) {\n            setFieldErrors(prev => ({ ...prev, accountNumber: '' }));\n          }\n        }}\n        onBlur={() => {\n          if (\n            formData.bankDetails?.accountNumber &&\n            !validateAccountNumber(formData.bankDetails.accountNumber)\n          ) {\n            setFieldErrors(prev => ({\n              ...prev,\n              accountNumber: 'Please enter a valid 8-digit account number',\n            }));\n          } else {\n            setFieldErrors(prev => ({ ...prev, accountNumber: '' }));\n          }\n        }}\n        placeholder=\"12345678\"\n        keyboardType=\"numeric\"\n        maxLength={8}\n        error={fieldErrors.accountNumber}\n      />\n\n      <FastInput\n        label=\"Account Name *\"\n        inputType=\"text\"\n        value={formData.bankDetails?.accountName || ''}\n        onChangeText={_text => {\n          const _sanitized = sanitizeInput(__text, 100);\n          setFormData(prev => ({\n            ...prev,\n            bankDetails: {\n              ...prev.bankDetails!,\n              accountName: _sanitized,\n            },\n          }));\n          // Clear error when user starts typing\n          if (fieldErrors.accountName) {\n            setFieldErrors(prev => ({ ...prev, accountName: '' }));\n          }\n        }}\n        onBlur={() => {\n          if (!formData.bankDetails?.accountName) {\n            setFieldErrors(prev => ({ ...prev, accountName: 'Account name is required' }));\n          }\n        }}\n        error={fieldErrors.accountName}\n        placeholder=\"Your Restaurant Ltd\"\n      />\n\n      <FastInput\n        label=\"IBAN (__Optional)\"\n        inputType=\"text\"\n        value={formData.bankDetails?.iban || ''}\n        onChangeText={text => {\n          const upperCase = text.toUpperCase().replace(/[^A-Z0-9]/g, '');\n          setFormData(prev => ({\n            ...prev,\n            bankDetails: {\n              ...prev.bankDetails!,\n              iban: _upperCase,\n            },\n          }));\n          // Clear error if field becomes empty\n          if (!upperCase && fieldErrors.iban) {\n            setFieldErrors(prev => ({ ...prev, iban: '' }));\n          }\n        }}\n        onBlur={() => {\n          if (formData.bankDetails?.iban && !validateIBAN(formData.bankDetails.iban)) {\n            setFieldErrors(prev => ({ ...prev, iban: 'Please enter a valid IBAN' }));\n          } else {\n            setFieldErrors(prev => ({ ...prev, iban: '' }));\n          }\n        }}\n        error={fieldErrors.iban}\n        placeholder=\"GB00XXXX00000000000000\"\n        autoCapitalize=\"characters\"\n      />\n\n      <FastInput\n        label=\"SWIFT/BIC Code (__Optional)\"\n        inputType=\"text\"\n        value={formData.bankDetails?.swiftBic || ''}\n        onChangeText={text => {\n          const upperCase = text\n            .toUpperCase()\n            .replace(/[^A-Z0-9]/g, '')\n            .slice(0, 11);\n          setFormData(prev => ({\n            ...prev,\n            bankDetails: {\n              ...prev.bankDetails!,\n              swiftBic: _upperCase,\n            },\n          }));\n          // Clear error if field becomes empty\n          if (!upperCase && fieldErrors.swiftBic) {\n            setFieldErrors(prev => ({ ...prev, swiftBic: '' }));\n          }\n        }}\n        onBlur={() => {\n          if (formData.bankDetails?.swiftBic && !validateSWIFT(formData.bankDetails.swiftBic)) {\n            setFieldErrors(prev => ({ ...prev, swiftBic: 'Please enter a valid SWIFT/BIC code' }));\n          } else {\n            setFieldErrors(prev => ({ ...prev, swiftBic: '' }));\n          }\n        }}\n        error={fieldErrors.swiftBic}\n        placeholder=\"XXXXXXXX\"\n        autoCapitalize=\"characters\"\n        maxLength={11}\n      />\n\n      <View style={styles.infoBox}>\n        <Icon name=\"info\" size={20} color={theme.colors.primary} />\n        <Text style={styles.infoText}>\n          Your bank details are encrypted and securely stored. Payments are processed weekly on\n          Fridays.\n        </Text>\n      </View>\n    </View>\n  );\n\n  const renderStep7 = () => (\n    <View style={styles.stepContent}>\n      <Text style={styles.stepTitle}>Review & Complete</Text>\n      <Text style={styles.stepDescription}>\n        Review your restaurant setup before completing onboarding\n      </Text>\n\n      <View style={styles.reviewSection}>\n        <Text style={styles.reviewSectionTitle}>Restaurant Information</Text>\n        <View style={styles.reviewItem}>\n          <Text style={styles.reviewLabel}>Name:</Text>\n          <Text style={styles.reviewValue}>{formData.restaurantName}</Text>\n        </View>\n        <View style={styles.reviewItem}>\n          <Text style={styles.reviewLabel}>Type:</Text>\n          <Text style={styles.reviewValue}>{formData.businessType}</Text>\n        </View>\n        <View style={styles.reviewItem}>\n          <Text style={styles.reviewLabel}>Contact:</Text>\n          <Text style={styles.reviewValue}>\n            {formData.phone} • {formData.email}\n          </Text>\n        </View>\n        <View style={styles.reviewItem}>\n          <Text style={styles.reviewLabel}>Address:</Text>\n          <Text style={styles.reviewValue}>\n            {formData.street}, {formData.city} {formData.zipCode}\n          </Text>\n        </View>\n      </View>\n\n      <View style={styles.reviewSection}>\n        <Text style={styles.reviewSectionTitle}>Team</Text>\n        <View style={styles.reviewItem}>\n          <Text style={styles.reviewLabel}>Owner:</Text>\n          <Text style={styles.reviewValue}>{formData.ownerName}</Text>\n        </View>\n        <View style={styles.reviewItem}>\n          <Text style={styles.reviewLabel}>Employees:</Text>\n          <Text style={styles.reviewValue}>{employees.length} team members added</Text>\n        </View>\n      </View>\n\n      <View style={styles.completionMessage}>\n        <Icon name=\"check-circle\" size={48} color={theme.colors.success} />\n        <Text style={styles.completionTitle}>Ready to Launch!</Text>\n        <Text style={styles.completionDescription}>\n          Your restaurant is fully configured and ready to start taking orders with Finlow POS.\n        </Text>\n      </View>\n    </View>\n  );\n\n  const renderCurrentStep = () => {\n    switch (__currentStep) {\n      case 1:\n        return renderStep1();\n      case 2:\n        return renderStep2();\n      case 3:\n        return renderStep3();\n      case 4:\n        return renderStep4();\n      case 5:\n        return renderStep5();\n      case 6:\n        return renderStep6();\n      case 7:\n        return renderMenuSetup();\n      case 8:\n        return renderBankDetails();\n      case 9:\n        return renderStep7();\n      default:\n        return renderStep1();\n    }\n  };\n\n  const styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      backgroundColor: theme.colors.background,\n    },\n    header: {\n      backgroundColor: theme.colors.primary,\n      flexDirection: 'row',\n      alignItems: 'center',\n      paddingHorizontal: 16,\n      paddingVertical: 12,\n      height: 70,\n    },\n    backButton: {\n      padding: 8,\n    },\n    headerCenter: {\n      flex: 1,\n      alignItems: 'center',\n    },\n    headerTitle: {\n      fontSize: 20,\n      fontWeight: 'bold',\n      color: theme.colors.white,\n    },\n    headerSubtitle: {\n      fontSize: 12,\n      color: 'rgba(255, 255, 255, 0.8)',\n      marginTop: 2,\n    },\n    headerSpacer: {\n      width: 40,\n    },\n    content: {\n      flex: 1,\n    },\n    stepIndicator: {\n      backgroundColor: theme.colors.white,\n      borderBottomWidth: 1,\n      borderBottomColor: theme.colors.border,\n      paddingVertical: 16,\n    },\n    stepIndicatorContent: {\n      paddingHorizontal: 20,\n      alignItems: 'center',\n    },\n    stepIndicatorItem: {\n      flexDirection: 'row',\n      alignItems: 'center',\n    },\n    stepCircle: {\n      width: 32,\n      height: 32,\n      borderRadius: 16,\n      backgroundColor: theme.colors.lightGray,\n      justifyContent: 'center',\n      alignItems: 'center',\n      borderWidth: 2,\n      borderColor: theme.colors.border,\n    },\n    stepCircleActive: {\n      backgroundColor: theme.colors.primary,\n      borderColor: theme.colors.primary,\n    },\n    stepCircleCompleted: {\n      backgroundColor: theme.colors.success,\n      borderColor: theme.colors.success,\n    },\n    stepNumber: {\n      fontSize: 14,\n      fontWeight: '600',\n      color: theme.colors.textSecondary,\n    },\n    stepNumberActive: {\n      color: theme.colors.white,\n    },\n    stepLine: {\n      width: 30,\n      height: 2,\n      backgroundColor: theme.colors.border,\n      marginHorizontal: 8,\n    },\n    stepLineCompleted: {\n      backgroundColor: theme.colors.success,\n    },\n    scrollContainer: {\n      flex: 1,\n    },\n    stepContent: {\n      padding: 24,\n    },\n    stepTitle: {\n      fontSize: 24,\n      fontWeight: 'bold',\n      color: theme.colors.text,\n      marginBottom: 8,\n    },\n    stepDescription: {\n      fontSize: 16,\n      color: theme.colors.textSecondary,\n      marginBottom: 32,\n      lineHeight: 22,\n    },\n    inputGroup: {\n      marginBottom: 24,\n    },\n    inputRow: {\n      flexDirection: 'row',\n    },\n    inputLabel: {\n      fontSize: 16,\n      fontWeight: '600',\n      color: theme.colors.text,\n      marginBottom: 8,\n    },\n    inputHint: {\n      marginBottom: 4,\n    },\n    hintText: {\n      fontSize: 12,\n      color: theme.colors.textSecondary,\n      marginBottom: 16,\n      fontStyle: 'italic',\n    },\n    businessTypeScroll: {\n      marginTop: 8,\n    },\n    businessTypeButton: {\n      paddingHorizontal: 16,\n      paddingVertical: 8,\n      borderRadius: 20,\n      backgroundColor: theme.colors.background,\n      marginRight: 8,\n      borderWidth: 1,\n      borderColor: theme.colors.border,\n    },\n    businessTypeButtonActive: {\n      backgroundColor: theme.colors.primary,\n      borderColor: theme.colors.primary,\n    },\n    businessTypeText: {\n      fontSize: 14,\n      fontWeight: '500',\n      color: theme.colors.text,\n    },\n    businessTypeTextActive: {\n      color: theme.colors.white,\n    },\n    businessHourRow: {\n      marginBottom: 16,\n      padding: 16,\n      backgroundColor: theme.colors.white,\n      borderRadius: 12,\n      borderWidth: 1,\n      borderColor: theme.colors.border,\n    },\n    dayInfo: {\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      marginBottom: 12,\n    },\n    dayLabel: {\n      fontSize: 16,\n      fontWeight: '600',\n      color: theme.colors.text,\n    },\n    timeInputs: {\n      flexDirection: 'row',\n      alignItems: 'center',\n    },\n    timeInput: {\n      flex: 1,\n    },\n    timeSeparator: {\n      fontSize: 16,\n      color: theme.colors.textSecondary,\n      marginHorizontal: 12,\n      marginTop: 24,\n    },\n    addEmployeeSection: {\n      backgroundColor: theme.colors.white,\n      borderRadius: 12,\n      padding: 20,\n      marginBottom: 24,\n      borderWidth: 1,\n      borderColor: theme.colors.border,\n    },\n    sectionTitle: {\n      fontSize: 18,\n      fontWeight: 'bold',\n      color: theme.colors.text,\n      marginBottom: 16,\n    },\n    roleButton: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      paddingHorizontal: 12,\n      paddingVertical: 8,\n      borderRadius: 8,\n      backgroundColor: theme.colors.background,\n      marginRight: 8,\n      borderWidth: 1,\n      borderColor: theme.colors.border,\n    },\n    roleButtonActive: {\n      backgroundColor: theme.colors.primary,\n      borderColor: theme.colors.primary,\n    },\n    roleText: {\n      fontSize: 12,\n      color: theme.colors.text,\n      marginLeft: 4,\n    },\n    roleTextActive: {\n      color: theme.colors.white,\n    },\n    accessLevelContainer: {\n      gap: 12,\n    },\n    accessLevelButton: {\n      padding: 16,\n      borderRadius: 12,\n      backgroundColor: theme.colors.background,\n      borderWidth: 1,\n      borderColor: theme.colors.border,\n    },\n    accessLevelButtonActive: {\n      backgroundColor: theme.colors.primary,\n      borderColor: theme.colors.primary,\n    },\n    accessLevelTitle: {\n      fontSize: 16,\n      fontWeight: '600',\n      color: theme.colors.text,\n      marginBottom: 4,\n    },\n    accessLevelTitleActive: {\n      color: theme.colors.white,\n    },\n    accessLevelDescription: {\n      fontSize: 14,\n      color: theme.colors.textSecondary,\n    },\n    accessLevelDescriptionActive: {\n      color: theme.colors.white,\n    },\n    addEmployeeButton: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      justifyContent: 'center',\n      backgroundColor: theme.colors.primary,\n      paddingVertical: 16,\n      borderRadius: 12,\n      marginTop: 16,\n    },\n    addEmployeeButtonText: {\n      fontSize: 16,\n      fontWeight: '600',\n      color: theme.colors.white,\n      marginLeft: 8,\n    },\n    employeeListSection: {\n      backgroundColor: theme.colors.white,\n      borderRadius: 12,\n      padding: 20,\n      borderWidth: 1,\n      borderColor: theme.colors.border,\n    },\n    employeeCard: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      padding: 16,\n      backgroundColor: theme.colors.background,\n      borderRadius: 12,\n      marginBottom: 12,\n    },\n    employeeInfo: {\n      flex: 1,\n    },\n    employeeName: {\n      fontSize: 16,\n      fontWeight: '600',\n      color: theme.colors.text,\n    },\n    employeeRole: {\n      fontSize: 14,\n      color: theme.colors.primary,\n      marginTop: 2,\n    },\n    employeeDetails: {\n      fontSize: 12,\n      color: theme.colors.textSecondary,\n      marginTop: 4,\n    },\n    removeEmployeeButton: {\n      padding: 8,\n    },\n    reviewSection: {\n      backgroundColor: theme.colors.white,\n      borderRadius: 12,\n      padding: 20,\n      marginBottom: 16,\n      borderWidth: 1,\n      borderColor: theme.colors.border,\n    },\n    reviewSectionTitle: {\n      fontSize: 18,\n      fontWeight: 'bold',\n      color: theme.colors.text,\n      marginBottom: 16,\n    },\n    reviewItem: {\n      flexDirection: 'row',\n      marginBottom: 8,\n    },\n    reviewLabel: {\n      fontSize: 14,\n      fontWeight: '600',\n      color: theme.colors.textSecondary,\n      width: 80,\n    },\n    reviewValue: {\n      fontSize: 14,\n      color: theme.colors.text,\n      flex: 1,\n    },\n    completionMessage: {\n      alignItems: 'center',\n      padding: 32,\n      backgroundColor: theme.colors.white,\n      borderRadius: 12,\n      borderWidth: 1,\n      borderColor: theme.colors.border,\n    },\n    completionTitle: {\n      fontSize: 20,\n      fontWeight: 'bold',\n      color: theme.colors.text,\n      marginTop: 16,\n      marginBottom: 8,\n    },\n    completionDescription: {\n      fontSize: 14,\n      color: theme.colors.textSecondary,\n      textAlign: 'center',\n      lineHeight: 20,\n    },\n    navigationBar: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      paddingHorizontal: 24,\n      paddingVertical: 16,\n      backgroundColor: theme.colors.white,\n      borderTopWidth: 1,\n      borderTopColor: theme.colors.border,\n    },\n    prevButton: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      paddingHorizontal: 16,\n      paddingVertical: 12,\n      borderRadius: 8,\n      backgroundColor: theme.colors.background,\n    },\n    prevButtonText: {\n      fontSize: 16,\n      fontWeight: '500',\n      color: theme.colors.text,\n      marginLeft: 8,\n    },\n    navigationSpacer: {\n      flex: 1,\n    },\n    nextButton: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      paddingHorizontal: 24,\n      paddingVertical: 12,\n      borderRadius: 8,\n      backgroundColor: theme.colors.primary,\n    },\n    nextButtonDisabled: {\n      backgroundColor: theme.colors.textSecondary,\n    },\n    nextButtonText: {\n      fontSize: 16,\n      fontWeight: '600',\n      color: theme.colors.white,\n      marginRight: 8,\n    },\n    menuSetupContainer: {\n      alignItems: 'center',\n      paddingVertical: 24,\n    },\n    menuSetupText: {\n      fontSize: 16,\n      color: theme.colors.text,\n      marginTop: 16,\n      marginBottom: 24,\n      textAlign: 'center',\n    },\n    menuOptions: {\n      width: '100%',\n      marginBottom: 32,\n    },\n    menuOption: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      marginBottom: 16,\n      paddingHorizontal: 16,\n    },\n    menuOptionText: {\n      fontSize: 14,\n      color: theme.colors.text,\n      marginLeft: 12,\n      flex: 1,\n    },\n    setupMenuButton: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      backgroundColor: theme.colors.primary,\n      paddingVertical: 16,\n      paddingHorizontal: 32,\n      borderRadius: 12,\n      marginBottom: 16,\n    },\n    setupMenuButtonText: {\n      fontSize: 16,\n      fontWeight: '600',\n      color: theme.colors.white,\n      marginLeft: 8,\n    },\n    skipButton: {\n      paddingVertical: 12,\n      paddingHorizontal: 24,\n    },\n    skipButtonText: {\n      fontSize: 14,\n      color: theme.colors.textSecondary,\n      textDecorationLine: 'underline',\n    },\n    infoBox: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      backgroundColor: theme.colors.background,\n      padding: 16,\n      borderRadius: 8,\n      marginTop: 16,\n    },\n    infoText: {\n      fontSize: 14,\n      color: theme.colors.textSecondary,\n      marginLeft: 12,\n      flex: 1,\n      lineHeight: 20,\n    },\n  });\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <StatusBar backgroundColor={theme.colors.primary} barStyle=\"light-content\" />\n\n      {/* Header */}\n      <View style={styles.header}>\n        <TouchableOpacity\n          style={styles.backButton}\n          onPress={() => navigation.goBack()}\n          testID=\"header-back-button\">\n          <Icon name=\"arrow-back\" size={24} color={theme.colors.white} />\n        </TouchableOpacity>\n\n        <View style={styles.headerCenter}>\n          <Text style={styles.headerTitle}>Restaurant Setup</Text>\n          <Text style={styles.headerSubtitle}>\n            Step {currentStep} of {totalSteps}\n          </Text>\n        </View>\n\n        <View style={styles.headerSpacer} />\n      </View>\n\n      <View style={styles.content}>\n        {renderStepIndicator()}\n\n        <ScrollView\n          style={styles.scrollContainer}\n          showsVerticalScrollIndicator={false}\n          keyboardShouldPersistTaps=\"handled\"\n          contentContainerStyle={{\n            paddingBottom:\n              isKeyboardVisible && Platform.OS === 'ios'\n                ? Math.max(0, keyboardHeight - KEYBOARD_VERTICAL_OFFSET) + 100\n                : 100,\n          }}>\n          {renderCurrentStep()}\n        </ScrollView>\n\n        {/* Navigation Buttons */}\n        <View style={styles.navigationBar}>\n          {currentStep > 1 && (\n            <TouchableOpacity style={styles.prevButton} onPress={prevStep} testID=\"back-button\">\n              <Icon name=\"arrow-back\" size={20} color={theme.colors.text} />\n              <Text style={styles.prevButtonText}>Previous</Text>\n            </TouchableOpacity>\n          )}\n\n          <View style={styles.navigationSpacer} />\n\n          <TouchableOpacity\n            style={[styles.nextButton, !validateStep(__currentStep) && styles.nextButtonDisabled]}\n            onPress={nextStep}\n            disabled={loading || !validateStep(__currentStep)}\n            testID={currentStep === totalSteps ? 'complete-setup-button' : 'next-step-button'}>\n            <Text style={styles.nextButtonText}>\n              {loading ? 'Saving...' : currentStep === totalSteps ? 'Complete Setup' : 'Next'}\n            </Text>\n            {!loading && (\n              <Icon\n                name={currentStep === totalSteps ? 'check' : 'arrow-forward'}\n                size={20}\n                color={theme.colors.white}\n              />\n            )}\n          </TouchableOpacity>\n        </View>\n      </View>\n    </SafeAreaView>\n  );\n};\n\nexport default ComprehensiveRestaurantOnboardingScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/onboarding/RestaurantSetupScreen.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":198,"column":12,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[5100,5172],"text":"\n        Let&apos;s start with basic information about your restaurant\n      "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[5100,5172],"text":"\n        Let&lsquo;s start with basic information about your restaurant\n      "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[5100,5172],"text":"\n        Let&#39;s start with basic information about your restaurant\n      "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[5100,5172],"text":"\n        Let&rsquo;s start with basic information about your restaurant\n      "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":288,"column":24,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[8236,8315],"text":"\n        Your restaurant&apos;s physical address for deliveries and customers\n      "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[8236,8315],"text":"\n        Your restaurant&lsquo;s physical address for deliveries and customers\n      "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[8236,8315],"text":"\n        Your restaurant&#39;s physical address for deliveries and customers\n      "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[8236,8315],"text":"\n        Your restaurant&rsquo;s physical address for deliveries and customers\n      "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { flex: 2 }","line":303,"column":42,"nodeType":"ObjectExpression","endLine":303,"endColumn":53},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { flex: 1, marginLeft: 12 }","line":314,"column":42,"nodeType":"ObjectExpression","endLine":314,"endColumn":69},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { flex: 1 }","line":328,"column":42,"nodeType":"ObjectExpression","endLine":328,"endColumn":53},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { flex: 1, marginLeft: 12 }","line":339,"column":42,"nodeType":"ObjectExpression","endLine":339,"endColumn":69}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  StatusBar,\n  SafeAreaView,\n  TouchableOpacity,\n  ScrollView,\n  TextInput,\n  Alert,\n  KeyboardAvoidingView,\n  Platform,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation } from '@react-navigation/native';\nimport { useRestaurantConfig } from '../../hooks/useRestaurantConfig';\n\nconst Colors = {\n  primary: '#00A651',\n  secondary: '#0066CC',\n  success: '#00A651',\n  warning: '#FF6B35',\n  danger: '#E74C3C',\n  background: '#F5F5F5',\n  white: '#FFFFFF',\n  lightGray: '#E5E5E5',\n  mediumGray: '#999999',\n  darkGray: '#666666',\n  text: '#333333',\n  lightText: '#666666',\n  border: '#DDDDDD',\n};\n\ninterface RestaurantFormData {\n  restaurantName: string;\n  displayName: string;\n  businessType: string;\n  phone: string;\n  email: string;\n  street: string;\n  city: string;\n  state: string;\n  zipCode: string;\n  country: string;\n}\n\nconst RestaurantSetupScreen: React.FC = () => {\n  const navigation = useNavigation();\n  const { updateConfig, completeSetupStep } = useRestaurantConfig();\n\n  const [formData, setFormData] = useState<RestaurantFormData>({\n    restaurantName: '',\n    displayName: '',\n    businessType: 'Restaurant',\n    phone: '',\n    email: '',\n    street: '',\n    city: '',\n    state: '',\n    zipCode: '',\n    country: 'United Kingdom',\n  });\n\n  const [currentStep, setCurrentStep] = useState(1);\n  const [loading, setLoading] = useState(__false);\n\n  const businessTypes = [\n    'Restaurant',\n    'Fast Food',\n    'Cafe',\n    'Bar & Pub',\n    'Food Truck',\n    'Bakery',\n    'Pizzeria',\n    'Bistro',\n    'Fine Dining',\n    'Other',\n  ];\n\n  const updateField = (field: keyof RestaurantFormData, value: _string) => {\n    setFormData(prev => {\n      const updated = { ...prev, [field]: value };\n\n      // Auto-generate display name from restaurant name if not manually set\n      if (field === 'restaurantName' && !prev.displayName) {\n        updated.displayName = value;\n      }\n\n      return updated;\n    });\n  };\n\n  const validateStep = (_step: _number): boolean => {\n    switch (__step) {\n      case 1:\n        return !!(formData.restaurantName && formData.displayName && formData.businessType);\n      case 2:\n        return !!(formData.phone && formData.email);\n      case 3:\n        return !!(formData.street && formData.city && formData.zipCode);\n      default:\n        return true;\n    }\n  };\n\n  const nextStep = () => {\n    if (!validateStep(__currentStep)) {\n      Alert.alert('Missing Information', 'Please fill in all required fields before continuing.');\n      return;\n    }\n\n    if (currentStep < 3) {\n      setCurrentStep(currentStep + 1);\n    } else {\n      saveRestaurantInfo();\n    }\n  };\n\n  const prevStep = () => {\n    if (currentStep > 1) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  const saveRestaurantInfo = async () => {\n    try {\n      setLoading(__true);\n\n      await updateConfig({\n        restaurantName: formData.restaurantName,\n        displayName: formData.displayName,\n        businessType: formData.businessType,\n        phone: formData.phone,\n        email: formData.email,\n        address: {\n          street: formData.street,\n          city: formData.city,\n          state: formData.state,\n          zipCode: formData.zipCode,\n          country: formData.country,\n        },\n      });\n\n      await completeSetupStep('restaurantInfo');\n\n      Alert.alert(\n        'Setup Complete!',\n        'Your restaurant information has been saved successfully. Your restaurant name will now appear throughout the app.',\n        [\n          {\n            text: 'Configure Menu',\n            onPress: () => navigation.navigate('SettingsMenuManagement' as never),\n          },\n          {\n            text: 'Back to Settings',\n            onPress: () => navigation.navigate('SettingsMain' as never),\n          },\n        ],\n      );\n    } catch (__error) {\n      Alert.alert('Error', 'Failed to save restaurant information. Please try again.');\n    } finally {\n      setLoading(__false);\n    }\n  };\n\n  const renderStepIndicator = () => (\n    <View style={styles.stepIndicator}>\n      {[1, 2, 3].map(step => (\n        <View key={step} style={styles.stepIndicatorItem}>\n          <View\n            style={[\n              styles.stepCircle,\n              currentStep >= step && styles.stepCircleActive,\n              currentStep > step && styles.stepCircleCompleted,\n            ]}>\n            {currentStep > step ? (\n              <Icon name=\"check\" size={16} color={Colors.white} />\n            ) : (\n              <Text style={[styles.stepNumber, currentStep >= step && styles.stepNumberActive]}>\n                {step}\n              </Text>\n            )}\n          </View>\n          {step < 3 && (\n            <View style={[styles.stepLine, currentStep > step && styles.stepLineCompleted]} />\n          )}\n        </View>\n      ))}\n    </View>\n  );\n\n  const renderStep1 = () => (\n    <View style={styles.stepContent}>\n      <Text style={styles.stepTitle}>Restaurant Information</Text>\n      <Text style={styles.stepDescription}>\n        Let's start with basic information about your restaurant\n      </Text>\n\n      <View style={styles.inputGroup}>\n        <Text style={styles.inputLabel}>Restaurant Name *</Text>\n        <TextInput\n          style={styles.textInput}\n          value={formData.restaurantName}\n          onChangeText={_value => updateField('restaurantName', _value)}\n          placeholder=\"e.g., Maria's Mexican Kitchen\"\n          placeholderTextColor={Colors.mediumGray}\n        />\n      </View>\n\n      <View style={styles.inputGroup}>\n        <Text style={styles.inputLabel}>Display Name *</Text>\n        <Text style={styles.inputHint}>This is what appears in your POS headers</Text>\n        <TextInput\n          style={styles.textInput}\n          value={formData.displayName}\n          onChangeText={_value => updateField('displayName', _value)}\n          placeholder=\"e.g., Maria's Kitchen\"\n          placeholderTextColor={Colors.mediumGray}\n        />\n      </View>\n\n      <View style={styles.inputGroup}>\n        <Text style={styles.inputLabel}>Business Type *</Text>\n        <ScrollView\n          horizontal\n          showsHorizontalScrollIndicator={false}\n          style={styles.businessTypeScroll}>\n          {businessTypes.map(type => (\n            <TouchableOpacity\n              key={type}\n              style={[\n                styles.businessTypeButton,\n                formData.businessType === type && styles.businessTypeButtonActive,\n              ]}\n              onPress={() => updateField('businessType', _type)}>\n              <Text\n                style={[\n                  styles.businessTypeText,\n                  formData.businessType === type && styles.businessTypeTextActive,\n                ]}>\n                {type}\n              </Text>\n            </TouchableOpacity>\n          ))}\n        </ScrollView>\n      </View>\n    </View>\n  );\n\n  const renderStep2 = () => (\n    <View style={styles.stepContent}>\n      <Text style={styles.stepTitle}>Contact Information</Text>\n      <Text style={styles.stepDescription}>How can customers and Fynlo support reach you?</Text>\n\n      <View style={styles.inputGroup}>\n        <Text style={styles.inputLabel}>Phone Number *</Text>\n        <TextInput\n          style={styles.textInput}\n          value={formData.phone}\n          onChangeText={_value => updateField('phone', _value)}\n          placeholder=\"+44 20 1234 5678\"\n          placeholderTextColor={Colors.mediumGray}\n          keyboardType=\"phone-pad\"\n        />\n      </View>\n\n      <View style={styles.inputGroup}>\n        <Text style={styles.inputLabel}>Email Address *</Text>\n        <TextInput\n          style={styles.textInput}\n          value={formData.email}\n          onChangeText={_value => updateField('email', _value)}\n          placeholder=\"owner@mariaskitchen.co.uk\"\n          placeholderTextColor={Colors.mediumGray}\n          keyboardType=\"email-address\"\n          autoCapitalize=\"none\"\n        />\n      </View>\n    </View>\n  );\n\n  const renderStep3 = () => (\n    <View style={styles.stepContent}>\n      <Text style={styles.stepTitle}>Restaurant Location</Text>\n      <Text style={styles.stepDescription}>\n        Your restaurant's physical address for deliveries and customers\n      </Text>\n\n      <View style={styles.inputGroup}>\n        <Text style={styles.inputLabel}>Street Address *</Text>\n        <TextInput\n          style={styles.textInput}\n          value={formData.street}\n          onChangeText={_value => updateField('street', _value)}\n          placeholder=\"123 High Street\"\n          placeholderTextColor={Colors.mediumGray}\n        />\n      </View>\n\n      <View style={styles.inputRow}>\n        <View style={[styles.inputGroup, { flex: 2 }]}>\n          <Text style={styles.inputLabel}>City *</Text>\n          <TextInput\n            style={styles.textInput}\n            value={formData.city}\n            onChangeText={_value => updateField('city', _value)}\n            placeholder=\"London\"\n            placeholderTextColor={Colors.mediumGray}\n          />\n        </View>\n\n        <View style={[styles.inputGroup, { flex: 1, marginLeft: 12 }]}>\n          <Text style={styles.inputLabel}>Postcode *</Text>\n          <TextInput\n            style={styles.textInput}\n            value={formData.zipCode}\n            onChangeText={_value => updateField('zipCode', _value)}\n            placeholder=\"SW1A 1AA\"\n            placeholderTextColor={Colors.mediumGray}\n            autoCapitalize=\"characters\"\n          />\n        </View>\n      </View>\n\n      <View style={styles.inputRow}>\n        <View style={[styles.inputGroup, { flex: 1 }]}>\n          <Text style={styles.inputLabel}>County/State</Text>\n          <TextInput\n            style={styles.textInput}\n            value={formData.state}\n            onChangeText={_value => updateField('state', _value)}\n            placeholder=\"Greater London\"\n            placeholderTextColor={Colors.mediumGray}\n          />\n        </View>\n\n        <View style={[styles.inputGroup, { flex: 1, marginLeft: 12 }]}>\n          <Text style={styles.inputLabel}>Country</Text>\n          <TextInput\n            style={[styles.textInput, styles.textInputDisabled]}\n            value={formData.country}\n            editable={false}\n            placeholder=\"United Kingdom\"\n            placeholderTextColor={Colors.mediumGray}\n          />\n        </View>\n      </View>\n    </View>\n  );\n\n  const renderCurrentStep = () => {\n    switch (__currentStep) {\n      case 1:\n        return renderStep1();\n      case 2:\n        return renderStep2();\n      case 3:\n        return renderStep3();\n      default:\n        return renderStep1();\n    }\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <StatusBar backgroundColor={Colors.primary} barStyle=\"light-content\" />\n\n      {/* Header */}\n      <View style={styles.header}>\n        <TouchableOpacity\n          style={styles.backButton}\n          onPress={() => navigation.goBack()}\n          testID=\"back-button\">\n          <Icon name=\"arrow-back\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n\n        <View style={styles.headerCenter}>\n          <Text style={styles.headerTitle}>Restaurant Setup</Text>\n          <Text style={styles.headerSubtitle}>Step {currentStep} of 3</Text>\n        </View>\n\n        <View style={styles.headerSpacer} />\n      </View>\n\n      <KeyboardAvoidingView\n        style={styles.content}\n        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}>\n        {renderStepIndicator()}\n\n        <ScrollView\n          style={styles.scrollContainer}\n          showsVerticalScrollIndicator={false}\n          keyboardShouldPersistTaps=\"handled\">\n          {renderCurrentStep()}\n        </ScrollView>\n\n        {/* Navigation Buttons */}\n        <View style={styles.navigationBar}>\n          {currentStep > 1 && (\n            <TouchableOpacity style={styles.prevButton} onPress={prevStep}>\n              <Icon name=\"arrow-back\" size={20} color={Colors.darkGray} />\n              <Text style={styles.prevButtonText}>Previous</Text>\n            </TouchableOpacity>\n          )}\n\n          <View style={styles.navigationSpacer} />\n\n          <TouchableOpacity\n            style={[styles.nextButton, !validateStep(__currentStep) && styles.nextButtonDisabled]}\n            onPress={nextStep}\n            disabled={loading || !validateStep(__currentStep)}>\n            <Text style={styles.nextButtonText}>\n              {loading ? 'Saving...' : currentStep === 3 ? 'Complete Setup' : 'Next'}\n            </Text>\n            {!loading && (\n              <Icon\n                name={currentStep === 3 ? 'check' : 'arrow-forward'}\n                size={20}\n                color={Colors.white}\n              />\n            )}\n          </TouchableOpacity>\n        </View>\n      </KeyboardAvoidingView>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.primary,\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    height: 70,\n  },\n  backButton: {\n    padding: 8,\n  },\n  headerCenter: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  headerTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.white,\n  },\n  headerSubtitle: {\n    fontSize: 12,\n    color: 'rgba(255, 255, 255, 0.8)',\n    marginTop: 2,\n  },\n  headerSpacer: {\n    width: 40,\n  },\n  content: {\n    flex: 1,\n  },\n  stepIndicator: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingVertical: 24,\n    backgroundColor: Colors.white,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  stepIndicatorItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  stepCircle: {\n    width: 32,\n    height: 32,\n    borderRadius: 16,\n    backgroundColor: Colors.lightGray,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderWidth: 2,\n    borderColor: Colors.mediumGray,\n  },\n  stepCircleActive: {\n    backgroundColor: Colors.primary,\n    borderColor: Colors.primary,\n  },\n  stepCircleCompleted: {\n    backgroundColor: Colors.success,\n    borderColor: Colors.success,\n  },\n  stepNumber: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: Colors.mediumGray,\n  },\n  stepNumberActive: {\n    color: Colors.white,\n  },\n  stepLine: {\n    width: 40,\n    height: 2,\n    backgroundColor: Colors.lightGray,\n    marginHorizontal: 8,\n  },\n  stepLineCompleted: {\n    backgroundColor: Colors.success,\n  },\n  scrollContainer: {\n    flex: 1,\n  },\n  stepContent: {\n    padding: 24,\n  },\n  stepTitle: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: Colors.text,\n    marginBottom: 8,\n  },\n  stepDescription: {\n    fontSize: 16,\n    color: Colors.darkGray,\n    marginBottom: 32,\n    lineHeight: 22,\n  },\n  inputGroup: {\n    marginBottom: 24,\n  },\n  inputRow: {\n    flexDirection: 'row',\n  },\n  inputLabel: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 8,\n  },\n  inputHint: {\n    fontSize: 12,\n    color: Colors.mediumGray,\n    marginBottom: 8,\n    fontStyle: 'italic',\n  },\n  textInput: {\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 8,\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    fontSize: 16,\n    color: Colors.text,\n    backgroundColor: Colors.white,\n  },\n  textInputDisabled: {\n    backgroundColor: Colors.lightGray,\n    color: Colors.mediumGray,\n  },\n  businessTypeScroll: {\n    marginTop: 8,\n  },\n  businessTypeButton: {\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    borderRadius: 20,\n    backgroundColor: Colors.lightGray,\n    marginRight: 8,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  businessTypeButtonActive: {\n    backgroundColor: Colors.primary,\n    borderColor: Colors.primary,\n  },\n  businessTypeText: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.darkGray,\n  },\n  businessTypeTextActive: {\n    color: Colors.white,\n  },\n  navigationBar: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 24,\n    paddingVertical: 16,\n    backgroundColor: Colors.white,\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n  },\n  prevButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    borderRadius: 8,\n    backgroundColor: Colors.lightGray,\n  },\n  prevButtonText: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.darkGray,\n    marginLeft: 8,\n  },\n  navigationSpacer: {\n    flex: 1,\n  },\n  nextButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 24,\n    paddingVertical: 12,\n    borderRadius: 8,\n    backgroundColor: Colors.primary,\n  },\n  nextButtonDisabled: {\n    backgroundColor: Colors.mediumGray,\n  },\n  nextButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.white,\n    marginRight: 8,\n  },\n});\n\nexport default RestaurantSetupScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/onboarding/__tests__/ComprehensiveRestaurantOnboardingScreen.integration.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_getByText' is assigned a value but never used.","line":131,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":131,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_restaurantNameInput' is assigned a value but never used.","line":141,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":141,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_displayNameInput' is assigned a value but never used.","line":145,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":145,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_nextButton' is assigned a value but never used.","line":152,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":152,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_phoneInput' is assigned a value but never used.","line":162,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":162,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_emailInput' is assigned a value but never used.","line":166,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":166,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_streetInput' is assigned a value but never used.","line":182,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":182,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_cityInput' is assigned a value but never used.","line":185,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":185,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_postcodeInput' is assigned a value but never used.","line":188,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":188,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_ownerNameInput' is assigned a value but never used.","line":199,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":199,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_ownerEmailInput' is assigned a value but never used.","line":202,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":202,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_sortCodeInput' is assigned a value but never used.","line":261,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":261,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_accountNumberInput' is assigned a value but never used.","line":264,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":264,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_accountNameInput' is assigned a value but never used.","line":267,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":267,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_completeButton' is assigned a value but never used.","line":286,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":286,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_body' is assigned a value but never used.","line":305,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":305,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_getByText' is assigned a value but never used.","line":382,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":382,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_getByPlaceholderText' is assigned a value but never used.","line":458,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":458,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_getByText' is assigned a value but never used.","line":585,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":585,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_getByText' is assigned a value but never used.","line":637,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":637,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_getByText' is assigned a value but never used.","line":719,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":719,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_getByText' is assigned a value but never used.","line":790,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":790,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_nameInput' is assigned a value but never used.","line":795,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":795,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_displayInput' is assigned a value but never used.","line":796,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":796,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_getByPlaceholderText' is assigned a value but never used.","line":820,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":820,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_nextButton' is assigned a value but never used.","line":830,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":830,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_getByText' is assigned a value but never used.","line":856,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":856,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_payload' is assigned a value but never used.","line":940,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":940,"endColumn":23}],"suppressedMessages":[],"errorCount":28,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Comprehensive Integration Tests for Restaurant Onboarding Flow\n * Tests the complete user journey from start to finish, mimicking real user behavior\n */\n\nimport React from 'react';\nimport { fireEvent, waitFor } from '@testing-library/react-native';\nimport { Alert } from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { renderWithProviders } from '../../../test-utils';\nimport ComprehensiveRestaurantOnboardingScreen from '../ComprehensiveRestaurantOnboardingScreen';\n\n// Mock fetch for API calls\nglobal.fetch = jest.fn();\n\n// Mock navigation\nconst _mockNavigate = jest.fn();\nconst _mockReset = jest.fn();\njest.mock('@react-navigation/native', () => ({\n  ...jest.requireActual('@react-navigation/native'),\n  useNavigation: () => ({\n    navigate: _mockNavigate,\n    goBack: jest.fn(),\n    setOptions: jest.fn(),\n    reset: _mockReset,\n  }),\n}));\n\n// Mock dependencies\njest.mock('../../../services/DataService', () => ({\n  DataService: {\n    getInstance: jest.fn(() => ({\n      validateBusinessEmail: jest.fn().mockResolvedValue({ isValid: true }),\n      completeOnboarding: jest.fn().mockResolvedValue({ success: true }),\n    })),\n  },\n}));\n\njest.mock('../../../store/useAuthStore', () => {\n  const mockState = {\n    user: { id: 'test-user' },\n    isAuthenticated: _false,\n    isLoading: _false,\n    updateUser: jest.fn(),\n    checkAuth: jest.fn().mockResolvedValue(__true),\n    signIn: jest.fn(),\n    signOut: jest.fn(),\n  };\n\n  const useAuthStore = jest.fn(selector => {\n    return selector ? selector(__mockState) : mockState;\n  });\n\n  // Add getState method\n  useAuthStore.getState = () => mockState;\n\n  return {\n    __esModule: _true,\n    useAuthStore,\n    default: _useAuthStore,\n  };\n});\n\n// Mock useAppStore\njest.mock('../../../store/useAppStore', () => ({\n  __esModule: _true,\n  default: jest.fn(selector => {\n    const state = {\n      currentOrder: _null,\n      activeRestaurant: _null,\n      setActiveRestaurant: jest.fn(),\n    };\n    return selector ? selector(__state) : state;\n  }),\n}));\n\n// Mock Alert\nconst mockAlert = jest.fn();\nAlert.alert = mockAlert;\n\n// Mock AsyncStorage properly\njest.mock('@react-native-async-storage/async-storage', () => ({\n  getItem: jest.fn(),\n  setItem: jest.fn(),\n  removeItem: jest.fn(),\n  clear: jest.fn(),\n}));\n\n// Mock Keyboard\njest.mock('react-native/Libraries/Components/Keyboard/Keyboard', () => ({\n  dismiss: jest.fn(),\n  addListener: jest.fn(() => ({ remove: jest.fn() })),\n  removeListener: jest.fn(),\n  removeAllListeners: jest.fn(),\n}));\n\ndescribe('ComprehensiveRestaurantOnboardingScreen - Complete User Journey', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    mockAlert.mockClear();\n    (fetch as jest.Mock).mockClear();\n    (AsyncStorage.getItem as jest.Mock).mockResolvedValue('test-auth-token');\n    (AsyncStorage.setItem as jest.Mock).mockResolvedValue(__undefined);\n  });\n\n  afterEach(() => {\n    jest.restoreAllMocks();\n  });\n\n  describe('Complete 9-Step Onboarding Process', () => {\n    it('should complete the entire onboarding flow as a new user would - testing all 9 steps', async () => {\n      // Mock successful API response for onboarding completion\n      (fetch as jest.Mock).mockImplementation(url => {\n        if (url.includes('/restaurants/onboarding/create')) {\n          return Promise.resolve({\n            ok: _true,\n            json: async () => ({\n              restaurant_id: 'rest-123',\n              success: _true,\n              data: {\n                id: 'rest-123',\n                name: \"Maria's Mexican Kitchen\",\n                status: 'active',\n              },\n            }),\n          });\n        }\n        return Promise.reject(new Error('Unknown API endpoint'));\n      });\n\n      const { getByTestId, _getByText, getByPlaceholderText, queryByText } = renderWithProviders(\n        <ComprehensiveRestaurantOnboardingScreen />,\n      );\n\n      // Step 1: Restaurant Information\n      expect(getByText('Restaurant Setup')).toBeTruthy();\n      expect(getByText('Restaurant Information')).toBeTruthy();\n      expect(getByText('Step 1 of 9')).toBeTruthy();\n\n      // Fill restaurant name - mimicking user typing\n      const _restaurantNameInput = getByPlaceholderText(\"e.g., Maria's Mexican Kitchen\");\n      fireEvent.changeText(__restaurantNameInput, \"Maria's Mexican Kitchen\");\n\n      // Fill display name\n      const _displayNameInput = getByPlaceholderText(\"e.g., Maria's Kitchen\");\n      fireEvent.changeText(__displayNameInput, \"Maria's Kitchen\");\n\n      // Select business type\n      fireEvent.press(getByText('Restaurant'));\n\n      // Navigate to next step\n      const _nextButton = getByTestId('next-step-button');\n      fireEvent.press(__nextButton);\n\n      // Step 2: Contact Information\n      await waitFor(() => {\n        expect(getByText('Contact Information')).toBeTruthy();\n        expect(getByText('Step 2 of 9')).toBeTruthy();\n      });\n\n      // Fill phone number\n      const _phoneInput = getByPlaceholderText('+44 20 1234 5678');\n      fireEvent.changeText(__phoneInput, '+44 20 7946 0958');\n\n      // Fill email with proper validation\n      const _emailInput = getByPlaceholderText('owner@mariaskitchen.co.uk');\n      fireEvent.changeText(__emailInput, 'owner@mariaskitchen.co.uk');\n\n      // Trigger blur to validate email (mimicking real user behavior)\n      fireEvent(__emailInput, 'blur');\n\n      // Email validation is done locally, no API call expected\n\n      fireEvent.press(getByTestId('next-step-button'));\n\n      // Step 3: Restaurant Location\n      await waitFor(() => {\n        expect(getByText('Restaurant Location')).toBeTruthy();\n        expect(getByText('Step 3 of 9')).toBeTruthy();\n      });\n\n      const _streetInput = getByTestId('address-street');\n      fireEvent.changeText(__streetInput, '123 High Street');\n\n      const _cityInput = getByTestId('address-city');\n      fireEvent.changeText(__cityInput, 'London');\n\n      const _postcodeInput = getByTestId('address-postcode');\n      fireEvent.changeText(__postcodeInput, 'SW1A 1AA');\n\n      fireEvent.press(getByTestId('next-step-button'));\n\n      // Step 4: Owner Information\n      await waitFor(() => {\n        expect(getByText('Owner Information')).toBeTruthy();\n        expect(getByText('Step 4 of 9')).toBeTruthy();\n      });\n\n      const _ownerNameInput = getByPlaceholderText('Maria Rodriguez');\n      fireEvent.changeText(__ownerNameInput, 'Maria Rodriguez');\n\n      const _ownerEmailInput = getByPlaceholderText('owner@restaurant.com');\n      fireEvent.changeText(__ownerEmailInput, 'maria@mariaskitchen.co.uk');\n\n      fireEvent.press(getByTestId('next-step-button'));\n\n      // Step 5: Business Hours\n      await waitFor(() => {\n        expect(getByText('Business Hours')).toBeTruthy();\n        expect(getByText('Step 5 of 9')).toBeTruthy();\n      });\n\n      // Business Hours has no skip button - just use default hours and click Next\n      fireEvent.press(getByTestId('next-step-button'));\n\n      // Step 6: Employee Management\n      await waitFor(() => {\n        expect(getByText('Employee Management')).toBeTruthy();\n        expect(getByText('Step 6 of 9')).toBeTruthy();\n      });\n\n      // Employee Management has no skip button - just click Next\n      fireEvent.press(getByTestId('next-step-button'));\n\n      // Step 7: Menu Setup\n      await waitFor(() => {\n        expect(getByText('Menu Setup')).toBeTruthy();\n        expect(getByText('Step 7 of 9')).toBeTruthy();\n      });\n\n      // Test skip functionality - menu can be skipped\n      expect(queryByText('Skip for Now')).toBeTruthy();\n      fireEvent.press(getByText('Skip for Now'));\n\n      // Handle skip alert\n      await waitFor(() => {\n        expect(Alert.alert).toHaveBeenCalledWith(\n          'Skip Menu Setup?',\n          'You can always add your menu later from the Settings menu.',\n          expect.any(__Array),\n        );\n      });\n\n      // Simulate pressing Skip in the alert\n      const alertCalls = mockAlert.mock.calls;\n      const alertCall = alertCalls[alertCalls.length - 1];\n      const skipButton = alertCall[2].find((btn: _unknown) => btn.text === 'Skip');\n      skipButton.onPress();\n\n      // Step 8: Bank Details - CANNOT BE SKIPPED\n      await waitFor(() => {\n        expect(getByText('Bank Details')).toBeTruthy();\n        expect(getByText('Step 8 of 9')).toBeTruthy();\n      });\n\n      // Verify skip button is NOT available for bank details\n      expect(queryByText('Skip')).toBeNull();\n      expect(queryByText('Skip for Now')).toBeNull();\n\n      // Fill bank details (__required)\n      const _sortCodeInput = getByPlaceholderText('00-00-00');\n      fireEvent.changeText(__sortCodeInput, '12-34-56');\n\n      const _accountNumberInput = getByPlaceholderText('12345678');\n      fireEvent.changeText(__accountNumberInput, '12345678');\n\n      const _accountNameInput = getByPlaceholderText('Your Restaurant Ltd');\n      fireEvent.changeText(__accountNameInput, \"Maria's Mexican Kitchen Ltd\");\n\n      fireEvent.press(getByTestId('next-step-button'));\n\n      // Step 9: Review & Complete\n      await waitFor(() => {\n        expect(getByText('Review & Complete')).toBeTruthy();\n        expect(getByText('Step 9 of 9')).toBeTruthy();\n      });\n\n      // Verify review shows all entered data\n      expect(getByText(\"Maria's Mexican Kitchen\")).toBeTruthy();\n      expect(getByText('+44 20 7946 0958 • owner@mariaskitchen.co.uk')).toBeTruthy();\n      expect(getByText('123 High Street, London SW1A 1AA')).toBeTruthy();\n      expect(getByText('Maria Rodriguez')).toBeTruthy();\n      // Note: Bank details are not shown in the review section\n\n      // Complete setup\n      const _completeButton = getByTestId('complete-setup-button');\n      fireEvent.press(__completeButton);\n\n      // Verify final API call with complete payload\n      await waitFor(() => {\n        const apiCalls = (fetch as jest.Mock).mock.calls;\n        const completeCall = apiCalls.find(call =>\n          call[0].includes('/restaurants/onboarding/create'),\n        );\n\n        expect(__completeCall).toBeTruthy();\n        expect(completeCall[1]).toMatchObject({\n          method: 'POST',\n          headers: {\n            Authorization: 'Bearer test-auth-token',\n            'Content-Type': 'application/json',\n          },\n        });\n\n        const _body = JSON.parse(completeCall[1].body);\n        expect(__body).toMatchObject({\n          name: 'Marias Mexican Kitchen', // Sanitized (apostrophe removed)\n          display_name: 'Marias Kitchen', // Sanitized\n          business_type: 'Restaurant',\n          phone: '+44 20 7946 0958',\n          email: 'owner@mariaskitchen.co.uk',\n          address: {\n            street: '123 High Street',\n            city: 'London',\n            zipCode: 'SW1A 1AA', // API uses zipCode, not postcode\n          },\n          owner_info: {\n            // Nested structure\n            name: 'Maria Rodriguez',\n            email: 'maria@mariaskitchen.co.uk',\n          },\n          bank_details: {\n            sort_code: '123456', // Without dashes\n            account_number: '12345678',\n            account_name: 'Marias Mexican Kitchen Ltd', // Sanitized\n          },\n        });\n      });\n\n      // Verify success alert\n      await waitFor(() => {\n        expect(Alert.alert).toHaveBeenCalledWith(\n          'Onboarding Complete! 🎉',\n          expect.stringContaining(\"Welcome to Fynlo, Maria's Mexican Kitchen!\"),\n          expect.any(__Array),\n        );\n      });\n\n      // Simulate clicking \"Start Using POS\"\n      const successAlertCall = mockAlert.mock.calls.find(\n        call => call[0] === 'Onboarding Complete! 🎉',\n      );\n      const startButton = successAlertCall[2].find(\n        (btn: _unknown) => btn.text === 'Start Using POS',\n      );\n      startButton.onPress();\n\n      // Verify navigation to main app\n      await waitFor(() => {\n        expect(__mockReset).toHaveBeenCalledWith({\n          index: 0,\n          routes: [{ name: 'Main' }],\n        });\n      });\n\n      // Verify AsyncStorage was updated\n      expect(AsyncStorage.setItem).toHaveBeenCalledWith('restaurant_id', 'rest-123');\n      expect(AsyncStorage.setItem).toHaveBeenCalledWith('needs_onboarding', 'false');\n    });\n\n    it('should handle \"Not Found\" error during onboarding completion', async () => {\n      // Mock 404 Not Found error response\n      (fetch as jest.Mock).mockImplementation(url => {\n        if (url.includes('/restaurants/onboarding/create')) {\n          return Promise.resolve({\n            ok: _false,\n            status: 404,\n            statusText: 'Not Found',\n            json: async () => ({\n              error: 'Not Found',\n              message: 'The requested endpoint was not found',\n              detail: 'POST /api/v1/restaurants/onboarding/create not found',\n            }),\n          });\n        }\n        return Promise.resolve({\n          ok: _true,\n          json: async () => ({ is_valid: true }),\n        });\n      });\n\n      const { getByTestId, _getByText, getByPlaceholderText } = renderWithProviders(\n        <ComprehensiveRestaurantOnboardingScreen />,\n      );\n\n      // Quick fill all required fields to get to final step\n      // Step 1\n      fireEvent.changeText(\n        getByPlaceholderText(\"e.g., Maria's Mexican Kitchen\"),\n        'Test Restaurant',\n      );\n      fireEvent.changeText(getByPlaceholderText(\"e.g., Maria's Kitchen\"), 'Test');\n      fireEvent.press(getByText('Restaurant'));\n      fireEvent.press(getByTestId('next-step-button'));\n\n      // Step 2\n      await waitFor(() => getByText('Contact Information'));\n      fireEvent.changeText(getByPlaceholderText('+44 20 1234 5678'), '+44 20 7946 0958');\n      fireEvent.changeText(getByPlaceholderText('owner@mariaskitchen.co.uk'), 'test@test.com');\n      fireEvent.press(getByTestId('next-step-button'));\n\n      // Step 3\n      await waitFor(() => getByText('Restaurant Location'));\n      fireEvent.changeText(getByTestId('address-street'), '123 Test St');\n      fireEvent.changeText(getByTestId('address-city'), 'London');\n      fireEvent.changeText(getByTestId('address-postcode'), 'SW1A 1AA');\n      fireEvent.press(getByTestId('next-step-button'));\n\n      // Step 4\n      await waitFor(() => getByText('Owner Information'));\n      fireEvent.changeText(getByPlaceholderText('Maria Rodriguez'), 'Test Owner');\n      fireEvent.changeText(getByPlaceholderText('owner@restaurant.com'), 'owner@test.com');\n      fireEvent.press(getByTestId('next-step-button'));\n\n      // Skip steps 5-7\n      // Step 5 - Business Hours\n      await waitFor(() => getByText('Business Hours'));\n      fireEvent.press(getByTestId('next-step-button'));\n\n      // Step 6 - Employee Management\n      await waitFor(() => getByText('Employee Management'));\n      fireEvent.press(getByTestId('next-step-button'));\n\n      // Step 7 - Menu Setup (has Skip for Now button)\n      await waitFor(() => getByText('Skip for Now'));\n      fireEvent.press(getByText('Skip for Now'));\n      const alertCalls = mockAlert.mock.calls;\n      const alertCall = alertCalls[alertCalls.length - 1];\n      alertCall[2].find((btn: _unknown) => btn.text === 'Skip').onPress();\n\n      // Step 8 - Bank Details (__required)\n      await waitFor(() => getByText('Bank Details'));\n      fireEvent.changeText(getByPlaceholderText('00-00-00'), '12-34-56');\n      fireEvent.changeText(getByPlaceholderText('12345678'), '12345678');\n      fireEvent.changeText(getByPlaceholderText('Your Restaurant Ltd'), 'Test Ltd');\n      fireEvent.press(getByTestId('next-step-button'));\n\n      // Step 9 - Complete\n      await waitFor(() => getByTestId('complete-setup-button'));\n      fireEvent.press(getByTestId('complete-setup-button'));\n\n      // Verify error alert is shown with proper message\n      await waitFor(() => {\n        const errorAlerts = mockAlert.mock.calls.filter(call => call[0] === 'Error');\n        expect(errorAlerts.length).toBeGreaterThan(0);\n        const lastErrorAlert = errorAlerts[errorAlerts.length - 1];\n        expect(lastErrorAlert[1]).toContain('POST /api/v1/restaurants/onboarding/create not found');\n      });\n\n      // Verify we didn't navigate away (still on review step)\n      expect(__mockReset).not.toHaveBeenCalled();\n      expect(getByText('Review & Complete')).toBeTruthy();\n    });\n  });\n\n  describe('Skip Functionality', () => {\n    it('should properly handle skip scenarios - only menu setup has skip button, bank details cannot be skipped', async () => {\n      const { getByText, _getByPlaceholderText, getByTestId, queryByText } = renderWithProviders(\n        <ComprehensiveRestaurantOnboardingScreen />,\n      );\n\n      // Navigate through required steps\n      // Step 1 - Required\n      fireEvent.changeText(getByPlaceholderText(\"e.g., Maria's Mexican Kitchen\"), 'Test');\n      fireEvent.changeText(getByPlaceholderText(\"e.g., Maria's Kitchen\"), 'Test');\n      fireEvent.press(getByText('Restaurant'));\n      fireEvent.press(getByTestId('next-step-button'));\n\n      // Step 2 - Required (no skip)\n      await waitFor(() => getByText('Contact Information'));\n      expect(queryByText('Skip')).toBeNull();\n      expect(queryByText('Skip for Now')).toBeNull();\n      fireEvent.changeText(getByPlaceholderText('+44 20 1234 5678'), '+44 20 7946 0958');\n      fireEvent.changeText(getByPlaceholderText('owner@mariaskitchen.co.uk'), 'test@test.com');\n      fireEvent.press(getByTestId('next-step-button'));\n\n      // Step 3 - Required (no skip)\n      await waitFor(() => getByText('Restaurant Location'));\n      expect(queryByText('Skip')).toBeNull();\n      expect(queryByText('Skip for Now')).toBeNull();\n      fireEvent.changeText(getByTestId('address-street'), '123 Test St');\n      fireEvent.changeText(getByTestId('address-city'), 'London');\n      fireEvent.changeText(getByTestId('address-postcode'), 'SW1A 1AA');\n      fireEvent.press(getByTestId('next-step-button'));\n\n      // Step 4 - Required (no skip)\n      await waitFor(() => getByText('Owner Information'));\n      expect(queryByText('Skip')).toBeNull();\n      expect(queryByText('Skip for Now')).toBeNull();\n      fireEvent.changeText(getByPlaceholderText('Maria Rodriguez'), 'Test Owner');\n      fireEvent.changeText(getByPlaceholderText('owner@restaurant.com'), 'owner@test.com');\n      fireEvent.press(getByTestId('next-step-button'));\n\n      // Step 5 - Hours (optional - has Next but can use defaults)\n      await waitFor(() => getByText('Business Hours'));\n      expect(getByTestId('next-step-button')).toBeTruthy();\n      fireEvent.press(getByTestId('next-step-button'));\n\n      // Step 6 - Employees (optional - has Next button, no Skip)\n      await waitFor(() => getByText('Employee Management'));\n      expect(getByTestId('next-step-button')).toBeTruthy();\n      fireEvent.press(getByTestId('next-step-button'));\n\n      // Step 7 - Menu (optional - has Skip for Now)\n      await waitFor(() => getByText('Menu Setup'));\n      expect(getByText('Skip for Now')).toBeTruthy();\n      fireEvent.press(getByText('Skip for Now'));\n\n      // Handle alert\n      await waitFor(() => expect(Alert.alert).toHaveBeenCalled());\n      const alertCalls = mockAlert.mock.calls;\n      const alertCall = alertCalls[alertCalls.length - 1];\n      alertCall[2].find((btn: _unknown) => btn.text === 'Skip').onPress();\n\n      // Step 8 - Bank Details (REQUIRED - NO SKIP)\n      await waitFor(() => getByText('Bank Details'));\n      expect(queryByText('Skip')).toBeNull();\n      expect(queryByText('Skip for Now')).toBeNull();\n\n      // Must fill bank details to proceed\n      expect(getByTestId('next-step-button')).toBeTruthy();\n    });\n  });\n\n  describe('Dictation/Speech Input Support', () => {\n    it('should support dictation for all text inputs', async () => {\n      const { getByPlaceholderText, getByTestId } = renderWithProviders(\n        <ComprehensiveRestaurantOnboardingScreen />,\n      );\n\n      // Test restaurant name input supports dictation\n      const nameInput = getByPlaceholderText(\"e.g., Maria's Mexican Kitchen\");\n\n      // Verify text input properties that enable dictation\n      expect(nameInput.props.autoCorrect).not.toBe(__false);\n      expect(nameInput.props.autoComplete).not.toBe('off');\n      expect(nameInput.props.keyboardType).not.toBe('visible-password');\n      expect(nameInput.props.secureTextEntry).not.toBe(__true);\n\n      // Simulate dictation input (in real app, this comes from speech recognition)\n      fireEvent.changeText(__nameInput, \"Maria's Mexican Kitchen\");\n      expect(nameInput.props.value).toBe(\"Maria's Mexican Kitchen\");\n\n      // Test that all inputs are dictation-friendly\n      const displayNameInput = getByPlaceholderText(\"e.g., Maria's Kitchen\");\n      expect(displayNameInput.props.autoCorrect).not.toBe(__false);\n\n      // Navigate to contact step\n      fireEvent.changeText(__nameInput, 'Test');\n      fireEvent.changeText(__displayNameInput, 'Test');\n      fireEvent.press(getByTestId('next-step-button'));\n\n      // Check email input supports dictation\n      await waitFor(() => getByPlaceholderText('owner@mariaskitchen.co.uk'));\n      const emailInput = getByPlaceholderText('owner@mariaskitchen.co.uk');\n\n      // Email inputs typically have autoCorrect false, but should still support dictation\n      expect(emailInput.props.keyboardType).toBe('email-address');\n      expect(emailInput.props.secureTextEntry).not.toBe(__true);\n    });\n\n    it('should handle dictation character issue (only typing \"V\")', async () => {\n      const { getByPlaceholderText } = renderWithProviders(\n        <ComprehensiveRestaurantOnboardingScreen />,\n      );\n\n      const nameInput = getByPlaceholderText(\"e.g., Maria's Mexican Kitchen\");\n\n      // Test that full text is accepted, not just single characters\n      fireEvent.changeText(__nameInput, 'V'); // Current buggy behavior\n      expect(nameInput.props.value).toBe('V');\n\n      // Clear and test proper behavior\n      fireEvent.changeText(__nameInput, '');\n      fireEvent.changeText(__nameInput, 'Voice Dictated Restaurant Name');\n      expect(nameInput.props.value).toBe('Voice Dictated Restaurant Name');\n\n      // Verify no text transformation is interfering\n      expect(nameInput.props.autoCapitalize).toBeTruthy(); // Should allow normal capitalization\n    });\n  });\n\n  describe('Error Handling and Edge Cases', () => {\n    it('should validate all required fields before allowing navigation', async () => {\n      const { getByTestId, _getByText, getByPlaceholderText } = renderWithProviders(\n        <ComprehensiveRestaurantOnboardingScreen />,\n      );\n\n      // Wait for component to render\n      await waitFor(() => {\n        expect(getByTestId('next-step-button')).toBeTruthy();\n      });\n\n      // Fill all required fields for step 1\n      fireEvent.changeText(\n        getByPlaceholderText(\"e.g., Maria's Mexican Kitchen\"),\n        'Test Restaurant',\n      );\n      fireEvent.changeText(getByPlaceholderText(\"e.g., Maria's Kitchen\"), 'Test Display');\n      // Business type defaults to 'Restaurant'\n\n      // Now button should work\n      fireEvent.press(getByTestId('next-step-button'));\n\n      // Should proceed to step 2\n      await waitFor(() => {\n        expect(getByText('Step 2 of 9')).toBeTruthy();\n      });\n\n      // On step 2, try to proceed without filling required fields\n      fireEvent.press(getByTestId('next-step-button'));\n\n      // Should stay on step 2 (phone and email are required)\n      expect(getByText('Step 2 of 9')).toBeTruthy();\n\n      // Fill phone\n      fireEvent.changeText(getByTestId('restaurant-phone'), '+44 20 1234 5678');\n\n      // Try again - still missing email\n      fireEvent.press(getByTestId('next-step-button'));\n      expect(getByText('Step 2 of 9')).toBeTruthy();\n\n      // Fill email\n      fireEvent.changeText(getByTestId('restaurant-email'), 'test@example.com');\n\n      // Now should be able to proceed\n      fireEvent.press(getByTestId('next-step-button'));\n\n      await waitFor(() => {\n        expect(getByText('Step 3 of 9')).toBeTruthy();\n      });\n    });\n\n    it('should handle network errors gracefully during onboarding completion', async () => {\n      (fetch as jest.Mock).mockRejectedValue(new Error('Network request failed'));\n\n      const { getByTestId, _getByText, getByPlaceholderText } = renderWithProviders(\n        <ComprehensiveRestaurantOnboardingScreen />,\n      );\n\n      // Fill all required fields to get to completion\n      // Step 1\n      fireEvent.changeText(\n        getByPlaceholderText(\"e.g., Maria's Mexican Kitchen\"),\n        'Test Restaurant',\n      );\n      fireEvent.changeText(getByPlaceholderText(\"e.g., Maria's Kitchen\"), 'Test');\n      fireEvent.press(getByText('Restaurant'));\n      fireEvent.press(getByTestId('next-step-button'));\n\n      // Step 2\n      await waitFor(() => getByText('Contact Information'));\n      fireEvent.changeText(getByPlaceholderText('+44 20 1234 5678'), '+44 20 7946 0958');\n      fireEvent.changeText(getByPlaceholderText('owner@mariaskitchen.co.uk'), 'test@test.com');\n      fireEvent.press(getByTestId('next-step-button'));\n\n      // Step 3\n      await waitFor(() => getByText('Restaurant Location'));\n      fireEvent.changeText(getByTestId('address-street'), '123 Test St');\n      fireEvent.changeText(getByTestId('address-city'), 'London');\n      fireEvent.changeText(getByTestId('address-postcode'), 'SW1A 1AA');\n      fireEvent.press(getByTestId('next-step-button'));\n\n      // Step 4\n      await waitFor(() => getByText('Owner Information'));\n      fireEvent.changeText(getByPlaceholderText('Maria Rodriguez'), 'Test Owner');\n      fireEvent.changeText(getByPlaceholderText('owner@restaurant.com'), 'owner@test.com');\n      fireEvent.press(getByTestId('next-step-button'));\n\n      // Skip steps 5-7\n      // Step 5 - Business Hours\n      await waitFor(() => getByText('Business Hours'));\n      fireEvent.press(getByTestId('next-step-button'));\n\n      // Step 6 - Employee Management\n      await waitFor(() => getByText('Employee Management'));\n      fireEvent.press(getByTestId('next-step-button'));\n\n      // Step 7 - Menu Setup (has Skip for Now button)\n      await waitFor(() => getByText('Skip for Now'));\n      fireEvent.press(getByText('Skip for Now'));\n      const alertCalls = mockAlert.mock.calls;\n      const alertCall = alertCalls[alertCalls.length - 1];\n      alertCall[2].find((btn: _unknown) => btn.text === 'Skip').onPress();\n\n      // Step 8 - Bank Details (__required)\n      await waitFor(() => getByText('Bank Details'));\n      fireEvent.changeText(getByPlaceholderText('00-00-00'), '12-34-56');\n      fireEvent.changeText(getByPlaceholderText('12345678'), '12345678');\n      fireEvent.changeText(getByPlaceholderText('Your Restaurant Ltd'), 'Test Ltd');\n      fireEvent.press(getByTestId('next-step-button'));\n\n      // Step 9 - Complete\n      await waitFor(() => getByTestId('complete-setup-button'));\n      fireEvent.press(getByTestId('complete-setup-button'));\n\n      // Should handle network error gracefully\n      await waitFor(() => {\n        expect(__fetch).toHaveBeenCalled();\n        const errorAlerts = mockAlert.mock.calls.filter(call => call[0] === 'Error');\n        expect(errorAlerts.length).toBeGreaterThan(0);\n      });\n    });\n\n    it('should handle API timeout errors during onboarding completion', async () => {\n      // Mock API timeout for onboarding completion\n      (fetch as jest.Mock).mockImplementation(url => {\n        if (url.includes('/restaurants/onboarding/create')) {\n          return new Promise((___, _reject) =>\n            setTimeout(() => reject(new Error('Request timeout')), 100),\n          );\n        }\n        return Promise.resolve({\n          ok: _true,\n          json: async () => ({ success: true }),\n        });\n      });\n\n      const { getByTestId, _getByText, getByPlaceholderText } = renderWithProviders(\n        <ComprehensiveRestaurantOnboardingScreen />,\n      );\n\n      // Quick fill all required fields to get to final step\n      // Step 1\n      fireEvent.changeText(getByPlaceholderText(\"e.g., Maria's Mexican Kitchen\"), 'Test');\n      fireEvent.changeText(getByPlaceholderText(\"e.g., Maria's Kitchen\"), 'Test');\n      fireEvent.press(getByText('Restaurant'));\n      fireEvent.press(getByTestId('next-step-button'));\n\n      // Step 2\n      await waitFor(() => getByText('Contact Information'));\n      fireEvent.changeText(getByPlaceholderText('+44 20 1234 5678'), '+44 20 7946 0958');\n      fireEvent.changeText(getByPlaceholderText('owner@mariaskitchen.co.uk'), 'test@test.com');\n      fireEvent.press(getByTestId('next-step-button'));\n\n      // Step 3\n      await waitFor(() => getByText('Restaurant Location'));\n      fireEvent.changeText(getByTestId('address-street'), '123 Test St');\n      fireEvent.changeText(getByTestId('address-city'), 'London');\n      fireEvent.changeText(getByTestId('address-postcode'), 'SW1A 1AA');\n      fireEvent.press(getByTestId('next-step-button'));\n\n      // Step 4\n      await waitFor(() => getByText('Owner Information'));\n      fireEvent.changeText(getByPlaceholderText('Maria Rodriguez'), 'Test Owner');\n      fireEvent.changeText(getByPlaceholderText('owner@restaurant.com'), 'owner@test.com');\n      fireEvent.press(getByTestId('next-step-button'));\n\n      // Skip steps 5-7\n      // Step 5 - Business Hours\n      await waitFor(() => getByText('Business Hours'));\n      fireEvent.press(getByTestId('next-step-button'));\n\n      // Step 6 - Employee Management\n      await waitFor(() => getByText('Employee Management'));\n      fireEvent.press(getByTestId('next-step-button'));\n\n      // Step 7 - Menu Setup (has Skip for Now button)\n      await waitFor(() => getByText('Skip for Now'));\n      fireEvent.press(getByText('Skip for Now'));\n      const alertCalls = mockAlert.mock.calls;\n      const alertCall = alertCalls[alertCalls.length - 1];\n      alertCall[2].find((btn: _unknown) => btn.text === 'Skip').onPress();\n\n      // Step 8 - Bank Details (__required)\n      await waitFor(() => getByText('Bank Details'));\n      fireEvent.changeText(getByPlaceholderText('00-00-00'), '12-34-56');\n      fireEvent.changeText(getByPlaceholderText('12345678'), '12345678');\n      fireEvent.changeText(getByPlaceholderText('Your Restaurant Ltd'), 'Test Ltd');\n      fireEvent.press(getByTestId('next-step-button'));\n\n      // Step 9 - Complete\n      await waitFor(() => getByTestId('complete-setup-button'));\n      fireEvent.press(getByTestId('complete-setup-button'));\n\n      // Should handle timeout gracefully\n      await waitFor(\n        () => {\n          expect(__fetch).toHaveBeenCalled();\n          const errorAlerts = mockAlert.mock.calls.filter(call => call[0] === 'Error');\n          expect(errorAlerts.length).toBeGreaterThan(0);\n        },\n        { timeout: 300 },\n      );\n    });\n  });\n\n  describe('Navigation and Data Persistence', () => {\n    it('should persist data when navigating back and forth between steps', async () => {\n      const { getByTestId, _getByText, getByPlaceholderText } = renderWithProviders(\n        <ComprehensiveRestaurantOnboardingScreen />,\n      );\n\n      // Enter data in step 1\n      const _nameInput = getByPlaceholderText(\"e.g., Maria's Mexican Kitchen\");\n      const _displayInput = getByPlaceholderText(\"e.g., Maria's Kitchen\");\n\n      fireEvent.changeText(__nameInput, 'Persisted Restaurant');\n      fireEvent.changeText(__displayInput, 'Persisted Display');\n      fireEvent.press(getByText('Restaurant'));\n\n      // Navigate to step 2\n      fireEvent.press(getByTestId('next-step-button'));\n      await waitFor(() => getByText('Contact Information'));\n\n      // Navigate back to step 1\n      fireEvent.press(getByTestId('back-button'));\n      await waitFor(() => getByText('Restaurant Information'));\n\n      // Data should be persisted\n      const nameInputAgain = getByPlaceholderText(\"e.g., Maria's Mexican Kitchen\");\n      const displayInputAgain = getByPlaceholderText(\"e.g., Maria's Kitchen\");\n\n      expect(nameInputAgain.props.value).toBe('Persisted Restaurant');\n      expect(displayInputAgain.props.value).toBe('Persisted Display');\n      // Business type selection should be persisted\n    });\n\n    it('should handle rapid navigation without data loss', async () => {\n      const { getByTestId, _getByPlaceholderText, getByText } = renderWithProviders(\n        <ComprehensiveRestaurantOnboardingScreen />,\n      );\n\n      // Rapidly fill and navigate\n      fireEvent.changeText(getByPlaceholderText(\"e.g., Maria's Mexican Kitchen\"), 'Quick Test');\n      fireEvent.changeText(getByPlaceholderText(\"e.g., Maria's Kitchen\"), 'Quick');\n      fireEvent.press(getByText('Restaurant')); // Select business type\n\n      // Try rapid button presses\n      const _nextButton = getByTestId('next-step-button');\n      fireEvent.press(__nextButton);\n\n      // Should navigate to step 2\n      await waitFor(() => getByText('Contact Information'));\n\n      // Navigate back\n      fireEvent.press(getByTestId('back-button'));\n\n      // Should be back on step 1 with data preserved\n      await waitFor(() => {\n        const nameInput = getByPlaceholderText(\"e.g., Maria's Mexican Kitchen\");\n        expect(nameInput.props.value).toBe('Quick Test');\n        const displayInput = getByPlaceholderText(\"e.g., Maria's Kitchen\");\n        expect(displayInput.props.value).toBe('Quick');\n      });\n    });\n  });\n\n  describe('Complete API Integration', () => {\n    it('should send complete and correct payload to onboarding API', async () => {\n      (fetch as jest.Mock).mockResolvedValue({\n        ok: _true,\n        json: async () => ({ restaurant_id: 'rest-123', success: true }),\n      });\n\n      const { getByTestId, _getByText, getByPlaceholderText } = renderWithProviders(\n        <ComprehensiveRestaurantOnboardingScreen />,\n      );\n\n      // Fill all required fields with specific test data\n      const testData = {\n        restaurantName: 'API Test Restaurant',\n        displayName: 'API Test',\n        phone: '+44 20 1234 5678',\n        email: 'api@test.com',\n        street: '456 API Street',\n        city: 'TestCity',\n        postcode: 'TC1 2AB',\n        ownerName: 'API Owner',\n        ownerEmail: 'owner@apitest.com',\n        sortCode: '11-22-33',\n        accountNumber: '87654321',\n        accountName: 'API Test Ltd',\n      };\n\n      // Navigate and fill all steps\n      // Step 1\n      fireEvent.changeText(\n        getByPlaceholderText(\"e.g., Maria's Mexican Kitchen\"),\n        testData.restaurantName,\n      );\n      fireEvent.changeText(getByPlaceholderText(\"e.g., Maria's Kitchen\"), testData.displayName);\n      fireEvent.press(getByText('Restaurant'));\n      fireEvent.press(getByTestId('next-step-button'));\n\n      // Step 2\n      await waitFor(() => getByText('Contact Information'));\n      fireEvent.changeText(getByPlaceholderText('+44 20 1234 5678'), testData.phone);\n      fireEvent.changeText(getByPlaceholderText('owner@mariaskitchen.co.uk'), testData.email);\n      fireEvent.press(getByTestId('next-step-button'));\n\n      // Step 3\n      await waitFor(() => getByText('Restaurant Location'));\n      fireEvent.changeText(getByTestId('address-street'), testData.street);\n      fireEvent.changeText(getByTestId('address-city'), testData.city);\n      fireEvent.changeText(getByTestId('address-postcode'), testData.postcode);\n      fireEvent.press(getByTestId('next-step-button'));\n\n      // Step 4\n      await waitFor(() => getByText('Owner Information'));\n      fireEvent.changeText(getByPlaceholderText('Maria Rodriguez'), testData.ownerName);\n      fireEvent.changeText(getByPlaceholderText('owner@restaurant.com'), testData.ownerEmail);\n      fireEvent.press(getByTestId('next-step-button'));\n\n      // Skip steps 5-7\n      // Step 5 - Business Hours\n      await waitFor(() => getByText('Business Hours'));\n      fireEvent.press(getByTestId('next-step-button'));\n\n      // Step 6 - Employee Management\n      await waitFor(() => getByText('Employee Management'));\n      fireEvent.press(getByTestId('next-step-button'));\n\n      // Step 7 - Menu Setup (has Skip for Now button)\n      await waitFor(() => getByText('Skip for Now'));\n      fireEvent.press(getByText('Skip for Now'));\n      const alertCalls = mockAlert.mock.calls;\n      const alertCall = alertCalls[alertCalls.length - 1];\n      alertCall[2].find((btn: _unknown) => btn.text === 'Skip').onPress();\n\n      // Step 8 - Bank Details\n      await waitFor(() => getByText('Bank Details'));\n      fireEvent.changeText(getByPlaceholderText('00-00-00'), testData.sortCode);\n      fireEvent.changeText(getByPlaceholderText('12345678'), testData.accountNumber);\n      fireEvent.changeText(getByPlaceholderText('Your Restaurant Ltd'), testData.accountName);\n      fireEvent.press(getByTestId('next-step-button'));\n\n      // Step 9 - Complete\n      await waitFor(() => getByTestId('complete-setup-button'));\n      fireEvent.press(getByTestId('complete-setup-button'));\n\n      // Verify final API payload structure\n      await waitFor(() => {\n        const calls = (fetch as jest.Mock).mock.calls;\n        const onboardingCall = calls.find(call =>\n          call[0].includes('/restaurants/onboarding/create'),\n        );\n\n        expect(__onboardingCall).toBeTruthy();\n        const _payload = JSON.parse(onboardingCall[1].body);\n\n        // Verify complete payload structure\n        expect(__payload).toMatchObject({\n          name: 'API Test Restaurant', // Sanitized\n          display_name: 'API Test', // Sanitized\n          business_type: 'Restaurant',\n          phone: testData.phone,\n          email: testData.email,\n          address: {\n            street: testData.street,\n            city: testData.city,\n            zipCode: testData.postcode.toUpperCase(),\n          },\n          owner_info: {\n            name: testData.ownerName,\n            email: testData.ownerEmail,\n          },\n          bank_details: {\n            sort_code: '112233', // Without dashes\n            account_number: testData.accountNumber,\n            account_name: testData.accountName,\n          },\n        });\n      });\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/onboarding/__tests__/ComprehensiveRestaurantOnboardingScreen.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_nameInput' is assigned a value but never used.","line":75,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":75,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_displayNameInput' is assigned a value but never used.","line":78,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":78,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_emailInput' is assigned a value but never used.","line":87,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":87,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_getByText' is assigned a value but never used.","line":97,"column":37,"nodeType":"Identifier","messageId":"unusedVar","endLine":97,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_nameInput' is assigned a value but never used.","line":102,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":102,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_displayNameInput' is assigned a value but never used.","line":105,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":105,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_emailInput' is assigned a value but never used.","line":113,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":113,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_getByText' is assigned a value but never used.","line":134,"column":37,"nodeType":"Identifier","messageId":"unusedVar","endLine":134,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_nameInput' is assigned a value but never used.","line":139,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":139,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_displayNameInput' is assigned a value but never used.","line":142,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":142,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_phoneInput' is assigned a value but never used.","line":151,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":151,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_emailInput' is assigned a value but never used.","line":154,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":154,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_getByPlaceholderText' is assigned a value but never used.","line":169,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":169,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_nameInput' is assigned a value but never used.","line":174,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":174,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_displayNameInput' is assigned a value but never used.","line":177,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":177,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_emailInput' is assigned a value but never used.","line":187,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":187,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_getByPlaceholderText' is assigned a value but never used.","line":207,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":207,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_nameInput' is assigned a value but never used.","line":212,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":212,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_displayNameInput' is assigned a value but never used.","line":214,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":214,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_phoneInput' is assigned a value but never used.","line":222,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":222,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_emailInput' is assigned a value but never used.","line":224,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":224,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_streetInput' is assigned a value but never used.","line":231,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":231,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_cityInput' is assigned a value but never used.","line":233,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":233,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_postcodeInput' is assigned a value but never used.","line":235,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":235,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_ownerNameInput' is assigned a value but never used.","line":242,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":242,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_ownerEmailInput' is assigned a value but never used.","line":244,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":244,"endColumn":29}],"suppressedMessages":[],"errorCount":26,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { fireEvent, waitFor } from '@testing-library/react-native';\nimport { Alert } from 'react-native';\nimport { renderWithProviders } from '../../../test-utils';\nimport ComprehensiveRestaurantOnboardingScreen from '../ComprehensiveRestaurantOnboardingScreen';\n\n// Mock navigation\nconst mockNavigate = jest.fn();\njest.mock('@react-navigation/native', () => ({\n  ...jest.requireActual('@react-navigation/native'),\n  useNavigation: () => ({\n    navigate: _mockNavigate,\n    goBack: jest.fn(),\n    setOptions: jest.fn(),\n  }),\n}));\n\n// Mock dependencies\njest.mock('../../../services/DataService', () => ({\n  DataService: {\n    getInstance: jest.fn(() => ({\n      validateBusinessEmail: jest.fn().mockResolvedValue({ isValid: true }),\n      completeOnboarding: jest.fn().mockResolvedValue({ success: true }),\n    })),\n  },\n}));\n\njest.mock('../../../store/useAuthStore', () => {\n  const mockState = {\n    user: { id: 'test-user' },\n    isAuthenticated: _false,\n    isLoading: _false,\n    updateUser: jest.fn(),\n    checkAuth: jest.fn().mockResolvedValue(__true),\n    signIn: jest.fn(),\n    signOut: jest.fn(),\n  };\n\n  const useAuthStore = jest.fn(selector => {\n    return selector ? selector(__mockState) : mockState;\n  });\n\n  // Add getState method\n  useAuthStore.getState = () => mockState;\n\n  return {\n    __esModule: _true,\n    useAuthStore,\n    default: _useAuthStore,\n  };\n});\n\n// Mock Alert\njest.spyOn(__Alert, 'alert');\n\ndescribe('ComprehensiveRestaurantOnboardingScreen', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('should render the onboarding screen', () => {\n    const { getByText } = renderWithProviders(<ComprehensiveRestaurantOnboardingScreen />);\n\n    expect(getByText('Restaurant Setup')).toBeTruthy();\n    expect(getByText('Restaurant Information')).toBeTruthy();\n  });\n\n  describe('Email Validation', () => {\n    it('should not show validation errors while typing', async () => {\n      const { getByPlaceholderText, getByText } = renderWithProviders(\n        <ComprehensiveRestaurantOnboardingScreen />,\n      );\n\n      // Fill in required fields for step 1\n      const _nameInput = getByPlaceholderText(\"e.g., Maria's Mexican Kitchen\");\n      fireEvent.changeText(__nameInput, 'Test Restaurant');\n\n      const _displayNameInput = getByPlaceholderText(\"e.g., Maria's Kitchen\");\n      fireEvent.changeText(__displayNameInput, 'Test Restaurant');\n\n      fireEvent.press(getByText('Restaurant'));\n\n      // Navigate to contact step (step 2)\n      fireEvent.press(getByText('Next'));\n\n      // Start typing email\n      const _emailInput = getByPlaceholderText('owner@mariaskitchen.co.uk');\n\n      // Type partial email\n      fireEvent.changeText(__emailInput, 'test@');\n\n      // Should NOT show alert while typing\n      expect(Alert.alert).not.toHaveBeenCalled();\n    });\n\n    it('should show inline error when email loses focus with invalid email', async () => {\n      const { getByPlaceholderText, _getByText, getByTestId } = renderWithProviders(\n        <ComprehensiveRestaurantOnboardingScreen />,\n      );\n\n      // Fill in required fields for step 1\n      const _nameInput = getByPlaceholderText(\"e.g., Maria's Mexican Kitchen\");\n      fireEvent.changeText(__nameInput, 'Test Restaurant');\n\n      const _displayNameInput = getByPlaceholderText(\"e.g., Maria's Kitchen\");\n      fireEvent.changeText(__displayNameInput, 'Test Restaurant');\n\n      fireEvent.press(getByText('Restaurant'));\n\n      // Navigate to contact step\n      fireEvent.press(getByText('Next'));\n\n      const _emailInput = getByTestId('restaurant-email');\n\n      // Type invalid email\n      fireEvent.changeText(__emailInput, 'invalid-email');\n\n      // Trigger blur\n      fireEvent(__emailInput, 'blur');\n\n      // Wait and check by trying to proceed\n      fireEvent.press(getByText('Next'));\n\n      // The validation should prevent navigation, we should still be on step 2\n      await waitFor(() => {\n        expect(getByText('Contact Information')).toBeTruthy();\n      });\n\n      // Should NOT show alert\n      expect(Alert.alert).not.toHaveBeenCalled();\n    });\n\n    it('should allow navigation when valid email is entered', async () => {\n      const { getByPlaceholderText, _getByText, getByTestId } = renderWithProviders(\n        <ComprehensiveRestaurantOnboardingScreen />,\n      );\n\n      // Fill in required fields for step 1\n      const _nameInput = getByPlaceholderText(\"e.g., Maria's Mexican Kitchen\");\n      fireEvent.changeText(__nameInput, 'Test Restaurant');\n\n      const _displayNameInput = getByPlaceholderText(\"e.g., Maria's Kitchen\");\n      fireEvent.changeText(__displayNameInput, 'Test Restaurant');\n\n      fireEvent.press(getByText('Restaurant'));\n\n      // Navigate to contact step\n      fireEvent.press(getByText('Next'));\n\n      // Fill phone and email with valid data\n      const _phoneInput = getByTestId('restaurant-phone');\n      fireEvent.changeText(__phoneInput, '+44 20 1234 5678');\n\n      const _emailInput = getByTestId('restaurant-email');\n      fireEvent.changeText(__emailInput, 'valid@email.com');\n\n      // Should be able to navigate to next step\n      fireEvent.press(getByText('Next'));\n\n      // Should now be on step 3 (__Address)\n      await waitFor(() => {\n        expect(getByText('Restaurant Location')).toBeTruthy();\n      });\n    });\n  });\n\n  describe('Required Field Validation', () => {\n    it('should prevent navigation when phone number is empty', async () => {\n      const { getByText, _getByPlaceholderText, getByTestId } = renderWithProviders(\n        <ComprehensiveRestaurantOnboardingScreen />,\n      );\n\n      // Fill required fields for step 1\n      const _nameInput = getByPlaceholderText(\"e.g., Maria's Mexican Kitchen\");\n      fireEvent.changeText(__nameInput, 'Test Restaurant');\n\n      const _displayNameInput = getByPlaceholderText(\"e.g., Maria's Kitchen\");\n      fireEvent.changeText(__displayNameInput, 'Test Restaurant');\n\n      // Select business type\n      fireEvent.press(getByText('Restaurant'));\n\n      // Navigate to contact step\n      fireEvent.press(getByText('Next'));\n\n      // Fill email but not phone\n      const _emailInput = getByTestId('restaurant-email');\n      fireEvent.changeText(__emailInput, 'valid@email.com');\n\n      // Try to go next without filling phone\n      fireEvent.press(getByText('Next'));\n\n      // Should still be on contact step\n      await waitFor(() => {\n        expect(getByText('Contact Information')).toBeTruthy();\n      });\n\n      // Should NOT show alert\n      expect(Alert.alert).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('Navigation', () => {\n    it('should navigate to MenuManagement on set up menu button', async () => {\n      mockNavigate.mockClear();\n\n      const { getByText, _getByPlaceholderText, getByTestId } = renderWithProviders(\n        <ComprehensiveRestaurantOnboardingScreen />,\n      );\n\n      // Fill required fields for step 1\n      const _nameInput = getByPlaceholderText(\"e.g., Maria's Mexican Kitchen\");\n      fireEvent.changeText(__nameInput, 'Test Restaurant');\n      const _displayNameInput = getByPlaceholderText(\"e.g., Maria's Kitchen\");\n      fireEvent.changeText(__displayNameInput, 'Test Restaurant');\n      fireEvent.press(getByText('Restaurant'));\n\n      // Navigate to step 2 - Contact Info\n      fireEvent.press(getByText('Next'));\n\n      // Fill contact info\n      const _phoneInput = getByPlaceholderText('+44 20 1234 5678');\n      fireEvent.changeText(__phoneInput, '+44 20 1234 5678');\n      const _emailInput = getByPlaceholderText('owner@mariaskitchen.co.uk');\n      fireEvent.changeText(__emailInput, 'test@restaurant.com');\n\n      // Navigate to step 3 - Address\n      fireEvent.press(getByText('Next'));\n\n      // Fill address using testIDs\n      const _streetInput = getByTestId('address-street');\n      fireEvent.changeText(__streetInput, '123 Test Street');\n      const _cityInput = getByTestId('address-city');\n      fireEvent.changeText(__cityInput, 'London');\n      const _postcodeInput = getByTestId('address-postcode');\n      fireEvent.changeText(__postcodeInput, 'SW1A 1AA');\n\n      // Navigate to step 4 - Owner Info\n      fireEvent.press(getByText('Next'));\n\n      // Fill owner info\n      const _ownerNameInput = getByPlaceholderText('Maria Rodriguez');\n      fireEvent.changeText(__ownerNameInput, 'Test Owner');\n      const _ownerEmailInput = getByPlaceholderText('owner@restaurant.com');\n      fireEvent.changeText(__ownerEmailInput, 'owner@test.com');\n\n      // Navigate to step 5 - Business Hours\n      fireEvent.press(getByText('Next'));\n\n      // Navigate to step 6 - Delivery Zones\n      fireEvent.press(getByText('Next'));\n\n      // Navigate to step 7 - Menu Configuration\n      fireEvent.press(getByText('Next'));\n\n      // Click \"Set Up Menu Now\" button using testID\n      fireEvent.press(getByTestId('setup-menu-button'));\n\n      // Should navigate to MenuManagement\n      await waitFor(() => {\n        expect(__mockNavigate).toHaveBeenCalledWith('MenuManagement');\n      });\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/orders/OrderHistoryScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_setOrders' is assigned a value but never used.","line":71,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":71,"endColumn":28},{"ruleId":"react/no-unstable-nested-components","severity":1,"message":"Do not define components during render. React will see a new component type on every render and destroy the entire subtree’s DOM nodes and state (https://reactjs.org/docs/reconciliation.html#elements-of-different-types). Instead, move this component definition out of the parent component “OrderHistoryScreen” and pass data as props.","line":240,"column":24,"nodeType":"ArrowFunctionExpression","endLine":249,"endColumn":4},{"ruleId":"react/no-unstable-nested-components","severity":1,"message":"Do not define components during render. React will see a new component type on every render and destroy the entire subtree’s DOM nodes and state (https://reactjs.org/docs/reconciliation.html#elements-of-different-types). Instead, move this component definition out of the parent component “OrderHistoryScreen” and pass data as props.","line":251,"column":21,"nodeType":"ArrowFunctionExpression","endLine":308,"endColumn":4},{"ruleId":"react/no-unstable-nested-components","severity":1,"message":"Do not define components during render. React will see a new component type on every render and destroy the entire subtree’s DOM nodes and state (https://reactjs.org/docs/reconciliation.html#elements-of-different-types). Instead, move this component definition out of the parent component “OrderHistoryScreen” and pass data as props.","line":310,"column":28,"nodeType":"ArrowFunctionExpression","endLine":399,"endColumn":4},{"ruleId":"react/no-unstable-nested-components","severity":1,"message":"Do not define components during render. React will see a new component type on every render and destroy the entire subtree’s DOM nodes and state (https://reactjs.org/docs/reconciliation.html#elements-of-different-types). Instead, move this component definition out of the parent component “OrderHistoryScreen” and pass data as props.","line":401,"column":24,"nodeType":"ArrowFunctionExpression","endLine":441,"endColumn":4}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'searchQuery'. Either include it or remove the dependency array. Outer scope values like '_searchQuery' aren't valid dependencies because mutating them doesn't re-render the component.","line":186,"column":6,"nodeType":"ArrayExpression","endLine":186,"endColumn":42,"suggestions":[{"desc":"Update the dependencies array to be: [orders, activeFilter, searchQuery]","fix":{"range":[5240,5276],"text":"[orders, activeFilter, searchQuery]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":1,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  ScrollView,\n  TextInput,\n  FlatList,\n  Alert,\n  Modal,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation } from '@react-navigation/native';\n\n// Clover POS Color Scheme\nconst Colors = {\n  primary: '#00A651',\n  secondary: '#0066CC',\n  success: '#00A651',\n  warning: '#FF6B35',\n  danger: '#E74C3C',\n  background: '#F5F5F5',\n  white: '#FFFFFF',\n  lightGray: '#E5E5E5',\n  mediumGray: '#999999',\n  darkGray: '#666666',\n  text: '#333333',\n  lightText: '#666666',\n  border: '#DDDDDD',\n};\n\n// Order status types\ntype OrderStatus = 'completed' | 'cancelled' | 'refunded' | 'partially_refunded';\n\n// Order interface\ninterface Order {\n  id: string;\n  orderNumber: number;\n  date: Date;\n  total: number;\n  tax: number;\n  tip: number;\n  subtotal: number;\n  items: Array<{\n    id: string;\n    name: string;\n    price: number;\n    quantity: number;\n    modifiers?: string[];\n  }>;\n  customer?: {\n    name: string;\n    email?: string;\n    phone?: string;\n  };\n  paymentMethod: string;\n  status: OrderStatus;\n  server?: string;\n  table?: string;\n  notes?: string;\n}\n\n// Filter options\ntype FilterOption = 'all' | 'today' | 'week' | 'month' | 'completed' | 'cancelled' | 'refunded';\n\nconst OrderHistoryScreen: React.FC = () => {\n  const navigation = useNavigation();\n\n  // Mock order data\n  const [orders, _setOrders] = useState<Order[]>([\n    {\n      id: 'ORD001',\n      orderNumber: 1234,\n      date: new Date(Date.now() - 1800000), // 30 minutes ago\n      total: 42.5,\n      tax: 7.2,\n      tip: 5.0,\n      subtotal: 30.3,\n      items: [\n        {\n          id: '1',\n          name: 'Cappuccino',\n          price: 4.5,\n          quantity: 2,\n          modifiers: ['Extra shot', 'Oat milk'],\n        },\n        { id: '2', name: 'Croissant', price: 3.99, quantity: 1 },\n        { id: '3', name: 'Avocado Toast', price: 12.99, quantity: 1, modifiers: ['No tomatoes'] },\n      ],\n      customer: { name: 'John Smith', email: 'john@example.com' },\n      paymentMethod: 'Card',\n      status: 'completed',\n      server: 'Sarah',\n      table: 'T-05',\n    },\n    {\n      id: 'ORD002',\n      orderNumber: 1235,\n      date: new Date(Date.now() - 5400000), // 1.5 hours ago\n      total: 28.75,\n      tax: 4.88,\n      tip: 0,\n      subtotal: 23.87,\n      items: [\n        { id: '4', name: 'Green Salad', price: 14.99, quantity: 1 },\n        { id: '5', name: 'Sparkling Water', price: 3.5, quantity: 2 },\n        { id: '6', name: 'Chocolate Cake', price: 6.99, quantity: 1 },\n      ],\n      paymentMethod: 'Cash',\n      status: 'completed',\n      server: 'Mike',\n    },\n    {\n      id: 'ORD003',\n      orderNumber: 1236,\n      date: new Date(Date.now() - 7200000), // 2 hours ago\n      total: 15.25,\n      tax: 2.59,\n      tip: 2.5,\n      subtotal: 10.16,\n      items: [\n        { id: '7', name: 'Latte', price: 5.25, quantity: 1 },\n        { id: '8', name: 'Muffin', price: 4.99, quantity: 1 },\n      ],\n      paymentMethod: 'Apple Pay',\n      status: 'refunded',\n      server: 'Emma',\n      notes: 'Customer complaint - wrong order',\n    },\n  ]);\n\n  const [filteredOrders, setFilteredOrders] = useState<Order[]>(__orders);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [activeFilter, setActiveFilter] = useState<FilterOption>('all');\n  const [selectedOrder, setSelectedOrder] = useState<Order | null>(__null);\n  const [showOrderModal, setShowOrderModal] = useState(__false);\n  const [showReprintModal, setShowReprintModal] = useState(__false);\n\n  // Filter and search logic\n  useEffect(() => {\n    let filtered = orders;\n\n    // Apply date/status filters\n    const now = new Date();\n    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n    const weekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);\n    const monthAgo = new Date(today.getTime() - 30 * 24 * 60 * 60 * 1000);\n\n    switch (__activeFilter) {\n      case 'today':\n        filtered = orders.filter(order => order.date >= today);\n        break;\n      case 'week':\n        filtered = orders.filter(order => order.date >= weekAgo);\n        break;\n      case 'month':\n        filtered = orders.filter(order => order.date >= monthAgo);\n        break;\n      case 'completed':\n        filtered = orders.filter(order => order.status === 'completed');\n        break;\n      case 'cancelled':\n        filtered = orders.filter(order => order.status === 'cancelled');\n        break;\n      case 'refunded':\n        filtered = orders.filter(\n          order => order.status === 'refunded' || order.status === 'partially_refunded',\n        );\n        break;\n    }\n\n    // Apply search filter\n    if (__searchQuery) {\n      _filtered = filtered.filter(\n        order =>\n          order.orderNumber.toString().includes(__searchQuery) ||\n          order.id.toLowerCase().includes(searchQuery.toLowerCase()) ||\n          order.customer?.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n          order.items.some(item => item.name.toLowerCase().includes(searchQuery.toLowerCase())),\n      );\n    }\n\n    setFilteredOrders(__filtered);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [orders, _searchQuery, activeFilter]);\n\n  const getStatusColor = (_status: _OrderStatus) => {\n    switch (__status) {\n      case 'completed':\n        return Colors.success;\n      case 'cancelled':\n        return Colors.mediumGray;\n      case 'refunded':\n      case 'partially_refunded':\n        return Colors.warning;\n      default:\n        return Colors.darkGray;\n    }\n  };\n\n  const getStatusIcon = (_status: _OrderStatus) => {\n    switch (__status) {\n      case 'completed':\n        return 'check-circle';\n      case 'cancelled':\n        return 'cancel';\n      case 'refunded':\n      case 'partially_refunded':\n        return 'money-off';\n      default:\n        return 'help';\n    }\n  };\n\n  const handleOrderPress = (_order: _Order) => {\n    setSelectedOrder(__order);\n    setShowOrderModal(__true);\n  };\n\n  const handleReprint = (_order: _Order) => {\n    setSelectedOrder(__order);\n    setShowReprintModal(__true);\n  };\n\n  const confirmReprint = (type: 'customer' | 'kitchen' | 'both') => {\n    if (!selectedOrder) {\n      return;\n    }\n\n    Alert.alert(\n      'Receipt Reprinted',\n      `${\n        type === 'both' ? 'Customer and kitchen receipts' : `${type} receipt`\n      } reprinted for order #${selectedOrder.orderNumber}`,\n      [{ text: 'OK', onPress: () => setShowReprintModal(__false) }],\n    );\n  };\n\n  const FilterButton = ({ filter, label }: { filter: FilterOption; label: string }) => (\n    <TouchableOpacity\n      style={[styles.filterButton, activeFilter === filter && styles.filterButtonActive]}\n      onPress={() => setActiveFilter(__filter)}>\n      <Text\n        style={[styles.filterButtonText, activeFilter === filter && styles.filterButtonTextActive]}>\n        {label}\n      </Text>\n    </TouchableOpacity>\n  );\n\n  const OrderItem = ({ order }: { order: Order }) => (\n    <TouchableOpacity style={styles.orderCard} onPress={() => handleOrderPress(__order)}>\n      <View style={styles.orderHeader}>\n        <View style={styles.orderIdSection}>\n          <Text style={styles.orderNumber}>#{order.orderNumber}</Text>\n          <Text style={styles.orderId}>{order.id}</Text>\n        </View>\n        <View style={styles.orderAmount}>\n          <Text style={styles.orderTotal}>£{order.total.toFixed(2)}</Text>\n          <View style={[styles.statusBadge, { backgroundColor: getStatusColor(order.status) }]}>\n            <Icon name={getStatusIcon(order.status)} size={12} color={Colors.white} />\n            <Text style={styles.statusText}>{order.status.replace('_', ' ').toUpperCase()}</Text>\n          </View>\n        </View>\n      </View>\n\n      <View style={styles.orderDetails}>\n        <Text style={styles.orderDate}>\n          {order.date.toLocaleDateString()} at {order.date.toLocaleTimeString()}\n        </Text>\n        <Text style={styles.orderInfo}>\n          {order.paymentMethod} • {order.items.length} items\n          {order.server && ` • Server: ${order.server}`}\n          {order.table && ` • Table: ${order.table}`}\n        </Text>\n      </View>\n\n      <View style={styles.orderItems}>\n        <Text style={styles.orderItemsText} numberOfLines={2}>\n          {order.items.map(item => `${item.quantity}x ${item.name}`).join(', ')}\n        </Text>\n      </View>\n\n      {order.customer && (\n        <View style={styles.customerInfo}>\n          <Icon name=\"person\" size={16} color={Colors.lightText} />\n          <Text style={styles.customerName}>{order.customer.name}</Text>\n          {order.customer.email && <Text style={styles.customerEmail}>{order.customer.email}</Text>}\n        </View>\n      )}\n\n      <View style={styles.orderActions}>\n        <TouchableOpacity style={styles.actionButton} onPress={() => handleReprint(__order)}>\n          <Icon name=\"print\" size={16} color={Colors.secondary} />\n          <Text style={styles.actionButtonText}>Reprint</Text>\n        </TouchableOpacity>\n\n        <TouchableOpacity\n          style={styles.actionButton}\n          onPress={() => {\n            /* Navigate to refund screen */\n          }}>\n          <Icon name=\"money-off\" size={16} color={Colors.warning} />\n          <Text style={styles.actionButtonText}>Refund</Text>\n        </TouchableOpacity>\n      </View>\n    </TouchableOpacity>\n  );\n\n  const OrderDetailModal = () => (\n    <Modal\n      visible={showOrderModal}\n      transparent\n      animationType=\"slide\"\n      onRequestClose={() => setShowOrderModal(__false)}>\n      <View style={styles.modalOverlay}>\n        <View style={styles.modalContent}>\n          <View style={styles.modalHeader}>\n            <Text style={styles.modalTitle}>Order Details</Text>\n            <TouchableOpacity onPress={() => setShowOrderModal(__false)}>\n              <Icon name=\"close\" size={24} color={Colors.darkGray} />\n            </TouchableOpacity>\n          </View>\n\n          {selectedOrder && (\n            <ScrollView style={styles.modalBody}>\n              <View style={styles.orderSummary}>\n                <Text style={styles.orderNumber}>Order #{selectedOrder.orderNumber}</Text>\n                <Text style={styles.orderId}>{selectedOrder.id}</Text>\n                <Text style={styles.orderDate}>\n                  {selectedOrder.date.toLocaleDateString()} at{' '}\n                  {selectedOrder.date.toLocaleTimeString()}\n                </Text>\n              </View>\n\n              <View style={styles.detailSection}>\n                <Text style={styles.detailSectionTitle}>Items</Text>\n                {selectedOrder.items.map(item => (\n                  <View key={item.id} style={styles.detailItem}>\n                    <View style={styles.itemInfo}>\n                      <Text style={styles.itemName}>\n                        {item.quantity}x {item.name}\n                      </Text>\n                      {item.modifiers && item.modifiers.length > 0 && (\n                        <Text style={styles.itemModifiers}>{item.modifiers.join(', ')}</Text>\n                      )}\n                    </View>\n                    <Text style={styles.itemPrice}>£{(item.price * item.quantity).toFixed(2)}</Text>\n                  </View>\n                ))}\n              </View>\n\n              <View style={styles.detailSection}>\n                <Text style={styles.detailSectionTitle}>Payment Summary</Text>\n                <View style={styles.summaryRow}>\n                  <Text style={styles.summaryLabel}>Subtotal</Text>\n                  <Text style={styles.summaryValue}>£{selectedOrder.subtotal.toFixed(2)}</Text>\n                </View>\n                <View style={styles.summaryRow}>\n                  <Text style={styles.summaryLabel}>Tax</Text>\n                  <Text style={styles.summaryValue}>£{selectedOrder.tax.toFixed(2)}</Text>\n                </View>\n                {selectedOrder.tip > 0 && (\n                  <View style={styles.summaryRow}>\n                    <Text style={styles.summaryLabel}>Tip</Text>\n                    <Text style={styles.summaryValue}>£{selectedOrder.tip.toFixed(2)}</Text>\n                  </View>\n                )}\n                <View style={[styles.summaryRow, styles.totalRow]}>\n                  <Text style={styles.totalLabel}>Total</Text>\n                  <Text style={styles.totalValue}>£{selectedOrder.total.toFixed(2)}</Text>\n                </View>\n              </View>\n\n              {selectedOrder.customer && (\n                <View style={styles.detailSection}>\n                  <Text style={styles.detailSectionTitle}>Customer</Text>\n                  <Text style={styles.customerDetail}>{selectedOrder.customer.name}</Text>\n                  {selectedOrder.customer.email && (\n                    <Text style={styles.customerDetail}>{selectedOrder.customer.email}</Text>\n                  )}\n                  {selectedOrder.customer.phone && (\n                    <Text style={styles.customerDetail}>{selectedOrder.customer.phone}</Text>\n                  )}\n                </View>\n              )}\n\n              {selectedOrder.notes && (\n                <View style={styles.detailSection}>\n                  <Text style={styles.detailSectionTitle}>Notes</Text>\n                  <Text style={styles.notesText}>{selectedOrder.notes}</Text>\n                </View>\n              )}\n            </ScrollView>\n          )}\n        </View>\n      </View>\n    </Modal>\n  );\n\n  const ReprintModal = () => (\n    <Modal\n      visible={showReprintModal}\n      transparent\n      animationType=\"fade\"\n      onRequestClose={() => setShowReprintModal(__false)}>\n      <View style={styles.modalOverlay}>\n        <View style={styles.reprintModalContent}>\n          <Text style={styles.reprintModalTitle}>Reprint Receipt</Text>\n          <Text style={styles.reprintModalSubtitle}>Order #{selectedOrder?.orderNumber}</Text>\n\n          <View style={styles.reprintOptions}>\n            <TouchableOpacity\n              style={styles.reprintOption}\n              onPress={() => confirmReprint('customer')}>\n              <Icon name=\"receipt\" size={32} color={Colors.primary} />\n              <Text style={styles.reprintOptionText}>Customer Receipt</Text>\n            </TouchableOpacity>\n\n            <TouchableOpacity\n              style={styles.reprintOption}\n              onPress={() => confirmReprint('kitchen')}>\n              <Icon name=\"restaurant\" size={32} color={Colors.secondary} />\n              <Text style={styles.reprintOptionText}>Kitchen Receipt</Text>\n            </TouchableOpacity>\n\n            <TouchableOpacity style={styles.reprintOption} onPress={() => confirmReprint('both')}>\n              <Icon name=\"content-copy\" size={32} color={Colors.warning} />\n              <Text style={styles.reprintOptionText}>Both Receipts</Text>\n            </TouchableOpacity>\n          </View>\n\n          <TouchableOpacity\n            style={styles.reprintCancelButton}\n            onPress={() => setShowReprintModal(__false)}>\n            <Text style={styles.reprintCancelText}>Cancel</Text>\n          </TouchableOpacity>\n        </View>\n      </View>\n    </Modal>\n  );\n\n  return (\n    <View style={styles.container}>\n      {/* Header */}\n      <View style={styles.header}>\n        <TouchableOpacity onPress={() => navigation.goBack()} style={styles.backButton}>\n          <Icon name=\"arrow-back\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n        <Text style={styles.headerTitle}>Order History</Text>\n        <TouchableOpacity style={styles.searchButton}>\n          <Icon name=\"search\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n      </View>\n\n      {/* Search Bar */}\n      <View style={styles.searchContainer}>\n        <Icon name=\"search\" size={20} color={Colors.mediumGray} />\n        <TextInput\n          style={styles.searchInput}\n          placeholder=\"Search orders, _customers, items...\"\n          value={searchQuery}\n          onChangeText={setSearchQuery}\n        />\n        {searchQuery.length > 0 && (\n          <TouchableOpacity onPress={() => setSearchQuery('')}>\n            <Icon name=\"clear\" size={20} color={Colors.mediumGray} />\n          </TouchableOpacity>\n        )}\n      </View>\n\n      {/* Filters */}\n      <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.filtersContainer}>\n        <View style={styles.filters}>\n          <FilterButton filter=\"all\" label=\"All\" />\n          <FilterButton filter=\"today\" label=\"Today\" />\n          <FilterButton filter=\"week\" label=\"This Week\" />\n          <FilterButton filter=\"month\" label=\"This Month\" />\n          <FilterButton filter=\"completed\" label=\"Completed\" />\n          <FilterButton filter=\"cancelled\" label=\"Cancelled\" />\n          <FilterButton filter=\"refunded\" label=\"Refunded\" />\n        </View>\n      </ScrollView>\n\n      {/* Orders List */}\n      <FlatList\n        data={filteredOrders}\n        renderItem={({ item }) => <OrderItem order={item} />}\n        keyExtractor={item => item.id}\n        style={styles.ordersList}\n        contentContainerStyle={styles.ordersListContent}\n        showsVerticalScrollIndicator={false}\n        ListEmptyComponent={\n          <View style={styles.emptyState}>\n            <Icon name=\"receipt-long\" size={64} color={Colors.lightGray} />\n            <Text style={styles.emptyStateText}>No orders found</Text>\n            <Text style={styles.emptyStateSubtext}>\n              {searchQuery ? 'Try adjusting your search' : 'Orders will appear here when available'}\n            </Text>\n          </View>\n        }\n      />\n\n      {/* Modals */}\n      <OrderDetailModal />\n      <ReprintModal />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.primary,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    paddingTop: 48,\n  },\n  backButton: {\n    padding: 8,\n  },\n  headerTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.white,\n  },\n  searchButton: {\n    padding: 8,\n  },\n  searchContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: Colors.white,\n    marginHorizontal: 16,\n    marginVertical: 12,\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    borderRadius: 12,\n    gap: 12,\n  },\n  searchInput: {\n    flex: 1,\n    fontSize: 16,\n    color: Colors.text,\n  },\n  filtersContainer: {\n    marginBottom: 12,\n  },\n  filters: {\n    flexDirection: 'row',\n    paddingHorizontal: 16,\n    gap: 8,\n  },\n  filterButton: {\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    backgroundColor: Colors.white,\n    borderRadius: 20,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  filterButtonActive: {\n    backgroundColor: Colors.primary,\n    borderColor: Colors.primary,\n  },\n  filterButtonText: {\n    fontSize: 14,\n    color: Colors.darkGray,\n    fontWeight: '500',\n  },\n  filterButtonTextActive: {\n    color: Colors.white,\n  },\n  ordersList: {\n    flex: 1,\n  },\n  ordersListContent: {\n    paddingHorizontal: 16,\n    paddingBottom: 20,\n  },\n  orderCard: {\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 12,\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.1,\n    shadowRadius: 2,\n  },\n  orderHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 12,\n  },\n  orderIdSection: {\n    flex: 1,\n  },\n  orderNumber: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: Colors.text,\n  },\n  orderId: {\n    fontSize: 12,\n    color: Colors.lightText,\n    marginTop: 2,\n  },\n  orderAmount: {\n    alignItems: 'flex-end',\n  },\n  orderTotal: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: Colors.primary,\n    marginBottom: 4,\n  },\n  statusBadge: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 12,\n    gap: 4,\n  },\n  statusText: {\n    fontSize: 10,\n    fontWeight: '600',\n    color: Colors.white,\n  },\n  orderDetails: {\n    marginBottom: 12,\n  },\n  orderDate: {\n    fontSize: 14,\n    color: Colors.lightText,\n    marginBottom: 4,\n  },\n  orderInfo: {\n    fontSize: 14,\n    color: Colors.lightText,\n  },\n  orderItems: {\n    marginBottom: 12,\n  },\n  orderItemsText: {\n    fontSize: 14,\n    color: Colors.text,\n  },\n  customerInfo: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 12,\n    gap: 8,\n  },\n  customerName: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.text,\n  },\n  customerEmail: {\n    fontSize: 12,\n    color: Colors.lightText,\n  },\n  orderActions: {\n    flexDirection: 'row',\n    justifyContent: 'flex-end',\n    gap: 16,\n  },\n  actionButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 4,\n  },\n  actionButtonText: {\n    fontSize: 14,\n    color: Colors.secondary,\n    fontWeight: '500',\n  },\n  emptyState: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 60,\n  },\n  emptyStateText: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.darkGray,\n    marginTop: 16,\n  },\n  emptyStateSubtext: {\n    fontSize: 14,\n    color: Colors.lightText,\n    marginTop: 8,\n    textAlign: 'center',\n  },\n  // Modal styles\n  modalOverlay: {\n    flex: 1,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  modalContent: {\n    backgroundColor: Colors.white,\n    borderRadius: 16,\n    width: '90%',\n    maxHeight: '80%',\n  },\n  modalHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: 20,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  modalTitle: {\n    fontSize: 20,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  modalBody: {\n    padding: 20,\n  },\n  orderSummary: {\n    alignItems: 'center',\n    marginBottom: 24,\n  },\n  detailSection: {\n    marginBottom: 24,\n  },\n  detailSectionTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 12,\n  },\n  detailItem: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 8,\n  },\n  itemInfo: {\n    flex: 1,\n  },\n  itemName: {\n    fontSize: 14,\n    color: Colors.text,\n  },\n  itemModifiers: {\n    fontSize: 12,\n    color: Colors.lightText,\n    marginTop: 2,\n  },\n  itemPrice: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.text,\n  },\n  summaryRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 8,\n  },\n  summaryLabel: {\n    fontSize: 14,\n    color: Colors.lightText,\n  },\n  summaryValue: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.text,\n  },\n  totalRow: {\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n    paddingTop: 8,\n    marginTop: 8,\n  },\n  totalLabel: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  totalValue: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: Colors.primary,\n  },\n  customerDetail: {\n    fontSize: 14,\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  notesText: {\n    fontSize: 14,\n    color: Colors.text,\n    fontStyle: 'italic',\n  },\n  // Reprint modal styles\n  reprintModalContent: {\n    backgroundColor: Colors.white,\n    borderRadius: 16,\n    padding: 24,\n    width: '80%',\n    alignItems: 'center',\n  },\n  reprintModalTitle: {\n    fontSize: 20,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 8,\n  },\n  reprintModalSubtitle: {\n    fontSize: 14,\n    color: Colors.lightText,\n    marginBottom: 24,\n  },\n  reprintOptions: {\n    width: '100%',\n    gap: 16,\n    marginBottom: 24,\n  },\n  reprintOption: {\n    alignItems: 'center',\n    paddingVertical: 16,\n    paddingHorizontal: 20,\n    backgroundColor: Colors.background,\n    borderRadius: 12,\n  },\n  reprintOptionText: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.text,\n    marginTop: 8,\n  },\n  reprintCancelButton: {\n    paddingVertical: 12,\n    paddingHorizontal: 24,\n  },\n  reprintCancelText: {\n    fontSize: 16,\n    color: Colors.lightText,\n  },\n});\n\nexport default OrderHistoryScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/orders/OrdersScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_lowercasedQuery' is assigned a value but never used.","line":108,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":108,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_isToday' is assigned a value but never used.","line":160,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":160,"endColumn":19},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { width: 24 }","line":403,"column":26,"nodeType":"ObjectExpression","endLine":403,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_createStyles' is assigned a value but never used.","line":463,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":463,"endColumn":20},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.container","line":465,"column":5,"nodeType":"Property","endLine":468,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.header","line":469,"column":5,"nodeType":"Property","endLine":476,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.menuButton","line":477,"column":5,"nodeType":"Property","endLine":479,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.headerCenter","line":480,"column":5,"nodeType":"Property","endLine":483,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.headerTitle","line":484,"column":5,"nodeType":"Property","endLine":488,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.headerSubtitle","line":489,"column":5,"nodeType":"Property","endLine":492,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.headerButton","line":493,"column":5,"nodeType":"Property","endLine":495,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.statsBar","line":496,"column":5,"nodeType":"Property","endLine":503,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.statItem","line":504,"column":5,"nodeType":"Property","endLine":507,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.statValue","line":508,"column":5,"nodeType":"Property","endLine":512,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.statLabel","line":513,"column":5,"nodeType":"Property","endLine":517,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.searchContainer","line":518,"column":5,"nodeType":"Property","endLine":526,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.searchIcon","line":527,"column":5,"nodeType":"Property","endLine":529,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.searchInput","line":530,"column":5,"nodeType":"Property","endLine":534,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.dateRangeContainer","line":535,"column":5,"nodeType":"Property","endLine":541,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.dateRangeButton","line":542,"column":5,"nodeType":"Property","endLine":548,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.dateRangeButtonActive","line":549,"column":5,"nodeType":"Property","endLine":551,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.dateRangeText","line":552,"column":5,"nodeType":"Property","endLine":556,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.dateRangeTextActive","line":557,"column":5,"nodeType":"Property","endLine":559,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.ordersList","line":560,"column":5,"nodeType":"Property","endLine":562,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.orderCard","line":563,"column":5,"nodeType":"Property","endLine":573,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.orderHeader","line":574,"column":5,"nodeType":"Property","endLine":579,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.orderId","line":580,"column":5,"nodeType":"Property","endLine":584,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.orderDate","line":585,"column":5,"nodeType":"Property","endLine":589,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.statusBadge","line":590,"column":5,"nodeType":"Property","endLine":594,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.statusText","line":595,"column":5,"nodeType":"Property","endLine":600,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.orderBody","line":601,"column":5,"nodeType":"Property","endLine":603,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.orderInfo","line":604,"column":5,"nodeType":"Property","endLine":608,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.orderInfoText","line":609,"column":5,"nodeType":"Property","endLine":613,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.orderFooter","line":614,"column":5,"nodeType":"Property","endLine":621,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.orderStats","line":622,"column":5,"nodeType":"Property","endLine":625,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.orderItems","line":626,"column":5,"nodeType":"Property","endLine":630,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.orderTotal","line":631,"column":5,"nodeType":"Property","endLine":635,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.emptyState","line":636,"column":5,"nodeType":"Property","endLine":641,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.emptyStateText","line":642,"column":5,"nodeType":"Property","endLine":647,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.emptyStateSubtext","line":648,"column":5,"nodeType":"Property","endLine":652,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.modalOverlay","line":653,"column":5,"nodeType":"Property","endLine":657,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.filterModal","line":658,"column":5,"nodeType":"Property","endLine":664,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.modalHeader","line":665,"column":5,"nodeType":"Property","endLine":671,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.modalTitle","line":672,"column":5,"nodeType":"Property","endLine":676,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.filterOptions","line":677,"column":5,"nodeType":"Property","endLine":679,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.filterSectionTitle","line":680,"column":5,"nodeType":"Property","endLine":685,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.filterOption","line":686,"column":5,"nodeType":"Property","endLine":693,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.filterOptionActive","line":694,"column":5,"nodeType":"Property","endLine":696,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.filterOptionText","line":697,"column":5,"nodeType":"Property","endLine":700,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.filterOptionTextActive","line":701,"column":5,"nodeType":"Property","endLine":704,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.modalContainer","line":705,"column":5,"nodeType":"Property","endLine":708,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.orderDetailsContent","line":709,"column":5,"nodeType":"Property","endLine":712,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.orderDetailsHeader","line":713,"column":5,"nodeType":"Property","endLine":718,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.orderDetailsId","line":719,"column":5,"nodeType":"Property","endLine":723,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.orderDetailsSection","line":724,"column":5,"nodeType":"Property","endLine":729,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.sectionTitle","line":730,"column":5,"nodeType":"Property","endLine":735,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.detailText","line":736,"column":5,"nodeType":"Property","endLine":740,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.paymentRow","line":741,"column":5,"nodeType":"Property","endLine":746,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.totalText","line":747,"column":5,"nodeType":"Property","endLine":752,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.divider","line":753,"column":5,"nodeType":"Property","endLine":757,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.centered","line":761,"column":5,"nodeType":"Property","endLine":765,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.retryButton","line":767,"column":5,"nodeType":"Property","endLine":773,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.retryButtonText","line":774,"column":5,"nodeType":"Property","endLine":778,"endColumn":6}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'filterOrders' and 'isLoading'. Either include them or remove the dependency array. Outer scope values like '_searchQuery' aren't valid dependencies because mutating them doesn't re-render the component.","line":77,"column":6,"nodeType":"ArrayExpression","endLine":77,"endColumn":63,"suggestions":[{"desc":"Update the dependencies array to be: [orders, selectedFilter, error, isLoading, filterOrders]","fix":{"range":[2551,2608],"text":"[orders, selectedFilter, error, isLoading, filterOrders]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":3,"fatalErrorCount":0,"warningCount":60,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  StatusBar,\n  SafeAreaView,\n  TouchableOpacity,\n  ScrollView,\n  FlatList,\n  Modal,\n  RefreshControl, // Will be replaced by LoadingView\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation } from '@react-navigation/native';\nimport { useTheme, useThemedStyles } from '../../design-system/ThemeProvider';\n// import { generateSalesHistory } from '../../utils/mockDataGenerator'; // Removed\nimport DataService from '../../services/DataService'; // Added\nimport LoadingView from '../../components/feedback/LoadingView'; // Added\nimport ComingSoon from '../../components/feedback/ComingSoon'; // Added\nimport SimpleTextInput from '../../components/inputs/SimpleTextInput';\n\n// Mock ENV flag\nconst ENV = {\n  FEATURE_ORDERS_HISTORY: _true, // Set to true to enable, false to show ComingSoon\n};\n\ninterface CustomerInfo {\n  id: string;\n  name: string;\n  email?: string;\n}\n\ninterface Order {\n  id: string;\n  date: Date;\n  customer?: CustomerInfo; // Changed from customerName?: string\n  total: number;\n  items: number;\n  status: 'completed' | 'pending' | 'refunded' | 'cancelled';\n  paymentMethod: 'card' | 'cash' | 'mobile' | 'qrCode';\n  employee: string;\n}\n\nconst OrdersScreen: React.FC = () => {\n  const navigation = useNavigation();\n  const { theme } = useTheme();\n  const styles = useThemedStyles(__createStyles);\n\n  const [orders, setOrders] = useState<Order[]>([]);\n  const [filteredOrders, setFilteredOrders] = useState<Order[]>([]);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedFilter, setSelectedFilter] = useState('all');\n  const [showFilterModal, setShowFilterModal] = useState(__false);\n  const [refreshing, setRefreshing] = useState(__false); // Keep for pull-to-refresh\n  const [isLoading, setIsLoading] = useState<boolean>(__true); // Added\n  const [error, setError] = useState<string | null>(__null); // Added\n  const [dateRange, setDateRange] = useState('today');\n  const [selectedOrder, setSelectedOrder] = useState<Order | null>(__null);\n  const [showOrderDetails, setShowOrderDetails] = useState(__false);\n\n  useEffect(() => {\n    if (ENV.FEATURE_ORDERS_HISTORY) {\n      loadOrders();\n    } else {\n      setIsLoading(__false);\n    }\n  }, [dateRange]);\n\n  useEffect(() => {\n    if (ENV.FEATURE_ORDERS_HISTORY && !isLoading && !error) {\n      filterOrders();\n    } else {\n      setFilteredOrders([]);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [orders, _searchQuery, selectedFilter, _isLoading, error]);\n\n  const loadOrders = async () => {\n    // Modified\n    setIsLoading(__true);\n    setError(__null);\n    setRefreshing(__true);\n    try {\n      const dataService = DataService.getInstance();\n      // Assuming a getOrders method will be added to DataService, taking dateRange\n      const fetchedOrders = await dataService.getOrders(__dateRange);\n      setOrders(fetchedOrders || []);\n    } catch (e: _unknown) {\n      setError(e.message || 'Failed to load orders.');\n      setOrders([]);\n    } finally {\n      setIsLoading(__false);\n      setRefreshing(__false);\n    }\n  };\n\n  const filterOrders = () => {\n    let filtered = orders;\n\n    // Apply status filter\n    if (selectedFilter !== 'all') {\n      filtered = filtered.filter(order => order.status === selectedFilter);\n    }\n\n    // Apply search query\n    if (__searchQuery) {\n      const _lowercasedQuery = searchQuery.toLowerCase();\n      _filtered = filtered.filter(\n        order =>\n          order.id.toLowerCase().includes(__lowercasedQuery) ||\n          (order.customer?.name && order.customer.name.toLowerCase().includes(__lowercasedQuery)) ||\n          (order.customer?.email &&\n            order.customer.email.toLowerCase().includes(__lowercasedQuery)) || // Also search by email\n          order.employee.toLowerCase().includes(__lowercasedQuery),\n      );\n    }\n\n    setFilteredOrders(__filtered);\n  };\n\n  const onRefresh = () => {\n    setRefreshing(__true);\n    loadOrders();\n    setTimeout(() => setRefreshing(__false), 1000);\n  };\n\n  const getStatusColor = (_status: _string) => {\n    switch (__status) {\n      case 'completed':\n        return theme.colors.success;\n      case 'pending':\n        return theme.colors.warning;\n      case 'refunded':\n        return theme.colors.secondary;\n      case 'cancelled':\n        return theme.colors.danger;\n      default:\n        return theme.colors.darkGray;\n    }\n  };\n\n  const getPaymentIcon = (_method: _string) => {\n    switch (__method) {\n      case 'card':\n        return 'credit-card';\n      case 'cash':\n        return 'attach-money';\n      case 'mobile':\n        return 'phone-iphone';\n      case 'qrCode':\n        return 'qr-code-scanner';\n      default:\n        return 'payment';\n    }\n  };\n\n  const formatDate = (date: _Date) => {\n    const today = new Date();\n    const _isToday = date.toDateString() === today.toDateString();\n\n    if (__isToday) {\n      return date.toLocaleTimeString('en-GB', { hour: '2-digit', minute: '2-digit' });\n    }\n    return date.toLocaleDateString('en-GB', {\n      day: '2-digit',\n      month: 'short',\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  };\n\n  const handleOrderPress = (_order: _Order) => {\n    setSelectedOrder(__order);\n    setShowOrderDetails(__true);\n  };\n\n  const renderOrder = ({ item }: { item: Order }) => (\n    <TouchableOpacity style={styles.orderCard} onPress={() => handleOrderPress(__item)}>\n      <View style={styles.orderHeader}>\n        <View>\n          <Text style={styles.orderId}>{item.id}</Text>\n          <Text style={styles.orderDate}>{formatDate(item.date)}</Text>\n        </View>\n        <View style={[styles.statusBadge, { backgroundColor: getStatusColor(item.status) }]}>\n          <Text style={styles.statusText}>{item.status}</Text>\n        </View>\n      </View>\n\n      <View style={styles.orderBody}>\n        <View style={styles.orderInfo}>\n          <Icon name=\"person\" size={16} color={theme.colors.darkGray} />\n          <Text style={styles.orderInfoText}>{item.customer?.name || 'Walk-in Customer'}</Text>\n        </View>\n\n        <View style={styles.orderInfo}>\n          <Icon name=\"badge\" size={16} color={theme.colors.darkGray} />\n          <Text style={styles.orderInfoText}>{item.employee}</Text>\n        </View>\n      </View>\n\n      <View style={styles.orderFooter}>\n        <View style={styles.orderStats}>\n          <Icon name={getPaymentIcon(item.paymentMethod)} size={20} color={theme.colors.darkGray} />\n          <Text style={styles.orderItems}>{item.items} items</Text>\n        </View>\n        <Text style={styles.orderTotal}>£{item.total.toFixed(2)}</Text>\n      </View>\n    </TouchableOpacity>\n  );\n\n  const getOrderStats = () => {\n    const completed = orders.filter(o => o.status === 'completed').length;\n    const _pending = orders.filter(o => o.status === 'pending').length;\n    const refunded = orders.filter(o => o.status === 'refunded').length;\n    const totalRevenue = orders\n      .filter(o => o.status === 'completed')\n      .reduce((__sum, _o) => sum + o.total, 0);\n\n    return { completed, _pending, refunded, totalRevenue };\n  };\n\n  const stats = getOrderStats();\n\n  if (!ENV.FEATURE_ORDERS_HISTORY) {\n    return <ComingSoon />;\n  }\n\n  if (__isLoading) {\n    return <LoadingView message=\"Loading Orders...\" />;\n  }\n\n  const renderEmptyListComponent = () => {\n    if (__error) {\n      return (\n        <View style={styles.emptyState}>\n          <Icon name=\"error-outline\" size={64} color={theme.colors.danger} />\n          <Text style={[styles.emptyStateText, { color: theme.colors.text }]}>\n            Error Loading Orders\n          </Text>\n          <Text style={[styles.emptyStateSubtext, { color: theme.colors.text }]}>{error}</Text>\n          <TouchableOpacity\n            onPress={loadOrders}\n            style={[styles.retryButton, { backgroundColor: theme.colors.primary }]}>\n            <Text style={[styles.retryButtonText, { color: theme.colors.white }]}>Try Again</Text>\n          </TouchableOpacity>\n        </View>\n      );\n    }\n    return (\n      <View style={styles.emptyState}>\n        <Icon name=\"receipt\" size={64} color={theme.colors.lightGray} />\n        <Text style={[styles.emptyStateText, { color: theme.colors.text }]}>No orders found</Text>\n        <Text style={[styles.emptyStateSubtext, { color: theme.colors.text }]}>\n          {searchQuery\n            ? 'Try adjusting your search'\n            : `No orders for selected period. Pull to refresh.`}\n        </Text>\n      </View>\n    );\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <StatusBar backgroundColor={theme.colors.primary} barStyle=\"light-content\" />\n\n      {/* Header */}\n      <View style={styles.header}>\n        <TouchableOpacity style={styles.menuButton} onPress={() => navigation.goBack()}>\n          <Icon name=\"arrow-back\" size={24} color={theme.colors.white} />\n        </TouchableOpacity>\n\n        <View style={styles.headerCenter}>\n          <Text style={styles.headerTitle}>Orders</Text>\n          <Text style={styles.headerSubtitle}>{filteredOrders.length} orders</Text>\n        </View>\n\n        <TouchableOpacity style={styles.headerButton} onPress={() => setShowFilterModal(__true)}>\n          <Icon name=\"filter-list\" size={24} color={theme.colors.white} />\n        </TouchableOpacity>\n      </View>\n\n      {/* Stats Bar */}\n      <View style={styles.statsBar}>\n        <View style={styles.statItem}>\n          <Text style={styles.statValue}>{stats.completed}</Text>\n          <Text style={styles.statLabel}>Completed</Text>\n        </View>\n        <View style={styles.statItem}>\n          <Text style={styles.statValue}>£{stats.totalRevenue.toFixed(2)}</Text>\n          <Text style={styles.statLabel}>Revenue</Text>\n        </View>\n        <View style={styles.statItem}>\n          <Text style={[styles.statValue, { color: theme.colors.warning }]}>{stats.pending}</Text>\n          <Text style={styles.statLabel}>Pending</Text>\n        </View>\n        <View style={styles.statItem}>\n          <Text style={[styles.statValue, { color: theme.colors.danger }]}>{stats.refunded}</Text>\n          <Text style={styles.statLabel}>Refunded</Text>\n        </View>\n      </View>\n\n      {/* Search Bar */}\n      <View style={styles.searchContainer}>\n        <Icon name=\"search\" size={20} color={theme.colors.darkGray} style={styles.searchIcon} />\n        <SimpleTextInput\n          value={searchQuery}\n          onValueChange={setSearchQuery}\n          placeholder=\"Search orders, _customers, or staff...\"\n          style={styles.searchInput}\n          clearButtonMode=\"while-editing\"\n          returnKeyType=\"search\"\n        />\n      </View>\n\n      {/* Date Range Selector */}\n      <ScrollView\n        horizontal\n        showsHorizontalScrollIndicator={false}\n        style={styles.dateRangeContainer}>\n        {['today', 'week', 'month', 'year'].map(range => (\n          <TouchableOpacity\n            key={range}\n            style={[styles.dateRangeButton, dateRange === range && styles.dateRangeButtonActive]}\n            onPress={() => setDateRange(__range)}>\n            <Text style={[styles.dateRangeText, dateRange === range && styles.dateRangeTextActive]}>\n              {range.charAt(0).toUpperCase() + range.slice(1)}\n            </Text>\n          </TouchableOpacity>\n        ))}\n      </ScrollView>\n\n      {/* Orders List */}\n      <FlatList\n        data={filteredOrders}\n        renderItem={renderOrder}\n        keyExtractor={item => item.id}\n        contentContainerStyle={styles.ordersList}\n        refreshControl={\n          <RefreshControl\n            refreshing={refreshing}\n            onRefresh={onRefresh}\n            colors={[theme.colors.primary]}\n            tintColor={theme.colors.primary} // For iOS\n          />\n        }\n        ListEmptyComponent={renderEmptyListComponent} // Updated\n      />\n\n      {/* Filter Modal */}\n      <Modal\n        visible={showFilterModal}\n        animationType=\"slide\"\n        transparent={true}\n        onRequestClose={() => setShowFilterModal(__false)}>\n        <View style={styles.modalOverlay}>\n          <View style={styles.filterModal}>\n            <View style={styles.modalHeader}>\n              <Text style={styles.modalTitle}>Filter Orders</Text>\n              <TouchableOpacity onPress={() => setShowFilterModal(__false)}>\n                <Icon name=\"close\" size={24} color={theme.colors.text} />\n              </TouchableOpacity>\n            </View>\n\n            <View style={styles.filterOptions}>\n              <Text style={styles.filterSectionTitle}>Order Status</Text>\n              {['all', 'completed', 'pending', 'refunded', 'cancelled'].map(filter => (\n                <TouchableOpacity\n                  key={filter}\n                  style={[\n                    styles.filterOption,\n                    selectedFilter === filter && styles.filterOptionActive,\n                  ]}\n                  onPress={() => {\n                    setSelectedFilter(__filter);\n                    setShowFilterModal(__false);\n                  }}>\n                  <Text\n                    style={[\n                      styles.filterOptionText,\n                      selectedFilter === filter && styles.filterOptionTextActive,\n                    ]}>\n                    {filter.charAt(0).toUpperCase() + filter.slice(1)}\n                  </Text>\n                  {selectedFilter === filter && (\n                    <Icon name=\"check\" size={20} color={theme.colors.primary} />\n                  )}\n                </TouchableOpacity>\n              ))}\n            </View>\n          </View>\n        </View>\n      </Modal>\n\n      {/* Order Details Modal */}\n      <Modal visible={showOrderDetails} animationType=\"slide\" presentationStyle=\"pageSheet\">\n        <View style={styles.modalContainer}>\n          <View style={styles.modalHeader}>\n            <TouchableOpacity onPress={() => setShowOrderDetails(__false)}>\n              <Icon name=\"close\" size={24} color={theme.colors.text} />\n            </TouchableOpacity>\n            <Text style={styles.modalTitle}>Order Details</Text>\n            <View style={{ width: 24 }} />\n          </View>\n\n          {selectedOrder && (\n            <ScrollView style={styles.orderDetailsContent}>\n              <View style={styles.orderDetailsHeader}>\n                <Text style={styles.orderDetailsId}>{selectedOrder.id}</Text>\n                <View\n                  style={[\n                    styles.statusBadge,\n                    { backgroundColor: getStatusColor(selectedOrder.status) },\n                  ]}>\n                  <Text style={styles.statusText}>{selectedOrder.status.toUpperCase()}</Text>\n                </View>\n              </View>\n\n              <View style={styles.orderDetailsSection}>\n                <Text style={styles.sectionTitle}>Customer Information</Text>\n                <Text style={styles.detailText}>\n                  Name: {selectedOrder.customerName || 'Walk-in Customer'}\n                </Text>\n                <Text style={styles.detailText}>Date: {formatDate(selectedOrder.date)}</Text>\n                <Text style={styles.detailText}>Served by: {selectedOrder.employee}</Text>\n              </View>\n\n              <View style={styles.orderDetailsSection}>\n                <Text style={styles.sectionTitle}>Payment Information</Text>\n                <View style={styles.paymentRow}>\n                  <Icon\n                    name={getPaymentIcon(selectedOrder.paymentMethod)}\n                    size={20}\n                    color={theme.colors.darkGray}\n                  />\n                  <Text style={styles.detailText}>{selectedOrder.paymentMethod.toUpperCase()}</Text>\n                </View>\n                <Text style={styles.totalText}>Total: £{selectedOrder.total.toFixed(2)}</Text>\n              </View>\n\n              <View style={styles.orderDetailsSection}>\n                <Text style={styles.sectionTitle}>Order Items ({selectedOrder.items})</Text>\n                <Text style={styles.detailText}>• Fish & Chips - £12.99</Text>\n                <Text style={styles.detailText}>• Mushy Peas - £3.50</Text>\n                <Text style={styles.detailText}>• Soft Drink - £2.50</Text>\n                <View style={styles.divider} />\n                <Text style={styles.detailText}>\n                  Subtotal: £{(selectedOrder.total * 0.8).toFixed(2)}\n                </Text>\n                <Text style={styles.detailText}>\n                  VAT (20%): £{(selectedOrder.total * 0.2).toFixed(2)}\n                </Text>\n                <Text style={styles.totalText}>Total: £{selectedOrder.total.toFixed(2)}</Text>\n              </View>\n            </ScrollView>\n          )}\n        </View>\n      </Modal>\n    </SafeAreaView>\n  );\n};\n\nconst _createStyles = (theme: _unknown) =>\n  StyleSheet.create({\n    container: {\n      flex: 1,\n      backgroundColor: theme.colors.background,\n    },\n    header: {\n      backgroundColor: theme.colors.primary,\n      flexDirection: 'row',\n      alignItems: 'center',\n      paddingHorizontal: 16,\n      paddingVertical: 12,\n      height: 60,\n    },\n    menuButton: {\n      padding: 8,\n    },\n    headerCenter: {\n      flex: 1,\n      alignItems: 'center',\n    },\n    headerTitle: {\n      fontSize: 20,\n      fontWeight: 'bold',\n      color: theme.colors.white,\n    },\n    headerSubtitle: {\n      fontSize: 12,\n      color: 'rgba(255, 255, 255, 0.8)',\n    },\n    headerButton: {\n      padding: 8,\n    },\n    statsBar: {\n      flexDirection: 'row',\n      backgroundColor: theme.colors.white,\n      paddingVertical: 16,\n      paddingHorizontal: 20,\n      borderBottomWidth: 1,\n      borderBottomColor: theme.colors.border,\n    },\n    statItem: {\n      flex: 1,\n      alignItems: 'center',\n    },\n    statValue: {\n      fontSize: 20,\n      fontWeight: 'bold',\n      color: theme.colors.primary,\n    },\n    statLabel: {\n      fontSize: 12,\n      color: theme.colors.darkGray,\n      marginTop: 4,\n    },\n    searchContainer: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      backgroundColor: theme.colors.white,\n      paddingHorizontal: 16,\n      paddingVertical: 12,\n      borderBottomWidth: 1,\n      borderBottomColor: theme.colors.border,\n    },\n    searchIcon: {\n      marginRight: 12,\n    },\n    searchInput: {\n      flex: 1,\n      fontSize: 16,\n      color: theme.colors.text,\n    },\n    dateRangeContainer: {\n      backgroundColor: theme.colors.white,\n      paddingVertical: 12,\n      paddingHorizontal: 16,\n      borderBottomWidth: 1,\n      borderBottomColor: theme.colors.border,\n    },\n    dateRangeButton: {\n      paddingHorizontal: 20,\n      paddingVertical: 8,\n      marginRight: 12,\n      borderRadius: 20,\n      backgroundColor: theme.colors.background,\n    },\n    dateRangeButtonActive: {\n      backgroundColor: theme.colors.primary,\n    },\n    dateRangeText: {\n      fontSize: 14,\n      fontWeight: '500',\n      color: theme.colors.text,\n    },\n    dateRangeTextActive: {\n      color: theme.colors.white,\n    },\n    ordersList: {\n      padding: 16,\n    },\n    orderCard: {\n      backgroundColor: theme.colors.white,\n      borderRadius: 12,\n      padding: 16,\n      marginBottom: 12,\n      shadowColor: '#000',\n      shadowOffset: { width: 0, height: 2 },\n      shadowOpacity: 0.05,\n      shadowRadius: 4,\n      elevation: 2,\n    },\n    orderHeader: {\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      alignItems: 'flex-start',\n      marginBottom: 12,\n    },\n    orderId: {\n      fontSize: 16,\n      fontWeight: '600',\n      color: theme.colors.text,\n    },\n    orderDate: {\n      fontSize: 12,\n      color: theme.colors.darkGray,\n      marginTop: 2,\n    },\n    statusBadge: {\n      paddingHorizontal: 12,\n      paddingVertical: 4,\n      borderRadius: 12,\n    },\n    statusText: {\n      fontSize: 12,\n      fontWeight: '600',\n      color: theme.colors.white,\n      textTransform: 'capitalize',\n    },\n    orderBody: {\n      marginBottom: 12,\n    },\n    orderInfo: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      marginBottom: 6,\n    },\n    orderInfoText: {\n      fontSize: 14,\n      color: theme.colors.text,\n      marginLeft: 8,\n    },\n    orderFooter: {\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      paddingTop: 12,\n      borderTopWidth: 1,\n      borderTopColor: theme.colors.border,\n    },\n    orderStats: {\n      flexDirection: 'row',\n      alignItems: 'center',\n    },\n    orderItems: {\n      fontSize: 14,\n      color: theme.colors.darkGray,\n      marginLeft: 8,\n    },\n    orderTotal: {\n      fontSize: 18,\n      fontWeight: 'bold',\n      color: theme.colors.primary,\n    },\n    emptyState: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'center',\n      paddingVertical: 100,\n    },\n    emptyStateText: {\n      fontSize: 18,\n      fontWeight: '500',\n      color: theme.colors.text,\n      marginTop: 16,\n    },\n    emptyStateSubtext: {\n      fontSize: 14,\n      color: theme.colors.darkGray,\n      marginTop: 8,\n    },\n    modalOverlay: {\n      flex: 1,\n      backgroundColor: 'rgba(0, 0, 0, 0.5)',\n      justifyContent: 'flex-end',\n    },\n    filterModal: {\n      backgroundColor: theme.colors.white,\n      borderTopLeftRadius: 24,\n      borderTopRightRadius: 24,\n      paddingTop: 20,\n      paddingBottom: 40,\n    },\n    modalHeader: {\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      paddingHorizontal: 20,\n      marginBottom: 20,\n    },\n    modalTitle: {\n      fontSize: 20,\n      fontWeight: '600',\n      color: theme.colors.text,\n    },\n    filterOptions: {\n      paddingHorizontal: 20,\n    },\n    filterSectionTitle: {\n      fontSize: 16,\n      fontWeight: '600',\n      color: theme.colors.text,\n      marginBottom: 16,\n    },\n    filterOption: {\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      paddingVertical: 16,\n      borderBottomWidth: 1,\n      borderBottomColor: theme.colors.border,\n    },\n    filterOptionActive: {\n      backgroundColor: 'rgba(0, 166, 81, 0.05)',\n    },\n    filterOptionText: {\n      fontSize: 16,\n      color: theme.colors.text,\n    },\n    filterOptionTextActive: {\n      color: theme.colors.primary,\n      fontWeight: '600',\n    },\n    modalContainer: {\n      flex: 1,\n      backgroundColor: theme.colors.white,\n    },\n    orderDetailsContent: {\n      flex: 1,\n      padding: 16,\n    },\n    orderDetailsHeader: {\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      marginBottom: 24,\n    },\n    orderDetailsId: {\n      fontSize: 24,\n      fontWeight: 'bold',\n      color: theme.colors.text,\n    },\n    orderDetailsSection: {\n      marginBottom: 24,\n      backgroundColor: theme.colors.background,\n      borderRadius: 8,\n      padding: 16,\n    },\n    sectionTitle: {\n      fontSize: 18,\n      fontWeight: '600',\n      color: theme.colors.text,\n      marginBottom: 12,\n    },\n    detailText: {\n      fontSize: 16,\n      color: theme.colors.text,\n      marginBottom: 8,\n    },\n    paymentRow: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      gap: 8,\n      marginBottom: 8,\n    },\n    totalText: {\n      fontSize: 18,\n      fontWeight: 'bold',\n      color: theme.colors.primary,\n      marginTop: 8,\n    },\n    divider: {\n      height: 1,\n      backgroundColor: theme.colors.border,\n      marginVertical: 12,\n    },\n    // Styles for LoadingView and Error/Retry will be implicitly handled by LoadingView component\n    // but ensure emptyState styles are robust.\n    // Centered style for the LoadingView/ErrorView wrapper if not using Fullscreen component\n    centered: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n    // Specific retry button style if not part of a generic ErrorDisplayComponent\n    retryButton: {\n      marginTop: 20,\n      // backgroundColor: theme.colors.primary, // Applied inline\n      paddingVertical: 10,\n      paddingHorizontal: 20,\n      borderRadius: 8,\n    },\n    retryButtonText: {\n      // color: theme.colors.white, // Applied inline\n      fontSize: 16,\n      fontWeight: '600',\n    },\n  });\n\nexport default OrdersScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/orders/__tests__/OrdersScreen.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_findByText' is assigned a value but never used.","line":104,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":104,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_searchInput' is assigned a value but never used.","line":110,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":110,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_findByText' is assigned a value but never used.","line":121,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":121,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_searchInput' is assigned a value but never used.","line":127,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":127,"endColumn":23}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { render, waitFor } from '@testing-library/react-native';\nimport OrdersScreen from '../OrdersScreen'; // Adjust path as necessary\nimport DataService from '../../../services/DataService'; // Adjust path\nimport { ThemeProvider, defaultTheme } from '../../../design-system/ThemeProvider'; // Adjust path\n\n// Mock react-navigation\njest.mock('@react-navigation/native', () => {\n  const actualNav = jest.requireActual('@react-navigation/native');\n  return {\n    ...actualNav,\n    useNavigation: () => ({\n      navigate: jest.fn(),\n      goBack: jest.fn(),\n    }),\n    useRoute: () => ({\n      params: {},\n    }),\n  };\n});\n\n// Mock DataService\njest.mock('../../../services/DataService');\n\nconst mockOrders = [\n  {\n    id: 'order1',\n    date: new Date(),\n    customer: { id: 'cust1', name: 'Alice Wonderland', email: 'alice@example.com' },\n    total: 100,\n    items: 2,\n    status: 'completed',\n    paymentMethod: 'card',\n    employee: 'Bob',\n  },\n  {\n    id: 'order2',\n    date: new Date(),\n    // No customer info for this order\n    total: 50,\n    items: 1,\n    status: 'pending',\n    paymentMethod: 'cash',\n    employee: 'Alice',\n  },\n  {\n    id: 'order3',\n    date: new Date(),\n    customer: { id: 'cust2', name: 'Charlie Brown', email: 'charlie@example.com' },\n    total: 75,\n    items: 3,\n    status: 'completed',\n    paymentMethod: 'card',\n    employee: 'Bob',\n  },\n];\n\nconst AllProviders = ({ children }: { children: React.ReactNode }) => (\n  <ThemeProvider theme={defaultTheme}>{children}</ThemeProvider>\n);\n\ndescribe('OrdersScreen', () => {\n  beforeEach(() => {\n    // Reset mocks before each test\n    (DataService.getInstance as jest.Mock).mockReturnValue({\n      getOrders: jest.fn().mockResolvedValue([]), // Default to empty\n    });\n  });\n\n  it('renders loading state initially', () => {\n    const { getByText } = render(<OrdersScreen />, { wrapper: AllProviders });\n    expect(getByText('Loading Orders...')).toBeTruthy();\n  });\n\n  it('fetches and displays orders with customer names', async () => {\n    (DataService.getInstance().getOrders as jest.Mock).mockResolvedValue(__mockOrders);\n\n    const { findByText, getByText } = render(<OrdersScreen />, { wrapper: AllProviders });\n\n    await waitFor(() => expect(DataService.getInstance().getOrders).toHaveBeenCalledWith('today'));\n\n    // Check for customer names\n    expect(await findByText('Alice Wonderland')).toBeTruthy();\n    expect(await findByText('Walk-in Customer')).toBeTruthy(); // For order2 with no customer\n    expect(await findByText('Charlie Brown')).toBeTruthy();\n\n    // Check other details to ensure orders are rendered\n    expect(getByText('order1')).toBeTruthy();\n    expect(getByText('order2')).toBeTruthy();\n    expect(getByText('order3')).toBeTruthy();\n  });\n\n  it('displays \"Walk-in Customer\" when customer name is not available', async () => {\n    (DataService.getInstance().getOrders as jest.Mock).mockResolvedValue([mockOrders[1]]); // Only the order without customer\n\n    const { findByText } = render(<OrdersScreen />, { wrapper: AllProviders });\n\n    expect(await findByText('Walk-in Customer')).toBeTruthy();\n  });\n\n  it('filters orders by search query (customer name)', async () => {\n    (DataService.getInstance().getOrders as jest.Mock).mockResolvedValue(__mockOrders);\n\n    const { getByPlaceholderText, _findByText, queryByText } = render(<OrdersScreen />, {\n      wrapper: _AllProviders,\n    });\n\n    await waitFor(() => expect(DataService.getInstance().getOrders).toHaveBeenCalled());\n\n    const _searchInput = getByPlaceholderText('Search orders, _customers, or staff...');\n    fireEvent.changeText(__searchInput, 'Alice');\n\n    expect(await findByText('Alice Wonderland')).toBeTruthy();\n    expect(queryByText('Charlie Brown')).toBeNull();\n    expect(queryByText('Walk-in Customer')).toBeNull(); // Assuming 'Alice' employee also matches\n  });\n\n  it('filters orders by search query (customer email)', async () => {\n    (DataService.getInstance().getOrders as jest.Mock).mockResolvedValue(__mockOrders);\n\n    const { getByPlaceholderText, _findByText, queryByText } = render(<OrdersScreen />, {\n      wrapper: _AllProviders,\n    });\n\n    await waitFor(() => expect(DataService.getInstance().getOrders).toHaveBeenCalled());\n\n    const _searchInput = getByPlaceholderText('Search orders, _customers, or staff...');\n    fireEvent.changeText(__searchInput, 'alice@example.com');\n\n    expect(await findByText('Alice Wonderland')).toBeTruthy();\n    expect(queryByText('Charlie Brown')).toBeNull();\n  });\n\n  it('shows an error message if fetching orders fails', async () => {\n    (DataService.getInstance().getOrders as jest.Mock).mockRejectedValue(\n      new Error('Network Error'),\n    );\n\n    const { findByText } = render(<OrdersScreen />, { wrapper: AllProviders });\n\n    expect(await findByText('Error Loading Orders')).toBeTruthy();\n    expect(await findByText('Network Error')).toBeTruthy();\n  });\n\n  it('shows \"No orders found\" when there are no orders', async () => {\n    (DataService.getInstance().getOrders as jest.Mock).mockResolvedValue([]);\n\n    const { findByText } = render(<OrdersScreen />, { wrapper: AllProviders });\n\n    expect(await findByText('No orders found')).toBeTruthy();\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/payment/EnhancedPaymentScreen.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ';' expected.","line":385,"column":16,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  ScrollView,\n  Modal,\n  Alert,\n  KeyboardAvoidingView,\n  Platform,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation } from '@react-navigation/native';\nimport useAppStore from '../../store/useAppStore';\nimport useSettingsStore from '../../store/useSettingsStore';\nimport DecimalInput from '../../components/inputs/DecimalInput';\nimport SimpleDecimalInput from '../../components/inputs/SimpleDecimalInput';\nimport SimpleTextInput from '../../components/inputs/SimpleTextInput';\nimport SharedDataStore from '../../services/SharedDataStore';\nimport OrderService from '../../services/OrderService';\nimport { useAuth } from '../../contexts/AuthContext';\n\n// Clover POS Color Scheme\nconst Colors = {\n  primary: '#00A651',\n  secondary: '#0066CC',\n  success: '#00A651',\n  warning: '#FF6B35',\n  danger: '#E74C3C',\n  background: '#F5F5F5',\n  white: '#FFFFFF',\n  lightGray: '#E5E5E5',\n  mediumGray: '#999999',\n  darkGray: '#666666',\n  text: '#333333',\n  lightText: '#666666',\n  border: '#DDDDDD',\n};\n\ninterface PaymentMethod {\n  id: string;\n  name: string;\n  icon: string;\n  color: string;\n  enabled: boolean;\n  requiresAuth: boolean;\n}\n\n// Tip percentage presets\nconst tipPresets = [10, 15, 18, 20, 25];\n\nconst EnhancedPaymentScreen: React.FC = () => {\n  const navigation = useNavigation();\n  const { user } = useAuth();\n  const {\n    cart,\n    clearCart,\n    cartTotal,\n    serviceChargePercentage,\n    addTransactionFee,\n    calculateServiceCharge,\n    calculateTransactionFee,\n    calculateOrderTotal,\n  } = useAppStore();\n  const { paymentMethods, taxConfiguration } = useSettingsStore();\n\n  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState<string>('');\n  const [tipAmount, setTipAmount] = useState(0);\n  const [tipPercentage, setTipPercentage] = useState(0);\n  const [customTipInput, setCustomTipInput] = useState(0);\n  const [showCustomTip, setShowCustomTip] = useState(__false);\n  const [splitPayment, setSplitPayment] = useState(__false);\n  const [splitAmounts, setSplitAmounts] = useState<{ method: string; amount: number }[]>([]);\n  const [cashReceived, setCashReceived] = useState('');\n  const [showCashModal, setShowCashModal] = useState(__false);\n  const [customerName, setCustomerName] = useState('');\n  const [customerEmail, setCustomerEmail] = useState('');\n  const [processing, setProcessing] = useState(__false);\n\n  // Email validation regex\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\n  // Validation state\n  const isNameValid = customerName.trim().length > 0 && customerName.length <= 60;\n  const isEmailValid = emailRegex.test(__customerEmail);\n  const isFormValid = isNameValid && isEmailValid;\n\n  // Platform service charge configuration (real-time from platform owner)\n  const [platformServiceCharge, setPlatformServiceCharge] = useState({\n    enabled: _false,\n    rate: 0,\n    description: 'Loading platform service charge...',\n  });\n\n  // Calculate totals\n  const calculateSubtotal = () => {\n    return cart.reduce((__sum, _item) => sum + item.price * item.quantity, 0);\n  };\n\n  const calculateTax = (subtotal: _number) => {\n    if (!taxConfiguration.vatEnabled) {\n      return 0;\n    }\n    return subtotal * (taxConfiguration.vatRate / 100);\n  };\n\n  const calculatePlatformServiceCharge = (subtotal: _number) => {\n    // Use PLATFORM service charge settings, not restaurant settings (__legacy)\n    if (!platformServiceCharge.enabled) {\n      return 0;\n    }\n    return subtotal * (platformServiceCharge.rate / 100);\n  };\n\n  // Load platform service charge configuration on component mount\n  useEffect(() => {\n    const loadPlatformServiceCharge = async () => {\n      try {\n        const dataStore = SharedDataStore.getInstance();\n        const config = await dataStore.getServiceChargeConfig();\n\n        if (__config) {\n          setPlatformServiceCharge({\n            enabled: config.enabled,\n            rate: config.rate,\n            description: config.description || 'Platform service charge',\n          });\n        } else {\n    // No action needed\n  }\n      } catch (__error) {\n      }\n    };\n\n    loadPlatformServiceCharge();\n\n    // Subscribe to real-time updates\n    const dataStore = SharedDataStore.getInstance();\n    const unsubscribe = dataStore.subscribe('serviceCharge', updatedConfig => {\n      setPlatformServiceCharge({\n        enabled: updatedConfig.enabled,\n        rate: updatedConfig.rate,\n        description: updatedConfig.description || 'Platform service charge',\n      });\n    });\n\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  const calculateGrandTotal = () => {\n    const subtotal = calculateSubtotal();\n    const tax = calculateTax(__subtotal);\n    const serviceCharge = calculateServiceCharge(); // Uses app store calculation\n    const transactionFee = calculateTransactionFee(); // Uses app store calculation\n    return subtotal + tax + serviceCharge + transactionFee + tipAmount;\n  };\n\n  // QR Code Payment State\n  const [showQRModal, setShowQRModal] = useState(__false);\n  const [qrPaymentStatus, setQRPaymentStatus] = useState<\n    'generating' | 'waiting' | 'completed' | 'expired'\n  >('generating');\n  const [qrCode, setQRCode] = useState('');\n\n  // Generate QR Code for payment with error handling\n  const generateQRCode = () => {\n    try {\n      setQRPaymentStatus('generating');\n\n      const paymentData = {\n        amount: calculateGrandTotal(),\n        currency: 'GBP',\n        merchantId: 'fynlo-pos-001',\n        orderId: `ORDER-${Date.now()}`,\n        timestamp: Date.now(),\n      };\n\n      // Create a simple, safe QR string without complex JSON encoding\n      const qrString = `FYNLO-PAY:${paymentData.orderId}:${paymentData.amount}:${paymentData.currency}:${paymentData.timestamp}`;\n      setQRCode(__qrString);\n      setQRPaymentStatus('waiting');\n\n      // Simulate QR code expiration after 5 minutes with safer state checking\n      setTimeout(() => {\n        setQRPaymentStatus(current => {\n          return current === 'waiting' ? 'expired' : current;\n        });\n      }, 300000); // 5 minutes\n\n    } catch (__error) {\n      setQRPaymentStatus('expired');\n      Alert.alert('Error', 'Failed to generate QR code. Please try again.');\n    }\n  };\n\n  // Payment methods configuration\n  const availablePaymentMethods: PaymentMethod[] = [\n    {\n      id: 'qrCode',\n      name: 'QR Payment',\n      icon: 'qr-code-scanner',\n      color: Colors.primary,\n      enabled: paymentMethods?.qrCode?.enabled ?? true,\n      requiresAuth: paymentMethods?.qrCode?.requiresAuth ?? false,\n    },\n    {\n      id: 'cash',\n      name: 'Cash',\n      icon: 'payments',\n      color: Colors.success,\n      enabled: paymentMethods?.cash?.enabled ?? true,\n      requiresAuth: paymentMethods?.cash?.requiresAuth ?? false,\n    },\n    {\n      id: 'card',\n      name: 'Card',\n      icon: 'credit-card',\n      color: Colors.secondary,\n      enabled: paymentMethods?.card?.enabled ?? true,\n      requiresAuth: paymentMethods?.card?.requiresAuth ?? false,\n    },\n    {\n      id: 'applePay',\n      name: 'Apple Pay',\n      icon: 'contactless-payment',\n      color: Colors.text,\n      enabled: paymentMethods?.applePay?.enabled ?? true,\n      requiresAuth: paymentMethods?.applePay?.requiresAuth ?? false,\n    },\n    {\n      id: 'googlePay',\n      name: 'Google Pay',\n      icon: 'contactless-payment',\n      color: Colors.warning,\n      enabled: paymentMethods?.googlePay?.enabled ?? false,\n      requiresAuth: paymentMethods?.googlePay?.requiresAuth ?? false,\n    },\n  ];\n\n  const enabledPaymentMethods = availablePaymentMethods.filter(m => m.enabled);\n\n  useEffect(() => {\n    // Auto-select payment method if only one is enabled\n    if (enabledPaymentMethods.length === 1) {\n      setSelectedPaymentMethod(enabledPaymentMethods[0].id);\n    } else if (enabledPaymentMethods.length > 1 && !selectedPaymentMethod) {\n      // Default to QR code if available, otherwise first available method\n      const qrMethod = enabledPaymentMethods.find(m => m.id === 'qrCode');\n      setSelectedPaymentMethod(qrMethod ? qrMethod.id : enabledPaymentMethods[0].id);\n    }\n  }, [enabledPaymentMethods, selectedPaymentMethod]);\n\n  const handleTipPreset = (percentage: _number) => {\n    const subtotal = calculateSubtotal();\n    const tip = subtotal * (percentage / 100);\n    setTipAmount(__tip);\n    setTipPercentage(__percentage);\n    setShowCustomTip(__false);\n    setCustomTipInput('');\n  };\n\n  const handleCustomTip = () => {\n    const amount = parseFloat(__customTipInput) || 0;\n    setTipAmount(__amount);\n    const subtotal = calculateSubtotal();\n    setTipPercentage(subtotal > 0 ? Math.round((amount / subtotal) * 100) : 0);\n  };\n\n  const handleNoTip = () => {\n    setTipAmount(0);\n    setTipPercentage(0);\n    setShowCustomTip(__false);\n    setCustomTipInput('');\n  };\n\n  const handlePaymentMethodSelect = (methodId: _string) => {\n    const method = availablePaymentMethods.find(m => m.id === methodId);\n    if (method?.requiresAuth) {\n      Alert.alert(\n        'Authorization Required',\n        'Manager authorization is required for this payment method.',\n        [\n          { text: 'Cancel', style: 'cancel' },\n          {\n            text: 'Authorize',\n            onPress: () => {\n              // In a real app, this would prompt for manager PIN\n              setSelectedPaymentMethod(__methodId);\n              if (methodId === 'cash') {\n                setShowCashModal(__true);\n              } else if (methodId === 'qrCode') {\n                setShowQRModal(__true);\n                generateQRCode();\n              } else if (methodId === 'card') {\n                Alert.alert(\n                  'Card Payment',\n                  'Insert or swipe card, or tap for contactless payment.',\n                );\n              } else if (methodId === 'applePay') {\n                Alert.alert('Apple Pay', 'Hold near reader and confirm with Touch ID or Face ID.');\n              } else if (methodId === 'googlePay') {\n                Alert.alert('Google Pay', 'Hold near reader and confirm payment.');\n              }\n            },\n          },\n        ],\n      );\n    } else {\n      setSelectedPaymentMethod(__methodId);\n      if (methodId === 'cash') {\n        setShowCashModal(__true);\n      } else if (methodId === 'qrCode') {\n        setShowQRModal(__true);\n        generateQRCode();\n      } else if (methodId === 'card') {\n        // Card payment handling - could show card reader interface\n        Alert.alert('Card Payment', 'Insert or swipe card, or tap for contactless payment.');\n      } else if (methodId === 'applePay') {\n        // Apple Pay handling\n        Alert.alert('Apple Pay', 'Hold near reader and confirm with Touch ID or Face ID.');\n      } else if (methodId === 'googlePay') {\n        // Google Pay handling\n        Alert.alert('Google Pay', 'Hold near reader and confirm payment.');\n      }\n    }\n  };\n\n  const handleSplitPayment = () => {\n    if (user?.subscription_plan === 'alpha') {\n      Alert.alert(\n        'Upgrade Required',\n        'Split payment is available with Beta and Omega plans. Upgrade your subscription to unlock this feature.',\n        [{ text: 'OK' }],\n      );\n      return;\n    }\n    setSplitPayment(__true);\n    setSplitAmounts([\n      { method: 'card', amount: calculateGrandTotal() / 2 },\n      { method: 'cash', amount: calculateGrandTotal() / 2 },\n    ]);\n  };\n\n  const handleProcessPayment = async () => {\n    if (!selectedPaymentMethod && !splitPayment) {\n      Alert.alert('Select Payment Method', 'Please select a payment method to continue.');\n      return;\n    }\n\n    if (!isFormValid) {\n      Alert.alert('Required Information', 'Please enter valid customer name and email address.');\n      return;\n    }\n\n    setProcessing(__true);\n\n    try {\n      const orderService = OrderService.getInstance();\n      const subtotal = calculateSubtotal();\n      const tax = calculateTax(__subtotal);\n      const serviceCharge = calculateServiceCharge();\n      const transactionFee = calculateTransactionFee();\n      const total = calculateGrandTotal();\n\n      const orderData = {\n        items: _cart,\n        subtotal,\n        tax,\n        total,\n        serviceCharge,\n        transactionFee,\n        tipAmount,\n        customerMetadata: {\n          name: customerName.trim(),\n          email: customerEmail.trim().toLowerCase(),\n        },\n        paymentMethod: _selectedPaymentMethod,\n        notes: _undefined,\n      };\n\n        total,\n        customer: _customerEmail,\n        method: _selectedPaymentMethod,\n      });\n\n      const savedOrder = await orderService.saveOrder(__orderData);\n\n      setProcessing(__false);\n\n      Alert.alert(\n        'Payment Successful',\n        `Payment of £${total.toFixed(\n          2,\n        )} processed successfully!\\n\\nReceipt will be sent to ${customerEmail}`,\n        [\n          {\n            text: 'OK',\n            onPress: () => {\n              clearCart();\n              navigation.goBack();\n            },\n          },\n        ],\n      );\n    } catch (__error) {\n      setProcessing(__false);\n\n      Alert.alert(\n        'Payment Failed',\n        'Unable to process payment. Please try again or contact support.',\n        [{ text: 'OK' }],\n      );\n    }\n  };\n\n  const calculateChange = () => {\n    const received = cashReceived === '' ? 0 : parseFloat(__cashReceived) || 0;\n    const total = calculateGrandTotal();\n    const change = received - total;\n    return Math.max(0, isNaN(__change) ? 0 : _change);\n  };\n\n  const CashPaymentModal = () => (\n    <Modal\n      visible={showCashModal}\n      transparent\n      animationType=\"slide\"\n      onRequestClose={() => setShowCashModal(__false)}>\n      <KeyboardAvoidingView\n        style={styles.modalOverlay}\n        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}>\n        <View style={styles.cashModalContent}>\n          <View style={styles.cashModalHeader}>\n            <Text style={styles.cashModalTitle}>Cash Payment</Text>\n            <TouchableOpacity onPress={() => setShowCashModal(__false)}>\n              <Icon name=\"close\" size={24} color={Colors.darkGray} />\n            </TouchableOpacity>\n          </View>\n\n          <View style={styles.cashModalBody}>\n            <View style={styles.amountDue}>\n              <Text style={styles.amountDueLabel}>Amount Due</Text>\n              <Text style={styles.amountDueValue}>£{calculateGrandTotal().toFixed(2)}</Text>\n            </View>\n\n            <View style={styles.cashInputSection}>\n              <SimpleDecimalInput\n                label=\"Cash Received\"\n                value={parseFloat(__cashReceived) || 0}\n                onValueChange={value => setCashReceived(value.toString())}\n                placeholder=\"0.00\"\n                suffix=\"£\"\n                maxValue={9999.99}\n                style={styles.cashInput}\n              />\n            </View>\n\n            <View style={styles.quickCashButtons}>\n              {[20, 50, 100, 200].map(amount => (\n                <TouchableOpacity\n                  key={amount}\n                  style={styles.quickCashButton}\n                  onPress={() => setCashReceived(amount.toString())}>\n                  <Text style={styles.quickCashButtonText}>£{amount}</Text>\n                </TouchableOpacity>\n              ))}\n            </View>\n\n            <View style={styles.changeSection}>\n              <Text style={styles.changeLabel}>Change Due</Text>\n              <Text\n                style={[styles.changeValue, calculateChange() > 0 && styles.changeValuePositive]}>\n                £{calculateChange().toFixed(2)}\n              </Text>\n            </View>\n          </View>\n\n          <TouchableOpacity\n            style={[\n              styles.cashConfirmButton,\n              (!cashReceived || parseFloat(__cashReceived) < calculateGrandTotal()) &&\n                styles.disabledButton,\n            ]}\n            onPress={() => {\n              if (parseFloat(__cashReceived) >= calculateGrandTotal()) {\n                setShowCashModal(__false);\n                handleProcessPayment();\n              }\n            }}\n            disabled={!cashReceived || parseFloat(__cashReceived) < calculateGrandTotal()}>\n            <Text style={styles.cashConfirmButtonText}>Confirm Payment</Text>\n          </TouchableOpacity>\n        </View>\n      </KeyboardAvoidingView>\n    </Modal>\n  );\n\n  const QRPaymentModal = () => (\n    <Modal\n      visible={showQRModal}\n      transparent\n      animationType=\"slide\"\n      onRequestClose={() => setShowQRModal(__false)}>\n      <View style={styles.modalOverlay}>\n        <View style={styles.qrModalContent}>\n          <View style={styles.qrModalHeader}>\n            <Text style={styles.qrModalTitle}>QR Code Payment</Text>\n            <TouchableOpacity onPress={() => setShowQRModal(__false)}>\n              <Icon name=\"close\" size={24} color={Colors.darkGray} />\n            </TouchableOpacity>\n          </View>\n\n          <View style={styles.qrModalBody}>\n            <View style={styles.amountDue}>\n              <Text style={styles.amountDueLabel}>Amount Due</Text>\n              <Text style={styles.amountDueValue}>£{calculateGrandTotal().toFixed(2)}</Text>\n            </View>\n\n            {qrPaymentStatus === 'generating' && (\n              <View style={styles.qrSection}>\n                <View style={styles.qrLoadingContainer}>\n                  <Icon name=\"hourglass-empty\" size={48} color={Colors.lightText} />\n                  <Text style={styles.qrStatusText}>Generating QR Code...</Text>\n                </View>\n              </View>\n            )}\n\n            {qrPaymentStatus === 'waiting' && (\n              <View style={styles.qrSection}>\n                <View style={styles.qrCodeContainer}>\n                  {/* QR Code with Error Boundary */}\n                  <View style={styles.qrCodePlaceholder}>\n                    {qrCode ? (\n                      <Icon name=\"qr-code\" size={120} color={Colors.primary} />\n                    ) : (\n                      <Icon name=\"error\" size={120} color={Colors.danger} />\n                    )}\n                  </View>\n                  <Text style={styles.qrCodeText}>\n                    {qrCode\n                      ? 'Scan this QR code with your banking app'\n                      : 'QR Code generation failed'}\n                  </Text>\n                  <Text style={styles.qrOrderId}>\n                    Order ID: {qrCode ? qrCode.slice(-12) : 'N/A'}\n                  </Text>\n                </View>\n\n                <View style={styles.qrInstructions}>\n                  <Text style={styles.instructionTitle}>How to pay:</Text>\n                  <Text style={styles.instructionText}>1. Open your banking app</Text>\n                  <Text style={styles.instructionText}>2. Select \"Pay by QR\" or \"Scan to Pay\"</Text>\n                  <Text style={styles.instructionText}>3. Scan this QR code</Text>\n                  <Text style={styles.instructionText}>4. Confirm the payment</Text>\n                </View>\n\n                <View style={styles.paymentBenefits}>\n                  <Text style={styles.benefitsTitle}>Why QR Payment?</Text>\n                  <View style={styles.benefitRow}>\n                    <Icon name=\"security\" size={16} color={Colors.success} />\n                    <Text style={styles.benefitText}>Secure & Safe</Text>\n                  </View>\n                  <View style={styles.benefitRow}>\n                    <Icon name=\"speed\" size={16} color={Colors.success} />\n                    <Text style={styles.benefitText}>Instant Payment</Text>\n                  </View>\n                  <View style={styles.benefitRow}>\n                    <Icon name=\"money-off\" size={16} color={Colors.success} />\n                    <Text style={styles.benefitText}>Lowest Fees (1.2%)</Text>\n                  </View>\n                </View>\n              </View>\n            )}\n\n            {qrPaymentStatus === 'expired' && (\n              <View style={styles.qrSection}>\n                <View style={styles.qrErrorContainer}>\n                  <Icon name=\"access-time\" size={48} color={Colors.warning} />\n                  <Text style={styles.qrStatusText}>QR Code Expired</Text>\n                  <Text style={styles.qrSubText}>Please generate a new QR code</Text>\n                  <TouchableOpacity style={styles.regenerateButton} onPress={generateQRCode}>\n                    <Text style={styles.regenerateButtonText}>Generate New QR</Text>\n                  </TouchableOpacity>\n                </View>\n              </View>\n            )}\n\n            {qrPaymentStatus === 'completed' && (\n              <View style={styles.qrSection}>\n                <View style={styles.qrSuccessContainer}>\n                  <Icon name=\"check-circle\" size={48} color={Colors.success} />\n                  <Text style={styles.qrStatusText}>Payment Received!</Text>\n                  <Text style={styles.qrSubText}>Processing your order...</Text>\n                </View>\n              </View>\n            )}\n          </View>\n\n          <View style={styles.qrModalFooter}>\n            <TouchableOpacity style={styles.qrCancelButton} onPress={() => setShowQRModal(__false)}>\n              <Text style={styles.qrCancelButtonText}>Cancel</Text>\n            </TouchableOpacity>\n\n            {qrPaymentStatus === 'waiting' && (\n              <TouchableOpacity\n                style={styles.qrTestButton}\n                onPress={() => {\n                  // Simulate successful payment for demo\n                  setQRPaymentStatus('completed');\n                  setTimeout(() => {\n                    setShowQRModal(__false);\n                    handleProcessPayment();\n                  }, 2000);\n                }}>\n                <Text style={styles.qrTestButtonText}>Simulate Payment</Text>\n              </TouchableOpacity>\n            )}\n          </View>\n        </View>\n      </View>\n    </Modal>\n  );\n\n  return (\n    <View style={styles.container}>\n      {/* Header */}\n      <View style={styles.header}>\n        <TouchableOpacity onPress={() => navigation.goBack()} style={styles.backButton}>\n          <Icon name=\"arrow-back\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n        <Text style={styles.headerTitle}>Payment</Text>\n        <View style={styles.headerSpacer} />\n      </View>\n\n      <ScrollView\n        style={styles.content}\n        contentContainerStyle={styles.scrollContent}\n        showsVerticalScrollIndicator={false}>\n        {/* Order Summary */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Order Summary</Text>\n          <View style={styles.summaryCard}>\n            <View style={styles.summaryRow}>\n              <Text style={styles.summaryLabel}>Subtotal ({cart.length} items)</Text>\n              <Text style={styles.summaryValue}>£{calculateSubtotal().toFixed(2)}</Text>\n            </View>\n\n            {taxConfiguration.vatEnabled && (\n              <View style={styles.summaryRow}>\n                <Text style={styles.summaryLabel}>VAT ({taxConfiguration.vatRate}%)</Text>\n                <Text style={styles.summaryValue}>\n                  £{calculateTax(calculateSubtotal()).toFixed(2)}\n                </Text>\n              </View>\n            )}\n\n            {serviceChargePercentage > 0 && (\n              <View style={styles.summaryRow}>\n                <Text style={styles.summaryLabel}>Service Charge ({serviceChargePercentage}%)</Text>\n                <Text style={styles.summaryValue}>£{calculateServiceCharge().toFixed(2)}</Text>\n              </View>\n            )}\n\n            {addTransactionFee && (\n              <View style={styles.summaryRow}>\n                <Text style={styles.summaryLabel}>Processing Fee (2.9%)</Text>\n                <Text style={styles.summaryValue}>£{calculateTransactionFee().toFixed(2)}</Text>\n              </View>\n            )}\n\n            {tipAmount > 0 && (\n              <View style={styles.summaryRow}>\n                <Text style={styles.summaryLabel}>Tip ({tipPercentage}%)</Text>\n                <Text style={styles.summaryValue}>£{tipAmount.toFixed(2)}</Text>\n              </View>\n            )}\n\n            <View style={[styles.summaryRow, styles.totalRow]}>\n              <Text style={styles.totalLabel}>Total</Text>\n              <Text style={styles.totalValue}>£{calculateGrandTotal().toFixed(2)}</Text>\n            </View>\n          </View>\n        </View>\n\n        {/* Tip Selection */}\n        {paymentMethods?.card?.tipEnabled && selectedPaymentMethod === 'card' && (\n          <View style={styles.section}>\n            <Text style={styles.sectionTitle}>Add Tip</Text>\n            <View style={styles.tipButtons}>\n              {tipPresets.map(percentage => (\n                <TouchableOpacity\n                  key={percentage}\n                  style={[styles.tipButton, tipPercentage === percentage && styles.tipButtonActive]}\n                  onPress={() => handleTipPreset(__percentage)}>\n                  <Text\n                    style={[\n                      styles.tipButtonText,\n                      tipPercentage === percentage && styles.tipButtonTextActive,\n                    ]}>\n                    {percentage}%\n                  </Text>\n                  <Text\n                    style={[\n                      styles.tipButtonAmount,\n                      tipPercentage === percentage && styles.tipButtonAmountActive,\n                    ]}>\n                    £{((calculateSubtotal() * percentage) / 100).toFixed(2)}\n                  </Text>\n                </TouchableOpacity>\n              ))}\n            </View>\n\n            <View style={styles.tipActions}>\n              <TouchableOpacity\n                style={styles.customTipButton}\n                onPress={() => setShowCustomTip(!showCustomTip)}>\n                <Icon name=\"edit\" size={20} color={Colors.primary} />\n                <Text style={styles.customTipButtonText}>Custom Amount</Text>\n              </TouchableOpacity>\n\n              <TouchableOpacity style={styles.noTipButton} onPress={handleNoTip}>\n                <Text style={styles.noTipButtonText}>No Tip</Text>\n              </TouchableOpacity>\n            </View>\n\n            {showCustomTip && (\n              <View style={styles.customTipInput}>\n                <DecimalInput\n                  label=\"Custom Tip Amount\"\n                  value={customTipInput}\n                  onValueChange={value => {\n                    setCustomTipInput(__value);\n                    setTipAmount(__value);\n                    setTipPercentage(0); // Clear percentage when using custom amount\n                  }}\n                  suffix=\"£\"\n                  maxValue={1000}\n                  minValue={0}\n                  decimalPlaces={2}\n                  placeholder=\"5.00\"\n                  style={{ marginVertical: 8 }}\n                />\n              </View>\n            )}\n          </View>\n        )}\n\n        {/* Payment Methods */}\n        <View style={styles.section}>\n          <View style={styles.sectionHeader}>\n            <Text style={styles.sectionTitle}>Payment Method</Text>\n            {enabledPaymentMethods.length > 1 && user?.subscription_plan !== 'alpha' && (\n              <TouchableOpacity style={styles.splitPaymentButton} onPress={handleSplitPayment}>\n                <Icon name=\"call-split\" size={20} color={Colors.secondary} />\n                <Text style={styles.splitPaymentText}>Split Payment</Text>\n              </TouchableOpacity>\n            )}\n          </View>\n\n          {!splitPayment ? (\n            <View style={styles.paymentMethods}>\n              {enabledPaymentMethods.map(method => (\n                <TouchableOpacity\n                  key={method.id}\n                  style={[\n                    styles.paymentMethod,\n                    selectedPaymentMethod === method.id && styles.paymentMethodActive,\n                  ]}\n                  onPress={() => handlePaymentMethodSelect(method.id)}>\n                  <Icon\n                    name={method.icon}\n                    size={32}\n                    color={selectedPaymentMethod === method.id ? Colors.white : method.color}\n                  />\n                  <Text\n                    style={[\n                      styles.paymentMethodName,\n                      selectedPaymentMethod === method.id && styles.paymentMethodNameActive,\n                    ]}>\n                    {method.name}\n                  </Text>\n                  {method.requiresAuth && (\n                    <Icon\n                      name=\"lock\"\n                      size={16}\n                      color={selectedPaymentMethod === method.id ? Colors.white : Colors.warning}\n                      style={styles.authIcon}\n                    />\n                  )}\n                </TouchableOpacity>\n              ))}\n            </View>\n          ) : (\n            <View style={styles.splitPaymentSection}>\n              <Text style={styles.splitPaymentInfo}>\n                Split total of £{calculateGrandTotal().toFixed(2)} between methods:\n              </Text>\n              {splitAmounts.map((__split, _index) => (\n                <View key={index} style={styles.splitAmountRow}>\n                  <DecimalInput\n                    label={`${\n                      availablePaymentMethods.find(m => m.id === split.method)?.name || 'Payment'\n                    } Amount`}\n                    value={split.amount}\n                    onValueChange={value => {\n                      const newSplits = [...splitAmounts];\n                      newSplits[index].amount = value;\n                      setSplitAmounts(__newSplits);\n                    }}\n                    suffix=\"£\"\n                    maxValue={10000}\n                    minValue={0}\n                    decimalPlaces={2}\n                    placeholder=\"0.00\"\n                    style={{ marginVertical: 4, flex: 1 }}\n                  />\n                </View>\n              ))}\n              <TouchableOpacity\n                style={styles.cancelSplitButton}\n                onPress={() => {\n                  setSplitPayment(__false);\n                  setSplitAmounts([]);\n                }}>\n                <Text style={styles.cancelSplitText}>Cancel Split</Text>\n              </TouchableOpacity>\n            </View>\n          )}\n        </View>\n\n        {/* Customer Information - Required for Email Receipt */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Customer Information</Text>\n          <View style={styles.customerForm}>\n            <View style={styles.customerField}>\n              <SimpleTextInput\n                value={customerName}\n                onValueChange={setCustomerName}\n                placeholder=\"Customer Name (__required)\"\n                maxLength={60}\n                style={[\n                  styles.customerInput,\n                  customerName.length > 0 && !isNameValid && styles.inputError,\n                ]}\n                clearButtonMode=\"while-editing\"\n                autoCapitalize=\"words\"\n              />\n              {customerName.length > 0 && !isNameValid && (\n                <Text style={styles.validationError}>\n                  {customerName.length > 60\n                    ? 'Name too long (max 60 characters)'\n                    : 'Name is required'}\n                </Text>\n              )}\n            </View>\n\n            <View style={styles.customerField}>\n              <SimpleTextInput\n                value={customerEmail}\n                onValueChange={setCustomerEmail}\n                placeholder=\"Email Address (required for receipt)\"\n                keyboardType=\"email-address\"\n                autoCapitalize=\"none\"\n                autoComplete=\"email\"\n                style={[\n                  styles.customerInput,\n                  customerEmail.length > 0 && !isEmailValid && styles.inputError,\n                ]}\n                clearButtonMode=\"while-editing\"\n              />\n              {customerEmail.length > 0 && !isEmailValid && (\n                <Text style={styles.validationError}>Please enter a valid email address</Text>\n              )}\n            </View>\n\n            <View style={styles.receiptNote}>\n              <Icon name=\"mail\" size={16} color={Colors.lightText} />\n              <Text style={styles.receiptNoteText}>Receipt will be sent via email only</Text>\n            </View>\n          </View>\n        </View>\n      </ScrollView>\n\n      {/* Process Payment Button */}\n      <View style={styles.footer}>\n        <TouchableOpacity\n          style={[styles.processButton, processing && styles.processingButton]}\n          onPress={handleProcessPayment}\n          disabled={processing || (!selectedPaymentMethod && !splitPayment) || !isFormValid}>\n          {processing ? (\n            <>\n              <Icon name=\"hourglass-empty\" size={24} color={Colors.white} />\n              <Text style={styles.processButtonText}>Processing...</Text>\n            </>\n          ) : (\n            <>\n              <Icon name=\"payment\" size={24} color={Colors.white} />\n              <Text style={styles.processButtonText}>\n                Process Payment - £{calculateGrandTotal().toFixed(2)}\n              </Text>\n            </>\n          )}\n        </TouchableOpacity>\n      </View>\n\n      {/* Cash Payment Modal */}\n      <CashPaymentModal />\n\n      {/* QR Payment Modal */}\n      <QRPaymentModal />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.primary,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    paddingTop: 48,\n  },\n  backButton: {\n    padding: 8,\n  },\n  headerTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.white,\n  },\n  headerSpacer: {\n    width: 40,\n  },\n  content: {\n    flex: 1,\n  },\n  scrollContent: {\n    paddingBottom: 140, // Add bottom padding to account for absolute positioned footer (16+16+32+padding)\n  },\n  section: {\n    backgroundColor: Colors.white,\n    marginVertical: 8,\n    paddingVertical: 16,\n  },\n  sectionHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingHorizontal: 16,\n    marginBottom: 16,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n    paddingHorizontal: 16,\n    marginBottom: 16,\n  },\n  summaryCard: {\n    paddingHorizontal: 16,\n  },\n  summaryRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 8,\n  },\n  summaryLabel: {\n    fontSize: 14,\n    color: Colors.lightText,\n  },\n  summaryValue: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.text,\n  },\n  totalRow: {\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n    paddingTop: 8,\n    marginTop: 4,\n  },\n  totalLabel: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  totalValue: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.primary,\n  },\n  tipButtons: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    paddingHorizontal: 16,\n    gap: 12,\n  },\n  tipButton: {\n    flex: 1,\n    minWidth: 80,\n    backgroundColor: Colors.background,\n    borderRadius: 8,\n    paddingVertical: 12,\n    alignItems: 'center',\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  tipButtonActive: {\n    backgroundColor: Colors.primary,\n    borderColor: Colors.primary,\n  },\n  tipButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  tipButtonTextActive: {\n    color: Colors.white,\n  },\n  tipButtonAmount: {\n    fontSize: 12,\n    color: Colors.lightText,\n    marginTop: 2,\n  },\n  tipButtonAmountActive: {\n    color: Colors.white,\n  },\n  tipActions: {\n    flexDirection: 'row',\n    paddingHorizontal: 16,\n    marginTop: 16,\n    gap: 12,\n  },\n  customTipButton: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    gap: 8,\n    paddingVertical: 12,\n    borderRadius: 8,\n    backgroundColor: Colors.background,\n    borderWidth: 1,\n    borderColor: Colors.primary,\n  },\n  customTipButtonText: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.primary,\n  },\n  noTipButton: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 12,\n    borderRadius: 8,\n    backgroundColor: Colors.background,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  noTipButtonText: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.darkGray,\n  },\n  customTipInput: {\n    paddingHorizontal: 16,\n    marginTop: 16,\n  },\n  customTipLabel: {\n    fontSize: 14,\n    color: Colors.lightText,\n    marginBottom: 8,\n  },\n  customTipRow: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  customTipField: {\n    flex: 1,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 8,\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    fontSize: 16,\n    color: Colors.text,\n  },\n  customTipApply: {\n    backgroundColor: Colors.primary,\n    borderRadius: 8,\n    paddingHorizontal: 24,\n    justifyContent: 'center',\n  },\n  customTipApplyText: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: Colors.white,\n  },\n  splitPaymentButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 6,\n  },\n  splitPaymentText: {\n    fontSize: 14,\n    color: Colors.secondary,\n    fontWeight: '500',\n  },\n  paymentMethods: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    paddingHorizontal: 16,\n    gap: 12,\n  },\n  paymentMethod: {\n    flex: 1,\n    minWidth: 100,\n    backgroundColor: Colors.background,\n    borderRadius: 12,\n    paddingVertical: 20,\n    alignItems: 'center',\n    borderWidth: 2,\n    borderColor: Colors.border,\n    position: 'relative',\n  },\n  paymentMethodActive: {\n    backgroundColor: Colors.primary,\n    borderColor: Colors.primary,\n  },\n  paymentMethodName: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.text,\n    marginTop: 8,\n  },\n  paymentMethodNameActive: {\n    color: Colors.white,\n  },\n  authIcon: {\n    position: 'absolute',\n    top: 8,\n    right: 8,\n  },\n  splitPaymentSection: {\n    paddingHorizontal: 16,\n  },\n  splitPaymentInfo: {\n    fontSize: 14,\n    color: Colors.lightText,\n    marginBottom: 16,\n  },\n  splitAmountRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    marginBottom: 12,\n  },\n  splitMethodName: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.text,\n  },\n  splitAmountInput: {\n    width: 120,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 8,\n    paddingHorizontal: 12,\n    paddingVertical: 8,\n    fontSize: 16,\n    color: Colors.text,\n    textAlign: 'right',\n  },\n  cancelSplitButton: {\n    alignSelf: 'center',\n    marginTop: 8,\n  },\n  cancelSplitText: {\n    fontSize: 14,\n    color: Colors.danger,\n    fontWeight: '500',\n  },\n  receiptOptions: {\n    paddingHorizontal: 16,\n  },\n  receiptOption: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 12,\n    paddingVertical: 8,\n  },\n  receiptOptionActive: {\n    // Optional active state styling\n  },\n  receiptOptionText: {\n    fontSize: 16,\n    color: Colors.text,\n  },\n  emailReceiptSection: {\n    marginTop: 8,\n  },\n  emailInput: {\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 8,\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    fontSize: 16,\n    color: Colors.text,\n    marginTop: 8,\n    marginLeft: 36,\n  },\n  footer: {\n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n    right: 0,\n    backgroundColor: Colors.white,\n    paddingHorizontal: 16,\n    paddingVertical: 16,\n    paddingBottom: 32,\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n  },\n  processButton: {\n    backgroundColor: Colors.primary,\n    borderRadius: 12,\n    paddingVertical: 16,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    gap: 12,\n  },\n  processingButton: {\n    backgroundColor: Colors.mediumGray,\n  },\n  processButtonText: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.white,\n  },\n  disabledButton: {\n    opacity: 0.5,\n  },\n  // Cash Modal Styles\n  modalOverlay: {\n    flex: 1,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  cashModalContent: {\n    backgroundColor: Colors.white,\n    borderRadius: 16,\n    width: '90%',\n    maxWidth: 400,\n  },\n  cashModalHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    padding: 20,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  cashModalTitle: {\n    fontSize: 20,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  cashModalBody: {\n    padding: 20,\n  },\n  amountDue: {\n    alignItems: 'center',\n    marginBottom: 24,\n  },\n  amountDueLabel: {\n    fontSize: 16,\n    color: Colors.lightText,\n    marginBottom: 8,\n  },\n  amountDueValue: {\n    fontSize: 32,\n    fontWeight: 'bold',\n    color: Colors.primary,\n  },\n  cashInputSection: {\n    marginBottom: 20,\n  },\n  cashInputLabel: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.text,\n    marginBottom: 8,\n    textAlign: 'center',\n  },\n  cashInput: {\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 8,\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    fontSize: 24,\n    fontWeight: '600',\n    color: Colors.text,\n    textAlign: 'center',\n  },\n  quickCashButtons: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    flexWrap: 'wrap',\n    gap: 8,\n    marginBottom: 24,\n  },\n  quickCashButton: {\n    backgroundColor: Colors.background,\n    borderRadius: 8,\n    paddingVertical: 12,\n    paddingHorizontal: 20,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  quickCashButtonText: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.text,\n  },\n  changeSection: {\n    alignItems: 'center',\n    paddingVertical: 16,\n    backgroundColor: Colors.background,\n    borderRadius: 8,\n  },\n  changeLabel: {\n    fontSize: 16,\n    color: Colors.lightText,\n    marginBottom: 8,\n  },\n  changeValue: {\n    fontSize: 28,\n    fontWeight: 'bold',\n    color: Colors.text,\n  },\n  changeValuePositive: {\n    color: Colors.success,\n  },\n  cashConfirmButton: {\n    backgroundColor: Colors.primary,\n    borderRadius: 8,\n    paddingVertical: 16,\n    margin: 20,\n    marginTop: 0,\n    alignItems: 'center',\n  },\n  cashConfirmButtonText: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.white,\n  },\n\n  // QR Modal Styles\n  qrModalContent: {\n    backgroundColor: Colors.white,\n    borderRadius: 16,\n    width: '95%',\n    maxWidth: 450,\n    maxHeight: '85%',\n  },\n  qrModalHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    padding: 20,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  qrModalTitle: {\n    fontSize: 20,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  qrModalBody: {\n    padding: 20,\n    maxHeight: 500,\n  },\n  qrSection: {\n    alignItems: 'center',\n    marginBottom: 24,\n  },\n  qrLoadingContainer: {\n    alignItems: 'center',\n    paddingVertical: 40,\n  },\n  qrCodeContainer: {\n    alignItems: 'center',\n    marginBottom: 24,\n  },\n  qrCodePlaceholder: {\n    width: 180,\n    height: 180,\n    backgroundColor: Colors.background,\n    borderRadius: 12,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginBottom: 16,\n    borderWidth: 2,\n    borderColor: Colors.primary,\n  },\n  qrCodeText: {\n    fontSize: 16,\n    color: Colors.text,\n    textAlign: 'center',\n    marginBottom: 8,\n  },\n  qrOrderId: {\n    fontSize: 14,\n    color: Colors.lightText,\n    fontFamily: 'monospace',\n  },\n  qrStatusText: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n    textAlign: 'center',\n    marginTop: 16,\n  },\n  qrSubText: {\n    fontSize: 14,\n    color: Colors.lightText,\n    textAlign: 'center',\n    marginTop: 8,\n  },\n  qrInstructions: {\n    backgroundColor: Colors.background,\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 16,\n    width: '100%',\n  },\n  instructionTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 12,\n  },\n  instructionText: {\n    fontSize: 14,\n    color: Colors.lightText,\n    marginBottom: 6,\n    paddingLeft: 8,\n  },\n  paymentBenefits: {\n    backgroundColor: Colors.background,\n    borderRadius: 12,\n    padding: 16,\n    width: '100%',\n  },\n  benefitsTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 12,\n  },\n  benefitRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  benefitText: {\n    fontSize: 14,\n    color: Colors.text,\n    marginLeft: 8,\n  },\n  qrErrorContainer: {\n    alignItems: 'center',\n    paddingVertical: 40,\n  },\n  qrSuccessContainer: {\n    alignItems: 'center',\n    paddingVertical: 40,\n  },\n  regenerateButton: {\n    backgroundColor: Colors.primary,\n    borderRadius: 8,\n    paddingVertical: 12,\n    paddingHorizontal: 24,\n    marginTop: 16,\n  },\n  regenerateButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.white,\n  },\n  qrModalFooter: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    padding: 20,\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n  },\n  qrCancelButton: {\n    flex: 1,\n    backgroundColor: Colors.background,\n    borderRadius: 8,\n    paddingVertical: 12,\n    alignItems: 'center',\n    marginRight: 8,\n  },\n  qrCancelButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  qrTestButton: {\n    flex: 1,\n    backgroundColor: Colors.primary,\n    borderRadius: 8,\n    paddingVertical: 12,\n    alignItems: 'center',\n    marginLeft: 8,\n  },\n  qrTestButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.white,\n  },\n  // Customer form styles\n  customerForm: {\n    paddingHorizontal: 16,\n  },\n  customerField: {\n    marginBottom: 16,\n  },\n  customerInput: {\n    fontSize: 16,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 8,\n    paddingHorizontal: 12,\n    paddingVertical: 12,\n    backgroundColor: Colors.white,\n  },\n  inputError: {\n    borderColor: Colors.danger,\n    borderWidth: 2,\n  },\n  validationError: {\n    fontSize: 12,\n    color: Colors.danger,\n    marginTop: 4,\n    marginLeft: 4,\n  },\n  receiptNote: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: Colors.background,\n    borderRadius: 8,\n    paddingHorizontal: 12,\n    paddingVertical: 8,\n    marginTop: 8,\n  },\n  receiptNoteText: {\n    fontSize: 14,\n    color: Colors.lightText,\n    marginLeft: 8,\n  },\n});\n\nexport default EnhancedPaymentScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/payment/PaymentScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_paymentResult' is assigned a value but never used.","line":57,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":57,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_tapToPayMethod' is assigned a value but never used.","line":167,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":167,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_defaultConfig' is assigned a value but never used.","line":185,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":185,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_total' is assigned a value but never used.","line":202,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":202,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_provider' is assigned a value but never used.","line":203,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":203,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_request' is assigned a value but never used.","line":285,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":285,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_request' is assigned a value but never used.","line":312,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":312,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_paymentResult' is assigned a value but never used.","line":360,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":360,"endColumn":42},{"ruleId":"@typescript-eslint/no-shadow","severity":1,"message":"'_paymentResult' is already declared in the upper scope on line 57 column 10.","line":360,"column":13,"nodeType":"Identifier","messageId":"noShadow","endLine":360,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_request' is assigned a value but never used.","line":389,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":389,"endColumn":37}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'initializePaymentService'. Either include it or remove the dependency array.","line":162,"column":6,"nodeType":"ArrayExpression","endLine":162,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [initializePaymentService]","fix":{"range":[4861,4863],"text":"[initializePaymentService]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":9,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  ScrollView,\n  Modal,\n  Alert,\n  ActivityIndicator,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation } from '@react-navigation/native';\nimport useAppStore from '../../store/useAppStore';\nimport useSettingsStore from '../../store/useSettingsStore';\nimport PaymentService, { PaymentRequest, PaymentResult } from '../../services/PaymentService';\nimport QRCodePayment from '../../components/payment/QRCodePayment';\nimport SumUpNativeService from '../../services/SumUpNativeService';\nimport SumUpPaymentComponent from '../../components/payment/SumUpPaymentComponent';\n\n// Clover POS Color Scheme\nconst Colors = {\n  primary: '#00A651',\n  secondary: '#0066CC',\n  success: '#00A651',\n  warning: '#FF6B35',\n  danger: '#E74C3C',\n  background: '#F5F5F5',\n  white: '#FFFFFF',\n  lightGray: '#E5E5E5',\n  mediumGray: '#999999',\n  darkGray: '#666666',\n  text: '#333333',\n  lightText: '#666666',\n  border: '#DDDDDD',\n};\n\ninterface PaymentMethod {\n  id: string;\n  name: string;\n  icon: string;\n  color: string;\n  enabled: boolean;\n  requiresAuth: boolean;\n  feeInfo: string;\n}\n\nconst PaymentScreen: React.FC = () => {\n  const navigation = useNavigation();\n  const { cart, clearCart } = useAppStore();\n  const { paymentMethods, taxConfiguration } = useSettingsStore();\n  const sumUpService = SumUpNativeService.getInstance();\n\n  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState<string>('');\n  const [showQRModal, setShowQRModal] = useState(__false);\n  const [processing, setProcessing] = useState(__false);\n  const [_paymentResult, setPaymentResult] = useState<PaymentResult | null>(__null);\n  const [optimalProvider, setOptimalProvider] = useState<string>('');\n  const [showSumUpPayment, setShowSumUpPayment] = useState(__false);\n  const [currentPaymentRequest, setCurrentPaymentRequest] = useState<PaymentRequest | null>(__null);\n\n  // Calculate totals\n  const calculateSubtotal = () => {\n    return cart.reduce((__sum, _item) => sum + item.price * item.quantity, 0);\n  };\n\n  const calculateTax = (subtotal: _number) => {\n    if (!taxConfiguration.vatEnabled) {\n      return 0;\n    }\n    return subtotal * (taxConfiguration.vatRate / 100);\n  };\n\n  const calculateServiceCharge = (subtotal: _number) => {\n    if (!taxConfiguration.serviceTaxEnabled) {\n      return 0;\n    }\n    return subtotal * (taxConfiguration.serviceTaxRate / 100);\n  };\n\n  const calculateGrandTotal = () => {\n    const subtotal = calculateSubtotal();\n    const tax = calculateTax(__subtotal);\n    const service = calculateServiceCharge(__subtotal);\n    return subtotal + tax + service;\n  };\n\n  // Payment methods with fee information - SumUp focused (Stripe/Square hidden as backups)\n  const availablePaymentMethods: PaymentMethod[] = [\n    {\n      id: 'tapToPay',\n      name: 'Tap to Pay',\n      icon: 'contactless-payment',\n      color: Colors.success,\n      enabled: _true,\n      requiresAuth: _false,\n      feeInfo: '0.69% + £19/month',\n    },\n    {\n      id: 'applePaySumUp',\n      name: 'Apple Pay',\n      icon: 'apple',\n      color: Colors.darkGray,\n      enabled: _true,\n      requiresAuth: _false,\n      feeInfo: '0.69% + £19/month',\n    },\n    {\n      id: 'cardEntry',\n      name: 'Manual Card',\n      icon: 'credit-card',\n      color: Colors.secondary,\n      enabled: _true,\n      requiresAuth: _false,\n      feeInfo: '0.69% + £19/month',\n    },\n    {\n      id: 'qrCode',\n      name: 'QR Payment',\n      icon: 'qr-code-scanner',\n      color: Colors.primary,\n      enabled: paymentMethods?.qrCode?.enabled ?? true,\n      requiresAuth: paymentMethods?.qrCode?.requiresAuth ?? false,\n      feeInfo: '0.69% + £19/month',\n    },\n    {\n      id: 'cash',\n      name: 'Cash',\n      icon: 'payments',\n      color: Colors.darkGray,\n      enabled: paymentMethods?.cash?.enabled ?? true,\n      requiresAuth: paymentMethods?.cash?.requiresAuth ?? false,\n      feeInfo: 'No fees',\n    },\n    // Stripe and Square are hidden (backup providers only)\n    // {\n    //   id: 'stripe',\n    //   name: 'Stripe',\n    //   icon: 'credit-card',\n    //   color: Colors.secondary,\n    //   enabled: _false, // Hidden from restaurant interface\n    //   requiresAuth: _false,\n    //   feeInfo: '1.4% + 20p',\n    // },\n    // {\n    //   id: 'square',\n    //   name: 'Square',\n    //   icon: 'contactless-payment',\n    //   color: Colors.warning,\n    //   enabled: _false, // Hidden from restaurant interface\n    //   requiresAuth: _false,\n    //   feeInfo: '1.75%',\n    // },\n  ];\n\n  const enabledPaymentMethods = availablePaymentMethods.filter(m => m.enabled);\n\n  useEffect(() => {\n    // Initialize PaymentService and get optimal provider\n    initializePaymentService();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    // Auto-select optimal payment method (prioritize Tap to Pay for best user experience)\n    if (enabledPaymentMethods.length > 0) {\n      const _tapToPayMethod = enabledPaymentMethods.find(m => m.id === 'tapToPay');\n      if (__tapToPayMethod) {\n        setSelectedPaymentMethod('tapToPay');\n        setOptimalProvider('tapToPay');\n      } else {\n        // Fallback to first available SumUp method\n        setSelectedPaymentMethod(enabledPaymentMethods[0].id);\n        setOptimalProvider(enabledPaymentMethods[0].id);\n      }\n    }\n  }, [enabledPaymentMethods]);\n\n  const initializePaymentService = async () => {\n    try {\n      // Load configuration from storage or use defaults\n      const config = await PaymentService.loadConfig();\n      if (!config) {\n        // Initialize with default config\n        const _defaultConfig = {\n          square: {\n            applicationId: 'sandbox-sq0idb-...', // Would come from settings\n            locationId: 'location-id',\n          },\n          sumup: {\n            affiliateKey: 'affiliate-key', // Would come from settings\n          },\n          backend: {\n            baseUrl: 'http://localhost:8000', // Would come from settings\n            apiKey: 'your-api-key', // Would come from auth\n          },\n        };\n        await PaymentService.initialize(__defaultConfig);\n      }\n\n      // Get optimal provider for current amount\n      const _total = calculateGrandTotal();\n      const _provider = await PaymentService.getOptimalProvider(__total);\n      setOptimalProvider(__provider);\n    } catch (__error) {\n      // Error handled silently\n    }\n  };\n\n  const handlePaymentMethodSelect = (methodId: _string) => {\n    const method = availablePaymentMethods.find(m => m.id === methodId);\n    if (method?.requiresAuth) {\n      Alert.alert(\n        'Authorization Required',\n        'Manager authorization is required for this payment method.',\n        [\n          { text: 'Cancel', style: 'cancel' },\n          {\n            text: 'Authorize',\n            onPress: () => {\n              setSelectedPaymentMethod(__methodId);\n              processPaymentMethod(__methodId);\n            },\n          },\n        ],\n      );\n    } else {\n      setSelectedPaymentMethod(__methodId);\n      processPaymentMethod(__methodId);\n    }\n  };\n\n  const processPaymentMethod = (methodId: _string) => {\n    switch (__methodId) {\n      case 'qrCode':\n        setShowQRModal(__true);\n        break;\n      case 'cash':\n        processCashPayment();\n        break;\n      case 'tapToPay':\n      case 'applePaySumUp':\n      case 'cardEntry':\n        // All SumUp payment methods\n        processSumUpPaymentMethod(__methodId);\n        break;\n      // Backup providers (hidden from UI)\n      case 'square':\n        processCardPayment(__methodId);\n        break;\n      default:\n        Alert.alert('Payment Method', `${methodId} payment not implemented yet`);\n    }\n  };\n\n  const processCashPayment = () => {\n    Alert.prompt(\n      'Cash Payment',\n      `Amount due: £${calculateGrandTotal().toFixed(2)}\\nEnter cash received:`,\n      [\n        { text: 'Cancel', style: 'cancel' },\n        {\n          text: 'Process',\n          onPress: value => {\n            const received = parseFloat(value || '0');\n            const total = calculateGrandTotal();\n\n            if (received < total) {\n              Alert.alert('Error', 'Insufficient cash received');\n              return;\n            }\n\n            handleCashPayment(__received);\n          },\n        },\n      ],\n      'plain-text',\n    );\n  };\n\n  const handleCashPayment = async (_receivedAmount: _number) => {\n    setProcessing(__true);\n\n    try {\n      const _request: PaymentRequest = {\n        amount: calculateGrandTotal(),\n        currency: 'GBP',\n        orderId: `ORDER-${Date.now()}`,\n        description: `Order with ${cart.length} items`,\n      };\n\n      const result = await PaymentService.processCashPayment(__request, _receivedAmount);\n\n      if (result.success) {\n        setPaymentResult(__result);\n        showPaymentSuccess(__result);\n      } else {\n        Alert.alert('Payment Failed', result.error || 'Cash payment failed');\n      }\n    } catch (__error) {\n      Alert.alert('Payment Error', 'Failed to process cash payment');\n    } finally {\n      setProcessing(__false);\n    }\n  };\n\n  // New SumUp Payment Method Handler\n  const processSumUpPaymentMethod = async (methodId: _string) => {\n    setProcessing(__true);\n\n    try {\n      const _request: PaymentRequest = {\n        amount: calculateGrandTotal(),\n        currency: 'GBP',\n        orderId: `ORDER-${Date.now()}`,\n        description: `Order with ${cart.length} items`,\n        metadata: { provider: 'sumup', method: methodId },\n      };\n\n      await processSumUpPayment(__request, _methodId);\n    } catch (__error) {\n      Alert.alert('Payment Error', `Failed to process ${methodId} payment`);\n    } finally {\n      setProcessing(__false);\n    }\n  };\n\n  // SumUp Payment Function - React Hook Based Integration\n  const processSumUpPayment = async (request: _PaymentRequest, _paymentMethod = 'tapToPay') => {\n    try {\n      // Initialize SumUp service (configuration will be fetched from backend)\n      const initSuccess = await sumUpService.initialize();\n      if (!initSuccess) {\n        throw new Error('Failed to initialize SumUp service');\n      }\n\n      // Set the current payment request and show the SumUp component\n      setCurrentPaymentRequest(__request);\n      setShowSumUpPayment(__true);\n    } catch (__error) {\n      Alert.alert('Payment Error', 'Failed to initialize SumUp payment');\n      setProcessing(__false);\n    }\n  };\n\n  // Handle SumUp payment completion from the React component\n  const handleSumUpPaymentComplete = (\n    success: _boolean,\n    transactionCode?: _string,\n    error?: _string,\n  ) => {\n    setShowSumUpPayment(__false);\n    setProcessing(__false);\n\n    if (success && transactionCode && currentPaymentRequest) {\n      // Calculate SumUp fee (0.69% for high volume)\n      const _fee = currentPaymentRequest.amount * 0.0069;\n\n      // Create a successful payment result\n      const _paymentResult: PaymentResult = {\n        success: _true,\n        transactionId: _transactionCode,\n        amount: currentPaymentRequest.amount,\n        fee: _fee,\n        provider: 'sumup',\n        error: _undefined,\n      };\n\n      setPaymentResult(__paymentResult);\n      showPaymentSuccess(__paymentResult);\n    } else {\n      Alert.alert('Payment Failed', error || 'Payment was not completed');\n    }\n\n    setCurrentPaymentRequest(__null);\n  };\n\n  // Handle SumUp payment cancellation\n  const handleSumUpPaymentCancel = () => {\n    setShowSumUpPayment(__false);\n    setProcessing(__false);\n    setCurrentPaymentRequest(__null);\n  };\n\n  const processCardPayment = async (provider: _string) => {\n    setProcessing(__true);\n\n    try {\n      const _request: PaymentRequest = {\n        amount: calculateGrandTotal(),\n        currency: 'GBP',\n        orderId: `ORDER-${Date.now()}`,\n        description: `Order with ${cart.length} items`,\n        metadata: { provider },\n      };\n\n      // Route to appropriate payment provider\n\n      if (provider === 'sumup') {\n        // Process SumUp payment with card detection modal\n        await processSumUpPayment(__request);\n      } else {\n        // Process other payment providers\n        const result = await PaymentService.processPayment(__request);\n        if (result.success) {\n          setPaymentResult(__result);\n          showPaymentSuccess(__result);\n        } else {\n          Alert.alert('Payment Failed', result.error || 'Card payment failed');\n        }\n      }\n    } catch (__error) {\n      Alert.alert('Payment Error', 'Failed to process card payment');\n    } finally {\n      setProcessing(__false);\n    }\n  };\n\n  const handleQRPaymentComplete = (result: _PaymentResult) => {\n    setShowQRModal(__false);\n    setPaymentResult(__result);\n    if (result.success) {\n      showPaymentSuccess(__result);\n    } else {\n      Alert.alert('QR Payment Failed', result.error || 'QR payment failed');\n    }\n  };\n\n  const showPaymentSuccess = (result: _PaymentResult) => {\n    Alert.alert(\n      'Payment Successful',\n      `Payment of £${result.amount.toFixed(2)} processed successfully via ${\n        result.provider\n      }!\\n\\nTransaction ID: ${result.transactionId}\\nFee: £${result.fee.toFixed(2)}`,\n      [\n        {\n          text: 'OK',\n          onPress: () => {\n            clearCart();\n            navigation.goBack();\n          },\n        },\n      ],\n    );\n  };\n\n  return (\n    <View style={styles.container}>\n      {/* Header */}\n      <View style={styles.header}>\n        <TouchableOpacity onPress={() => navigation.goBack()} style={styles.backButton}>\n          <Icon name=\"arrow-back\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n        <Text style={styles.headerTitle}>Smart Payment</Text>\n        <View style={styles.headerSpacer} />\n      </View>\n\n      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n        {/* Order Summary */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Order Summary</Text>\n          <View style={styles.summaryCard}>\n            <View style={styles.summaryRow}>\n              <Text style={styles.summaryLabel}>Subtotal ({cart.length} items)</Text>\n              <Text style={styles.summaryValue}>£{calculateSubtotal().toFixed(2)}</Text>\n            </View>\n\n            {taxConfiguration.vatEnabled && (\n              <View style={styles.summaryRow}>\n                <Text style={styles.summaryLabel}>VAT ({taxConfiguration.vatRate}%)</Text>\n                <Text style={styles.summaryValue}>\n                  £{calculateTax(calculateSubtotal()).toFixed(2)}\n                </Text>\n              </View>\n            )}\n\n            {taxConfiguration.serviceTaxEnabled && (\n              <View style={styles.summaryRow}>\n                <Text style={styles.summaryLabel}>\n                  Service Charge ({taxConfiguration.serviceTaxRate}%)\n                </Text>\n                <Text style={styles.summaryValue}>\n                  £{calculateServiceCharge(calculateSubtotal()).toFixed(2)}\n                </Text>\n              </View>\n            )}\n\n            <View style={[styles.summaryRow, styles.totalRow]}>\n              <Text style={styles.totalLabel}>Total</Text>\n              <Text style={styles.totalValue}>£{calculateGrandTotal().toFixed(2)}</Text>\n            </View>\n          </View>\n        </View>\n\n        {/* Optimal Provider Recommendation */}\n        {optimalProvider && (\n          <View style={styles.section}>\n            <View style={styles.recommendationCard}>\n              <Icon name=\"lightbulb\" size={24} color={Colors.warning} />\n              <View style={styles.recommendationText}>\n                <Text style={styles.recommendationTitle}>Recommended</Text>\n                <Text style={styles.recommendationSubtitle}>\n                  {optimalProvider.toUpperCase()} offers the best rates for this transaction\n                </Text>\n              </View>\n            </View>\n          </View>\n        )}\n\n        {/* Payment Methods */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Select Payment Method</Text>\n          <View style={styles.paymentMethods}>\n            {enabledPaymentMethods.map(method => (\n              <TouchableOpacity\n                key={method.id}\n                style={[\n                  styles.paymentMethod,\n                  selectedPaymentMethod === method.id && styles.paymentMethodActive,\n                  method.id === optimalProvider && styles.recommendedMethod,\n                ]}\n                onPress={() => handlePaymentMethodSelect(method.id)}>\n                <Icon\n                  name={method.icon}\n                  size={32}\n                  color={selectedPaymentMethod === method.id ? Colors.white : method.color}\n                />\n                <Text\n                  style={[\n                    styles.paymentMethodName,\n                    selectedPaymentMethod === method.id && styles.paymentMethodNameActive,\n                  ]}>\n                  {method.name}\n                </Text>\n                <Text\n                  style={[\n                    styles.paymentMethodFee,\n                    selectedPaymentMethod === method.id && styles.paymentMethodFeeActive,\n                  ]}>\n                  {method.feeInfo}\n                </Text>\n                {method.id === optimalProvider && (\n                  <View style={styles.recommendedBadge}>\n                    <Text style={styles.recommendedBadgeText}>BEST</Text>\n                  </View>\n                )}\n                {method.requiresAuth && (\n                  <Icon\n                    name=\"lock\"\n                    size={16}\n                    color={selectedPaymentMethod === method.id ? Colors.white : Colors.warning}\n                    style={styles.authIcon}\n                  />\n                )}\n              </TouchableOpacity>\n            ))}\n          </View>\n        </View>\n\n        {/* Provider Information */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Fee Comparison</Text>\n          <View style={styles.feeComparison}>\n            {enabledPaymentMethods.map(method => {\n              let fee = 0;\n              const total = calculateGrandTotal();\n\n              switch (method.id) {\n                case 'tapToPay':\n                case 'applePaySumUp':\n                case 'cardEntry':\n                case 'qrCode':\n                  fee = total * 0.0069; // 0.69% SumUp high volume rate\n                  break;\n                case 'cash':\n                  fee = 0;\n                  break;\n                case 'square':\n                  fee = total * 0.0175; // 1.75%\n                  break;\n              }\n\n              return (\n                <View key={method.id} style={styles.feeRow}>\n                  <Text style={styles.feeMethodName}>{method.name}</Text>\n                  <Text style={styles.feeAmount}>£{fee.toFixed(2)}</Text>\n                </View>\n              );\n            })}\n          </View>\n        </View>\n      </ScrollView>\n\n      {/* QR Payment Modal */}\n      <Modal\n        visible={showQRModal}\n        transparent\n        animationType=\"slide\"\n        onRequestClose={() => setShowQRModal(__false)}>\n        <View style={styles.modalOverlay}>\n          <QRCodePayment\n            request={{\n              amount: calculateGrandTotal(),\n              currency: 'GBP',\n              orderId: `ORDER-${Date.now()}`,\n              description: `Order with ${cart.length} items`,\n            }}\n            onPaymentComplete={handleQRPaymentComplete}\n            onCancel={() => setShowQRModal(__false)}\n          />\n        </View>\n      </Modal>\n\n      {/* SumUp Payment Component */}\n      {showSumUpPayment && currentPaymentRequest && (\n        <SumUpPaymentComponent\n          amount={currentPaymentRequest.amount}\n          currency={currentPaymentRequest.currency}\n          title={currentPaymentRequest.description || 'Order Payment'}\n          onPaymentComplete={handleSumUpPaymentComplete}\n          onPaymentCancel={handleSumUpPaymentCancel}\n        />\n      )}\n\n      {/* Processing Overlay */}\n      {processing && (\n        <View style={styles.processingOverlay}>\n          <View style={styles.processingContainer}>\n            <ActivityIndicator size=\"large\" color={Colors.primary} />\n            <Text style={styles.processingText}>Processing Payment...</Text>\n          </View>\n        </View>\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.primary,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    paddingTop: 48,\n  },\n  backButton: {\n    padding: 8,\n  },\n  headerTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.white,\n  },\n  headerSpacer: {\n    width: 40,\n  },\n  content: {\n    flex: 1,\n  },\n  section: {\n    backgroundColor: Colors.white,\n    marginVertical: 8,\n    paddingVertical: 16,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n    paddingHorizontal: 16,\n    marginBottom: 16,\n  },\n  summaryCard: {\n    paddingHorizontal: 16,\n  },\n  summaryRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 8,\n  },\n  summaryLabel: {\n    fontSize: 14,\n    color: Colors.lightText,\n  },\n  summaryValue: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.text,\n  },\n  totalRow: {\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n    paddingTop: 8,\n    marginTop: 4,\n  },\n  totalLabel: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  totalValue: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.primary,\n  },\n  recommendationCard: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: Colors.background,\n    marginHorizontal: 16,\n    padding: 16,\n    borderRadius: 8,\n    borderLeftWidth: 4,\n    borderLeftColor: Colors.warning,\n  },\n  recommendationText: {\n    marginLeft: 12,\n    flex: 1,\n  },\n  recommendationTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  recommendationSubtitle: {\n    fontSize: 14,\n    color: Colors.lightText,\n    marginTop: 2,\n  },\n  paymentMethods: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    paddingHorizontal: 16,\n    gap: 12,\n  },\n  paymentMethod: {\n    flex: 1,\n    minWidth: 140,\n    backgroundColor: Colors.background,\n    borderRadius: 12,\n    paddingVertical: 20,\n    alignItems: 'center',\n    borderWidth: 2,\n    borderColor: Colors.border,\n    position: 'relative',\n  },\n  paymentMethodActive: {\n    backgroundColor: Colors.primary,\n    borderColor: Colors.primary,\n  },\n  recommendedMethod: {\n    borderColor: Colors.warning,\n    borderWidth: 3,\n  },\n  paymentMethodName: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.text,\n    marginTop: 8,\n  },\n  paymentMethodNameActive: {\n    color: Colors.white,\n  },\n  paymentMethodFee: {\n    fontSize: 12,\n    color: Colors.lightText,\n    marginTop: 4,\n  },\n  paymentMethodFeeActive: {\n    color: Colors.white,\n  },\n  recommendedBadge: {\n    position: 'absolute',\n    top: -8,\n    right: -8,\n    backgroundColor: Colors.warning,\n    borderRadius: 12,\n    paddingHorizontal: 8,\n    paddingVertical: 2,\n  },\n  recommendedBadgeText: {\n    fontSize: 10,\n    fontWeight: 'bold',\n    color: Colors.white,\n  },\n  authIcon: {\n    position: 'absolute',\n    top: 8,\n    right: 8,\n  },\n  feeComparison: {\n    paddingHorizontal: 16,\n  },\n  feeRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.lightGray,\n  },\n  feeMethodName: {\n    fontSize: 14,\n    color: Colors.text,\n  },\n  feeAmount: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.text,\n  },\n  modalOverlay: {\n    flex: 1,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  processingOverlay: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  processingContainer: {\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    padding: 24,\n    alignItems: 'center',\n  },\n  processingText: {\n    fontSize: 16,\n    color: Colors.text,\n    marginTop: 12,\n  },\n});\n\nexport default PaymentScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/payment/RefundScreen.tsx","messages":[{"ruleId":"react/no-unstable-nested-components","severity":1,"message":"Do not define components during render. React will see a new component type on every render and destroy the entire subtree’s DOM nodes and state (https://reactjs.org/docs/reconciliation.html#elements-of-different-types). Instead, move this component definition out of the parent component “RefundScreen” and pass data as props.","line":177,"column":27,"nodeType":"ArrowFunctionExpression","endLine":202,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: styles.statuscompleted","line":494,"column":3,"nodeType":"Property","endLine":496,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: styles.statusrefunded","line":497,"column":3,"nodeType":"Property","endLine":499,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: styles.statuspartiallyrefunded","line":500,"column":3,"nodeType":"Property","endLine":502,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: styles.statusvoided","line":503,"column":3,"nodeType":"Property","endLine":505,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  ScrollView,\n  TextInput,\n  Alert,\n  FlatList,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation } from '@react-navigation/native';\n\n// Clover POS Color Scheme\nconst Colors = {\n  primary: '#00A651',\n  secondary: '#0066CC',\n  success: '#00A651',\n  warning: '#FF6B35',\n  danger: '#E74C3C',\n  background: '#F5F5F5',\n  white: '#FFFFFF',\n  lightGray: '#E5E5E5',\n  mediumGray: '#999999',\n  darkGray: '#666666',\n  text: '#333333',\n  lightText: '#666666',\n  border: '#DDDDDD',\n};\n\n// Mock transaction data\ninterface Transaction {\n  id: string;\n  date: Date;\n  total: number;\n  items: Array<{\n    id: string;\n    name: string;\n    price: number;\n    quantity: number;\n  }>;\n  paymentMethod: string;\n  status: 'completed' | 'refunded' | 'partially_refunded' | 'voided';\n}\n\n// Refund reason options\nconst REFUND_REASONS = [\n  'Customer Request',\n  'Wrong Item',\n  'Damaged Item',\n  'Poor Quality',\n  'Order Error',\n  'Manager Override',\n  'System Error',\n  'Other',\n];\n\nconst RefundScreen: React.FC = () => {\n  const navigation = useNavigation();\n\n  // Mock recent transactions\n  const [recentTransactions] = useState<Transaction[]>([\n    {\n      id: 'TXN001',\n      date: new Date(Date.now() - 3600000), // 1 hour ago\n      total: 25.99,\n      items: [\n        { id: '1', name: 'Coffee', price: 4.5, quantity: 2 },\n        { id: '2', name: 'Sandwich', price: 16.99, quantity: 1 },\n      ],\n      paymentMethod: 'Card',\n      status: 'completed',\n    },\n    {\n      id: 'TXN002',\n      date: new Date(Date.now() - 7200000), // 2 hours ago\n      total: 18.75,\n      items: [\n        { id: '3', name: 'Salad', price: 12.99, quantity: 1 },\n        { id: '4', name: 'Juice', price: 5.76, quantity: 1 },\n      ],\n      paymentMethod: 'Cash',\n      status: 'completed',\n    },\n  ]);\n\n  const [selectedTransaction, setSelectedTransaction] = useState<Transaction | null>(__null);\n  const [refundType, setRefundType] = useState<'full' | 'partial' | 'void'>('full');\n  const [refundReason, setRefundReason] = useState('');\n  const [customReason, setCustomReason] = useState('');\n  const [managerAuth, setManagerAuth] = useState('');\n  const [selectedItems, setSelectedItems] = useState<string[]>([]);\n  const [processing, setProcessing] = useState(__false);\n\n  const handleTransactionSelect = (_transaction: _Transaction) => {\n    setSelectedTransaction(__transaction);\n    setSelectedItems([]);\n    setRefundReason('');\n    setCustomReason('');\n  };\n\n  const handleItemToggle = (itemId: _string) => {\n    setSelectedItems(prev =>\n      prev.includes(__itemId) ? prev.filter(id => id !== itemId) : [...prev, itemId],\n    );\n  };\n\n  const calculateRefundAmount = () => {\n    if (!selectedTransaction) {\n      return 0;\n    }\n\n    if (refundType === 'full' || refundType === 'void') {\n      return selectedTransaction.total;\n    }\n\n    // Partial refund - sum selected items\n    return selectedTransaction.items\n      .filter(item => selectedItems.includes(item.id))\n      .reduce((__sum, _item) => sum + item.price * item.quantity, 0);\n  };\n\n  const processRefund = async () => {\n    if (!selectedTransaction) {\n      Alert.alert('Error', 'Please select a transaction to refund.');\n      return;\n    }\n\n    const finalReason = refundReason === 'Other' ? customReason : refundReason;\n    if (!finalReason) {\n      Alert.alert('Error', 'Please provide a reason for the refund.');\n      return;\n    }\n\n    if (!managerAuth) {\n      Alert.alert('Error', 'Manager authorization is required for refunds.');\n      return;\n    }\n\n    if (refundType === 'partial' && selectedItems.length === 0) {\n      Alert.alert('Error', 'Please select items to refund.');\n      return;\n    }\n\n    setProcessing(__true);\n\n    // Simulate processing\n    setTimeout(() => {\n      setProcessing(__false);\n\n      const amount = calculateRefundAmount();\n      const actionType = refundType === 'void' ? 'void' : 'refund';\n\n      Alert.alert(\n        'Success',\n        `${\n          actionType === 'void' ? 'Transaction voided' : 'Refund processed'\n        } successfully!\\n\\nAmount: £${amount.toFixed(2)}\\nTransaction: ${selectedTransaction.id}`,\n        [\n          {\n            text: 'OK',\n            onPress: () => {\n              setSelectedTransaction(__null);\n              setRefundType('full');\n              setRefundReason('');\n              setCustomReason('');\n              setManagerAuth('');\n              setSelectedItems([]);\n            },\n          },\n        ],\n      );\n    }, 2000);\n  };\n\n  const TransactionItem = ({ transaction }: { transaction: Transaction }) => (\n    <TouchableOpacity\n      style={[\n        styles.transactionItem,\n        selectedTransaction?.id === transaction.id && styles.transactionItemSelected,\n      ]}\n      onPress={() => handleTransactionSelect(__transaction)}>\n      <View style={styles.transactionHeader}>\n        <Text style={styles.transactionId}>#{transaction.id}</Text>\n        <Text style={styles.transactionAmount}>£{transaction.total.toFixed(2)}</Text>\n      </View>\n      <View style={styles.transactionDetails}>\n        <Text style={styles.transactionDate}>\n          {transaction.date.toLocaleTimeString()} - {transaction.paymentMethod}\n        </Text>\n        <View style={[styles.statusBadge, styles[`status${transaction.status.replace('_', '')}`]]}>\n          <Text style={styles.statusText}>\n            {transaction.status.replace('_', ' ').toUpperCase()}\n          </Text>\n        </View>\n      </View>\n      <Text style={styles.transactionItems}>\n        {transaction.items.map(item => `${item.quantity}x ${item.name}`).join(', ')}\n      </Text>\n    </TouchableOpacity>\n  );\n\n  return (\n    <View style={styles.container}>\n      {/* Header */}\n      <View style={styles.header}>\n        <TouchableOpacity onPress={() => navigation.goBack()} style={styles.backButton}>\n          <Icon name=\"arrow-back\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n        <Text style={styles.headerTitle}>Refunds & Voids</Text>\n        <View style={styles.headerSpacer} />\n      </View>\n\n      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n        {/* Recent Transactions */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Recent Transactions</Text>\n          <FlatList\n            data={recentTransactions}\n            renderItem={({ item }) => <TransactionItem transaction={item} />}\n            keyExtractor={item => item.id}\n            style={styles.transactionsList}\n            scrollEnabled={false}\n          />\n        </View>\n\n        {/* Refund Details */}\n        {selectedTransaction && (\n          <>\n            {/* Refund Type */}\n            <View style={styles.section}>\n              <Text style={styles.sectionTitle}>Refund Type</Text>\n              <View style={styles.refundTypeButtons}>\n                {[\n                  { key: 'full', label: 'Full Refund', icon: 'money-off' },\n                  { key: 'partial', label: 'Partial Refund', icon: 'remove-circle-outline' },\n                  { key: 'void', label: 'Void Transaction', icon: 'cancel' },\n                ].map(option => (\n                  <TouchableOpacity\n                    key={option.key}\n                    style={[\n                      styles.refundTypeButton,\n                      refundType === option.key && styles.refundTypeButtonActive,\n                    ]}\n                    onPress={() => setRefundType(option.key as unknown)}>\n                    <Icon\n                      name={option.icon}\n                      size={24}\n                      color={refundType === option.key ? Colors.white : Colors.darkGray}\n                    />\n                    <Text\n                      style={[\n                        styles.refundTypeLabel,\n                        refundType === option.key && styles.refundTypeLabelActive,\n                      ]}>\n                      {option.label}\n                    </Text>\n                  </TouchableOpacity>\n                ))}\n              </View>\n            </View>\n\n            {/* Item Selection for Partial Refunds */}\n            {refundType === 'partial' && (\n              <View style={styles.section}>\n                <Text style={styles.sectionTitle}>Select Items to Refund</Text>\n                <View style={styles.itemsList}>\n                  {selectedTransaction.items.map(item => (\n                    <TouchableOpacity\n                      key={item.id}\n                      style={[\n                        styles.itemRow,\n                        selectedItems.includes(item.id) && styles.itemRowSelected,\n                      ]}\n                      onPress={() => handleItemToggle(item.id)}>\n                      <Icon\n                        name={\n                          selectedItems.includes(item.id) ? 'check-box' : 'check-box-outline-blank'\n                        }\n                        size={24}\n                        color={selectedItems.includes(item.id) ? Colors.primary : Colors.mediumGray}\n                      />\n                      <View style={styles.itemDetails}>\n                        <Text style={styles.itemName}>\n                          {item.quantity}x {item.name}\n                        </Text>\n                        <Text style={styles.itemPrice}>\n                          £{(item.price * item.quantity).toFixed(2)}\n                        </Text>\n                      </View>\n                    </TouchableOpacity>\n                  ))}\n                </View>\n              </View>\n            )}\n\n            {/* Refund Reason */}\n            <View style={styles.section}>\n              <Text style={styles.sectionTitle}>\n                Reason for {refundType === 'void' ? 'Void' : 'Refund'}\n              </Text>\n              <View style={styles.reasonButtons}>\n                {REFUND_REASONS.map(reason => (\n                  <TouchableOpacity\n                    key={reason}\n                    style={[\n                      styles.reasonButton,\n                      refundReason === reason && styles.reasonButtonActive,\n                    ]}\n                    onPress={() => setRefundReason(__reason)}>\n                    <Text\n                      style={[\n                        styles.reasonButtonText,\n                        refundReason === reason && styles.reasonButtonTextActive,\n                      ]}>\n                      {reason}\n                    </Text>\n                  </TouchableOpacity>\n                ))}\n              </View>\n\n              {refundReason === 'Other' && (\n                <TextInput\n                  style={styles.customReasonInput}\n                  value={customReason}\n                  onChangeText={setCustomReason}\n                  placeholder=\"Enter custom reason...\"\n                  multiline\n                  numberOfLines={3}\n                />\n              )}\n            </View>\n\n            {/* Manager Authorization */}\n            <View style={styles.section}>\n              <Text style={styles.sectionTitle}>Manager Authorization</Text>\n              <TextInput\n                style={styles.authInput}\n                value={managerAuth}\n                onChangeText={setManagerAuth}\n                placeholder=\"Enter manager PIN or ID\"\n                secureTextEntry\n              />\n            </View>\n\n            {/* Refund Summary */}\n            <View style={styles.section}>\n              <Text style={styles.sectionTitle}>Summary</Text>\n              <View style={styles.summaryCard}>\n                <View style={styles.summaryRow}>\n                  <Text style={styles.summaryLabel}>Transaction ID:</Text>\n                  <Text style={styles.summaryValue}>{selectedTransaction.id}</Text>\n                </View>\n                <View style={styles.summaryRow}>\n                  <Text style={styles.summaryLabel}>Original Amount:</Text>\n                  <Text style={styles.summaryValue}>£{selectedTransaction.total.toFixed(2)}</Text>\n                </View>\n                <View style={styles.summaryRow}>\n                  <Text style={styles.summaryLabel}>\n                    {refundType === 'void' ? 'Void' : 'Refund'} Amount:\n                  </Text>\n                  <Text style={[styles.summaryValue, styles.refundAmount]}>\n                    £{calculateRefundAmount().toFixed(2)}\n                  </Text>\n                </View>\n                <View style={styles.summaryRow}>\n                  <Text style={styles.summaryLabel}>Payment Method:</Text>\n                  <Text style={styles.summaryValue}>{selectedTransaction.paymentMethod}</Text>\n                </View>\n              </View>\n            </View>\n          </>\n        )}\n      </ScrollView>\n\n      {/* Process Button */}\n      {selectedTransaction && (\n        <View style={styles.footer}>\n          <TouchableOpacity\n            style={[styles.processButton, processing && styles.processingButton]}\n            onPress={processRefund}\n            disabled={processing}>\n            {processing ? (\n              <>\n                <Icon name=\"hourglass-empty\" size={24} color={Colors.white} />\n                <Text style={styles.processButtonText}>Processing...</Text>\n              </>\n            ) : (\n              <>\n                <Icon\n                  name={refundType === 'void' ? 'cancel' : 'money-off'}\n                  size={24}\n                  color={Colors.white}\n                />\n                <Text style={styles.processButtonText}>\n                  {refundType === 'void' ? 'Void Transaction' : 'Process Refund'} - £\n                  {calculateRefundAmount().toFixed(2)}\n                </Text>\n              </>\n            )}\n          </TouchableOpacity>\n        </View>\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.danger,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    paddingTop: 48,\n  },\n  backButton: {\n    padding: 8,\n  },\n  headerTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.white,\n  },\n  headerSpacer: {\n    width: 40,\n  },\n  content: {\n    flex: 1,\n  },\n  section: {\n    backgroundColor: Colors.white,\n    marginVertical: 8,\n    paddingVertical: 16,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n    paddingHorizontal: 16,\n    marginBottom: 16,\n  },\n  transactionsList: {\n    paddingHorizontal: 16,\n  },\n  transactionItem: {\n    backgroundColor: Colors.background,\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 12,\n    borderWidth: 2,\n    borderColor: Colors.border,\n  },\n  transactionItemSelected: {\n    borderColor: Colors.primary,\n    backgroundColor: Colors.white,\n  },\n  transactionHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 8,\n  },\n  transactionId: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  transactionAmount: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: Colors.primary,\n  },\n  transactionDetails: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  transactionDate: {\n    fontSize: 14,\n    color: Colors.lightText,\n  },\n  statusBadge: {\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 12,\n  },\n  statuscompleted: {\n    backgroundColor: Colors.success,\n  },\n  statusrefunded: {\n    backgroundColor: Colors.warning,\n  },\n  statuspartiallyrefunded: {\n    backgroundColor: Colors.secondary,\n  },\n  statusvoided: {\n    backgroundColor: Colors.danger,\n  },\n  statusText: {\n    fontSize: 10,\n    fontWeight: '600',\n    color: Colors.white,\n  },\n  transactionItems: {\n    fontSize: 12,\n    color: Colors.lightText,\n  },\n  refundTypeButtons: {\n    flexDirection: 'row',\n    paddingHorizontal: 16,\n    gap: 12,\n  },\n  refundTypeButton: {\n    flex: 1,\n    alignItems: 'center',\n    padding: 16,\n    backgroundColor: Colors.background,\n    borderRadius: 12,\n    borderWidth: 2,\n    borderColor: Colors.border,\n  },\n  refundTypeButtonActive: {\n    backgroundColor: Colors.danger,\n    borderColor: Colors.danger,\n  },\n  refundTypeLabel: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.darkGray,\n    marginTop: 8,\n    textAlign: 'center',\n  },\n  refundTypeLabelActive: {\n    color: Colors.white,\n  },\n  itemsList: {\n    paddingHorizontal: 16,\n  },\n  itemRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingVertical: 12,\n    paddingHorizontal: 16,\n    backgroundColor: Colors.background,\n    borderRadius: 8,\n    marginBottom: 8,\n  },\n  itemRowSelected: {\n    backgroundColor: Colors.primary + '20',\n  },\n  itemDetails: {\n    flex: 1,\n    marginLeft: 12,\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  itemName: {\n    fontSize: 16,\n    color: Colors.text,\n  },\n  itemPrice: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.primary,\n  },\n  reasonButtons: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    paddingHorizontal: 16,\n    gap: 8,\n  },\n  reasonButton: {\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n    backgroundColor: Colors.background,\n    borderRadius: 20,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  reasonButtonActive: {\n    backgroundColor: Colors.primary,\n    borderColor: Colors.primary,\n  },\n  reasonButtonText: {\n    fontSize: 14,\n    color: Colors.darkGray,\n  },\n  reasonButtonTextActive: {\n    color: Colors.white,\n  },\n  customReasonInput: {\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 8,\n    padding: 12,\n    marginHorizontal: 16,\n    marginTop: 12,\n    fontSize: 16,\n    color: Colors.text,\n    textAlignVertical: 'top',\n  },\n  authInput: {\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 8,\n    padding: 12,\n    marginHorizontal: 16,\n    fontSize: 16,\n    color: Colors.text,\n  },\n  summaryCard: {\n    marginHorizontal: 16,\n    backgroundColor: Colors.background,\n    borderRadius: 12,\n    padding: 16,\n  },\n  summaryRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 12,\n  },\n  summaryLabel: {\n    fontSize: 14,\n    color: Colors.lightText,\n  },\n  summaryValue: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.text,\n  },\n  refundAmount: {\n    color: Colors.danger,\n    fontWeight: 'bold',\n    fontSize: 16,\n  },\n  footer: {\n    backgroundColor: Colors.white,\n    paddingHorizontal: 16,\n    paddingVertical: 16,\n    paddingBottom: 32,\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n  },\n  processButton: {\n    backgroundColor: Colors.danger,\n    borderRadius: 12,\n    paddingVertical: 16,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    gap: 12,\n  },\n  processingButton: {\n    backgroundColor: Colors.mediumGray,\n  },\n  processButtonText: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.white,\n  },\n});\n\nexport default RefundScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/payment/ServiceChargeSelectionScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_cart' is assigned a value but never used.","line":57,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":57,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_serviceChargePercentage' is assigned a value but never used.","line":61,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":61,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_addTransactionFee' is assigned a value but never used.","line":62,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":62,"endColumn":23},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.container","line":276,"column":5,"nodeType":"Property","endLine":279,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.header","line":280,"column":5,"nodeType":"Property","endLine":289,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.backButton","line":290,"column":5,"nodeType":"Property","endLine":292,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.headerTitle","line":293,"column":5,"nodeType":"Property","endLine":297,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.placeholder","line":298,"column":5,"nodeType":"Property","endLine":300,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.content","line":301,"column":5,"nodeType":"Property","endLine":304,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.explanationSection","line":305,"column":5,"nodeType":"Property","endLine":307,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.explanationTitle","line":308,"column":5,"nodeType":"Property","endLine":313,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.explanationText","line":314,"column":5,"nodeType":"Property","endLine":318,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.optionsSection","line":319,"column":5,"nodeType":"Property","endLine":321,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.optionCard","line":322,"column":5,"nodeType":"Property","endLine":330,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.optionCardSelected","line":331,"column":5,"nodeType":"Property","endLine":334,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.recommendedBadge","line":335,"column":5,"nodeType":"Property","endLine":343,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.recommendedText","line":344,"column":5,"nodeType":"Property","endLine":349,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.optionHeader","line":350,"column":5,"nodeType":"Property","endLine":355,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.optionLeft","line":356,"column":5,"nodeType":"Property","endLine":360,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.radioButton","line":361,"column":5,"nodeType":"Property","endLine":370,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.radioButtonSelected","line":371,"column":5,"nodeType":"Property","endLine":374,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.optionInfo","line":375,"column":5,"nodeType":"Property","endLine":377,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.optionLabel","line":378,"column":5,"nodeType":"Property","endLine":382,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.optionDescription","line":383,"column":5,"nodeType":"Property","endLine":387,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.optionRight","line":388,"column":5,"nodeType":"Property","endLine":390,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.optionAmount","line":391,"column":5,"nodeType":"Property","endLine":395,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.feeExplanation","line":396,"column":5,"nodeType":"Property","endLine":400,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.transactionFeeSection","line":401,"column":5,"nodeType":"Property","endLine":408,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.sectionTitle","line":409,"column":5,"nodeType":"Property","endLine":414,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.feeExplanationText","line":415,"column":5,"nodeType":"Property","endLine":420,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.toggleButton","line":421,"column":5,"nodeType":"Property","endLine":430,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.toggleButtonSelected","line":431,"column":5,"nodeType":"Property","endLine":434,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.toggleIndicator","line":435,"column":5,"nodeType":"Property","endLine":444,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.toggleIndicatorSelected","line":445,"column":5,"nodeType":"Property","endLine":448,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.toggleText","line":449,"column":5,"nodeType":"Property","endLine":453,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.warningSection","line":454,"column":5,"nodeType":"Property","endLine":461,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.warningText","line":462,"column":5,"nodeType":"Property","endLine":467,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.summarySection","line":468,"column":5,"nodeType":"Property","endLine":473,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.summaryTitle","line":474,"column":5,"nodeType":"Property","endLine":479,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.summaryRow","line":480,"column":5,"nodeType":"Property","endLine":485,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.summaryLabel","line":486,"column":5,"nodeType":"Property","endLine":489,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.summaryValue","line":490,"column":5,"nodeType":"Property","endLine":494,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.totalRow","line":495,"column":5,"nodeType":"Property","endLine":500,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.totalLabel","line":501,"column":5,"nodeType":"Property","endLine":505,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.totalValue","line":506,"column":5,"nodeType":"Property","endLine":510,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.footer","line":511,"column":5,"nodeType":"Property","endLine":517,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.continueButton","line":518,"column":5,"nodeType":"Property","endLine":523,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.continueButtonText","line":524,"column":5,"nodeType":"Property","endLine":528,"endColumn":6}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":45,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  ScrollView,\n  SafeAreaView,\n  Alert,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation } from '@react-navigation/native';\nimport { useTheme } from '../../design-system/ThemeProvider';\nimport useAppStore from '../../store/useAppStore';\nimport { formatPrice } from '../../utils/priceValidation';\n\ninterface ServiceChargeOption {\n  percentage: number;\n  label: string;\n  description: string;\n  coversTransactionFee: string;\n  recommended?: boolean;\n}\n\nconst serviceChargeOptions: ServiceChargeOption[] = [\n  {\n    percentage: 5,\n    label: '5% Service Charge',\n    description: 'Helps cover service costs',\n    coversTransactionFee: '1.2% transaction fee + support tip',\n  },\n  {\n    percentage: 10,\n    label: '10% Service Charge',\n    description: 'Supports excellent service',\n    coversTransactionFee: '2.9% transaction fee + good tip',\n    recommended: _true,\n  },\n  {\n    percentage: 15,\n    label: '15% Service Charge',\n    description: 'Exceptional service appreciation',\n    coversTransactionFee: '2.9% transaction fee + generous tip',\n  },\n  {\n    percentage: 0,\n    label: 'Skip Service Charge',\n    description: 'Continue without service charge',\n    coversTransactionFee: 'Option to add transaction fee separately',\n  },\n];\n\nconst ServiceChargeSelectionScreen: React.FC = () => {\n  const navigation = useNavigation();\n  const { theme } = useTheme();\n  const {\n    _cart,\n    cartTotal,\n    setServiceChargePercentage,\n    setAddTransactionFee,\n    _serviceChargePercentage,\n    _addTransactionFee,\n  } = useAppStore();\n\n  const [selectedOption, setSelectedOption] = useState<number>(__serviceChargePercentage);\n  const [showTransactionFeeToggle, setShowTransactionFeeToggle] = useState(__false);\n  const [localAddTransactionFee, setLocalAddTransactionFee] = useState(__addTransactionFee);\n\n  useEffect(() => {\n    setShowTransactionFeeToggle(selectedOption === 0);\n  }, [selectedOption]);\n\n  const calculateTotals = (servicePercent: _number, includeTransactionFee = false) => {\n    const subtotal = cartTotal();\n    const serviceCharge = subtotal * (servicePercent / 100);\n    const transactionFee = includeTransactionFee ? subtotal * 0.029 : 0;\n    const total = subtotal + serviceCharge + transactionFee;\n\n    return {\n      subtotal,\n      serviceCharge,\n      transactionFee,\n      total,\n    };\n  };\n\n  const handleOptionSelect = (percentage: _number) => {\n    setSelectedOption(__percentage);\n    if (percentage === 0) {\n      setShowTransactionFeeToggle(__true);\n    } else {\n      setShowTransactionFeeToggle(__false);\n      setLocalAddTransactionFee(__false);\n    }\n  };\n\n  const handleTransactionFeeToggle = () => {\n    setLocalAddTransactionFee(!localAddTransactionFee);\n  };\n\n  const handleContinue = () => {\n    if (selectedOption === 0 && !localAddTransactionFee) {\n      Alert.alert(\n        'Processing Costs',\n        'Without a service charge or transaction fee, the restaurant will cover all processing costs (2.9%). Continue anyway?',\n        [\n          { text: 'Go Back', style: 'cancel' },\n          {\n            text: 'Continue',\n            onPress: () => proceedToPayment(),\n          },\n        ],\n      );\n    } else {\n      proceedToPayment();\n    }\n  };\n\n  const proceedToPayment = () => {\n    // Update global state\n    setServiceChargePercentage(__selectedOption);\n    setAddTransactionFee(__localAddTransactionFee);\n\n    // Navigate to payment method selection\n    navigation.navigate('EnhancedPayment');\n  };\n\n  const totals = calculateTotals(\n    selectedOption,\n    showTransactionFeeToggle ? localAddTransactionFee : _false,\n  );\n\n  const styles = createStyles(__theme);\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <View style={styles.header}>\n        <TouchableOpacity style={styles.backButton} onPress={() => navigation.goBack()}>\n          <Icon name=\"arrow-back\" size={24} color={theme.colors.text} />\n        </TouchableOpacity>\n        <Text style={styles.headerTitle}>Service Options</Text>\n        <View style={styles.placeholder} />\n      </View>\n\n      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n        <View style={styles.explanationSection}>\n          <Text style={styles.explanationTitle}>Support Great Service</Text>\n          <Text style={styles.explanationText}>\n            Service charges help cover processing costs and support the staff who made your\n            experience great. Choose what feels right for your visit.\n          </Text>\n        </View>\n\n        <View style={styles.optionsSection}>\n          {serviceChargeOptions.map(option => (\n            <TouchableOpacity\n              key={option.percentage}\n              style={[\n                styles.optionCard,\n                selectedOption === option.percentage && styles.optionCardSelected,\n              ]}\n              onPress={() => handleOptionSelect(option.percentage)}>\n              {option.recommended && (\n                <View style={styles.recommendedBadge}>\n                  <Text style={styles.recommendedText}>RECOMMENDED</Text>\n                </View>\n              )}\n\n              <View style={styles.optionHeader}>\n                <View style={styles.optionLeft}>\n                  <View\n                    style={[\n                      styles.radioButton,\n                      selectedOption === option.percentage && styles.radioButtonSelected,\n                    ]}>\n                    {selectedOption === option.percentage && (\n                      <Icon name=\"check\" size={16} color={theme.colors.white} />\n                    )}\n                  </View>\n                  <View style={styles.optionInfo}>\n                    <Text style={styles.optionLabel}>{option.label}</Text>\n                    <Text style={styles.optionDescription}>{option.description}</Text>\n                  </View>\n                </View>\n\n                <View style={styles.optionRight}>\n                  <Text style={styles.optionAmount}>\n                    {option.percentage === 0\n                      ? '£0.00'\n                      : formatPrice(calculateTotals(option.percentage).serviceCharge, '£')}\n                  </Text>\n                </View>\n              </View>\n\n              <Text style={styles.feeExplanation}>{option.coversTransactionFee}</Text>\n            </TouchableOpacity>\n          ))}\n        </View>\n\n        {showTransactionFeeToggle && (\n          <View style={styles.transactionFeeSection}>\n            <Text style={styles.sectionTitle}>Processing Fees</Text>\n            <Text style={styles.feeExplanationText}>\n              Payment processing requires a small fee (2.9%). You can choose to add this to your\n              bill.\n            </Text>\n\n            <TouchableOpacity\n              style={[styles.toggleButton, localAddTransactionFee && styles.toggleButtonSelected]}\n              onPress={handleTransactionFeeToggle}>\n              <View\n                style={[\n                  styles.toggleIndicator,\n                  localAddTransactionFee && styles.toggleIndicatorSelected,\n                ]}>\n                {localAddTransactionFee && (\n                  <Icon name=\"check\" size={16} color={theme.colors.white} />\n                )}\n              </View>\n              <Text style={styles.toggleText}>\n                Add processing fee ({formatPrice(totals.transactionFee, '£')})\n              </Text>\n            </TouchableOpacity>\n\n            {!localAddTransactionFee && (\n              <View style={styles.warningSection}>\n                <Icon name=\"info\" size={20} color={theme.colors.warning} />\n                <Text style={styles.warningText}>Restaurant will cover processing costs</Text>\n              </View>\n            )}\n          </View>\n        )}\n\n        <View style={styles.summarySection}>\n          <Text style={styles.summaryTitle}>Order Summary</Text>\n\n          <View style={styles.summaryRow}>\n            <Text style={styles.summaryLabel}>Subtotal</Text>\n            <Text style={styles.summaryValue}>{formatPrice(totals.subtotal, '£')}</Text>\n          </View>\n\n          {totals.serviceCharge > 0 && (\n            <View style={styles.summaryRow}>\n              <Text style={styles.summaryLabel}>Service Charge ({selectedOption}%)</Text>\n              <Text style={styles.summaryValue}>{formatPrice(totals.serviceCharge, '£')}</Text>\n            </View>\n          )}\n\n          {totals.transactionFee > 0 && (\n            <View style={styles.summaryRow}>\n              <Text style={styles.summaryLabel}>Processing Fee (2.9%)</Text>\n              <Text style={styles.summaryValue}>{formatPrice(totals.transactionFee, '£')}</Text>\n            </View>\n          )}\n\n          <View style={[styles.summaryRow, styles.totalRow]}>\n            <Text style={styles.totalLabel}>Total</Text>\n            <Text style={styles.totalValue}>{formatPrice(totals.total, '£')}</Text>\n          </View>\n        </View>\n      </ScrollView>\n\n      <View style={styles.footer}>\n        <TouchableOpacity style={styles.continueButton} onPress={handleContinue}>\n          <Text style={styles.continueButtonText}>\n            Continue to Payment • {formatPrice(totals.total, '£')}\n          </Text>\n        </TouchableOpacity>\n      </View>\n    </SafeAreaView>\n  );\n};\n\nconst createStyles = (theme: _unknown) =>\n  StyleSheet.create({\n    container: {\n      flex: 1,\n      backgroundColor: theme.colors.background,\n    },\n    header: {\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      paddingHorizontal: 16,\n      paddingVertical: 12,\n      backgroundColor: theme.colors.surface,\n      borderBottomWidth: 1,\n      borderBottomColor: theme.colors.border,\n    },\n    backButton: {\n      padding: 8,\n    },\n    headerTitle: {\n      fontSize: 18,\n      fontWeight: '600',\n      color: theme.colors.text,\n    },\n    placeholder: {\n      width: 40,\n    },\n    content: {\n      flex: 1,\n      paddingHorizontal: 16,\n    },\n    explanationSection: {\n      paddingVertical: 20,\n    },\n    explanationTitle: {\n      fontSize: 24,\n      fontWeight: '700',\n      color: theme.colors.text,\n      marginBottom: 8,\n    },\n    explanationText: {\n      fontSize: 16,\n      color: theme.colors.textSecondary,\n      lineHeight: 22,\n    },\n    optionsSection: {\n      marginBottom: 24,\n    },\n    optionCard: {\n      backgroundColor: theme.colors.surface,\n      borderRadius: 12,\n      padding: 16,\n      marginBottom: 12,\n      borderWidth: 2,\n      borderColor: theme.colors.border,\n      position: 'relative',\n    },\n    optionCardSelected: {\n      borderColor: theme.colors.primary,\n      backgroundColor: `${theme.colors.primary}08`,\n    },\n    recommendedBadge: {\n      position: 'absolute',\n      top: -8,\n      right: 12,\n      backgroundColor: theme.colors.success,\n      paddingHorizontal: 12,\n      paddingVertical: 4,\n      borderRadius: 12,\n    },\n    recommendedText: {\n      fontSize: 10,\n      fontWeight: '700',\n      color: theme.colors.white,\n      letterSpacing: 0.5,\n    },\n    optionHeader: {\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      marginBottom: 8,\n    },\n    optionLeft: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      flex: 1,\n    },\n    radioButton: {\n      width: 24,\n      height: 24,\n      borderRadius: 12,\n      borderWidth: 2,\n      borderColor: theme.colors.border,\n      marginRight: 12,\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n    radioButtonSelected: {\n      borderColor: theme.colors.primary,\n      backgroundColor: theme.colors.primary,\n    },\n    optionInfo: {\n      flex: 1,\n    },\n    optionLabel: {\n      fontSize: 16,\n      fontWeight: '600',\n      color: theme.colors.text,\n    },\n    optionDescription: {\n      fontSize: 14,\n      color: theme.colors.textSecondary,\n      marginTop: 2,\n    },\n    optionRight: {\n      alignItems: 'flex-end',\n    },\n    optionAmount: {\n      fontSize: 18,\n      fontWeight: '700',\n      color: theme.colors.text,\n    },\n    feeExplanation: {\n      fontSize: 12,\n      color: theme.colors.textSecondary,\n      fontStyle: 'italic',\n    },\n    transactionFeeSection: {\n      backgroundColor: theme.colors.surface,\n      borderRadius: 12,\n      padding: 16,\n      marginBottom: 24,\n      borderWidth: 1,\n      borderColor: theme.colors.border,\n    },\n    sectionTitle: {\n      fontSize: 18,\n      fontWeight: '600',\n      color: theme.colors.text,\n      marginBottom: 8,\n    },\n    feeExplanationText: {\n      fontSize: 14,\n      color: theme.colors.textSecondary,\n      marginBottom: 16,\n      lineHeight: 20,\n    },\n    toggleButton: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      paddingVertical: 12,\n      paddingHorizontal: 16,\n      borderRadius: 8,\n      borderWidth: 1,\n      borderColor: theme.colors.border,\n      backgroundColor: theme.colors.background,\n    },\n    toggleButtonSelected: {\n      borderColor: theme.colors.primary,\n      backgroundColor: `${theme.colors.primary}08`,\n    },\n    toggleIndicator: {\n      width: 20,\n      height: 20,\n      borderRadius: 10,\n      borderWidth: 2,\n      borderColor: theme.colors.border,\n      marginRight: 12,\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n    toggleIndicatorSelected: {\n      borderColor: theme.colors.primary,\n      backgroundColor: theme.colors.primary,\n    },\n    toggleText: {\n      fontSize: 16,\n      fontWeight: '500',\n      color: theme.colors.text,\n    },\n    warningSection: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      marginTop: 12,\n      paddingTop: 12,\n      borderTopWidth: 1,\n      borderTopColor: theme.colors.border,\n    },\n    warningText: {\n      fontSize: 14,\n      color: theme.colors.warning,\n      marginLeft: 8,\n      fontWeight: '500',\n    },\n    summarySection: {\n      backgroundColor: theme.colors.surface,\n      borderRadius: 12,\n      padding: 16,\n      marginBottom: 24,\n    },\n    summaryTitle: {\n      fontSize: 18,\n      fontWeight: '600',\n      color: theme.colors.text,\n      marginBottom: 12,\n    },\n    summaryRow: {\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      paddingVertical: 6,\n    },\n    summaryLabel: {\n      fontSize: 16,\n      color: theme.colors.textSecondary,\n    },\n    summaryValue: {\n      fontSize: 16,\n      fontWeight: '500',\n      color: theme.colors.text,\n    },\n    totalRow: {\n      borderTopWidth: 1,\n      borderTopColor: theme.colors.border,\n      marginTop: 8,\n      paddingTop: 12,\n    },\n    totalLabel: {\n      fontSize: 18,\n      fontWeight: '700',\n      color: theme.colors.text,\n    },\n    totalValue: {\n      fontSize: 20,\n      fontWeight: '700',\n      color: theme.colors.primary,\n    },\n    footer: {\n      paddingHorizontal: 16,\n      paddingVertical: 16,\n      backgroundColor: theme.colors.surface,\n      borderTopWidth: 1,\n      borderTopColor: theme.colors.border,\n    },\n    continueButton: {\n      backgroundColor: theme.colors.primary,\n      borderRadius: 12,\n      paddingVertical: 16,\n      alignItems: 'center',\n    },\n    continueButtonText: {\n      fontSize: 18,\n      fontWeight: '600',\n      color: theme.colors.white,\n    },\n  });\n\nexport default ServiceChargeSelectionScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/payments/ContactlessPaymentScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_screenWidth' is assigned a value but never used.","line":17,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_onSuccess' is assigned a value but never used.","line":37,"column":43,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":53},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_timer' is assigned a value but never used.","line":54,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":54,"endColumn":17},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { width: 24 }","line":305,"column":22,"nodeType":"ObjectExpression","endLine":305,"endColumn":35}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  SafeAreaView,\n  TouchableOpacity,\n  Animated,\n  Alert,\n  Dimensions,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation, RouteProp } from '@react-navigation/native';\nimport { useTheme } from '../../contexts/ThemeProvider';\nimport SumUpService from '../../services/SumUpService';\n\nconst { width: _screenWidth } = Dimensions.get('window');\n\ntype ContactlessPaymentRouteProp = RouteProp<\n  {\n    ContactlessPayment: {\n      amount: number;\n      currency: string;\n      description?: string;\n      onSuccess: (payment: _SumUpContactlessPayment) => void;\n      onCancel: () => void;\n    };\n  },\n  'ContactlessPayment'\n>;\n\nconst ContactlessPaymentScreen: React.FC = () => {\n  const navigation = useNavigation();\n  const route = useRoute<ContactlessPaymentRouteProp>();\n  const { theme } = useTheme();\n\n  const { amount, _currency, description, _onSuccess, onCancel } = route.params;\n\n  const [paymentStatus, setPaymentStatus] = useState<\n    'waiting' | 'detecting' | 'processing' | 'success' | 'error'\n  >('waiting');\n  const [errorMessage, setErrorMessage] = useState<string>('');\n  const [timeRemaining, setTimeRemaining] = useState(60); // 60 second timeout\n\n  // Animations\n  const pulseAnim = useRef(new Animated.Value(1)).current;\n  const progressAnim = useRef(new Animated.Value(0)).current;\n\n  useEffect(() => {\n    // Start pulse animation\n    startPulseAnimation();\n\n    // Start countdown timer\n    const _timer = setInterval(() => {\n      setTimeRemaining(prev => {\n        if (prev <= 1) {\n          handleTimeout();\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n\n    return () => {\n      clearInterval(__timer);\n    };\n  }, []);\n\n  const startPulseAnimation = () => {\n    Animated.loop(\n      Animated.sequence([\n        Animated.timing(__pulseAnim, {\n          toValue: 1.2,\n          duration: 800,\n          useNativeDriver: _true,\n        }),\n        Animated.timing(__pulseAnim, {\n          toValue: 1,\n          duration: 800,\n          useNativeDriver: _true,\n        }),\n      ]),\n    ).start();\n  };\n\n  const startProgressAnimation = () => {\n    Animated.timing(__progressAnim, {\n      toValue: 1,\n      duration: 2000,\n      useNativeDriver: _false,\n    }).start();\n  };\n\n  const handleStartPayment = async () => {\n    try {\n      setPaymentStatus('detecting');\n      setErrorMessage('');\n      startProgressAnimation();\n\n      const payment = await SumUpService.processContactlessPayment(\n        __amount,\n        _currency,\n        description,\n      );\n\n      if (payment.status === 'completed') {\n        setPaymentStatus('success');\n        setTimeout(() => {\n          onSuccess(__payment);\n          navigation.goBack();\n        }, 2000);\n      } else {\n        setPaymentStatus('error');\n        setErrorMessage(payment.errorMessage || 'Payment failed');\n      }\n    } catch (__error) {\n      setPaymentStatus('error');\n      setErrorMessage(error instanceof Error ? error.message : 'Payment failed');\n    }\n  };\n\n  const handleCancel = () => {\n    Alert.alert('Cancel Payment', 'Are you sure you want to cancel this payment?', [\n      { text: 'Continue', style: 'cancel' },\n      {\n        text: 'Cancel Payment',\n        style: 'destructive',\n        onPress: () => {\n          onCancel();\n          navigation.goBack();\n        },\n      },\n    ]);\n  };\n\n  const handleTimeout = () => {\n    setPaymentStatus('error');\n    setErrorMessage('Payment timeout. Please try again.');\n  };\n\n  const handleRetry = () => {\n    setPaymentStatus('waiting');\n    setErrorMessage('');\n    setTimeRemaining(60);\n    progressAnim.setValue(0);\n  };\n\n  const getStatusIcon = () => {\n    switch (__paymentStatus) {\n      case 'detecting':\n      case 'processing':\n        return 'nfc';\n      case 'success':\n        return 'check-circle';\n      case 'error':\n        return 'error';\n      default:\n        return 'nfc';\n    }\n  };\n\n  const getStatusColor = () => {\n    switch (__paymentStatus) {\n      case 'success':\n        return '#4CAF50';\n      case 'error':\n        return '#F44336';\n      case 'detecting':\n      case 'processing':\n        return '#2196F3';\n      default:\n        return theme.colors.primary;\n    }\n  };\n\n  const getStatusMessage = () => {\n    switch (__paymentStatus) {\n      case 'waiting':\n        return 'Tap the NFC icon to start payment';\n      case 'detecting':\n        return 'Hold your card or device near the phone';\n      case 'processing':\n        return 'Processing payment...';\n      case 'success':\n        return 'Payment successful!';\n      case 'error':\n        return errorMessage || 'Payment failed';\n      default:\n        return 'Ready for contactless payment';\n    }\n  };\n\n  const styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      backgroundColor: theme.colors.background,\n    },\n    header: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      justifyContent: 'space-between',\n      padding: 20,\n      borderBottomWidth: 1,\n      borderBottomColor: theme.colors.border,\n    },\n    headerTitle: {\n      fontSize: 18,\n      fontWeight: '600',\n      color: theme.colors.text,\n    },\n    content: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'center',\n      padding: 20,\n    },\n    amountContainer: {\n      alignItems: 'center',\n      marginBottom: 40,\n    },\n    amountLabel: {\n      fontSize: 16,\n      color: theme.colors.textSecondary,\n      marginBottom: 8,\n    },\n    amount: {\n      fontSize: 48,\n      fontWeight: 'bold',\n      color: theme.colors.text,\n    },\n    nfcContainer: {\n      alignItems: 'center',\n      marginBottom: 40,\n    },\n    nfcIcon: {\n      marginBottom: 20,\n    },\n    statusMessage: {\n      fontSize: 18,\n      textAlign: 'center',\n      color: theme.colors.text,\n      marginBottom: 10,\n    },\n    progressContainer: {\n      width: 200,\n      height: 4,\n      backgroundColor: theme.colors.border,\n      borderRadius: 2,\n      marginTop: 20,\n    },\n    progressBar: {\n      height: '100%',\n      backgroundColor: theme.colors.primary,\n      borderRadius: 2,\n    },\n    timerContainer: {\n      alignItems: 'center',\n      marginTop: 30,\n    },\n    timerText: {\n      fontSize: 14,\n      color: theme.colors.textSecondary,\n    },\n    buttonContainer: {\n      position: 'absolute',\n      bottom: 40,\n      left: 20,\n      right: 20,\n    },\n    retryButton: {\n      backgroundColor: theme.colors.primary,\n      padding: 16,\n      borderRadius: 12,\n      alignItems: 'center',\n      marginBottom: 12,\n    },\n    retryButtonText: {\n      color: 'white',\n      fontSize: 16,\n      fontWeight: '600',\n    },\n    cancelButton: {\n      backgroundColor: 'transparent',\n      padding: 16,\n      borderRadius: 12,\n      alignItems: 'center',\n      borderWidth: 1,\n      borderColor: theme.colors.border,\n    },\n    cancelButtonText: {\n      color: theme.colors.text,\n      fontSize: 16,\n      fontWeight: '600',\n    },\n  });\n\n  return (\n    <SafeAreaView style={styles.container}>\n      {/* Header */}\n      <View style={styles.header}>\n        <TouchableOpacity onPress={handleCancel}>\n          <Icon name=\"close\" size={24} color={theme.colors.text} />\n        </TouchableOpacity>\n        <Text style={styles.headerTitle}>Contactless Payment</Text>\n        <View style={{ width: 24 }} />\n      </View>\n\n      {/* Content */}\n      <View style={styles.content}>\n        {/* Amount Display */}\n        <View style={styles.amountContainer}>\n          <Text style={styles.amountLabel}>Amount to Pay</Text>\n          <Text style={styles.amount}>\n            {currency === 'GBP' ? '£' : currency}\n            {amount.toFixed(2)}\n          </Text>\n        </View>\n\n        {/* NFC Icon and Status */}\n        <View style={styles.nfcContainer}>\n          <TouchableOpacity\n            onPress={paymentStatus === 'waiting' ? handleStartPayment : undefined}\n            disabled={paymentStatus !== 'waiting'}>\n            <Animated.View style={[styles.nfcIcon, { transform: [{ scale: pulseAnim }] }]}>\n              <Icon name={getStatusIcon()} size={120} color={getStatusColor()} />\n            </Animated.View>\n          </TouchableOpacity>\n\n          <Text style={styles.statusMessage}>{getStatusMessage()}</Text>\n\n          {(paymentStatus === 'detecting' || paymentStatus === 'processing') && (\n            <View style={styles.progressContainer}>\n              <Animated.View\n                style={[\n                  styles.progressBar,\n                  {\n                    width: progressAnim.interpolate({\n                      inputRange: [0, 1],\n                      outputRange: ['0%', '100%'],\n                    }),\n                  },\n                ]}\n              />\n            </View>\n          )}\n        </View>\n\n        {/* Timer */}\n        {paymentStatus === 'waiting' && (\n          <View style={styles.timerContainer}>\n            <Text style={styles.timerText}>\n              Time remaining: {Math.floor(timeRemaining / 60)}:\n              {(timeRemaining % 60).toString().padStart(2, '0')}\n            </Text>\n          </View>\n        )}\n      </View>\n\n      {/* Bottom Buttons */}\n      <View style={styles.buttonContainer}>\n        {paymentStatus === 'error' && (\n          <TouchableOpacity style={styles.retryButton} onPress={handleRetry}>\n            <Text style={styles.retryButtonText}>Try Again</Text>\n          </TouchableOpacity>\n        )}\n\n        {paymentStatus !== 'success' && (\n          <TouchableOpacity style={styles.cancelButton} onPress={handleCancel}>\n            <Text style={styles.cancelButtonText}>Cancel Payment</Text>\n          </TouchableOpacity>\n        )}\n      </View>\n    </SafeAreaView>\n  );\n};\n\nexport default ContactlessPaymentScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/payments/QRCodePaymentScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_screenWidth' is assigned a value but never used.","line":19,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_onSuccess' is assigned a value but never used.","line":39,"column":43,"nodeType":"Identifier","messageId":"unusedVar","endLine":39,"endColumn":53},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_timeLeft' is assigned a value but never used.","line":95,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":95,"endColumn":22},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { width: 24 }","line":437,"column":24,"nodeType":"ObjectExpression","endLine":437,"endColumn":37}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'initializeQRPayment'. Either include it or remove the dependency array.","line":70,"column":6,"nodeType":"ArrayExpression","endLine":70,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [initializeQRPayment]","fix":{"range":[2176,2178],"text":"[initializeQRPayment]"}}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":345,"column":10,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":345,"endColumn":44,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  SafeAreaView,\n  TouchableOpacity,\n  Alert,\n  Dimensions,\n  ActivityIndicator,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport QRCode from 'react-native-qrcode-svg';\nimport { useNavigation, RouteProp } from '@react-navigation/native';\nimport { useTheme } from '../../design-system/ThemeProvider';\nimport SumUpService, { SumUpQRPayment } from '../../services/SumUpService';\nimport QRPaymentErrorBoundary from '../../components/payment/QRPaymentErrorBoundary';\n\nconst { width: _screenWidth } = Dimensions.get('window');\n\ntype QRCodePaymentRouteProp = RouteProp<\n  {\n    QRCodePayment: {\n      amount: number;\n      currency: string;\n      description?: string;\n      onSuccess: (payment: _SumUpQRPayment) => void;\n      onCancel: () => void;\n    };\n  },\n  'QRCodePayment'\n>;\n\nconst QRCodePaymentScreen: React.FC = () => {\n  const navigation = useNavigation();\n  const route = useRoute<QRCodePaymentRouteProp>();\n  const { theme } = useTheme();\n\n  const { amount, _currency, description, _onSuccess, onCancel } = route.params;\n\n  const [qrPayment, setQrPayment] = useState<SumUpQRPayment | null>(__null);\n  const [paymentStatus, setPaymentStatus] = useState<\n    'loading' | 'waiting' | 'scanning' | 'completed' | 'expired' | 'failed'\n  >('loading');\n  const [timeRemaining, setTimeRemaining] = useState(0);\n  const [errorMessage, setErrorMessage] = useState<string>('');\n\n  const pollIntervalRef = useRef<NodeJS.Timeout | null>(__null);\n  const timerRef = useRef<NodeJS.Timeout | null>(__null);\n  const isMountedRef = useRef(__true);\n\n  useEffect(() => {\n    initializeQRPayment();\n\n    return () => {\n      // Mark component as unmounted to prevent state updates\n      isMountedRef.current = false;\n\n      // Clean up all timers\n      if (pollIntervalRef.current) {\n        clearInterval(pollIntervalRef.current);\n        pollIntervalRef.current = null;\n      }\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n        timerRef.current = null;\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const initializeQRPayment = async () => {\n    try {\n      // Check if component is still mounted\n      if (!isMountedRef.current) {\n        return;\n      }\n\n      setPaymentStatus('loading');\n      setErrorMessage('');\n\n      const payment = await SumUpService.createQRPayment(__amount, _currency, description);\n\n      // Ensure component is still mounted before updating state\n      if (!isMountedRef.current) {\n        return;\n      }\n\n      setQrPayment(__payment);\n      setPaymentStatus('waiting');\n\n      // Calculate time remaining until expiration\n      const expiresAt = new Date(payment.expiresAt);\n      const now = new Date();\n      const _timeLeft = Math.max(0, Math.floor((expiresAt.getTime() - now.getTime()) / 1000));\n      setTimeRemaining(__timeLeft);\n\n      // Start countdown timer\n      startCountdownTimer(__timeLeft);\n\n      // Start polling for payment status\n      startStatusPolling(__payment);\n    } catch (__error) {\n      // Only update state if component is still mounted\n      if (isMountedRef.current) {\n        setPaymentStatus('failed');\n        setErrorMessage(error instanceof Error ? error.message : 'Failed to create QR payment');\n      }\n    }\n  };\n\n  const startCountdownTimer = (initialTime: _number) => {\n    let timeLeft = initialTime;\n\n    // Clear any existing timer first\n    if (timerRef.current) {\n      clearInterval(timerRef.current);\n    }\n\n    timerRef.current = setInterval(() => {\n      // Check if component is still mounted\n      if (!isMountedRef.current) {\n        if (timerRef.current) {\n          clearInterval(timerRef.current);\n          timerRef.current = null;\n        }\n        return;\n      }\n\n      timeLeft -= 1;\n      setTimeRemaining(__timeLeft);\n\n      if (timeLeft <= 0) {\n        setPaymentStatus('expired');\n\n        // Clean up intervals\n        if (pollIntervalRef.current) {\n          clearInterval(pollIntervalRef.current);\n          pollIntervalRef.current = null;\n        }\n        if (timerRef.current) {\n          clearInterval(timerRef.current);\n          timerRef.current = null;\n        }\n      }\n    }, 1000);\n  };\n\n  const startStatusPolling = (payment: _SumUpQRPayment) => {\n    // Clear any existing polling first\n    if (pollIntervalRef.current) {\n      clearInterval(pollIntervalRef.current);\n    }\n\n    pollIntervalRef.current = setInterval(async () => {\n      try {\n        // Check if component is still mounted\n        if (!isMountedRef.current) {\n          if (pollIntervalRef.current) {\n            clearInterval(pollIntervalRef.current);\n            pollIntervalRef.current = null;\n          }\n          return;\n        }\n\n        const updatedPayment = await SumUpService.pollQRPaymentStatus(__payment);\n\n        // Double-check if component is still mounted before state updates\n        if (!isMountedRef.current) {\n          return;\n        }\n\n        setQrPayment(__updatedPayment);\n        setPaymentStatus(updatedPayment.status);\n\n        if (updatedPayment.status === 'completed') {\n          // Payment successful - clean up intervals\n          if (pollIntervalRef.current) {\n            clearInterval(pollIntervalRef.current);\n            pollIntervalRef.current = null;\n          }\n          if (timerRef.current) {\n            clearInterval(timerRef.current);\n            timerRef.current = null;\n          }\n\n          setTimeout(() => {\n            // Final check before calling callbacks\n            if (isMountedRef.current) {\n              onSuccess(__updatedPayment);\n              navigation.goBack();\n            }\n          }, 2000);\n        } else if (updatedPayment.status === 'failed' || updatedPayment.status === 'expired') {\n          // Payment failed or expired - clean up intervals\n          if (pollIntervalRef.current) {\n            clearInterval(pollIntervalRef.current);\n            pollIntervalRef.current = null;\n          }\n          if (timerRef.current) {\n            clearInterval(timerRef.current);\n            timerRef.current = null;\n          }\n        }\n      } catch (__error) {\n        // Only update state if mounted\n        if (isMountedRef.current) {\n          setErrorMessage('Failed to check payment status');\n        }\n      }\n    }, payment.pollInterval || 2000);\n  };\n\n  const handleCancel = () => {\n    Alert.alert('Cancel Payment', 'Are you sure you want to cancel this payment?', [\n      { text: 'Continue', style: 'cancel' },\n      {\n        text: 'Cancel Payment',\n        style: 'destructive',\n        onPress: () => {\n          // Clean up all timers\n          if (pollIntervalRef.current) {\n            clearInterval(pollIntervalRef.current);\n            pollIntervalRef.current = null;\n          }\n          if (timerRef.current) {\n            clearInterval(timerRef.current);\n            timerRef.current = null;\n          }\n\n          // Mark as unmounted to prevent further state updates\n          isMountedRef.current = false;\n\n          onCancel();\n          navigation.goBack();\n        },\n      },\n    ]);\n  };\n\n  const handleRetry = () => {\n    try {\n      // Clean up existing timers\n      if (pollIntervalRef.current) {\n        clearInterval(pollIntervalRef.current);\n        pollIntervalRef.current = null;\n      }\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n        timerRef.current = null;\n      }\n\n      // Reset error state\n      setErrorMessage('');\n\n      // Reinitialize payment\n      initializeQRPayment();\n    } catch (__error) {\n      setErrorMessage('Failed to retry payment. Please try again.');\n    }\n  };\n\n  const getStatusMessage = () => {\n    switch (__paymentStatus) {\n      case 'loading':\n        return 'Generating QR code...';\n      case 'waiting':\n        return 'Scan with your banking app';\n      case 'scanning':\n        return 'Customer scanning QR code...';\n      case 'completed':\n        return 'Payment successful!';\n      case 'expired':\n        return 'QR code expired';\n      case 'failed':\n        return errorMessage || 'Payment failed';\n      default:\n        return 'Ready for payment';\n    }\n  };\n\n  const getStatusColor = () => {\n    switch (__paymentStatus) {\n      case 'completed':\n        return '#4CAF50';\n      case 'failed':\n      case 'expired':\n        return '#F44336';\n      case 'scanning':\n        return '#FF9800';\n      default:\n        return theme.colors.primary;\n    }\n  };\n\n  const formatTime = (seconds: _number) => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n  };\n\n  const styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      backgroundColor: theme.colors.background,\n    },\n    header: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      justifyContent: 'space-between',\n      padding: 20,\n      borderBottomWidth: 1,\n      borderBottomColor: theme.colors.border,\n    },\n    headerTitle: {\n      fontSize: 18,\n      fontWeight: '600',\n      color: theme.colors.text,\n    },\n    content: {\n      flex: 1,\n      alignItems: 'center',\n      padding: 20,\n    },\n    amountContainer: {\n      alignItems: 'center',\n      marginBottom: 30,\n    },\n    amountLabel: {\n      fontSize: 16,\n      color: theme.colors.textSecondary,\n      marginBottom: 8,\n    },\n    amount: {\n      fontSize: 32,\n      fontWeight: 'bold',\n      color: theme.colors.text,\n    },\n    qrContainer: {\n      alignItems: 'center',\n      padding: 20,\n      borderRadius: 16,\n      marginBottom: 30,\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      ...require('../../utils/ShadowUtils').createOptimizedShadow('medium', 'white'),\n    },\n    loadingContainer: {\n      width: 200,\n      height: 200,\n      alignItems: 'center',\n      justifyContent: 'center',\n    },\n    statusContainer: {\n      alignItems: 'center',\n      marginBottom: 20,\n    },\n    statusIcon: {\n      marginBottom: 10,\n    },\n    statusMessage: {\n      fontSize: 18,\n      textAlign: 'center',\n      color: theme.colors.text,\n      marginBottom: 10,\n    },\n    instructions: {\n      fontSize: 14,\n      textAlign: 'center',\n      color: theme.colors.textSecondary,\n      lineHeight: 20,\n    },\n    timerContainer: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      backgroundColor: theme.colors.background,\n      paddingHorizontal: 16,\n      paddingVertical: 8,\n      borderRadius: 20,\n      borderWidth: 1,\n      borderColor: theme.colors.border,\n      marginTop: 20,\n    },\n    timerIcon: {\n      marginRight: 8,\n    },\n    timerText: {\n      fontSize: 14,\n      fontWeight: '600',\n      color: theme.colors.text,\n    },\n    buttonContainer: {\n      padding: 20,\n    },\n    retryButton: {\n      backgroundColor: theme.colors.primary,\n      padding: 16,\n      borderRadius: 12,\n      alignItems: 'center',\n      marginBottom: 12,\n    },\n    retryButtonText: {\n      color: 'white',\n      fontSize: 16,\n      fontWeight: '600',\n    },\n    cancelButton: {\n      backgroundColor: 'transparent',\n      padding: 16,\n      borderRadius: 12,\n      alignItems: 'center',\n      borderWidth: 1,\n      borderColor: theme.colors.border,\n    },\n    cancelButtonText: {\n      color: theme.colors.text,\n      fontSize: 16,\n      fontWeight: '600',\n    },\n  });\n\n  return (\n    <QRPaymentErrorBoundary\n      onReset={() => {\n        // Reset component state and retry QR generation\n        setPaymentStatus('loading');\n        setErrorMessage('');\n        setQrPayment(__null);\n        initializeQRPayment();\n      }}>\n      <SafeAreaView style={styles.container}>\n        {/* Header */}\n        <View style={styles.header}>\n          <TouchableOpacity onPress={handleCancel}>\n            <Icon name=\"close\" size={24} color={theme.colors.text} />\n          </TouchableOpacity>\n          <Text style={styles.headerTitle}>QR Code Payment</Text>\n          <View style={{ width: 24 }} />\n        </View>\n\n        {/* Content */}\n        <View style={styles.content}>\n          {/* Amount Display */}\n          <View style={styles.amountContainer}>\n            <Text style={styles.amountLabel}>Amount to Pay</Text>\n            <Text style={styles.amount}>\n              {currency === 'GBP' ? '£' : currency}\n              {amount.toFixed(2)}\n            </Text>\n          </View>\n\n          {/* QR Code */}\n          <View style={styles.qrContainer}>\n            {paymentStatus === 'loading' ? (\n              <View style={styles.loadingContainer}>\n                <ActivityIndicator size=\"large\" color={theme.colors.primary} />\n              </View>\n            ) : qrPayment ? (\n              <QRCode value={qrPayment.qrCode} size={200} backgroundColor=\"white\" color=\"black\" />\n            ) : null}\n          </View>\n\n          {/* Status */}\n          <View style={styles.statusContainer}>\n            <View style={styles.statusIcon}>\n              {paymentStatus === 'completed' && (\n                <Icon name=\"check-circle\" size={48} color=\"#4CAF50\" />\n              )}\n              {(paymentStatus === 'failed' || paymentStatus === 'expired') && (\n                <Icon name=\"error\" size={48} color=\"#F44336\" />\n              )}\n              {paymentStatus === 'scanning' && (\n                <Icon name=\"qr-code-scanner\" size={48} color=\"#FF9800\" />\n              )}\n            </View>\n\n            <Text style={[styles.statusMessage, { color: getStatusColor() }]}>\n              {getStatusMessage()}\n            </Text>\n\n            {paymentStatus === 'waiting' && (\n              <Text style={styles.instructions}>\n                Open your banking app and scan this QR code to complete the payment\n              </Text>\n            )}\n\n            {(paymentStatus === 'waiting' || paymentStatus === 'scanning') && timeRemaining > 0 && (\n              <View style={styles.timerContainer}>\n                <Icon\n                  name=\"schedule\"\n                  size={16}\n                  color={theme.colors.textSecondary}\n                  style={styles.timerIcon}\n                />\n                <Text style={styles.timerText}>Expires in {formatTime(__timeRemaining)}</Text>\n              </View>\n            )}\n          </View>\n        </View>\n\n        {/* Bottom Buttons */}\n        <View style={styles.buttonContainer}>\n          {(paymentStatus === 'failed' || paymentStatus === 'expired') && (\n            <TouchableOpacity style={styles.retryButton} onPress={handleRetry}>\n              <Text style={styles.retryButtonText}>Generate New QR Code</Text>\n            </TouchableOpacity>\n          )}\n\n          {paymentStatus !== 'completed' && (\n            <TouchableOpacity style={styles.cancelButton} onPress={handleCancel}>\n              <Text style={styles.cancelButtonText}>Cancel Payment</Text>\n            </TouchableOpacity>\n          )}\n        </View>\n      </SafeAreaView>\n    </QRPaymentErrorBoundary>\n  );\n};\n\nexport default QRCodePaymentScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/payments/SquareCardPaymentScreen.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: '_handleBackPress'. Either include it or remove the dependency array.","line":80,"column":6,"nodeType":"ArrayExpression","endLine":80,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [_handleBackPress]","fix":{"range":[2067,2069],"text":"[_handleBackPress]"}}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":254,"column":45,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[7202,7285],"text":"\n        🔒 Your payment is secured by Square&apos;s PCI-compliant infrastructure\n      "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[7202,7285],"text":"\n        🔒 Your payment is secured by Square&lsquo;s PCI-compliant infrastructure\n      "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[7202,7285],"text":"\n        🔒 Your payment is secured by Square&#39;s PCI-compliant infrastructure\n      "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[7202,7285],"text":"\n        🔒 Your payment is secured by Square&rsquo;s PCI-compliant infrastructure\n      "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_width' is assigned a value but never used.","line":317,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":317,"endColumn":15}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":25,"column":19,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":25,"endColumn":65,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'handleCancelPayment'. Either include it or remove the dependency array.","line":120,"column":6,"nodeType":"ArrayExpression","endLine":120,"endColumn":31,"suggestions":[{"desc":"Update the dependencies array to be: [handleCancelPayment, paymentState.processing]","fix":{"range":[3220,3245],"text":"[handleCancelPayment, paymentState.processing]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * SquareCardPaymentScreen - Card payment processing using Square SDK\n * Handles card entry, _validation, and payment processing through Square In-App Payments\n * Part of the Square secondary payment method integration\n */\n\nimport React, { useState, useCallback } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  Alert,\n  ActivityIndicator,\n  Dimensions,\n  BackHandler,\n} from 'react-native';\nimport { useTheme } from '../../design-system/ThemeProvider';\nimport { Button } from '../../components/ui';\nimport SquareService from '../../services/SquareService';\n\n// Square SDK imports - conditionally loaded\nlet SQIPCardEntry: unknown;\ntry {\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  SQIPCardEntry = require('react-native-square-in-app-payments').SQIPCardEntry;\n} catch (__error) {\n  // Error handled silently\n}\n\ninterface SquareCardPaymentScreenProps {\n  navigation: unknown;\n  route: {\n    params: {\n      amount: number;\n      currency?: string;\n      description?: string;\n      onPaymentComplete: (result: _unknown) => void;\n      onPaymentCancelled: () => void;\n    };\n  };\n}\n\ninterface PaymentState {\n  loading: boolean;\n  processing: boolean;\n  cardValid: boolean;\n  errorMessage: string | null;\n  paymentNonce: string | null;\n}\n\nconst SquareCardPaymentScreen: React.FC<SquareCardPaymentScreenProps> = ({ navigation, route }) => {\n  const { theme } = useTheme();\n  const {\n    amount,\n    currency = 'GBP',\n    description,\n    onPaymentComplete,\n    onPaymentCancelled,\n  } = route.params;\n\n  const [paymentState, setPaymentState] = useState<PaymentState>({\n    loading: _true,\n    processing: _false,\n    cardValid: _false,\n    errorMessage: _null,\n    paymentNonce: _null,\n  });\n\n  const [squareInitialized, setSquareInitialized] = useState(__false);\n\n  // Initialize Square SDK\n  useEffect(() => {\n    initializeSquare();\n  }, []);\n\n  // Handle hardware back button\n  useEffect(() => {\n    const backHandler = BackHandler.addEventListener('hardwareBackPress', _handleBackPress);\n    return () => backHandler.remove();\n  }, []);\n\n  const initializeSquare = async () => {\n    try {\n      setPaymentState(prev => ({ ...prev, loading: true }));\n\n      // Check if Square is properly initialized\n      const status = await SquareService.getIntegrationStatus();\n      if (!status.isConfigured || !status.hasCredentials) {\n        throw new Error('Square payment service not properly configured');\n      }\n\n      // Square SDK is now available\n      setSquareInitialized(__true);\n      setPaymentState(prev => ({\n        ...prev,\n        loading: _false,\n        errorMessage: _null,\n      }));\n    } catch (__error) {\n      setPaymentState(prev => ({\n        ...prev,\n        loading: _false,\n        errorMessage: error instanceof Error ? error.message : 'Failed to initialize payment',\n      }));\n    }\n  };\n\n  const _handleBackPress = useCallback(() => {\n    if (paymentState.processing) {\n      Alert.alert(\n        'Payment in Progress',\n        'Please wait for the payment to complete before going back.',\n        [{ text: 'OK' }],\n      );\n      return true;\n    }\n    handleCancelPayment();\n    return true;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [paymentState.processing]);\n\n  const handleCancelPayment = () => {\n    Alert.alert('Cancel Payment', 'Are you sure you want to cancel this payment?', [\n      { text: 'Continue Payment', style: 'cancel' },\n      {\n        text: 'Cancel',\n        style: 'destructive',\n        onPress: () => {\n          onPaymentCancelled();\n          navigation.goBack();\n        },\n      },\n    ]);\n  };\n\n  const handleCardInputChange = (cardValid: _boolean) => {\n    setPaymentState(prev => ({\n      ...prev,\n      cardValid,\n      errorMessage: _null,\n    }));\n  };\n\n  const processPayment = async () => {\n    try {\n      setPaymentState(prev => ({ ...prev, processing: _true, errorMessage: null }));\n\n      // TODO: Get card nonce from Square SDK when available\n      // const cardResult = await SQIPCardEntry.completeCardEntry();\n      // const nonce = cardResult.nonce;\n\n      // For now, simulate the payment process\n      const paymentResult = await SquareService.processCardPayment(\n        __amount,\n        _currency,\n        description,\n      );\n\n      if (paymentResult.status === 'completed') {\n        // Success - navigate back with result\n        onPaymentComplete({\n          success: _true,\n          paymentMethod: 'square_card',\n          transactionId: paymentResult.id,\n          amount: _amount,\n          currency: _currency,\n        });\n        navigation.goBack();\n      } else {\n        // Payment failed\n        setPaymentState(prev => ({\n          ...prev,\n          processing: _false,\n          errorMessage: paymentResult.errorMessage || 'Payment failed',\n        }));\n      }\n    } catch (__error) {\n      setPaymentState(prev => ({\n        ...prev,\n        processing: _false,\n        errorMessage: error instanceof Error ? error.message : 'Payment processing failed',\n      }));\n    }\n  };\n\n  const renderCardEntry = () => {\n    if (!squareInitialized) {\n      return (\n        <View style={[styles.cardContainer, { backgroundColor: theme.colors.surface }]}>\n          <Text style={[styles.placeholderText, { color: theme.colors.text }]}>\n            Initializing Square Card Entry...\n          </Text>\n        </View>\n      );\n    }\n\n    if (!SQIPCardEntry) {\n      return (\n        <View style={[styles.cardContainer, { backgroundColor: theme.colors.surface }]}>\n          <Text style={[styles.placeholderText, { color: theme.colors.text }]}>\n            Square Card Entry\n          </Text>\n          <Text style={[styles.placeholderSubtext, { color: theme.colors.textSecondary }]}>\n            Square SDK is not available. Please rebuild the app with proper framework embedding.\n          </Text>\n        </View>\n      );\n    }\n\n    return (\n      <SQIPCardEntry\n        style={styles.cardEntry}\n        onCardInputChange={handleCardInputChange}\n        onCardEntryError={error => {\n          setPaymentState(prev => ({ ...prev, errorMessage: error.message }));\n        }}\n      />\n    );\n  };\n\n  const renderErrorMessage = () => {\n    if (!paymentState.errorMessage) {\n      return null;\n    }\n\n    return (\n      <View style={[styles.errorContainer, { backgroundColor: theme.colors.error + '15' }]}>\n        <Text style={[styles.errorText, { color: theme.colors.error }]}>\n          {paymentState.errorMessage}\n        </Text>\n      </View>\n    );\n  };\n\n  const renderPaymentInfo = () => (\n    <View style={[styles.paymentInfo, { backgroundColor: theme.colors.surface }]}>\n      <Text style={[styles.paymentLabel, { color: theme.colors.textSecondary }]}>\n        Payment Amount\n      </Text>\n      <Text style={[styles.paymentAmount, { color: theme.colors.text }]}>\n        {currency} {amount.toFixed(2)}\n      </Text>\n      {description && (\n        <Text style={[styles.paymentDescription, { color: theme.colors.textSecondary }]}>\n          {description}\n        </Text>\n      )}\n    </View>\n  );\n\n  const renderSecurityInfo = () => (\n    <View style={styles.securityInfo}>\n      <Text style={[styles.securityText, { color: theme.colors.textSecondary }]}>\n        🔒 Your payment is secured by Square's PCI-compliant infrastructure\n      </Text>\n    </View>\n  );\n\n  if (paymentState.loading) {\n    return (\n      <View\n        style={[styles.container, styles.centered, { backgroundColor: theme.colors.background }]}>\n        <ActivityIndicator size=\"large\" color={theme.colors.primary} />\n        <Text style={[styles.loadingText, { color: theme.colors.text }]}>\n          Initializing Square Payment\n        </Text>\n      </View>\n    );\n  }\n\n  return (\n    <View style={[styles.container, { backgroundColor: theme.colors.background }]}>\n      {/* Header */}\n      <View style={[styles.header, { backgroundColor: theme.colors.surface }]}>\n        <Text style={[styles.headerTitle, { color: theme.colors.text }]}>Square Card Payment</Text>\n        <Text style={[styles.headerSubtitle, { color: theme.colors.textSecondary }]}>\n          Enter your card details to complete payment\n        </Text>\n      </View>\n\n      {/* Payment Information */}\n      {renderPaymentInfo()}\n\n      {/* Card Entry */}\n      <View style={styles.cardSection}>\n        <Text style={[styles.sectionTitle, { color: theme.colors.text }]}>Card Details</Text>\n        {renderCardEntry()}\n      </View>\n\n      {/* Error Message */}\n      {renderErrorMessage()}\n\n      {/* Security Info */}\n      {renderSecurityInfo()}\n\n      {/* Action Buttons */}\n      <View style={styles.buttonContainer}>\n        <Button\n          title=\"Cancel\"\n          onPress={handleCancelPayment}\n          variant=\"outline\"\n          disabled={paymentState.processing}\n          style={[styles.button, styles.cancelButton]}\n        />\n        <Button\n          title={paymentState.processing ? 'Processing...' : `Pay ${currency} ${amount.toFixed(2)}`}\n          onPress={processPayment}\n          disabled={!paymentState.cardValid || paymentState.processing}\n          loading={paymentState.processing}\n          style={[styles.button, styles.payButton]}\n        />\n      </View>\n    </View>\n  );\n};\n\nconst { _width } = Dimensions.get('window');\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  centered: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  loadingText: {\n    marginTop: 16,\n    fontSize: 16,\n    fontWeight: '500',\n  },\n  header: {\n    padding: 20,\n    borderBottomWidth: 1,\n    borderBottomColor: '#E5E5E5',\n  },\n  headerTitle: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 4,\n  },\n  headerSubtitle: {\n    fontSize: 16,\n  },\n  paymentInfo: {\n    margin: 16,\n    padding: 16,\n    borderRadius: 12,\n    alignItems: 'center',\n  },\n  paymentLabel: {\n    fontSize: 14,\n    fontWeight: '500',\n    marginBottom: 4,\n  },\n  paymentAmount: {\n    fontSize: 28,\n    fontWeight: 'bold',\n    marginBottom: 8,\n  },\n  paymentDescription: {\n    fontSize: 14,\n    textAlign: 'center',\n  },\n  cardSection: {\n    flex: 1,\n    margin: 16,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    marginBottom: 12,\n  },\n  cardContainer: {\n    borderRadius: 12,\n    padding: 20,\n    minHeight: 120,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderWidth: 2,\n    borderColor: '#E5E5E5',\n  },\n  cardEntry: {\n    height: 120,\n    borderRadius: 12,\n  },\n  placeholderText: {\n    fontSize: 16,\n    fontWeight: '500',\n    textAlign: 'center',\n    marginBottom: 8,\n  },\n  placeholderSubtext: {\n    fontSize: 12,\n    textAlign: 'center',\n    lineHeight: 16,\n  },\n  errorContainer: {\n    margin: 16,\n    padding: 12,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: '#FF6B6B',\n  },\n  errorText: {\n    fontSize: 14,\n    textAlign: 'center',\n    fontWeight: '500',\n  },\n  securityInfo: {\n    paddingHorizontal: 16,\n    paddingBottom: 16,\n  },\n  securityText: {\n    fontSize: 12,\n    textAlign: 'center',\n    lineHeight: 16,\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    padding: 16,\n    gap: 12,\n  },\n  button: {\n    flex: 1,\n    height: 50,\n  },\n  cancelButton: {\n    // Styled via variant prop\n  },\n  payButton: {\n    // Primary button styling applied by default\n  },\n});\n\nexport default SquareCardPaymentScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/payments/SquareContactlessPaymentScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SQIPApplePay' is defined but never used.","line":22,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":26},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'SQIPApplePay' is defined but never used. Allowed unused vars must match /^_/u.","line":22,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SQIPGooglePay' is defined but never used.","line":23,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":27},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'SQIPGooglePay' is defined but never used. Allowed unused vars must match /^_/u.","line":23,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":27},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: '_handleBackPress'. Either include it or remove the dependency array.","line":84,"column":6,"nodeType":"ArrayExpression","endLine":84,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [_handleBackPress]","fix":{"range":[2191,2193],"text":"[_handleBackPress]"}}]},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { backgroundColor: '#000' }","line":289,"column":49,"nodeType":"ObjectExpression","endLine":289,"endColumn":76},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { color: '#fff' }","line":290,"column":24,"nodeType":"ObjectExpression","endLine":290,"endColumn":41},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { backgroundColor: '#4285F4' }","line":301,"column":49,"nodeType":"ObjectExpression","endLine":301,"endColumn":79},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { color: '#fff' }","line":302,"column":24,"nodeType":"ObjectExpression","endLine":302,"endColumn":41},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":342,"column":78,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[10209,10333],"text":"\n        🔒 Contactless payments are secured with device biometrics and Square&apos;s PCI-compliant\n        infrastructure\n      "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[10209,10333],"text":"\n        🔒 Contactless payments are secured with device biometrics and Square&lsquo;s PCI-compliant\n        infrastructure\n      "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[10209,10333],"text":"\n        🔒 Contactless payments are secured with device biometrics and Square&#39;s PCI-compliant\n        infrastructure\n      "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[10209,10333],"text":"\n        🔒 Contactless payments are secured with device biometrics and Square&rsquo;s PCI-compliant\n        infrastructure\n      "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":368,"column":26,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[11152,11216],"text":"\n          Use your device&apos;s contactless payment method\n        "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[11152,11216],"text":"\n          Use your device&lsquo;s contactless payment method\n        "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[11152,11216],"text":"\n          Use your device&#39;s contactless payment method\n        "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[11152,11216],"text":"\n          Use your device&rsquo;s contactless payment method\n        "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":26,"column":21,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":26,"endColumn":67,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'handleCancelPayment'. Either include it or remove the dependency array.","line":135,"column":6,"nodeType":"ArrayExpression","endLine":135,"endColumn":35,"suggestions":[{"desc":"Update the dependencies array to be: [contactlessState.processing, handleCancelPayment]","fix":{"range":[3817,3846],"text":"[contactlessState.processing, handleCancelPayment]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":6,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * SquareContactlessPaymentScreen - Contactless payment processing using Square SDK\n * Handles Apple Pay and Google Pay integration through Square In-App Payments\n * Part of the Square secondary payment method integration\n */\n\nimport React, { useState, useCallback } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  Alert,\n  ActivityIndicator,\n  Platform,\n  BackHandler,\n} from 'react-native';\nimport { useTheme } from '../../design-system/ThemeProvider';\nimport { Button } from '../../components/ui';\nimport SquareService from '../../services/SquareService';\n\n// Square SDK imports - conditionally loaded\nlet SQIPApplePay: unknown;\nlet SQIPGooglePay: unknown;\ntry {\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  const SquareSDK = require('react-native-square-in-app-payments');\n  _SQIPApplePay = SquareSDK.SQIPApplePay;\n  _SQIPGooglePay = SquareSDK.SQIPGooglePay;\n} catch (__error) {\n  // Error handled silently\n}\n\ninterface SquareContactlessPaymentScreenProps {\n  navigation: unknown;\n  route: {\n    params: {\n      amount: number;\n      currency?: string;\n      description?: string;\n      onPaymentComplete: (result: _unknown) => void;\n      onPaymentCancelled: () => void;\n    };\n  };\n}\n\ninterface ContactlessState {\n  loading: boolean;\n  processing: boolean;\n  applePaySupported: boolean;\n  googlePaySupported: boolean;\n  errorMessage: string | null;\n}\n\nconst SquareContactlessPaymentScreen: React.FC<SquareContactlessPaymentScreenProps> = ({\n  navigation,\n  route,\n}) => {\n  const { theme } = useTheme();\n  const {\n    amount,\n    currency = 'GBP',\n    description,\n    onPaymentComplete,\n    onPaymentCancelled,\n  } = route.params;\n\n  const [contactlessState, setContactlessState] = useState<ContactlessState>({\n    loading: _true,\n    processing: _false,\n    applePaySupported: _false,\n    googlePaySupported: _false,\n    errorMessage: _null,\n  });\n\n  // Initialize contactless payment support\n  useEffect(() => {\n    initializeContactlessSupport();\n  }, []);\n\n  // Handle hardware back button\n  useEffect(() => {\n    const backHandler = BackHandler.addEventListener('hardwareBackPress', _handleBackPress);\n    return () => backHandler.remove();\n  }, []);\n\n  const initializeContactlessSupport = async () => {\n    try {\n      setContactlessState(prev => ({ ...prev, loading: true }));\n\n      // Check Square service status\n      const status = await SquareService.getIntegrationStatus();\n      if (!status.isConfigured || !status.hasCredentials) {\n        throw new Error('Square payment service not properly configured');\n      }\n\n      // Check device support for contactless payments\n      const applePaySupported =\n        Platform.OS === 'ios' && (await SquareService.isContactlessSupported('apple_pay'));\n      const googlePaySupported =\n        Platform.OS === 'android' && (await SquareService.isContactlessSupported('google_pay'));\n\n      if (!applePaySupported && !googlePaySupported) {\n        throw new Error('Contactless payments not supported on this device');\n      }\n\n      setContactlessState(prev => ({\n        ...prev,\n        loading: _false,\n        applePaySupported,\n        googlePaySupported,\n        errorMessage: _null,\n      }));\n    } catch (__error) {\n      setContactlessState(prev => ({\n        ...prev,\n        loading: _false,\n        errorMessage:\n          error instanceof Error ? error.message : 'Failed to initialize contactless payments',\n      }));\n    }\n  };\n\n  const _handleBackPress = useCallback(() => {\n    if (contactlessState.processing) {\n      Alert.alert(\n        'Payment in Progress',\n        'Please wait for the payment to complete before going back.',\n        [{ text: 'OK' }],\n      );\n      return true;\n    }\n    handleCancelPayment();\n    return true;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [contactlessState.processing]);\n\n  const handleCancelPayment = () => {\n    Alert.alert('Cancel Payment', 'Are you sure you want to cancel this payment?', [\n      { text: 'Continue Payment', style: 'cancel' },\n      {\n        text: 'Cancel',\n        style: 'destructive',\n        onPress: () => {\n          onPaymentCancelled();\n          navigation.goBack();\n        },\n      },\n    ]);\n  };\n\n  const processApplePayPayment = async () => {\n    try {\n      setContactlessState(prev => ({ ...prev, processing: _true, errorMessage: null }));\n\n      // TODO: Implement Apple Pay when SDK is available\n      // const applePayResult = await SQIPApplePay.requestApplePayNonce({\n      //   price: amount.toString(),\n      //   summaryLabel: description || 'Fynlo POS Payment',\n      //   countryCode: 'GB',\n      //   currencyCode: _currency,\n      // });\n\n      // Process payment with Square service\n      const paymentResult = await SquareService.processContactlessPayment(\n        amount,\n        currency,\n        'apple_pay',\n        description,\n      );\n\n      if (paymentResult.status === 'completed') {\n        onPaymentComplete({\n          success: _true,\n          paymentMethod: 'square_apple_pay',\n          transactionId: paymentResult.id,\n          amount: _amount,\n          currency: _currency,\n        });\n        navigation.goBack();\n      } else {\n        setContactlessState(prev => ({\n          ...prev,\n          processing: _false,\n          errorMessage: paymentResult.errorMessage || 'Apple Pay payment failed',\n        }));\n      }\n    } catch (__error) {\n      setContactlessState(prev => ({\n        ...prev,\n        processing: _false,\n        errorMessage: error instanceof Error ? error.message : 'Apple Pay payment failed',\n      }));\n    }\n  };\n\n  const processGooglePayPayment = async () => {\n    try {\n      setContactlessState(prev => ({ ...prev, processing: _true, errorMessage: null }));\n\n      // TODO: Implement Google Pay when SDK is available\n      // const googlePayResult = await SQIPGooglePay.requestGooglePayNonce({\n      //   price: amount.toString(),\n      //   currencyCode: _currency,\n      //   priceStatus: 'FINAL',\n      // });\n\n      // Process payment with Square service\n      const paymentResult = await SquareService.processContactlessPayment(\n        amount,\n        currency,\n        'google_pay',\n        description,\n      );\n\n      if (paymentResult.status === 'completed') {\n        onPaymentComplete({\n          success: _true,\n          paymentMethod: 'square_google_pay',\n          transactionId: paymentResult.id,\n          amount: _amount,\n          currency: _currency,\n        });\n        navigation.goBack();\n      } else {\n        setContactlessState(prev => ({\n          ...prev,\n          processing: _false,\n          errorMessage: paymentResult.errorMessage || 'Google Pay payment failed',\n        }));\n      }\n    } catch (__error) {\n      setContactlessState(prev => ({\n        ...prev,\n        processing: _false,\n        errorMessage: error instanceof Error ? error.message : 'Google Pay payment failed',\n      }));\n    }\n  };\n\n  const handleFallbackToCard = () => {\n    navigation.replace('SquareCardPayment', {\n      amount,\n      currency,\n      description,\n      onPaymentComplete,\n      onPaymentCancelled,\n    });\n  };\n\n  const renderPaymentInfo = () => (\n    <View style={[styles.paymentInfo, { backgroundColor: theme.colors.surface }]}>\n      <Text style={[styles.paymentLabel, { color: theme.colors.textSecondary }]}>\n        Payment Amount\n      </Text>\n      <Text style={[styles.paymentAmount, { color: theme.colors.text }]}>\n        {currency} {amount.toFixed(2)}\n      </Text>\n      {description && (\n        <Text style={[styles.paymentDescription, { color: theme.colors.textSecondary }]}>\n          {description}\n        </Text>\n      )}\n    </View>\n  );\n\n  const renderPaymentMethods = () => {\n    if (!contactlessState.applePaySupported && !contactlessState.googlePaySupported) {\n      return (\n        <View style={styles.noSupportContainer}>\n          <Text style={[styles.noSupportText, { color: theme.colors.textSecondary }]}>\n            Contactless payments not supported on this device\n          </Text>\n        </View>\n      );\n    }\n\n    return (\n      <View style={styles.paymentMethodsContainer}>\n        <Text style={[styles.sectionTitle, { color: theme.colors.text }]}>\n          Choose Payment Method\n        </Text>\n\n        {contactlessState.applePaySupported && (\n          <Button\n            title=\"Pay with Apple Pay\"\n            onPress={processApplePayPayment}\n            disabled={contactlessState.processing}\n            loading={contactlessState.processing}\n            style={[styles.paymentMethodButton, { backgroundColor: '#000' }]}\n            textStyle={{ color: '#fff' }}\n            icon=\"🍎\"\n          />\n        )}\n\n        {contactlessState.googlePaySupported && (\n          <Button\n            title=\"Pay with Google Pay\"\n            onPress={processGooglePayPayment}\n            disabled={contactlessState.processing}\n            loading={contactlessState.processing}\n            style={[styles.paymentMethodButton, { backgroundColor: '#4285F4' }]}\n            textStyle={{ color: '#fff' }}\n            icon=\"🔷\"\n          />\n        )}\n\n        <View style={styles.divider}>\n          <View style={[styles.dividerLine, { backgroundColor: theme.colors.border }]} />\n          <Text style={[styles.dividerText, { color: theme.colors.textSecondary }]}>or</Text>\n          <View style={[styles.dividerLine, { backgroundColor: theme.colors.border }]} />\n        </View>\n\n        <Button\n          title=\"Pay with Card\"\n          onPress={handleFallbackToCard}\n          variant=\"outline\"\n          disabled={contactlessState.processing}\n          style={styles.cardFallbackButton}\n          icon=\"💳\"\n        />\n      </View>\n    );\n  };\n\n  const renderErrorMessage = () => {\n    if (!contactlessState.errorMessage) {\n      return null;\n    }\n\n    return (\n      <View style={[styles.errorContainer, { backgroundColor: theme.colors.error + '15' }]}>\n        <Text style={[styles.errorText, { color: theme.colors.error }]}>\n          {contactlessState.errorMessage}\n        </Text>\n      </View>\n    );\n  };\n\n  const renderSecurityInfo = () => (\n    <View style={styles.securityInfo}>\n      <Text style={[styles.securityText, { color: theme.colors.textSecondary }]}>\n        🔒 Contactless payments are secured with device biometrics and Square's PCI-compliant\n        infrastructure\n      </Text>\n    </View>\n  );\n\n  if (contactlessState.loading) {\n    return (\n      <View\n        style={[styles.container, styles.centered, { backgroundColor: theme.colors.background }]}>\n        <ActivityIndicator size=\"large\" color={theme.colors.primary} />\n        <Text style={[styles.loadingText, { color: theme.colors.text }]}>\n          Checking Contactless Support\n        </Text>\n      </View>\n    );\n  }\n\n  return (\n    <View style={[styles.container, { backgroundColor: theme.colors.background }]}>\n      {/* Header */}\n      <View style={[styles.header, { backgroundColor: theme.colors.surface }]}>\n        <Text style={[styles.headerTitle, { color: theme.colors.text }]}>\n          Square Contactless Payment\n        </Text>\n        <Text style={[styles.headerSubtitle, { color: theme.colors.textSecondary }]}>\n          Use your device's contactless payment method\n        </Text>\n      </View>\n\n      {/* Payment Information */}\n      {renderPaymentInfo()}\n\n      {/* Payment Methods */}\n      {renderPaymentMethods()}\n\n      {/* Error Message */}\n      {renderErrorMessage()}\n\n      {/* Security Info */}\n      {renderSecurityInfo()}\n\n      {/* Cancel Button */}\n      <View style={styles.buttonContainer}>\n        <Button\n          title=\"Cancel Payment\"\n          onPress={handleCancelPayment}\n          variant=\"outline\"\n          disabled={contactlessState.processing}\n          style={styles.cancelButton}\n        />\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  centered: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  loadingText: {\n    marginTop: 16,\n    fontSize: 16,\n    fontWeight: '500',\n  },\n  header: {\n    padding: 20,\n    borderBottomWidth: 1,\n    borderBottomColor: '#E5E5E5',\n  },\n  headerTitle: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 4,\n  },\n  headerSubtitle: {\n    fontSize: 16,\n  },\n  paymentInfo: {\n    margin: 16,\n    padding: 16,\n    borderRadius: 12,\n    alignItems: 'center',\n  },\n  paymentLabel: {\n    fontSize: 14,\n    fontWeight: '500',\n    marginBottom: 4,\n  },\n  paymentAmount: {\n    fontSize: 28,\n    fontWeight: 'bold',\n    marginBottom: 8,\n  },\n  paymentDescription: {\n    fontSize: 14,\n    textAlign: 'center',\n  },\n  paymentMethodsContainer: {\n    flex: 1,\n    margin: 16,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    marginBottom: 20,\n    textAlign: 'center',\n  },\n  paymentMethodButton: {\n    height: 56,\n    borderRadius: 12,\n    marginBottom: 12,\n  },\n  divider: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginVertical: 20,\n  },\n  dividerLine: {\n    flex: 1,\n    height: 1,\n  },\n  dividerText: {\n    marginHorizontal: 16,\n    fontSize: 14,\n    fontWeight: '500',\n  },\n  cardFallbackButton: {\n    height: 48,\n    borderRadius: 12,\n  },\n  noSupportContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 40,\n  },\n  noSupportText: {\n    fontSize: 16,\n    textAlign: 'center',\n    lineHeight: 24,\n  },\n  errorContainer: {\n    margin: 16,\n    padding: 12,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: '#FF6B6B',\n  },\n  errorText: {\n    fontSize: 14,\n    textAlign: 'center',\n    fontWeight: '500',\n  },\n  securityInfo: {\n    paddingHorizontal: 16,\n    paddingBottom: 16,\n  },\n  securityText: {\n    fontSize: 12,\n    textAlign: 'center',\n    lineHeight: 16,\n  },\n  buttonContainer: {\n    padding: 16,\n  },\n  cancelButton: {\n    height: 48,\n  },\n});\n\nexport default SquareContactlessPaymentScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/reports/CostAnalysisReportDetailScreen.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/reports/FinancialReportDetailScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_width' is assigned a value but never used.","line":20,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_theme' is assigned a value but never used.","line":70,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":70,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_isLoading' is assigned a value but never used.","line":72,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":72,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_data' is assigned a value but never used.","line":109,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":109,"endColumn":18},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { width: 24 }","line":174,"column":24,"nodeType":"ObjectExpression","endLine":174,"endColumn":37},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { fontWeight: 'bold' }","line":297,"column":45,"nodeType":"ObjectExpression","endLine":297,"endColumn":67},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { fontWeight: 'bold' }","line":298,"column":45,"nodeType":"ObjectExpression","endLine":298,"endColumn":90},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { fontWeight: 'bold', fontSize: 16 }","line":311,"column":45,"nodeType":"ObjectExpression","endLine":311,"endColumn":81},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { fontWeight: 'bold', fontSize: 16 }","line":315,"column":19,"nodeType":"ObjectExpression","endLine":319,"endColumn":20},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { fontWeight: 'bold' }","line":423,"column":46,"nodeType":"ObjectExpression","endLine":423,"endColumn":68},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { fontWeight: 'bold' }","line":424,"column":46,"nodeType":"ObjectExpression","endLine":424,"endColumn":91},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: styles.loadingContainer","line":447,"column":3,"nodeType":"Property","endLine":451,"endColumn":4}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  SafeAreaView,\n  StatusBar,\n  ScrollView,\n  TouchableOpacity,\n  Dimensions,\n  Alert,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation } from '@react-navigation/native';\nimport { useTheme } from '../../design-system/ThemeProvider';\nimport DataService from '../../services/DataService';\nimport LoadingView from '../../components/feedback/LoadingView';\nimport ComingSoon from '../../components/feedback/ComingSoon';\n\nconst { _width } = Dimensions.get('window');\n\n// Mock ENV flag\nconst ENV = {\n  FEATURE_REPORTS: _true, // Set to true to enable, false to show ComingSoon\n};\n\nconst Colors = {\n  primary: '#00A651',\n  secondary: '#0066CC',\n  success: '#27AE60',\n  warning: '#F39C12',\n  danger: '#E74C3C',\n  background: '#F8F9FA',\n  white: '#FFFFFF',\n  lightGray: '#ECF0F1',\n  mediumGray: '#BDC3C7',\n  text: '#2C3E50',\n  lightText: '#95A5A6',\n};\n\ninterface FinancialData {\n  grossRevenue: number;\n  netRevenue: number;\n  totalExpenses: number;\n  profit: number;\n  profitMargin: number;\n  expenses: {\n    staffCosts: number;\n    inventory: number;\n    utilities: number;\n    rent: number;\n    marketing: number;\n    other: number;\n  };\n  revenueBySource: {\n    dineIn: number;\n    takeaway: number;\n    delivery: number;\n    catering: number;\n  };\n  taxData: {\n    vatCollected: number;\n    serviceTax: number;\n    totalTaxes: number;\n  };\n}\n\nconst FinancialReportDetailScreen = () => {\n  const navigation = useNavigation();\n  const { _theme } = useTheme();\n  const [reportData, setReportData] = useState<FinancialData | null>(__null);\n  const [_isLoading, setIsLoading] = useState<boolean>(__true);\n  const [error, setError] = useState<string | null>(__null);\n  const [selectedPeriod, setSelectedPeriod] = useState('month');\n\n  const handleExportReport = () => {\n    Alert.alert('Export Financial Report', 'Choose export format', [\n      { text: 'Cancel', style: 'cancel' },\n      {\n        text: 'PDF P&L Statement',\n        onPress: () => Alert.alert('PDF Export', 'P&L PDF coming soon'),\n      },\n      {\n        text: 'Excel Spreadsheet',\n        onPress: () => Alert.alert('Excel Export', 'Excel export coming soon'),\n      },\n      {\n        text: 'Email to Accountant',\n        onPress: () => Alert.alert('Email Report', 'Email functionality coming soon'),\n      },\n    ]);\n  };\n\n  useEffect(() => {\n    if (ENV.FEATURE_REPORTS) {\n      loadReportData();\n    } else {\n      setIsLoading(__false); // Not loading if feature is off\n    }\n  }, [selectedPeriod]);\n\n  const loadReportData = async () => {\n    // Renamed and made async\n    setIsLoading(__true);\n    setError(__null);\n    try {\n      const dataService = DataService.getInstance();\n      // Assuming getFinancialReportDetail returns data in FinancialData shape for the selectedPeriod\n      const _data = await dataService.getFinancialReportDetail(__selectedPeriod);\n      setReportData(__data);\n    } catch (e: _unknown) {\n      setError(e.message || 'Failed to load financial report.');\n      setReportData(__null);\n    } finally {\n      setIsLoading(__false);\n    }\n  };\n\n  // The complex data transformation logic previously in loadFinancialData (calculating expenses, revenue sources from salesHistory)\n  // is now assumed to be handled by the backend or DataService.getFinancialReportDetail.\n  // If DataService.getFinancialReportDetail were to return raw sales history, this screen\n  // would need to retain that transformation logic, but it would operate on API data, not mock generated data.\n  // For this refactor's scope, we assume the service provides the necessary FinancialData structure.\n\n  const formatCurrency = (amount: _number) => {\n    return `£${amount.toLocaleString('en-GB', {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    })}`;\n  };\n\n  const formatPercentage = (value: _number) => {\n    return `${value.toFixed(1)}%`;\n  };\n\n  const getExpenseColor = (expenseType: _string) => {\n    const colors = {\n      staffCosts: Colors.primary,\n      inventory: Colors.warning,\n      utilities: Colors.secondary,\n      rent: Colors.danger,\n      marketing: Colors.success,\n      other: Colors.mediumGray,\n    };\n    return colors[expenseType as keyof typeof colors] || Colors.lightText;\n  };\n\n  const getRevenueSourceColor = (source: _string) => {\n    const colors = {\n      dineIn: Colors.primary,\n      takeaway: Colors.secondary,\n      delivery: Colors.warning,\n      catering: Colors.success,\n    };\n    return colors[source as keyof typeof colors] || Colors.lightText;\n  };\n\n  if (!ENV.FEATURE_REPORTS) {\n    return <ComingSoon />;\n  }\n\n  if (__isLoading) {\n    return <LoadingView message=\"Loading Financial Report...\" />;\n  }\n\n  if (error || !reportData) {\n    return (\n      <SafeAreaView style={styles.container}>\n        <View style={styles.header}>\n          <TouchableOpacity style={styles.backButton} onPress={() => navigation.goBack()}>\n            <Icon name=\"arrow-back\" size={24} color={Colors.white} />\n          </TouchableOpacity>\n          <Text style={styles.headerTitle}>Financial Report</Text>\n          <View style={{ width: 24 }} />\n          {/* Placeholder for balance */}\n        </View>\n        <View style={styles.centeredError}>\n          <Icon name=\"error-outline\" size={64} color={Colors.danger} />\n          <Text style={styles.errorTextHeader}>Error Loading Report</Text>\n          <Text style={styles.errorText}>\n            {error || 'No data available for the selected period.'}\n          </Text>\n          <TouchableOpacity onPress={loadReportData} style={styles.retryButton}>\n            <Text style={styles.retryButtonText}>Try Again</Text>\n          </TouchableOpacity>\n        </View>\n      </SafeAreaView>\n    );\n  }\n\n  // If reportData is available, render the report:\n  return (\n    <SafeAreaView style={styles.container}>\n      <StatusBar barStyle=\"light-content\" backgroundColor={Colors.primary} />\n\n      {/* Header */}\n      <View style={styles.header}>\n        <TouchableOpacity style={styles.backButton} onPress={() => navigation.goBack()}>\n          <Icon name=\"arrow-back\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n        <Text style={styles.headerTitle}>Financial Report</Text>\n        <TouchableOpacity style={styles.headerAction} onPress={handleExportReport}>\n          <Icon name=\"file-download\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n      </View>\n\n      {/* Period Selector */}\n      <View style={styles.periodSelector}>\n        {['week', 'month', 'quarter', 'year'].map(period => (\n          <TouchableOpacity\n            key={period}\n            style={[styles.periodButton, selectedPeriod === period && styles.periodButtonActive]}\n            onPress={() => setSelectedPeriod(__period)}>\n            <Text style={[styles.periodText, selectedPeriod === period && styles.periodTextActive]}>\n              {period.charAt(0).toUpperCase() + period.slice(1)}\n            </Text>\n          </TouchableOpacity>\n        ))}\n      </View>\n\n      <ScrollView style={styles.content}>\n        {/* Key Metrics */}\n        <View style={styles.summaryContainer}>\n          <View style={[styles.summaryCard, { borderLeftColor: Colors.primary }]}>\n            <Text style={styles.summaryValue}>{formatCurrency(reportData.grossRevenue)}</Text>\n            <Text style={styles.summaryLabel}>Gross Revenue</Text>\n            <View style={[styles.trendIndicator, { backgroundColor: Colors.success }]}>\n              <Icon name=\"trending-up\" size={12} color={Colors.white} />\n              <Text style={styles.trendText}>+15.2%</Text>\n              {/* Placeholder trend */}\n            </View>\n          </View>\n\n          <View style={[styles.summaryCard, { borderLeftColor: Colors.success }]}>\n            <Text style={[styles.summaryValue, { color: Colors.success }]}>\n              {formatCurrency(reportData.profit)}\n            </Text>\n            <Text style={styles.summaryLabel}>Net Profit</Text>\n            <View style={[styles.trendIndicator, { backgroundColor: Colors.success }]}>\n              <Icon name=\"trending-up\" size={12} color={Colors.white} />\n              <Text style={styles.trendText}>+8.5%</Text>\n              {/* Placeholder trend */}\n            </View>\n          </View>\n\n          <View style={[styles.summaryCard, { borderLeftColor: Colors.warning }]}>\n            <Text style={[styles.summaryValue, { color: Colors.warning }]}>\n              {formatPercentage(reportData.profitMargin)}\n            </Text>\n            <Text style={styles.summaryLabel}>Profit Margin</Text>\n            <View style={[styles.trendIndicator, { backgroundColor: Colors.warning }]}>\n              <Icon name=\"trending-flat\" size={12} color={Colors.white} />\n              <Text style={styles.trendText}>-1.2%</Text>\n              {/* Placeholder trend */}\n            </View>\n          </View>\n\n          <View style={[styles.summaryCard, { borderLeftColor: Colors.danger }]}>\n            <Text style={[styles.summaryValue, { color: Colors.danger }]}>\n              {formatCurrency(reportData.totalExpenses)}\n            </Text>\n            <Text style={styles.summaryLabel}>Total Expenses</Text>\n            <View style={[styles.trendIndicator, { backgroundColor: Colors.danger }]}>\n              <Icon name=\"trending-up\" size={12} color={Colors.white} />\n              <Text style={styles.trendText}>+12.1%</Text>\n              {/* Placeholder trend */}\n            </View>\n          </View>\n        </View>\n\n        {/* Profit & Loss Summary */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Profit & Loss Statement</Text>\n          <View style={styles.card}>\n            <View style={styles.plRow}>\n              <Text style={styles.plLabel}>Gross Revenue</Text>\n              <Text style={[styles.plValue, { color: Colors.success }]}>\n                {formatCurrency(reportData.grossRevenue)}\n              </Text>\n            </View>\n\n            <View style={styles.plRow}>\n              <Text style={styles.plLabel}>Less: VAT ({formatPercentage(20)})</Text>\n              <Text style={[styles.plValue, { color: Colors.danger }]}>\n                -{formatCurrency(reportData.taxData.vatCollected)}\n              </Text>\n            </View>\n\n            <View style={styles.plRow}>\n              <Text style={styles.plLabel}>Less: Service Tax ({formatPercentage(12.5)})</Text>\n              <Text style={[styles.plValue, { color: Colors.danger }]}>\n                -{formatCurrency(reportData.taxData.serviceTax)}\n              </Text>\n            </View>\n\n            <View style={[styles.plRow, styles.plRowDivider]}>\n              <Text style={[styles.plLabel, { fontWeight: 'bold' }]}>Net Revenue</Text>\n              <Text style={[styles.plValue, { fontWeight: 'bold', color: Colors.primary }]}>\n                {formatCurrency(reportData.netRevenue)}\n              </Text>\n            </View>\n\n            <View style={styles.plRow}>\n              <Text style={styles.plLabel}>Total Expenses</Text>\n              <Text style={[styles.plValue, { color: Colors.danger }]}>\n                -{formatCurrency(reportData.totalExpenses)}\n              </Text>\n            </View>\n\n            <View style={[styles.plRow, styles.plRowFinal]}>\n              <Text style={[styles.plLabel, { fontWeight: 'bold', fontSize: 16 }]}>Net Profit</Text>\n              <Text\n                style={[\n                  styles.plValue,\n                  {\n                    fontWeight: 'bold',\n                    fontSize: 16,\n                    color: reportData.profit >= 0 ? Colors.success : Colors.danger,\n                  },\n                ]}>\n                {formatCurrency(reportData.profit)}\n              </Text>\n            </View>\n          </View>\n        </View>\n\n        {/* Expense Breakdown */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Expense Breakdown</Text>\n          <View style={styles.card}>\n            {Object.entries(reportData.expenses).map(([key, value]) => {\n              const percentage = (value / reportData.totalExpenses) * 100;\n              return (\n                <View key={key} style={styles.expenseRow}>\n                  <View style={styles.expenseInfo}>\n                    <View\n                      style={[styles.expenseColorDot, { backgroundColor: getExpenseColor(__key) }]}\n                    />\n                    <Text style={styles.expenseLabel}>\n                      {key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}\n                    </Text>\n                  </View>\n\n                  <View style={styles.expenseValues}>\n                    <Text style={styles.expenseAmount}>{formatCurrency(__value)}</Text>\n                    <Text style={styles.expensePercentage}>({formatPercentage(__percentage)})</Text>\n                  </View>\n\n                  <View style={styles.expenseBar}>\n                    <View\n                      style={[\n                        styles.expenseBarFill,\n                        {\n                          width: `${percentage}%`,\n                          backgroundColor: getExpenseColor(__key),\n                        },\n                      ]}\n                    />\n                  </View>\n                </View>\n              );\n            })}\n          </View>\n        </View>\n\n        {/* Revenue Sources */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Revenue by Source</Text>\n          <View style={styles.card}>\n            {Object.entries(reportData.revenueBySource).map(([key, value]) => {\n              const percentage = (value / reportData.grossRevenue) * 100;\n              return (\n                <View key={key} style={styles.revenueRow}>\n                  <View style={styles.revenueInfo}>\n                    <View\n                      style={[\n                        styles.revenueColorDot,\n                        { backgroundColor: getRevenueSourceColor(__key) },\n                      ]}\n                    />\n                    <Text style={styles.revenueLabel}>\n                      {key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}\n                    </Text>\n                  </View>\n\n                  <View style={styles.revenueValues}>\n                    <Text style={styles.revenueAmount}>{formatCurrency(__value)}</Text>\n                    <Text style={styles.revenuePercentage}>({formatPercentage(__percentage)})</Text>\n                  </View>\n\n                  <View style={styles.revenueBar}>\n                    <View\n                      style={[\n                        styles.revenueBarFill,\n                        {\n                          width: `${percentage}%`,\n                          backgroundColor: getRevenueSourceColor(__key),\n                        },\n                      ]}\n                    />\n                  </View>\n                </View>\n              );\n            })}\n          </View>\n        </View>\n\n        {/* Tax Summary */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Tax Summary</Text>\n          <View style={styles.card}>\n            <View style={styles.taxRow}>\n              <Text style={styles.taxLabel}>VAT Collected (20%)</Text>\n              <Text style={styles.taxValue}>{formatCurrency(reportData.taxData.vatCollected)}</Text>\n            </View>\n\n            <View style={styles.taxRow}>\n              <Text style={styles.taxLabel}>Service Tax (12.5%)</Text>\n              <Text style={styles.taxValue}>{formatCurrency(reportData.taxData.serviceTax)}</Text>\n            </View>\n\n            <View style={[styles.taxRow, styles.taxRowTotal]}>\n              <Text style={[styles.taxLabel, { fontWeight: 'bold' }]}>Total Taxes</Text>\n              <Text style={[styles.taxValue, { fontWeight: 'bold', color: Colors.primary }]}>\n                {formatCurrency(reportData.taxData.totalTaxes)}\n              </Text>\n            </View>\n\n            <View style={styles.taxNote}>\n              <Icon name=\"info\" size={16} color={Colors.warning} />\n              <Text style={styles.taxNoteText}>Tax remittance due by the 20th of next month</Text>\n            </View>\n          </View>\n        </View>\n\n        <View style={styles.spacer} />\n      </ScrollView>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  loadingContainer: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  header: {\n    backgroundColor: Colors.primary,\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    height: 60,\n  },\n  backButton: {\n    padding: 8,\n  },\n  headerTitle: {\n    flex: 1,\n    color: Colors.white,\n    fontSize: 20,\n    fontWeight: 'bold',\n    textAlign: 'center',\n  },\n  headerAction: {\n    padding: 8,\n  },\n  periodSelector: {\n    flexDirection: 'row',\n    backgroundColor: Colors.white,\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.lightGray,\n  },\n  periodButton: {\n    flex: 1,\n    paddingVertical: 8,\n    paddingHorizontal: 12,\n    marginHorizontal: 4,\n    borderRadius: 20,\n    backgroundColor: Colors.lightGray,\n    alignItems: 'center',\n  },\n  periodButtonActive: {\n    backgroundColor: Colors.primary,\n  },\n  periodText: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.text,\n  },\n  periodTextActive: {\n    color: Colors.white,\n  },\n  content: {\n    flex: 1,\n    padding: 16,\n  },\n  summaryContainer: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'space-between',\n    marginBottom: 20,\n  },\n  summaryCard: {\n    width: '48%',\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 12,\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.1,\n    shadowRadius: 2,\n    borderLeftWidth: 4,\n  },\n  summaryValue: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  summaryLabel: {\n    fontSize: 12,\n    color: Colors.lightText,\n    marginBottom: 8,\n  },\n  trendIndicator: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 6,\n    paddingVertical: 2,\n    borderRadius: 8,\n    alignSelf: 'flex-start',\n  },\n  trendText: {\n    fontSize: 10,\n    color: Colors.white,\n    marginLeft: 2,\n    fontWeight: '500',\n  },\n  section: {\n    marginBottom: 20,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: Colors.text,\n    marginBottom: 12,\n  },\n  card: {\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    padding: 16,\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.1,\n    shadowRadius: 2,\n  },\n  plRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n  },\n  plRowDivider: {\n    borderTopWidth: 1,\n    borderTopColor: Colors.lightGray,\n    marginTop: 8,\n    paddingTop: 16,\n  },\n  plRowFinal: {\n    borderTopWidth: 2,\n    borderTopColor: Colors.primary,\n    marginTop: 8,\n    paddingTop: 16,\n    backgroundColor: Colors.lightGray,\n    marginHorizontal: -16,\n    paddingHorizontal: 16,\n  },\n  plLabel: {\n    fontSize: 14,\n    color: Colors.text,\n  },\n  plValue: {\n    fontSize: 14,\n    fontWeight: '600',\n  },\n  expenseRow: {\n    marginBottom: 16,\n  },\n  expenseInfo: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  expenseColorDot: {\n    width: 12,\n    height: 12,\n    borderRadius: 6,\n    marginRight: 8,\n  },\n  expenseLabel: {\n    fontSize: 14,\n    color: Colors.text,\n    fontWeight: '500',\n  },\n  expenseValues: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  expenseAmount: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: Colors.text,\n  },\n  expensePercentage: {\n    fontSize: 12,\n    color: Colors.lightText,\n  },\n  expenseBar: {\n    height: 6,\n    backgroundColor: Colors.lightGray,\n    borderRadius: 3,\n  },\n  expenseBarFill: {\n    height: '100%',\n    borderRadius: 3,\n  },\n  revenueRow: {\n    marginBottom: 16,\n  },\n  revenueInfo: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  revenueColorDot: {\n    width: 12,\n    height: 12,\n    borderRadius: 6,\n    marginRight: 8,\n  },\n  revenueLabel: {\n    fontSize: 14,\n    color: Colors.text,\n    fontWeight: '500',\n  },\n  revenueValues: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  revenueAmount: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: Colors.text,\n  },\n  revenuePercentage: {\n    fontSize: 12,\n    color: Colors.lightText,\n  },\n  revenueBar: {\n    height: 6,\n    backgroundColor: Colors.lightGray,\n    borderRadius: 3,\n  },\n  revenueBarFill: {\n    height: '100%',\n    borderRadius: 3,\n  },\n  taxRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n  },\n  taxRowTotal: {\n    borderTopWidth: 1,\n    borderTopColor: Colors.lightGray,\n    marginTop: 8,\n    paddingTop: 16,\n  },\n  taxLabel: {\n    fontSize: 14,\n    color: Colors.text,\n  },\n  taxValue: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  taxNote: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginTop: 16,\n    padding: 12,\n    backgroundColor: '#FFF9E6',\n    borderRadius: 8,\n  },\n  taxNoteText: {\n    fontSize: 12,\n    color: Colors.warning,\n    marginLeft: 8,\n    flex: 1,\n  },\n  spacer: {\n    height: 40,\n  },\n  centeredError: {\n    // Added\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20,\n  },\n  errorTextHeader: {\n    // Added\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: Colors.danger,\n    marginTop: 16,\n    marginBottom: 8,\n    textAlign: 'center',\n  },\n  errorText: {\n    // Added\n    fontSize: 14,\n    color: Colors.text,\n    textAlign: 'center',\n    marginBottom: 20,\n  },\n  retryButton: {\n    // Added\n    backgroundColor: Colors.primary,\n    paddingVertical: 10,\n    paddingHorizontal: 20,\n    borderRadius: 8,\n  },\n  retryButtonText: {\n    // Added\n    color: Colors.white,\n    fontSize: 16,\n    fontWeight: '600',\n  },\n});\n\nexport default FinancialReportDetailScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/reports/InventoryReportDetailScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_transformedData' is assigned a value but never used.","line":65,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":65,"endColumn":46},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { fontWeight: 'bold' }","line":303,"column":51,"nodeType":"ObjectExpression","endLine":303,"endColumn":96}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadInventoryData'. Either include it or remove the dependency array.","line":54,"column":6,"nodeType":"ArrayExpression","endLine":54,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadInventoryData]","fix":{"range":[1358,1360],"text":"[loadInventoryData]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  SafeAreaView,\n  StatusBar,\n  ScrollView,\n  TouchableOpacity,\n  ActivityIndicator,\n  Alert,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation } from '@react-navigation/native';\nimport DataService from '../../services/DataService';\n\nconst Colors = {\n  primary: '#00A651',\n  secondary: '#0066CC',\n  success: '#27AE60',\n  warning: '#F39C12',\n  danger: '#E74C3C',\n  background: '#F8F9FA',\n  white: '#FFFFFF',\n  lightGray: '#ECF0F1',\n  mediumGray: '#BDC3C7',\n  text: '#2C3E50',\n  lightText: '#95A5A6',\n};\n\ninterface InventoryItem {\n  id: string;\n  name: string;\n  category: string;\n  currentStock: number;\n  reorderLevel: number;\n  unitCost: number;\n  totalValue: number;\n  supplier: string;\n  lastUpdated: Date;\n  status: 'in_stock' | 'low_stock' | 'out_of_stock';\n}\n\nconst InventoryReportDetailScreen = () => {\n  const navigation = useNavigation();\n  const [inventoryData, setInventoryData] = useState<InventoryItem[]>([]);\n  const [selectedCategory, setSelectedCategory] = useState('all');\n  const [loading, setLoading] = useState(__true);\n  const [error, setError] = useState<string | null>(__null);\n\n  useEffect(() => {\n    loadInventoryData();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const loadInventoryData = async () => {\n    try {\n      setLoading(__true);\n      setError(__null);\n\n      const dataService = DataService.getInstance();\n      const inventory = await dataService.getInventoryReport();\n\n      // Transform API data to match InventoryItem interface if needed\n      const _transformedData: InventoryItem[] = inventory.map((item: _unknown) => ({\n        id: item.id || item.sku,\n        name: item.name || item.product_name,\n        category: item.category || 'Other',\n        currentStock: item.current_stock || item.quantity || 0,\n        reorderLevel: item.reorder_level || item.minimum_stock || 10,\n        unitCost: item.unit_cost || item.cost || 0,\n        totalValue: (item.current_stock || item.quantity || 0) * (item.unit_cost || item.cost || 0),\n        supplier: item.supplier || item.supplier_name || 'Unknown Supplier',\n        lastUpdated: item.last_updated ? new Date(item.last_updated) : new Date(),\n        status: determineStockStatus(\n          item.current_stock || item.quantity || 0,\n          item.reorder_level || item.minimum_stock || 10,\n        ),\n      }));\n\n      setInventoryData(__transformedData);\n    } catch (__error) {\n      setError('Failed to load inventory data. Please try again.');\n      Alert.alert(\n        'Error',\n        'Unable to load inventory data. Please check your connection and try again.',\n        [{ text: 'OK' }],\n      );\n    } finally {\n      setLoading(__false);\n    }\n  };\n\n  const determineStockStatus = (\n    currentStock: _number,\n    reorderLevel: _number,\n  ): 'in_stock' | 'low_stock' | 'out_of_stock' => {\n    if (currentStock === 0) {\n      return 'out_of_stock';\n    }\n    if (currentStock <= reorderLevel) {\n      return 'low_stock';\n    }\n    return 'in_stock';\n  };\n\n  const getFilteredData = () => {\n    if (selectedCategory === 'all') {\n      return inventoryData;\n    }\n    return inventoryData.filter(item => item.category === selectedCategory);\n  };\n\n  const getInventoryStats = () => {\n    const totalItems = inventoryData.length;\n    const _totalValue = inventoryData.reduce((__sum, _item) => sum + item.totalValue, 0);\n    const lowStockItems = inventoryData.filter(item => item.status === 'low_stock').length;\n    const outOfStockItems = inventoryData.filter(item => item.status === 'out_of_stock').length;\n\n    return { totalItems, _totalValue, lowStockItems, outOfStockItems };\n  };\n\n  const getCategories = () => {\n    const categories = ['all', ...new Set(inventoryData.map(item => item.category))];\n    return categories;\n  };\n\n  const getStatusColor = (_status: _string) => {\n    switch (__status) {\n      case 'in_stock':\n        return Colors.success;\n      case 'low_stock':\n        return Colors.warning;\n      case 'out_of_stock':\n        return Colors.danger;\n      default:\n        return Colors.lightText;\n    }\n  };\n\n  const getStatusIcon = (_status: _string) => {\n    switch (__status) {\n      case 'in_stock':\n        return 'check-circle';\n      case 'low_stock':\n        return 'warning';\n      case 'out_of_stock':\n        return 'error';\n      default:\n        return 'help';\n    }\n  };\n\n  const formatCurrency = (amount: _number) => {\n    return `£${amount.toLocaleString('en-GB', {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    })}`;\n  };\n\n  const formatDate = (date: _Date) => {\n    return date.toLocaleDateString('en-GB', {\n      day: '2-digit',\n      month: 'short',\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  };\n\n  const stats = getInventoryStats();\n  const filteredData = getFilteredData();\n  const categories = getCategories();\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <StatusBar barStyle=\"light-content\" backgroundColor={Colors.primary} />\n\n      {/* Header */}\n      <View style={styles.header}>\n        <TouchableOpacity style={styles.backButton} onPress={() => navigation.goBack()}>\n          <Icon name=\"arrow-back\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n        <Text style={styles.headerTitle}>Inventory Report</Text>\n        <TouchableOpacity\n          style={styles.headerAction}\n          onPress={loadInventoryData}\n          disabled={loading}>\n          <Icon name=\"refresh\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n      </View>\n\n      {loading ? (\n        <View style={styles.loadingContainer}>\n          <ActivityIndicator size=\"large\" color={Colors.primary} />\n          <Text style={styles.loadingText}>Loading inventory data...</Text>\n        </View>\n      ) : error ? (\n        <View style={styles.errorContainer}>\n          <Icon name=\"error-outline\" size={48} color={Colors.danger} />\n          <Text style={styles.errorText}>{error}</Text>\n          <TouchableOpacity style={styles.retryButton} onPress={loadInventoryData}>\n            <Text style={styles.retryButtonText}>Retry</Text>\n          </TouchableOpacity>\n        </View>\n      ) : (\n        <ScrollView style={styles.content}>\n          {/* Summary Cards */}\n          <View style={styles.summaryContainer}>\n            <View style={styles.summaryCard}>\n              <Text style={styles.summaryValue}>{stats.totalItems}</Text>\n              <Text style={styles.summaryLabel}>Total Items</Text>\n            </View>\n\n            <View style={styles.summaryCard}>\n              <Text style={styles.summaryValue}>{formatCurrency(stats.totalValue)}</Text>\n              <Text style={styles.summaryLabel}>Total Value</Text>\n            </View>\n\n            <View style={styles.summaryCard}>\n              <Text style={[styles.summaryValue, { color: Colors.warning }]}>\n                {stats.lowStockItems}\n              </Text>\n              <Text style={styles.summaryLabel}>Low Stock</Text>\n            </View>\n\n            <View style={styles.summaryCard}>\n              <Text style={[styles.summaryValue, { color: Colors.danger }]}>\n                {stats.outOfStockItems}\n              </Text>\n              <Text style={styles.summaryLabel}>Out of Stock</Text>\n            </View>\n          </View>\n\n          {/* Category Filter */}\n          <View style={styles.section}>\n            <Text style={styles.sectionTitle}>Filter by Category</Text>\n            <ScrollView\n              horizontal\n              showsHorizontalScrollIndicator={false}\n              style={styles.categoryContainer}>\n              {categories.map(category => (\n                <TouchableOpacity\n                  key={category}\n                  style={[\n                    styles.categoryButton,\n                    selectedCategory === category && styles.categoryButtonActive,\n                  ]}\n                  onPress={() => setSelectedCategory(__category)}>\n                  <Text\n                    style={[\n                      styles.categoryText,\n                      selectedCategory === category && styles.categoryTextActive,\n                    ]}>\n                    {category.charAt(0).toUpperCase() + category.slice(1)}\n                  </Text>\n                </TouchableOpacity>\n              ))}\n            </ScrollView>\n          </View>\n\n          {/* Inventory Items */}\n          <View style={styles.section}>\n            <Text style={styles.sectionTitle}>Inventory Items ({filteredData.length})</Text>\n\n            {filteredData.map((__item, _index) => (\n              <View key={item.id} style={styles.itemCard}>\n                <View style={styles.itemHeader}>\n                  <View style={styles.itemInfo}>\n                    <Text style={styles.itemName}>{item.name}</Text>\n                    <Text style={styles.itemCategory}>{item.category}</Text>\n                  </View>\n                  <View style={styles.statusContainer}>\n                    <Icon\n                      name={getStatusIcon(item.status)}\n                      size={20}\n                      color={getStatusColor(item.status)}\n                    />\n                    <Text style={[styles.statusText, { color: getStatusColor(item.status) }]}>\n                      {item.status.replace('_', ' ').toUpperCase()}\n                    </Text>\n                  </View>\n                </View>\n\n                <View style={styles.itemDetails}>\n                  <View style={styles.detailRow}>\n                    <Text style={styles.detailLabel}>Current Stock:</Text>\n                    <Text style={styles.detailValue}>{item.currentStock} units</Text>\n                  </View>\n\n                  <View style={styles.detailRow}>\n                    <Text style={styles.detailLabel}>Reorder Level:</Text>\n                    <Text style={styles.detailValue}>{item.reorderLevel} units</Text>\n                  </View>\n\n                  <View style={styles.detailRow}>\n                    <Text style={styles.detailLabel}>Unit Cost:</Text>\n                    <Text style={styles.detailValue}>{formatCurrency(item.unitCost)}</Text>\n                  </View>\n\n                  <View style={styles.detailRow}>\n                    <Text style={styles.detailLabel}>Total Value:</Text>\n                    <Text\n                      style={[styles.detailValue, { fontWeight: 'bold', color: Colors.primary }]}>\n                      {formatCurrency(item.totalValue)}\n                    </Text>\n                  </View>\n\n                  <View style={styles.detailRow}>\n                    <Text style={styles.detailLabel}>Supplier:</Text>\n                    <Text style={styles.detailValue}>{item.supplier}</Text>\n                  </View>\n\n                  <View style={styles.detailRow}>\n                    <Text style={styles.detailLabel}>Last Updated:</Text>\n                    <Text style={styles.detailValue}>{formatDate(item.lastUpdated)}</Text>\n                  </View>\n                </View>\n\n                {/* Stock Level Bar */}\n                <View style={styles.stockLevelContainer}>\n                  <Text style={styles.stockLevelLabel}>Stock Level</Text>\n                  <View style={styles.stockLevelBar}>\n                    <View\n                      style={[\n                        styles.stockLevelFill,\n                        {\n                          width: `${Math.min(\n                            (item.currentStock / (item.reorderLevel * 3)) * 100,\n                            100,\n                          )}%`,\n                          backgroundColor: getStatusColor(item.status),\n                        },\n                      ]}\n                    />\n                  </View>\n                  <Text style={styles.stockLevelText}>\n                    {item.currentStock} / {item.reorderLevel * 3} units\n                  </Text>\n                </View>\n\n                {(item.status === 'low_stock' || item.status === 'out_of_stock') && (\n                  <TouchableOpacity style={styles.reorderButton}>\n                    <Icon name=\"shopping-cart\" size={16} color={Colors.white} />\n                    <Text style={styles.reorderButtonText}>Reorder Now</Text>\n                  </TouchableOpacity>\n                )}\n              </View>\n            ))}\n          </View>\n\n          <View style={styles.spacer} />\n        </ScrollView>\n      )}\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.primary,\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    height: 60,\n  },\n  backButton: {\n    padding: 8,\n  },\n  headerTitle: {\n    flex: 1,\n    color: Colors.white,\n    fontSize: 20,\n    fontWeight: 'bold',\n    textAlign: 'center',\n  },\n  headerAction: {\n    padding: 8,\n  },\n  content: {\n    flex: 1,\n    padding: 16,\n  },\n  summaryContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 20,\n  },\n  summaryCard: {\n    flex: 1,\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    padding: 12,\n    marginHorizontal: 2,\n    alignItems: 'center',\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.1,\n    shadowRadius: 2,\n  },\n  summaryValue: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  summaryLabel: {\n    fontSize: 11,\n    color: Colors.lightText,\n    textAlign: 'center',\n  },\n  section: {\n    marginBottom: 20,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: Colors.text,\n    marginBottom: 12,\n  },\n  categoryContainer: {\n    flexDirection: 'row',\n  },\n  categoryButton: {\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    marginRight: 8,\n    borderRadius: 20,\n    backgroundColor: Colors.white,\n    borderWidth: 1,\n    borderColor: Colors.lightGray,\n  },\n  categoryButtonActive: {\n    backgroundColor: Colors.primary,\n    borderColor: Colors.primary,\n  },\n  categoryText: {\n    fontSize: 14,\n    color: Colors.text,\n    fontWeight: '500',\n  },\n  categoryTextActive: {\n    color: Colors.white,\n  },\n  itemCard: {\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 12,\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.1,\n    shadowRadius: 2,\n  },\n  itemHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    marginBottom: 12,\n  },\n  itemInfo: {\n    flex: 1,\n  },\n  itemName: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  itemCategory: {\n    fontSize: 14,\n    color: Colors.lightText,\n    marginTop: 2,\n  },\n  statusContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  statusText: {\n    fontSize: 12,\n    fontWeight: '600',\n    marginLeft: 4,\n  },\n  itemDetails: {\n    marginBottom: 12,\n  },\n  detailRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 6,\n  },\n  detailLabel: {\n    fontSize: 14,\n    color: Colors.lightText,\n  },\n  detailValue: {\n    fontSize: 14,\n    color: Colors.text,\n    fontWeight: '500',\n  },\n  stockLevelContainer: {\n    marginBottom: 12,\n  },\n  stockLevelLabel: {\n    fontSize: 14,\n    color: Colors.text,\n    marginBottom: 6,\n    fontWeight: '500',\n  },\n  stockLevelBar: {\n    height: 8,\n    backgroundColor: Colors.lightGray,\n    borderRadius: 4,\n    marginBottom: 4,\n  },\n  stockLevelFill: {\n    height: '100%',\n    borderRadius: 4,\n  },\n  stockLevelText: {\n    fontSize: 12,\n    color: Colors.lightText,\n    textAlign: 'center',\n  },\n  reorderButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: Colors.warning,\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n    borderRadius: 8,\n  },\n  reorderButtonText: {\n    color: Colors.white,\n    fontSize: 14,\n    fontWeight: '600',\n    marginLeft: 8,\n  },\n  spacer: {\n    height: 40,\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20,\n  },\n  loadingText: {\n    marginTop: 16,\n    fontSize: 16,\n    color: Colors.lightText,\n  },\n  errorContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20,\n  },\n  errorText: {\n    marginTop: 16,\n    fontSize: 16,\n    color: Colors.danger,\n    textAlign: 'center',\n    marginBottom: 24,\n  },\n  retryButton: {\n    backgroundColor: Colors.primary,\n    paddingVertical: 12,\n    paddingHorizontal: 24,\n    borderRadius: 8,\n  },\n  retryButtonText: {\n    color: Colors.white,\n    fontSize: 16,\n    fontWeight: '600',\n  },\n});\n\nexport default InventoryReportDetailScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/reports/LaborReportDetailScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_summaryData' is assigned a value but never used.","line":105,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":105,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_handleExportReport' is assigned a value but never used.","line":132,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":132,"endColumn":28}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  SafeAreaView,\n  TouchableOpacity,\n  ScrollView,\n  Alert,\n  ActivityIndicator,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation } from '@react-navigation/native';\nimport { useTheme } from '../../design-system/ThemeProvider';\nimport DataService from '../../services/DataService';\n\nconst Colors = {\n  primary: '#00A651',\n  white: '#FFFFFF',\n  success: '#27AE60',\n  warning: '#F39C12',\n  danger: '#E74C3C',\n  lightGray: '#ECF0F1',\n  darkGray: '#7F8C8D',\n  background: '#F8F9FA',\n  text: '#2C3E50',\n  lightText: '#95A5A6',\n};\n\ninterface LaborData {\n  employeeId: string;\n  employeeName: string;\n  role: string;\n  scheduledHours: number;\n  actualHours: number;\n  overtimeHours: number;\n  regularRate: number;\n  overtimeRate: number;\n  regularCost: number;\n  overtimeCost: number;\n  totalCost: number;\n  efficiency: number;\n  shifts: {\n    date: string;\n    scheduledStart: string;\n    scheduledEnd: string;\n    actualStart: string;\n    actualEnd: string;\n    hoursWorked: number;\n  }[];\n}\n\ninterface LaborSummary {\n  totalScheduledHours: number;\n  totalActualHours: number;\n  totalOvertimeHours: number;\n  totalLaborCost: number;\n  averageEfficiency: number;\n  laborCostPercentage: number;\n  totalRevenue: number;\n}\n\nconst LaborReportDetailScreen = () => {\n  const navigation = useNavigation();\n  const { theme } = useTheme();\n  const [loading, setLoading] = useState(__true);\n  const [error, setError] = useState<string | null>(__null);\n  const [laborData, setLaborData] = useState<LaborData[]>([]);\n  const [summary, setSummary] = useState<LaborSummary | null>(__null);\n  const [selectedPeriod, setSelectedPeriod] = useState('week');\n\n  useEffect(() => {\n    loadLaborData();\n  }, [selectedPeriod]);\n\n  const loadLaborData = async () => {\n    try {\n      setLoading(__true);\n      setError(__null);\n\n      const dataService = DataService.getInstance();\n      const data = await dataService.getLaborReport(__selectedPeriod);\n\n      // Process the data\n      const processedData: LaborData[] =\n        data.employees?.map((emp: _unknown) => ({\n          employeeId: emp.id,\n          employeeName: emp.name || `${emp.first_name} ${emp.last_name}`,\n          role: emp.role,\n          scheduledHours: emp.scheduled_hours || 0,\n          actualHours: emp.actual_hours || 0,\n          overtimeHours: emp.overtime_hours || 0,\n          regularRate: emp.hourly_rate || 0,\n          overtimeRate: (emp.hourly_rate || 0) * 1.5,\n          regularCost: (emp.actual_hours || 0) * (emp.hourly_rate || 0),\n          overtimeCost: (emp.overtime_hours || 0) * ((emp.hourly_rate || 0) * 1.5),\n          totalCost:\n            (emp.actual_hours || 0) * (emp.hourly_rate || 0) +\n            (emp.overtime_hours || 0) * ((emp.hourly_rate || 0) * 1.5),\n          efficiency: emp.scheduled_hours > 0 ? (emp.actual_hours / emp.scheduled_hours) * 100 : 0,\n          shifts: emp.shifts || [],\n        })) || [];\n\n      // Calculate summary\n      const _summaryData: LaborSummary = {\n        totalScheduledHours: processedData.reduce((__sum, _emp) => sum + emp.scheduledHours, 0),\n        totalActualHours: processedData.reduce((__sum, _emp) => sum + emp.actualHours, 0),\n        totalOvertimeHours: processedData.reduce((__sum, _emp) => sum + emp.overtimeHours, 0),\n        totalLaborCost: processedData.reduce((__sum, _emp) => sum + emp.totalCost, 0),\n        averageEfficiency:\n          processedData.length > 0\n            ? processedData.reduce((__sum, _emp) => sum + emp.efficiency, 0) / processedData.length\n            : 0,\n        laborCostPercentage: data.labor_cost_percentage || 0,\n        totalRevenue: data.total_revenue || 0,\n      };\n\n      setLaborData(__processedData);\n      setSummary(__summaryData);\n    } catch (__error) {\n      setError('Failed to load labor data. Please try again.');\n      Alert.alert(\n        'Error',\n        'Unable to load labor data. Please check your connection and try again.',\n        [{ text: 'OK' }],\n      );\n    } finally {\n      setLoading(__false);\n    }\n  };\n\n  const _handleExportReport = () => {\n    Alert.alert('Export Labor Report', 'Export functionality will be available soon');\n  };\n\n  const formatCurrency = (amount: _number) => {\n    return `£${amount.toLocaleString('en-GB', {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    })}`;\n  };\n\n  const formatHours = (hours: _number) => {\n    return `${hours.toFixed(1)}h`;\n  };\n\n  const getEfficiencyColor = (efficiency: _number) => {\n    if (efficiency >= 95) {\n      return Colors.success;\n    }\n    if (efficiency >= 85) {\n      return Colors.warning;\n    }\n    return Colors.danger;\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      {/* Header */}\n      <View style={styles.header}>\n        <TouchableOpacity style={styles.backButton} onPress={() => navigation.goBack()}>\n          <Icon name=\"arrow-back\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n        <Text style={styles.headerTitle}>Labor Report</Text>\n        <TouchableOpacity style={styles.headerAction} onPress={loadLaborData} disabled={loading}>\n          <Icon name=\"refresh\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n      </View>\n\n      {/* Period Selector */}\n      <View style={styles.periodSelector}>\n        {['day', 'week', 'month'].map(period => (\n          <TouchableOpacity\n            key={period}\n            style={[styles.periodButton, selectedPeriod === period && styles.periodButtonActive]}\n            onPress={() => setSelectedPeriod(__period)}>\n            <Text\n              style={[\n                styles.periodButtonText,\n                selectedPeriod === period && styles.periodButtonTextActive,\n              ]}>\n              {period.charAt(0).toUpperCase() + period.slice(1)}\n            </Text>\n          </TouchableOpacity>\n        ))}\n      </View>\n\n      {loading ? (\n        <View style={styles.loadingContainer}>\n          <ActivityIndicator size=\"large\" color={Colors.primary} />\n          <Text style={styles.loadingText}>Loading labor data...</Text>\n        </View>\n      ) : error ? (\n        <View style={styles.errorContainer}>\n          <Icon name=\"error-outline\" size={48} color={Colors.danger} />\n          <Text style={styles.errorText}>{error}</Text>\n          <TouchableOpacity style={styles.retryButton} onPress={loadLaborData}>\n            <Text style={styles.retryButtonText}>Retry</Text>\n          </TouchableOpacity>\n        </View>\n      ) : (\n        <ScrollView style={styles.content}>\n          {/* Summary Cards */}\n          {summary && (\n            <View style={styles.summaryContainer}>\n              <View style={[styles.summaryCard, { backgroundColor: theme.colors.white }]}>\n                <Icon name=\"schedule\" size={32} color={Colors.primary} />\n                <Text style={[styles.summaryValue, { color: theme.colors.text }]}>\n                  {formatHours(summary.totalScheduledHours)}\n                </Text>\n                <Text style={[styles.summaryLabel, { color: Colors.darkGray }]}>Scheduled</Text>\n              </View>\n\n              <View style={[styles.summaryCard, { backgroundColor: theme.colors.white }]}>\n                <Icon name=\"access-time\" size={32} color={Colors.success} />\n                <Text style={[styles.summaryValue, { color: theme.colors.text }]}>\n                  {formatHours(summary.totalActualHours)}\n                </Text>\n                <Text style={[styles.summaryLabel, { color: Colors.darkGray }]}>Actual</Text>\n              </View>\n\n              <View style={[styles.summaryCard, { backgroundColor: theme.colors.white }]}>\n                <Icon\n                  name=\"trending-up\"\n                  size={32}\n                  color={getEfficiencyColor(summary.averageEfficiency)}\n                />\n                <Text style={[styles.summaryValue, { color: theme.colors.text }]}>\n                  {summary.averageEfficiency.toFixed(0)}%\n                </Text>\n                <Text style={[styles.summaryLabel, { color: Colors.darkGray }]}>Efficiency</Text>\n              </View>\n\n              <View style={[styles.summaryCard, { backgroundColor: theme.colors.white }]}>\n                <Icon name=\"attach-money\" size={32} color={Colors.warning} />\n                <Text style={[styles.summaryValue, { color: theme.colors.text }]}>\n                  {formatCurrency(summary.totalLaborCost)}\n                </Text>\n                <Text style={[styles.summaryLabel, { color: Colors.darkGray }]}>Labor Cost</Text>\n              </View>\n            </View>\n          )}\n\n          {/* Labor Cost Percentage */}\n          {summary && (\n            <View style={styles.costPercentageCard}>\n              <Text style={styles.costPercentageTitle}>Labor Cost as % of Revenue</Text>\n              <View style={styles.costPercentageBar}>\n                <View\n                  style={[\n                    styles.costPercentageFill,\n                    {\n                      width: `${Math.min(summary.laborCostPercentage, 100)}%`,\n                      backgroundColor:\n                        summary.laborCostPercentage > 30 ? Colors.danger : Colors.success,\n                    },\n                  ]}\n                />\n              </View>\n              <View style={styles.costPercentageInfo}>\n                <Text style={styles.costPercentageValue}>\n                  {summary.laborCostPercentage.toFixed(1)}%\n                </Text>\n                <Text style={styles.costPercentageTarget}>Target: {'<'} 30%</Text>\n              </View>\n            </View>\n          )}\n\n          {/* Employee Details */}\n          <View style={styles.section}>\n            <Text style={styles.sectionTitle}>Employee Details</Text>\n            {laborData.map(employee => (\n              <View key={employee.employeeId} style={styles.employeeCard}>\n                <View style={styles.employeeHeader}>\n                  <View>\n                    <Text style={styles.employeeName}>{employee.employeeName}</Text>\n                    <Text style={styles.employeeRole}>{employee.role}</Text>\n                  </View>\n                  <View style={styles.employeeEfficiency}>\n                    <Text\n                      style={[\n                        styles.efficiencyValue,\n                        { color: getEfficiencyColor(employee.efficiency) },\n                      ]}>\n                      {employee.efficiency.toFixed(0)}%\n                    </Text>\n                    <Text style={styles.efficiencyLabel}>Efficiency</Text>\n                  </View>\n                </View>\n\n                <View style={styles.employeeStats}>\n                  <View style={styles.statRow}>\n                    <Text style={styles.statLabel}>Scheduled:</Text>\n                    <Text style={styles.statValue}>{formatHours(employee.scheduledHours)}</Text>\n                  </View>\n                  <View style={styles.statRow}>\n                    <Text style={styles.statLabel}>Actual:</Text>\n                    <Text style={styles.statValue}>{formatHours(employee.actualHours)}</Text>\n                  </View>\n                  <View style={styles.statRow}>\n                    <Text style={styles.statLabel}>Overtime:</Text>\n                    <Text\n                      style={[\n                        styles.statValue,\n                        employee.overtimeHours > 0 && { color: Colors.warning },\n                      ]}>\n                      {formatHours(employee.overtimeHours)}\n                    </Text>\n                  </View>\n                </View>\n\n                <View style={styles.employeeCosts}>\n                  <View style={styles.costRow}>\n                    <Text style={styles.costLabel}>\n                      Regular ({formatCurrency(employee.regularRate)}/h):\n                    </Text>\n                    <Text style={styles.costValue}>{formatCurrency(employee.regularCost)}</Text>\n                  </View>\n                  <View style={styles.costRow}>\n                    <Text style={styles.costLabel}>\n                      Overtime ({formatCurrency(employee.overtimeRate)}/h):\n                    </Text>\n                    <Text style={styles.costValue}>{formatCurrency(employee.overtimeCost)}</Text>\n                  </View>\n                  <View style={[styles.costRow, styles.totalRow]}>\n                    <Text style={styles.totalLabel}>Total Cost:</Text>\n                    <Text style={styles.totalValue}>{formatCurrency(employee.totalCost)}</Text>\n                  </View>\n                </View>\n              </View>\n            ))}\n          </View>\n\n          <View style={styles.spacer} />\n        </ScrollView>\n      )}\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.primary,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingHorizontal: 16,\n    paddingVertical: 16,\n  },\n  backButton: {\n    padding: 4,\n  },\n  headerTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.white,\n  },\n  headerAction: {\n    padding: 4,\n  },\n  periodSelector: {\n    flexDirection: 'row',\n    padding: 16,\n    backgroundColor: Colors.white,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.lightGray,\n  },\n  periodButton: {\n    flex: 1,\n    paddingVertical: 10,\n    alignItems: 'center',\n    borderRadius: 8,\n    marginHorizontal: 4,\n    backgroundColor: Colors.lightGray,\n  },\n  periodButtonActive: {\n    backgroundColor: Colors.primary,\n  },\n  periodButtonText: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: Colors.darkGray,\n  },\n  periodButtonTextActive: {\n    color: Colors.white,\n  },\n  content: {\n    flex: 1,\n  },\n  summaryContainer: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    padding: 16,\n    justifyContent: 'space-between',\n  },\n  summaryCard: {\n    width: '48%',\n    padding: 16,\n    borderRadius: 12,\n    alignItems: 'center',\n    marginBottom: 16,\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n  },\n  summaryValue: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginTop: 8,\n  },\n  summaryLabel: {\n    fontSize: 14,\n    marginTop: 4,\n  },\n  costPercentageCard: {\n    backgroundColor: Colors.white,\n    margin: 16,\n    padding: 16,\n    borderRadius: 12,\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n  },\n  costPercentageTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 12,\n  },\n  costPercentageBar: {\n    height: 20,\n    backgroundColor: Colors.lightGray,\n    borderRadius: 10,\n    overflow: 'hidden',\n  },\n  costPercentageFill: {\n    height: '100%',\n    borderRadius: 10,\n  },\n  costPercentageInfo: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginTop: 8,\n  },\n  costPercentageValue: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: Colors.text,\n  },\n  costPercentageTarget: {\n    fontSize: 14,\n    color: Colors.lightText,\n  },\n  section: {\n    padding: 16,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: Colors.text,\n    marginBottom: 16,\n  },\n  employeeCard: {\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 16,\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n  },\n  employeeHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 16,\n  },\n  employeeName: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  employeeRole: {\n    fontSize: 14,\n    color: Colors.lightText,\n    marginTop: 2,\n  },\n  employeeEfficiency: {\n    alignItems: 'center',\n  },\n  efficiencyValue: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  efficiencyLabel: {\n    fontSize: 12,\n    color: Colors.lightText,\n    marginTop: 2,\n  },\n  employeeStats: {\n    borderTopWidth: 1,\n    borderTopColor: Colors.lightGray,\n    paddingTop: 12,\n    marginBottom: 12,\n  },\n  statRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 8,\n  },\n  statLabel: {\n    fontSize: 14,\n    color: Colors.lightText,\n  },\n  statValue: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.text,\n  },\n  employeeCosts: {\n    borderTopWidth: 1,\n    borderTopColor: Colors.lightGray,\n    paddingTop: 12,\n  },\n  costRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 8,\n  },\n  costLabel: {\n    fontSize: 14,\n    color: Colors.lightText,\n  },\n  costValue: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.text,\n  },\n  totalRow: {\n    borderTopWidth: 1,\n    borderTopColor: Colors.lightGray,\n    paddingTop: 8,\n    marginTop: 8,\n  },\n  totalLabel: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  totalValue: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: Colors.primary,\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20,\n  },\n  loadingText: {\n    marginTop: 16,\n    fontSize: 16,\n    color: Colors.lightText,\n  },\n  errorContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20,\n  },\n  errorText: {\n    marginTop: 16,\n    fontSize: 16,\n    color: Colors.danger,\n    textAlign: 'center',\n    marginBottom: 24,\n  },\n  retryButton: {\n    backgroundColor: Colors.primary,\n    paddingVertical: 12,\n    paddingHorizontal: 24,\n    borderRadius: 8,\n  },\n  retryButtonText: {\n    color: Colors.white,\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  spacer: {\n    height: 40,\n  },\n});\n\nexport default LaborReportDetailScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/reports/ReportsScreenSimple.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_screenWidth' is assigned a value but never used.","line":28,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_screenHeight' is assigned a value but never used.","line":28,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_isTablet' is assigned a value but never used.","line":29,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_isSmallDevice' is assigned a value but never used.","line":30,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":48,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1733,1736],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1733,1736],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_isLoading' is assigned a value but never used.","line":49,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":49,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_dashboardData' is assigned a value but never used.","line":66,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":66,"endColumn":27},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":144,"column":82,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[5208,5223],"text":"Today&apos;s Summary"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[5208,5223],"text":"Today&lsquo;s Summary"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[5208,5223],"text":"Today&#39;s Summary"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[5208,5223],"text":"Today&rsquo;s Summary"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":171,"column":86,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[6494,6511],"text":"This Week&apos;s Labor"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[6494,6511],"text":"This Week&lsquo;s Labor"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[6494,6511],"text":"This Week&#39;s Labor"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[6494,6511],"text":"This Week&rsquo;s Labor"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  SafeAreaView,\n  StatusBar,\n  ScrollView,\n  TouchableOpacity,\n  Dimensions,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation } from '@react-navigation/native';\n// import { generateEmployees, _generateSalesHistory, EmployeeData } from '../../utils/mockDataGenerator'; // Removed\n// Updated import path\nimport Colors from '../../constants/Colors'; // Keep for now, though theme might override\nimport { useTheme } from '../../design-system/ThemeProvider';\nimport DataService from '../../services/DataService'; // Added\nimport LoadingView from '../../components/feedback/LoadingView'; // Added\nimport ComingSoon from '../../components/feedback/ComingSoon'; // Added\n\n// Mock ENV flag (would typically come from an env config file)\nconst ENV = {\n  FEATURE_REPORTS: _true, // Set to true to enable, false to show ComingSoon\n};\n\n// Get screen dimensions for responsive design\nconst { width: _screenWidth, height: _screenHeight } = Dimensions.get('window');\nconst _isTablet = screenWidth > 768;\nconst _isSmallDevice = screenWidth < 380;\n\n// Responsive font sizes\nconst getFontSize = (base: _number) => {\n  if (__isTablet) {\n    return base * 1.2;\n  }\n  if (__isSmallDevice) {\n    return base * 0.9;\n  }\n  return base;\n};\n\nconst ReportsScreen = () => {\n  const navigation = useNavigation();\n  const { theme } = useTheme();\n  // const [employees, setEmployees] = useState<EmployeeData[]>([]); // Will come from reportDashboardData\n  // const [salesData, setSalesData] = useState<any[]>([]); // Will come from reportDashboardData\n  const [reportDashboardData, setReportDashboardData] = useState<any | null>(__null); // New state for combined data\n  const [_isLoading, setIsLoading] = useState<boolean>(__true); // Renamed from loading\n  const [error, setError] = useState<string | null>(__null); // Added\n\n  useEffect(() => {\n    if (ENV.FEATURE_REPORTS) {\n      loadReportData();\n    } else {\n      setIsLoading(__false);\n    }\n  }, []);\n\n  const loadReportData = async () => {\n    setIsLoading(__true);\n    setError(__null);\n    try {\n      const dataService = DataService.getInstance();\n      // Assuming getReportsDashboardData returns an object with all necessary pre-calculated metrics and lists\n      const _dashboardData = await dataService.getReportsDashboardData();\n      setReportDashboardData(__dashboardData);\n    } catch (e: _unknown) {\n      setError(e.message || 'Failed to load report data.');\n      setReportDashboardData(__null);\n    } finally {\n      setIsLoading(__false);\n    }\n  };\n\n  // Calculations will now use reportDashboardData if it's not null\n  // Or display placeholder/empty if reportDashboardData is null after loading without error.\n\n  // Example of how metrics would be accessed (adjust based on actual structure from DataService)\n  const todayMetrics = reportDashboardData?.todaySummary || {\n    totalSales: 0,\n    transactions: 0,\n    averageOrder: 0,\n  };\n\n  const laborMetrics = reportDashboardData?.weeklyLabor || {\n    totalActualHours: 0,\n    totalLaborCost: 0,\n    efficiency: 0,\n  };\n\n  const topItemsToday = reportDashboardData?.topItemsToday || []; // e.g., [{name: 'Tacos', count: 15}]\n  const topPerformersToday = reportDashboardData?.topPerformersToday || []; // e.g., EmployeeData[]\n\n  if (!ENV.FEATURE_REPORTS) {\n    return <ComingSoon />;\n  }\n\n  if (__isLoading) {\n    return <LoadingView message=\"Loading Reports Dashboard...\" />;\n  }\n\n  if (error || !reportDashboardData) {\n    return (\n      <SafeAreaView style={styles.container}>\n        <View style={styles.header}>\n          <TouchableOpacity style={styles.backButton} onPress={() => navigation.goBack()}>\n            <Icon name=\"arrow-back\" size={24} color={Colors.white} />\n          </TouchableOpacity>\n          <Text style={styles.headerTitle}>Reports</Text>\n          <View style={styles.placeholder} />\n        </View>\n        <View style={styles.centeredError}>\n          <Icon name=\"error-outline\" size={64} color={Colors.danger} />\n          <Text style={styles.errorTextHeader}>Error Loading Reports</Text>\n          <Text style={styles.errorText}>{error || 'No report data available.'}</Text>\n          <TouchableOpacity onPress={loadReportData} style={styles.retryButton}>\n            <Text style={styles.retryButtonText}>Try Again</Text>\n          </TouchableOpacity>\n        </View>\n      </SafeAreaView>\n    );\n  }\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <StatusBar barStyle=\"light-content\" backgroundColor={Colors.primary} />\n\n      {/* Header */}\n      <View style={styles.header}>\n        <TouchableOpacity\n          style={styles.backButton}\n          onPress={() => navigation.goBack()}\n          activeOpacity={0.7}>\n          <Icon name=\"arrow-back\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n        <Text style={styles.headerTitle}>Reports</Text>\n        <View style={styles.placeholder} />\n      </View>\n\n      <ScrollView style={styles.content}>\n        {/* Today's Summary */}\n        <View style={styles.section}>\n          <Text style={[styles.sectionTitle, { color: theme.colors.text }]}>Today's Summary</Text>\n          <View style={[styles.card, { backgroundColor: theme.colors.white }]}>\n            <View style={styles.statRow}>\n              <View style={styles.stat}>\n                <Text style={[styles.statValue, { color: Colors.success }]}>\n                  £{todayMetrics.totalSales.toFixed(2)}\n                </Text>\n                <Text style={[styles.statLabel, { color: Colors.darkGray }]}>Total Sales</Text>\n              </View>\n              <View style={styles.stat}>\n                <Text style={[styles.statValue, { color: Colors.primary }]}>\n                  {todayMetrics.transactions}\n                </Text>\n                <Text style={[styles.statLabel, { color: Colors.darkGray }]}>Orders</Text>\n              </View>\n              <View style={styles.stat}>\n                <Text style={[styles.statValue, { color: Colors.secondary }]}>\n                  £{todayMetrics.averageOrder.toFixed(2)}\n                </Text>\n                <Text style={[styles.statLabel, { color: Colors.darkGray }]}>Avg Order</Text>\n              </View>\n            </View>\n          </View>\n        </View>\n\n        {/* Weekly Labor Summary */}\n        <View style={styles.section}>\n          <Text style={[styles.sectionTitle, { color: theme.colors.text }]}>This Week's Labor</Text>\n          <View style={[styles.card, { backgroundColor: theme.colors.white }]}>\n            <View style={styles.statRow}>\n              <View style={styles.stat}>\n                <Text style={[styles.statValue, { color: Colors.warning }]}>\n                  {laborMetrics.totalActualHours}h\n                </Text>\n                <Text style={[styles.statLabel, { color: Colors.darkGray }]}>Hours Worked</Text>\n              </View>\n              <View style={styles.stat}>\n                <Text style={[styles.statValue, { color: Colors.danger }]}>\n                  £{laborMetrics.totalLaborCost.toFixed(0)}\n                </Text>\n                <Text style={[styles.statLabel, { color: Colors.darkGray }]}>Labor Cost</Text>\n              </View>\n              <View style={styles.stat}>\n                <Text\n                  style={[\n                    styles.statValue,\n                    {\n                      color:\n                        laborMetrics.efficiency >= 90\n                          ? Colors.success\n                          : laborMetrics.efficiency >= 80\n                          ? Colors.warning\n                          : Colors.danger,\n                    },\n                  ]}>\n                  {laborMetrics.efficiency.toFixed(0)}%\n                </Text>\n                <Text style={[styles.statLabel, { color: Colors.darkGray }]}>Efficiency</Text>\n              </View>\n            </View>\n          </View>\n        </View>\n\n        {/* Top Items */}\n        <View style={styles.section}>\n          <Text style={[styles.sectionTitle, { color: theme.colors.text }]}>Top Items Today</Text>\n          <View style={[styles.card, { backgroundColor: theme.colors.white }]}>\n            {topItemsToday.length > 0 ? (\n              topItemsToday.map((item: _unknown, index: _number) => (\n                <Text key={index} style={[styles.itemText, { color: theme.colors.text }]}>\n                  🍽️ {item.name} - {item.quantity} sold (£{item.revenue.toFixed(2)})\n                </Text>\n              ))\n            ) : (\n              <Text style={[styles.itemText, { color: Colors.darkGray }]}>\n                No top items data for today.\n              </Text>\n            )}\n          </View>\n        </View>\n\n        {/* Staff Performance */}\n        <View style={styles.section}>\n          <Text style={[styles.sectionTitle, { color: theme.colors.text }]}>\n            Top Performers Today\n          </Text>\n          <View style={[styles.card, { backgroundColor: theme.colors.white }]}>\n            {topPerformersToday.length > 0 ? (\n              topPerformersToday.slice(0, 3).map((employee: _unknown, index: _number) => {\n                return (\n                  <View key={index} style={styles.performerRow}>\n                    <View style={styles.performerRank}>\n                      <Text\n                        style={[\n                          styles.rankNumber,\n                          { color: index === 0 ? Colors.warning : Colors.darkGray },\n                        ]}>\n                        #{index + 1}\n                      </Text>\n                    </View>\n                    <View style={styles.performerInfo}>\n                      <Text style={[styles.performerName, { color: theme.colors.text }]}>\n                        {employee.name}\n                      </Text>\n                      <Text style={[styles.performerRole, { color: Colors.darkGray }]}>\n                        {employee.role}\n                      </Text>\n                    </View>\n                    <View style={styles.performerStats}>\n                      <Text style={[styles.performerSales, { color: Colors.success }]}>\n                        £{employee.sales.toFixed(0)}\n                      </Text>\n                      <Text style={[styles.performerHours, { color: Colors.darkGray }]}>\n                        {employee.orders} orders\n                      </Text>\n                    </View>\n                  </View>\n                );\n              })\n            ) : (\n              <Text style={[styles.itemText, { color: Colors.darkGray }]}>\n                No top performers data for today.\n              </Text>\n            )}\n          </View>\n        </View>\n\n        {/* Reports Menu */}\n        <View style={styles.section}>\n          <Text style={[styles.sectionTitle, { color: theme.colors.text }]}>Available Reports</Text>\n\n          <TouchableOpacity\n            style={[styles.reportItem, { backgroundColor: theme.colors.white }]}\n            onPress={() => navigation.navigate('SalesReport')}>\n            <Icon name=\"trending-up\" size={24} color={Colors.success} />\n            <View style={styles.reportInfo}>\n              <Text style={[styles.reportTitle, { color: theme.colors.text }]}>Sales Report</Text>\n              <Text style={[styles.reportDesc, { color: Colors.darkGray }]}>\n                Daily, _weekly, monthly sales\n              </Text>\n            </View>\n            <Icon name=\"chevron-right\" size={24} color={Colors.darkGray} />\n          </TouchableOpacity>\n\n          <TouchableOpacity\n            style={[styles.reportItem, { backgroundColor: theme.colors.white }]}\n            onPress={() => navigation.navigate('InventoryReport')}>\n            <Icon name=\"inventory\" size={24} color={Colors.warning} />\n            <View style={styles.reportInfo}>\n              <Text style={[styles.reportTitle, { color: theme.colors.text }]}>\n                Inventory Report\n              </Text>\n              <Text style={[styles.reportDesc, { color: Colors.darkGray }]}>\n                Stock levels and costs\n              </Text>\n            </View>\n            <Icon name=\"chevron-right\" size={24} color={Colors.darkGray} />\n          </TouchableOpacity>\n\n          <TouchableOpacity\n            style={[styles.reportItem, { backgroundColor: theme.colors.white }]}\n            onPress={() => navigation.navigate('StaffReport')}>\n            <Icon name=\"people\" size={24} color={Colors.secondary} />\n            <View style={styles.reportInfo}>\n              <Text style={[styles.reportTitle, { color: theme.colors.text }]}>\n                Employee Performance\n              </Text>\n              <Text style={[styles.reportDesc, { color: Colors.darkGray }]}>\n                Performance metrics & costs\n              </Text>\n            </View>\n            <Icon name=\"chevron-right\" size={24} color={Colors.darkGray} />\n          </TouchableOpacity>\n\n          <TouchableOpacity\n            style={[styles.reportItem, { backgroundColor: theme.colors.white }]}\n            onPress={() => navigation.navigate('LaborReport')}>\n            <Icon name=\"schedule\" size={24} color={Colors.primary} />\n            <View style={styles.reportInfo}>\n              <Text style={[styles.reportTitle, { color: theme.colors.text }]}>\n                Schedule & Labor Report\n              </Text>\n              <Text style={[styles.reportDesc, { color: Colors.darkGray }]}>\n                Rota analysis & labor costs\n              </Text>\n            </View>\n            <Icon name=\"chevron-right\" size={24} color={Colors.darkGray} />\n          </TouchableOpacity>\n\n          <TouchableOpacity\n            style={[styles.reportItem, { backgroundColor: theme.colors.white }]}\n            onPress={() => navigation.navigate('CostAnalysisReport')}>\n            <Icon name=\"analytics\" size={24} color={Colors.warning} />\n            <View style={styles.reportInfo}>\n              <Text style={[styles.reportTitle, { color: theme.colors.text }]}>Cost Analysis</Text>\n              <Text style={[styles.reportDesc, { color: Colors.darkGray }]}>\n                Labor vs revenue analysis\n              </Text>\n            </View>\n            <Icon name=\"chevron-right\" size={24} color={Colors.darkGray} />\n          </TouchableOpacity>\n\n          <TouchableOpacity\n            style={[styles.reportItem, { backgroundColor: theme.colors.white }]}\n            onPress={() => navigation.navigate('FinancialReport')}>\n            <Icon name=\"account-balance\" size={24} color={Colors.secondary} />\n            <View style={styles.reportInfo}>\n              <Text style={[styles.reportTitle, { color: theme.colors.text }]}>\n                Financial Report\n              </Text>\n              <Text style={[styles.reportDesc, { color: Colors.darkGray }]}>\n                Profit, _loss, and expenses\n              </Text>\n            </View>\n            <Icon name=\"chevron-right\" size={24} color={Colors.darkGray} />\n          </TouchableOpacity>\n        </View>\n\n        <View style={[styles.notice, { backgroundColor: theme.colors.white }]}>\n          <Text style={[styles.noticeText, { color: Colors.darkGray }]}>\n            Reports use real employee and sales data. {topPerformersToday.length} employees tracked.\n          </Text>\n        </View>\n      </ScrollView>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.primary,\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    height: 60,\n  },\n  backButton: {\n    padding: 12,\n    marginRight: 8,\n    borderRadius: 8,\n    backgroundColor: 'rgba(255, 255, 255, 0.1)',\n    minWidth: 44,\n    minHeight: 44,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  headerTitle: {\n    flex: 1,\n    color: Colors.white,\n    fontSize: getFontSize(20),\n    fontWeight: 'bold',\n    textAlign: 'center',\n  },\n  placeholder: {\n    width: 40,\n  },\n  content: {\n    flex: 1,\n    padding: 16,\n  },\n  section: {\n    marginBottom: 20,\n  },\n  sectionTitle: {\n    fontSize: getFontSize(18),\n    fontWeight: 'bold',\n    color: Colors.text,\n    marginBottom: 12,\n  },\n  card: {\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    padding: 16,\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.1,\n    shadowRadius: 2,\n  },\n  statRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n  },\n  stat: {\n    alignItems: 'center',\n  },\n  statValue: {\n    fontSize: getFontSize(24),\n    fontWeight: 'bold',\n    color: Colors.success,\n  },\n  statLabel: {\n    fontSize: getFontSize(14),\n    color: Colors.lightText,\n    marginTop: 4,\n  },\n  itemText: {\n    fontSize: getFontSize(16),\n    color: Colors.text,\n    marginBottom: 8,\n  },\n  reportItem: {\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 12,\n    flexDirection: 'row',\n    alignItems: 'center',\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.1,\n    shadowRadius: 2,\n  },\n  reportInfo: {\n    flex: 1,\n    marginLeft: 16,\n  },\n  reportTitle: {\n    fontSize: getFontSize(16),\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  reportDesc: {\n    fontSize: getFontSize(14),\n    color: Colors.lightText,\n    marginTop: 2,\n  },\n  notice: {\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    padding: 16,\n    marginTop: 20,\n    marginBottom: 40,\n  },\n  noticeText: {\n    fontSize: getFontSize(14),\n    color: Colors.lightText,\n    textAlign: 'center',\n  },\n\n  // New performer styles\n  performerRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingVertical: 8,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  performerRank: {\n    width: 40,\n    alignItems: 'center',\n  },\n  rankNumber: {\n    fontSize: getFontSize(16),\n    fontWeight: 'bold',\n  },\n  performerInfo: {\n    flex: 1,\n    marginLeft: 12,\n  },\n  performerName: {\n    fontSize: getFontSize(16),\n    fontWeight: '600',\n  },\n  performerRole: {\n    fontSize: getFontSize(12),\n    marginTop: 2,\n  },\n  performerStats: {\n    alignItems: 'flex-end',\n  },\n  performerSales: {\n    fontSize: getFontSize(16),\n    fontWeight: 'bold',\n  },\n  performerHours: {\n    fontSize: getFontSize(12),\n    marginTop: 2,\n  },\n  centeredError: {\n    // Added\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20,\n  },\n  errorTextHeader: {\n    // Added\n    fontSize: getFontSize(18),\n    fontWeight: 'bold',\n    color: Colors.danger, // Fallback, theme might override if available in error JSX\n    marginTop: 16,\n    marginBottom: 8,\n    textAlign: 'center',\n  },\n  errorText: {\n    // Added\n    fontSize: getFontSize(14),\n    color: Colors.text, // Fallback\n    textAlign: 'center',\n    marginBottom: 20,\n  },\n  retryButton: {\n    // Added\n    backgroundColor: Colors.primary, // Fallback\n    paddingVertical: 10,\n    paddingHorizontal: 20,\n    borderRadius: 8,\n  },\n  retryButtonText: {\n    // Added\n    color: Colors.white, // Fallback\n    fontSize: getFontSize(16),\n    fontWeight: '600',\n  },\n});\n\nexport default ReportsScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/reports/SalesReportDetailScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_screenWidth' is assigned a value but never used.","line":25,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_screenHeight' is assigned a value but never used.","line":25,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_isTablet' is assigned a value but never used.","line":26,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_isSmallDevice' is assigned a value but never used.","line":27,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_isLoading' is assigned a value but never used.","line":77,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":77,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_total' is assigned a value but never used.","line":112,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":112,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_totalTrans' is assigned a value but never used.","line":113,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":113,"endColumn":26},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { width: 24 }","line":216,"column":24,"nodeType":"ObjectExpression","endLine":216,"endColumn":37},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: {\n  backgroundColor: \"selectedPeriod === period.id ? Colors.primary : 'transparent'\"\n}","line":295,"column":15,"nodeType":"ObjectExpression","endLine":295,"endColumn":97}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  SafeAreaView,\n  StatusBar,\n  ScrollView,\n  TouchableOpacity,\n  Dimensions,\n  Alert,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation } from '@react-navigation/native';\nimport { useTheme } from '../../design-system/ThemeProvider';\nimport DataService from '../../services/DataService';\nimport LoadingView from '../../components/feedback/LoadingView';\nimport ComingSoon from '../../components/feedback/ComingSoon';\n\n// Mock ENV flag\nconst ENV = {\n  FEATURE_REPORTS: _true, // Set to true to enable, false to show ComingSoon\n};\n\nconst { width: _screenWidth, height: _screenHeight } = Dimensions.get('window');\nconst _isTablet = screenWidth > 768;\nconst _isSmallDevice = screenWidth < 380;\n\n// Responsive font sizes\nconst getFontSize = (base: _number) => {\n  if (__isTablet) {\n    return base * 1.2;\n  }\n  if (__isSmallDevice) {\n    return base * 0.9;\n  }\n  return base;\n};\n\nconst Colors = {\n  primary: '#00A651',\n  secondary: '#0066CC',\n  success: '#27AE60',\n  warning: '#F39C12',\n  danger: '#E74C3C',\n  background: '#F8F9FA',\n  white: '#FFFFFF',\n  lightGray: '#ECF0F1',\n  mediumGray: '#BDC3C7',\n  darkGray: '#7F8C8D',\n  text: '#2C3E50',\n  lightText: '#95A5A6',\n};\n\ninterface SalesData {\n  date: Date;\n  dailySales: number;\n  transactions: number;\n  averageOrder: number;\n  topItems: Array<{\n    name: string;\n    sold: number;\n    revenue: number;\n  }>;\n  paymentMethods: {\n    card: number;\n    cash: number;\n    mobile: number;\n    qrCode: number;\n  };\n}\n\nconst SalesReportDetailScreen = () => {\n  const navigation = useNavigation();\n  const { theme } = useTheme();\n  const [salesData, setSalesData] = useState<SalesData[]>([]);\n  const [_isLoading, setIsLoading] = useState<boolean>(__true);\n  const [error, setError] = useState<string | null>(__null);\n  const [selectedPeriod, setSelectedPeriod] = useState('today');\n  const [totalSales, setTotalSales] = useState(0);\n  const [totalTransactions, setTotalTransactions] = useState(0);\n\n  const periods = [\n    { id: 'today', label: 'Today', icon: 'today' },\n    { id: 'week', label: 'This Week', icon: 'date-range' },\n    { id: 'month', label: 'This Month', icon: 'calendar-today' },\n    { id: 'quarter', label: 'Quarter', icon: 'event' },\n  ];\n\n  useEffect(() => {\n    if (ENV.FEATURE_REPORTS) {\n      loadSalesData();\n    } else {\n      setIsLoading(__false);\n    }\n  }, [selectedPeriod]);\n\n  const loadSalesData = async () => {\n    // Modified\n    setIsLoading(__true);\n    setError(__null);\n    try {\n      const dataService = DataService.getInstance();\n      // Assuming getSalesReportDetail returns data in SalesData[] shape for the selectedPeriod\n      // Or an object containing SalesData[] and pre-calculated totals.\n      // For now, assume it returns SalesData[] and we recalculate totals.\n      const data = await dataService.getSalesReportDetail(__selectedPeriod);\n      setSalesData(data || []);\n\n      // Recalculate totals if service returns raw data\n      if (__data) {\n        const _total = data.reduce((__sum, _day) => sum + day.dailySales, 0);\n        const _totalTrans = data.reduce((__sum, _day) => sum + day.transactions, 0);\n        setTotalSales(__total);\n        setTotalTransactions(__totalTrans);\n      } else {\n        setTotalSales(0);\n        setTotalTransactions(0);\n      }\n    } catch (e: _unknown) {\n      setError(e.message || 'Failed to load sales report.');\n      setSalesData([]);\n      setTotalSales(0);\n      setTotalTransactions(0);\n    } finally {\n      setIsLoading(__false);\n    }\n  };\n\n  const formatCurrency = (amount: _number) => {\n    return `£${amount.toLocaleString('en-GB', {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    })}`;\n  };\n\n  const formatDate = (date: _Date) => {\n    return date.toLocaleDateString('en-GB', {\n      weekday: 'short',\n      day: '2-digit',\n      month: 'short',\n    });\n  };\n\n  const getTopSellingItems = () => {\n    const itemMap: { [key: string]: { sold: number; revenue: number } } = {};\n\n    salesData.forEach(day => {\n      day.topItems.forEach(item => {\n        if (itemMap[item.name]) {\n          itemMap[item.name].sold += item.sold;\n          itemMap[item.name].revenue += item.revenue;\n        } else {\n          itemMap[item.name] = { sold: item.sold, revenue: item.revenue };\n        }\n      });\n    });\n\n    return Object.entries(__itemMap)\n      .map(([name, data]) => ({ name, ...data }))\n      .sort((__a, _b) => b.sold - a.sold)\n      .slice(0, 5);\n  };\n\n  const handleExportReport = () => {\n    Alert.alert('Export Sales Report', 'Choose export format', [\n      { text: 'Cancel', style: 'cancel' },\n      {\n        text: 'PDF',\n        onPress: () => Alert.alert('PDF Export', 'PDF export functionality coming soon'),\n      },\n      {\n        text: 'CSV',\n        onPress: () => Alert.alert('CSV Export', 'CSV export functionality coming soon'),\n      },\n      {\n        text: 'Email',\n        onPress: () => Alert.alert('Email Report', 'Email functionality coming soon'),\n      },\n    ]);\n  };\n\n  const getPaymentMethodTotals = () => {\n    const totals = { card: 0, cash: 0, mobile: 0, qrCode: 0 };\n\n    salesData.forEach(day => {\n      totals.card += day.paymentMethods.card;\n      totals.cash += day.paymentMethods.cash;\n      totals.mobile += day.paymentMethods.mobile;\n      totals.qrCode += day.paymentMethods.qrCode;\n    });\n\n    return totals;\n  };\n\n  const topItems = salesData.length > 0 ? getTopSellingItems() : [];\n  const paymentTotals =\n    salesData.length > 0 ? getPaymentMethodTotals() : { card: 0, cash: 0, mobile: 0, qrCode: 0 };\n\n  if (!ENV.FEATURE_REPORTS) {\n    return <ComingSoon />;\n  }\n\n  if (__isLoading) {\n    return <LoadingView message=\"Loading Sales Report...\" />;\n  }\n\n  if (__error) {\n    return (\n      <SafeAreaView style={styles.container}>\n        <View style={styles.header}>\n          <TouchableOpacity style={styles.backButton} onPress={() => navigation.goBack()}>\n            <Icon name=\"arrow-back\" size={24} color={Colors.white} />\n          </TouchableOpacity>\n          <Text style={styles.headerTitle}>Sales Report</Text>\n          <View style={{ width: 24 }} />\n          {/* Placeholder for balance */}\n        </View>\n        <View style={styles.centeredError}>\n          <Icon name=\"error-outline\" size={64} color={Colors.danger} />\n          <Text style={styles.errorTextHeader}>Error Loading Report</Text>\n          <Text style={styles.errorText}>{error}</Text>\n          <TouchableOpacity onPress={loadSalesData} style={styles.retryButton}>\n            <Text style={styles.retryButtonText}>Try Again</Text>\n          </TouchableOpacity>\n        </View>\n      </SafeAreaView>\n    );\n  }\n\n  // Handling for when salesData is empty after loading (no error)\n  if (salesData.length === 0) {\n    return (\n      <SafeAreaView style={styles.container}>\n        <View style={styles.header}>\n          <TouchableOpacity style={styles.backButton} onPress={() => navigation.goBack()}>\n            <Icon name=\"arrow-back\" size={24} color={Colors.white} />\n          </TouchableOpacity>\n          <Text style={styles.headerTitle}>Sales Report</Text>\n          <TouchableOpacity\n            style={styles.headerAction}\n            onPress={() => {\n              /* Share action */\n            }}>\n            <Icon name=\"share\" size={24} color={Colors.white} />\n          </TouchableOpacity>\n        </View>\n        <View style={styles.periodSelector}>\n          {['today', 'week', 'month', 'year'].map(period => (\n            <TouchableOpacity\n              key={period}\n              style={[styles.periodButton, selectedPeriod === period && styles.periodButtonActive]}\n              onPress={() => setSelectedPeriod(__period)}>\n              <Text\n                style={[styles.periodText, selectedPeriod === period && styles.periodTextActive]}>\n                {period.charAt(0).toUpperCase() + period.slice(1)}\n              </Text>\n            </TouchableOpacity>\n          ))}\n        </View>\n        <View style={styles.centeredError}>\n          <Icon name=\"receipt-long\" size={64} color={Colors.mediumGray} />\n          <Text style={styles.errorTextHeader}>No Sales Data</Text>\n          <Text style={styles.errorText}>\n            There is no sales data available for the selected period.\n          </Text>\n        </View>\n      </SafeAreaView>\n    );\n  }\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <StatusBar barStyle=\"light-content\" backgroundColor={Colors.primary} />\n\n      {/* Header */}\n      <View style={styles.header}>\n        <TouchableOpacity style={styles.backButton} onPress={() => navigation.goBack()}>\n          <Icon name=\"arrow-back\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n        <Text style={styles.headerTitle}>Sales Report</Text>\n        <TouchableOpacity style={styles.headerAction} onPress={handleExportReport}>\n          <Icon name=\"file-download\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n      </View>\n\n      {/* Enhanced Period Selector */}\n      <View style={[styles.periodSelector, { backgroundColor: theme.colors.white }]}>\n        {periods.map(period => (\n          <TouchableOpacity\n            key={period.id}\n            style={[\n              styles.periodButton,\n              selectedPeriod === period.id && styles.periodButtonActive,\n              { backgroundColor: selectedPeriod === period.id ? Colors.primary : 'transparent' },\n            ]}\n            onPress={() => setSelectedPeriod(period.id)}>\n            <Icon\n              name={period.icon}\n              size={16}\n              color={selectedPeriod === period.id ? Colors.white : Colors.darkGray}\n              style={styles.periodIcon}\n            />\n            <Text\n              style={[\n                styles.periodText,\n                selectedPeriod === period.id && styles.periodTextActive,\n                { color: selectedPeriod === period.id ? Colors.white : theme.colors.text },\n              ]}>\n              {period.label}\n            </Text>\n          </TouchableOpacity>\n        ))}\n      </View>\n\n      <ScrollView style={styles.content}>\n        {/* Summary Cards */}\n        <View style={styles.summaryContainer}>\n          <View style={styles.summaryCard}>\n            <Text style={styles.summaryValue}>{formatCurrency(__totalSales)}</Text>\n            <Text style={styles.summaryLabel}>Total Sales</Text>\n            <View style={[styles.trendIndicator, { backgroundColor: Colors.success }]}>\n              <Icon name=\"trending-up\" size={16} color={Colors.white} />\n              <Text style={styles.trendText}>+12.5%</Text>\n            </View>\n          </View>\n\n          <View style={styles.summaryCard}>\n            <Text style={styles.summaryValue}>{totalTransactions.toLocaleString()}</Text>\n            <Text style={styles.summaryLabel}>Transactions</Text>\n            <View style={[styles.trendIndicator, { backgroundColor: Colors.success }]}>\n              <Icon name=\"trending-up\" size={16} color={Colors.white} />\n              <Text style={styles.trendText}>+8.3%</Text>\n            </View>\n          </View>\n\n          <View style={styles.summaryCard}>\n            <Text style={styles.summaryValue}>\n              {formatCurrency(totalTransactions > 0 ? totalSales / totalTransactions : 0)}\n            </Text>\n            <Text style={styles.summaryLabel}>Avg Order</Text>\n            <View style={[styles.trendIndicator, { backgroundColor: Colors.warning }]}>\n              <Icon name=\"trending-flat\" size={16} color={Colors.white} />\n              <Text style={styles.trendText}>+2.1%</Text>\n            </View>\n          </View>\n        </View>\n\n        {/* Daily Sales Chart */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Daily Sales Trend</Text>\n          <View style={styles.chartContainer}>\n            <View style={styles.chartArea}>\n              {salesData.slice(-7).map((__day, _index) => {\n                const maxSales = Math.max(...salesData.slice(-7).map(d => d.dailySales));\n                const height = (day.dailySales / maxSales) * 120;\n\n                return (\n                  <View key={index} style={styles.chartBar}>\n                    <View\n                      style={[\n                        styles.bar,\n                        {\n                          height,\n                          backgroundColor: Colors.primary,\n                          opacity: 0.7 + (0.3 * day.dailySales) / maxSales,\n                        },\n                      ]}\n                    />\n                    <Text style={styles.chartLabel}>{formatDate(day.date)}</Text>\n                    <Text style={styles.chartValue}>{formatCurrency(day.dailySales)}</Text>\n                  </View>\n                );\n              })}\n            </View>\n          </View>\n        </View>\n\n        {/* Top Selling Items */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Top Selling Items</Text>\n          <View style={styles.card}>\n            {topItems.map((__item, _index) => (\n              <View key={index} style={styles.itemRow}>\n                <View style={styles.itemRank}>\n                  <Text style={styles.rankText}>{index + 1}</Text>\n                </View>\n                <View style={styles.itemInfo}>\n                  <Text style={styles.itemName}>{item.name}</Text>\n                  <Text style={styles.itemStats}>\n                    {item.sold} sold • {formatCurrency(item.revenue)}\n                  </Text>\n                </View>\n                <View style={styles.itemProgress}>\n                  <View\n                    style={[\n                      styles.progressBar,\n                      {\n                        width: `${(item.sold / topItems[0].sold) * 100}%`,\n                        backgroundColor: Colors.primary,\n                      },\n                    ]}\n                  />\n                </View>\n              </View>\n            ))}\n          </View>\n        </View>\n\n        {/* Payment Methods Breakdown */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Payment Methods</Text>\n          <View style={styles.card}>\n            <View style={styles.paymentRow}>\n              <Icon name=\"credit-card\" size={24} color={Colors.secondary} />\n              <Text style={styles.paymentMethod}>Card Payments</Text>\n              <Text style={styles.paymentAmount}>{formatCurrency(paymentTotals.card)}</Text>\n            </View>\n            <View style={styles.paymentRow}>\n              <Icon name=\"attach-money\" size={24} color={Colors.success} />\n              <Text style={styles.paymentMethod}>Cash Payments</Text>\n              <Text style={styles.paymentAmount}>{formatCurrency(paymentTotals.cash)}</Text>\n            </View>\n            <View style={styles.paymentRow}>\n              <Icon name=\"phone-iphone\" size={24} color={Colors.warning} />\n              <Text style={styles.paymentMethod}>Mobile Payments</Text>\n              <Text style={styles.paymentAmount}>{formatCurrency(paymentTotals.mobile)}</Text>\n            </View>\n            <View style={styles.paymentRow}>\n              <Icon name=\"qr-code-scanner\" size={24} color={Colors.primary} />\n              <Text style={styles.paymentMethod}>QR Payments</Text>\n              <Text style={styles.paymentAmount}>{formatCurrency(paymentTotals.qrCode)}</Text>\n            </View>\n          </View>\n        </View>\n\n        <View style={styles.spacer} />\n      </ScrollView>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.primary,\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    height: 60,\n  },\n  backButton: {\n    padding: 8,\n  },\n  headerTitle: {\n    flex: 1,\n    color: Colors.white,\n    fontSize: getFontSize(20),\n    fontWeight: 'bold',\n    textAlign: 'center',\n  },\n  headerAction: {\n    padding: 8,\n  },\n  periodSelector: {\n    flexDirection: 'row',\n    backgroundColor: Colors.white,\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.lightGray,\n  },\n  periodButton: {\n    flex: 1,\n    paddingVertical: 10,\n    paddingHorizontal: 12,\n    marginHorizontal: 4,\n    borderRadius: 20,\n    backgroundColor: Colors.lightGray,\n    alignItems: 'center',\n    flexDirection: 'row',\n    justifyContent: 'center',\n  },\n  periodButtonActive: {\n    backgroundColor: Colors.primary,\n  },\n  periodIcon: {\n    marginRight: 6,\n  },\n  periodText: {\n    fontSize: getFontSize(12),\n    fontWeight: '500',\n    color: Colors.text,\n  },\n  periodTextActive: {\n    color: Colors.white,\n  },\n  content: {\n    flex: 1,\n    padding: 16,\n  },\n  summaryContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 20,\n  },\n  summaryCard: {\n    flex: 1,\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    padding: 16,\n    marginHorizontal: 4,\n    alignItems: 'center',\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.1,\n    shadowRadius: 2,\n  },\n  summaryValue: {\n    fontSize: getFontSize(20),\n    fontWeight: 'bold',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  summaryLabel: {\n    fontSize: getFontSize(12),\n    color: Colors.lightText,\n    marginBottom: 8,\n  },\n  trendIndicator: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 12,\n  },\n  trendText: {\n    fontSize: getFontSize(12),\n    color: Colors.white,\n    marginLeft: 4,\n    fontWeight: '500',\n  },\n  section: {\n    marginBottom: 20,\n  },\n  sectionTitle: {\n    fontSize: getFontSize(18),\n    fontWeight: 'bold',\n    color: Colors.text,\n    marginBottom: 12,\n  },\n  card: {\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    padding: 16,\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.1,\n    shadowRadius: 2,\n  },\n  chartContainer: {\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    padding: 16,\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.1,\n    shadowRadius: 2,\n  },\n  chartArea: {\n    flexDirection: 'row',\n    alignItems: 'flex-end',\n    justifyContent: 'space-between',\n    height: 160,\n  },\n  chartBar: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n  },\n  bar: {\n    width: 24,\n    borderRadius: 4,\n    marginBottom: 8,\n  },\n  chartLabel: {\n    fontSize: getFontSize(10),\n    color: Colors.lightText,\n    textAlign: 'center',\n    marginBottom: 4,\n  },\n  chartValue: {\n    fontSize: getFontSize(10),\n    color: Colors.text,\n    fontWeight: '500',\n    textAlign: 'center',\n  },\n  itemRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingVertical: 12,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.lightGray,\n  },\n  itemRank: {\n    width: 32,\n    height: 32,\n    borderRadius: 16,\n    backgroundColor: Colors.primary,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginRight: 12,\n  },\n  rankText: {\n    fontSize: getFontSize(14),\n    fontWeight: 'bold',\n    color: Colors.white,\n  },\n  itemInfo: {\n    flex: 1,\n  },\n  itemName: {\n    fontSize: getFontSize(16),\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  itemStats: {\n    fontSize: getFontSize(14),\n    color: Colors.lightText,\n    marginTop: 2,\n  },\n  itemProgress: {\n    width: 60,\n    height: 4,\n    backgroundColor: Colors.lightGray,\n    borderRadius: 2,\n    marginLeft: 12,\n  },\n  progressBar: {\n    height: '100%',\n    borderRadius: 2,\n  },\n  paymentRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingVertical: 12,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.lightGray,\n  },\n  paymentMethod: {\n    flex: 1,\n    fontSize: getFontSize(16),\n    color: Colors.text,\n    marginLeft: 12,\n  },\n  paymentAmount: {\n    fontSize: getFontSize(16),\n    fontWeight: '600',\n    color: Colors.primary,\n  },\n  spacer: {\n    height: 40,\n  },\n  centeredError: {\n    // Added\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20,\n    backgroundColor: Colors.background, // Ensure background color\n  },\n  errorTextHeader: {\n    // Added\n    fontSize: getFontSize(18),\n    fontWeight: 'bold',\n    color: Colors.danger,\n    marginTop: 16,\n    marginBottom: 8,\n    textAlign: 'center',\n  },\n  errorText: {\n    // Added\n    fontSize: getFontSize(14),\n    color: Colors.text,\n    textAlign: 'center',\n    marginBottom: 20,\n  },\n  retryButton: {\n    // Added\n    backgroundColor: Colors.primary,\n    paddingVertical: 10,\n    paddingHorizontal: 20,\n    borderRadius: 8,\n  },\n  retryButtonText: {\n    // Added\n    color: Colors.white,\n    fontSize: getFontSize(16),\n    fontWeight: '600',\n  },\n});\n\nexport default SalesReportDetailScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/reports/StaffReportDetailScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_width' is assigned a value but never used.","line":25,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_theme' is assigned a value but never used.","line":58,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":58,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_isLoading' is assigned a value but never used.","line":60,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":60,"endColumn":20},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { width: 24 }","line":219,"column":24,"nodeType":"ObjectExpression","endLine":219,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_renderContent' is assigned a value but never used.","line":236,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":236,"endColumn":23}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  SafeAreaView,\n  StatusBar,\n  ScrollView,\n  TouchableOpacity,\n  Dimensions,\n  Alert,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation } from '@react-navigation/native';\nimport { useTheme } from '../../design-system/ThemeProvider';\nimport DataService from '../../services/DataService';\nimport LoadingView from '../../components/feedback/LoadingView';\nimport ComingSoon from '../../components/feedback/ComingSoon';\n\n// Mock ENV flag\nconst ENV = {\n  FEATURE_REPORTS: _true, // Set to true to enable, false to show ComingSoon\n};\n\nconst { _width } = Dimensions.get('window');\n\nconst Colors = {\n  primary: '#00A651',\n  secondary: '#0066CC',\n  success: '#27AE60',\n  warning: '#F39C12',\n  danger: '#E74C3C',\n  background: '#F8F9FA',\n  white: '#FFFFFF',\n  lightGray: '#ECF0F1',\n  mediumGray: '#BDC3C7',\n  text: '#2C3E50',\n  lightText: '#95A5A6',\n};\n\ninterface StaffMember {\n  id: string;\n  name: string;\n  role: string;\n  avatar: string;\n  totalSales: number;\n  transactionsHandled: number;\n  averageOrderValue: number;\n  hoursWorked: number;\n  efficiency: number;\n  customerRating: number;\n  shiftsCompleted: number;\n  performance: 'excellent' | 'good' | 'average' | 'needs_improvement';\n}\n\nconst StaffReportDetailScreen = () => {\n  const navigation = useNavigation();\n  const { _theme } = useTheme();\n  const [staffData, setStaffData] = useState<StaffMember[]>([]);\n  const [_isLoading, setIsLoading] = useState<boolean>(__true);\n  const [error, setError] = useState<string | null>(__null);\n  const [selectedPeriod, setSelectedPeriod] = useState('today');\n  const [selectedMetric, setSelectedMetric] = useState('sales');\n\n  const handleExportReport = () => {\n    Alert.alert('Export Staff Report', 'Choose export format', [\n      { text: 'Cancel', style: 'cancel' },\n      {\n        text: 'PDF Report',\n        onPress: () => Alert.alert('PDF Export', 'Staff performance PDF coming soon'),\n      },\n      { text: 'CSV Data', onPress: () => Alert.alert('CSV Export', 'Staff data CSV coming soon') },\n      {\n        text: 'Email Summary',\n        onPress: () => Alert.alert('Email Report', 'Email functionality coming soon'),\n      },\n    ]);\n  };\n\n  useEffect(() => {\n    if (ENV.FEATURE_REPORTS) {\n      loadStaffData();\n    } else {\n      setIsLoading(__false);\n    }\n  }, [selectedPeriod]);\n\n  const loadStaffData = async () => {\n    // Modified\n    setIsLoading(__true);\n    setError(__null);\n    try {\n      const dataService = DataService.getInstance();\n      // Assuming getStaffReportDetail returns data in StaffMember[] shape for the selectedPeriod\n      // and that this data is already processed (e.g., _sorted, metrics calculated).\n      const data = await dataService.getStaffReportDetail(__selectedPeriod);\n      setStaffData(data || []);\n    } catch (e: _unknown) {\n      setError(e.message || 'Failed to load staff report.');\n      setStaffData([]);\n    } finally {\n      setIsLoading(__false);\n    }\n  };\n\n  // The complex data transformation logic previously here (extracting staff from sales history, calculating metrics)\n  // is now assumed to be handled by the backend or DataService.getStaffReportDetail.\n  // For this refactor, we assume the service provides the necessary StaffMember[] structure with pre-calculated metrics.\n\n  const formatCurrency = (amount: _number) => {\n    return `£${amount.toLocaleString('en-GB', {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    })}`;\n  };\n\n  const getPerformanceColor = (_performance: _string) => {\n    switch (__performance) {\n      case 'excellent':\n        return Colors.success;\n      case 'good':\n        return Colors.primary;\n      case 'average':\n        return Colors.warning;\n      case 'needs_improvement':\n        return Colors.danger;\n      default:\n        return Colors.lightText;\n    }\n  };\n\n  const getPerformanceIcon = (_performance: _string) => {\n    switch (__performance) {\n      case 'excellent':\n        return 'star';\n      case 'good':\n        return 'thumb-up';\n      case 'average':\n        return 'trending-flat';\n      case 'needs_improvement':\n        return 'trending-down';\n      default:\n        return 'help';\n    }\n  };\n\n  const getRoleIcon = (role: _string) => {\n    switch (role.toLowerCase()) {\n      case 'manager':\n        return 'supervisor-account';\n      case 'cashier':\n        return 'point-of-sale';\n      case 'cook':\n        return 'restaurant';\n      case 'server':\n        return 'room-service';\n      default:\n        return 'person';\n    }\n  };\n\n  const getTopPerformer = () => {\n    if (staffData.length === 0) {\n      return null;\n    }\n\n    switch (__selectedMetric) {\n      case 'sales':\n        return staffData.reduce((__prev, _current) =>\n          prev.totalSales > current.totalSales ? prev : _current,\n        );\n      case 'transactions':\n        return staffData.reduce((__prev, _current) =>\n          prev.transactionsHandled > current.transactionsHandled ? prev : _current,\n        );\n      case 'efficiency':\n        return staffData.reduce((__prev, _current) =>\n          prev.efficiency > current.efficiency ? prev : _current,\n        );\n      default:\n        return staffData[0];\n    }\n  };\n\n  const getStaffStats = () => {\n    const totalSales = staffData.reduce((__sum, _staff) => sum + staff.totalSales, 0);\n    const _totalTransactions = staffData.reduce(\n      (__sum, _staff) => sum + staff.transactionsHandled,\n      0,\n    );\n    const totalHours = staffData.reduce((__sum, _staff) => sum + staff.hoursWorked, 0);\n    const averageRating =\n      staffData.length > 0\n        ? staffData.reduce((__sum, _staff) => sum + staff.customerRating, 0) / staffData.length\n        : 0;\n\n    return { totalSales, _totalTransactions, totalHours, averageRating };\n  };\n\n  const topPerformer = staffData.length > 0 ? getTopPerformer() : null;\n  const stats = getStaffStats(); // This will use staffData, which might be empty\n\n  if (!ENV.FEATURE_REPORTS) {\n    return <ComingSoon />;\n  }\n\n  if (__isLoading) {\n    return <LoadingView message=\"Loading Staff Report...\" />;\n  }\n\n  if (__error) {\n    return (\n      <SafeAreaView style={styles.container}>\n        <View style={styles.header}>\n          <TouchableOpacity style={styles.backButton} onPress={() => navigation.goBack()}>\n            <Icon name=\"arrow-back\" size={24} color={Colors.white} />\n          </TouchableOpacity>\n          <Text style={styles.headerTitle}>Staff Report</Text>\n          <View style={{ width: 24 }} />\n          {/* Placeholder for balance */}\n        </View>\n        <View style={styles.centeredError}>\n          <Icon name=\"error-outline\" size={64} color={Colors.danger} />\n          <Text style={styles.errorTextHeader}>Error Loading Report</Text>\n          <Text style={styles.errorText}>{error}</Text>\n          <TouchableOpacity onPress={loadStaffData} style={styles.retryButton}>\n            <Text style={styles.retryButtonText}>Try Again</Text>\n          </TouchableOpacity>\n        </View>\n      </SafeAreaView>\n    );\n  }\n\n  // Handling for when staffData is empty after loading (no error)\n  // but still want to show the period selector etc.\n  const _renderContent = () => {\n    if (staffData.length === 0) {\n      return (\n        <View style={styles.centeredError}>\n          <Icon name=\"people-outline\" size={64} color={Colors.mediumGray} />\n          <Text style={styles.errorTextHeader}>No Staff Data</Text>\n          <Text style={styles.errorText}>\n            There is no staff data available for the selected period.\n          </Text>\n        </View>\n      );\n    }\n    return (\n      <>\n        {/* Top Performer */}\n        {topPerformer && (\n          <View style={styles.section}>\n            <Text style={styles.sectionTitle}>Top Performer ({selectedMetric})</Text>\n            <View style={styles.topPerformerCard}>\n              <View style={styles.avatarContainer}>\n                <View style={[styles.avatar, { backgroundColor: Colors.primary }]}>\n                  <Text style={styles.avatarText}>{topPerformer.avatar}</Text>\n                </View>\n                <View style={styles.crownIcon}>\n                  <Icon name=\"emoji-events\" size={20} color={Colors.warning} />\n                </View>\n              </View>\n\n              <View style={styles.performerInfo}>\n                <Text style={styles.performerName}>{topPerformer.name}</Text>\n                <Text style={styles.performerRole}>{topPerformer.role}</Text>\n\n                <View style={styles.performerStats}>\n                  <View style={styles.performerStat}>\n                    <Text style={styles.performerStatValue}>\n                      {formatCurrency(topPerformer.totalSales)}\n                    </Text>\n                    <Text style={styles.performerStatLabel}>Sales</Text>\n                  </View>\n                  <View style={styles.performerStat}>\n                    <Text style={styles.performerStatValue}>\n                      {topPerformer.transactionsHandled}\n                    </Text>\n                    <Text style={styles.performerStatLabel}>Orders</Text>\n                  </View>\n                  <View style={styles.performerStat}>\n                    <Text style={styles.performerStatValue}>\n                      {topPerformer.efficiency.toFixed(1)}/h\n                    </Text>\n                    <Text style={styles.performerStatLabel}>Efficiency</Text>\n                  </View>\n                </View>\n              </View>\n            </View>\n          </View>\n        )}\n\n        {/* Metric Selector */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Sort by Performance</Text>\n          <View style={styles.metricSelector}>\n            {['sales', 'transactions', 'efficiency'].map(metric => (\n              <TouchableOpacity\n                key={metric}\n                style={[\n                  styles.metricButton,\n                  selectedMetric === metric && styles.metricButtonActive,\n                ]}\n                onPress={() => setSelectedMetric(__metric)}>\n                <Text\n                  style={[styles.metricText, selectedMetric === metric && styles.metricTextActive]}>\n                  {metric.charAt(0).toUpperCase() + metric.slice(1)}\n                </Text>\n              </TouchableOpacity>\n            ))}\n          </View>\n        </View>\n\n        {/* Staff List */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Staff Performance</Text>\n\n          {staffData\n            .sort((__a, _b) => {\n              switch (__selectedMetric) {\n                case 'sales':\n                  return b.totalSales - a.totalSales;\n                case 'transactions':\n                  return b.transactionsHandled - a.transactionsHandled;\n                case 'efficiency':\n                  return b.efficiency - a.efficiency;\n                default:\n                  return 0;\n              }\n            })\n            .map((__staff, _index) => (\n              <View key={staff.id} style={styles.staffCard}>\n                <View style={styles.staffHeader}>\n                  <View style={styles.staffBasicInfo}>\n                    <View style={[styles.avatar, { backgroundColor: Colors.secondary }]}>\n                      <Text style={styles.avatarText}>{staff.avatar}</Text>\n                    </View>\n\n                    <View style={styles.staffDetails}>\n                      <View style={styles.staffNameRow}>\n                        <Text style={styles.staffName}>{staff.name}</Text>\n                        <View style={styles.rankBadge}>\n                          <Text style={styles.rankText}>#{index + 1}</Text>\n                        </View>\n                      </View>\n\n                      <View style={styles.staffRoleRow}>\n                        <Icon name={getRoleIcon(staff.role)} size={16} color={Colors.lightText} />\n                        <Text style={styles.staffRole}>{staff.role}</Text>\n                      </View>\n                    </View>\n                  </View>\n\n                  <View style={styles.performanceIndicator}>\n                    <Icon\n                      name={getPerformanceIcon(staff.performance)}\n                      size={20}\n                      color={getPerformanceColor(staff.performance)}\n                    />\n                    <Text\n                      style={[\n                        styles.performanceText,\n                        { color: getPerformanceColor(staff.performance) },\n                      ]}>\n                      {staff.performance.replace('_', ' ').toUpperCase()}\n                    </Text>\n                  </View>\n                </View>\n\n                <View style={styles.staffMetrics}>\n                  <View style={styles.metricItem}>\n                    <Text style={styles.metricLabel}>Sales</Text>\n                    <Text style={styles.metricValue}>{formatCurrency(staff.totalSales)}</Text>\n                  </View>\n\n                  <View style={styles.metricItem}>\n                    <Text style={styles.metricLabel}>Orders</Text>\n                    <Text style={styles.metricValue}>{staff.transactionsHandled}</Text>\n                  </View>\n\n                  <View style={styles.metricItem}>\n                    <Text style={styles.metricLabel}>Avg Order</Text>\n                    <Text style={styles.metricValue}>\n                      {formatCurrency(staff.averageOrderValue)}\n                    </Text>\n                  </View>\n\n                  <View style={styles.metricItem}>\n                    <Text style={styles.metricLabel}>Hours</Text>\n                    <Text style={styles.metricValue}>{staff.hoursWorked.toFixed(1)}h</Text>\n                  </View>\n\n                  <View style={styles.metricItem}>\n                    <Text style={styles.metricLabel}>Efficiency</Text>\n                    <Text style={styles.metricValue}>{formatCurrency(staff.efficiency)}/h</Text>\n                  </View>\n\n                  <View style={styles.metricItem}>\n                    <Text style={styles.metricLabel}>Rating</Text>\n                    <Text style={styles.metricValue}>{staff.customerRating.toFixed(1)}★</Text>\n                  </View>\n                </View>\n\n                {/* Performance Bar */}\n                <View style={styles.performanceBarContainer}>\n                  <Text style={styles.performanceBarLabel}>Performance Score</Text>\n                  <View style={styles.performanceBar}>\n                    <View\n                      style={[\n                        styles.performanceBarFill,\n                        {\n                          width: `${Math.min((staff.efficiency / 150) * 100, 100)}%`, // Example logic\n                          backgroundColor: getPerformanceColor(staff.performance),\n                        },\n                      ]}\n                    />\n                  </View>\n                </View>\n              </View>\n            ))}\n        </View>\n      </>\n    );\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <StatusBar barStyle=\"light-content\" backgroundColor={Colors.primary} />\n\n      {/* Header */}\n      <View style={styles.header}>\n        <TouchableOpacity style={styles.backButton} onPress={() => navigation.goBack()}>\n          <Icon name=\"arrow-back\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n        <Text style={styles.headerTitle}>Staff Report</Text>\n        <TouchableOpacity style={styles.headerAction} onPress={handleExportReport}>\n          <Icon name=\"file-download\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n      </View>\n\n      {/* Period Selector */}\n      <View style={styles.periodSelector}>\n        {['today', 'week', 'month'].map(period => (\n          <TouchableOpacity\n            key={period}\n            style={[styles.periodButton, selectedPeriod === period && styles.periodButtonActive]}\n            onPress={() => setSelectedPeriod(__period)}>\n            <Text style={[styles.periodText, selectedPeriod === period && styles.periodTextActive]}>\n              {period.charAt(0).toUpperCase() + period.slice(1)}\n            </Text>\n          </TouchableOpacity>\n        ))}\n      </View>\n\n      <ScrollView style={styles.content}>\n        {/* Overall Stats */}\n        <View style={styles.summaryContainer}>\n          <View style={styles.summaryCard}>\n            <Text style={styles.summaryValue}>{staffData.length}</Text>\n            <Text style={styles.summaryLabel}>Active Staff</Text>\n          </View>\n\n          <View style={styles.summaryCard}>\n            <Text style={styles.summaryValue}>{formatCurrency(stats.totalSales)}</Text>\n            <Text style={styles.summaryLabel}>Total Sales</Text>\n          </View>\n\n          <View style={styles.summaryCard}>\n            <Text style={styles.summaryValue}>{Math.round(stats.totalHours)}h</Text>\n            <Text style={styles.summaryLabel}>Hours Worked</Text>\n          </View>\n\n          <View style={styles.summaryCard}>\n            <Text style={styles.summaryValue}>{stats.averageRating.toFixed(1)}★</Text>\n            <Text style={styles.summaryLabel}>Avg Rating</Text>\n          </View>\n        </View>\n\n        {/* Top Performer */}\n        {topPerformer && (\n          <View style={styles.section}>\n            <Text style={styles.sectionTitle}>Top Performer ({selectedMetric})</Text>\n            <View style={styles.topPerformerCard}>\n              <View style={styles.avatarContainer}>\n                <View style={[styles.avatar, { backgroundColor: Colors.primary }]}>\n                  <Text style={styles.avatarText}>{topPerformer.avatar}</Text>\n                </View>\n                <View style={styles.crownIcon}>\n                  <Icon name=\"emoji-events\" size={20} color={Colors.warning} />\n                </View>\n              </View>\n\n              <View style={styles.performerInfo}>\n                <Text style={styles.performerName}>{topPerformer.name}</Text>\n                <Text style={styles.performerRole}>{topPerformer.role}</Text>\n\n                <View style={styles.performerStats}>\n                  <View style={styles.performerStat}>\n                    <Text style={styles.performerStatValue}>\n                      {formatCurrency(topPerformer.totalSales)}\n                    </Text>\n                    <Text style={styles.performerStatLabel}>Sales</Text>\n                  </View>\n                  <View style={styles.performerStat}>\n                    <Text style={styles.performerStatValue}>\n                      {topPerformer.transactionsHandled}\n                    </Text>\n                    <Text style={styles.performerStatLabel}>Orders</Text>\n                  </View>\n                  <View style={styles.performerStat}>\n                    <Text style={styles.performerStatValue}>\n                      {topPerformer.efficiency.toFixed(1)}/h\n                    </Text>\n                    <Text style={styles.performerStatLabel}>Efficiency</Text>\n                  </View>\n                </View>\n              </View>\n            </View>\n          </View>\n        )}\n\n        {/* Metric Selector */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Sort by Performance</Text>\n          <View style={styles.metricSelector}>\n            {['sales', 'transactions', 'efficiency'].map(metric => (\n              <TouchableOpacity\n                key={metric}\n                style={[\n                  styles.metricButton,\n                  selectedMetric === metric && styles.metricButtonActive,\n                ]}\n                onPress={() => setSelectedMetric(__metric)}>\n                <Text\n                  style={[styles.metricText, selectedMetric === metric && styles.metricTextActive]}>\n                  {metric.charAt(0).toUpperCase() + metric.slice(1)}\n                </Text>\n              </TouchableOpacity>\n            ))}\n          </View>\n        </View>\n\n        {/* Staff List */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Staff Performance</Text>\n\n          {staffData\n            .sort((__a, _b) => {\n              switch (__selectedMetric) {\n                case 'sales':\n                  return b.totalSales - a.totalSales;\n                case 'transactions':\n                  return b.transactionsHandled - a.transactionsHandled;\n                case 'efficiency':\n                  return b.efficiency - a.efficiency;\n                default:\n                  return 0;\n              }\n            })\n            .map((__staff, _index) => (\n              <View key={staff.id} style={styles.staffCard}>\n                <View style={styles.staffHeader}>\n                  <View style={styles.staffBasicInfo}>\n                    <View style={[styles.avatar, { backgroundColor: Colors.secondary }]}>\n                      <Text style={styles.avatarText}>{staff.avatar}</Text>\n                    </View>\n\n                    <View style={styles.staffDetails}>\n                      <View style={styles.staffNameRow}>\n                        <Text style={styles.staffName}>{staff.name}</Text>\n                        <View style={styles.rankBadge}>\n                          <Text style={styles.rankText}>#{index + 1}</Text>\n                        </View>\n                      </View>\n\n                      <View style={styles.staffRoleRow}>\n                        <Icon name={getRoleIcon(staff.role)} size={16} color={Colors.lightText} />\n                        <Text style={styles.staffRole}>{staff.role}</Text>\n                      </View>\n                    </View>\n                  </View>\n\n                  <View style={styles.performanceIndicator}>\n                    <Icon\n                      name={getPerformanceIcon(staff.performance)}\n                      size={20}\n                      color={getPerformanceColor(staff.performance)}\n                    />\n                    <Text\n                      style={[\n                        styles.performanceText,\n                        { color: getPerformanceColor(staff.performance) },\n                      ]}>\n                      {staff.performance.replace('_', ' ').toUpperCase()}\n                    </Text>\n                  </View>\n                </View>\n\n                <View style={styles.staffMetrics}>\n                  <View style={styles.metricItem}>\n                    <Text style={styles.metricLabel}>Sales</Text>\n                    <Text style={styles.metricValue}>{formatCurrency(staff.totalSales)}</Text>\n                  </View>\n\n                  <View style={styles.metricItem}>\n                    <Text style={styles.metricLabel}>Orders</Text>\n                    <Text style={styles.metricValue}>{staff.transactionsHandled}</Text>\n                  </View>\n\n                  <View style={styles.metricItem}>\n                    <Text style={styles.metricLabel}>Avg Order</Text>\n                    <Text style={styles.metricValue}>\n                      {formatCurrency(staff.averageOrderValue)}\n                    </Text>\n                  </View>\n\n                  <View style={styles.metricItem}>\n                    <Text style={styles.metricLabel}>Hours</Text>\n                    <Text style={styles.metricValue}>{staff.hoursWorked.toFixed(1)}h</Text>\n                  </View>\n\n                  <View style={styles.metricItem}>\n                    <Text style={styles.metricLabel}>Efficiency</Text>\n                    <Text style={styles.metricValue}>{formatCurrency(staff.efficiency)}/h</Text>\n                  </View>\n\n                  <View style={styles.metricItem}>\n                    <Text style={styles.metricLabel}>Rating</Text>\n                    <Text style={styles.metricValue}>{staff.customerRating.toFixed(1)}★</Text>\n                  </View>\n                </View>\n\n                {/* Performance Bar */}\n                <View style={styles.performanceBarContainer}>\n                  <Text style={styles.performanceBarLabel}>Performance Score</Text>\n                  <View style={styles.performanceBar}>\n                    <View\n                      style={[\n                        styles.performanceBarFill,\n                        {\n                          width: `${Math.min((staff.efficiency / 150) * 100, 100)}%`,\n                          backgroundColor: getPerformanceColor(staff.performance),\n                        },\n                      ]}\n                    />\n                  </View>\n                </View>\n              </View>\n            ))}\n        </View>\n\n        <View style={styles.spacer} />\n      </ScrollView>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.primary,\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    height: 60,\n  },\n  backButton: {\n    padding: 8,\n  },\n  headerTitle: {\n    flex: 1,\n    color: Colors.white,\n    fontSize: 20,\n    fontWeight: 'bold',\n    textAlign: 'center',\n  },\n  headerAction: {\n    padding: 8,\n  },\n  periodSelector: {\n    flexDirection: 'row',\n    backgroundColor: Colors.white,\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.lightGray,\n  },\n  periodButton: {\n    flex: 1,\n    paddingVertical: 8,\n    paddingHorizontal: 12,\n    marginHorizontal: 4,\n    borderRadius: 20,\n    backgroundColor: Colors.lightGray,\n    alignItems: 'center',\n  },\n  periodButtonActive: {\n    backgroundColor: Colors.primary,\n  },\n  periodText: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.text,\n  },\n  periodTextActive: {\n    color: Colors.white,\n  },\n  content: {\n    flex: 1,\n    padding: 16,\n  },\n  summaryContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 20,\n  },\n  summaryCard: {\n    flex: 1,\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    padding: 12,\n    marginHorizontal: 2,\n    alignItems: 'center',\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.1,\n    shadowRadius: 2,\n  },\n  summaryValue: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  summaryLabel: {\n    fontSize: 11,\n    color: Colors.lightText,\n    textAlign: 'center',\n  },\n  section: {\n    marginBottom: 20,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: Colors.text,\n    marginBottom: 12,\n  },\n  topPerformerCard: {\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    padding: 20,\n    flexDirection: 'row',\n    alignItems: 'center',\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.1,\n    shadowRadius: 2,\n    borderLeftWidth: 4,\n    borderLeftColor: Colors.warning,\n  },\n  avatarContainer: {\n    position: 'relative',\n    marginRight: 16,\n  },\n  avatar: {\n    width: 60,\n    height: 60,\n    borderRadius: 30,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  avatarText: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: Colors.white,\n  },\n  crownIcon: {\n    position: 'absolute',\n    top: -8,\n    right: -8,\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    width: 24,\n    height: 24,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  performerInfo: {\n    flex: 1,\n  },\n  performerName: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: Colors.text,\n  },\n  performerRole: {\n    fontSize: 14,\n    color: Colors.lightText,\n    marginBottom: 12,\n  },\n  performerStats: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  performerStat: {\n    alignItems: 'center',\n  },\n  performerStatValue: {\n    fontSize: 14,\n    fontWeight: 'bold',\n    color: Colors.primary,\n  },\n  performerStatLabel: {\n    fontSize: 12,\n    color: Colors.lightText,\n    marginTop: 2,\n  },\n  metricSelector: {\n    flexDirection: 'row',\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    padding: 4,\n  },\n  metricButton: {\n    flex: 1,\n    paddingVertical: 8,\n    paddingHorizontal: 12,\n    borderRadius: 8,\n    alignItems: 'center',\n  },\n  metricButtonActive: {\n    backgroundColor: Colors.primary,\n  },\n  metricText: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.text,\n  },\n  metricTextActive: {\n    color: Colors.white,\n  },\n  staffCard: {\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 12,\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.1,\n    shadowRadius: 2,\n  },\n  staffHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 16,\n  },\n  staffBasicInfo: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    flex: 1,\n  },\n  staffDetails: {\n    marginLeft: 12,\n    flex: 1,\n  },\n  staffNameRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n  staffName: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  rankBadge: {\n    backgroundColor: Colors.lightGray,\n    paddingHorizontal: 8,\n    paddingVertical: 2,\n    borderRadius: 10,\n  },\n  rankText: {\n    fontSize: 12,\n    fontWeight: 'bold',\n    color: Colors.text,\n  },\n  staffRoleRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginTop: 4,\n  },\n  staffRole: {\n    fontSize: 14,\n    color: Colors.lightText,\n    marginLeft: 4,\n  },\n  performanceIndicator: {\n    alignItems: 'center',\n  },\n  performanceText: {\n    fontSize: 10,\n    fontWeight: '600',\n    marginTop: 2,\n  },\n  staffMetrics: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'space-between',\n    marginBottom: 16,\n  },\n  metricItem: {\n    width: '30%',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  metricLabel: {\n    fontSize: 12,\n    color: Colors.lightText,\n    marginBottom: 2,\n  },\n  metricValue: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  performanceBarContainer: {\n    marginTop: 8,\n  },\n  performanceBarLabel: {\n    fontSize: 12,\n    color: Colors.lightText,\n    marginBottom: 6,\n  },\n  performanceBar: {\n    height: 6,\n    backgroundColor: Colors.lightGray,\n    borderRadius: 3,\n  },\n  performanceBarFill: {\n    height: '100%',\n    borderRadius: 3,\n  },\n  spacer: {\n    height: 40,\n  },\n  centeredError: {\n    // Added\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20,\n    backgroundColor: Colors.background,\n  },\n  errorTextHeader: {\n    // Added\n    fontSize: 18, // Using fixed size as getFontSize might not be defined in this scope\n    fontWeight: 'bold',\n    color: Colors.danger,\n    marginTop: 16,\n    marginBottom: 8,\n    textAlign: 'center',\n  },\n  errorText: {\n    // Added\n    fontSize: 14, // Using fixed size\n    color: Colors.text,\n    textAlign: 'center',\n    marginBottom: 20,\n  },\n  retryButton: {\n    // Added\n    backgroundColor: Colors.primary,\n    paddingVertical: 10,\n    paddingHorizontal: 20,\n    borderRadius: 8,\n  },\n  retryButtonText: {\n    // Added\n    color: Colors.white,\n    fontSize: 16, // Using fixed size\n    fontWeight: '600',\n  },\n});\n\nexport default StaffReportDetailScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/scanner/QRScannerScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_screenWidth' is assigned a value but never used.","line":20,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_screenHeight' is assigned a value but never used.","line":20,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_isLoading' is assigned a value but never used.","line":53,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":53,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_result' is assigned a value but never used.","line":123,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":123,"endColumn":30}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  SafeAreaView,\n  TouchableOpacity,\n  Alert,\n  Dimensions,\n  StatusBar,\n  Platform,\n  PermissionsAndroid,\n  Linking,\n  ActivityIndicator,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation, RouteProp } from '@react-navigation/native';\nimport Colors from '../../constants/Colors';\n\nconst { width: _screenWidth, height: _screenHeight } = Dimensions.get('window');\n\ntype QRScannerRouteProp = RouteProp<\n  {\n    QRScanner: {\n      onScanned: (data: _string) => void;\n      title?: string;\n      subtitle?: string;\n    };\n  },\n  'QRScanner'\n>;\n\ninterface ScanResult {\n  data: string;\n  type: string;\n  timestamp: Date;\n}\n\nconst QRScannerScreen: React.FC = () => {\n  const navigation = useNavigation();\n  const route = useRoute<QRScannerRouteProp>();\n\n  const {\n    onScanned,\n    title = 'QR Scanner',\n    subtitle = 'Point camera at QR code',\n  } = route.params || {};\n\n  const [hasPermission, setHasPermission] = useState<boolean | null>(__null);\n  const [isScanning, setIsScanning] = useState(__true);\n  const [flashEnabled, setFlashEnabled] = useState(__false);\n  const [scannedData, setScannedData] = useState<ScanResult | null>(__null);\n  const [_isLoading, setIsLoading] = useState(__true);\n  const [permissionDenied, setPermissionDenied] = useState(__false);\n\n  const scanTimeoutRef = useRef<NodeJS.Timeout | null>(__null);\n\n  useEffect(() => {\n    requestCameraPermission();\n\n    return () => {\n      if (scanTimeoutRef.current) {\n        clearTimeout(scanTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  const requestCameraPermission = async () => {\n    try {\n      setIsLoading(__true);\n\n      if (Platform.OS === 'android') {\n        const granted = await PermissionsAndroid.request(PermissionsAndroid.PERMISSIONS.CAMERA, {\n          title: 'Camera Permission Required',\n          message:\n            'Fynlo POS needs camera access to scan QR codes for payments and inventory management.',\n          buttonNeutral: 'Ask Me Later',\n          buttonNegative: 'Deny',\n          buttonPositive: 'Allow',\n        });\n\n        if (granted === PermissionsAndroid.RESULTS.GRANTED) {\n          setHasPermission(__true);\n          setPermissionDenied(__false);\n        } else {\n          setHasPermission(__false);\n          setPermissionDenied(__true);\n        }\n      } else {\n        // For iOS, we'll simulate permission request\n        // In real implementation, this would use react-native-permissions\n        setTimeout(() => {\n          setHasPermission(__true);\n          setPermissionDenied(__false);\n        }, 1000);\n      }\n    } catch (__error) {\n      setHasPermission(__false);\n      setPermissionDenied(__true);\n    } finally {\n      setIsLoading(__false);\n    }\n  };\n\n  const simulateQRScan = () => {\n    if (!isScanning) {\n      return;\n    }\n\n    // Simulate different types of QR codes\n    const mockQRCodes = [\n      'PAYMENT:£25.50:TXN123456',\n      'PRODUCT:SKU789:Nachos Supreme',\n      'TABLE:T08:Outdoor Seating',\n      'MENU:ITEM001:Chicken Quesadilla',\n      'CUSTOMER:CUST456:John Doe',\n      'https://fynlo.com/payment/abc123',\n      'INVENTORY:INV789:Ground Coffee - House Blend',\n    ];\n\n    const _randomCode = mockQRCodes[Math.floor(Math.random() * mockQRCodes.length)];\n\n    const _result: ScanResult = {\n      data: _randomCode,\n      type: 'QR_CODE',\n      timestamp: new Date(),\n    };\n\n    setScannedData(__result);\n    setIsScanning(__false);\n\n    // Provide haptic feedback simulation\n\n    // Auto-confirm after 2 seconds or let user manually confirm\n    scanTimeoutRef.current = setTimeout(() => {\n      handleConfirmScan(__result);\n    }, 2000);\n  };\n\n  const handleConfirmScan = (result: _ScanResult) => {\n    if (scanTimeoutRef.current) {\n      clearTimeout(scanTimeoutRef.current);\n    }\n\n    if (__onScanned) {\n      onScanned(result.data);\n    }\n    navigation.goBack();\n  };\n\n  const handleRetryScanning = () => {\n    setScannedData(__null);\n    setIsScanning(__true);\n    if (scanTimeoutRef.current) {\n      clearTimeout(scanTimeoutRef.current);\n    }\n  };\n\n  const handleOpenSettings = () => {\n    Alert.alert(\n      'Camera Permission Required',\n      'Please enable camera permission in your device settings to use the QR scanner.',\n      [\n        { text: 'Cancel', style: 'cancel' },\n        { text: 'Open Settings', onPress: () => Linking.openSettings() },\n      ],\n    );\n  };\n\n  const getQRCodeTypeDisplay = (data: _string) => {\n    if (data.startsWith('PAYMENT:')) {\n      return 'Payment QR Code';\n    }\n    if (data.startsWith('PRODUCT:')) {\n      return 'Product Code';\n    }\n    if (data.startsWith('TABLE:')) {\n      return 'Table Code';\n    }\n    if (data.startsWith('MENU:')) {\n      return 'Menu Item';\n    }\n    if (data.startsWith('CUSTOMER:')) {\n      return 'Customer Code';\n    }\n    if (data.startsWith('INVENTORY:')) {\n      return 'Inventory Item';\n    }\n    if (data.startsWith('http')) {\n      return 'Website Link';\n    }\n    return 'QR Code';\n  };\n\n  const formatScannedData = (data: _string) => {\n    if (data.length > 50) {\n      return data.substring(0, 47) + '...';\n    }\n    return data;\n  };\n\n  if (__isLoading) {\n    return (\n      <SafeAreaView style={styles.container}>\n        <StatusBar barStyle=\"light-content\" backgroundColor={Colors.primary} />\n        <View style={styles.loadingContainer}>\n          <ActivityIndicator size=\"large\" color={Colors.primary} />\n          <Text style={styles.loadingText}>Requesting camera permission...</Text>\n        </View>\n      </SafeAreaView>\n    );\n  }\n\n  if (hasPermission === false || permissionDenied) {\n    return (\n      <SafeAreaView style={styles.container}>\n        <StatusBar barStyle=\"light-content\" backgroundColor={Colors.primary} />\n\n        {/* Header */}\n        <View style={styles.header}>\n          <TouchableOpacity style={styles.backButton} onPress={() => navigation.goBack()}>\n            <Icon name=\"arrow-back\" size={24} color={Colors.white} />\n          </TouchableOpacity>\n          <Text style={styles.headerTitle}>Camera Permission</Text>\n          <View style={styles.headerSpacer} />\n        </View>\n\n        <View style={styles.permissionContainer}>\n          <Icon name=\"camera-alt\" size={80} color={Colors.lightGray} />\n          <Text style={styles.permissionTitle}>Camera Access Required</Text>\n          <Text style={styles.permissionMessage}>\n            Fynlo POS needs camera access to scan QR codes for:\n          </Text>\n\n          <View style={styles.featureList}>\n            <View style={styles.featureItem}>\n              <Icon name=\"payment\" size={20} color={Colors.primary} />\n              <Text style={styles.featureText}>Payment processing</Text>\n            </View>\n            <View style={styles.featureItem}>\n              <Icon name=\"inventory\" size={20} color={Colors.primary} />\n              <Text style={styles.featureText}>Inventory management</Text>\n            </View>\n            <View style={styles.featureItem}>\n              <Icon name=\"qr-code\" size={20} color={Colors.primary} />\n              <Text style={styles.featureText}>Quick product lookup</Text>\n            </View>\n            <View style={styles.featureItem}>\n              <Icon name=\"table-restaurant\" size={20} color={Colors.primary} />\n              <Text style={styles.featureText}>Table identification</Text>\n            </View>\n          </View>\n\n          <TouchableOpacity style={styles.permissionButton} onPress={requestCameraPermission}>\n            <Icon name=\"camera-alt\" size={20} color={Colors.white} />\n            <Text style={styles.permissionButtonText}>Grant Camera Access</Text>\n          </TouchableOpacity>\n\n          <TouchableOpacity style={styles.settingsButton} onPress={handleOpenSettings}>\n            <Text style={styles.settingsButtonText}>Open App Settings</Text>\n          </TouchableOpacity>\n        </View>\n      </SafeAreaView>\n    );\n  }\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <StatusBar barStyle=\"light-content\" backgroundColor={Colors.primary} />\n\n      {/* Header */}\n      <View style={styles.header}>\n        <TouchableOpacity style={styles.backButton} onPress={() => navigation.goBack()}>\n          <Icon name=\"close\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n        <View style={styles.headerCenter}>\n          <Text style={styles.headerTitle}>{title}</Text>\n          <Text style={styles.headerSubtitle}>{subtitle}</Text>\n        </View>\n        <TouchableOpacity style={styles.flashButton} onPress={() => setFlashEnabled(!flashEnabled)}>\n          <Icon\n            name={flashEnabled ? 'flash-on' : 'flash-off'}\n            size={24}\n            color={flashEnabled ? Colors.warning : Colors.white}\n          />\n        </TouchableOpacity>\n      </View>\n\n      {/* Camera View Simulation */}\n      <View style={styles.cameraContainer}>\n        {/* Scanning Frame */}\n        <View style={styles.scanFrame}>\n          <View style={styles.scanFrameCorner} />\n          <View style={[styles.scanFrameCorner, styles.topRight]} />\n          <View style={[styles.scanFrameCorner, styles.bottomLeft]} />\n          <View style={[styles.scanFrameCorner, styles.bottomRight]} />\n\n          {isScanning && <View style={styles.scanLine} />}\n        </View>\n\n        {/* Scanning Instructions */}\n        {isScanning ? (\n          <View style={styles.instructionsContainer}>\n            <Text style={styles.instructionsText}>Position QR code within the frame</Text>\n            <Text style={styles.instructionsSubtext}>\n              Camera will automatically detect and scan\n            </Text>\n          </View>\n        ) : scannedData ? (\n          <View style={styles.resultContainer}>\n            <View style={styles.resultCard}>\n              <Icon name=\"check-circle\" size={48} color={Colors.success} />\n              <Text style={styles.resultTitle}>QR Code Detected!</Text>\n              <Text style={styles.resultType}>{getQRCodeTypeDisplay(scannedData.data)}</Text>\n              <Text style={styles.resultData}>{formatScannedData(scannedData.data)}</Text>\n\n              <View style={styles.resultActions}>\n                <TouchableOpacity style={styles.retryButton} onPress={handleRetryScanning}>\n                  <Icon name=\"refresh\" size={20} color={Colors.secondary} />\n                  <Text style={styles.retryButtonText}>Scan Again</Text>\n                </TouchableOpacity>\n\n                <TouchableOpacity\n                  style={styles.confirmButton}\n                  onPress={() => handleConfirmScan(__scannedData)}>\n                  <Icon name=\"check\" size={20} color={Colors.white} />\n                  <Text style={styles.confirmButtonText}>Use This Code</Text>\n                </TouchableOpacity>\n              </View>\n            </View>\n          </View>\n        ) : null}\n      </View>\n\n      {/* Bottom Controls */}\n      <View style={styles.bottomControls}>\n        {isScanning && (\n          <TouchableOpacity style={styles.manualScanButton} onPress={simulateQRScan}>\n            <Icon name=\"qr-code-scanner\" size={24} color={Colors.white} />\n            <Text style={styles.manualScanText}>Simulate Scan</Text>\n          </TouchableOpacity>\n        )}\n\n        <View style={styles.helpContainer}>\n          <Icon name=\"info-outline\" size={16} color={Colors.lightText} />\n          <Text style={styles.helpText}>Ensure good lighting and hold device steady</Text>\n        </View>\n      </View>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20,\n  },\n  loadingText: {\n    fontSize: 16,\n    color: Colors.text,\n    marginTop: 16,\n    textAlign: 'center',\n  },\n  header: {\n    backgroundColor: Colors.primary,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    height: 70,\n  },\n  backButton: {\n    padding: 8,\n  },\n  headerCenter: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  headerTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: Colors.white,\n  },\n  headerSubtitle: {\n    fontSize: 12,\n    color: 'rgba(255, 255, 255, 0.8)',\n    marginTop: 2,\n  },\n  headerSpacer: {\n    width: 40,\n  },\n  flashButton: {\n    padding: 8,\n  },\n  cameraContainer: {\n    flex: 1,\n    backgroundColor: '#000',\n    justifyContent: 'center',\n    alignItems: 'center',\n    position: 'relative',\n  },\n  scanFrame: {\n    width: 250,\n    height: 250,\n    position: 'relative',\n  },\n  scanFrameCorner: {\n    position: 'absolute',\n    width: 30,\n    height: 30,\n    borderColor: Colors.primary,\n    borderWidth: 3,\n    borderTopWidth: 3,\n    borderLeftWidth: 3,\n    borderRightWidth: 0,\n    borderBottomWidth: 0,\n    top: 0,\n    left: 0,\n  },\n  topRight: {\n    top: 0,\n    right: 0,\n    left: 'auto',\n    borderTopWidth: 3,\n    borderRightWidth: 3,\n    borderLeftWidth: 0,\n    borderBottomWidth: 0,\n  },\n  bottomLeft: {\n    bottom: 0,\n    left: 0,\n    top: 'auto',\n    borderBottomWidth: 3,\n    borderLeftWidth: 3,\n    borderTopWidth: 0,\n    borderRightWidth: 0,\n  },\n  bottomRight: {\n    bottom: 0,\n    right: 0,\n    top: 'auto',\n    left: 'auto',\n    borderBottomWidth: 3,\n    borderRightWidth: 3,\n    borderTopWidth: 0,\n    borderLeftWidth: 0,\n  },\n  scanLine: {\n    position: 'absolute',\n    top: '50%',\n    left: 0,\n    right: 0,\n    height: 2,\n    backgroundColor: Colors.primary,\n    opacity: 0.8,\n  },\n  instructionsContainer: {\n    position: 'absolute',\n    bottom: -80,\n    alignItems: 'center',\n  },\n  instructionsText: {\n    fontSize: 16,\n    color: Colors.white,\n    fontWeight: '600',\n    textAlign: 'center',\n    marginBottom: 8,\n  },\n  instructionsSubtext: {\n    fontSize: 14,\n    color: 'rgba(255, 255, 255, 0.8)',\n    textAlign: 'center',\n  },\n  resultContainer: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: 'rgba(0, 0, 0, 0.8)',\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20,\n  },\n  resultCard: {\n    backgroundColor: Colors.white,\n    borderRadius: 16,\n    padding: 24,\n    alignItems: 'center',\n    maxWidth: '90%',\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 4 },\n    shadowOpacity: 0.3,\n    shadowRadius: 8,\n    elevation: 8,\n  },\n  resultTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.text,\n    marginTop: 16,\n    marginBottom: 8,\n  },\n  resultType: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: Colors.primary,\n    marginBottom: 12,\n  },\n  resultData: {\n    fontSize: 14,\n    color: Colors.darkGray,\n    textAlign: 'center',\n    marginBottom: 24,\n    fontFamily: Platform.OS === 'ios' ? 'Menlo' : 'monospace',\n  },\n  resultActions: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  retryButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    backgroundColor: Colors.background,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: Colors.secondary,\n  },\n  retryButtonText: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: Colors.secondary,\n    marginLeft: 8,\n  },\n  confirmButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    backgroundColor: Colors.primary,\n    borderRadius: 8,\n  },\n  confirmButtonText: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: Colors.white,\n    marginLeft: 8,\n  },\n  bottomControls: {\n    backgroundColor: Colors.primary,\n    paddingHorizontal: 20,\n    paddingVertical: 16,\n    alignItems: 'center',\n  },\n  manualScanButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: 'rgba(255, 255, 255, 0.2)',\n    paddingHorizontal: 20,\n    paddingVertical: 12,\n    borderRadius: 25,\n    marginBottom: 12,\n  },\n  manualScanText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.white,\n    marginLeft: 8,\n  },\n  helpContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n  },\n  helpText: {\n    fontSize: 12,\n    color: 'rgba(255, 255, 255, 0.8)',\n  },\n  permissionContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20,\n  },\n  permissionTitle: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: Colors.text,\n    marginTop: 24,\n    marginBottom: 16,\n    textAlign: 'center',\n  },\n  permissionMessage: {\n    fontSize: 16,\n    color: Colors.darkGray,\n    textAlign: 'center',\n    marginBottom: 24,\n    lineHeight: 24,\n  },\n  featureList: {\n    alignSelf: 'stretch',\n    marginBottom: 32,\n  },\n  featureItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingVertical: 12,\n    paddingHorizontal: 16,\n    backgroundColor: Colors.background,\n    borderRadius: 8,\n    marginBottom: 8,\n  },\n  featureText: {\n    fontSize: 16,\n    color: Colors.text,\n    marginLeft: 12,\n    fontWeight: '500',\n  },\n  permissionButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: Colors.primary,\n    paddingHorizontal: 24,\n    paddingVertical: 16,\n    borderRadius: 12,\n    marginBottom: 12,\n  },\n  permissionButtonText: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: Colors.white,\n    marginLeft: 8,\n  },\n  settingsButton: {\n    paddingHorizontal: 24,\n    paddingVertical: 12,\n  },\n  settingsButtonText: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: Colors.secondary,\n  },\n});\n\nexport default QRScannerScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/settings/APITestScreen.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadTestData'. Either include it or remove the dependency array.","line":40,"column":6,"nodeType":"ArrayExpression","endLine":40,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadTestData]","fix":{"range":[1350,1352],"text":"[loadTestData]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/settings/AppSettingsScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":149,"column":21,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":149,"endColumn":48},{"ruleId":"react/no-unstable-nested-components","severity":1,"message":"Do not define components during render. React will see a new component type on every render and destroy the entire subtree’s DOM nodes and state (https://reactjs.org/docs/reconciliation.html#elements-of-different-types). Instead, move this component definition out of the parent component “AppSettingsScreen” and pass data as props. If you want to allow component creation in props, set allowAsProps option to true.","line":212,"column":33,"nodeType":"ArrowFunctionExpression","endLine":212,"endColumn":72}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  StatusBar,\n  SafeAreaView,\n  TouchableOpacity,\n  FlatList,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation } from '@react-navigation/native';\n\n// Clover POS Color Scheme\nconst Colors = {\n  primary: '#00A651',\n  secondary: '#0066CC',\n  success: '#00A651',\n  warning: '#FF6B35',\n  danger: '#E74C3C',\n  background: '#F5F5F5',\n  white: '#FFFFFF',\n  lightGray: '#E5E5E5',\n  mediumGray: '#999999',\n  darkGray: '#666666',\n  text: '#333333',\n  lightText: '#666666',\n  border: '#DDDDDD',\n};\n\ninterface AppSettingsItem {\n  id: string;\n  title: string;\n  description: string;\n  icon: string;\n  route: string;\n  status?: 'enabled' | 'disabled' | 'warning';\n  isDeveloper?: boolean;\n}\n\nconst AppSettingsScreen: React.FC = () => {\n  const navigation = useNavigation();\n\n  const appSettings: AppSettingsItem[] = [\n    {\n      id: 'menu-management',\n      title: 'Menu Management',\n      description: 'Categories, _items, and modifiers',\n      icon: 'restaurant-menu',\n      route: 'SettingsMenuManagement',\n      status: 'enabled',\n    },\n    {\n      id: 'pricing-discounts',\n      title: 'Pricing & Discounts',\n      description: 'Price rules and promotional codes',\n      icon: 'local-offer',\n      route: 'PricingDiscounts',\n      status: 'enabled',\n    },\n    {\n      id: 'backup-restore',\n      title: 'Backup & Restore',\n      description: 'Cloud sync and local backups',\n      icon: 'backup',\n      route: 'BackupRestore',\n      status: 'warning',\n    },\n    {\n      id: 'data-export',\n      title: 'Data Export',\n      description: 'Export reports and transaction history',\n      icon: 'file-download',\n      route: 'DataExport',\n    },\n    {\n      id: 'system-diagnostics',\n      title: 'System Diagnostics',\n      description: 'App health and performance metrics',\n      icon: 'bug-report',\n      route: 'SystemDiagnostics',\n    },\n    ...(__DEV__\n      ? [\n          {\n            id: 'developer-settings',\n            title: 'Developer Settings',\n            description: 'Mock data, API toggles, and debug options',\n            icon: 'developer-mode',\n            route: 'DeveloperSettings',\n            isDeveloper: _true,\n          },\n        ]\n      : []),\n  ];\n\n  const getStatusColor = (_status?: _string) => {\n    switch (__status) {\n      case 'enabled':\n        return Colors.success;\n      case 'disabled':\n        return Colors.danger;\n      case 'warning':\n        return Colors.warning;\n      default:\n        return Colors.mediumGray;\n    }\n  };\n\n  const getStatusIcon = (_status?: _string) => {\n    switch (__status) {\n      case 'enabled':\n        return 'check-circle';\n      case 'disabled':\n        return 'cancel';\n      case 'warning':\n        return 'warning';\n      default:\n        return null;\n    }\n  };\n\n  const handleSettingPress = (item: _AppSettingsItem) => {\n    navigation.navigate(item.route as never);\n  };\n\n  const renderSettingItem = ({ item }: { item: AppSettingsItem }) => (\n    <TouchableOpacity\n      style={[styles.settingCard, item.isDeveloper && styles.developerCard]}\n      onPress={() => handleSettingPress(__item)}\n      activeOpacity={0.7}>\n      <View\n        style={[\n          styles.settingIcon,\n          { backgroundColor: item.isDeveloper ? `${Colors.warning}15` : `${Colors.darkGray}15` },\n        ]}>\n        <Icon\n          name={item.icon}\n          size={24}\n          color={item.isDeveloper ? Colors.warning : Colors.darkGray}\n        />\n      </View>\n\n      <View style={styles.settingContent}>\n        <View style={styles.settingHeader}>\n          <Text style={styles.settingTitle}>{item.title}</Text>\n          {item.status && getStatusIcon(item.status) && (\n            <Icon\n              name={getStatusIcon(item.status)!}\n              size={16}\n              color={getStatusColor(item.status)}\n            />\n          )}\n        </View>\n        <Text style={styles.settingDescription}>{item.description}</Text>\n        {item.isDeveloper && <Text style={styles.developerBadge}>Development Only</Text>}\n      </View>\n\n      <Icon name=\"chevron-right\" size={24} color={Colors.lightGray} />\n    </TouchableOpacity>\n  );\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <StatusBar backgroundColor={Colors.darkGray} barStyle=\"light-content\" />\n\n      {/* Header */}\n      <View style={styles.header}>\n        <TouchableOpacity\n          style={styles.backButton}\n          onPress={() => navigation.goBack()}\n          testID=\"back-button\">\n          <Icon name=\"arrow-back\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n\n        <View style={styles.headerCenter}>\n          <Text style={styles.headerTitle}>App Configuration</Text>\n          <Text style={styles.headerSubtitle}>Manage app settings and data</Text>\n        </View>\n\n        <TouchableOpacity style={styles.helpButton}>\n          <Icon name=\"help-outline\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n      </View>\n\n      {/* System Status */}\n      <View style={styles.systemStatus}>\n        <View style={styles.statusCard}>\n          <Icon name=\"storage\" size={20} color={Colors.primary} />\n          <Text style={styles.statusLabel}>Storage Used</Text>\n          <Text style={styles.statusValue}>2.3 GB</Text>\n        </View>\n        <View style={styles.statusCard}>\n          <Icon name=\"update\" size={20} color={Colors.secondary} />\n          <Text style={styles.statusLabel}>Last Backup</Text>\n          <Text style={styles.statusValue}>2 hours ago</Text>\n        </View>\n        <View style={styles.statusCard}>\n          <Icon name=\"sync\" size={20} color={Colors.warning} />\n          <Text style={styles.statusLabel}>Sync Status</Text>\n          <Text style={styles.statusValue}>Pending</Text>\n        </View>\n      </View>\n\n      {/* App Settings List */}\n      <FlatList\n        data={appSettings}\n        renderItem={renderSettingItem}\n        keyExtractor={item => item.id}\n        contentContainerStyle={styles.settingsList}\n        showsVerticalScrollIndicator={false}\n        ItemSeparatorComponent={() => <View style={styles.separator} />}\n      />\n\n      {/* Footer Actions */}\n      <View style={styles.footer}>\n        <TouchableOpacity style={styles.footerButton}>\n          <Icon name=\"refresh\" size={20} color={Colors.secondary} />\n          <Text style={styles.footerButtonText}>Refresh Data</Text>\n        </TouchableOpacity>\n        <TouchableOpacity style={styles.footerButton}>\n          <Icon name=\"settings-backup-restore\" size={20} color={Colors.primary} />\n          <Text style={styles.footerButtonText}>Backup Now</Text>\n        </TouchableOpacity>\n      </View>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.darkGray,\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    height: 70,\n  },\n  backButton: {\n    padding: 8,\n  },\n  headerCenter: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  headerTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.white,\n  },\n  headerSubtitle: {\n    fontSize: 12,\n    color: 'rgba(255, 255, 255, 0.8)',\n    marginTop: 2,\n  },\n  helpButton: {\n    padding: 8,\n  },\n  systemStatus: {\n    backgroundColor: Colors.white,\n    flexDirection: 'row',\n    paddingVertical: 16,\n    paddingHorizontal: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  statusCard: {\n    flex: 1,\n    alignItems: 'center',\n    paddingHorizontal: 8,\n  },\n  statusLabel: {\n    fontSize: 12,\n    color: Colors.mediumGray,\n    marginTop: 4,\n    textAlign: 'center',\n  },\n  statusValue: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: Colors.text,\n    marginTop: 2,\n    textAlign: 'center',\n  },\n  settingsList: {\n    padding: 16,\n  },\n  settingCard: {\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    padding: 16,\n    flexDirection: 'row',\n    alignItems: 'center',\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.05,\n    shadowRadius: 4,\n    elevation: 2,\n  },\n  developerCard: {\n    borderWidth: 1,\n    borderColor: Colors.warning,\n    backgroundColor: `${Colors.warning}05`,\n  },\n  settingIcon: {\n    width: 48,\n    height: 48,\n    borderRadius: 12,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginRight: 16,\n  },\n  settingContent: {\n    flex: 1,\n  },\n  settingHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    marginBottom: 4,\n  },\n  settingTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  settingDescription: {\n    fontSize: 14,\n    color: Colors.darkGray,\n    marginBottom: 4,\n  },\n  developerBadge: {\n    fontSize: 12,\n    color: Colors.warning,\n    fontWeight: '500',\n    textTransform: 'uppercase',\n  },\n  separator: {\n    height: 12,\n  },\n  footer: {\n    flexDirection: 'row',\n    backgroundColor: Colors.white,\n    paddingVertical: 16,\n    paddingHorizontal: 16,\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n    gap: 12,\n  },\n  footerButton: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 12,\n    backgroundColor: Colors.background,\n    borderRadius: 8,\n    gap: 8,\n  },\n  footerButtonText: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.secondary,\n  },\n});\n\nexport default AppSettingsScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/settings/BusinessSettingsScreen.tsx","messages":[{"ruleId":"react/no-unstable-nested-components","severity":1,"message":"Do not define components during render. React will see a new component type on every render and destroy the entire subtree’s DOM nodes and state (https://reactjs.org/docs/reconciliation.html#elements-of-different-types). Instead, move this component definition out of the parent component “BusinessSettingsScreen” and pass data as props. If you want to allow component creation in props, set allowAsProps option to true.","line":177,"column":33,"nodeType":"ArrowFunctionExpression","endLine":177,"endColumn":72}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  StatusBar,\n  SafeAreaView,\n  TouchableOpacity,\n  FlatList,\n  Alert,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation } from '@react-navigation/native';\nimport Colors from '../../constants/Colors';\n\ninterface BusinessSettingsItem {\n  id: string;\n  title: string;\n  description: string;\n  icon: string;\n  route: string;\n  status?: 'complete' | 'incomplete' | 'warning';\n}\n\nconst BusinessSettingsScreen: React.FC = () => {\n  const navigation = useNavigation();\n\n  const businessSettings: BusinessSettingsItem[] = [\n    {\n      id: 'restaurant-profile',\n      title: 'Restaurant Profile',\n      description: 'Complete restaurant details and branding settings',\n      icon: 'store',\n      route: 'RestaurantProfile',\n      status: 'complete',\n    },\n    {\n      id: 'business-info',\n      title: 'Business Information',\n      description: 'Company name, _address, and contact details',\n      icon: 'business-center',\n      route: 'BusinessInformation',\n      status: 'incomplete',\n    },\n    {\n      id: 'tax-config',\n      title: 'Tax Configuration',\n      description: 'VAT rates, tax exemptions, and reporting',\n      icon: 'receipt-long',\n      route: 'TaxConfiguration',\n      status: 'warning',\n    },\n    {\n      id: 'bank-details',\n      title: 'Bank Details',\n      description: 'Account information for receiving payments',\n      icon: 'account-balance',\n      route: 'BankDetails',\n      status: 'incomplete',\n    },\n    {\n      id: 'payment-methods-info',\n      title: 'Payment Methods',\n      description: 'Payment processing is managed by the platform',\n      icon: 'lock',\n      route: 'PaymentMethodsInfo',\n      status: 'complete',\n    },\n    {\n      id: 'receipt-custom',\n      title: 'Receipt Customization',\n      description: 'Logo, footer text, and contact information',\n      icon: 'receipt',\n      route: 'ReceiptCustomization',\n    },\n    {\n      id: 'operating-hours',\n      title: 'Operating Hours',\n      description: 'Business hours, _holidays, and special events',\n      icon: 'schedule',\n      route: 'OperatingHours',\n    },\n  ];\n\n  const getStatusColor = (_status?: _string) => {\n    switch (__status) {\n      case 'complete':\n        return Colors.success;\n      case 'incomplete':\n        return Colors.danger;\n      case 'warning':\n        return Colors.warning;\n      default:\n        return Colors.mediumGray;\n    }\n  };\n\n  const getStatusIcon = (_status?: _string) => {\n    switch (__status) {\n      case 'complete':\n        return 'check-circle';\n      case 'incomplete':\n        return 'error';\n      case 'warning':\n        return 'warning';\n      default:\n        return 'radio-button-unchecked';\n    }\n  };\n\n  const handleSettingPress = (item: _BusinessSettingsItem) => {\n    if (item.route === 'PaymentMethodsInfo') {\n      // Show alert instead of navigating\n      Alert.alert(\n        'Payment Methods',\n        'Payment processing is managed by the platform owner. Current supported methods:\\n\\n• Card payments (Chip & PIN, _Contactless)\\n• Apple Pay & Google Pay\\n• Cash transactions\\n• QR Code payments\\n\\nContact platform support for changes or questions.',\n        [{ text: 'OK' }],\n      );\n      return;\n    }\n    navigation.navigate(item.route as never);\n  };\n\n  const renderSettingItem = ({ item }: { item: BusinessSettingsItem }) => (\n    <TouchableOpacity\n      style={styles.settingCard}\n      onPress={() => handleSettingPress(__item)}\n      activeOpacity={0.7}>\n      <View style={[styles.settingIcon, { backgroundColor: `${Colors.primary}15` }]}>\n        <Icon name={item.icon} size={24} color={Colors.primary} />\n      </View>\n\n      <View style={styles.settingContent}>\n        <Text style={styles.settingTitle}>{item.title}</Text>\n        <Text style={styles.settingDescription}>{item.description}</Text>\n      </View>\n\n      <View style={styles.settingStatus}>\n        {item.status && (\n          <Icon name={getStatusIcon(item.status)} size={20} color={getStatusColor(item.status)} />\n        )}\n        <Icon name=\"chevron-right\" size={24} color={Colors.lightGray} />\n      </View>\n    </TouchableOpacity>\n  );\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <StatusBar backgroundColor={Colors.primary} barStyle=\"light-content\" />\n\n      {/* Header */}\n      <View style={styles.header}>\n        <TouchableOpacity\n          style={styles.backButton}\n          onPress={() => navigation.goBack()}\n          testID=\"back-button\">\n          <Icon name=\"arrow-back\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n\n        <View style={styles.headerCenter}>\n          <Text style={styles.headerTitle}>Business Settings</Text>\n          <Text style={styles.headerSubtitle}>Configure your business information</Text>\n        </View>\n\n        <TouchableOpacity style={styles.helpButton}>\n          <Icon name=\"help-outline\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n      </View>\n\n      {/* Business Settings List */}\n      <FlatList\n        data={businessSettings}\n        renderItem={renderSettingItem}\n        keyExtractor={item => item.id}\n        contentContainerStyle={styles.settingsList}\n        showsVerticalScrollIndicator={false}\n        ItemSeparatorComponent={() => <View style={styles.separator} />}\n      />\n\n      {/* Footer Info */}\n      <View style={styles.footer}>\n        <Icon name=\"info-outline\" size={16} color={Colors.mediumGray} />\n        <Text style={styles.footerText}>\n          Complete your business setup to enable all POS features\n        </Text>\n      </View>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.primary,\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    height: 70,\n  },\n  backButton: {\n    padding: 8,\n  },\n  headerCenter: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  headerTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.white,\n  },\n  headerSubtitle: {\n    fontSize: 12,\n    color: 'rgba(255, 255, 255, 0.8)',\n    marginTop: 2,\n  },\n  helpButton: {\n    padding: 8,\n  },\n  settingsList: {\n    padding: 16,\n  },\n  settingCard: {\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    padding: 16,\n    flexDirection: 'row',\n    alignItems: 'center',\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.05,\n    shadowRadius: 4,\n    elevation: 2,\n  },\n  settingIcon: {\n    width: 48,\n    height: 48,\n    borderRadius: 12,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginRight: 16,\n  },\n  settingContent: {\n    flex: 1,\n  },\n  settingTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  settingDescription: {\n    fontSize: 14,\n    color: Colors.darkGray,\n  },\n  settingStatus: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n  },\n  separator: {\n    height: 12,\n  },\n  footer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 16,\n    paddingHorizontal: 16,\n    backgroundColor: Colors.white,\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n    gap: 8,\n  },\n  footerText: {\n    fontSize: 12,\n    color: Colors.mediumGray,\n    textAlign: 'center',\n  },\n});\n\nexport default BusinessSettingsScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/settings/DeveloperSettingsScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_interval' is assigned a value but never used.","line":38,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":38,"endColumn":20}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'dataService'. Either include it or remove the dependency array.","line":44,"column":6,"nodeType":"ArrayExpression","endLine":44,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [dataService]","fix":{"range":[1222,1224],"text":"[dataService]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  SafeAreaView,\n  ScrollView,\n  Switch,\n  TouchableOpacity,\n  Alert,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation } from '@react-navigation/native';\nimport DataService from '../../services/DataService';\n\nconst Colors = {\n  primary: '#00A651',\n  secondary: '#0066CC',\n  success: '#00A651',\n  danger: '#E74C3C',\n  warning: '#FF6B35',\n  background: '#F5F5F5',\n  white: '#FFFFFF',\n  lightGray: '#E5E5E5',\n  darkGray: '#666666',\n  text: '#333333',\n  lightText: '#999999',\n};\n\nconst DeveloperSettingsScreen: React.FC = () => {\n  const navigation = useNavigation();\n  const dataService = DataService.getInstance();\n  const [flags, setFlags] = useState(dataService.getFeatureFlags());\n  const [connectionStatus, setConnectionStatus] = useState(dataService.getConnectionStatus());\n\n  useEffect(() => {\n    // Refresh connection status every 5 seconds\n    const _interval = setInterval(() => {\n      setConnectionStatus(dataService.getConnectionStatus());\n    }, 5000);\n\n    return () => clearInterval(__interval);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const toggleFlag = async (flag: keyof typeof flags) => {\n    const newValue = !flags[flag];\n    await dataService.updateFeatureFlag(__flag, _newValue);\n    setFlags({ ...flags, [flag]: newValue });\n    setConnectionStatus(dataService.getConnectionStatus());\n  };\n\n  const resetToMock = async () => {\n    Alert.alert(\n      'Reset to Mock Data',\n      'This will disable all real API connections and use mock data. Continue?',\n      [\n        { text: 'Cancel', style: 'cancel' },\n        {\n          text: 'Reset',\n          style: 'destructive',\n          onPress: async () => {\n            await dataService.resetToMockData();\n            setFlags(dataService.getFeatureFlags());\n            Alert.alert('Success', 'Reset to mock data mode');\n          },\n        },\n      ],\n    );\n  };\n\n  const enableRealAPI = async () => {\n    Alert.alert(\n      'Enable Real API',\n      'This will attempt to connect to the backend server. Make sure the server is running. Continue?',\n      [\n        { text: 'Cancel', style: 'cancel' },\n        {\n          text: 'Enable',\n          onPress: async () => {\n            await dataService.enableRealAPI();\n            setFlags(dataService.getFeatureFlags());\n            setConnectionStatus(dataService.getConnectionStatus());\n\n            if (!connectionStatus.backend) {\n              Alert.alert('Warning', 'Backend server is not available. Falling back to mock data.');\n            }\n          },\n        },\n      ],\n    );\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <View style={styles.header}>\n        <TouchableOpacity style={styles.backButton} onPress={() => navigation.goBack()}>\n          <Icon name=\"arrow-back\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n        <Text style={styles.headerTitle}>Developer Settings</Text>\n        <View style={styles.headerRight} />\n      </View>\n\n      <ScrollView style={styles.content}>\n        {/* Connection Status */}\n        <View style={styles.statusCard}>\n          <Text style={styles.sectionTitle}>Connection Status</Text>\n          <View style={styles.statusRow}>\n            <Text style={styles.statusLabel}>Data Mode:</Text>\n            <View\n              style={[\n                styles.statusBadge,\n                {\n                  backgroundColor:\n                    connectionStatus.mode === 'REAL' ? Colors.success : Colors.warning,\n                },\n              ]}>\n              <Text style={styles.statusBadgeText}>{connectionStatus.mode}</Text>\n            </View>\n          </View>\n          <View style={styles.statusRow}>\n            <Text style={styles.statusLabel}>Backend Available:</Text>\n            <View\n              style={[\n                styles.statusBadge,\n                { backgroundColor: connectionStatus.backend ? Colors.success : Colors.danger },\n              ]}>\n              <Text style={styles.statusBadgeText}>\n                {connectionStatus.backend ? 'ONLINE' : 'OFFLINE'}\n              </Text>\n            </View>\n          </View>\n          <Text style={styles.statusHint}>\n            {connectionStatus.backend\n              ? 'Backend server is running at http://localhost:8000'\n              : 'Backend server is not available. Using mock data.'}\n          </Text>\n        </View>\n\n        {/* Feature Flags */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Feature Flags</Text>\n\n          <View style={styles.settingRow}>\n            <View style={styles.settingInfo}>\n              <Text style={styles.settingLabel}>Use Real API</Text>\n              <Text style={styles.settingDescription}>\n                Connect to backend server instead of mock data\n              </Text>\n            </View>\n            <Switch\n              value={flags.USE_REAL_API}\n              onValueChange={() => toggleFlag('USE_REAL_API')}\n              trackColor={{ false: Colors.lightGray, true: Colors.success }}\n              thumbColor={Colors.white}\n            />\n          </View>\n\n          <View style={styles.settingRow}>\n            <View style={styles.settingInfo}>\n              <Text style={styles.settingLabel}>Enable Payments</Text>\n              <Text style={styles.settingDescription}>\n                Process real payments (requires payment SDK)\n              </Text>\n            </View>\n            <Switch\n              value={flags.ENABLE_PAYMENTS}\n              onValueChange={() => toggleFlag('ENABLE_PAYMENTS')}\n              trackColor={{ false: Colors.lightGray, true: Colors.success }}\n              thumbColor={Colors.white}\n            />\n          </View>\n\n          <View style={styles.settingRow}>\n            <View style={styles.settingInfo}>\n              <Text style={styles.settingLabel}>Enable Hardware</Text>\n              <Text style={styles.settingDescription}>\n                Connect to printers, cash drawers, scanners\n              </Text>\n            </View>\n            <Switch\n              value={flags.ENABLE_HARDWARE}\n              onValueChange={() => toggleFlag('ENABLE_HARDWARE')}\n              trackColor={{ false: Colors.lightGray, true: Colors.success }}\n              thumbColor={Colors.white}\n            />\n          </View>\n\n          <View style={styles.settingRow}>\n            <View style={styles.settingInfo}>\n              <Text style={styles.settingLabel}>Mock Authentication</Text>\n              <Text style={styles.settingDescription}>\n                Use demo accounts (demo/demo, manager/manager)\n              </Text>\n            </View>\n            <Switch\n              value={flags.MOCK_AUTHENTICATION}\n              onValueChange={() => toggleFlag('MOCK_AUTHENTICATION')}\n              trackColor={{ false: Colors.lightGray, true: Colors.success }}\n              thumbColor={Colors.white}\n            />\n          </View>\n        </View>\n\n        {/* Quick Actions */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Quick Actions</Text>\n\n          <TouchableOpacity\n            style={[styles.actionButton, { backgroundColor: Colors.warning }]}\n            onPress={resetToMock}>\n            <Icon name=\"refresh\" size={20} color={Colors.white} />\n            <Text style={styles.actionButtonText}>Reset to Mock Data</Text>\n          </TouchableOpacity>\n\n          <TouchableOpacity\n            style={[styles.actionButton, { backgroundColor: Colors.success }]}\n            onPress={enableRealAPI}>\n            <Icon name=\"cloud-upload\" size={20} color={Colors.white} />\n            <Text style={styles.actionButtonText}>Enable Real API</Text>\n          </TouchableOpacity>\n        </View>\n\n        {/* Info */}\n        <View style={styles.infoCard}>\n          <Icon name=\"info\" size={24} color={Colors.secondary} />\n          <Text style={styles.infoText}>\n            Developer settings allow you to switch between mock data (for demos) and real API\n            connections. Changes take effect immediately. Mock data provides a beautiful showcase\n            experience, while real API connects to your backend server.\n          </Text>\n        </View>\n      </ScrollView>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.primary,\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 16,\n    paddingVertical: 16,\n  },\n  backButton: {\n    padding: 8,\n    marginRight: 8,\n  },\n  headerTitle: {\n    flex: 1,\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.white,\n  },\n  headerRight: {\n    width: 40,\n  },\n  content: {\n    flex: 1,\n    padding: 16,\n  },\n  statusCard: {\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 16,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.05,\n    shadowRadius: 4,\n    elevation: 2,\n  },\n  statusRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    marginBottom: 12,\n  },\n  statusLabel: {\n    fontSize: 16,\n    color: Colors.text,\n  },\n  statusBadge: {\n    paddingHorizontal: 12,\n    paddingVertical: 6,\n    borderRadius: 16,\n  },\n  statusBadgeText: {\n    fontSize: 12,\n    fontWeight: 'bold',\n    color: Colors.white,\n  },\n  statusHint: {\n    fontSize: 14,\n    color: Colors.lightText,\n    fontStyle: 'italic',\n  },\n  section: {\n    marginBottom: 24,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: Colors.text,\n    marginBottom: 16,\n  },\n  settingRow: {\n    backgroundColor: Colors.white,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    padding: 16,\n    borderRadius: 12,\n    marginBottom: 12,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.05,\n    shadowRadius: 4,\n    elevation: 2,\n  },\n  settingInfo: {\n    flex: 1,\n    marginRight: 16,\n  },\n  settingLabel: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  settingDescription: {\n    fontSize: 14,\n    color: Colors.lightText,\n  },\n  actionButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 16,\n    borderRadius: 12,\n    marginBottom: 12,\n  },\n  actionButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.white,\n    marginLeft: 8,\n  },\n  infoCard: {\n    backgroundColor: '#E3F2FD',\n    flexDirection: 'row',\n    padding: 16,\n    borderRadius: 12,\n    marginTop: 8,\n  },\n  infoText: {\n    flex: 1,\n    fontSize: 14,\n    color: Colors.secondary,\n    marginLeft: 12,\n    lineHeight: 20,\n  },\n});\n\nexport default DeveloperSettingsScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/settings/HardwareSettingsScreen.tsx","messages":[{"ruleId":"react/no-unstable-nested-components","severity":1,"message":"Do not define components during render. React will see a new component type on every render and destroy the entire subtree’s DOM nodes and state (https://reactjs.org/docs/reconciliation.html#elements-of-different-types). Instead, move this component definition out of the parent component “HardwareSettingsScreen” and pass data as props. If you want to allow component creation in props, set allowAsProps option to true.","line":200,"column":33,"nodeType":"ArrowFunctionExpression","endLine":200,"endColumn":72}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  StatusBar,\n  SafeAreaView,\n  TouchableOpacity,\n  FlatList,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation } from '@react-navigation/native';\n\n// Clover POS Color Scheme\nconst Colors = {\n  primary: '#00A651',\n  secondary: '#0066CC',\n  success: '#00A651',\n  warning: '#FF6B35',\n  danger: '#E74C3C',\n  background: '#F5F5F5',\n  white: '#FFFFFF',\n  lightGray: '#E5E5E5',\n  mediumGray: '#999999',\n  darkGray: '#666666',\n  text: '#333333',\n  lightText: '#666666',\n  border: '#DDDDDD',\n};\n\ninterface HardwareSettingsItem {\n  id: string;\n  title: string;\n  description: string;\n  icon: string;\n  route: string;\n  status?: 'connected' | 'disconnected' | 'warning';\n  connectionInfo?: string;\n}\n\nconst HardwareSettingsScreen: React.FC = () => {\n  const navigation = useNavigation();\n\n  const hardwareSettings: HardwareSettingsItem[] = [\n    {\n      id: 'printer-setup',\n      title: 'Printer Setup',\n      description: 'Receipt and kitchen printer configuration',\n      icon: 'print',\n      route: 'PrinterSetup',\n      status: 'connected',\n      connectionInfo: 'Epson TM-T88V connected',\n    },\n    {\n      id: 'cash-drawer',\n      title: 'Cash Drawer',\n      description: 'Drawer kick settings and security',\n      icon: 'inventory-2',\n      route: 'CashDrawer',\n      status: 'connected',\n      connectionInfo: 'Connected via printer',\n    },\n    {\n      id: 'barcode-scanner',\n      title: 'Barcode Scanner',\n      description: 'Scanner configuration and test scans',\n      icon: 'qr-code-scanner',\n      route: 'BarcodeScanner',\n      status: 'warning',\n      connectionInfo: 'USB scanner detected',\n    },\n    {\n      id: 'card-reader',\n      title: 'Card Reader',\n      description: 'Payment terminal setup and testing',\n      icon: 'credit-card',\n      route: 'CardReader',\n      status: 'disconnected',\n      connectionInfo: 'No card reader detected',\n    },\n    {\n      id: 'hardware-diagnostics',\n      title: 'Hardware Diagnostics',\n      description: 'Device connectivity and status monitoring',\n      icon: 'computer',\n      route: 'HardwareDiagnostics',\n    },\n  ];\n\n  const getStatusColor = (_status?: _string) => {\n    switch (__status) {\n      case 'connected':\n        return Colors.success;\n      case 'disconnected':\n        return Colors.danger;\n      case 'warning':\n        return Colors.warning;\n      default:\n        return Colors.mediumGray;\n    }\n  };\n\n  const getStatusIcon = (_status?: _string) => {\n    switch (__status) {\n      case 'connected':\n        return 'wifi';\n      case 'disconnected':\n        return 'wifi-off';\n      case 'warning':\n        return 'warning';\n      default:\n        return 'help-outline';\n    }\n  };\n\n  const handleSettingPress = (item: _HardwareSettingsItem) => {\n    navigation.navigate(item.route as never);\n  };\n\n  const renderSettingItem = ({ item }: { item: HardwareSettingsItem }) => (\n    <TouchableOpacity\n      style={styles.settingCard}\n      onPress={() => handleSettingPress(__item)}\n      activeOpacity={0.7}>\n      <View style={[styles.settingIcon, { backgroundColor: `${Colors.secondary}15` }]}>\n        <Icon name={item.icon} size={24} color={Colors.secondary} />\n      </View>\n\n      <View style={styles.settingContent}>\n        <View style={styles.settingHeader}>\n          <Text style={styles.settingTitle}>{item.title}</Text>\n          {item.status && (\n            <View style={styles.statusIndicator}>\n              <Icon\n                name={getStatusIcon(item.status)}\n                size={16}\n                color={getStatusColor(item.status)}\n              />\n            </View>\n          )}\n        </View>\n        <Text style={styles.settingDescription}>{item.description}</Text>\n        {item.connectionInfo && (\n          <Text style={[styles.connectionInfo, { color: getStatusColor(item.status) }]}>\n            {item.connectionInfo}\n          </Text>\n        )}\n      </View>\n\n      <Icon name=\"chevron-right\" size={24} color={Colors.lightGray} />\n    </TouchableOpacity>\n  );\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <StatusBar backgroundColor={Colors.secondary} barStyle=\"light-content\" />\n\n      {/* Header */}\n      <View style={styles.header}>\n        <TouchableOpacity\n          style={styles.backButton}\n          onPress={() => navigation.goBack()}\n          testID=\"back-button\">\n          <Icon name=\"arrow-back\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n\n        <View style={styles.headerCenter}>\n          <Text style={styles.headerTitle}>Hardware Configuration</Text>\n          <Text style={styles.headerSubtitle}>Manage connected devices</Text>\n        </View>\n\n        <TouchableOpacity style={styles.helpButton}>\n          <Icon name=\"help-outline\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n      </View>\n\n      {/* Hardware Status Summary */}\n      <View style={styles.statusSummary}>\n        <View style={styles.statusItem}>\n          <Icon name=\"check-circle\" size={16} color={Colors.success} />\n          <Text style={styles.statusText}>2 Connected</Text>\n        </View>\n        <View style={styles.statusItem}>\n          <Icon name=\"warning\" size={16} color={Colors.warning} />\n          <Text style={styles.statusText}>1 Warning</Text>\n        </View>\n        <View style={styles.statusItem}>\n          <Icon name=\"error\" size={16} color={Colors.danger} />\n          <Text style={styles.statusText}>1 Disconnected</Text>\n        </View>\n      </View>\n\n      {/* Hardware Settings List */}\n      <FlatList\n        data={hardwareSettings}\n        renderItem={renderSettingItem}\n        keyExtractor={item => item.id}\n        contentContainerStyle={styles.settingsList}\n        showsVerticalScrollIndicator={false}\n        ItemSeparatorComponent={() => <View style={styles.separator} />}\n      />\n\n      {/* Footer Actions */}\n      <View style={styles.footer}>\n        <TouchableOpacity style={styles.footerButton}>\n          <Icon name=\"refresh\" size={20} color={Colors.secondary} />\n          <Text style={styles.footerButtonText}>Scan for Devices</Text>\n        </TouchableOpacity>\n        <TouchableOpacity style={styles.footerButton}>\n          <Icon name=\"computer\" size={20} color={Colors.secondary} />\n          <Text style={styles.footerButtonText}>Run Diagnostics</Text>\n        </TouchableOpacity>\n      </View>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.secondary,\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    height: 70,\n  },\n  backButton: {\n    padding: 8,\n  },\n  headerCenter: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  headerTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.white,\n  },\n  headerSubtitle: {\n    fontSize: 12,\n    color: 'rgba(255, 255, 255, 0.8)',\n    marginTop: 2,\n  },\n  helpButton: {\n    padding: 8,\n  },\n  statusSummary: {\n    backgroundColor: Colors.white,\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    paddingVertical: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  statusItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 6,\n  },\n  statusText: {\n    fontSize: 12,\n    color: Colors.darkGray,\n    fontWeight: '500',\n  },\n  settingsList: {\n    padding: 16,\n  },\n  settingCard: {\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    padding: 16,\n    flexDirection: 'row',\n    alignItems: 'center',\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.05,\n    shadowRadius: 4,\n    elevation: 2,\n  },\n  settingIcon: {\n    width: 48,\n    height: 48,\n    borderRadius: 12,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginRight: 16,\n  },\n  settingContent: {\n    flex: 1,\n  },\n  settingHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    marginBottom: 4,\n  },\n  settingTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  statusIndicator: {\n    width: 20,\n    height: 20,\n    borderRadius: 10,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  settingDescription: {\n    fontSize: 14,\n    color: Colors.darkGray,\n    marginBottom: 4,\n  },\n  connectionInfo: {\n    fontSize: 12,\n    fontWeight: '500',\n  },\n  separator: {\n    height: 12,\n  },\n  footer: {\n    flexDirection: 'row',\n    backgroundColor: Colors.white,\n    paddingVertical: 16,\n    paddingHorizontal: 16,\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n    gap: 12,\n  },\n  footerButton: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 12,\n    backgroundColor: Colors.background,\n    borderRadius: 8,\n    gap: 8,\n  },\n  footerButtonText: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.secondary,\n  },\n});\n\nexport default HardwareSettingsScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/settings/PaymentProviderSettingsScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_loading' is assigned a value but never used.","line":58,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":58,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_savedConfig' is assigned a value but never used.","line":66,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":66,"endColumn":25},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":70,"column":23,"nodeType":"BlockStatement","messageId":"unexpected","endLine":71,"endColumn":6,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[1647,1652],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":104,"column":11,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":106,"endColumn":14}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  ScrollView,\n  TextInput,\n  Alert,\n  Switch,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation } from '@react-navigation/native';\nimport PaymentService, { PaymentProviderConfig } from '../../services/PaymentService';\n\nconst Colors = {\n  primary: '#00A651',\n  secondary: '#0066CC',\n  success: '#00A651',\n  warning: '#FF6B35',\n  danger: '#E74C3C',\n  background: '#F5F5F5',\n  white: '#FFFFFF',\n  lightGray: '#E5E5E5',\n  mediumGray: '#999999',\n  darkGray: '#666666',\n  text: '#333333',\n  lightText: '#666666',\n  border: '#DDDDDD',\n};\n\nconst PaymentProviderSettingsScreen: React.FC = () => {\n  const navigation = useNavigation();\n  const [config, setConfig] = useState<PaymentProviderConfig>({\n    stripe: {\n      publishableKey: '',\n      merchantId: 'merchant.fynlo.pos',\n    },\n    square: {\n      applicationId: '',\n      locationId: '',\n    },\n    sumup: {\n      affiliateKey: '',\n    },\n    backend: {\n      baseUrl: 'http://localhost:8000',\n      apiKey: '',\n    },\n  });\n  const [enabledProviders, setEnabledProviders] = useState({\n    stripe: _true,\n    square: _false,\n    sumup: _true, // ENABLED for staging testing\n    qrCode: _true,\n    cash: _true,\n  });\n  const [_loading, setLoading] = useState(__true);\n\n  useEffect(() => {\n    loadConfiguration();\n  }, []);\n\n  const loadConfiguration = async () => {\n    try {\n      const _savedConfig = await PaymentService.loadConfig();\n      if (__savedConfig) {\n        setConfig(__savedConfig);\n      }\n    } catch (__error) {\n    } finally {\n      setLoading(__false);\n    }\n  };\n\n  const saveConfiguration = async () => {\n    try {\n      await PaymentService.saveConfig(__config);\n      Alert.alert('Success', 'Payment provider configuration saved successfully');\n    } catch (__error) {\n      Alert.alert('Error', 'Failed to save configuration');\n    }\n  };\n\n  const testConnection = async (provider: _string) => {\n    try {\n      // Test the connection based on provider\n      switch (__provider) {\n        case 'stripe':\n          if (!config.stripe.publishableKey) {\n            Alert.alert('Error', 'Please enter Stripe publishable key');\n            return;\n          }\n          // TODO: Test Stripe connection\n          Alert.alert('Test Result', 'Stripe connection test would be performed here');\n          break;\n\n        case 'backend':\n          if (!config.backend.baseUrl || !config.backend.apiKey) {\n            Alert.alert('Error', 'Please enter backend URL and API key');\n            return;\n          }\n          // Test backend connection\n          const response = await fetch(`${config.backend.baseUrl}/api/v1/health`, {\n            headers: { Authorization: `Bearer ${config.backend.apiKey}` },\n          });\n\n          if (response.ok) {\n            Alert.alert('Success', 'Backend connection successful');\n          } else {\n            Alert.alert('Error', 'Backend connection failed');\n          }\n          break;\n\n        default:\n          Alert.alert('Info', `${provider} connection test not implemented`);\n      }\n    } catch (__error) {\n      Alert.alert('Error', `Failed to test ${provider} connection`);\n    }\n  };\n\n  const renderProviderCard = (\n    title: _string,\n    provider: keyof typeof enabledProviders,\n    icon: _string,\n    children: React.ReactNode,\n  ) => (\n    <View style={styles.providerCard}>\n      <View style={styles.providerHeader}>\n        <View style={styles.providerTitleContainer}>\n          <Icon name={icon} size={24} color={Colors.primary} />\n          <Text style={styles.providerTitle}>{title}</Text>\n        </View>\n        <Switch\n          value={enabledProviders[provider]}\n          onValueChange={value => setEnabledProviders(prev => ({ ...prev, [provider]: value }))}\n          trackColor={{ false: Colors.lightGray, true: Colors.primary }}\n          thumbColor={enabledProviders[provider] ? Colors.white : Colors.mediumGray}\n        />\n      </View>\n      {enabledProviders[provider] && <View style={styles.providerContent}>{children}</View>}\n    </View>\n  );\n\n  if (__loading) {\n    return (\n      <View style={[styles.container, styles.centered]}>\n        <Text>Loading configuration...</Text>\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      {/* Header */}\n      <View style={styles.header}>\n        <TouchableOpacity onPress={() => navigation.goBack()} style={styles.backButton}>\n          <Icon name=\"arrow-back\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n        <Text style={styles.headerTitle}>Payment Providers</Text>\n        <TouchableOpacity onPress={saveConfiguration} style={styles.saveButton}>\n          <Icon name=\"save\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n      </View>\n\n      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n        {/* Backend Configuration */}\n        {renderProviderCard(\n          'Backend API',\n          'qrCode',\n          'api',\n          <>\n            <View style={styles.inputGroup}>\n              <Text style={styles.inputLabel}>Backend URL</Text>\n              <TextInput\n                style={styles.input}\n                value={config.backend.baseUrl}\n                onChangeText={text =>\n                  setConfig(prev => ({ ...prev, backend: { ...prev.backend, baseUrl: text } }))\n                }\n                placeholder=\"http://localhost:8000\"\n                autoCapitalize=\"none\"\n              />\n            </View>\n            <View style={styles.inputGroup}>\n              <Text style={styles.inputLabel}>API Key</Text>\n              <TextInput\n                style={styles.input}\n                value={config.backend.apiKey}\n                onChangeText={text =>\n                  setConfig(prev => ({ ...prev, backend: { ...prev.backend, apiKey: text } }))\n                }\n                placeholder=\"Enter your API key\"\n                secureTextEntry\n                autoCapitalize=\"none\"\n              />\n            </View>\n            <TouchableOpacity style={styles.testButton} onPress={() => testConnection('backend')}>\n              <Icon name=\"wifi\" size={20} color={Colors.white} />\n              <Text style={styles.testButtonText}>Test Connection</Text>\n            </TouchableOpacity>\n          </>,\n        )}\n\n        {/* Stripe Configuration */}\n        {renderProviderCard(\n          'Stripe',\n          'stripe',\n          'credit-card',\n          <>\n            <View style={styles.feeInfo}>\n              <Text style={styles.feeText}>Fee: 1.4% + 20p per transaction</Text>\n            </View>\n            <View style={styles.inputGroup}>\n              <Text style={styles.inputLabel}>Publishable Key</Text>\n              <TextInput\n                style={styles.input}\n                value={config.stripe.publishableKey}\n                onChangeText={text =>\n                  setConfig(prev => ({ ...prev, stripe: { ...prev.stripe, publishableKey: text } }))\n                }\n                placeholder=\"pk_test_...\"\n                autoCapitalize=\"none\"\n              />\n            </View>\n            <View style={styles.inputGroup}>\n              <Text style={styles.inputLabel}>Merchant ID</Text>\n              <TextInput\n                style={styles.input}\n                value={config.stripe.merchantId}\n                onChangeText={text =>\n                  setConfig(prev => ({ ...prev, stripe: { ...prev.stripe, merchantId: text } }))\n                }\n                placeholder=\"merchant.your.app\"\n                autoCapitalize=\"none\"\n              />\n            </View>\n            <TouchableOpacity style={styles.testButton} onPress={() => testConnection('stripe')}>\n              <Icon name=\"payment\" size={20} color={Colors.white} />\n              <Text style={styles.testButtonText}>Test Stripe</Text>\n            </TouchableOpacity>\n          </>,\n        )}\n\n        {/* Square Configuration */}\n        {renderProviderCard(\n          'Square',\n          'square',\n          'contactless-payment',\n          <>\n            <View style={styles.feeInfo}>\n              <Text style={styles.feeText}>Fee: 1.75% per transaction</Text>\n            </View>\n            <View style={styles.sdkWarning}>\n              <Icon name=\"warning\" size={20} color={Colors.warning} />\n              <Text style={styles.warningText}>Square SDK not available in current build</Text>\n            </View>\n            <View style={styles.inputGroup}>\n              <Text style={styles.inputLabel}>Application ID</Text>\n              <TextInput\n                style={styles.input}\n                value={config.square.applicationId}\n                onChangeText={text =>\n                  setConfig(prev => ({ ...prev, square: { ...prev.square, applicationId: text } }))\n                }\n                placeholder=\"sandbox-sq0idb-...\"\n                autoCapitalize=\"none\"\n              />\n            </View>\n            <View style={styles.inputGroup}>\n              <Text style={styles.inputLabel}>Location ID</Text>\n              <TextInput\n                style={styles.input}\n                value={config.square.locationId}\n                onChangeText={text =>\n                  setConfig(prev => ({ ...prev, square: { ...prev.square, locationId: text } }))\n                }\n                placeholder=\"Location ID\"\n                autoCapitalize=\"none\"\n              />\n            </View>\n          </>,\n        )}\n\n        {/* SumUp Configuration */}\n        {renderProviderCard(\n          'SumUp',\n          'sumup',\n          'point-of-sale',\n          <>\n            <View style={styles.feeInfo}>\n              <Text style={styles.feeText}>Fee: 0.69% + £19/month (high volume)</Text>\n              <Text style={styles.feeSubtext}>Optimal for £2,714+/month volume</Text>\n            </View>\n            <View style={styles.sdkWarning}>\n              <Icon name=\"warning\" size={20} color={Colors.warning} />\n              <Text style={styles.warningText}>\n                SumUp SDK requires direct integration with SumUp\n              </Text>\n            </View>\n            <View style={styles.inputGroup}>\n              <Text style={styles.inputLabel}>Affiliate Key</Text>\n              <TextInput\n                style={styles.input}\n                value={config.sumup.affiliateKey}\n                onChangeText={text =>\n                  setConfig(prev => ({ ...prev, sumup: { ...prev.sumup, affiliateKey: text } }))\n                }\n                placeholder=\"Your SumUp affiliate key\"\n                autoCapitalize=\"none\"\n              />\n            </View>\n          </>,\n        )}\n\n        {/* QR Code Payments */}\n        {renderProviderCard(\n          'QR Code Payments',\n          'qrCode',\n          'qr-code',\n          <View style={styles.feeInfo}>\n            <Text style={styles.feeText}>Fee: 1.2% per transaction</Text>\n            <Text style={styles.feeSubtext}>Lowest fees, processed via backend</Text>\n          </View>,\n        )}\n\n        {/* Cash Payments */}\n        {renderProviderCard(\n          'Cash Payments',\n          'cash',\n          'payments',\n          <View style={styles.feeInfo}>\n            <Text style={styles.feeText}>No processing fees</Text>\n            <Text style={styles.feeSubtext}>Manual cash handling required</Text>\n          </View>,\n        )}\n\n        {/* Cost Optimization Info */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Smart Routing</Text>\n          <Text style={styles.sectionText}>\n            The system automatically selects the most cost-effective payment provider based on\n            transaction amount and your monthly volume:\n          </Text>\n          <View style={styles.optimizationList}>\n            <Text style={styles.optimizationItem}>\n              • SumUp: Best for high volume (£2,714+/month)\n            </Text>\n            <Text style={styles.optimizationItem}>• QR Payments: Good balance at 1.2%</Text>\n            <Text style={styles.optimizationItem}>• Stripe: Reliable with 1.4% + 20p</Text>\n            <Text style={styles.optimizationItem}>• Square: Standard 1.75% rate</Text>\n          </View>\n        </View>\n      </ScrollView>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  centered: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  header: {\n    backgroundColor: Colors.primary,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    paddingTop: 48,\n  },\n  backButton: {\n    padding: 8,\n  },\n  headerTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.white,\n  },\n  saveButton: {\n    padding: 8,\n  },\n  content: {\n    flex: 1,\n    padding: 16,\n  },\n  providerCard: {\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    marginBottom: 16,\n    overflow: 'hidden',\n  },\n  providerHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.lightGray,\n  },\n  providerTitleContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  providerTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n    marginLeft: 12,\n  },\n  providerContent: {\n    padding: 16,\n  },\n  feeInfo: {\n    backgroundColor: Colors.background,\n    borderRadius: 8,\n    padding: 12,\n    marginBottom: 16,\n  },\n  feeText: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.primary,\n  },\n  feeSubtext: {\n    fontSize: 12,\n    color: Colors.lightText,\n    marginTop: 4,\n  },\n  sdkWarning: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: '#FFF3E0',\n    borderRadius: 8,\n    padding: 12,\n    marginBottom: 16,\n  },\n  warningText: {\n    fontSize: 14,\n    color: Colors.warning,\n    marginLeft: 8,\n    flex: 1,\n  },\n  inputGroup: {\n    marginBottom: 16,\n  },\n  inputLabel: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.text,\n    marginBottom: 8,\n  },\n  input: {\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 8,\n    paddingHorizontal: 12,\n    paddingVertical: 12,\n    fontSize: 16,\n    color: Colors.text,\n    backgroundColor: Colors.white,\n  },\n  testButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: Colors.secondary,\n    borderRadius: 8,\n    paddingVertical: 12,\n    paddingHorizontal: 16,\n    marginTop: 8,\n  },\n  testButtonText: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: Colors.white,\n    marginLeft: 8,\n  },\n  section: {\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 16,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 12,\n  },\n  sectionText: {\n    fontSize: 14,\n    color: Colors.lightText,\n    lineHeight: 20,\n    marginBottom: 12,\n  },\n  optimizationList: {\n    paddingLeft: 8,\n  },\n  optimizationItem: {\n    fontSize: 14,\n    color: Colors.text,\n    marginBottom: 6,\n  },\n});\n\nexport default PaymentProviderSettingsScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/settings/RecipeFormScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_editingIngredientIndex' is assigned a value but never used.","line":142,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":142,"endColumn":33},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { color: '#FF3B30' }","line":287,"column":24,"nodeType":"ObjectExpression","endLine":287,"endColumn":44}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  View,\n  Text,\n  TextInput,\n  FlatList,\n  TouchableOpacity,\n  StyleSheet,\n  Alert,\n  ScrollView,\n  ActivityIndicator,\n} from 'react-native';\nimport { useNavigation, RouteProp } from '@react-navigation/native';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n// import { Icon } from 'react-native-elements'; // Or your preferred icon library\n\n// import { Product, _InventoryItem, Recipe, RecipeIngredient } from '../../types'; // Assuming these types exist\nimport DatabaseService from '../../services/DatabaseService'; // Using DatabaseService instead\n\n// Placeholder types (replace with actual types from '../../types')\ninterface Product {\n  id: string; // UUID\n  name: string;\n  // Add other relevant product fields if needed for selection\n}\ninterface InventoryItem {\n  sku: string;\n  name: string;\n  unit: string; // e.g., 'grams', 'ml'\n}\ninterface RecipeIngredient {\n  ingredient_sku: string;\n  qty_g: number;\n  ingredient_name?: string; // For display\n}\ninterface Recipe {\n  item_id: string; // Product ID (__UUID)\n  item_name?: string; // Product name\n  ingredients: RecipeIngredient[];\n}\ntype RecipeFormScreenRouteProp = RouteProp<{ params: { recipe?: Recipe } }, 'params'>;\n// End placeholder types\n\n// Mock SelectIngredientModal and FormFieldNumber until actual components are found/created\nconst SelectProductModal = ({ isVisible, _onClose, products, onSelectProduct }) => {\n  if (!isVisible) {\n    return null;\n  }\n  return (\n    <View style={styles.modalOverlay}>\n      <View style={styles.modalContainer}>\n        <Text style={styles.modalTitle}>Select Product</Text>\n        <FlatList\n          data={products}\n          keyExtractor={item => item.id}\n          renderItem={({ item }) => (\n            <TouchableOpacity\n              style={styles.modalItem}\n              onPress={() => {\n                onSelectProduct(__item);\n                onClose();\n              }}>\n              <Text>{item.name}</Text>\n            </TouchableOpacity>\n          )}\n        />\n        <TouchableOpacity style={styles.modalCloseButton} onPress={onClose}>\n          <Text>Close</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n};\n\nconst SelectIngredientModal = ({ isVisible, _onClose, inventoryItems, onSelectIngredient }) => {\n  if (!isVisible) {\n    return null;\n  }\n  return (\n    <View style={styles.modalOverlay}>\n      <View style={styles.modalContainer}>\n        <Text style={styles.modalTitle}>Select Ingredient</Text>\n        <FlatList\n          data={inventoryItems}\n          keyExtractor={item => item.sku}\n          renderItem={({ item }) => (\n            <TouchableOpacity\n              style={styles.modalItem}\n              onPress={() => {\n                onSelectIngredient(__item);\n                onClose();\n              }}>\n              <Text>\n                {item.name} ({item.sku})\n              </Text>\n            </TouchableOpacity>\n          )}\n        />\n        <TouchableOpacity style={styles.modalCloseButton} onPress={onClose}>\n          <Text>Close</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n};\n\nconst FormFieldNumber = ({\n  label,\n  value,\n  onChangeText,\n  placeholder,\n  keyboardType = 'default',\n  error,\n}) => (\n  <View style={styles.fieldContainer}>\n    <Text style={styles.label}>{label}</Text>\n    <TextInput\n      style={[styles.input, error ? styles.inputError : null]}\n      value={value}\n      onChangeText={onChangeText}\n      placeholder={placeholder}\n      keyboardType={keyboardType}\n    />\n    {error && <Text style={styles.errorText}>{error}</Text>}\n  </View>\n);\n// End Mock Components\n\nconst RecipeFormScreen = () => {\n  const navigation = useNavigation();\n  const route = useRoute<RecipeFormScreenRouteProp>();\n  const insets = useSafeAreaInsets();\n  const existingRecipe = route.params?.recipe;\n\n  const [selectedProduct, setSelectedProduct] = useState<Product | null>(__null);\n  const [ingredients, setIngredients] = useState<RecipeIngredient[]>([]);\n  const [products, setProducts] = useState<Product[]>([]);\n  const [inventoryItems, setInventoryItems] = useState<InventoryItem[]>([]);\n\n  const [isProductModalVisible, setIsProductModalVisible] = useState(__false);\n  const [isIngredientModalVisible, setIsIngredientModalVisible] = useState(__false);\n  const [_editingIngredientIndex, setEditingIngredientIndex] = useState<number | null>(__null);\n\n  const [isLoading, setIsLoading] = useState(__false);\n  const [formErrors, setFormErrors] = useState<{ [key: string]: string }>({});\n\n  useEffect(() => {\n    // Load products and inventory items for selection\n    const loadInitialData = async () => {\n      setIsLoading(__true);\n      try {\n        const [fetchedProducts, fetchedInventoryItems] = await Promise.all([\n          DatabaseService.getProducts(), // Fetch products from DatabaseService\n          DatabaseService.getInventoryItems(), // Fetch inventory items from DatabaseService\n        ]);\n        setProducts(__fetchedProducts);\n        setInventoryItems(__fetchedInventoryItems);\n\n        if (__existingRecipe) {\n          const product = fetchedProducts.find(p => p.id === existingRecipe.item_id);\n          setSelectedProduct(product || null);\n          setIngredients(\n            existingRecipe.ingredients.map(ing => ({\n              ...ing,\n              ingredient_name:\n                fetchedInventoryItems.find(i => i.sku === ing.ingredient_sku)?.name ||\n                ing.ingredient_sku,\n            })),\n          );\n        }\n      } catch (__error) {\n        Alert.alert('Error', 'Failed to load necessary data. Please try again.');\n      } finally {\n        setIsLoading(__false);\n      }\n    };\n    loadInitialData();\n  }, [existingRecipe]);\n\n  const handleSelectProduct = (_product: _Product) => {\n    setSelectedProduct(__product);\n    setFormErrors(prev => ({ ...prev, product: '' })); // Clear product error\n  };\n\n  const handleAddIngredient = () => {\n    setEditingIngredientIndex(__null); // Ensure we are adding new, not editing\n    setIsIngredientModalVisible(__true);\n  };\n\n  const handleSelectIngredient = (ingredient: _InventoryItem) => {\n    if (ingredients.find(i => i.ingredient_sku === ingredient.sku)) {\n      Alert.alert('Duplicate', 'This ingredient is already in the recipe.');\n      return;\n    }\n    const newIngredient: RecipeIngredient = {\n      ingredient_sku: ingredient.sku,\n      qty_g: 0, // Default, user will edit\n      ingredient_name: ingredient.name,\n    };\n    setIngredients(prev => [...prev, newIngredient]);\n    setIsIngredientModalVisible(__false);\n  };\n\n  const handleUpdateIngredientQuantity = (sku: _string, _qty_g_str: _string) => {\n    const qty_g = parseInt(__qty_g_str, 10);\n    setIngredients(prevIngredients =>\n      prevIngredients.map(ing =>\n        ing.ingredient_sku === sku ? { ...ing, qty_g: isNaN(__qty_g) ? 0 : qty_g } : _ing,\n      ),\n    );\n    // Validate quantity on save or blur\n  };\n\n  const handleRemoveIngredient = (sku: _string) => {\n    setIngredients(prevIngredients => prevIngredients.filter(ing => ing.ingredient_sku !== sku));\n  };\n\n  const validateForm = () => {\n    const errors: { [key: string]: string } = {};\n    if (!selectedProduct) {\n      errors.product = 'A product must be selected for the recipe.';\n    }\n    if (ingredients.length === 0) {\n      errors.ingredients = 'A recipe must have at least one ingredient.';\n    }\n    ingredients.forEach((__ing, _index) => {\n      if (ing.qty_g <= 0) {\n        errors[`ingredient_qty_${index}`] = 'Quantity must be greater than 0.';\n      }\n      if (ing.qty_g > 1000) {\n        errors[`ingredient_qty_${index}`] = 'Quantity cannot exceed 1000g.';\n      }\n    });\n    setFormErrors(__errors);\n    return Object.keys(__errors).length === 0;\n  };\n\n  const handleSaveRecipe = async () => {\n    if (!validateForm()) {\n      Alert.alert('Validation Error', 'Please correct the errors in the form.');\n      return;\n    }\n    if (!selectedProduct) {\n      return;\n    } // Should be caught by validation\n\n    setIsLoading(__true);\n    const _recipeData: Recipe = {\n      item_id: selectedProduct.id,\n      ingredients: ingredients.map(({ ingredient_sku, qty_g }) => ({ ingredient_sku, qty_g })),\n    };\n\n    try {\n      if (__existingRecipe) {\n        // The API for create_or_update_recipe_for_item_api handles both cases.\n        // No separate updateRecipe function is strictly needed if using that endpoint.\n        await DatabaseService.updateRecipe(existingRecipe.item_id, _recipeData);\n        Alert.alert('Success', 'Recipe updated successfully!');\n      } else {\n        await DatabaseService.createRecipe(__recipeData);\n        Alert.alert('Success', 'Recipe created successfully!');\n      }\n      navigation.goBack();\n    } catch (__error) {\n      Alert.alert('Error', `Failed to save recipe: ${error.message || 'Please try again.'}`);\n    } finally {\n      setIsLoading(__false);\n    }\n  };\n\n  const renderIngredientItem = ({ item, index }: { item: RecipeIngredient; index: number }) => (\n    <View style={styles.ingredientItem}>\n      <Text style={styles.ingredientName}>{item.ingredient_name || item.ingredient_sku}</Text>\n      <View style={styles.ingredientControls}>\n        <FormFieldNumber\n          label=\"\" // No label for inline field\n          value={item.qty_g > 0 ? item.qty_g.toString() : ''}\n          onChangeText={_text => handleUpdateIngredientQuantity(item.ingredient_sku, _text)}\n          placeholder=\"g/ml/unit\"\n          keyboardType=\"numeric\"\n          error={formErrors[`ingredient_qty_${index}`]}\n        />\n        <TouchableOpacity\n          onPress={() => handleRemoveIngredient(item.ingredient_sku)}\n          style={styles.removeButton}>\n          {/* <Icon name=\"remove-circle-outline\" type=\"material\" size={24} color=\"#FF3B30\" /> */}\n          <Text style={{ color: '#FF3B30' }}>Remove</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n\n  if (isLoading && !selectedProduct && !existingRecipe) {\n    // Initial load\n    return (\n      <View style={[styles.container, styles.centered]}>\n        <ActivityIndicator size=\"large\" />\n        <Text>Loading form data...</Text>\n      </View>\n    );\n  }\n\n  return (\n    <ScrollView\n      style={[styles.container, { paddingTop: insets.top, paddingBottom: insets.bottom }]}\n      keyboardShouldPersistTaps=\"handled\">\n      <View style={styles.formContent}>\n        <Text style={styles.screenTitle}>\n          {existingRecipe ? 'Edit Recipe' : 'Create New Recipe'}\n        </Text>\n\n        <TouchableOpacity\n          onPress={() => setIsProductModalVisible(__true)}\n          style={styles.selectButton}\n          disabled={!!existingRecipe}>\n          <Text style={styles.selectButtonText}>\n            {selectedProduct ? selectedProduct.name : 'Select Menu Item (__Product)'}\n          </Text>\n        </TouchableOpacity>\n        {formErrors.product && <Text style={styles.errorText}>{formErrors.product}</Text>}\n        {existingRecipe && selectedProduct && (\n          <Text style={styles.selectedProductText}>Recipe for: {selectedProduct.name}</Text>\n        )}\n\n        <View style={styles.ingredientsHeader}>\n          <Text style={styles.sectionTitle}>Ingredients</Text>\n          <TouchableOpacity onPress={handleAddIngredient} style={styles.smallAddButton}>\n            {/* <Icon name=\"add\" type=\"material\" size={20} color=\"#007AFF\" /> */}\n            <Text style={styles.smallAddButtonText}>Add</Text>\n          </TouchableOpacity>\n        </View>\n        {formErrors.ingredients && <Text style={styles.errorText}>{formErrors.ingredients}</Text>}\n\n        {ingredients.length === 0 ? (\n          <Text style={styles.emptyIngredientsText}>No ingredients added yet.</Text>\n        ) : (\n          <FlatList\n            data={ingredients}\n            renderItem={renderIngredientItem}\n            keyExtractor={(__item, _index) => item.ingredient_sku + index}\n            scrollEnabled={false} // As it's inside a ScrollView\n          />\n        )}\n\n        <TouchableOpacity onPress={handleSaveRecipe} style={styles.saveButton} disabled={isLoading}>\n          {isLoading ? (\n            <ActivityIndicator color=\"#fff\" />\n          ) : (\n            <Text style={styles.saveButtonText}>Save Recipe</Text>\n          )}\n        </TouchableOpacity>\n      </View>\n\n      <SelectProductModal\n        isVisible={isProductModalVisible}\n        onClose={() => setIsProductModalVisible(__false)}\n        products={products}\n        onSelectProduct={handleSelectProduct}\n      />\n      <SelectIngredientModal\n        isVisible={isIngredientModalVisible}\n        onClose={() => setIsIngredientModalVisible(__false)}\n        inventoryItems={inventoryItems}\n        onSelectIngredient={handleSelectIngredient}\n      />\n    </ScrollView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#F5F5F7',\n  },\n  centered: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  formContent: {\n    padding: 20,\n  },\n  screenTitle: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 20,\n    textAlign: 'center',\n  },\n  selectButton: {\n    backgroundColor: '#FFFFFF',\n    padding: 15,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: '#E0E0E0',\n    marginBottom: 10,\n    alignItems: 'center',\n  },\n  selectButtonText: {\n    fontSize: 16,\n    color: '#007AFF',\n  },\n  selectedProductText: {\n    fontSize: 16,\n    fontWeight: '600',\n    marginVertical: 10,\n    textAlign: 'center',\n    color: '#333',\n  },\n  ingredientsHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginTop: 20,\n    marginBottom: 10,\n  },\n  sectionTitle: {\n    fontSize: 20,\n    fontWeight: '600',\n  },\n  smallAddButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingVertical: 6,\n    paddingHorizontal: 10,\n    // backgroundColor: '#EFEFF4',\n    // borderRadius: 20,\n  },\n  smallAddButtonText: {\n    fontSize: 15,\n    color: '#007AFF',\n    marginLeft: 4,\n    fontWeight: '500',\n  },\n  emptyIngredientsText: {\n    textAlign: 'center',\n    color: '#666',\n    marginVertical: 20,\n    fontSize: 15,\n  },\n  ingredientItem: {\n    backgroundColor: '#FFFFFF',\n    padding: 12,\n    borderRadius: 8,\n    marginBottom: 10,\n    borderWidth: 1,\n    borderColor: '#EFEFF4',\n  },\n  ingredientName: {\n    fontSize: 16,\n    fontWeight: '500',\n    marginBottom: 8,\n  },\n  ingredientControls: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  // Styles for FormFieldNumber (__mocked)\n  fieldContainer: {\n    flex: 1, // Take available space for the input\n    marginRight: 10, // Space before remove button\n  },\n  label: {\n    // Not used for inline qty, but good for general FormFieldNumber\n    fontSize: 14,\n    color: '#333',\n    marginBottom: 4,\n  },\n  input: {\n    backgroundColor: '#F0F0F0',\n    borderRadius: 6,\n    paddingHorizontal: 12,\n    paddingVertical: 10,\n    fontSize: 15,\n    borderWidth: 1,\n    borderColor: '#E0E0E0',\n  },\n  inputError: {\n    borderColor: '#FF3B30',\n  },\n  errorText: {\n    color: '#FF3B30',\n    fontSize: 12,\n    marginTop: 4,\n  },\n  // End FormFieldNumber styles\n  removeButton: {\n    padding: 8,\n  },\n  saveButton: {\n    backgroundColor: '#00A651', // Fynlo green\n    padding: 15,\n    borderRadius: 8,\n    alignItems: 'center',\n    marginTop: 30,\n  },\n  saveButtonText: {\n    color: '#FFFFFF',\n    fontSize: 18,\n    fontWeight: '600',\n  },\n  // Modal styles (__mocked)\n  modalOverlay: {\n    flex: 1,\n    backgroundColor: 'rgba(0,0,0,0.5)',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  modalContainer: {\n    backgroundColor: '#FFFFFF',\n    width: '85%',\n    maxHeight: '70%',\n    borderRadius: 10,\n    padding: 20,\n  },\n  modalTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginBottom: 15,\n    textAlign: 'center',\n  },\n  modalItem: {\n    paddingVertical: 12,\n    borderBottomWidth: 1,\n    borderBottomColor: '#EEE',\n  },\n  modalCloseButton: {\n    marginTop: 15,\n    padding: 10,\n    alignItems: 'center',\n    backgroundColor: '#EFEFF4',\n    borderRadius: 8,\n  },\n});\n\nexport default RecipeFormScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/settings/RecipesScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_fetchedRecipes' is assigned a value but never used.","line":51,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":51,"endColumn":38},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { color: '#007AFF' }","line":110,"column":24,"nodeType":"ObjectExpression","endLine":110,"endColumn":44},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { color: '#FF3B30' }","line":116,"column":24,"nodeType":"ObjectExpression","endLine":116,"endColumn":44},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":144,"column":49,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[5217,5259],"text":"Tap &apos;Add New' to create your first recipe."},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[5217,5259],"text":"Tap &lsquo;Add New' to create your first recipe."},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[5217,5259],"text":"Tap &#39;Add New' to create your first recipe."},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[5217,5259],"text":"Tap &rsquo;Add New' to create your first recipe."},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":144,"column":57,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[5217,5259],"text":"Tap 'Add New&apos; to create your first recipe."},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[5217,5259],"text":"Tap 'Add New&lsquo; to create your first recipe."},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[5217,5259],"text":"Tap 'Add New&#39; to create your first recipe."},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[5217,5259],"text":"Tap 'Add New&rsquo; to create your first recipe."},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\nimport {\n  View,\n  Text,\n  FlatList,\n  TouchableOpacity,\n  StyleSheet,\n  Alert,\n  ActivityIndicator,\n  RefreshControl,\n} from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n// import { Icon } from 'react-native-elements'; // Or your preferred icon library\n\n// For user/auth state if needed\n// import { Recipe, RecipeIngredient } from '../../types'; // Assuming these types exist or will be created\nimport { fetchRecipes, deleteRecipe } from '../../services/ApiService'; // Assuming ApiService will be updated\n\n// Placeholder types, replace with actual types from '../../types'\ninterface RecipeIngredient {\n  ingredient_sku: string;\n  qty_g: number;\n  ingredient_name?: string;\n}\ninterface Recipe {\n  item_id: string; // Should be UUID, but using string for now\n  item_name?: string;\n  ingredients: RecipeIngredient[];\n}\n// End placeholder types\n\nconst RecipesScreen = () => {\n  const navigation = useNavigation();\n  const insets = useSafeAreaInsets();\n  const [recipes, setRecipes] = useState<Recipe[]>([]);\n  const [isLoading, setIsLoading] = useState(__false);\n  const [isRefreshing, setIsRefreshing] = useState(__false);\n  // const { user } = useAppStore(); // If needed for auth checks or restaurant ID\n\n  const loadRecipes = useCallback(async () => {\n    setIsLoading(__true);\n    try {\n      // const restaurantId = user?.restaurant_id; // Get restaurant ID if needed by API\n      // if (!restaurantId) {\n      //   Alert.alert(\"Error\", \"Restaurant information not found.\");\n      //   setIsLoading(__false);\n      //   return;\n      // }\n      // const fetchedRecipes = await fetchRecipes(__restaurantId);\n      const _fetchedRecipes: Recipe[] = await fetchRecipes(); // Using simplified fetch for now\n      setRecipes(__fetchedRecipes);\n    } catch (__error) {\n      Alert.alert('Error', 'Failed to load recipes. Please try again.');\n    } finally {\n      setIsLoading(__false);\n    }\n  }, []);\n\n  useEffect(() => {\n    loadRecipes();\n  }, [loadRecipes]);\n\n  const onRefresh = useCallback(async () => {\n    setIsRefreshing(__true);\n    await loadRecipes();\n    setIsRefreshing(__false);\n  }, [loadRecipes]);\n\n  const handleAddRecipe = () => {\n    navigation.navigate('RecipeFormScreen'); // Navigate to form for new recipe\n  };\n\n  const handleEditRecipe = (recipe: _Recipe) => {\n    navigation.navigate('RecipeFormScreen', { recipe }); // Navigate to form with existing recipe data\n  };\n\n  const handleDeleteRecipe = (_itemId: _string) => {\n    Alert.alert('Confirm Delete', 'Are you sure you want to delete this recipe?', [\n      { text: 'Cancel', style: 'cancel' },\n      {\n        text: 'Delete',\n        style: 'destructive',\n        onPress: async () => {\n          try {\n            setIsLoading(__true);\n            await deleteRecipe(__itemId);\n            Alert.alert('Success', 'Recipe deleted successfully.');\n            loadRecipes(); // Refresh list\n          } catch (__error) {\n            Alert.alert('Error', 'Failed to delete recipe.');\n            setIsLoading(__false);\n          }\n        },\n      },\n    ]);\n  };\n\n  const renderRecipeItem = ({ item }: { item: Recipe }) => (\n    <View style={styles.recipeItem}>\n      <View style={styles.recipeInfo}>\n        <Text style={styles.recipeName}>{item.item_name || item.item_id}</Text>\n        <Text style={styles.recipeIngredients}>{item.ingredients.length} ingredient(__s)</Text>\n        {/* Optionally list some ingredients: */}\n        {/* <Text>{item.ingredients.slice(0, 2).map(ing => `${ing.ingredient_name || ing.ingredient_sku} (${ing.qty_g}g)`).join(', ')}</Text> */}\n      </View>\n      <View style={styles.recipeActions}>\n        <TouchableOpacity onPress={() => handleEditRecipe(__item)} style={styles.actionButton}>\n          {/* <Icon name=\"edit\" type=\"material\" size={24} color=\"#007AFF\" /> */}\n          <Text style={{ color: '#007AFF' }}>Edit</Text>\n        </TouchableOpacity>\n        <TouchableOpacity\n          onPress={() => handleDeleteRecipe(item.item_id)}\n          style={styles.actionButton}>\n          {/* <Icon name=\"delete\" type=\"material\" size={24} color=\"#FF3B30\" /> */}\n          <Text style={{ color: '#FF3B30' }}>Delete</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n\n  if (isLoading && !isRefreshing && recipes.length === 0) {\n    return (\n      <View style={[styles.container, styles.centered]}>\n        <ActivityIndicator size=\"large\" />\n        <Text>Loading Recipes...</Text>\n      </View>\n    );\n  }\n\n  return (\n    <View style={[styles.container, { paddingTop: insets.top }]}>\n      <View style={styles.header}>\n        <Text style={styles.headerTitle}>Manage Recipes</Text>\n        <TouchableOpacity onPress={handleAddRecipe} style={styles.addButton}>\n          {/* <Icon name=\"add\" type=\"material\" size={28} color=\"#007AFF\" /> */}\n          <Text style={styles.addButtonText}>Add New</Text>\n        </TouchableOpacity>\n      </View>\n\n      {recipes.length === 0 && !isLoading ? (\n        <View style={styles.centered}>\n          <Text style={styles.emptyText}>No recipes found.</Text>\n          <Text style={styles.emptySubText}>Tap 'Add New' to create your first recipe.</Text>\n        </View>\n      ) : (\n        <FlatList\n          data={recipes}\n          renderItem={renderRecipeItem}\n          keyExtractor={item => item.item_id.toString()}\n          contentContainerStyle={styles.listContentContainer}\n          refreshControl={<RefreshControl refreshing={isRefreshing} onRefresh={onRefresh} />}\n        />\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#F5F5F7',\n  },\n  centered: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    borderBottomWidth: 1,\n    borderBottomColor: '#E0E0E0',\n    backgroundColor: '#FFFFFF',\n  },\n  headerTitle: {\n    fontSize: 22,\n    fontWeight: 'bold',\n  },\n  addButton: {\n    padding: 8,\n    // backgroundColor: '#007AFF',\n    // borderRadius: 8,\n  },\n  addButtonText: {\n    color: '#007AFF',\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  listContentContainer: {\n    paddingVertical: 8,\n  },\n  recipeItem: {\n    backgroundColor: '#FFFFFF',\n    padding: 16,\n    marginVertical: 4,\n    marginHorizontal: 12,\n    borderRadius: 8,\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.1,\n    shadowRadius: 2,\n    elevation: 2,\n  },\n  recipeInfo: {\n    flex: 1,\n  },\n  recipeName: {\n    fontSize: 17,\n    fontWeight: '600',\n    marginBottom: 4,\n  },\n  recipeIngredients: {\n    fontSize: 14,\n    color: '#555',\n  },\n  recipeActions: {\n    flexDirection: 'row',\n  },\n  actionButton: {\n    padding: 8,\n    marginLeft: 12,\n  },\n  emptyText: {\n    fontSize: 18,\n    color: '#333',\n    marginBottom: 8,\n  },\n  emptySubText: {\n    fontSize: 14,\n    color: '#777',\n  },\n});\n\nexport default RecipesScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/settings/RestaurantPlatformOverridesScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_userRole' is assigned a value but never used.","line":48,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_effectiveSettings' is assigned a value but never used.","line":50,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":50,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_loading' is assigned a value but never used.","line":51,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":51,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_pendingOverrides' is assigned a value but never used.","line":54,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":54,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_setPendingOverrides' is assigned a value but never used.","line":54,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":54,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_settings' is assigned a value but never used.","line":67,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":67,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":71,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2405,2408],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2405,2408],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_mockSettings' is assigned a value but never used.","line":95,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":95,"endColumn":58},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_success' is assigned a value but never used.","line":165,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":165,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'newValue' is assigned a value but never used.","line":218,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":218,"endColumn":25},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'newValue' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":218,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":218,"endColumn":25},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { padding: 8, borderRadius: 4 }","line":329,"column":17,"nodeType":"ObjectExpression","endLine":329,"endColumn":87},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { padding: 16, borderRadius: 8 }","line":361,"column":27,"nodeType":"ObjectExpression","endLine":361,"endColumn":98},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { fontSize: 14 }","line":362,"column":29,"nodeType":"ObjectExpression","endLine":362,"endColumn":71},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { borderRadius: 8 }","line":384,"column":17,"nodeType":"ObjectExpression","endLine":384,"endColumn":75},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: {\n  padding: 8,\n  borderRadius: 4,\n  borderWidth: \"setting.source === 'restaurant' ? 1 : 0\"\n}","line":450,"column":31,"nodeType":"ObjectExpression","endLine":459,"endColumn":32},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { fontSize: 12 }","line":462,"column":38,"nodeType":"ObjectExpression","endLine":468,"endColumn":32},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.container","line":499,"column":5,"nodeType":"Property","endLine":502,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.header","line":503,"column":5,"nodeType":"Property","endLine":511,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.backButton","line":512,"column":5,"nodeType":"Property","endLine":514,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.title","line":515,"column":5,"nodeType":"Property","endLine":519,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.content","line":520,"column":5,"nodeType":"Property","endLine":523,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.loadingContainer","line":524,"column":5,"nodeType":"Property","endLine":529,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.loadingText","line":530,"column":5,"nodeType":"Property","endLine":534,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.errorCard","line":535,"column":5,"nodeType":"Property","endLine":538,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.errorContent","line":539,"column":5,"nodeType":"Property","endLine":543,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.errorText","line":544,"column":5,"nodeType":"Property","endLine":549,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.retryButton","line":550,"column":5,"nodeType":"Property","endLine":552,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.infoCard","line":553,"column":5,"nodeType":"Property","endLine":556,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.infoHeader","line":557,"column":5,"nodeType":"Property","endLine":561,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.infoTitle","line":562,"column":5,"nodeType":"Property","endLine":567,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.infoText","line":568,"column":5,"nodeType":"Property","endLine":573,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.statusIndicators","line":574,"column":5,"nodeType":"Property","endLine":577,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.statusItem","line":578,"column":5,"nodeType":"Property","endLine":581,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.statusDot","line":582,"column":5,"nodeType":"Property","endLine":587,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.statusText","line":588,"column":5,"nodeType":"Property","endLine":591,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.categorySection","line":592,"column":5,"nodeType":"Property","endLine":594,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.sectionTitle","line":595,"column":5,"nodeType":"Property","endLine":600,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.categoryCard","line":601,"column":5,"nodeType":"Property","endLine":604,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.categoryHeader","line":605,"column":5,"nodeType":"Property","endLine":610,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.categoryTitleContainer","line":611,"column":5,"nodeType":"Property","endLine":615,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.categoryTextContainer","line":616,"column":5,"nodeType":"Property","endLine":618,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.categoryTitle","line":619,"column":5,"nodeType":"Property","endLine":623,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.categorySubtitle","line":624,"column":5,"nodeType":"Property","endLine":628,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.settingsContainer","line":629,"column":5,"nodeType":"Property","endLine":632,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.settingItem","line":633,"column":5,"nodeType":"Property","endLine":637,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.settingHeader","line":638,"column":5,"nodeType":"Property","endLine":643,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.settingInfo","line":644,"column":5,"nodeType":"Property","endLine":646,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.settingName","line":647,"column":5,"nodeType":"Property","endLine":653,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.settingDescription","line":654,"column":5,"nodeType":"Property","endLine":657,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.settingStatus","line":658,"column":5,"nodeType":"Property","endLine":660,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.sourceIndicator","line":661,"column":5,"nodeType":"Property","endLine":665,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.settingValue","line":666,"column":5,"nodeType":"Property","endLine":668,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.valueText","line":669,"column":5,"nodeType":"Property","endLine":674,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.sourceText","line":675,"column":5,"nodeType":"Property","endLine":678,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.actionContainer","line":679,"column":5,"nodeType":"Property","endLine":681,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.lockedContainer","line":682,"column":5,"nodeType":"Property","endLine":685,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.lockedText","line":686,"column":5,"nodeType":"Property","endLine":691,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.bottomPadding","line":692,"column":5,"nodeType":"Property","endLine":694,"endColumn":6}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadEffectiveSettings'. Either include it or remove the dependency array.","line":62,"column":6,"nodeType":"ArrayExpression","endLine":62,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadEffectiveSettings]","fix":{"range":[2047,2049],"text":"[loadEffectiveSettings]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":10,"fatalErrorCount":0,"warningCount":49,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * RestaurantPlatformOverridesScreen - Interface for restaurant owners to view and manage platform setting overrides\n * Shows effective settings and allows requesting overrides where permitted by platform policy\n */\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  View,\n  ScrollView,\n  StyleSheet,\n  Alert,\n  ActivityIndicator,\n  RefreshControl,\n  Text,\n  TouchableOpacity,\n} from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation } from '@react-navigation/native';\nimport PlatformService from '../../services/PlatformService';\nimport { useTheme } from '../../design-system/ThemeProvider';\n\ninterface EffectiveSetting {\n  key: string;\n  value: unknown;\n  source: 'platform' | 'restaurant';\n  category: string;\n  description: string;\n  can_override: boolean;\n  override_id?: string;\n}\n\ninterface OverrideRequest {\n  configKey: string;\n  currentValue: unknown;\n  requestedValue: unknown;\n  reason: string;\n  requiresApproval: boolean;\n}\n\nconst RestaurantPlatformOverridesScreen: React.FC = () => {\n  const navigation = useNavigation();\n  const { theme } = useTheme();\n  const styles = createStyles(__theme);\n\n  // Mock restaurant ID - in real app, this would come from auth context\n  const restaurantId = 'restaurant-123';\n  const _userRole = 'restaurant_owner'; // This would come from auth context\n\n  const [_effectiveSettings, setEffectiveSettings] = useState<Record<string, EffectiveSetting>>({});\n  const [_loading, setLoading] = useState(__true);\n  const [refreshing, setRefreshing] = useState(__false);\n  const [error, setError] = useState<string | null>(__null);\n  const [_pendingOverrides, _setPendingOverrides] = useState<OverrideRequest[]>([]);\n  const [expandedCategories, setExpandedCategories] = useState<Set<string>>(new Set());\n\n  const platformService = PlatformService.getInstance();\n\n  useEffect(() => {\n    loadEffectiveSettings();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const loadEffectiveSettings = async () => {\n    try {\n      setError(__null);\n      const _settings = await platformService.getRestaurantEffectiveSettings(__restaurantId);\n\n      // Convert to our interface format\n      const formattedSettings: Record<string, EffectiveSetting> = {};\n      Object.entries(__settings).forEach(([key, config]: [string, any]) => {\n        formattedSettings[key] = {\n          key,\n          value: config.value,\n          source: config.source,\n          category: config.category,\n          description: config.description,\n          can_override: config.can_override,\n          override_id: config.override_id,\n        };\n      });\n\n      setEffectiveSettings(__formattedSettings);\n    } catch (__err) {\n      setError('Failed to load settings. Please try again.');\n      // Load mock data for demo\n      loadMockSettings();\n    } finally {\n      setLoading(__false);\n      setRefreshing(__false);\n    }\n  };\n\n  const loadMockSettings = () => {\n    const _mockSettings: Record<string, EffectiveSetting> = {\n      'business.discount.maximum': {\n        key: 'business.discount.maximum',\n        value: { percentage: 50.0 },\n        source: 'platform',\n        category: 'business',\n        description: 'Maximum discount percentage allowed',\n        can_override: _true,\n      },\n      'payment.markup.qr_code': {\n        key: 'payment.markup.qr_code',\n        value: { percentage: 0.2 },\n        source: 'restaurant',\n        category: 'payment_fees',\n        description: 'QR Code payment markup',\n        can_override: _true,\n        override_id: 'override-123',\n      },\n      'ui.theme.primary_color': {\n        key: 'ui.theme.primary_color',\n        value: '#00A651',\n        source: 'platform',\n        category: 'ui',\n        description: 'Primary brand color',\n        can_override: _true,\n      },\n      'security.max_login_attempts': {\n        key: 'security.max_login_attempts',\n        value: 5,\n        source: 'platform',\n        category: 'security',\n        description: 'Maximum login attempts before lockout',\n        can_override: _false,\n      },\n      'payment.fees.stripe': {\n        key: 'payment.fees.stripe',\n        value: { percentage: 1.4, fixed_fee: 0.2 },\n        source: 'platform',\n        category: 'payment_fees',\n        description: 'Stripe payment processing fee',\n        can_override: _false,\n      },\n    };\n\n    setEffectiveSettings(__mockSettings);\n  };\n\n  const onRefresh = () => {\n    setRefreshing(__true);\n    loadEffectiveSettings();\n  };\n\n  const toggleCategoryExpansion = (_category: _string) => {\n    const newExpanded = new Set(__expandedCategories);\n    if (newExpanded.has(__category)) {\n      newExpanded.delete(__category);\n    } else {\n      newExpanded.add(__category);\n    }\n    setExpandedCategories(__newExpanded);\n  };\n\n  const requestOverride = async (\n    setting: _EffectiveSetting,\n    newValue: _unknown,\n    _reason: _string,\n  ) => {\n    try {\n      const requiresApproval = shouldRequireApproval(setting.key, _newValue);\n\n      const _success = await platformService.setRestaurantOverride(\n        restaurantId,\n        setting.key,\n        newValue,\n        requiresApproval,\n      );\n\n      if (__success) {\n        Alert.alert(\n          'Override Request Submitted',\n          requiresApproval\n            ? 'Your override request has been submitted for platform approval.'\n            : 'Setting override has been applied successfully.',\n        );\n\n        // Reload settings to show updated values\n        loadEffectiveSettings();\n      } else {\n        Alert.alert('Error', 'Failed to submit override request.');\n      }\n    } catch (__error) {\n      Alert.alert('Error', 'An error occurred while submitting the override request.');\n    }\n  };\n\n  const shouldRequireApproval = (configKey: _string, value: _unknown): boolean => {\n    // Define rules for when approval is required\n    if (configKey.includes('payment.markup') && value.percentage > 0.5) {\n      return true;\n    }\n    if (configKey === 'business.discount.maximum' && value.percentage > 30) {\n      return true;\n    }\n    return false;\n  };\n\n  const showOverrideDialog = (setting: _EffectiveSetting) => {\n    Alert.prompt(\n      'Request Setting Override',\n      `Current value: ${JSON.stringify(setting.value)}\\n\\nEnter new value:`,\n      [\n        { text: 'Cancel', style: 'cancel' },\n        {\n          text: 'Submit Request',\n          onPress: newValueString => {\n            if (!newValueString) {\n              return;\n            }\n\n            try {\n              // Parse the new value (this is simplified - real implementation would have proper type handling)\n              let newValue;\n              try {\n                newValue = JSON.parse(__newValueString);\n              } catch {\n                // If not valid JSON, treat as string\n                _newValue = newValueString;\n              }\n\n              Alert.prompt(\n                'Reason for Override',\n                'Please provide a reason for this override request:',\n                [\n                  { text: 'Cancel', style: 'cancel' },\n                  {\n                    text: 'Submit',\n                    onPress: reason => {\n                      if (reason && reason.trim().length > 0) {\n                        requestOverride(__setting, _newValue, reason.trim());\n                      }\n                    },\n                  },\n                ],\n              );\n            } catch (__error) {\n              Alert.alert('Error', 'Invalid value format');\n            }\n          },\n        },\n      ],\n    );\n  };\n\n  const getSettingsByCategory = () => {\n    const categories: Record<string, EffectiveSetting[]> = {};\n\n    Object.values(__effectiveSettings).forEach(setting => {\n      if (!categories[setting.category]) {\n        categories[setting.category] = [];\n      }\n      categories[setting.category].push(__setting);\n    });\n\n    return categories;\n  };\n\n  const getCategoryInfo = (category: _string) => {\n    const categoryInfo: Record<string, { title: string; icon: string; color: string }> = {\n      payment_fees: {\n        title: 'Payment Processing',\n        icon: 'payment',\n        color: theme.colors.primary,\n      },\n      business: {\n        title: 'Business Rules',\n        icon: 'business',\n        color: '#3498DB',\n      },\n      ui: {\n        title: 'UI Customization',\n        icon: 'palette',\n        color: '#9B59B6',\n      },\n      security: {\n        title: 'Security Settings',\n        icon: 'security',\n        color: '#E74C3C',\n      },\n    };\n\n    return (\n      categoryInfo[category] || {\n        title: category.charAt(0).toUpperCase() + category.slice(1),\n        icon: 'settings',\n        color: theme.colors.textLight,\n      }\n    );\n  };\n\n  if (__loading) {\n    return (\n      <SafeAreaView style={styles.container}>\n        <View style={styles.loadingContainer}>\n          <ActivityIndicator size=\"large\" color={theme.colors.primary} />\n          <Text style={styles.loadingText}>Loading platform settings...</Text>\n        </View>\n      </SafeAreaView>\n    );\n  }\n\n  const categorizedSettings = getSettingsByCategory();\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <View style={styles.header}>\n        <TouchableOpacity style={styles.backButton} onPress={() => navigation.goBack()}>\n          <Icon name=\"arrow-back\" size={24} color={theme.colors.text} />\n        </TouchableOpacity>\n        <Text style={styles.title}>Platform Settings</Text>\n      </View>\n\n      <ScrollView\n        style={styles.content}\n        refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}>\n        {error && (\n          <View style={[styles.errorCard, { backgroundColor: theme.colors.surface }]}>\n            <View style={styles.errorContent}>\n              <Icon name=\"error\" size={24} color={theme.colors.error} />\n              <Text style={styles.errorText}>{error}</Text>\n            </View>\n            <TouchableOpacity\n              onPress={loadEffectiveSettings}\n              style={[\n                styles.retryButton,\n                { backgroundColor: theme.colors.primary, padding: 8, borderRadius: 4 },\n              ]}>\n              <Text style={{ color: theme.colors.white }}>Retry</Text>\n            </TouchableOpacity>\n          </View>\n        )}\n\n        <View style={[styles.infoCard, { backgroundColor: theme.colors.surface }]}>\n          <View style={styles.infoHeader}>\n            <Icon name=\"info\" size={24} color={theme.colors.primary} />\n            <Text style={styles.infoTitle}>Platform Settings Overview</Text>\n          </View>\n          <Text style={styles.infoText}>\n            These settings are controlled by the platform owner. Some settings can be customized for\n            your restaurant within platform-defined limits.\n          </Text>\n          <View style={styles.statusIndicators}>\n            <View style={styles.statusItem}>\n              <View style={[styles.statusDot, { backgroundColor: theme.colors.primary }]} />\n              <Text style={styles.statusText}>Platform Default</Text>\n            </View>\n            <View style={styles.statusItem}>\n              <View style={[styles.statusDot, { backgroundColor: theme.colors.warning }]} />\n              <Text style={styles.statusText}>Restaurant Override</Text>\n            </View>\n          </View>\n        </View>\n\n        {/* Special section for payment fees */}\n        {categorizedSettings.payment_fees && (\n          <View style={styles.categorySection}>\n            <Text style={styles.sectionTitle}>Payment Processing Fees</Text>\n            <View style={[{ backgroundColor: theme.colors.surface, padding: 16, borderRadius: 8 }]}>\n              <Text style={[{ color: theme.colors.text, fontSize: 14 }]}>\n                Payment fees are controlled by the platform and cannot be modified by restaurants.\n              </Text>\n            </View>\n          </View>\n        )}\n\n        {/* Other categories */}\n        {Object.entries(__categorizedSettings).map(([category, settings]) => {\n          if (category === 'payment_fees') {\n            return null;\n          } // Already handled above\n\n          const categoryInfo = getCategoryInfo(__category);\n          const isExpanded = expandedCategories.has(__category);\n          const hasOverrides = settings.some(s => s.source === 'restaurant');\n\n          return (\n            <View\n              key={category}\n              style={[\n                styles.categoryCard,\n                { backgroundColor: theme.colors.surface, borderRadius: 8 },\n              ]}>\n              <TouchableOpacity\n                style={styles.categoryHeader}\n                onPress={() => toggleCategoryExpansion(__category)}>\n                <View style={styles.categoryTitleContainer}>\n                  <Icon name={categoryInfo.icon} size={24} color={categoryInfo.color} />\n                  <View style={styles.categoryTextContainer}>\n                    <Text style={styles.categoryTitle}>{categoryInfo.title}</Text>\n                    <Text style={styles.categorySubtitle}>\n                      {settings.length} setting{settings.length !== 1 ? 's' : ''}\n                      {hasOverrides && ' • Has customizations'}\n                    </Text>\n                  </View>\n                </View>\n                <Icon\n                  name={isExpanded ? 'expand-less' : 'expand-more'}\n                  size={24}\n                  color={theme.colors.textLight}\n                />\n              </TouchableOpacity>\n\n              {isExpanded && (\n                <View style={styles.settingsContainer}>\n                  {settings.map(setting => (\n                    <View key={setting.key} style={styles.settingItem}>\n                      <View style={styles.settingHeader}>\n                        <View style={styles.settingInfo}>\n                          <Text style={styles.settingName}>\n                            {setting.key.split('.').pop()?.replace(/_/g, ' ') || setting.key}\n                          </Text>\n                          <Text style={styles.settingDescription}>{setting.description}</Text>\n                        </View>\n                        <View style={styles.settingStatus}>\n                          <View\n                            style={[\n                              styles.sourceIndicator,\n                              {\n                                backgroundColor:\n                                  setting.source === 'restaurant'\n                                    ? theme.colors.warning\n                                    : theme.colors.primary,\n                              },\n                            ]}\n                          />\n                        </View>\n                      </View>\n\n                      <View style={styles.settingValue}>\n                        <Text style={styles.valueText}>\n                          {typeof setting.value === 'object'\n                            ? JSON.stringify(setting.value)\n                            : setting.value.toString()}\n                        </Text>\n                        <Text style={styles.sourceText}>\n                          {setting.source === 'restaurant'\n                            ? 'Restaurant Override'\n                            : 'Platform Default'}\n                        </Text>\n                      </View>\n\n                      {setting.can_override && (\n                        <View style={styles.actionContainer}>\n                          <TouchableOpacity\n                            onPress={() => showOverrideDialog(__setting)}\n                            style={[\n                              {\n                                backgroundColor:\n                                  setting.source === 'restaurant'\n                                    ? theme.colors.border\n                                    : theme.colors.primary,\n                                padding: 8,\n                                borderRadius: 4,\n                                borderWidth: setting.source === 'restaurant' ? 1 : 0,\n                                borderColor: theme.colors.primary,\n                              },\n                            ]}>\n                            <Text\n                              style={{\n                                color:\n                                  setting.source === 'restaurant'\n                                    ? theme.colors.primary\n                                    : theme.colors.white,\n                                fontSize: 12,\n                              }}>\n                              {setting.source === 'restaurant'\n                                ? 'Modify Override'\n                                : 'Request Override'}\n                            </Text>\n                          </TouchableOpacity>\n                        </View>\n                      )}\n\n                      {!setting.can_override && (\n                        <View style={styles.lockedContainer}>\n                          <Icon name=\"lock\" size={16} color={theme.colors.textLight} />\n                          <Text style={styles.lockedText}>Platform controlled</Text>\n                        </View>\n                      )}\n                    </View>\n                  ))}\n                </View>\n              )}\n            </View>\n          );\n        })}\n\n        <View style={styles.bottomPadding} />\n      </ScrollView>\n    </SafeAreaView>\n  );\n};\n\nconst createStyles = (theme: _unknown) =>\n  StyleSheet.create({\n    container: {\n      flex: 1,\n      backgroundColor: theme.colors.background,\n    },\n    header: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      paddingHorizontal: 16,\n      paddingVertical: 12,\n      backgroundColor: theme.colors.surface,\n      borderBottomWidth: 1,\n      borderBottomColor: theme.colors.border,\n    },\n    backButton: {\n      marginRight: 12,\n    },\n    title: {\n      fontSize: 20,\n      fontWeight: '600',\n      color: theme.colors.text,\n    },\n    content: {\n      flex: 1,\n      paddingHorizontal: 16,\n    },\n    loadingContainer: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center',\n      paddingHorizontal: 16,\n    },\n    loadingText: {\n      marginTop: 12,\n      fontSize: 16,\n      color: theme.colors.textLight,\n    },\n    errorCard: {\n      marginTop: 16,\n      padding: 16,\n    },\n    errorContent: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      marginBottom: 12,\n    },\n    errorText: {\n      marginLeft: 8,\n      fontSize: 16,\n      color: theme.colors.error,\n      flex: 1,\n    },\n    retryButton: {\n      alignSelf: 'flex-start',\n    },\n    infoCard: {\n      marginTop: 16,\n      padding: 16,\n    },\n    infoHeader: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      marginBottom: 8,\n    },\n    infoTitle: {\n      marginLeft: 8,\n      fontSize: 16,\n      fontWeight: '600',\n      color: theme.colors.text,\n    },\n    infoText: {\n      fontSize: 14,\n      color: theme.colors.textLight,\n      lineHeight: 20,\n      marginBottom: 12,\n    },\n    statusIndicators: {\n      flexDirection: 'row',\n      justifyContent: 'space-around',\n    },\n    statusItem: {\n      flexDirection: 'row',\n      alignItems: 'center',\n    },\n    statusDot: {\n      width: 8,\n      height: 8,\n      borderRadius: 4,\n      marginRight: 4,\n    },\n    statusText: {\n      fontSize: 12,\n      color: theme.colors.textLight,\n    },\n    categorySection: {\n      marginTop: 16,\n    },\n    sectionTitle: {\n      fontSize: 18,\n      fontWeight: '600',\n      color: theme.colors.text,\n      marginBottom: 12,\n    },\n    categoryCard: {\n      marginTop: 16,\n      overflow: 'hidden',\n    },\n    categoryHeader: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      justifyContent: 'space-between',\n      padding: 16,\n    },\n    categoryTitleContainer: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      flex: 1,\n    },\n    categoryTextContainer: {\n      marginLeft: 12,\n    },\n    categoryTitle: {\n      fontSize: 16,\n      fontWeight: '600',\n      color: theme.colors.text,\n    },\n    categorySubtitle: {\n      fontSize: 12,\n      color: theme.colors.textLight,\n      marginTop: 2,\n    },\n    settingsContainer: {\n      borderTopWidth: 1,\n      borderTopColor: theme.colors.border,\n    },\n    settingItem: {\n      padding: 16,\n      borderBottomWidth: 1,\n      borderBottomColor: theme.colors.border,\n    },\n    settingHeader: {\n      flexDirection: 'row',\n      alignItems: 'flex-start',\n      justifyContent: 'space-between',\n      marginBottom: 8,\n    },\n    settingInfo: {\n      flex: 1,\n    },\n    settingName: {\n      fontSize: 14,\n      fontWeight: '500',\n      color: theme.colors.text,\n      textTransform: 'capitalize',\n      marginBottom: 2,\n    },\n    settingDescription: {\n      fontSize: 12,\n      color: theme.colors.textLight,\n    },\n    settingStatus: {\n      alignItems: 'flex-end',\n    },\n    sourceIndicator: {\n      width: 12,\n      height: 12,\n      borderRadius: 6,\n    },\n    settingValue: {\n      marginBottom: 8,\n    },\n    valueText: {\n      fontSize: 14,\n      color: theme.colors.text,\n      fontFamily: 'monospace',\n      marginBottom: 2,\n    },\n    sourceText: {\n      fontSize: 12,\n      color: theme.colors.textLight,\n    },\n    actionContainer: {\n      alignItems: 'flex-start',\n    },\n    lockedContainer: {\n      flexDirection: 'row',\n      alignItems: 'center',\n    },\n    lockedText: {\n      marginLeft: 4,\n      fontSize: 12,\n      color: theme.colors.textLight,\n      fontStyle: 'italic',\n    },\n    bottomPadding: {\n      height: 24,\n    },\n  });\n\nexport default RestaurantPlatformOverridesScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/settings/RestaurantProfileScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_updateConfig' is assigned a value but never used.","line":35,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_loading' is assigned a value but never used.","line":35,"column":34,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is assigned a value but never used.","line":35,"column":44,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":50},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { flex: 2 }","line":308,"column":46,"nodeType":"ObjectExpression","endLine":308,"endColumn":57},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { flex: 1, marginLeft: 12 }","line":319,"column":46,"nodeType":"ObjectExpression","endLine":319,"endColumn":73}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  StatusBar,\n  SafeAreaView,\n  TouchableOpacity,\n  ScrollView,\n  TextInput,\n  Alert,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation } from '@react-navigation/native';\nimport { useRestaurantConfig } from '../../hooks/useRestaurantConfig';\n\nconst Colors = {\n  primary: '#00A651',\n  secondary: '#0066CC',\n  success: '#00A651',\n  warning: '#FF6B35',\n  danger: '#E74C3C',\n  background: '#F5F5F5',\n  white: '#FFFFFF',\n  lightGray: '#E5E5E5',\n  mediumGray: '#999999',\n  darkGray: '#666666',\n  text: '#333333',\n  lightText: '#666666',\n  border: '#DDDDDD',\n};\n\nconst RestaurantProfileScreen: React.FC = () => {\n  const navigation = useNavigation();\n  const { config, _updateConfig, _loading, _error } = useRestaurantConfig();\n\n  const [formData, setFormData] = useState({\n    restaurantName: '',\n    displayName: '',\n    businessType: 'Restaurant',\n    phone: '',\n    email: '',\n    website: '',\n    street: '',\n    city: '',\n    state: '',\n    zipCode: '',\n    country: 'United Kingdom',\n    currency: 'GBP',\n    taxRate: 0.2,\n    timezone: 'Europe/London',\n  });\n\n  const [hasChanges, setHasChanges] = useState(__false);\n  const [saving, setSaving] = useState(__false);\n\n  // Load config data\n  useEffect(() => {\n    if (__config) {\n      setFormData({\n        restaurantName: config.restaurantName || '',\n        displayName: config.displayName || '',\n        businessType: config.businessType || 'Restaurant',\n        phone: config.phone || '',\n        email: config.email || '',\n        website: config.website || '',\n        street: config.address?.street || '',\n        city: config.address?.city || '',\n        state: config.address?.state || '',\n        zipCode: config.address?.zipCode || '',\n        country: config.address?.country || 'United Kingdom',\n        currency: config.currency || 'GBP',\n        taxRate: config.taxRate || 0.2,\n        timezone: config.timezone || 'Europe/London',\n      });\n    }\n  }, [config]);\n\n  const updateField = (field: _string, value: string | number) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    setHasChanges(__true);\n  };\n\n  const handleSave = async () => {\n    try {\n      setSaving(__true);\n\n      await updateConfig({\n        restaurantName: formData.restaurantName,\n        displayName: formData.displayName,\n        businessType: formData.businessType,\n        phone: formData.phone,\n        email: formData.email,\n        website: formData.website,\n        address: {\n          street: formData.street,\n          city: formData.city,\n          state: formData.state,\n          zipCode: formData.zipCode,\n          country: formData.country,\n        },\n        currency: formData.currency,\n        taxRate: formData.taxRate,\n        timezone: formData.timezone,\n      });\n\n      setHasChanges(__false);\n      Alert.alert('Success', 'Restaurant profile updated successfully!');\n    } catch (__error) {\n      Alert.alert('Error', 'Failed to update restaurant profile. Please try again.');\n    } finally {\n      setSaving(__false);\n    }\n  };\n\n  const handleReset = () => {\n    if (!hasChanges) {\n      return;\n    }\n\n    Alert.alert('Discard Changes', 'Are you sure you want to discard all unsaved changes?', [\n      { text: 'Cancel', style: 'cancel' },\n      {\n        text: 'Discard',\n        style: 'destructive',\n        onPress: () => {\n          if (__config) {\n            setFormData({\n              restaurantName: config.restaurantName || '',\n              displayName: config.displayName || '',\n              businessType: config.businessType || 'Restaurant',\n              phone: config.phone || '',\n              email: config.email || '',\n              website: config.website || '',\n              street: config.address?.street || '',\n              city: config.address?.city || '',\n              state: config.address?.state || '',\n              zipCode: config.address?.zipCode || '',\n              country: config.address?.country || 'United Kingdom',\n              currency: config.currency || 'GBP',\n              taxRate: config.taxRate || 0.2,\n              timezone: config.timezone || 'Europe/London',\n            });\n            setHasChanges(__false);\n          }\n        },\n      },\n    ]);\n  };\n\n  const businessTypes = [\n    'Restaurant',\n    'Fast Food',\n    'Cafe',\n    'Bar & Pub',\n    'Food Truck',\n    'Bakery',\n    'Pizzeria',\n    'Bistro',\n    'Fine Dining',\n    'Other',\n  ];\n\n  const currencies = [\n    { code: 'GBP', name: 'British Pound', symbol: '£' },\n    { code: 'USD', name: 'US Dollar', symbol: '$' },\n    { code: 'EUR', name: 'Euro', symbol: '€' },\n  ];\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <StatusBar backgroundColor={Colors.primary} barStyle=\"light-content\" />\n\n      {/* Header */}\n      <View style={styles.header}>\n        <TouchableOpacity style={styles.backButton} onPress={() => navigation.goBack()}>\n          <Icon name=\"arrow-back\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n\n        <View style={styles.headerCenter}>\n          <Text style={styles.headerTitle}>Restaurant Profile</Text>\n          <Text style={styles.headerSubtitle}>Manage your restaurant details</Text>\n        </View>\n\n        <TouchableOpacity style={styles.resetButton} onPress={handleReset} disabled={!hasChanges}>\n          <Icon\n            name=\"refresh\"\n            size={24}\n            color={hasChanges ? Colors.white : 'rgba(255,255,255,0.5)'}\n          />\n        </TouchableOpacity>\n      </View>\n\n      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n        {/* Basic Information */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Basic Information</Text>\n\n          <View style={styles.inputGroup}>\n            <Text style={styles.inputLabel}>Restaurant Name *</Text>\n            <TextInput\n              style={styles.textInput}\n              value={formData.restaurantName}\n              onChangeText={_value => updateField('restaurantName', _value)}\n              placeholder=\"Enter restaurant name\"\n              placeholderTextColor={Colors.mediumGray}\n            />\n          </View>\n\n          <View style={styles.inputGroup}>\n            <Text style={styles.inputLabel}>Display Name *</Text>\n            <Text style={styles.inputHint}>This appears in headers and throughout the app</Text>\n            <TextInput\n              style={styles.textInput}\n              value={formData.displayName}\n              onChangeText={_value => updateField('displayName', _value)}\n              placeholder=\"Enter display name\"\n              placeholderTextColor={Colors.mediumGray}\n            />\n          </View>\n\n          <View style={styles.inputGroup}>\n            <Text style={styles.inputLabel}>Business Type *</Text>\n            <ScrollView\n              horizontal\n              showsHorizontalScrollIndicator={false}\n              style={styles.businessTypeScroll}>\n              {businessTypes.map(type => (\n                <TouchableOpacity\n                  key={type}\n                  style={[\n                    styles.businessTypeButton,\n                    formData.businessType === type && styles.businessTypeButtonActive,\n                  ]}\n                  onPress={() => updateField('businessType', _type)}>\n                  <Text\n                    style={[\n                      styles.businessTypeText,\n                      formData.businessType === type && styles.businessTypeTextActive,\n                    ]}>\n                    {type}\n                  </Text>\n                </TouchableOpacity>\n              ))}\n            </ScrollView>\n          </View>\n        </View>\n\n        {/* Contact Information */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Contact Information</Text>\n\n          <View style={styles.inputGroup}>\n            <Text style={styles.inputLabel}>Phone Number *</Text>\n            <TextInput\n              style={styles.textInput}\n              value={formData.phone}\n              onChangeText={_value => updateField('phone', _value)}\n              placeholder=\"+44 20 1234 5678\"\n              placeholderTextColor={Colors.mediumGray}\n              keyboardType=\"phone-pad\"\n            />\n          </View>\n\n          <View style={styles.inputGroup}>\n            <Text style={styles.inputLabel}>Email Address *</Text>\n            <TextInput\n              style={styles.textInput}\n              value={formData.email}\n              onChangeText={_value => updateField('email', _value)}\n              placeholder=\"restaurant@example.com\"\n              placeholderTextColor={Colors.mediumGray}\n              keyboardType=\"email-address\"\n              autoCapitalize=\"none\"\n            />\n          </View>\n\n          <View style={styles.inputGroup}>\n            <Text style={styles.inputLabel}>Website (__Optional)</Text>\n            <TextInput\n              style={styles.textInput}\n              value={formData.website}\n              onChangeText={_value => updateField('website', _value)}\n              placeholder=\"https://restaurant.com\"\n              placeholderTextColor={Colors.mediumGray}\n              keyboardType=\"url\"\n              autoCapitalize=\"none\"\n            />\n          </View>\n        </View>\n\n        {/* Address */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Location</Text>\n\n          <View style={styles.inputGroup}>\n            <Text style={styles.inputLabel}>Street Address *</Text>\n            <TextInput\n              style={styles.textInput}\n              value={formData.street}\n              onChangeText={_value => updateField('street', _value)}\n              placeholder=\"123 High Street\"\n              placeholderTextColor={Colors.mediumGray}\n            />\n          </View>\n\n          <View style={styles.inputRow}>\n            <View style={[styles.inputGroup, { flex: 2 }]}>\n              <Text style={styles.inputLabel}>City *</Text>\n              <TextInput\n                style={styles.textInput}\n                value={formData.city}\n                onChangeText={_value => updateField('city', _value)}\n                placeholder=\"London\"\n                placeholderTextColor={Colors.mediumGray}\n              />\n            </View>\n\n            <View style={[styles.inputGroup, { flex: 1, marginLeft: 12 }]}>\n              <Text style={styles.inputLabel}>Postcode *</Text>\n              <TextInput\n                style={styles.textInput}\n                value={formData.zipCode}\n                onChangeText={_value => updateField('zipCode', _value)}\n                placeholder=\"SW1A 1AA\"\n                placeholderTextColor={Colors.mediumGray}\n                autoCapitalize=\"characters\"\n              />\n            </View>\n          </View>\n        </View>\n\n        {/* Business Settings */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Business Settings</Text>\n\n          <View style={styles.inputGroup}>\n            <Text style={styles.inputLabel}>Currency</Text>\n            <ScrollView\n              horizontal\n              showsHorizontalScrollIndicator={false}\n              style={styles.currencyScroll}>\n              {currencies.map(currency => (\n                <TouchableOpacity\n                  key={currency.code}\n                  style={[\n                    styles.currencyButton,\n                    formData.currency === currency.code && styles.currencyButtonActive,\n                  ]}\n                  onPress={() => updateField('currency', currency.code)}>\n                  <Text\n                    style={[\n                      styles.currencyText,\n                      formData.currency === currency.code && styles.currencyTextActive,\n                    ]}>\n                    {currency.symbol} {currency.code}\n                  </Text>\n                </TouchableOpacity>\n              ))}\n            </ScrollView>\n          </View>\n\n          <View style={styles.inputGroup}>\n            <Text style={styles.inputLabel}>Tax Rate (%)</Text>\n            <TextInput\n              style={styles.textInput}\n              value={(formData.taxRate * 100).toString()}\n              onChangeText={_value => updateField('taxRate', parseFloat(__value) / 100 || 0)}\n              placeholder=\"20\"\n              placeholderTextColor={Colors.mediumGray}\n              keyboardType=\"numeric\"\n            />\n          </View>\n        </View>\n      </ScrollView>\n\n      {/* Save Button */}\n      {hasChanges && (\n        <View style={styles.saveBar}>\n          <TouchableOpacity\n            style={[styles.saveButton, saving && styles.saveButtonDisabled]}\n            onPress={handleSave}\n            disabled={saving}>\n            <Icon name=\"save\" size={20} color={Colors.white} />\n            <Text style={styles.saveButtonText}>{saving ? 'Saving...' : 'Save Changes'}</Text>\n          </TouchableOpacity>\n        </View>\n      )}\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.primary,\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    height: 70,\n  },\n  backButton: {\n    padding: 8,\n  },\n  headerCenter: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  headerTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.white,\n  },\n  headerSubtitle: {\n    fontSize: 12,\n    color: 'rgba(255, 255, 255, 0.8)',\n    marginTop: 2,\n  },\n  resetButton: {\n    padding: 8,\n  },\n  content: {\n    flex: 1,\n    padding: 16,\n  },\n  section: {\n    marginBottom: 24,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 16,\n  },\n  inputGroup: {\n    marginBottom: 16,\n  },\n  inputRow: {\n    flexDirection: 'row',\n  },\n  inputLabel: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 6,\n  },\n  inputHint: {\n    fontSize: 12,\n    color: Colors.mediumGray,\n    marginBottom: 6,\n    fontStyle: 'italic',\n  },\n  textInput: {\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 8,\n    paddingHorizontal: 12,\n    paddingVertical: 10,\n    fontSize: 16,\n    color: Colors.text,\n    backgroundColor: Colors.white,\n  },\n  businessTypeScroll: {\n    marginTop: 8,\n  },\n  businessTypeButton: {\n    paddingHorizontal: 12,\n    paddingVertical: 6,\n    borderRadius: 16,\n    backgroundColor: Colors.lightGray,\n    marginRight: 8,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  businessTypeButtonActive: {\n    backgroundColor: Colors.primary,\n    borderColor: Colors.primary,\n  },\n  businessTypeText: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: Colors.darkGray,\n  },\n  businessTypeTextActive: {\n    color: Colors.white,\n  },\n  currencyScroll: {\n    marginTop: 8,\n  },\n  currencyButton: {\n    paddingHorizontal: 12,\n    paddingVertical: 8,\n    borderRadius: 8,\n    backgroundColor: Colors.lightGray,\n    marginRight: 8,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  currencyButtonActive: {\n    backgroundColor: Colors.secondary,\n    borderColor: Colors.secondary,\n  },\n  currencyText: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.darkGray,\n  },\n  currencyTextActive: {\n    color: Colors.white,\n  },\n  saveBar: {\n    backgroundColor: Colors.white,\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n  },\n  saveButton: {\n    backgroundColor: Colors.primary,\n    borderRadius: 8,\n    paddingVertical: 12,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    gap: 8,\n  },\n  saveButtonDisabled: {\n    backgroundColor: Colors.mediumGray,\n  },\n  saveButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.white,\n  },\n});\n\nexport default RestaurantProfileScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/settings/SettingsScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_filtered' is assigned a value but never used.","line":287,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":287,"endColumn":22},{"ruleId":"react/no-unstable-nested-components","severity":1,"message":"Do not define components during render. React will see a new component type on every render and destroy the entire subtree’s DOM nodes and state (https://reactjs.org/docs/reconciliation.html#elements-of-different-types). Instead, move this component definition out of the parent component “SettingsScreen” and pass data as props. If you want to allow component creation in props, set allowAsProps option to true.","line":380,"column":33,"nodeType":"ArrowFunctionExpression","endLine":380,"endColumn":72},{"ruleId":"react/no-unstable-nested-components","severity":1,"message":"Do not define components during render. React will see a new component type on every render and destroy the entire subtree’s DOM nodes and state (https://reactjs.org/docs/reconciliation.html#elements-of-different-types). Instead, move this component definition out of the parent component “SettingsScreen” and pass data as props. If you want to allow component creation in props, set allowAsProps option to true.","line":381,"column":30,"nodeType":"ArrowFunctionExpression","endLine":385,"endColumn":10}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  StatusBar,\n  SafeAreaView,\n  TouchableOpacity,\n  TextInput,\n  FlatList,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation } from '@react-navigation/native';\nimport { useRestaurantDisplayName } from '../../hooks/useRestaurantConfig';\nimport Colors from '../../constants/Colors';\nimport { SubscriptionStatusCard } from '../../components/subscription/SubscriptionStatusBadge';\n\ninterface SettingsCategory {\n  id: string;\n  title: string;\n  description: string;\n  icon: string;\n  route: string;\n  color: string;\n  badge?: number;\n  settings: SettingsItem[];\n}\n\ninterface SettingsItem {\n  id: string;\n  title: string;\n  description: string;\n  icon: string;\n  route: string;\n}\n\nconst SettingsScreen: React.FC = () => {\n  const navigation = useNavigation();\n  const restaurantDisplayName = useRestaurantDisplayName();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [filteredCategories, setFilteredCategories] = useState<SettingsCategory[]>([]);\n\n  const settingsCategories: SettingsCategory[] = [\n    {\n      id: 'business',\n      title: 'Business Settings',\n      description: 'Company information, _taxes, and receipts',\n      icon: 'business',\n      route: 'BusinessSettings',\n      color: Colors.primary,\n      settings: [\n        {\n          id: 'business-info',\n          title: 'Business Information',\n          description: 'Company name, _address, and contact details',\n          icon: 'business-center',\n          route: 'BusinessInformation',\n        },\n        {\n          id: 'tax-config',\n          title: 'Tax Configuration',\n          description: 'VAT rates, tax exemptions, and reporting',\n          icon: 'receipt-long',\n          route: 'TaxConfiguration',\n        },\n        {\n          id: 'payment-methods',\n          title: 'Payment Methods',\n          description: 'Enable payment options and processing fees',\n          icon: 'payment',\n          route: 'PaymentMethods',\n        },\n        {\n          id: 'receipt-custom',\n          title: 'Receipt Customization',\n          description: 'Logo, footer text, and contact information',\n          icon: 'receipt',\n          route: 'ReceiptCustomization',\n        },\n        {\n          id: 'operating-hours',\n          title: 'Operating Hours',\n          description: 'Business hours, _holidays, and special events',\n          icon: 'schedule',\n          route: 'OperatingHours',\n        },\n      ],\n    },\n    {\n      id: 'platform',\n      title: 'Platform Settings',\n      description: 'View platform-controlled settings and request overrides',\n      icon: 'admin-panel-settings',\n      route: 'RestaurantPlatformOverrides',\n      color: '#6B73FF',\n      settings: [\n        {\n          id: 'platform-overrides',\n          title: 'Platform Overrides',\n          description: 'View and request changes to platform settings',\n          icon: 'settings-applications',\n          route: 'RestaurantPlatformOverrides',\n        },\n      ],\n    },\n    {\n      id: 'hardware',\n      title: 'Hardware Configuration',\n      description: 'Printers, cash drawers, and connected devices',\n      icon: 'devices',\n      route: 'HardwareSettings',\n      color: Colors.secondary,\n      settings: [\n        {\n          id: 'printer-setup',\n          title: 'Printer Setup',\n          description: 'Receipt and kitchen printer configuration',\n          icon: 'print',\n          route: 'PrinterSetup',\n        },\n        {\n          id: 'cash-drawer',\n          title: 'Cash Drawer',\n          description: 'Drawer kick settings and security',\n          icon: 'inventory-2',\n          route: 'CashDrawer',\n        },\n        {\n          id: 'barcode-scanner',\n          title: 'Barcode Scanner',\n          description: 'Scanner configuration and test scans',\n          icon: 'qr-code-scanner',\n          route: 'BarcodeScanner',\n        },\n        {\n          id: 'card-reader',\n          title: 'Card Reader',\n          description: 'Payment terminal setup and testing',\n          icon: 'credit-card',\n          route: 'CardReader',\n        },\n        {\n          id: 'hardware-diagnostics',\n          title: 'Hardware Diagnostics',\n          description: 'Device connectivity and status monitoring',\n          icon: 'computer',\n          route: 'HardwareDiagnostics',\n        },\n      ],\n    },\n    {\n      id: 'user',\n      title: 'User Preferences',\n      description: 'Personal settings and accessibility options',\n      icon: 'person',\n      route: 'UserSettings',\n      color: Colors.warning,\n      settings: [\n        {\n          id: 'user-profile',\n          title: 'User Profile',\n          description: 'Personal information and PIN settings',\n          icon: 'account-circle',\n          route: 'UserProfile',\n        },\n        {\n          id: 'notifications',\n          title: 'Notification Settings',\n          description: 'Sound alerts and popup preferences',\n          icon: 'notifications',\n          route: 'NotificationSettings',\n        },\n        {\n          id: 'theme-options',\n          title: 'Theme & Display',\n          description: 'Dark mode, _colors, and visual preferences',\n          icon: 'palette',\n          route: 'ThemeOptions',\n        },\n        {\n          id: 'localization',\n          title: 'Language & Region',\n          description: 'Language, _currency, and date formats',\n          icon: 'language',\n          route: 'Localization',\n        },\n        {\n          id: 'accessibility',\n          title: 'Accessibility',\n          description: 'Font sizes, _contrast, and screen reader',\n          icon: 'accessibility',\n          route: 'Accessibility',\n        },\n      ],\n    },\n    {\n      id: 'app',\n      title: 'App Configuration',\n      description: 'Menu management, _backups, and system tools',\n      icon: 'settings',\n      route: 'AppSettings',\n      color: Colors.darkGray,\n      settings: [\n        {\n          id: 'menu-management',\n          title: 'Menu Management',\n          description: 'Categories, _items, and modifiers',\n          icon: 'restaurant-menu',\n          route: 'SettingsMenuManagement',\n        },\n        {\n          id: 'recipes-management', // New ID for recipe settings\n          title: 'Recipe Management',\n          description: 'Create and manage recipes for menu items',\n          icon: 'menu-book', // Or a more suitable icon like 'blender', 'restaurant'\n          route: 'RecipesScreen', // Route to the new RecipesScreen\n        },\n        {\n          id: 'pricing-discounts',\n          title: 'Pricing & Discounts',\n          description: 'Price rules and promotional codes',\n          icon: 'local-offer',\n          route: 'PricingDiscounts',\n        },\n        {\n          id: 'backup-restore',\n          title: 'Backup & Restore',\n          description: 'Cloud sync and local backups',\n          icon: 'backup',\n          route: 'BackupRestore',\n        },\n        {\n          id: 'data-export',\n          title: 'Data Export',\n          description: 'Export reports and transaction history',\n          icon: 'file-download',\n          route: 'DataExport',\n        },\n        {\n          id: 'system-diagnostics',\n          title: 'System Diagnostics',\n          description: 'App health and performance metrics',\n          icon: 'bug-report',\n          route: 'SystemDiagnostics',\n        },\n        ...(__DEV__\n          ? [\n              {\n                id: 'developer-settings',\n                title: 'Developer Settings',\n                description: 'Mock data, API toggles, and debug options',\n                icon: 'developer-mode',\n                route: 'DeveloperSettings',\n              },\n            ]\n          : []),\n      ],\n    },\n    {\n      id: 'integrations',\n      title: 'Integrations',\n      description: 'Connect with accounting and business tools',\n      icon: 'integration-instructions',\n      route: 'XeroSettings',\n      color: '#1271FF',\n      settings: [\n        {\n          id: 'xero-integration',\n          title: 'Xero Accounting',\n          description: 'Sync sales, _customers, and products with Xero',\n          icon: 'account-balance',\n          route: 'XeroSettings',\n        },\n      ],\n    },\n  ];\n\n  React.useEffect(() => {\n    setFilteredCategories(__settingsCategories);\n  }, []);\n\n  const handleSearch = (query: _string) => {\n    setSearchQuery(__query);\n    if (query.trim() === '') {\n      setFilteredCategories(__settingsCategories);\n    } else {\n      const _filtered = settingsCategories.filter(\n        category =>\n          category.title.toLowerCase().includes(query.toLowerCase()) ||\n          category.description.toLowerCase().includes(query.toLowerCase()) ||\n          category.settings.some(\n            setting =>\n              setting.title.toLowerCase().includes(query.toLowerCase()) ||\n              setting.description.toLowerCase().includes(query.toLowerCase()),\n          ),\n      );\n      setFilteredCategories(__filtered);\n    }\n  };\n\n  const handleCategoryPress = (category: _SettingsCategory) => {\n    navigation.navigate(category.route as never);\n  };\n\n  const renderSettingsCategory = ({ item }: { item: SettingsCategory }) => (\n    <TouchableOpacity\n      style={styles.categoryCard}\n      onPress={() => handleCategoryPress(__item)}\n      activeOpacity={0.7}>\n      <View style={[styles.categoryIcon, { backgroundColor: `${item.color}15` }]}>\n        <Icon name={item.icon} size={32} color={item.color} />\n      </View>\n\n      <View style={styles.categoryContent}>\n        <View style={styles.categoryHeader}>\n          <Text style={styles.categoryTitle}>{item.title}</Text>\n          {item.badge && (\n            <View style={styles.categoryBadge}>\n              <Text style={styles.categoryBadgeText}>{item.badge}</Text>\n            </View>\n          )}\n        </View>\n        <Text style={styles.categoryDescription}>{item.description}</Text>\n        <Text style={styles.categoryItemCount}>{item.settings.length} settings</Text>\n      </View>\n\n      <Icon name=\"chevron-right\" size={24} color={Colors.lightGray} />\n    </TouchableOpacity>\n  );\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <StatusBar backgroundColor={Colors.primary} barStyle=\"light-content\" />\n\n      {/* Header */}\n      <View style={styles.header}>\n        <TouchableOpacity\n          style={styles.backButton}\n          onPress={() => navigation.goBack()}\n          activeOpacity={0.7}>\n          <Icon name=\"arrow-back\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n\n        <View style={styles.headerCenter}>\n          <Text style={styles.headerTitle}>{restaurantDisplayName} Settings</Text>\n          <Text style={styles.headerSubtitle}>Configure your POS system</Text>\n        </View>\n\n        <TouchableOpacity style={styles.helpButton}>\n          <Icon name=\"help-outline\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n      </View>\n\n      {/* Search Bar */}\n      <View style={styles.searchSection}>\n        <View style={styles.searchContainer}>\n          <Icon name=\"search\" size={20} color={Colors.darkGray} />\n          <TextInput\n            style={styles.searchInput}\n            placeholder=\"Search settings...\"\n            value={searchQuery}\n            onChangeText={handleSearch}\n            placeholderTextColor={Colors.darkGray}\n          />\n          {searchQuery.length > 0 && (\n            <TouchableOpacity onPress={() => handleSearch('')}>\n              <Icon name=\"clear\" size={20} color={Colors.darkGray} />\n            </TouchableOpacity>\n          )}\n        </View>\n      </View>\n\n      {/* Settings Categories */}\n      <FlatList\n        data={filteredCategories}\n        renderItem={renderSettingsCategory}\n        keyExtractor={item => item.id}\n        contentContainerStyle={styles.categoriesList}\n        showsVerticalScrollIndicator={false}\n        ItemSeparatorComponent={() => <View style={styles.separator} />}\n        ListHeaderComponent={() => (\n          <View style={styles.subscriptionSection}>\n            <SubscriptionStatusCard />\n          </View>\n        )}\n        ListEmptyComponent={\n          <View style={styles.emptyState}>\n            <Icon name=\"search-off\" size={64} color={Colors.lightGray} />\n            <Text style={styles.emptyStateText}>No settings found</Text>\n            <Text style={styles.emptyStateSubtext}>Try adjusting your search terms</Text>\n          </View>\n        }\n      />\n\n      {/* Quick Actions */}\n      <View style={styles.quickActions}>\n        <TouchableOpacity style={styles.quickActionButton}>\n          <Icon name=\"backup\" size={20} color={Colors.primary} />\n          <Text style={styles.quickActionText}>Backup Now</Text>\n        </TouchableOpacity>\n        <TouchableOpacity style={styles.quickActionButton}>\n          <Icon name=\"bug-report\" size={20} color={Colors.warning} />\n          <Text style={styles.quickActionText}>System Check</Text>\n        </TouchableOpacity>\n        <TouchableOpacity style={styles.quickActionButton}>\n          <Icon name=\"help\" size={20} color={Colors.secondary} />\n          <Text style={styles.quickActionText}>Get Help</Text>\n        </TouchableOpacity>\n      </View>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.primary,\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    height: 70,\n  },\n  backButton: {\n    padding: 12,\n    marginRight: 8,\n    borderRadius: 8,\n    backgroundColor: 'rgba(255, 255, 255, 0.1)',\n    minWidth: 44,\n    minHeight: 44,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  headerCenter: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  headerTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.white,\n  },\n  headerSubtitle: {\n    fontSize: 12,\n    color: 'rgba(255, 255, 255, 0.8)',\n    marginTop: 2,\n  },\n  helpButton: {\n    padding: 8,\n  },\n  searchSection: {\n    backgroundColor: Colors.white,\n    paddingVertical: 16,\n    paddingHorizontal: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  searchContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: Colors.background,\n    borderRadius: 12,\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n  },\n  searchInput: {\n    flex: 1,\n    fontSize: 16,\n    color: Colors.text,\n    marginLeft: 12,\n  },\n  categoriesList: {\n    padding: 16,\n  },\n  categoryCard: {\n    backgroundColor: Colors.white,\n    borderRadius: 16,\n    padding: 20,\n    flexDirection: 'row',\n    alignItems: 'center',\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.05,\n    shadowRadius: 4,\n    elevation: 2,\n  },\n  categoryIcon: {\n    width: 64,\n    height: 64,\n    borderRadius: 16,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginRight: 16,\n  },\n  categoryContent: {\n    flex: 1,\n  },\n  categoryHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    marginBottom: 4,\n  },\n  categoryTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  categoryBadge: {\n    backgroundColor: Colors.danger,\n    borderRadius: 12,\n    paddingHorizontal: 8,\n    paddingVertical: 2,\n  },\n  categoryBadgeText: {\n    fontSize: 12,\n    fontWeight: '600',\n    color: Colors.white,\n  },\n  categoryDescription: {\n    fontSize: 14,\n    color: Colors.darkGray,\n    marginBottom: 4,\n  },\n  categoryItemCount: {\n    fontSize: 12,\n    color: Colors.lightText,\n  },\n  separator: {\n    height: 12,\n  },\n  subscriptionSection: {\n    paddingBottom: 20,\n  },\n  emptyState: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 60,\n  },\n  emptyStateText: {\n    fontSize: 18,\n    fontWeight: '500',\n    color: Colors.text,\n    marginTop: 16,\n  },\n  emptyStateSubtext: {\n    fontSize: 14,\n    color: Colors.darkGray,\n    marginTop: 8,\n  },\n  quickActions: {\n    flexDirection: 'row',\n    backgroundColor: Colors.white,\n    paddingVertical: 16,\n    paddingHorizontal: 16,\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n  },\n  quickActionButton: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 12,\n    marginHorizontal: 4,\n    backgroundColor: Colors.background,\n    borderRadius: 12,\n  },\n  quickActionText: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: Colors.text,\n    marginLeft: 6,\n  },\n});\n\nexport default SettingsScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/settings/SubscriptionScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_success' is assigned a value but never used.","line":59,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":59,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_success' is assigned a value but never used.","line":83,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":83,"endColumn":27}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Subscription Management Screen\n *\n * This screen allows restaurant owners to view their current subscription,\n * manage billing, and upgrade/downgrade plans.\n */\n\nimport React, { useState } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  ScrollView,\n  TouchableOpacity,\n  Alert,\n  RefreshControl,\n  ActivityIndicator,\n} from 'react-native';\nimport { useTheme } from '../../contexts/ThemeContext';\nimport { useSubscription } from '../../contexts/SubscriptionContext';\nimport { SettingsCard } from '../../components/settings/SettingsCard';\nimport { SettingsSection } from '../../components/settings/SettingsSection';\nimport Icon from 'react-native-vector-icons/MaterialCommunityIcons';\n\nexport const SubscriptionScreen: React.FC = () => {\n  const { theme } = useTheme();\n  const {\n    subscription,\n    usage,\n    availablePlans,\n    loading,\n    error,\n    formatPrice,\n    changePlan,\n    cancelSubscription,\n    refreshUsage,\n  } = useSubscription();\n\n  const [refreshing, setRefreshing] = useState(__false);\n  const [actionLoading, setActionLoading] = useState(__false);\n\n  const onRefresh = async () => {\n    setRefreshing(__true);\n    await refreshUsage();\n    setRefreshing(__false);\n  };\n\n  const handlePlanChange = (newPlanId: _number, planName: _string) => {\n    if (!subscription) {\n      return;\n    }\n\n    Alert.alert('Change Plan', `Are you sure you want to switch to the ${planName}?`, [\n      { text: 'Cancel', style: 'cancel' },\n      {\n        text: 'Confirm',\n        onPress: async () => {\n          setActionLoading(__true);\n          const _success = await changePlan(__newPlanId);\n          setActionLoading(__false);\n\n          if (__success) {\n            Alert.alert('Success', `Successfully switched to ${planName}`);\n          } else {\n            Alert.alert('Error', 'Failed to change plan. Please try again.');\n          }\n        },\n      },\n    ]);\n  };\n\n  const handleCancelSubscription = () => {\n    Alert.alert(\n      'Cancel Subscription',\n      'Are you sure you want to cancel your subscription? You will lose access to premium features.',\n      [\n        { text: 'Keep Subscription', style: 'cancel' },\n        {\n          text: 'Cancel Subscription',\n          style: 'destructive',\n          onPress: async () => {\n            setActionLoading(__true);\n            const _success = await cancelSubscription();\n            setActionLoading(__false);\n\n            if (__success) {\n              Alert.alert('Cancelled', 'Your subscription has been cancelled.');\n            } else {\n              Alert.alert('Error', 'Failed to cancel subscription. Please try again.');\n            }\n          },\n        },\n      ],\n    );\n  };\n\n  const getStatusColor = (_status: _string) => {\n    switch (__status) {\n      case 'active':\n        return theme.colors.success;\n      case 'trial':\n        return theme.colors.warning;\n      case 'cancelled':\n      case 'suspended':\n        return theme.colors.error;\n      default:\n        return theme.colors.textSecondary;\n    }\n  };\n\n  const getStatusIcon = (_status: _string) => {\n    switch (__status) {\n      case 'active':\n        return 'check-circle';\n      case 'trial':\n        return 'clock-outline';\n      case 'cancelled':\n        return 'cancel';\n      case 'suspended':\n        return 'pause-circle';\n      default:\n        return 'help-circle';\n    }\n  };\n\n  const getUsagePercentage = (used: _number, limit: number | null) => {\n    if (limit === null) {\n      return 0;\n    } // Unlimited\n    return Math.min(100, (used / limit) * 100);\n  };\n\n  const getUsageColor = (percentage: _number) => {\n    if (percentage >= 90) {\n      return theme.colors.error;\n    }\n    if (percentage >= 75) {\n      return theme.colors.warning;\n    }\n    return theme.colors.success;\n  };\n\n  if (loading && !subscription) {\n    return (\n      <View style={[styles.loadingContainer, { backgroundColor: theme.colors.background }]}>\n        <ActivityIndicator size=\"large\" color={theme.colors.primary} />\n        <Text style={[styles.loadingText, { color: theme.colors.text }]}>\n          Loading subscription...\n        </Text>\n      </View>\n    );\n  }\n\n  if (error && !subscription) {\n    return (\n      <View style={[styles.errorContainer, { backgroundColor: theme.colors.background }]}>\n        <Icon name=\"alert-circle\" size={48} color={theme.colors.error} />\n        <Text style={[styles.errorText, { color: theme.colors.error }]}>{error}</Text>\n        <TouchableOpacity\n          style={[styles.retryButton, { backgroundColor: theme.colors.primary }]}\n          onPress={onRefresh}>\n          <Text style={[styles.retryButtonText, { color: theme.colors.surface }]}>Retry</Text>\n        </TouchableOpacity>\n      </View>\n    );\n  }\n\n  return (\n    <ScrollView\n      style={[styles.container, { backgroundColor: theme.colors.background }]}\n      refreshControl={\n        <RefreshControl\n          refreshing={refreshing}\n          onRefresh={onRefresh}\n          tintColor={theme.colors.primary}\n        />\n      }>\n      {/* Current Subscription */}\n      {subscription && (\n        <SettingsSection title=\"Current Subscription\">\n          <SettingsCard>\n            <View style={styles.subscriptionHeader}>\n              <View style={styles.subscriptionInfo}>\n                <Text style={[styles.planName, { color: theme.colors.text }]}>\n                  {subscription.plan.display_name}\n                </Text>\n                <View style={styles.statusContainer}>\n                  <Icon\n                    name={getStatusIcon(subscription.status)}\n                    size={16}\n                    color={getStatusColor(subscription.status)}\n                  />\n                  <Text style={[styles.status, { color: getStatusColor(subscription.status) }]}>\n                    {subscription.status.charAt(0).toUpperCase() + subscription.status.slice(1)}\n                  </Text>\n                </View>\n              </View>\n              <Text style={[styles.price, { color: theme.colors.text }]}>\n                {formatPrice(subscription.plan.price_monthly)}/month\n              </Text>\n            </View>\n\n            <View style={styles.subscriptionDetails}>\n              {subscription.is_trial && subscription.trial_end_date && (\n                <Text style={[styles.trialInfo, { color: theme.colors.warning }]}>\n                  Trial ends in {subscription.days_until_renewal} days\n                </Text>\n              )}\n\n              <Text style={[styles.renewalInfo, { color: theme.colors.textSecondary }]}>\n                {subscription.is_trial\n                  ? 'Trial period'\n                  : `Renews in ${subscription.days_until_renewal} days`}\n              </Text>\n            </View>\n          </SettingsCard>\n        </SettingsSection>\n      )}\n\n      {/* Usage Statistics */}\n      {usage && subscription && (\n        <SettingsSection title=\"Usage This Month\">\n          <SettingsCard>\n            {/* Orders Usage */}\n            <View style={styles.usageItem}>\n              <View style={styles.usageHeader}>\n                <Text style={[styles.usageLabel, { color: theme.colors.text }]}>Orders</Text>\n                <Text style={[styles.usageValue, { color: theme.colors.text }]}>\n                  {usage.orders_count}\n                  {subscription.plan.max_orders_per_month &&\n                    ` / ${subscription.plan.max_orders_per_month}`}\n                </Text>\n              </View>\n              {subscription.plan.max_orders_per_month && (\n                <View style={styles.progressBar}>\n                  <View\n                    style={[\n                      styles.progressFill,\n                      {\n                        width: `${getUsagePercentage(\n                          usage.orders_count,\n                          subscription.plan.max_orders_per_month,\n                        )}%`,\n                        backgroundColor: getUsageColor(\n                          getUsagePercentage(\n                            usage.orders_count,\n                            subscription.plan.max_orders_per_month,\n                          ),\n                        ),\n                      },\n                    ]}\n                  />\n                </View>\n              )}\n            </View>\n\n            {/* Staff Usage */}\n            <View style={styles.usageItem}>\n              <View style={styles.usageHeader}>\n                <Text style={[styles.usageLabel, { color: theme.colors.text }]}>\n                  Staff Accounts\n                </Text>\n                <Text style={[styles.usageValue, { color: theme.colors.text }]}>\n                  {usage.staff_count}\n                  {subscription.plan.max_staff_accounts &&\n                    ` / ${subscription.plan.max_staff_accounts}`}\n                </Text>\n              </View>\n              {subscription.plan.max_staff_accounts && (\n                <View style={styles.progressBar}>\n                  <View\n                    style={[\n                      styles.progressFill,\n                      {\n                        width: `${getUsagePercentage(\n                          usage.staff_count,\n                          subscription.plan.max_staff_accounts,\n                        )}%`,\n                        backgroundColor: getUsageColor(\n                          getUsagePercentage(\n                            usage.staff_count,\n                            subscription.plan.max_staff_accounts,\n                          ),\n                        ),\n                      },\n                    ]}\n                  />\n                </View>\n              )}\n            </View>\n\n            {/* Menu Items Usage */}\n            <View style={styles.usageItem}>\n              <View style={styles.usageHeader}>\n                <Text style={[styles.usageLabel, { color: theme.colors.text }]}>Menu Items</Text>\n                <Text style={[styles.usageValue, { color: theme.colors.text }]}>\n                  {usage.menu_items_count}\n                  {subscription.plan.max_menu_items && ` / ${subscription.plan.max_menu_items}`}\n                </Text>\n              </View>\n              {subscription.plan.max_menu_items && (\n                <View style={styles.progressBar}>\n                  <View\n                    style={[\n                      styles.progressFill,\n                      {\n                        width: `${getUsagePercentage(\n                          usage.menu_items_count,\n                          subscription.plan.max_menu_items,\n                        )}%`,\n                        backgroundColor: getUsageColor(\n                          getUsagePercentage(\n                            usage.menu_items_count,\n                            subscription.plan.max_menu_items,\n                          ),\n                        ),\n                      },\n                    ]}\n                  />\n                </View>\n              )}\n            </View>\n          </SettingsCard>\n        </SettingsSection>\n      )}\n\n      {/* Available Plans */}\n      {availablePlans.length > 0 && (\n        <SettingsSection title=\"Available Plans\">\n          {availablePlans.map(plan => {\n            const isCurrentPlan = subscription?.plan_id === plan.id;\n            const isDowngrade =\n              subscription && plan.price_monthly < subscription.plan.price_monthly;\n\n            return (\n              <SettingsCard\n                key={plan.id}\n                style={isCurrentPlan ? styles.currentPlanCard : undefined}>\n                <View style={styles.planHeader}>\n                  <View style={styles.planInfo}>\n                    <Text style={[styles.planTitle, { color: theme.colors.text }]}>\n                      {plan.display_name}\n                      {isCurrentPlan && (\n                        <Text style={[styles.currentBadge, { color: theme.colors.primary }]}>\n                          {' '}\n                          (__Current)\n                        </Text>\n                      )}\n                    </Text>\n                    <Text style={[styles.planPrice, { color: theme.colors.textSecondary }]}>\n                      {formatPrice(plan.price_monthly)}/month\n                    </Text>\n                    {plan.yearly_savings && plan.yearly_savings > 0 && (\n                      <Text style={[styles.savings, { color: theme.colors.success }]}>\n                        Save {formatPrice(plan.yearly_savings)} yearly\n                      </Text>\n                    )}\n                  </View>\n\n                  {!isCurrentPlan && (\n                    <TouchableOpacity\n                      style={[\n                        styles.planButton,\n                        {\n                          backgroundColor: isDowngrade\n                            ? theme.colors.warning\n                            : theme.colors.primary,\n                        },\n                      ]}\n                      onPress={() => handlePlanChange(plan.id, plan.display_name)}\n                      disabled={actionLoading}>\n                      <Text style={[styles.planButtonText, { color: theme.colors.surface }]}>\n                        {isDowngrade ? 'Downgrade' : 'Upgrade'}\n                      </Text>\n                    </TouchableOpacity>\n                  )}\n                </View>\n\n                {/* Plan Features */}\n                <View style={styles.planFeatures}>\n                  <Text style={[styles.featuresTitle, { color: theme.colors.textSecondary }]}>\n                    Features:\n                  </Text>\n                  <View style={styles.featuresList}>\n                    {plan.max_orders_per_month && (\n                      <Text style={[styles.featureItem, { color: theme.colors.textSecondary }]}>\n                        • {plan.max_orders_per_month} orders/month\n                      </Text>\n                    )}\n                    {!plan.max_orders_per_month && (\n                      <Text style={[styles.featureItem, { color: theme.colors.textSecondary }]}>\n                        • Unlimited orders\n                      </Text>\n                    )}\n                    {plan.max_staff_accounts && (\n                      <Text style={[styles.featureItem, { color: theme.colors.textSecondary }]}>\n                        • {plan.max_staff_accounts} staff accounts\n                      </Text>\n                    )}\n                    {!plan.max_staff_accounts && (\n                      <Text style={[styles.featureItem, { color: theme.colors.textSecondary }]}>\n                        • Unlimited staff accounts\n                      </Text>\n                    )}\n                    {plan.features.advanced_analytics && (\n                      <Text style={[styles.featureItem, { color: theme.colors.textSecondary }]}>\n                        • Advanced analytics\n                      </Text>\n                    )}\n                    {plan.features.inventory_management && (\n                      <Text style={[styles.featureItem, { color: theme.colors.textSecondary }]}>\n                        • Inventory management\n                      </Text>\n                    )}\n                    {plan.features.multi_location && (\n                      <Text style={[styles.featureItem, { color: theme.colors.textSecondary }]}>\n                        • Multi-location support\n                      </Text>\n                    )}\n                  </View>\n                </View>\n              </SettingsCard>\n            );\n          })}\n        </SettingsSection>\n      )}\n\n      {/* Subscription Management */}\n      {subscription && subscription.status !== 'cancelled' && (\n        <SettingsSection title=\"Subscription Management\">\n          <SettingsCard>\n            <TouchableOpacity\n              style={styles.managementButton}\n              onPress={handleCancelSubscription}\n              disabled={actionLoading}>\n              <Icon name=\"cancel\" size={20} color={theme.colors.error} />\n              <Text style={[styles.managementButtonText, { color: theme.colors.error }]}>\n                Cancel Subscription\n              </Text>\n            </TouchableOpacity>\n          </SettingsCard>\n        </SettingsSection>\n      )}\n\n      {actionLoading && (\n        <View style={styles.loadingOverlay}>\n          <ActivityIndicator size=\"large\" color={theme.colors.primary} />\n        </View>\n      )}\n    </ScrollView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  loadingText: {\n    marginTop: 16,\n    fontSize: 16,\n  },\n  errorContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 32,\n  },\n  errorText: {\n    fontSize: 16,\n    textAlign: 'center',\n    marginVertical: 16,\n  },\n  retryButton: {\n    paddingHorizontal: 24,\n    paddingVertical: 12,\n    borderRadius: 8,\n  },\n  retryButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  subscriptionHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    marginBottom: 12,\n  },\n  subscriptionInfo: {\n    flex: 1,\n  },\n  planName: {\n    fontSize: 18,\n    fontWeight: '600',\n    marginBottom: 4,\n  },\n  statusContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  status: {\n    fontSize: 14,\n    marginLeft: 4,\n    fontWeight: '500',\n  },\n  price: {\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  subscriptionDetails: {\n    borderTopWidth: 1,\n    borderTopColor: '#E5E5E5',\n    paddingTop: 12,\n  },\n  trialInfo: {\n    fontSize: 14,\n    fontWeight: '500',\n    marginBottom: 4,\n  },\n  renewalInfo: {\n    fontSize: 14,\n  },\n  usageItem: {\n    marginBottom: 16,\n  },\n  usageHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  usageLabel: {\n    fontSize: 14,\n    fontWeight: '500',\n  },\n  usageValue: {\n    fontSize: 14,\n    fontWeight: '600',\n  },\n  progressBar: {\n    height: 6,\n    backgroundColor: '#E5E5E5',\n    borderRadius: 3,\n    overflow: 'hidden',\n  },\n  progressFill: {\n    height: '100%',\n    borderRadius: 3,\n  },\n  currentPlanCard: {\n    borderWidth: 2,\n    borderColor: '#007AFF',\n  },\n  planHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    marginBottom: 12,\n  },\n  planInfo: {\n    flex: 1,\n  },\n  planTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    marginBottom: 4,\n  },\n  currentBadge: {\n    fontSize: 14,\n    fontWeight: '500',\n  },\n  planPrice: {\n    fontSize: 14,\n    marginBottom: 2,\n  },\n  savings: {\n    fontSize: 12,\n    fontWeight: '500',\n  },\n  planButton: {\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    borderRadius: 6,\n  },\n  planButtonText: {\n    fontSize: 14,\n    fontWeight: '600',\n  },\n  planFeatures: {\n    borderTopWidth: 1,\n    borderTopColor: '#E5E5E5',\n    paddingTop: 12,\n  },\n  featuresTitle: {\n    fontSize: 14,\n    fontWeight: '500',\n    marginBottom: 8,\n  },\n  featuresList: {\n    gap: 4,\n  },\n  featureItem: {\n    fontSize: 13,\n    lineHeight: 18,\n  },\n  managementButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 12,\n  },\n  managementButtonText: {\n    fontSize: 16,\n    fontWeight: '500',\n    marginLeft: 8,\n  },\n  loadingOverlay: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: 'rgba(0,0,0,0.3)',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default SubscriptionScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/settings/UserSettingsScreen.tsx","messages":[{"ruleId":"react/no-unstable-nested-components","severity":1,"message":"Do not define components during render. React will see a new component type on every render and destroy the entire subtree’s DOM nodes and state (https://reactjs.org/docs/reconciliation.html#elements-of-different-types). Instead, move this component definition out of the parent component “UserSettingsScreen” and pass data as props. If you want to allow component creation in props, set allowAsProps option to true.","line":138,"column":33,"nodeType":"ArrowFunctionExpression","endLine":138,"endColumn":72}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  StatusBar,\n  SafeAreaView,\n  TouchableOpacity,\n  FlatList,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation } from '@react-navigation/native';\n\n// Clover POS Color Scheme\nconst Colors = {\n  primary: '#00A651',\n  secondary: '#0066CC',\n  success: '#00A651',\n  warning: '#FF6B35',\n  danger: '#E74C3C',\n  background: '#F5F5F5',\n  white: '#FFFFFF',\n  lightGray: '#E5E5E5',\n  mediumGray: '#999999',\n  darkGray: '#666666',\n  text: '#333333',\n  lightText: '#666666',\n  border: '#DDDDDD',\n};\n\ninterface UserSettingsItem {\n  id: string;\n  title: string;\n  description: string;\n  icon: string;\n  route: string;\n  value?: string;\n}\n\nconst UserSettingsScreen: React.FC = () => {\n  const navigation = useNavigation();\n\n  const userSettings: UserSettingsItem[] = [\n    {\n      id: 'user-profile',\n      title: 'User Profile',\n      description: 'Personal information and PIN settings',\n      icon: 'account-circle',\n      route: 'UserProfile',\n      value: 'John Doe',\n    },\n    {\n      id: 'notifications',\n      title: 'Notification Settings',\n      description: 'Sound alerts and popup preferences',\n      icon: 'notifications',\n      route: 'NotificationSettings',\n      value: 'Enabled',\n    },\n    {\n      id: 'theme-options',\n      title: 'Theme & Display',\n      description: 'Dark mode, _colors, and visual preferences',\n      icon: 'palette',\n      route: 'ThemeOptions',\n      value: 'Light Mode',\n    },\n  ];\n\n  const handleSettingPress = (item: _UserSettingsItem) => {\n    navigation.navigate(item.route as never);\n  };\n\n  const renderSettingItem = ({ item }: { item: UserSettingsItem }) => (\n    <TouchableOpacity\n      style={styles.settingCard}\n      onPress={() => handleSettingPress(__item)}\n      activeOpacity={0.7}>\n      <View style={[styles.settingIcon, { backgroundColor: `${Colors.warning}15` }]}>\n        <Icon name={item.icon} size={24} color={Colors.warning} />\n      </View>\n\n      <View style={styles.settingContent}>\n        <Text style={styles.settingTitle}>{item.title}</Text>\n        <Text style={styles.settingDescription}>{item.description}</Text>\n        {item.value && <Text style={styles.settingValue}>{item.value}</Text>}\n      </View>\n\n      <Icon name=\"chevron-right\" size={24} color={Colors.lightGray} />\n    </TouchableOpacity>\n  );\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <StatusBar backgroundColor={Colors.warning} barStyle=\"light-content\" />\n\n      {/* Header */}\n      <View style={styles.header}>\n        <TouchableOpacity\n          style={styles.backButton}\n          onPress={() => navigation.goBack()}\n          testID=\"back-button\">\n          <Icon name=\"arrow-back\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n\n        <View style={styles.headerCenter}>\n          <Text style={styles.headerTitle}>User Preferences</Text>\n          <Text style={styles.headerSubtitle}>Personalize your experience</Text>\n        </View>\n\n        <TouchableOpacity style={styles.helpButton}>\n          <Icon name=\"help-outline\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n      </View>\n\n      {/* User Profile Summary */}\n      <View style={styles.profileSummary}>\n        <View style={styles.profileAvatar}>\n          <Icon name=\"person\" size={32} color={Colors.white} />\n        </View>\n        <View style={styles.profileInfo}>\n          <Text style={styles.profileName}>John Doe</Text>\n          <Text style={styles.profileRole}>Store Manager</Text>\n          <Text style={styles.profileLastLogin}>Last login: Today at 9:15 AM</Text>\n        </View>\n        <TouchableOpacity style={styles.profileEditButton}>\n          <Icon name=\"edit\" size={20} color={Colors.warning} />\n        </TouchableOpacity>\n      </View>\n\n      {/* User Settings List */}\n      <FlatList\n        data={userSettings}\n        renderItem={renderSettingItem}\n        keyExtractor={item => item.id}\n        contentContainerStyle={styles.settingsList}\n        showsVerticalScrollIndicator={false}\n        ItemSeparatorComponent={() => <View style={styles.separator} />}\n      />\n\n      {/* Footer Actions */}\n      <View style={styles.footer}>\n        <TouchableOpacity style={styles.footerButton}>\n          <Icon name=\"logout\" size={20} color={Colors.danger} />\n          <Text style={[styles.footerButtonText, { color: Colors.danger }]}>Sign Out</Text>\n        </TouchableOpacity>\n        <TouchableOpacity style={styles.footerButton}>\n          <Icon name=\"lock-reset\" size={20} color={Colors.secondary} />\n          <Text style={styles.footerButtonText}>Change PIN</Text>\n        </TouchableOpacity>\n      </View>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.warning,\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    height: 70,\n  },\n  backButton: {\n    padding: 8,\n  },\n  headerCenter: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  headerTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.white,\n  },\n  headerSubtitle: {\n    fontSize: 12,\n    color: 'rgba(255, 255, 255, 0.8)',\n    marginTop: 2,\n  },\n  helpButton: {\n    padding: 8,\n  },\n  profileSummary: {\n    backgroundColor: Colors.white,\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 20,\n    paddingVertical: 20,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  profileAvatar: {\n    width: 60,\n    height: 60,\n    borderRadius: 30,\n    backgroundColor: Colors.warning,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginRight: 16,\n  },\n  profileInfo: {\n    flex: 1,\n  },\n  profileName: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  profileRole: {\n    fontSize: 14,\n    color: Colors.warning,\n    fontWeight: '500',\n    marginBottom: 2,\n  },\n  profileLastLogin: {\n    fontSize: 12,\n    color: Colors.mediumGray,\n  },\n  profileEditButton: {\n    padding: 8,\n    backgroundColor: Colors.background,\n    borderRadius: 8,\n  },\n  settingsList: {\n    padding: 16,\n  },\n  settingCard: {\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    padding: 16,\n    flexDirection: 'row',\n    alignItems: 'center',\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.05,\n    shadowRadius: 4,\n    elevation: 2,\n  },\n  settingIcon: {\n    width: 48,\n    height: 48,\n    borderRadius: 12,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginRight: 16,\n  },\n  settingContent: {\n    flex: 1,\n  },\n  settingTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  settingDescription: {\n    fontSize: 14,\n    color: Colors.darkGray,\n    marginBottom: 2,\n  },\n  settingValue: {\n    fontSize: 12,\n    color: Colors.warning,\n    fontWeight: '500',\n  },\n  separator: {\n    height: 12,\n  },\n  footer: {\n    flexDirection: 'row',\n    backgroundColor: Colors.white,\n    paddingVertical: 16,\n    paddingHorizontal: 16,\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n    gap: 12,\n  },\n  footerButton: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 12,\n    backgroundColor: Colors.background,\n    borderRadius: 8,\n    gap: 8,\n  },\n  footerButtonText: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.secondary,\n  },\n});\n\nexport default UserSettingsScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/settings/XeroSettingsScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_isConnected' is assigned a value but never used.","line":49,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":49,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_tokens' is assigned a value but never used.","line":142,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":142,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_isConnected' is assigned a value but never used.","line":190,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":190,"endColumn":25}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  ScrollView,\n  TouchableOpacity,\n  Alert,\n  ActivityIndicator,\n  Linking,\n  RefreshControl,\n} from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport XeroAuthService from '../../services/XeroAuthService';\nimport XeroApiClient from '../../services/XeroApiClient';\nimport { Colors } from '../../design-system/theme';\n\ninterface ConnectionStatus {\n  isConnected: boolean;\n  organization?: unknown;\n  lastSync?: number;\n  error?: string;\n}\n\ninterface SyncStatus {\n  inProgress: boolean;\n  lastSync?: number;\n  error?: string;\n}\n\nconst XeroSettingsScreen: React.FC = () => {\n  const navigation = useNavigation();\n  const [connectionStatus, setConnectionStatus] = useState<ConnectionStatus>({\n    isConnected: _false,\n  });\n  const [syncStatus, setSyncStatus] = useState<SyncStatus>({ inProgress: false });\n  const [loading, setLoading] = useState(__true);\n  const [refreshing, setRefreshing] = useState(__false);\n\n  const authService = XeroAuthService.getInstance();\n  const apiClient = XeroApiClient.getInstance();\n\n  /**\n   * Check connection status\n   */\n  const checkConnectionStatus = useCallback(async () => {\n    try {\n      const _isConnected = await authService.isConnected();\n\n      if (__isConnected) {\n        try {\n          const orgData = await apiClient.getOrganisation();\n          setConnectionStatus({\n            isConnected: _true,\n            organization: orgData?.Organisations?.[0],\n            lastSync: Date.now(),\n          });\n        } catch (__error) {\n          setConnectionStatus({\n            isConnected: _true,\n            error: 'Connected but unable to fetch organization data',\n          });\n        }\n      } else {\n        setConnectionStatus({ isConnected: false });\n      }\n    } catch (__error) {\n      setConnectionStatus({\n        isConnected: _false,\n        error: 'Unable to check connection status',\n      });\n    }\n  }, [authService, apiClient]);\n\n  /**\n   * Handle OAuth connection flow\n   */\n  const handleConnectToXero = async () => {\n    try {\n      setLoading(__true);\n\n      Alert.alert(\n        'Connect to Xero',\n        'You will be redirected to Xero to authorize the connection. Please return to the app after completing the authorization.',\n        [\n          { text: 'Cancel', style: 'cancel' },\n          {\n            text: 'Continue',\n            onPress: async () => {\n              try {\n                await authService.openAuthUrl();\n\n                // Listen for app returning from OAuth flow\n                const _handleURL = (url: _string) => {\n                  if (url.includes('oauth/xero/callback')) {\n                    handleOAuthCallback(__url);\n                  }\n                };\n\n                const subscription = Linking.addEventListener('url', _handleURL);\n\n                // Clean up listener after 5 minutes\n                setTimeout(() => {\n                  subscription?.remove();\n                }, 300000);\n              } catch (__error) {\n                Alert.alert('Error', 'Failed to open Xero authorization. Please try again.');\n              }\n            },\n          },\n        ],\n      );\n    } catch (__error) {\n      Alert.alert('Error', 'Failed to initiate connection to Xero');\n    } finally {\n      setLoading(__false);\n    }\n  };\n\n  /**\n   * Handle OAuth callback\n   */\n  const handleOAuthCallback = async (url: _string) => {\n    try {\n      const urlParams = new URLSearchParams(url.split('?')[1]);\n      const code = urlParams.get('code');\n      const state = urlParams.get('state');\n      const error = urlParams.get('error');\n\n      if (__error) {\n        Alert.alert('Authorization Failed', `Error: ${error}`);\n        return;\n      }\n\n      if (!code || !state) {\n        Alert.alert('Authorization Failed', 'Invalid authorization response');\n        return;\n      }\n\n      setLoading(__true);\n      const _tokens = await authService.exchangeCodeForTokens(__code, _state);\n\n      if (__tokens) {\n        Alert.alert('Success', 'Successfully connected to Xero!');\n        await checkConnectionStatus();\n      }\n    } catch (__error) {\n      Alert.alert('Error', 'Failed to complete Xero authorization');\n    } finally {\n      setLoading(__false);\n    }\n  };\n\n  /**\n   * Handle disconnection\n   */\n  const handleDisconnect = () => {\n    Alert.alert(\n      'Disconnect from Xero',\n      'Are you sure you want to disconnect from Xero? This will stop all data synchronization.',\n      [\n        { text: 'Cancel', style: 'cancel' },\n        {\n          text: 'Disconnect',\n          style: 'destructive',\n          onPress: async () => {\n            try {\n              setLoading(__true);\n              await authService.revokeToken();\n              setConnectionStatus({ isConnected: false });\n              Alert.alert('Disconnected', 'Successfully disconnected from Xero');\n            } catch (__error) {\n              Alert.alert('Error', 'Failed to disconnect from Xero');\n            } finally {\n              setLoading(__false);\n            }\n          },\n        },\n      ],\n    );\n  };\n\n  /**\n   * Test connection\n   */\n  const handleTestConnection = async () => {\n    try {\n      setLoading(__true);\n      const _isConnected = await apiClient.testConnection();\n\n      if (__isConnected) {\n        Alert.alert('Success', 'Connection to Xero is working properly');\n      } else {\n        Alert.alert('Failed', 'Unable to connect to Xero API');\n      }\n    } catch (__error) {\n      Alert.alert('Error', 'Connection test failed');\n    } finally {\n      setLoading(__false);\n    }\n  };\n\n  /**\n   * Manual sync trigger\n   */\n  const handleManualSync = async () => {\n    try {\n      setSyncStatus({ inProgress: true });\n\n      // This is a placeholder - actual sync implementation would go here\n      await new Promise(_resolve => setTimeout(__resolve, 2000));\n\n      setSyncStatus({\n        inProgress: _false,\n        lastSync: Date.now(),\n      });\n\n      Alert.alert('Success', 'Manual sync completed');\n    } catch (__error) {\n      setSyncStatus({\n        inProgress: _false,\n        error: 'Sync failed',\n      });\n      Alert.alert('Error', 'Manual sync failed');\n    }\n  };\n\n  /**\n   * Refresh data\n   */\n  const onRefresh = useCallback(async () => {\n    setRefreshing(__true);\n    await checkConnectionStatus();\n    setRefreshing(__false);\n  }, [checkConnectionStatus]);\n\n  /**\n   * Format date for display\n   */\n  const formatDate = (_timestamp: _number) => {\n    return new Date(__timestamp).toLocaleString();\n  };\n\n  /**\n   * Get rate limit info\n   */\n  const getRateLimitInfo = () => {\n    return apiClient.getRateLimitInfo();\n  };\n\n  useEffect(() => {\n    const initializeScreen = async () => {\n      await checkConnectionStatus();\n      setLoading(__false);\n    };\n\n    initializeScreen();\n  }, [checkConnectionStatus]);\n\n  if (loading && !refreshing) {\n    return (\n      <View style={styles.loadingContainer}>\n        <ActivityIndicator size=\"large\" color={Colors.primary} />\n        <Text style={styles.loadingText}>Loading Xero settings...</Text>\n      </View>\n    );\n  }\n\n  const rateLimitInfo = getRateLimitInfo();\n\n  return (\n    <View style={styles.container}>\n      {/* Header */}\n      <View style={styles.header}>\n        <TouchableOpacity onPress={() => navigation.goBack()} style={styles.backButton}>\n          <Icon name=\"arrow-back\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n        <Text style={styles.headerTitle}>Xero Integration</Text>\n        <View style={styles.headerSpacer} />\n      </View>\n\n      <ScrollView\n        style={styles.content}\n        refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}>\n        {/* Connection Status Card */}\n        <View style={styles.card}>\n          <View style={styles.cardHeader}>\n            <Icon\n              name={connectionStatus.isConnected ? 'check-circle' : 'error'}\n              size={24}\n              color={connectionStatus.isConnected ? Colors.success : Colors.error}\n            />\n            <Text style={styles.cardTitle}>\n              {connectionStatus.isConnected ? 'Connected to Xero' : 'Not Connected'}\n            </Text>\n          </View>\n\n          {connectionStatus.isConnected && connectionStatus.organization && (\n            <View style={styles.orgInfo}>\n              <Text style={styles.orgName}>{connectionStatus.organization.Name}</Text>\n              <Text style={styles.orgDetails}>\n                {connectionStatus.organization.CountryCode} •{' '}\n                {connectionStatus.organization.BaseCurrency}\n              </Text>\n            </View>\n          )}\n\n          {connectionStatus.error && <Text style={styles.errorText}>{connectionStatus.error}</Text>}\n\n          <View style={styles.buttonContainer}>\n            {connectionStatus.isConnected ? (\n              <>\n                <TouchableOpacity style={styles.button} onPress={handleTestConnection}>\n                  <Icon name=\"wifi\" size={20} color={Colors.white} />\n                  <Text style={styles.buttonText}>Test Connection</Text>\n                </TouchableOpacity>\n                <TouchableOpacity\n                  style={[styles.button, styles.disconnectButton]}\n                  onPress={handleDisconnect}>\n                  <Icon name=\"link-off\" size={20} color={Colors.white} />\n                  <Text style={styles.buttonText}>Disconnect</Text>\n                </TouchableOpacity>\n              </>\n            ) : (\n              <TouchableOpacity style={styles.button} onPress={handleConnectToXero}>\n                <Icon name=\"link\" size={20} color={Colors.white} />\n                <Text style={styles.buttonText}>Connect to Xero</Text>\n              </TouchableOpacity>\n            )}\n          </View>\n        </View>\n\n        {/* Sync Status Card */}\n        {connectionStatus.isConnected && (\n          <View style={styles.card}>\n            <View style={styles.cardHeader}>\n              <Icon name=\"sync\" size={24} color={Colors.primary} />\n              <Text style={styles.cardTitle}>Synchronization</Text>\n            </View>\n\n            {syncStatus.inProgress && (\n              <View style={styles.syncProgress}>\n                <ActivityIndicator size=\"small\" color={Colors.primary} />\n                <Text style={styles.syncText}>Syncing data...</Text>\n              </View>\n            )}\n\n            {syncStatus.lastSync && (\n              <Text style={styles.lastSyncText}>Last sync: {formatDate(syncStatus.lastSync)}</Text>\n            )}\n\n            {syncStatus.error && <Text style={styles.errorText}>{syncStatus.error}</Text>}\n\n            <View style={styles.buttonRow}>\n              <TouchableOpacity\n                style={[styles.button, syncStatus.inProgress && styles.disabledButton]}\n                onPress={handleManualSync}\n                disabled={syncStatus.inProgress}>\n                <Icon name=\"sync\" size={20} color={Colors.white} />\n                <Text style={styles.buttonText}>Manual Sync</Text>\n              </TouchableOpacity>\n\n              <TouchableOpacity\n                style={[styles.button, styles.dashboardButton]}\n                onPress={() => navigation.navigate('XeroSyncDashboard' as never)}>\n                <Icon name=\"dashboard\" size={20} color={Colors.white} />\n                <Text style={styles.buttonText}>Dashboard</Text>\n              </TouchableOpacity>\n            </View>\n          </View>\n        )}\n\n        {/* Rate Limit Info Card */}\n        {connectionStatus.isConnected && (\n          <View style={styles.card}>\n            <View style={styles.cardHeader}>\n              <Icon name=\"speed\" size={24} color={Colors.primary} />\n              <Text style={styles.cardTitle}>API Usage</Text>\n            </View>\n\n            <View style={styles.rateLimitInfo}>\n              <View style={styles.rateLimitItem}>\n                <Text style={styles.rateLimitLabel}>Remaining Requests</Text>\n                <Text style={styles.rateLimitValue}>{rateLimitInfo.remainingRequests}</Text>\n              </View>\n              <View style={styles.rateLimitItem}>\n                <Text style={styles.rateLimitLabel}>Daily Limit</Text>\n                <Text style={styles.rateLimitValue}>{rateLimitInfo.dailyLimit}</Text>\n              </View>\n              <View style={styles.rateLimitItem}>\n                <Text style={styles.rateLimitLabel}>Minute Limit</Text>\n                <Text style={styles.rateLimitValue}>{rateLimitInfo.minuteLimit}</Text>\n              </View>\n            </View>\n          </View>\n        )}\n\n        {/* Information Card */}\n        <View style={styles.card}>\n          <View style={styles.cardHeader}>\n            <Icon name=\"info\" size={24} color={Colors.primary} />\n            <Text style={styles.cardTitle}>About Xero Integration</Text>\n          </View>\n\n          <Text style={styles.infoText}>Connect your Fynlo POS to Xero to automatically sync:</Text>\n\n          <View style={styles.featureList}>\n            <View style={styles.featureItem}>\n              <Icon name=\"check\" size={16} color={Colors.success} />\n              <Text style={styles.featureText}>Sales transactions as invoices</Text>\n            </View>\n            <View style={styles.featureItem}>\n              <Icon name=\"check\" size={16} color={Colors.success} />\n              <Text style={styles.featureText}>Customer information</Text>\n            </View>\n            <View style={styles.featureItem}>\n              <Icon name=\"check\" size={16} color={Colors.success} />\n              <Text style={styles.featureText}>Product catalog</Text>\n            </View>\n            <View style={styles.featureItem}>\n              <Icon name=\"check\" size={16} color={Colors.success} />\n              <Text style={styles.featureText}>Payment records</Text>\n            </View>\n          </View>\n        </View>\n      </ScrollView>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    backgroundColor: Colors.primary,\n    paddingTop: 50,\n    paddingBottom: 15,\n    paddingHorizontal: 16,\n  },\n  backButton: {\n    padding: 8,\n  },\n  headerTitle: {\n    color: Colors.white,\n    fontSize: 18,\n    fontWeight: '600',\n  },\n  headerSpacer: {\n    width: 40,\n  },\n  content: {\n    flex: 1,\n    padding: 16,\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: Colors.background,\n  },\n  loadingText: {\n    marginTop: 16,\n    fontSize: 16,\n    color: Colors.textSecondary,\n  },\n  card: {\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    padding: 20,\n    marginBottom: 16,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  cardHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 16,\n  },\n  cardTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n    marginLeft: 12,\n  },\n  orgInfo: {\n    marginBottom: 16,\n    paddingLeft: 36,\n  },\n  orgName: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.text,\n  },\n  orgDetails: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    marginTop: 4,\n  },\n  errorText: {\n    color: Colors.error,\n    fontSize: 14,\n    marginBottom: 16,\n    paddingLeft: 36,\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  button: {\n    flex: 1,\n    backgroundColor: Colors.primary,\n    paddingVertical: 12,\n    paddingHorizontal: 16,\n    borderRadius: 8,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    gap: 8,\n  },\n  disconnectButton: {\n    backgroundColor: Colors.error,\n  },\n  disabledButton: {\n    backgroundColor: Colors.disabled,\n  },\n  buttonRow: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  dashboardButton: {\n    backgroundColor: Colors.secondary,\n  },\n  buttonText: {\n    color: Colors.white,\n    fontSize: 14,\n    fontWeight: '500',\n  },\n  syncProgress: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 16,\n    paddingLeft: 36,\n  },\n  syncText: {\n    marginLeft: 12,\n    fontSize: 14,\n    color: Colors.textSecondary,\n  },\n  lastSyncText: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    marginBottom: 16,\n    paddingLeft: 36,\n  },\n  rateLimitInfo: {\n    paddingLeft: 36,\n  },\n  rateLimitItem: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 8,\n  },\n  rateLimitLabel: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n  },\n  rateLimitValue: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.text,\n  },\n  infoText: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    marginBottom: 16,\n    paddingLeft: 36,\n  },\n  featureList: {\n    paddingLeft: 36,\n  },\n  featureItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  featureText: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    marginLeft: 8,\n  },\n});\n\nexport default XeroSettingsScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/settings/app/BackupRestoreScreen.tsx","messages":[{"ruleId":"react/no-unstable-nested-components","severity":1,"message":"Do not define components during render. React will see a new component type on every render and destroy the entire subtree’s DOM nodes and state (https://reactjs.org/docs/reconciliation.html#elements-of-different-types). Instead, move this component definition out of the parent component “BackupRestoreScreen” and pass data as props.","line":232,"column":22,"nodeType":"ArrowFunctionExpression","endLine":310,"endColumn":4},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":545,"column":50,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[19106,19157],"text":"\n                This will restore your data from &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[19106,19157],"text":"\n                This will restore your data from &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[19106,19157],"text":"\n                This will restore your data from &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[19106,19157],"text":"\n                This will restore your data from &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":545,"column":73,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[19179,19196],"text":"&quot;.\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[19179,19196],"text":"&ldquo;.\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[19179,19196],"text":"&#34;.\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[19179,19196],"text":"&rdquo;.\n              "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  ScrollView,\n  Alert,\n  Switch,\n  ActivityIndicator,\n  Modal,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation } from '@react-navigation/native';\n\n// Clover POS Color Scheme\nconst Colors = {\n  primary: '#00A651',\n  secondary: '#0066CC',\n  success: '#00A651',\n  warning: '#FF6B35',\n  danger: '#E74C3C',\n  background: '#F5F5F5',\n  white: '#FFFFFF',\n  lightGray: '#E5E5E5',\n  mediumGray: '#999999',\n  darkGray: '#666666',\n  text: '#333333',\n  lightText: '#666666',\n  border: '#DDDDDD',\n};\n\ninterface BackupInfo {\n  id: string;\n  name: string;\n  type: 'automatic' | 'manual';\n  size: string;\n  date: Date;\n  status: 'completed' | 'failed' | 'in_progress';\n  location: 'local' | 'cloud';\n  includes: string[];\n}\n\nconst BackupRestoreScreen: React.FC = () => {\n  const navigation = useNavigation();\n\n  const [backups, setBackups] = useState<BackupInfo[]>([\n    {\n      id: 'backup1',\n      name: 'Daily Backup - Dec 17',\n      type: 'automatic',\n      size: '45.2 MB',\n      date: new Date(),\n      status: 'completed',\n      location: 'cloud',\n      includes: ['transactions', 'menu', 'customers', 'employees', 'settings'],\n    },\n    {\n      id: 'backup2',\n      name: 'Manual Backup - Dec 16',\n      type: 'manual',\n      size: '44.8 MB',\n      date: new Date(Date.now() - 24 * 60 * 60 * 1000),\n      status: 'completed',\n      location: 'local',\n      includes: ['transactions', 'menu', 'customers', 'settings'],\n    },\n    {\n      id: 'backup3',\n      name: 'Weekly Backup - Dec 15',\n      type: 'automatic',\n      size: '187.5 MB',\n      date: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000),\n      status: 'completed',\n      location: 'cloud',\n      includes: ['transactions', 'menu', 'customers', 'employees', 'settings', 'reports'],\n    },\n  ]);\n\n  // Backup settings\n  const [backupSettings, setBackupSettings] = useState({\n    autoBackupEnabled: _true,\n    dailyBackup: _true,\n    weeklyBackup: _true,\n    cloudBackupEnabled: _true,\n    localBackupEnabled: _true,\n    encryptBackups: _true,\n    compressBackups: _true,\n    retainBackups: 30,\n  });\n\n  const [isCreatingBackup, setIsCreatingBackup] = useState(__false);\n  const [isRestoring, setIsRestoring] = useState(__false);\n  const [showRestoreModal, setShowRestoreModal] = useState(__false);\n  const [selectedBackup, setSelectedBackup] = useState<BackupInfo | null>(__null);\n\n  const handleCreateBackup = async () => {\n    setIsCreatingBackup(__true);\n\n    try {\n      // Simulate backup creation\n      await new Promise(_resolve => setTimeout(__resolve, 3000));\n\n      const newBackup: BackupInfo = {\n        id: Date.now().toString(),\n        name: `Manual Backup - ${new Date().toLocaleDateString()}`,\n        type: 'manual',\n        size: '45.7 MB',\n        date: new Date(),\n        status: 'completed',\n        location: backupSettings.cloudBackupEnabled ? 'cloud' : 'local',\n        includes: ['transactions', 'menu', 'customers', 'employees', 'settings'],\n      };\n\n      setBackups(prev => [newBackup, ...prev]);\n      Alert.alert('Success', 'Backup created successfully!');\n    } catch (__error) {\n      Alert.alert('Error', 'Failed to create backup. Please try again.');\n    } finally {\n      setIsCreatingBackup(__false);\n    }\n  };\n\n  const handleRestoreBackup = async (_backup: _BackupInfo) => {\n    setSelectedBackup(__backup);\n    setShowRestoreModal(__true);\n  };\n\n  const confirmRestore = async () => {\n    if (!selectedBackup) {\n      return;\n    }\n\n    setIsRestoring(__true);\n    setShowRestoreModal(__false);\n\n    try {\n      // Simulate restore process\n      await new Promise(_resolve => setTimeout(__resolve, 5000));\n\n      Alert.alert(\n        'Restore Complete',\n        `Data has been restored from \"${selectedBackup.name}\". The app will restart to apply changes.`,\n        [{ text: 'OK' }],\n      );\n    } catch (__error) {\n      Alert.alert('Error', 'Failed to restore backup. Please try again.');\n    } finally {\n      setIsRestoring(__false);\n      setSelectedBackup(__null);\n    }\n  };\n\n  const handleDeleteBackup = (backupId: _string) => {\n    const backup = backups.find(b => b.id === backupId);\n    Alert.alert('Delete Backup', `Delete \"${backup?.name}\"? This action cannot be undone.`, [\n      { text: 'Cancel', style: 'cancel' },\n      {\n        text: 'Delete',\n        style: 'destructive',\n        onPress: () => {\n          setBackups(prev => prev.filter(b => b.id !== backupId));\n        },\n      },\n    ]);\n  };\n\n  const handleImportBackup = () => {\n    Alert.alert('Import Backup', 'Select backup file to import:', [\n      { text: 'Cancel', style: 'cancel' },\n      {\n        text: 'From Device',\n        onPress: () => {\n          Alert.alert('Info', 'File picker would open here');\n        },\n      },\n      {\n        text: 'From Cloud',\n        onPress: () => {\n          Alert.alert('Info', 'Cloud file browser would open here');\n        },\n      },\n    ]);\n  };\n\n  const toggleBackupSetting = (setting: keyof typeof backupSettings) => {\n    setBackupSettings(prev => ({\n      ...prev,\n      [setting]: !prev[setting],\n    }));\n  };\n\n  const getBackupStatusColor = (_status: _string) => {\n    switch (__status) {\n      case 'completed':\n        return Colors.success;\n      case 'failed':\n        return Colors.danger;\n      case 'in_progress':\n        return Colors.warning;\n      default:\n        return Colors.mediumGray;\n    }\n  };\n\n  const getBackupStatusIcon = (_status: _string) => {\n    switch (__status) {\n      case 'completed':\n        return 'check-circle';\n      case 'failed':\n        return 'error';\n      case 'in_progress':\n        return 'sync';\n      default:\n        return 'help';\n    }\n  };\n\n  const getLocationIcon = (location: _string) => {\n    return location === 'cloud' ? 'cloud' : 'phone-android';\n  };\n\n  const getTotalBackupSize = () => {\n    return backups\n      .reduce((__total, _backup) => {\n        const size = parseFloat(backup.size.replace(' MB', ''));\n        return total + size;\n      }, 0)\n      .toFixed(1);\n  };\n\n  const BackupCard = ({ backup }: { backup: BackupInfo }) => (\n    <View style={styles.backupCard}>\n      <View style={styles.backupHeader}>\n        <View style={styles.backupInfo}>\n          <View style={styles.backupTitleRow}>\n            <Icon\n              name={backup.type === 'automatic' ? 'schedule' : 'save'}\n              size={20}\n              color={Colors.primary}\n            />\n            <Text style={styles.backupName}>{backup.name}</Text>\n            <View\n              style={[\n                styles.statusBadge,\n                { backgroundColor: getBackupStatusColor(backup.status) },\n              ]}>\n              <Icon name={getBackupStatusIcon(backup.status)} size={12} color={Colors.white} />\n            </View>\n          </View>\n\n          <View style={styles.backupDetails}>\n            <View style={styles.backupDetailRow}>\n              <Icon name={getLocationIcon(backup.location)} size={16} color={Colors.lightText} />\n              <Text style={styles.backupDetailText}>\n                {backup.location === 'cloud' ? 'Cloud Storage' : 'Local Storage'}\n              </Text>\n            </View>\n\n            <View style={styles.backupDetailRow}>\n              <Icon name=\"storage\" size={16} color={Colors.lightText} />\n              <Text style={styles.backupDetailText}>{backup.size}</Text>\n            </View>\n\n            <View style={styles.backupDetailRow}>\n              <Icon name=\"schedule\" size={16} color={Colors.lightText} />\n              <Text style={styles.backupDetailText}>\n                {backup.date.toLocaleDateString()} at {backup.date.toLocaleTimeString()}\n              </Text>\n            </View>\n          </View>\n\n          <View style={styles.backupIncludes}>\n            <Text style={styles.includesLabel}>Includes:</Text>\n            <View style={styles.includesTags}>\n              {backup.includes.map(item => (\n                <View key={item} style={styles.includeTag}>\n                  <Text style={styles.includeTagText}>{item}</Text>\n                </View>\n              ))}\n            </View>\n          </View>\n        </View>\n      </View>\n\n      <View style={styles.backupActions}>\n        <TouchableOpacity\n          style={[styles.backupButton, styles.restoreButton]}\n          onPress={() => handleRestoreBackup(__backup)}\n          disabled={backup.status !== 'completed' || isRestoring}>\n          <Icon name=\"restore\" size={16} color={Colors.secondary} />\n          <Text style={styles.restoreButtonText}>Restore</Text>\n        </TouchableOpacity>\n\n        <TouchableOpacity\n          style={styles.backupButton}\n          onPress={() => Alert.alert('Info', `Download ${backup.name}`)}>\n          <Icon name=\"file-download\" size={16} color={Colors.success} />\n          <Text style={styles.backupButtonText}>Download</Text>\n        </TouchableOpacity>\n\n        <TouchableOpacity\n          style={[styles.backupButton, styles.deleteButton]}\n          onPress={() => handleDeleteBackup(backup.id)}>\n          <Icon name=\"delete\" size={16} color={Colors.danger} />\n          <Text style={styles.deleteButtonText}>Delete</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n\n  return (\n    <View style={styles.container}>\n      {/* Header */}\n      <View style={styles.header}>\n        <TouchableOpacity onPress={() => navigation.goBack()} style={styles.backButton}>\n          <Icon name=\"arrow-back\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n        <Text style={styles.headerTitle}>Backup & Restore</Text>\n        <TouchableOpacity\n          style={styles.createBackupButton}\n          onPress={handleCreateBackup}\n          disabled={isCreatingBackup}>\n          <Icon\n            name={isCreatingBackup ? 'hourglass-empty' : 'backup'}\n            size={24}\n            color={Colors.white}\n          />\n        </TouchableOpacity>\n      </View>\n\n      {/* Loading Overlay */}\n      {(isCreatingBackup || isRestoring) && (\n        <View style={styles.loadingOverlay}>\n          <View style={styles.loadingContent}>\n            <ActivityIndicator size=\"large\" color={Colors.primary} />\n            <Text style={styles.loadingText}>\n              {isCreatingBackup ? 'Creating backup...' : 'Restoring data...'}\n            </Text>\n          </View>\n        </View>\n      )}\n\n      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n        {/* Quick Stats */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Backup Overview</Text>\n          <View style={styles.statsContainer}>\n            <View style={styles.statCard}>\n              <Text style={styles.statValue}>{backups.length}</Text>\n              <Text style={styles.statLabel}>Total Backups</Text>\n            </View>\n            <View style={styles.statCard}>\n              <Text style={styles.statValue}>{getTotalBackupSize()} MB</Text>\n              <Text style={styles.statLabel}>Storage Used</Text>\n            </View>\n            <View style={styles.statCard}>\n              <Text style={styles.statValue}>\n                {backups\n                  .find(b => b.type === 'automatic' && b.status === 'completed')\n                  ?.date.toLocaleDateString() || 'Never'}\n              </Text>\n              <Text style={styles.statLabel}>Last Auto Backup</Text>\n            </View>\n          </View>\n        </View>\n\n        {/* Quick Actions */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Quick Actions</Text>\n          <View style={styles.quickActions}>\n            <TouchableOpacity\n              style={[\n                styles.quickActionButton,\n                isCreatingBackup && styles.quickActionButtonDisabled,\n              ]}\n              onPress={handleCreateBackup}\n              disabled={isCreatingBackup}>\n              <Icon\n                name={isCreatingBackup ? 'hourglass-empty' : 'backup'}\n                size={32}\n                color={isCreatingBackup ? Colors.mediumGray : Colors.primary}\n              />\n              <Text\n                style={[\n                  styles.quickActionText,\n                  isCreatingBackup && styles.quickActionTextDisabled,\n                ]}>\n                {isCreatingBackup ? 'Creating...' : 'Create Backup'}\n              </Text>\n            </TouchableOpacity>\n\n            <TouchableOpacity style={styles.quickActionButton} onPress={handleImportBackup}>\n              <Icon name=\"file-upload\" size={32} color={Colors.secondary} />\n              <Text style={styles.quickActionText}>Import Backup</Text>\n            </TouchableOpacity>\n\n            <TouchableOpacity\n              style={styles.quickActionButton}\n              onPress={() => Alert.alert('Info', 'Backup schedule configuration would open here')}>\n              <Icon name=\"schedule\" size={32} color={Colors.success} />\n              <Text style={styles.quickActionText}>Schedule</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n\n        {/* Backup List */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Available Backups</Text>\n          {backups.map(backup => (\n            <BackupCard key={backup.id} backup={backup} />\n          ))}\n\n          {backups.length === 0 && (\n            <View style={styles.emptyState}>\n              <Icon name=\"backup\" size={48} color={Colors.lightGray} />\n              <Text style={styles.emptyStateText}>No backups available</Text>\n              <TouchableOpacity style={styles.emptyStateButton} onPress={handleCreateBackup}>\n                <Text style={styles.emptyStateButtonText}>Create First Backup</Text>\n              </TouchableOpacity>\n            </View>\n          )}\n        </View>\n\n        {/* Backup Settings */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Backup Settings</Text>\n          <View style={styles.settingsCard}>\n            <View style={styles.settingRow}>\n              <View style={styles.settingInfo}>\n                <Text style={styles.settingLabel}>Automatic backups</Text>\n                <Text style={styles.settingDescription}>\n                  Create backups automatically on schedule\n                </Text>\n              </View>\n              <Switch\n                value={backupSettings.autoBackupEnabled}\n                onValueChange={() => toggleBackupSetting('autoBackupEnabled')}\n                trackColor={{ false: Colors.lightGray, true: Colors.primary }}\n                thumbColor={Colors.white}\n              />\n            </View>\n\n            <View style={styles.settingRow}>\n              <View style={styles.settingInfo}>\n                <Text style={styles.settingLabel}>Daily backups</Text>\n                <Text style={styles.settingDescription}>Create backup every day at 3 AM</Text>\n              </View>\n              <Switch\n                value={backupSettings.dailyBackup && backupSettings.autoBackupEnabled}\n                onValueChange={() => toggleBackupSetting('dailyBackup')}\n                disabled={!backupSettings.autoBackupEnabled}\n                trackColor={{ false: Colors.lightGray, true: Colors.primary }}\n                thumbColor={Colors.white}\n              />\n            </View>\n\n            <View style={styles.settingRow}>\n              <View style={styles.settingInfo}>\n                <Text style={styles.settingLabel}>Weekly backups</Text>\n                <Text style={styles.settingDescription}>\n                  Create comprehensive backup every Sunday\n                </Text>\n              </View>\n              <Switch\n                value={backupSettings.weeklyBackup && backupSettings.autoBackupEnabled}\n                onValueChange={() => toggleBackupSetting('weeklyBackup')}\n                disabled={!backupSettings.autoBackupEnabled}\n                trackColor={{ false: Colors.lightGray, true: Colors.primary }}\n                thumbColor={Colors.white}\n              />\n            </View>\n\n            <View style={styles.settingRow}>\n              <View style={styles.settingInfo}>\n                <Text style={styles.settingLabel}>Cloud backup</Text>\n                <Text style={styles.settingDescription}>Store backups in secure cloud storage</Text>\n              </View>\n              <Switch\n                value={backupSettings.cloudBackupEnabled}\n                onValueChange={() => toggleBackupSetting('cloudBackupEnabled')}\n                trackColor={{ false: Colors.lightGray, true: Colors.primary }}\n                thumbColor={Colors.white}\n              />\n            </View>\n\n            <View style={styles.settingRow}>\n              <View style={styles.settingInfo}>\n                <Text style={styles.settingLabel}>Encrypt backups</Text>\n                <Text style={styles.settingDescription}>Protect backups with encryption</Text>\n              </View>\n              <Switch\n                value={backupSettings.encryptBackups}\n                onValueChange={() => toggleBackupSetting('encryptBackups')}\n                trackColor={{ false: Colors.lightGray, true: Colors.primary }}\n                thumbColor={Colors.white}\n              />\n            </View>\n          </View>\n        </View>\n\n        {/* Help Section */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Backup Information</Text>\n          <View style={styles.helpCard}>\n            <View style={styles.helpItem}>\n              <Icon name=\"info-outline\" size={20} color={Colors.secondary} />\n              <Text style={styles.helpText}>\n                Backups include all your business data: _transactions, menu items, customer\n                information, and settings.\n              </Text>\n            </View>\n            <View style={styles.helpItem}>\n              <Icon name=\"security\" size={20} color={Colors.success} />\n              <Text style={styles.helpText}>\n                All backups are encrypted and stored securely. Your data is always protected.\n              </Text>\n            </View>\n            <View style={styles.helpItem}>\n              <Icon name=\"schedule\" size={20} color={Colors.warning} />\n              <Text style={styles.helpText}>\n                Regular backups ensure you never lose important business data. Enable automatic\n                backups for peace of mind.\n              </Text>\n            </View>\n          </View>\n        </View>\n      </ScrollView>\n\n      {/* Restore Confirmation Modal */}\n      <Modal\n        visible={showRestoreModal}\n        transparent={true}\n        animationType=\"fade\"\n        onRequestClose={() => setShowRestoreModal(__false)}>\n        <View style={styles.modalOverlay}>\n          <View style={styles.modalContent}>\n            <View style={styles.modalHeader}>\n              <Icon name=\"warning\" size={32} color={Colors.warning} />\n              <Text style={styles.modalTitle}>Restore Data</Text>\n            </View>\n\n            <View style={styles.modalBody}>\n              <Text style={styles.modalText}>\n                This will restore your data from \"{selectedBackup?.name}\".\n              </Text>\n              <Text style={styles.modalWarning}>\n                ⚠️ Current data will be overwritten and cannot be recovered. Consider creating a\n                backup first.\n              </Text>\n              <Text style={styles.modalSubtext}>\n                The app will restart after the restore is complete.\n              </Text>\n            </View>\n\n            <View style={styles.modalActions}>\n              <TouchableOpacity\n                style={styles.cancelButton}\n                onPress={() => setShowRestoreModal(__false)}>\n                <Text style={styles.cancelButtonText}>Cancel</Text>\n              </TouchableOpacity>\n              <TouchableOpacity style={styles.confirmButton} onPress={confirmRestore}>\n                <Text style={styles.confirmButtonText}>Restore</Text>\n              </TouchableOpacity>\n            </View>\n          </View>\n        </View>\n      </Modal>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.primary,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    paddingTop: 48,\n  },\n  backButton: {\n    padding: 8,\n  },\n  headerTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.white,\n  },\n  createBackupButton: {\n    padding: 8,\n  },\n  loadingOverlay: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    justifyContent: 'center',\n    alignItems: 'center',\n    zIndex: 1000,\n  },\n  loadingContent: {\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    padding: 32,\n    alignItems: 'center',\n    gap: 16,\n  },\n  loadingText: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.text,\n  },\n  content: {\n    flex: 1,\n  },\n  section: {\n    backgroundColor: Colors.white,\n    marginVertical: 8,\n    paddingVertical: 16,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n    paddingHorizontal: 16,\n    marginBottom: 16,\n  },\n  statsContainer: {\n    flexDirection: 'row',\n    paddingHorizontal: 16,\n    gap: 16,\n  },\n  statCard: {\n    flex: 1,\n    alignItems: 'center',\n    paddingVertical: 16,\n    backgroundColor: Colors.background,\n    borderRadius: 8,\n  },\n  statValue: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: Colors.primary,\n    marginBottom: 4,\n  },\n  statLabel: {\n    fontSize: 12,\n    color: Colors.lightText,\n    textAlign: 'center',\n  },\n  quickActions: {\n    flexDirection: 'row',\n    paddingHorizontal: 16,\n    gap: 16,\n  },\n  quickActionButton: {\n    flex: 1,\n    alignItems: 'center',\n    paddingVertical: 20,\n    backgroundColor: Colors.background,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  quickActionButtonDisabled: {\n    opacity: 0.5,\n  },\n  quickActionText: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.text,\n    marginTop: 8,\n    textAlign: 'center',\n  },\n  quickActionTextDisabled: {\n    color: Colors.mediumGray,\n  },\n  backupCard: {\n    backgroundColor: Colors.background,\n    marginHorizontal: 16,\n    marginBottom: 12,\n    borderRadius: 12,\n    padding: 16,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  backupHeader: {\n    marginBottom: 16,\n  },\n  backupInfo: {\n    flex: 1,\n  },\n  backupTitleRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    marginBottom: 12,\n  },\n  backupName: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n    flex: 1,\n  },\n  statusBadge: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 12,\n  },\n  backupDetails: {\n    gap: 8,\n    marginBottom: 12,\n  },\n  backupDetailRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n  },\n  backupDetailText: {\n    fontSize: 14,\n    color: Colors.lightText,\n  },\n  backupIncludes: {\n    marginTop: 8,\n  },\n  includesLabel: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.text,\n    marginBottom: 8,\n  },\n  includesTags: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 8,\n  },\n  includeTag: {\n    backgroundColor: Colors.primary + '20',\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 12,\n  },\n  includeTagText: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: Colors.primary,\n  },\n  backupActions: {\n    flexDirection: 'row',\n    gap: 8,\n  },\n  backupButton: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 8,\n    paddingHorizontal: 12,\n    backgroundColor: Colors.white,\n    borderRadius: 6,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    gap: 4,\n  },\n  restoreButton: {\n    borderColor: Colors.secondary,\n  },\n  restoreButtonText: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: Colors.secondary,\n  },\n  backupButtonText: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: Colors.text,\n  },\n  deleteButton: {\n    borderColor: Colors.danger,\n  },\n  deleteButtonText: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: Colors.danger,\n  },\n  emptyState: {\n    alignItems: 'center',\n    paddingVertical: 32,\n    paddingHorizontal: 24,\n  },\n  emptyStateText: {\n    fontSize: 16,\n    color: Colors.lightText,\n    marginTop: 16,\n    marginBottom: 16,\n  },\n  emptyStateButton: {\n    backgroundColor: Colors.primary,\n    paddingVertical: 12,\n    paddingHorizontal: 24,\n    borderRadius: 8,\n  },\n  emptyStateButtonText: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.white,\n  },\n  settingsCard: {\n    paddingHorizontal: 16,\n  },\n  settingRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.lightGray,\n  },\n  settingInfo: {\n    flex: 1,\n    marginRight: 16,\n  },\n  settingLabel: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  settingDescription: {\n    fontSize: 14,\n    color: Colors.lightText,\n  },\n  helpCard: {\n    paddingHorizontal: 16,\n  },\n  helpItem: {\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    paddingVertical: 12,\n    gap: 12,\n  },\n  helpText: {\n    flex: 1,\n    fontSize: 14,\n    color: Colors.lightText,\n    lineHeight: 20,\n  },\n  modalOverlay: {\n    flex: 1,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  modalContent: {\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    padding: 24,\n    margin: 24,\n    maxWidth: 400,\n  },\n  modalHeader: {\n    alignItems: 'center',\n    marginBottom: 16,\n  },\n  modalTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.text,\n    marginTop: 8,\n  },\n  modalBody: {\n    marginBottom: 24,\n  },\n  modalText: {\n    fontSize: 16,\n    color: Colors.text,\n    textAlign: 'center',\n    marginBottom: 16,\n  },\n  modalWarning: {\n    fontSize: 14,\n    color: Colors.danger,\n    textAlign: 'center',\n    marginBottom: 12,\n    lineHeight: 20,\n  },\n  modalSubtext: {\n    fontSize: 14,\n    color: Colors.lightText,\n    textAlign: 'center',\n  },\n  modalActions: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  cancelButton: {\n    flex: 1,\n    paddingVertical: 12,\n    backgroundColor: Colors.background,\n    borderRadius: 8,\n    alignItems: 'center',\n  },\n  cancelButtonText: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.text,\n  },\n  confirmButton: {\n    flex: 1,\n    paddingVertical: 12,\n    backgroundColor: Colors.danger,\n    borderRadius: 8,\n    alignItems: 'center',\n  },\n  confirmButtonText: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.white,\n  },\n});\n\nexport default BackupRestoreScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/settings/app/DataExportScreen.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/settings/app/MenuManagementScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_navigation' is assigned a value but never used.","line":64,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":64,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_refreshing' is assigned a value but never used.","line":71,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":71,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_setRefreshing' is assigned a value but never used.","line":71,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":71,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_handleDeleteCategory' is assigned a value but never used.","line":203,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":203,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_toggleCategoryVisibility' is assigned a value but never used.","line":372,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":372,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":509,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":509,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14981,14984],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14981,14984],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_item' is assigned a value but never used.","line":545,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":545,"endColumn":20},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":554,"column":9,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":554,"endColumn":45,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[16266,16267],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":611,"column":47,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":611,"endColumn":56},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'message' is assigned a value but never used.","line":665,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":665,"endColumn":16},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'message' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":665,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":665,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_exportData' is assigned a value but never used.","line":696,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":696,"endColumn":24},{"ruleId":"react/no-unstable-nested-components","severity":1,"message":"Do not define components during render. React will see a new component type on every render and destroy the entire subtree’s DOM nodes and state (https://reactjs.org/docs/reconciliation.html#elements-of-different-types). Instead, move this component definition out of the parent component “MenuManagementScreen” and pass data as props.","line":777,"column":23,"nodeType":"ArrowFunctionExpression","endLine":799,"endColumn":4},{"ruleId":"react/no-unstable-nested-components","severity":1,"message":"Do not define components during render. React will see a new component type on every render and destroy the entire subtree’s DOM nodes and state (https://reactjs.org/docs/reconciliation.html#elements-of-different-types). Instead, move this component definition out of the parent component “MenuManagementScreen” and pass data as props.","line":801,"column":20,"nodeType":"ArrowFunctionExpression","endLine":873,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.container","line":1247,"column":5,"nodeType":"Property","endLine":1250,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.addButton","line":1251,"column":5,"nodeType":"Property","endLine":1254,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.statsSection","line":1255,"column":5,"nodeType":"Property","endLine":1261,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.statCard","line":1262,"column":5,"nodeType":"Property","endLine":1268,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.statValue","line":1269,"column":5,"nodeType":"Property","endLine":1274,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.statLabel","line":1275,"column":5,"nodeType":"Property","endLine":1278,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.searchSection","line":1279,"column":5,"nodeType":"Property","endLine":1283,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.searchContainer","line":1284,"column":5,"nodeType":"Property","endLine":1292,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.searchInput","line":1293,"column":5,"nodeType":"Property","endLine":1297,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.categorySection","line":1298,"column":5,"nodeType":"Property","endLine":1301,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.categoryTabs","line":1302,"column":5,"nodeType":"Property","endLine":1304,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.categoryTab","line":1305,"column":5,"nodeType":"Property","endLine":1314,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.selectedCategoryTab","line":1315,"column":5,"nodeType":"Property","endLine":1317,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.hiddenCategoryTab","line":1318,"column":5,"nodeType":"Property","endLine":1320,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.categoryTabText","line":1321,"column":5,"nodeType":"Property","endLine":1325,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.selectedCategoryTabText","line":1326,"column":5,"nodeType":"Property","endLine":1328,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.hiddenCategoryText","line":1329,"column":5,"nodeType":"Property","endLine":1331,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.categoryItemCount","line":1332,"column":5,"nodeType":"Property","endLine":1341,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.addCategoryTab","line":1342,"column":5,"nodeType":"Property","endLine":1354,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.addCategoryText","line":1355,"column":5,"nodeType":"Property","endLine":1359,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.content","line":1360,"column":5,"nodeType":"Property","endLine":1362,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.itemsSection","line":1363,"column":5,"nodeType":"Property","endLine":1367,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.itemCard","line":1368,"column":5,"nodeType":"Property","endLine":1376,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.unavailableItem","line":1377,"column":5,"nodeType":"Property","endLine":1379,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.itemHeader","line":1380,"column":5,"nodeType":"Property","endLine":1385,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.itemInfo","line":1386,"column":5,"nodeType":"Property","endLine":1391,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.itemName","line":1392,"column":5,"nodeType":"Property","endLine":1397,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.unavailableText","line":1398,"column":5,"nodeType":"Property","endLine":1400,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.featuredBadge","line":1401,"column":5,"nodeType":"Property","endLine":1409,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.featuredText","line":1410,"column":5,"nodeType":"Property","endLine":1414,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.itemPrice","line":1415,"column":5,"nodeType":"Property","endLine":1419,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.itemDescription","line":1420,"column":5,"nodeType":"Property","endLine":1425,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.allergenContainer","line":1426,"column":5,"nodeType":"Property","endLine":1431,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.allergenText","line":1432,"column":5,"nodeType":"Property","endLine":1436,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.itemActions","line":1437,"column":5,"nodeType":"Property","endLine":1440,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.itemActionButton","line":1441,"column":5,"nodeType":"Property","endLine":1450,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.editButton","line":1451,"column":5,"nodeType":"Property","endLine":1455,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.editButtonText","line":1456,"column":5,"nodeType":"Property","endLine":1460,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.featuredButton","line":1461,"column":5,"nodeType":"Property","endLine":1465,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.featuredButtonText","line":1466,"column":5,"nodeType":"Property","endLine":1470,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.availabilityButton","line":1471,"column":5,"nodeType":"Property","endLine":1475,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.availabilityButtonText","line":1476,"column":5,"nodeType":"Property","endLine":1480,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.deleteButton","line":1481,"column":5,"nodeType":"Property","endLine":1485,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.deleteButtonText","line":1486,"column":5,"nodeType":"Property","endLine":1490,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.emptyCategoriesState","line":1491,"column":5,"nodeType":"Property","endLine":1495,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.emptyCategoriesTitle","line":1496,"column":5,"nodeType":"Property","endLine":1502,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.emptyCategoriesText","line":1503,"column":5,"nodeType":"Property","endLine":1509,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.createCategoryButton","line":1510,"column":5,"nodeType":"Property","endLine":1518,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.createCategoryButtonText","line":1519,"column":5,"nodeType":"Property","endLine":1523,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.emptyState","line":1524,"column":5,"nodeType":"Property","endLine":1528,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.emptyStateTitle","line":1529,"column":5,"nodeType":"Property","endLine":1535,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.emptyStateText","line":1536,"column":5,"nodeType":"Property","endLine":1542,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.addItemButton","line":1543,"column":5,"nodeType":"Property","endLine":1551,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.addItemButtonText","line":1552,"column":5,"nodeType":"Property","endLine":1556,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.section","line":1557,"column":5,"nodeType":"Property","endLine":1561,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.sectionTitle","line":1562,"column":5,"nodeType":"Property","endLine":1568,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.settingsCard","line":1569,"column":5,"nodeType":"Property","endLine":1571,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.settingRow","line":1572,"column":5,"nodeType":"Property","endLine":1579,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.settingLabel","line":1580,"column":5,"nodeType":"Property","endLine":1584,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.actionCard","line":1585,"column":5,"nodeType":"Property","endLine":1587,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.actionButton","line":1588,"column":5,"nodeType":"Property","endLine":1594,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.actionButtonText","line":1595,"column":5,"nodeType":"Property","endLine":1601,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.modalOverlay","line":1602,"column":5,"nodeType":"Property","endLine":1607,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.modalContent","line":1608,"column":5,"nodeType":"Property","endLine":1613,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.modalHeader","line":1614,"column":5,"nodeType":"Property","endLine":1621,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.modalTitle","line":1622,"column":5,"nodeType":"Property","endLine":1626,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.modalBody","line":1627,"column":5,"nodeType":"Property","endLine":1630,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.inputLabel","line":1631,"column":5,"nodeType":"Property","endLine":1637,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.textInput","line":1638,"column":5,"nodeType":"Property","endLine":1647,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.textArea","line":1648,"column":5,"nodeType":"Property","endLine":1651,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.checkboxRow","line":1652,"column":5,"nodeType":"Property","endLine":1656,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.checkbox","line":1657,"column":5,"nodeType":"Property","endLine":1661,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.checkboxLabel","line":1662,"column":5,"nodeType":"Property","endLine":1665,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.modalActions","line":1666,"column":5,"nodeType":"Property","endLine":1672,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.cancelButton","line":1673,"column":5,"nodeType":"Property","endLine":1679,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.cancelButtonText","line":1680,"column":5,"nodeType":"Property","endLine":1684,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.saveButton","line":1685,"column":5,"nodeType":"Property","endLine":1691,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.saveButtonText","line":1692,"column":5,"nodeType":"Property","endLine":1696,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.loadingContainer","line":1697,"column":5,"nodeType":"Property","endLine":1701,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.loadingText","line":1702,"column":5,"nodeType":"Property","endLine":1706,"endColumn":6}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadMenuData'. Either include it or remove the dependency array.","line":95,"column":6,"nodeType":"ArrayExpression","endLine":95,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadMenuData]","fix":{"range":[2462,2464],"text":"[loadMenuData]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":9,"fatalErrorCount":0,"warningCount":85,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  ScrollView,\n  Alert,\n  Switch,\n  TextInput,\n  Modal,\n  ActivityIndicator,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation } from '@react-navigation/native';\nimport DataService from '../../../services/DataService';\nimport HeaderWithBackButton from '../../../components/navigation/HeaderWithBackButton';\nimport { useTheme } from '../../../design-system/ThemeProvider';\n\ninterface MenuItem {\n  id: string;\n  name: string;\n  description: string;\n  price: number;\n  category: string;\n  available: boolean;\n  featured: boolean;\n  image?: string;\n  allergens: string[];\n  nutritionInfo?: {\n    calories: number;\n    protein: number;\n    carbs: number;\n    fat: number;\n  };\n  modifiers: Modifier[];\n}\n\ninterface Modifier {\n  id: string;\n  name: string;\n  price: number;\n  required: boolean;\n  options: ModifierOption[];\n}\n\ninterface ModifierOption {\n  id: string;\n  name: string;\n  price: number;\n  default: boolean;\n}\n\ninterface Category {\n  id: string;\n  name: string;\n  description: string;\n  order: number;\n  visible: boolean;\n  items: MenuItem[];\n}\n\nconst MenuManagementScreen: React.FC = () => {\n  const _navigation = useNavigation();\n  const { theme } = useTheme();\n  const styles = createStyles(__theme);\n  const dataService = DataService.getInstance();\n\n  const [categories, setCategories] = useState<Category[]>([]);\n  const [loading, setLoading] = useState(__true);\n  const [_refreshing, _setRefreshing] = useState(__false);\n  const [selectedCategory, setSelectedCategory] = useState<string>('');\n  const [editingItem, setEditingItem] = useState<MenuItem | null>(__null);\n  const [editingCategory, setEditingCategory] = useState<Category | null>(__null);\n  const [showItemModal, setShowItemModal] = useState(__false);\n  const [showCategoryModal, setShowCategoryModal] = useState(__false);\n  const [searchTerm, setSearchTerm] = useState('');\n\n  // Menu settings\n  const [menuSettings, setMenuSettings] = useState({\n    showDescriptions: _true,\n    showPrices: _true,\n    showAllergens: _true,\n    showNutrition: _false,\n    allowCustomItems: _true,\n    enableModifiers: _true,\n    showUnavailableItems: _false,\n    autoSort: _true,\n  });\n\n  // Fetch categories and products on mount\n  useEffect(() => {\n    loadMenuData();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const loadMenuData = async () => {\n    try {\n      setLoading(__true);\n\n      // Fetch categories and products from API\n      const [categoriesData, productsData] = await Promise.all([\n        dataService.getCategories(),\n        dataService.getProducts(),\n      ]);\n\n      // Transform data to match our interface\n      const transformedCategories: Category[] = categoriesData.map((cat: _unknown) => ({\n        id: cat.id,\n        name: cat.name,\n        description: cat.description || '',\n        order: cat.sort_order || 0,\n        visible: cat.is_active !== false,\n        items: productsData\n          .filter((product: _unknown) => product.category_id === cat.id)\n          .map((product: _unknown) => ({\n            id: product.id,\n            name: product.name,\n            description: product.description || '',\n            price: product.price,\n            category: cat.id,\n            available: product.is_active !== false,\n            featured: _false, // We'll need to add this to backend\n            allergens: product.dietary_info || [],\n            modifiers: product.modifiers || [],\n          })),\n      }));\n\n      setCategories(__transformedCategories);\n\n      // Set first category as selected if available\n      if (transformedCategories.length > 0 && !selectedCategory) {\n        setSelectedCategory(transformedCategories[0].id);\n      }\n    } catch (__error) {\n      Alert.alert('Error', 'Failed to load menu data. Please try again.');\n    } finally {\n      setLoading(__false);\n    }\n  };\n\n  const handleAddCategory = () => {\n    setEditingCategory({\n      id: '',\n      name: '',\n      description: '',\n      order: categories.length + 1,\n      visible: _true,\n      items: [],\n    });\n    setShowCategoryModal(__true);\n  };\n\n  const handleEditCategory = (_category: _Category) => {\n    setEditingCategory(__category);\n    setShowCategoryModal(__true);\n  };\n\n  const handleSaveCategory = async () => {\n    if (!editingCategory?.name.trim()) {\n      Alert.alert('Error', 'Category name is required.');\n      return;\n    }\n\n    try {\n      setLoading(__true);\n\n      if (editingCategory.id) {\n        // Update existing category\n        await dataService.updateCategory(editingCategory.id, {\n          name: editingCategory.name,\n          description: editingCategory.description,\n          sort_order: editingCategory.order,\n          is_active: editingCategory.visible,\n        });\n      } else {\n        // Add new category\n        await dataService.createCategory({\n          name: editingCategory.name,\n          description: editingCategory.description,\n          sort_order: editingCategory.order || categories.length + 1,\n          color: '#00A651', // Default color\n          icon: '🍽️', // Default icon\n        });\n      }\n\n      // Reload data to get the updated list\n      await loadMenuData();\n\n      setShowCategoryModal(__false);\n      setEditingCategory(__null);\n      Alert.alert(\n        'Success',\n        `Category ${editingCategory.id ? 'updated' : 'created'} successfully!`,\n      );\n    } catch (__error) {\n      Alert.alert('Error', 'Failed to save category. Please try again.');\n    } finally {\n      setLoading(__false);\n    }\n  };\n\n  const _handleDeleteCategory = (categoryId: _string) => {\n    const category = categories.find(c => c.id === categoryId);\n    Alert.alert(\n      'Delete Category',\n      `Delete \"${category?.name}\" and all ${category?.items.length} items in it?`,\n      [\n        { text: 'Cancel', style: 'cancel' },\n        {\n          text: 'Delete',\n          style: 'destructive',\n          onPress: async () => {\n            try {\n              setLoading(__true);\n              await dataService.deleteCategory(__categoryId);\n\n              // Reload data\n              await loadMenuData();\n\n              // Update selected category if needed\n              if (selectedCategory === categoryId && categories.length > 1) {\n                const remainingCategories = categories.filter(c => c.id !== categoryId);\n                setSelectedCategory(remainingCategories[0]?.id || '');\n              }\n\n              Alert.alert('Success', 'Category deleted successfully!');\n            } catch (__error) {\n              Alert.alert('Error', 'Failed to delete category. Please try again.');\n            } finally {\n              setLoading(__false);\n            }\n          },\n        },\n      ],\n    );\n  };\n\n  const handleAddItem = () => {\n    setEditingItem({\n      id: '',\n      name: '',\n      description: '',\n      price: 0,\n      category: _selectedCategory,\n      available: _true,\n      featured: _false,\n      allergens: [],\n      modifiers: [],\n    });\n    setShowItemModal(__true);\n  };\n\n  const handleEditItem = (_item: _MenuItem) => {\n    setEditingItem(__item);\n    setShowItemModal(__true);\n  };\n\n  const handleSaveItem = async () => {\n    if (!editingItem?.name.trim()) {\n      Alert.alert('Error', 'Item name is required.');\n      return;\n    }\n\n    if (editingItem.price < 0) {\n      Alert.alert('Error', 'Price must be a positive number.');\n      return;\n    }\n\n    try {\n      setLoading(__true);\n\n      if (editingItem.id) {\n        // Update existing item\n        await dataService.updateProduct(editingItem.id, {\n          name: editingItem.name,\n          description: editingItem.description,\n          price: editingItem.price,\n          category_id: editingItem.category,\n          is_active: editingItem.available,\n          dietary_info: editingItem.allergens,\n          modifiers: editingItem.modifiers,\n        });\n      } else {\n        // Add new item\n        await dataService.createProduct({\n          category_id: _selectedCategory,\n          name: editingItem.name,\n          description: editingItem.description || '',\n          price: editingItem.price,\n          dietary_info: editingItem.allergens,\n          modifiers: editingItem.modifiers,\n        });\n      }\n\n      // Reload data to get the updated list\n      await loadMenuData();\n\n      setShowItemModal(__false);\n      setEditingItem(__null);\n      Alert.alert('Success', `Item ${editingItem.id ? 'updated' : 'created'} successfully!`);\n    } catch (__error) {\n      Alert.alert('Error', 'Failed to save item. Please try again.');\n    } finally {\n      setLoading(__false);\n    }\n  };\n\n  const handleDeleteItem = (itemId: _string) => {\n    const item = categories.flatMap(c => c.items).find(i => i.id === itemId);\n\n    Alert.alert('Delete Item', `Delete \"${item?.name}\"?`, [\n      { text: 'Cancel', style: 'cancel' },\n      {\n        text: 'Delete',\n        style: 'destructive',\n        onPress: async () => {\n          try {\n            setLoading(__true);\n            await dataService.deleteProduct(__itemId);\n\n            // Reload data\n            await loadMenuData();\n\n            Alert.alert('Success', 'Item deleted successfully!');\n          } catch (__error) {\n            Alert.alert('Error', 'Failed to delete item. Please try again.');\n          } finally {\n            setLoading(__false);\n          }\n        },\n      },\n    ]);\n  };\n\n  const toggleItemAvailability = async (itemId: _string) => {\n    const item = categories.flatMap(c => c.items).find(i => i.id === itemId);\n\n    if (!item) {\n      return;\n    }\n\n    try {\n      await dataService.updateProduct(__itemId, {\n        is_active: !item.available,\n      });\n\n      // Update local state for immediate feedback\n      setCategories(prev =>\n        prev.map(cat => ({\n          ...cat,\n          items: cat.items.map(i => (i.id === itemId ? { ...i, available: !i.available } : _i)),\n        })),\n      );\n    } catch (__error) {\n      Alert.alert('Error', 'Failed to update item availability.');\n    }\n  };\n\n  const toggleItemFeatured = (itemId: _string) => {\n    // Featured is not implemented in backend yet, just update local state\n    setCategories(prev =>\n      prev.map(cat => ({\n        ...cat,\n        items: cat.items.map(item =>\n          item.id === itemId ? { ...item, featured: !item.featured } : _item,\n        ),\n      })),\n    );\n  };\n\n  const _toggleCategoryVisibility = async (categoryId: _string) => {\n    const category = categories.find(c => c.id === categoryId);\n\n    if (!category) {\n      return;\n    }\n\n    try {\n      await dataService.updateCategory(__categoryId, {\n        is_active: !category.visible,\n      });\n\n      // Update local state for immediate feedback\n      setCategories(prev =>\n        prev.map(cat => (cat.id === categoryId ? { ...cat, visible: !cat.visible } : _cat)),\n      );\n    } catch (__error) {\n      Alert.alert('Error', 'Failed to update category visibility.');\n    }\n  };\n\n  const toggleMenuSetting = (setting: keyof typeof menuSettings) => {\n    setMenuSettings(prev => ({\n      ...prev,\n      [setting]: !prev[setting],\n    }));\n  };\n\n  const handleImportMenu = async () => {\n    try {\n      // For now, show a simple CSV format example and allow manual paste\n      Alert.alert(\n        'Import Menu from CSV',\n        'CSV Format Requirements:\\n\\n• Required columns: _Category, _Name, Price\\n• Optional: Description\\n• Use quotes for values with commas\\n• Price must be a positive number\\n\\nExample:\\nCategory,Name,Description,Price\\nTacos,\"Beef Taco, Supreme\",\"Seasoned beef, fresh toppings\",8.99\\nBurritos,Bean Burrito,Refried beans and cheese,6.99',\n        [\n          { text: 'Cancel', style: 'cancel' },\n          {\n            text: 'Import',\n            onPress: () => {\n              // Show input modal for CSV data\n              Alert.prompt(\n                'Paste CSV Data',\n                'Paste your menu data in CSV format:',\n                async _csvData => {\n                  if (__csvData) {\n                    await processCSVImport(__csvData);\n                  }\n                },\n                'plain-text',\n                '',\n                'default',\n              );\n            },\n          },\n          {\n            text: 'Show Template',\n            onPress: async () => {\n              // Generate and share CSV template with examples\n              const template = `Category,Name,Description,Price\nStarters,\"Nachos, Loaded\",\"Tortilla chips with cheese, jalapeños, and salsa\",7.99\nStarters,Guacamole & Chips,Fresh avocado dip with crispy tortilla chips,6.50\nMains,\"Chicken Fajitas, Sizzling\",\"Grilled chicken with peppers, _onions, tortillas\",14.99\nMains,Vegetarian Burrito,\"Black beans, _rice, cheese, _lettuce, salsa\",9.99\nDesserts,Churros,\"Cinnamon sugar dusted, with chocolate sauce\",5.99`;\n              Alert.alert(\n                'CSV Template',\n                'Copy this template and modify with your menu items:\\n\\n' + template,\n                [{ text: 'OK' }],\n              );\n            },\n          },\n        ],\n      );\n    } catch (__error) {\n      Alert.alert('Error', 'Failed to import menu');\n    }\n  };\n\n  // Robust CSV parser that handles quoted fields\n  const parseCSVLine = (line: _string): string[] => {\n    const result: string[] = [];\n    let current = '';\n    let inQuotes = false;\n    let i = 0;\n\n    while (i < line.length) {\n      const char = line[i];\n      const nextChar = line[i + 1];\n\n      if (char === '\"') {\n        if (inQuotes && nextChar === '\"') {\n          // Escaped quote\n          current += '\"';\n          i += 2;\n        } else {\n          // Toggle quote state\n          inQuotes = !inQuotes;\n          i++;\n        }\n      } else if (char === ',' && !inQuotes) {\n        // End of field\n        result.push(current.trim());\n        current = '';\n        i++;\n      } else {\n        current += char;\n        i++;\n      }\n    }\n\n    // Don't forget the last field\n    result.push(current.trim());\n    return result;\n  };\n\n  const processCSVImport = async (csvData: _string) => {\n    try {\n      setLoading(__true);\n\n      // Parse CSV with proper handling of quoted fields\n      const lines = csvData.trim().split(/\\r?\\n/);\n      if (lines.length < 2) {\n        throw new Error('CSV must have headers and at least one data row');\n      }\n\n      // Parse headers\n      const headers = parseCSVLine(lines[0]).map(h => h.toLowerCase().trim());\n      const categoryIndex = headers.indexOf('category');\n      const nameIndex = headers.indexOf('name');\n      const descriptionIndex = headers.indexOf('description');\n      const priceIndex = headers.indexOf('price');\n\n      if (categoryIndex === -1 || nameIndex === -1 || priceIndex === -1) {\n        throw new Error('CSV must have Category, _Name, and Price columns');\n      }\n\n      // Parse and validate data rows\n      const itemsByCategory = new Map<string, any[]>();\n      const errors: string[] = [];\n\n      for (let i = 1; i < lines.length; i++) {\n        if (!lines[i].trim()) {\n          continue;\n        } // Skip empty lines\n\n        const values = parseCSVLine(lines[i]);\n\n        // Validate required fields\n        const categoryName = values[categoryIndex]?.trim();\n        const itemName = values[nameIndex]?.trim();\n        const priceStr = values[priceIndex]?.trim();\n\n        if (!categoryName) {\n          errors.push(`Row ${i + 1}: Missing category name`);\n          continue;\n        }\n\n        if (!itemName) {\n          errors.push(`Row ${i + 1}: Missing item name`);\n          continue;\n        }\n\n        if (!priceStr || isNaN(parseFloat(__priceStr))) {\n          errors.push(`Row ${i + 1}: Invalid price value`);\n          continue;\n        }\n\n        const price = parseFloat(__priceStr);\n        if (price < 0) {\n          errors.push(`Row ${i + 1}: Price cannot be negative`);\n          continue;\n        }\n\n        const _item = {\n          name: _itemName,\n          description: values[descriptionIndex]?.trim() || '',\n          price: _price,\n        };\n\n        if (!itemsByCategory.has(__categoryName)) {\n          itemsByCategory.set(__categoryName, []);\n        }\n        itemsByCategory.get(__categoryName)!.push(__item);\n      }\n\n      // Show validation errors if any\n      if (errors.length > 0) {\n        const errorMessage = errors.slice(0, 5).join('\\n');\n        const moreErrors = errors.length > 5 ? `\\n...and ${errors.length - 5} more errors` : '';\n        Alert.alert(\n          'CSV Validation Errors',\n          `Found ${errors.length} validation errors:\\n\\n${errorMessage}${moreErrors}`,\n          [\n            { text: 'Cancel', style: 'cancel' },\n            {\n              text: 'Continue Anyway',\n              onPress: () => {\n                // No-op\n              },\n            },\n          ],\n        );\n      }\n\n      // Check if we have any valid items to import\n      if (itemsByCategory.size === 0) {\n        throw new Error('No valid items found to import');\n      }\n\n      // Create categories and products\n      let successCount = 0;\n      let errorCount = 0;\n      const failedItems: string[] = [];\n\n      for (const [categoryName, items] of itemsByCategory) {\n        try {\n          // Find or create category\n          let category = categories.find(c => c.name.toLowerCase() === categoryName.toLowerCase());\n\n          if (!category) {\n            // Create new category\n            try {\n              const newCategory = await dataService.createCategory({\n                name: _categoryName,\n                description: `Imported ${categoryName} category`,\n                is_active: _true,\n              });\n\n              // Properly initialize the Category object with all required fields\n              category = {\n                id: newCategory.id,\n                name: _categoryName,\n                description: newCategory.description || `Imported ${categoryName} category`,\n                order: newCategory.sort_order || categories.length,\n                visible: newCategory.is_active !== false,\n                items: [], // Will be populated as we import items\n              };\n\n              // Add the new category to our local state\n              setCategories(prev => [...prev, category!]);\n            } catch (__catError) {\n              failedItems.push(\n                `Category '${categoryName}': ${catError.message || 'Unknown error'}`,\n              );\n              errorCount += items.length;\n              continue;\n            }\n          }\n\n          // Create products in this category\n          for (const item of items) {\n            try {\n              // Additional validation before API call\n              if (!item.name || item.name.length === 0) {\n                throw new Error('Item name is required');\n              }\n\n              if (item.name.length > 200) {\n                throw new Error('Item name is too long (max 200 characters)');\n              }\n\n              if (item.price === null || item.price === undefined || item.price < 0) {\n                throw new Error('Invalid price');\n              }\n\n              await dataService.createProduct({\n                category_id: category.id,\n                name: item.name,\n                description: item.description,\n                price: item.price,\n                dietary_info: [],\n                modifiers: [],\n              });\n              successCount++;\n            } catch (error: _unknown) {\n              failedItems.push(`Item '${item.name}': ${error.message || 'Unknown error'}`);\n              errorCount++;\n            }\n          }\n        } catch (error: _unknown) {\n          failedItems.push(`Category '${categoryName}': ${error.message || 'Unknown error'}`);\n          errorCount += items.length;\n        }\n      }\n\n      // Reload menu data from backend to get properly structured categories with items\n      // This ensures all Category objects have complete data including the items array\n      await loadMenuData();\n\n      // Provide detailed feedback\n      let message = `Successfully imported ${successCount} items.`;\n\n      if (errorCount > 0) {\n        message += `\\n\\n${errorCount} items failed to import.`;\n\n        if (failedItems.length > 0) {\n          const failedDetails = failedItems.slice(0, 3).join('\\n');\n          const moreFailures =\n            failedItems.length > 3 ? `\\n...and ${failedItems.length - 3} more` : '';\n          _message += `\\n\\nFailed items:\\n${failedDetails}${moreFailures}`;\n        }\n      }\n\n      Alert.alert(errorCount > 0 ? 'Import Partially Complete' : 'Import Complete', _message, [\n        { text: 'OK' },\n      ]);\n    } catch (error: _unknown) {\n      Alert.alert('Import Error', error.message || 'Failed to process CSV data');\n    } finally {\n      setLoading(__false);\n    }\n  };\n\n  const handleExportMenu = async () => {\n    try {\n      setLoading(__true);\n\n      // Get current menu data\n      const [categoriesData, productsData] = await Promise.all([\n        dataService.getCategories(),\n        dataService.getProducts(),\n      ]);\n\n      // Create export data structure\n      const _exportData = {\n        version: '1.0',\n        restaurant: 'Current Restaurant',\n        exported_at: new Date().toISOString(),\n        categories: categoriesData.map(cat => ({\n          id: cat.id,\n          name: cat.name,\n          description: cat.description,\n          sort_order: cat.sort_order,\n        })),\n        products: productsData.map(prod => ({\n          id: prod.id,\n          name: prod.name,\n          description: prod.description,\n          price: prod.price,\n          category_id: prod.category_id,\n          is_active: prod.is_active,\n        })),\n        summary: {\n          total_categories: categoriesData.length,\n          total_products: productsData.length,\n        },\n      };\n\n      Alert.alert(\n        'Export Ready',\n        `Menu exported with ${categoriesData.length} categories and ${productsData.length} products. Export data is prepared for download.`,\n        [\n          { text: 'OK' },\n          {\n            text: 'View Data',\n            onPress: () => {\n              Alert.alert(\n                'Export Data',\n                'Export data logged to console for debugging. In production, this would download a file.',\n              );\n            },\n          },\n        ],\n      );\n    } catch (__error) {\n      Alert.alert('Export Failed', 'Unable to export menu data. Please try again.');\n    } finally {\n      setLoading(__false);\n    }\n  };\n\n  const getSelectedCategoryItems = () => {\n    const category = categories.find(c => c.id === selectedCategory);\n    if (!category) {\n      return [];\n    }\n\n    let items = category.items;\n\n    if (__searchTerm) {\n      items = items.filter(\n        item =>\n          item.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n          item.description.toLowerCase().includes(searchTerm.toLowerCase()),\n      );\n    }\n\n    if (!menuSettings.showUnavailableItems) {\n      items = items.filter(item => item.available);\n    }\n\n    return items;\n  };\n\n  const getTotalItemCount = () => {\n    return categories.reduce((__total, _cat) => total + cat.items.length, 0);\n  };\n\n  const getAvailableItemCount = () => {\n    return categories.reduce(\n      (__total, _cat) => total + cat.items.filter(item => item.available).length,\n      0,\n    );\n  };\n\n  const CategoryTab = ({ category }: { category: Category }) => (\n    <TouchableOpacity\n      style={[\n        styles.categoryTab,\n        selectedCategory === category.id && styles.selectedCategoryTab,\n        !category.visible && styles.hiddenCategoryTab,\n      ]}\n      onPress={() => setSelectedCategory(category.id)}\n      onLongPress={() => handleEditCategory(__category)}>\n      <Text\n        style={[\n          styles.categoryTabText,\n          selectedCategory === category.id && styles.selectedCategoryTabText,\n          !category.visible && styles.hiddenCategoryText,\n        ]}>\n        {category.name}\n      </Text>\n      <Text style={styles.categoryItemCount}>{category.items.length}</Text>\n      {!category.visible && (\n        <Icon name=\"visibility-off\" size={16} color={theme.colors.textSecondary} />\n      )}\n    </TouchableOpacity>\n  );\n\n  const ItemCard = ({ item }: { item: MenuItem }) => (\n    <View style={[styles.itemCard, !item.available && styles.unavailableItem]}>\n      <View style={styles.itemHeader}>\n        <View style={styles.itemInfo}>\n          <Text style={[styles.itemName, !item.available && styles.unavailableText]}>\n            {item.name}\n          </Text>\n          {item.featured && (\n            <View style={styles.featuredBadge}>\n              <Icon name=\"star\" size={12} color={theme.colors.surface} />\n              <Text style={styles.featuredText}>Featured</Text>\n            </View>\n          )}\n        </View>\n        <Text style={[styles.itemPrice, !item.available && styles.unavailableText]}>\n          £{item.price.toFixed(2)}\n        </Text>\n      </View>\n\n      {item.description && (\n        <Text style={[styles.itemDescription, !item.available && styles.unavailableText]}>\n          {item.description}\n        </Text>\n      )}\n\n      {item.allergens.length > 0 && (\n        <View style={styles.allergenContainer}>\n          <Icon name=\"warning\" size={16} color={theme.colors.warning} />\n          <Text style={styles.allergenText}>Contains: {item.allergens.join(', ')}</Text>\n        </View>\n      )}\n\n      <View style={styles.itemActions}>\n        <TouchableOpacity\n          style={[styles.itemActionButton, styles.editButton]}\n          onPress={() => handleEditItem(__item)}>\n          <Icon name=\"edit\" size={16} color={theme.colors.secondary} />\n          <Text style={styles.editButtonText}>Edit</Text>\n        </TouchableOpacity>\n\n        <TouchableOpacity\n          style={[styles.itemActionButton, styles.featuredButton]}\n          onPress={() => toggleItemFeatured(item.id)}>\n          <Icon\n            name={item.featured ? 'star' : 'star-border'}\n            size={16}\n            color={item.featured ? theme.colors.warning : theme.colors.textSecondary}\n          />\n          <Text style={styles.featuredButtonText}>{item.featured ? 'Featured' : 'Feature'}</Text>\n        </TouchableOpacity>\n\n        <TouchableOpacity\n          style={[styles.itemActionButton, styles.availabilityButton]}\n          onPress={() => toggleItemAvailability(item.id)}>\n          <Icon\n            name={item.available ? 'visibility' : 'visibility-off'}\n            size={16}\n            color={item.available ? theme.colors.success : theme.colors.textSecondary}\n          />\n          <Text style={styles.availabilityButtonText}>\n            {item.available ? 'Available' : 'Hidden'}\n          </Text>\n        </TouchableOpacity>\n\n        <TouchableOpacity\n          style={[styles.itemActionButton, styles.deleteButton]}\n          onPress={() => handleDeleteItem(item.id)}>\n          <Icon name=\"delete\" size={16} color={theme.colors.error} />\n          <Text style={styles.deleteButtonText}>Delete</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n\n  return (\n    <View style={styles.container}>\n      {/* Header */}\n      <HeaderWithBackButton\n        title=\"Menu Management\"\n        backgroundColor={theme.colors.primary}\n        textColor={theme.colors.white}\n        rightComponent={\n          <TouchableOpacity onPress={handleAddItem} style={styles.addButton}>\n            <Icon name=\"add\" size={24} color={theme.colors.white} />\n          </TouchableOpacity>\n        }\n      />\n\n      {/* Loading Indicator */}\n      {loading && (\n        <View style={styles.loadingContainer}>\n          <ActivityIndicator size=\"large\" color={theme.colors.primary} />\n          <Text style={styles.loadingText}>Loading menu data...</Text>\n        </View>\n      )}\n\n      {!loading && (\n        <>\n          {/* Stats Summary */}\n          <View style={styles.statsSection}>\n            <View style={styles.statCard}>\n              <Text style={styles.statValue}>{categories.length}</Text>\n              <Text style={styles.statLabel}>Categories</Text>\n            </View>\n            <View style={styles.statCard}>\n              <Text style={styles.statValue}>{getTotalItemCount()}</Text>\n              <Text style={styles.statLabel}>Total Items</Text>\n            </View>\n            <View style={styles.statCard}>\n              <Text style={styles.statValue}>{getAvailableItemCount()}</Text>\n              <Text style={styles.statLabel}>Available</Text>\n            </View>\n          </View>\n\n          {/* Search */}\n          <View style={styles.searchSection}>\n            <View style={styles.searchContainer}>\n              <Icon name=\"search\" size={20} color={theme.colors.textSecondary} />\n              <TextInput\n                style={styles.searchInput}\n                placeholder=\"Search menu items...\"\n                value={searchTerm}\n                onChangeText={setSearchTerm}\n              />\n              {searchTerm.length > 0 && (\n                <TouchableOpacity onPress={() => setSearchTerm('')}>\n                  <Icon name=\"clear\" size={20} color={theme.colors.textSecondary} />\n                </TouchableOpacity>\n              )}\n            </View>\n          </View>\n\n          {/* Category Tabs */}\n          <View style={styles.categorySection}>\n            {categories.length === 0 && !loading ? (\n              <View style={styles.emptyCategoriesState}>\n                <Icon name=\"category\" size={48} color={theme.colors.border} />\n                <Text style={styles.emptyCategoriesTitle}>No Categories Yet</Text>\n                <Text style={styles.emptyCategoriesText}>\n                  Create your first category to start organizing your menu\n                </Text>\n                <TouchableOpacity style={styles.createCategoryButton} onPress={handleAddCategory}>\n                  <Icon name=\"add\" size={20} color={theme.colors.surface} />\n                  <Text style={styles.createCategoryButtonText}>Create Category</Text>\n                </TouchableOpacity>\n              </View>\n            ) : (\n              <ScrollView\n                horizontal\n                showsHorizontalScrollIndicator={false}\n                style={styles.categoryTabs}>\n                {categories.map(category => (\n                  <CategoryTab key={category.id} category={category} />\n                ))}\n                <TouchableOpacity style={styles.addCategoryTab} onPress={handleAddCategory}>\n                  <Icon name=\"add\" size={20} color={theme.colors.primary} />\n                  <Text style={styles.addCategoryText}>Add Category</Text>\n                </TouchableOpacity>\n              </ScrollView>\n            )}\n          </View>\n\n          {/* Items List */}\n          <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n            <View style={styles.itemsSection}>\n              {getSelectedCategoryItems().map(item => (\n                <ItemCard key={item.id} item={item} />\n              ))}\n\n              {getSelectedCategoryItems().length === 0 && (\n                <View style={styles.emptyState}>\n                  <Icon name=\"restaurant-menu\" size={64} color={theme.colors.border} />\n                  <Text style={styles.emptyStateTitle}>No Items Found</Text>\n                  <Text style={styles.emptyStateText}>\n                    {searchTerm\n                      ? 'No items match your search criteria'\n                      : 'Add items to this category to get started'}\n                  </Text>\n                  <TouchableOpacity style={styles.addItemButton} onPress={handleAddItem}>\n                    <Icon name=\"add\" size={20} color={theme.colors.surface} />\n                    <Text style={styles.addItemButtonText}>Add Item</Text>\n                  </TouchableOpacity>\n                </View>\n              )}\n            </View>\n\n            {/* Menu Settings */}\n            <View style={styles.section}>\n              <Text style={styles.sectionTitle}>Menu Display Settings</Text>\n              <View style={styles.settingsCard}>\n                <View style={styles.settingRow}>\n                  <Text style={styles.settingLabel}>Show descriptions</Text>\n                  <Switch\n                    value={menuSettings.showDescriptions}\n                    onValueChange={() => toggleMenuSetting('showDescriptions')}\n                    trackColor={{ false: theme.colors.border, true: theme.colors.primary }}\n                    thumbColor={theme.colors.surface}\n                  />\n                </View>\n\n                <View style={styles.settingRow}>\n                  <Text style={styles.settingLabel}>Show prices</Text>\n                  <Switch\n                    value={menuSettings.showPrices}\n                    onValueChange={() => toggleMenuSetting('showPrices')}\n                    trackColor={{ false: theme.colors.border, true: theme.colors.primary }}\n                    thumbColor={theme.colors.surface}\n                  />\n                </View>\n\n                <View style={styles.settingRow}>\n                  <Text style={styles.settingLabel}>Show allergen information</Text>\n                  <Switch\n                    value={menuSettings.showAllergens}\n                    onValueChange={() => toggleMenuSetting('showAllergens')}\n                    trackColor={{ false: theme.colors.border, true: theme.colors.primary }}\n                    thumbColor={theme.colors.surface}\n                  />\n                </View>\n\n                <View style={styles.settingRow}>\n                  <Text style={styles.settingLabel}>Enable modifiers</Text>\n                  <Switch\n                    value={menuSettings.enableModifiers}\n                    onValueChange={() => toggleMenuSetting('enableModifiers')}\n                    trackColor={{ false: theme.colors.border, true: theme.colors.primary }}\n                    thumbColor={theme.colors.surface}\n                  />\n                </View>\n\n                <View style={styles.settingRow}>\n                  <Text style={styles.settingLabel}>Show unavailable items</Text>\n                  <Switch\n                    value={menuSettings.showUnavailableItems}\n                    onValueChange={() => toggleMenuSetting('showUnavailableItems')}\n                    trackColor={{ false: theme.colors.border, true: theme.colors.primary }}\n                    thumbColor={theme.colors.surface}\n                  />\n                </View>\n              </View>\n            </View>\n\n            {/* Actions */}\n            <View style={styles.section}>\n              <Text style={styles.sectionTitle}>Menu Actions</Text>\n              <View style={styles.actionCard}>\n                <TouchableOpacity style={styles.actionButton} onPress={handleImportMenu}>\n                  <Icon name=\"file-upload\" size={24} color={theme.colors.secondary} />\n                  <Text style={styles.actionButtonText}>Import Menu</Text>\n                  <Icon name=\"chevron-right\" size={24} color={theme.colors.textSecondary} />\n                </TouchableOpacity>\n\n                <TouchableOpacity style={styles.actionButton} onPress={handleExportMenu}>\n                  <Icon name=\"file-download\" size={24} color={theme.colors.secondary} />\n                  <Text style={styles.actionButtonText}>Export Menu</Text>\n                  <Icon name=\"chevron-right\" size={24} color={theme.colors.textSecondary} />\n                </TouchableOpacity>\n\n                <TouchableOpacity\n                  style={styles.actionButton}\n                  onPress={() => Alert.alert('Info', 'Menu templates would be available here')}>\n                  <Icon name=\"library-books\" size={24} color={theme.colors.success} />\n                  <Text style={styles.actionButtonText}>Browse Templates</Text>\n                  <Icon name=\"chevron-right\" size={24} color={theme.colors.textSecondary} />\n                </TouchableOpacity>\n              </View>\n            </View>\n          </ScrollView>\n\n          {/* Item Edit Modal */}\n          <Modal\n            visible={showItemModal}\n            transparent={true}\n            animationType=\"slide\"\n            onRequestClose={() => setShowItemModal(__false)}>\n            <View style={styles.modalOverlay}>\n              <View style={styles.modalContent}>\n                <View style={styles.modalHeader}>\n                  <Text style={styles.modalTitle}>\n                    {editingItem?.id ? 'Edit Item' : 'Add New Item'}\n                  </Text>\n                  <TouchableOpacity onPress={() => setShowItemModal(__false)}>\n                    <Icon name=\"close\" size={24} color={theme.colors.text} />\n                  </TouchableOpacity>\n                </View>\n\n                <ScrollView style={styles.modalBody}>\n                  <Text style={styles.inputLabel}>Item Name *</Text>\n                  <TextInput\n                    style={styles.textInput}\n                    value={editingItem?.name || ''}\n                    onChangeText={text =>\n                      setEditingItem(prev => (prev ? { ...prev, name: text } : _null))\n                    }\n                    placeholder=\"Enter item name\"\n                  />\n\n                  <Text style={styles.inputLabel}>Description</Text>\n                  <TextInput\n                    style={[styles.textInput, styles.textArea]}\n                    value={editingItem?.description || ''}\n                    onChangeText={text =>\n                      setEditingItem(prev => (prev ? { ...prev, description: text } : _null))\n                    }\n                    placeholder=\"Enter item description\"\n                    multiline\n                    numberOfLines={3}\n                  />\n\n                  <Text style={styles.inputLabel}>Price (£) *</Text>\n                  <TextInput\n                    style={styles.textInput}\n                    value={editingItem?.price?.toString() || ''}\n                    onChangeText={_text =>\n                      setEditingItem(prev =>\n                        prev ? { ...prev, price: parseFloat(__text) || 0 } : _null,\n                      )\n                    }\n                    placeholder=\"0.00\"\n                    keyboardType=\"decimal-pad\"\n                  />\n\n                  <View style={styles.checkboxRow}>\n                    <TouchableOpacity\n                      style={styles.checkbox}\n                      onPress={() =>\n                        setEditingItem(prev =>\n                          prev ? { ...prev, available: !prev.available } : _null,\n                        )\n                      }>\n                      <Icon\n                        name={editingItem?.available ? 'check-box' : 'check-box-outline-blank'}\n                        size={24}\n                        color={theme.colors.primary}\n                      />\n                      <Text style={styles.checkboxLabel}>Available</Text>\n                    </TouchableOpacity>\n\n                    <TouchableOpacity\n                      style={styles.checkbox}\n                      onPress={() =>\n                        setEditingItem(prev =>\n                          prev ? { ...prev, featured: !prev.featured } : _null,\n                        )\n                      }>\n                      <Icon\n                        name={editingItem?.featured ? 'check-box' : 'check-box-outline-blank'}\n                        size={24}\n                        color={theme.colors.primary}\n                      />\n                      <Text style={styles.checkboxLabel}>Featured</Text>\n                    </TouchableOpacity>\n                  </View>\n                </ScrollView>\n\n                <View style={styles.modalActions}>\n                  <TouchableOpacity\n                    style={styles.cancelButton}\n                    onPress={() => setShowItemModal(__false)}>\n                    <Text style={styles.cancelButtonText}>Cancel</Text>\n                  </TouchableOpacity>\n                  <TouchableOpacity style={styles.saveButton} onPress={handleSaveItem}>\n                    <Text style={styles.saveButtonText}>Save</Text>\n                  </TouchableOpacity>\n                </View>\n              </View>\n            </View>\n          </Modal>\n\n          {/* Category Edit Modal */}\n          <Modal\n            visible={showCategoryModal}\n            transparent={true}\n            animationType=\"slide\"\n            onRequestClose={() => setShowCategoryModal(__false)}>\n            <View style={styles.modalOverlay}>\n              <View style={styles.modalContent}>\n                <View style={styles.modalHeader}>\n                  <Text style={styles.modalTitle}>\n                    {editingCategory?.id ? 'Edit Category' : 'Add New Category'}\n                  </Text>\n                  <TouchableOpacity onPress={() => setShowCategoryModal(__false)}>\n                    <Icon name=\"close\" size={24} color={theme.colors.text} />\n                  </TouchableOpacity>\n                </View>\n\n                <View style={styles.modalBody}>\n                  <Text style={styles.inputLabel}>Category Name *</Text>\n                  <TextInput\n                    style={styles.textInput}\n                    value={editingCategory?.name || ''}\n                    onChangeText={text =>\n                      setEditingCategory(prev => (prev ? { ...prev, name: text } : _null))\n                    }\n                    placeholder=\"Enter category name\"\n                  />\n\n                  <Text style={styles.inputLabel}>Description</Text>\n                  <TextInput\n                    style={styles.textInput}\n                    value={editingCategory?.description || ''}\n                    onChangeText={text =>\n                      setEditingCategory(prev => (prev ? { ...prev, description: text } : _null))\n                    }\n                    placeholder=\"Enter category description\"\n                  />\n\n                  <View style={styles.checkboxRow}>\n                    <TouchableOpacity\n                      style={styles.checkbox}\n                      onPress={() =>\n                        setEditingCategory(prev =>\n                          prev ? { ...prev, visible: !prev.visible } : _null,\n                        )\n                      }>\n                      <Icon\n                        name={editingCategory?.visible ? 'check-box' : 'check-box-outline-blank'}\n                        size={24}\n                        color={theme.colors.primary}\n                      />\n                      <Text style={styles.checkboxLabel}>Visible in menu</Text>\n                    </TouchableOpacity>\n                  </View>\n                </View>\n\n                <View style={styles.modalActions}>\n                  <TouchableOpacity\n                    style={styles.cancelButton}\n                    onPress={() => setShowCategoryModal(__false)}>\n                    <Text style={styles.cancelButtonText}>Cancel</Text>\n                  </TouchableOpacity>\n                  <TouchableOpacity style={styles.saveButton} onPress={handleSaveCategory}>\n                    <Text style={styles.saveButtonText}>Save</Text>\n                  </TouchableOpacity>\n                </View>\n              </View>\n            </View>\n          </Modal>\n        </>\n      )}\n    </View>\n  );\n};\n\nconst createStyles = (theme: _unknown) =>\n  StyleSheet.create({\n    container: {\n      flex: 1,\n      backgroundColor: theme.colors.background,\n    },\n    addButton: {\n      padding: 8,\n      marginRight: 8,\n    },\n    statsSection: {\n      flexDirection: 'row',\n      backgroundColor: theme.colors.surface,\n      paddingVertical: 16,\n      paddingHorizontal: 16,\n      gap: 16,\n    },\n    statCard: {\n      flex: 1,\n      alignItems: 'center',\n      paddingVertical: 12,\n      backgroundColor: theme.colors.background,\n      borderRadius: 8,\n    },\n    statValue: {\n      fontSize: 24,\n      fontWeight: 'bold',\n      color: theme.colors.primary,\n      marginBottom: 4,\n    },\n    statLabel: {\n      fontSize: 12,\n      color: theme.colors.textSecondary,\n    },\n    searchSection: {\n      backgroundColor: theme.colors.surface,\n      paddingHorizontal: 16,\n      paddingBottom: 16,\n    },\n    searchContainer: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      backgroundColor: theme.colors.background,\n      borderRadius: 8,\n      paddingHorizontal: 12,\n      paddingVertical: 8,\n      gap: 8,\n    },\n    searchInput: {\n      flex: 1,\n      fontSize: 16,\n      color: theme.colors.text,\n    },\n    categorySection: {\n      backgroundColor: theme.colors.surface,\n      paddingBottom: 8,\n    },\n    categoryTabs: {\n      paddingHorizontal: 16,\n    },\n    categoryTab: {\n      paddingVertical: 8,\n      paddingHorizontal: 16,\n      marginRight: 8,\n      backgroundColor: theme.colors.background,\n      borderRadius: 20,\n      flexDirection: 'row',\n      alignItems: 'center',\n      gap: 8,\n    },\n    selectedCategoryTab: {\n      backgroundColor: theme.colors.primary,\n    },\n    hiddenCategoryTab: {\n      opacity: 0.6,\n    },\n    categoryTabText: {\n      fontSize: 14,\n      fontWeight: '500',\n      color: theme.colors.text,\n    },\n    selectedCategoryTabText: {\n      color: theme.colors.white,\n    },\n    hiddenCategoryText: {\n      color: theme.colors.textSecondary,\n    },\n    categoryItemCount: {\n      fontSize: 12,\n      color: theme.colors.textSecondary,\n      backgroundColor: theme.colors.border,\n      paddingHorizontal: 6,\n      paddingVertical: 2,\n      borderRadius: 10,\n      minWidth: 20,\n      textAlign: 'center',\n    },\n    addCategoryTab: {\n      paddingVertical: 8,\n      paddingHorizontal: 16,\n      marginRight: 8,\n      backgroundColor: theme.colors.background,\n      borderRadius: 20,\n      flexDirection: 'row',\n      alignItems: 'center',\n      gap: 4,\n      borderWidth: 1,\n      borderColor: theme.colors.primary,\n      borderStyle: 'dashed',\n    },\n    addCategoryText: {\n      fontSize: 14,\n      fontWeight: '500',\n      color: theme.colors.primary,\n    },\n    content: {\n      flex: 1,\n    },\n    itemsSection: {\n      backgroundColor: theme.colors.surface,\n      marginVertical: 8,\n      paddingVertical: 16,\n    },\n    itemCard: {\n      backgroundColor: theme.colors.background,\n      marginHorizontal: 16,\n      marginBottom: 12,\n      borderRadius: 12,\n      padding: 16,\n      borderWidth: 1,\n      borderColor: theme.colors.border,\n    },\n    unavailableItem: {\n      opacity: 0.6,\n    },\n    itemHeader: {\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      alignItems: 'flex-start',\n      marginBottom: 8,\n    },\n    itemInfo: {\n      flex: 1,\n      flexDirection: 'row',\n      alignItems: 'center',\n      gap: 8,\n    },\n    itemName: {\n      fontSize: 18,\n      fontWeight: '600',\n      color: theme.colors.text,\n      flex: 1,\n    },\n    unavailableText: {\n      color: theme.colors.textSecondary,\n    },\n    featuredBadge: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      backgroundColor: theme.colors.warning,\n      paddingHorizontal: 6,\n      paddingVertical: 2,\n      borderRadius: 10,\n      gap: 2,\n    },\n    featuredText: {\n      fontSize: 10,\n      fontWeight: '500',\n      color: theme.colors.surface,\n    },\n    itemPrice: {\n      fontSize: 18,\n      fontWeight: 'bold',\n      color: theme.colors.primary,\n    },\n    itemDescription: {\n      fontSize: 14,\n      color: theme.colors.textSecondary,\n      marginBottom: 8,\n      lineHeight: 20,\n    },\n    allergenContainer: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      marginBottom: 12,\n      gap: 4,\n    },\n    allergenText: {\n      fontSize: 12,\n      color: theme.colors.warning,\n      flex: 1,\n    },\n    itemActions: {\n      flexDirection: 'row',\n      gap: 8,\n    },\n    itemActionButton: {\n      flex: 1,\n      flexDirection: 'row',\n      alignItems: 'center',\n      justifyContent: 'center',\n      paddingVertical: 6,\n      paddingHorizontal: 8,\n      borderRadius: 6,\n      gap: 4,\n    },\n    editButton: {\n      backgroundColor: theme.colors.surface,\n      borderWidth: 1,\n      borderColor: theme.colors.secondary,\n    },\n    editButtonText: {\n      fontSize: 12,\n      fontWeight: '500',\n      color: theme.colors.secondary,\n    },\n    featuredButton: {\n      backgroundColor: theme.colors.surface,\n      borderWidth: 1,\n      borderColor: theme.colors.warning,\n    },\n    featuredButtonText: {\n      fontSize: 12,\n      fontWeight: '500',\n      color: theme.colors.warning,\n    },\n    availabilityButton: {\n      backgroundColor: theme.colors.surface,\n      borderWidth: 1,\n      borderColor: theme.colors.success,\n    },\n    availabilityButtonText: {\n      fontSize: 12,\n      fontWeight: '500',\n      color: theme.colors.success,\n    },\n    deleteButton: {\n      backgroundColor: theme.colors.surface,\n      borderWidth: 1,\n      borderColor: theme.colors.error,\n    },\n    deleteButtonText: {\n      fontSize: 12,\n      fontWeight: '500',\n      color: theme.colors.error,\n    },\n    emptyCategoriesState: {\n      alignItems: 'center',\n      paddingVertical: 40,\n      paddingHorizontal: 32,\n    },\n    emptyCategoriesTitle: {\n      fontSize: 18,\n      fontWeight: 'bold',\n      color: theme.colors.text,\n      marginBottom: 8,\n      marginTop: 12,\n    },\n    emptyCategoriesText: {\n      fontSize: 14,\n      color: theme.colors.textSecondary,\n      textAlign: 'center',\n      lineHeight: 20,\n      marginBottom: 20,\n    },\n    createCategoryButton: {\n      backgroundColor: theme.colors.primary,\n      paddingHorizontal: 20,\n      paddingVertical: 12,\n      borderRadius: 8,\n      flexDirection: 'row',\n      alignItems: 'center',\n      gap: 8,\n    },\n    createCategoryButtonText: {\n      fontSize: 16,\n      fontWeight: '600',\n      color: theme.colors.surface,\n    },\n    emptyState: {\n      alignItems: 'center',\n      paddingVertical: 40,\n      paddingHorizontal: 32,\n    },\n    emptyStateTitle: {\n      fontSize: 20,\n      fontWeight: 'bold',\n      color: theme.colors.text,\n      marginTop: 16,\n      marginBottom: 8,\n    },\n    emptyStateText: {\n      fontSize: 16,\n      color: theme.colors.textSecondary,\n      textAlign: 'center',\n      lineHeight: 22,\n      marginBottom: 24,\n    },\n    addItemButton: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      backgroundColor: theme.colors.primary,\n      paddingVertical: 12,\n      paddingHorizontal: 20,\n      borderRadius: 8,\n      gap: 8,\n    },\n    addItemButtonText: {\n      fontSize: 16,\n      fontWeight: '500',\n      color: theme.colors.surface,\n    },\n    section: {\n      backgroundColor: theme.colors.surface,\n      marginVertical: 8,\n      paddingVertical: 16,\n    },\n    sectionTitle: {\n      fontSize: 18,\n      fontWeight: '600',\n      color: theme.colors.text,\n      paddingHorizontal: 16,\n      marginBottom: 16,\n    },\n    settingsCard: {\n      paddingHorizontal: 16,\n    },\n    settingRow: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      justifyContent: 'space-between',\n      paddingVertical: 12,\n      borderBottomWidth: 1,\n      borderBottomColor: theme.colors.border,\n    },\n    settingLabel: {\n      fontSize: 16,\n      fontWeight: '500',\n      color: theme.colors.text,\n    },\n    actionCard: {\n      paddingHorizontal: 16,\n    },\n    actionButton: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      paddingVertical: 16,\n      borderBottomWidth: 1,\n      borderBottomColor: theme.colors.border,\n    },\n    actionButtonText: {\n      fontSize: 16,\n      fontWeight: '500',\n      color: theme.colors.text,\n      marginLeft: 12,\n      flex: 1,\n    },\n    modalOverlay: {\n      flex: 1,\n      backgroundColor: 'rgba(0, 0, 0, 0.5)',\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n    modalContent: {\n      backgroundColor: theme.colors.surface,\n      borderRadius: 12,\n      width: '90%',\n      maxHeight: '80%',\n    },\n    modalHeader: {\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      padding: 16,\n      borderBottomWidth: 1,\n      borderBottomColor: theme.colors.border,\n    },\n    modalTitle: {\n      fontSize: 20,\n      fontWeight: 'bold',\n      color: theme.colors.text,\n    },\n    modalBody: {\n      padding: 16,\n      maxHeight: 400,\n    },\n    inputLabel: {\n      fontSize: 16,\n      fontWeight: '500',\n      color: theme.colors.text,\n      marginBottom: 8,\n      marginTop: 16,\n    },\n    textInput: {\n      borderWidth: 1,\n      borderColor: theme.colors.border,\n      borderRadius: 8,\n      paddingHorizontal: 12,\n      paddingVertical: 8,\n      fontSize: 16,\n      color: theme.colors.text,\n      backgroundColor: theme.colors.surface,\n    },\n    textArea: {\n      minHeight: 80,\n      textAlignVertical: 'top',\n    },\n    checkboxRow: {\n      flexDirection: 'row',\n      marginTop: 16,\n      gap: 24,\n    },\n    checkbox: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      gap: 8,\n    },\n    checkboxLabel: {\n      fontSize: 16,\n      color: theme.colors.text,\n    },\n    modalActions: {\n      flexDirection: 'row',\n      padding: 16,\n      borderTopWidth: 1,\n      borderTopColor: theme.colors.border,\n      gap: 12,\n    },\n    cancelButton: {\n      flex: 1,\n      paddingVertical: 12,\n      backgroundColor: theme.colors.background,\n      borderRadius: 8,\n      alignItems: 'center',\n    },\n    cancelButtonText: {\n      fontSize: 16,\n      fontWeight: '500',\n      color: theme.colors.text,\n    },\n    saveButton: {\n      flex: 1,\n      paddingVertical: 12,\n      backgroundColor: theme.colors.primary,\n      borderRadius: 8,\n      alignItems: 'center',\n    },\n    saveButtonText: {\n      fontSize: 16,\n      fontWeight: '500',\n      color: theme.colors.white,\n    },\n    loadingContainer: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n    loadingText: {\n      marginTop: 16,\n      fontSize: 16,\n      color: theme.colors.textSecondary,\n    },\n  });\n\nexport default MenuManagementScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/settings/app/PricingDiscountsScreen.tsx","messages":[{"ruleId":"react/no-unstable-nested-components","severity":1,"message":"Do not define components during render. React will see a new component type on every render and destroy the entire subtree’s DOM nodes and state (https://reactjs.org/docs/reconciliation.html#elements-of-different-types). Instead, move this component definition out of the parent component “PricingDiscountsScreen” and pass data as props.","line":246,"column":24,"nodeType":"ArrowFunctionExpression","endLine":334,"endColumn":4},{"ruleId":"react/no-unstable-nested-components","severity":1,"message":"Do not define components during render. React will see a new component type on every render and destroy the entire subtree’s DOM nodes and state (https://reactjs.org/docs/reconciliation.html#elements-of-different-types). Instead, move this component definition out of the parent component “PricingDiscountsScreen” and pass data as props.","line":336,"column":27,"nodeType":"ArrowFunctionExpression","endLine":353,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  ScrollView,\n  Alert,\n  Switch,\n  TextInput,\n  Modal,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation } from '@react-navigation/native';\n\n// Clover POS Color Scheme\nconst Colors = {\n  primary: '#00A651',\n  secondary: '#0066CC',\n  success: '#00A651',\n  warning: '#FF6B35',\n  danger: '#E74C3C',\n  background: '#F5F5F5',\n  white: '#FFFFFF',\n  lightGray: '#E5E5E5',\n  mediumGray: '#999999',\n  darkGray: '#666666',\n  text: '#333333',\n  lightText: '#666666',\n  border: '#DDDDDD',\n};\n\ninterface Discount {\n  id: string;\n  name: string;\n  description: string;\n  type: 'percentage' | 'fixed_amount' | 'buy_x_get_y';\n  value: number;\n  minimumAmount?: number;\n  maximumDiscount?: number;\n  validFrom: Date;\n  validTo: Date;\n  isActive: boolean;\n  applicableItems: string[];\n  timesUsed: number;\n  maxUses?: number;\n}\n\ninterface PricingRule {\n  id: string;\n  name: string;\n  type: 'bulk_discount' | 'happy_hour' | 'loyalty_tier';\n  conditions: unknown;\n  discountValue: number;\n  isActive: boolean;\n}\n\nconst PricingDiscountsScreen: React.FC = () => {\n  const navigation = useNavigation();\n\n  const [discounts, setDiscounts] = useState<Discount[]>([\n    {\n      id: 'disc1',\n      name: '10% Off Coffee',\n      description: 'Get 10% off all coffee drinks',\n      type: 'percentage',\n      value: 10,\n      minimumAmount: 5,\n      validFrom: new Date(),\n      validTo: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days\n      isActive: _true,\n      applicableItems: ['drinks'],\n      timesUsed: 45,\n      maxUses: 100,\n    },\n    {\n      id: 'disc2',\n      name: 'Buy 2 Get 1 Free',\n      description: 'Buy 2 pastries, get 1 free',\n      type: 'buy_x_get_y',\n      value: 1,\n      validFrom: new Date(),\n      validTo: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 days\n      isActive: _true,\n      applicableItems: ['pastries'],\n      timesUsed: 12,\n    },\n  ]);\n\n  const [pricingRules, setPricingRules] = useState<PricingRule[]>([\n    {\n      id: 'rule1',\n      name: 'Happy Hour',\n      type: 'happy_hour',\n      conditions: {\n        startTime: '15:00',\n        endTime: '17:00',\n        days: ['Monday', 'Tuesday', 'Wednesday'],\n      },\n      discountValue: 20,\n      isActive: _true,\n    },\n    {\n      id: 'rule2',\n      name: 'Bulk Coffee Discount',\n      type: 'bulk_discount',\n      conditions: { minQuantity: 5, category: 'drinks' },\n      discountValue: 15,\n      isActive: _false,\n    },\n  ]);\n\n  // Settings\n  const [discountSettings, setDiscountSettings] = useState({\n    allowStackingDiscounts: _false,\n    requireManagerApproval: _true,\n    showDiscountOnReceipt: _true,\n    enableLoyaltyDiscounts: _true,\n    autoApplyBestDiscount: _true,\n    enableCoupons: _true,\n    enableGroupDiscounts: _false,\n    maxDiscountPercentage: 50,\n  });\n\n  const [editingDiscount, setEditingDiscount] = useState<Discount | null>(__null);\n  const [showDiscountModal, setShowDiscountModal] = useState(__false);\n\n  const handleCreateDiscount = () => {\n    setEditingDiscount({\n      id: '',\n      name: '',\n      description: '',\n      type: 'percentage',\n      value: 0,\n      validFrom: new Date(),\n      validTo: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),\n      isActive: _true,\n      applicableItems: [],\n      timesUsed: 0,\n    });\n    setShowDiscountModal(__true);\n  };\n\n  const handleEditDiscount = (_discount: _Discount) => {\n    setEditingDiscount(__discount);\n    setShowDiscountModal(__true);\n  };\n\n  const handleSaveDiscount = () => {\n    if (!editingDiscount?.name.trim()) {\n      Alert.alert('Error', 'Discount name is required.');\n      return;\n    }\n\n    if (editingDiscount.value <= 0) {\n      Alert.alert('Error', 'Discount value must be greater than 0.');\n      return;\n    }\n\n    if (editingDiscount.id) {\n      // Update existing discount\n      setDiscounts(prev => prev.map(d => (d.id === editingDiscount.id ? editingDiscount : _d)));\n    } else {\n      // Add new discount\n      const newDiscount = {\n        ...editingDiscount,\n        id: Date.now().toString(),\n      };\n      setDiscounts(prev => [...prev, newDiscount]);\n    }\n\n    setShowDiscountModal(__false);\n    setEditingDiscount(__null);\n  };\n\n  const handleDeleteDiscount = (discountId: _string) => {\n    const discount = discounts.find(d => d.id === discountId);\n    Alert.alert('Delete Discount', `Delete \"${discount?.name}\"?`, [\n      { text: 'Cancel', style: 'cancel' },\n      {\n        text: 'Delete',\n        style: 'destructive',\n        onPress: () => {\n          setDiscounts(prev => prev.filter(d => d.id !== discountId));\n        },\n      },\n    ]);\n  };\n\n  const toggleDiscountStatus = (discountId: _string) => {\n    setDiscounts(prev =>\n      prev.map(discount =>\n        discount.id === discountId ? { ...discount, isActive: !discount.isActive } : _discount,\n      ),\n    );\n  };\n\n  const togglePricingRule = (ruleId: _string) => {\n    setPricingRules(prev =>\n      prev.map(rule => (rule.id === ruleId ? { ...rule, isActive: !rule.isActive } : _rule)),\n    );\n  };\n\n  const toggleDiscountSetting = (setting: keyof typeof discountSettings) => {\n    setDiscountSettings(prev => ({\n      ...prev,\n      [setting]: !prev[setting],\n    }));\n  };\n\n  const getDiscountTypeIcon = (_type: _string) => {\n    switch (__type) {\n      case 'percentage':\n        return 'percent';\n      case 'fixed_amount':\n        return 'attach-money';\n      case 'buy_x_get_y':\n        return 'redeem';\n      default:\n        return 'local-offer';\n    }\n  };\n\n  const formatDiscountValue = (discount: _Discount) => {\n    switch (discount.type) {\n      case 'percentage':\n        return `${discount.value}% off`;\n      case 'fixed_amount':\n        return `£${discount.value.toFixed(2)} off`;\n      case 'buy_x_get_y':\n        return `Buy X Get ${discount.value} Free`;\n      default:\n        return `${discount.value}`;\n    }\n  };\n\n  const isDiscountExpired = (discount: _Discount) => {\n    return new Date() > discount.validTo;\n  };\n\n  const isDiscountActive = (discount: _Discount) => {\n    const now = new Date();\n    return discount.isActive && now >= discount.validFrom && now <= discount.validTo;\n  };\n\n  const DiscountCard = ({ discount }: { discount: Discount }) => (\n    <View\n      style={[\n        styles.discountCard,\n        !discount.isActive && styles.inactiveCard,\n        isDiscountExpired(__discount) && styles.expiredCard,\n      ]}>\n      <View style={styles.discountHeader}>\n        <View style={styles.discountInfo}>\n          <View style={styles.discountTitleRow}>\n            <Icon\n              name={getDiscountTypeIcon(discount.type)}\n              size={20}\n              color={isDiscountActive(__discount) ? Colors.primary : Colors.mediumGray}\n            />\n            <Text\n              style={[styles.discountName, !isDiscountActive(__discount) && styles.inactiveText]}>\n              {discount.name}\n            </Text>\n            {isDiscountExpired(__discount) && (\n              <View style={styles.expiredBadge}>\n                <Text style={styles.expiredText}>Expired</Text>\n              </View>\n            )}\n          </View>\n\n          <Text\n            style={[\n              styles.discountDescription,\n              !isDiscountActive(__discount) && styles.inactiveText,\n            ]}>\n            {discount.description}\n          </Text>\n\n          <View style={styles.discountDetails}>\n            <Text style={styles.discountValue}>{formatDiscountValue(__discount)}</Text>\n            {discount.minimumAmount && (\n              <Text style={styles.discountCondition}>\n                Min: £{discount.minimumAmount.toFixed(2)}\n              </Text>\n            )}\n          </View>\n\n          <View style={styles.discountStats}>\n            <Text style={styles.discountStat}>\n              Used: {discount.timesUsed}\n              {discount.maxUses ? `/${discount.maxUses}` : ''}\n            </Text>\n            <Text style={styles.discountStat}>\n              Valid until: {discount.validTo.toLocaleDateString()}\n            </Text>\n          </View>\n        </View>\n\n        <View style={styles.discountActions}>\n          <Switch\n            value={discount.isActive}\n            onValueChange={() => toggleDiscountStatus(discount.id)}\n            trackColor={{ false: Colors.lightGray, true: Colors.primary }}\n            thumbColor={Colors.white}\n            style={styles.discountSwitch}\n          />\n        </View>\n      </View>\n\n      <View style={styles.discountButtons}>\n        <TouchableOpacity\n          style={styles.discountButton}\n          onPress={() => handleEditDiscount(__discount)}>\n          <Icon name=\"edit\" size={16} color={Colors.secondary} />\n          <Text style={styles.discountButtonText}>Edit</Text>\n        </TouchableOpacity>\n\n        <TouchableOpacity\n          style={[styles.discountButton, styles.deleteButton]}\n          onPress={() => handleDeleteDiscount(discount.id)}>\n          <Icon name=\"delete\" size={16} color={Colors.danger} />\n          <Text style={[styles.discountButtonText, styles.deleteButtonText]}>Delete</Text>\n        </TouchableOpacity>\n\n        <TouchableOpacity\n          style={styles.discountButton}\n          onPress={() => Alert.alert('Analytics', `View analytics for ${discount.name}`)}>\n          <Icon name=\"analytics\" size={16} color={Colors.success} />\n          <Text style={styles.discountButtonText}>Analytics</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n\n  const PricingRuleCard = ({ rule }: { rule: PricingRule }) => (\n    <View style={[styles.ruleCard, !rule.isActive && styles.inactiveCard]}>\n      <View style={styles.ruleHeader}>\n        <View style={styles.ruleInfo}>\n          <Text style={[styles.ruleName, !rule.isActive && styles.inactiveText]}>{rule.name}</Text>\n          <Text style={styles.ruleType}>{rule.type.replace('_', ' ').toUpperCase()}</Text>\n          <Text style={styles.ruleDiscount}>{rule.discountValue}% discount</Text>\n        </View>\n\n        <Switch\n          value={rule.isActive}\n          onValueChange={() => togglePricingRule(rule.id)}\n          trackColor={{ false: Colors.lightGray, true: Colors.primary }}\n          thumbColor={Colors.white}\n        />\n      </View>\n    </View>\n  );\n\n  return (\n    <View style={styles.container}>\n      {/* Header */}\n      <View style={styles.header}>\n        <TouchableOpacity onPress={() => navigation.goBack()} style={styles.backButton}>\n          <Icon name=\"arrow-back\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n        <Text style={styles.headerTitle}>Pricing & Discounts</Text>\n        <TouchableOpacity style={styles.addButton} onPress={handleCreateDiscount}>\n          <Icon name=\"add\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n      </View>\n\n      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n        {/* Quick Stats */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Overview</Text>\n          <View style={styles.statsContainer}>\n            <View style={styles.statCard}>\n              <Text style={styles.statValue}>{discounts.filter(d => d.isActive).length}</Text>\n              <Text style={styles.statLabel}>Active Discounts</Text>\n            </View>\n            <View style={styles.statCard}>\n              <Text style={styles.statValue}>\n                {discounts.reduce((__sum, _d) => sum + d.timesUsed, 0)}\n              </Text>\n              <Text style={styles.statLabel}>Total Uses</Text>\n            </View>\n            <View style={styles.statCard}>\n              <Text style={styles.statValue}>{pricingRules.filter(r => r.isActive).length}</Text>\n              <Text style={styles.statLabel}>Active Rules</Text>\n            </View>\n          </View>\n        </View>\n\n        {/* Active Discounts */}\n        <View style={styles.section}>\n          <View style={styles.sectionHeader}>\n            <Text style={styles.sectionTitle}>Discounts</Text>\n            <TouchableOpacity style={styles.createButton} onPress={handleCreateDiscount}>\n              <Icon name=\"add\" size={20} color={Colors.primary} />\n              <Text style={styles.createButtonText}>Create</Text>\n            </TouchableOpacity>\n          </View>\n\n          {discounts.map(discount => (\n            <DiscountCard key={discount.id} discount={discount} />\n          ))}\n\n          {discounts.length === 0 && (\n            <View style={styles.emptyState}>\n              <Icon name=\"local-offer\" size={48} color={Colors.lightGray} />\n              <Text style={styles.emptyStateText}>No discounts configured</Text>\n              <TouchableOpacity style={styles.emptyStateButton} onPress={handleCreateDiscount}>\n                <Text style={styles.emptyStateButtonText}>Create First Discount</Text>\n              </TouchableOpacity>\n            </View>\n          )}\n        </View>\n\n        {/* Pricing Rules */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Pricing Rules</Text>\n          {pricingRules.map(rule => (\n            <PricingRuleCard key={rule.id} rule={rule} />\n          ))}\n        </View>\n\n        {/* Discount Settings */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Discount Settings</Text>\n          <View style={styles.settingsCard}>\n            <View style={styles.settingRow}>\n              <View style={styles.settingInfo}>\n                <Text style={styles.settingLabel}>Allow stacking discounts</Text>\n                <Text style={styles.settingDescription}>\n                  Apply multiple discounts to the same order\n                </Text>\n              </View>\n              <Switch\n                value={discountSettings.allowStackingDiscounts}\n                onValueChange={() => toggleDiscountSetting('allowStackingDiscounts')}\n                trackColor={{ false: Colors.lightGray, true: Colors.primary }}\n                thumbColor={Colors.white}\n              />\n            </View>\n\n            <View style={styles.settingRow}>\n              <View style={styles.settingInfo}>\n                <Text style={styles.settingLabel}>Require manager approval</Text>\n                <Text style={styles.settingDescription}>Manager must approve large discounts</Text>\n              </View>\n              <Switch\n                value={discountSettings.requireManagerApproval}\n                onValueChange={() => toggleDiscountSetting('requireManagerApproval')}\n                trackColor={{ false: Colors.lightGray, true: Colors.primary }}\n                thumbColor={Colors.white}\n              />\n            </View>\n\n            <View style={styles.settingRow}>\n              <View style={styles.settingInfo}>\n                <Text style={styles.settingLabel}>Show discount on receipt</Text>\n                <Text style={styles.settingDescription}>\n                  Display discount details on customer receipt\n                </Text>\n              </View>\n              <Switch\n                value={discountSettings.showDiscountOnReceipt}\n                onValueChange={() => toggleDiscountSetting('showDiscountOnReceipt')}\n                trackColor={{ false: Colors.lightGray, true: Colors.primary }}\n                thumbColor={Colors.white}\n              />\n            </View>\n\n            <View style={styles.settingRow}>\n              <View style={styles.settingInfo}>\n                <Text style={styles.settingLabel}>Auto-apply best discount</Text>\n                <Text style={styles.settingDescription}>\n                  Automatically apply the best available discount\n                </Text>\n              </View>\n              <Switch\n                value={discountSettings.autoApplyBestDiscount}\n                onValueChange={() => toggleDiscountSetting('autoApplyBestDiscount')}\n                trackColor={{ false: Colors.lightGray, true: Colors.primary }}\n                thumbColor={Colors.white}\n              />\n            </View>\n          </View>\n        </View>\n\n        {/* Actions */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Actions</Text>\n          <View style={styles.actionCard}>\n            <TouchableOpacity\n              style={styles.actionButton}\n              onPress={() => Alert.alert('Info', 'Import discounts from file')}>\n              <Icon name=\"file-upload\" size={24} color={Colors.secondary} />\n              <Text style={styles.actionButtonText}>Import Discounts</Text>\n              <Icon name=\"chevron-right\" size={24} color={Colors.lightText} />\n            </TouchableOpacity>\n\n            <TouchableOpacity\n              style={styles.actionButton}\n              onPress={() => Alert.alert('Info', 'Export current discounts')}>\n              <Icon name=\"file-download\" size={24} color={Colors.secondary} />\n              <Text style={styles.actionButtonText}>Export Discounts</Text>\n              <Icon name=\"chevron-right\" size={24} color={Colors.lightText} />\n            </TouchableOpacity>\n\n            <TouchableOpacity\n              style={styles.actionButton}\n              onPress={() => Alert.alert('Info', 'View discount analytics')}>\n              <Icon name=\"analytics\" size={24} color={Colors.success} />\n              <Text style={styles.actionButtonText}>View Analytics</Text>\n              <Icon name=\"chevron-right\" size={24} color={Colors.lightText} />\n            </TouchableOpacity>\n          </View>\n        </View>\n      </ScrollView>\n\n      {/* Discount Edit Modal */}\n      <Modal\n        visible={showDiscountModal}\n        transparent={true}\n        animationType=\"slide\"\n        onRequestClose={() => setShowDiscountModal(__false)}>\n        <View style={styles.modalOverlay}>\n          <View style={styles.modalContent}>\n            <View style={styles.modalHeader}>\n              <Text style={styles.modalTitle}>\n                {editingDiscount?.id ? 'Edit Discount' : 'Create Discount'}\n              </Text>\n              <TouchableOpacity onPress={() => setShowDiscountModal(__false)}>\n                <Icon name=\"close\" size={24} color={Colors.text} />\n              </TouchableOpacity>\n            </View>\n\n            <ScrollView style={styles.modalBody}>\n              <Text style={styles.inputLabel}>Discount Name *</Text>\n              <TextInput\n                style={styles.textInput}\n                value={editingDiscount?.name || ''}\n                onChangeText={text =>\n                  setEditingDiscount(prev => (prev ? { ...prev, name: text } : _null))\n                }\n                placeholder=\"Enter discount name\"\n              />\n\n              <Text style={styles.inputLabel}>Description</Text>\n              <TextInput\n                style={[styles.textInput, styles.textArea]}\n                value={editingDiscount?.description || ''}\n                onChangeText={text =>\n                  setEditingDiscount(prev => (prev ? { ...prev, description: text } : _null))\n                }\n                placeholder=\"Enter discount description\"\n                multiline\n                numberOfLines={3}\n              />\n\n              <Text style={styles.inputLabel}>Discount Value *</Text>\n              <TextInput\n                style={styles.textInput}\n                value={editingDiscount?.value?.toString() || ''}\n                onChangeText={_text =>\n                  setEditingDiscount(prev =>\n                    prev ? { ...prev, value: parseFloat(__text) || 0 } : _null,\n                  )\n                }\n                placeholder={editingDiscount?.type === 'percentage' ? '10' : '5.00'}\n                keyboardType=\"decimal-pad\"\n              />\n\n              <View style={styles.checkboxRow}>\n                <TouchableOpacity\n                  style={styles.checkbox}\n                  onPress={() =>\n                    setEditingDiscount(prev =>\n                      prev ? { ...prev, isActive: !prev.isActive } : _null,\n                    )\n                  }>\n                  <Icon\n                    name={editingDiscount?.isActive ? 'check-box' : 'check-box-outline-blank'}\n                    size={24}\n                    color={Colors.primary}\n                  />\n                  <Text style={styles.checkboxLabel}>Active</Text>\n                </TouchableOpacity>\n              </View>\n            </ScrollView>\n\n            <View style={styles.modalActions}>\n              <TouchableOpacity\n                style={styles.cancelButton}\n                onPress={() => setShowDiscountModal(__false)}>\n                <Text style={styles.cancelButtonText}>Cancel</Text>\n              </TouchableOpacity>\n              <TouchableOpacity style={styles.saveButton} onPress={handleSaveDiscount}>\n                <Text style={styles.saveButtonText}>Save</Text>\n              </TouchableOpacity>\n            </View>\n          </View>\n        </View>\n      </Modal>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.primary,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    paddingTop: 48,\n  },\n  backButton: {\n    padding: 8,\n  },\n  headerTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.white,\n  },\n  addButton: {\n    padding: 8,\n  },\n  content: {\n    flex: 1,\n  },\n  section: {\n    backgroundColor: Colors.white,\n    marginVertical: 8,\n    paddingVertical: 16,\n  },\n  sectionHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingHorizontal: 16,\n    marginBottom: 16,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  createButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingVertical: 6,\n    paddingHorizontal: 12,\n    backgroundColor: Colors.white,\n    borderRadius: 6,\n    borderWidth: 1,\n    borderColor: Colors.primary,\n    gap: 4,\n  },\n  createButtonText: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.primary,\n  },\n  statsContainer: {\n    flexDirection: 'row',\n    paddingHorizontal: 16,\n    gap: 16,\n  },\n  statCard: {\n    flex: 1,\n    alignItems: 'center',\n    paddingVertical: 16,\n    backgroundColor: Colors.background,\n    borderRadius: 8,\n  },\n  statValue: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: Colors.primary,\n    marginBottom: 4,\n  },\n  statLabel: {\n    fontSize: 12,\n    color: Colors.lightText,\n  },\n  discountCard: {\n    backgroundColor: Colors.background,\n    marginHorizontal: 16,\n    marginBottom: 12,\n    borderRadius: 12,\n    padding: 16,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  inactiveCard: {\n    opacity: 0.6,\n  },\n  expiredCard: {\n    backgroundColor: Colors.lightGray,\n  },\n  discountHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 12,\n  },\n  discountInfo: {\n    flex: 1,\n    marginRight: 16,\n  },\n  discountTitleRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    marginBottom: 8,\n  },\n  discountName: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n    flex: 1,\n  },\n  inactiveText: {\n    color: Colors.mediumGray,\n  },\n  expiredBadge: {\n    backgroundColor: Colors.danger,\n    paddingHorizontal: 8,\n    paddingVertical: 2,\n    borderRadius: 10,\n  },\n  expiredText: {\n    fontSize: 10,\n    fontWeight: '500',\n    color: Colors.white,\n  },\n  discountDescription: {\n    fontSize: 14,\n    color: Colors.lightText,\n    marginBottom: 8,\n  },\n  discountDetails: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 16,\n    marginBottom: 8,\n  },\n  discountValue: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: Colors.primary,\n  },\n  discountCondition: {\n    fontSize: 12,\n    color: Colors.lightText,\n  },\n  discountStats: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  discountStat: {\n    fontSize: 12,\n    color: Colors.lightText,\n  },\n  discountActions: {\n    alignItems: 'flex-end',\n  },\n  discountSwitch: {\n    marginBottom: 8,\n  },\n  discountButtons: {\n    flexDirection: 'row',\n    gap: 8,\n  },\n  discountButton: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 8,\n    paddingHorizontal: 12,\n    backgroundColor: Colors.white,\n    borderRadius: 6,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    gap: 4,\n  },\n  deleteButton: {\n    borderColor: Colors.danger,\n  },\n  discountButtonText: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: Colors.text,\n  },\n  deleteButtonText: {\n    color: Colors.danger,\n  },\n  ruleCard: {\n    backgroundColor: Colors.background,\n    marginHorizontal: 16,\n    marginBottom: 12,\n    borderRadius: 12,\n    padding: 16,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  ruleHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  ruleInfo: {\n    flex: 1,\n  },\n  ruleName: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  ruleType: {\n    fontSize: 12,\n    color: Colors.secondary,\n    fontWeight: '500',\n    marginBottom: 4,\n  },\n  ruleDiscount: {\n    fontSize: 14,\n    color: Colors.primary,\n    fontWeight: '500',\n  },\n  emptyState: {\n    alignItems: 'center',\n    paddingVertical: 32,\n    paddingHorizontal: 24,\n  },\n  emptyStateText: {\n    fontSize: 16,\n    color: Colors.lightText,\n    marginTop: 16,\n    marginBottom: 16,\n  },\n  emptyStateButton: {\n    backgroundColor: Colors.primary,\n    paddingVertical: 12,\n    paddingHorizontal: 24,\n    borderRadius: 8,\n  },\n  emptyStateButtonText: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.white,\n  },\n  settingsCard: {\n    paddingHorizontal: 16,\n  },\n  settingRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.lightGray,\n  },\n  settingInfo: {\n    flex: 1,\n    marginRight: 16,\n  },\n  settingLabel: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  settingDescription: {\n    fontSize: 14,\n    color: Colors.lightText,\n  },\n  actionCard: {\n    paddingHorizontal: 16,\n  },\n  actionButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingVertical: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.lightGray,\n  },\n  actionButtonText: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.text,\n    marginLeft: 12,\n    flex: 1,\n  },\n  modalOverlay: {\n    flex: 1,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  modalContent: {\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    width: '90%',\n    maxHeight: '80%',\n  },\n  modalHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.lightGray,\n  },\n  modalTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.text,\n  },\n  modalBody: {\n    padding: 16,\n    maxHeight: 400,\n  },\n  inputLabel: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.text,\n    marginBottom: 8,\n    marginTop: 16,\n  },\n  textInput: {\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 8,\n    paddingHorizontal: 12,\n    paddingVertical: 8,\n    fontSize: 16,\n    color: Colors.text,\n    backgroundColor: Colors.white,\n  },\n  textArea: {\n    minHeight: 80,\n    textAlignVertical: 'top',\n  },\n  checkboxRow: {\n    flexDirection: 'row',\n    marginTop: 16,\n    gap: 24,\n  },\n  checkbox: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n  },\n  checkboxLabel: {\n    fontSize: 16,\n    color: Colors.text,\n  },\n  modalActions: {\n    flexDirection: 'row',\n    padding: 16,\n    borderTopWidth: 1,\n    borderTopColor: Colors.lightGray,\n    gap: 12,\n  },\n  cancelButton: {\n    flex: 1,\n    paddingVertical: 12,\n    backgroundColor: Colors.background,\n    borderRadius: 8,\n    alignItems: 'center',\n  },\n  cancelButtonText: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.text,\n  },\n  saveButton: {\n    flex: 1,\n    paddingVertical: 12,\n    backgroundColor: Colors.primary,\n    borderRadius: 8,\n    alignItems: 'center',\n  },\n  saveButtonText: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.white,\n  },\n});\n\nexport default PricingDiscountsScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/settings/app/SystemDiagnosticsScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_setSystemMetrics' is assigned a value but never used.","line":67,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":67,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_systemInfo' is assigned a value but never used.","line":193,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":193,"endColumn":20}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  ScrollView,\n  Alert,\n  Modal,\n  Platform,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation } from '@react-navigation/native';\n\n// Clover POS Color Scheme\nconst Colors = {\n  primary: '#00A651',\n  secondary: '#0066CC',\n  success: '#00A651',\n  warning: '#FF6B35',\n  danger: '#E74C3C',\n  background: '#F5F5F5',\n  white: '#FFFFFF',\n  lightGray: '#E5E5E5',\n  mediumGray: '#999999',\n  darkGray: '#666666',\n  text: '#333333',\n  lightText: '#666666',\n  border: '#DDDDDD',\n};\n\ninterface SystemMetric {\n  name: string;\n  value: string;\n  status: 'good' | 'warning' | 'critical';\n  icon: string;\n  description: string;\n}\n\ninterface DiagnosticTest {\n  id: string;\n  name: string;\n  description: string;\n  icon: string;\n  status: 'pending' | 'running' | 'passed' | 'failed';\n  duration?: number;\n  lastRun?: Date;\n}\n\ninterface SystemLog {\n  id: string;\n  level: 'info' | 'warning' | 'error';\n  message: string;\n  timestamp: Date;\n  component: string;\n}\n\nconst SystemDiagnosticsScreen: React.FC = () => {\n  const navigation = useNavigation();\n\n  const [isRunningTests, setIsRunningTests] = useState(__false);\n  const [showLogsModal, setShowLogsModal] = useState(__false);\n  const [showSystemInfoModal, setShowSystemInfoModal] = useState(__false);\n  const [testProgress, setTestProgress] = useState(0);\n  const [currentTest, setCurrentTest] = useState('');\n\n  const [systemMetrics, _setSystemMetrics] = useState<SystemMetric[]>([\n    {\n      name: 'CPU Usage',\n      value: '23%',\n      status: 'good',\n      icon: 'memory',\n      description: 'Current processor utilization',\n    },\n    {\n      name: 'Memory Usage',\n      value: '1.2GB / 3GB',\n      status: 'good',\n      icon: 'storage',\n      description: 'RAM consumption',\n    },\n    {\n      name: 'Storage Space',\n      value: '45GB / 64GB',\n      status: 'warning',\n      icon: 'sd-storage',\n      description: 'Available device storage',\n    },\n    {\n      name: 'Network Speed',\n      value: '52 Mbps',\n      status: 'good',\n      icon: 'wifi',\n      description: 'Internet connection speed',\n    },\n    {\n      name: 'Battery Level',\n      value: '87%',\n      status: 'good',\n      icon: 'battery-full',\n      description: 'Device battery status',\n    },\n    {\n      name: 'App Performance',\n      value: '94%',\n      status: 'good',\n      icon: 'speed',\n      description: 'Overall app responsiveness',\n    },\n  ]);\n\n  const [diagnosticTests, setDiagnosticTests] = useState<DiagnosticTest[]>([\n    {\n      id: 'network',\n      name: 'Network Connectivity',\n      description: 'Test internet and server connections',\n      icon: 'wifi',\n      status: 'pending',\n      lastRun: new Date(Date.now() - 2 * 60 * 60 * 1000),\n    },\n    {\n      id: 'database',\n      name: 'Database Integrity',\n      description: 'Verify data consistency and performance',\n      icon: 'storage',\n      status: 'pending',\n      lastRun: new Date(Date.now() - 24 * 60 * 60 * 1000),\n    },\n    {\n      id: 'hardware',\n      name: 'Hardware Components',\n      description: 'Check printer, _scanner, and peripherals',\n      icon: 'devices',\n      status: 'pending',\n      lastRun: new Date(Date.now() - 12 * 60 * 60 * 1000),\n    },\n    {\n      id: 'performance',\n      name: 'Performance Metrics',\n      description: 'Measure app speed and responsiveness',\n      icon: 'speed',\n      status: 'pending',\n      lastRun: new Date(Date.now() - 6 * 60 * 60 * 1000),\n    },\n    {\n      id: 'security',\n      name: 'Security Scan',\n      description: 'Check for vulnerabilities and updates',\n      icon: 'security',\n      status: 'pending',\n      lastRun: new Date(Date.now() - 48 * 60 * 60 * 1000),\n    },\n  ]);\n\n  const systemLogs: SystemLog[] = [\n    {\n      id: 'log1',\n      level: 'info',\n      message: 'System startup completed successfully',\n      timestamp: new Date(Date.now() - 30 * 60 * 1000),\n      component: 'System',\n    },\n    {\n      id: 'log2',\n      level: 'warning',\n      message: 'Low storage space detected',\n      timestamp: new Date(Date.now() - 45 * 60 * 1000),\n      component: 'Storage',\n    },\n    {\n      id: 'log3',\n      level: 'info',\n      message: 'Backup completed successfully',\n      timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000),\n      component: 'Backup',\n    },\n    {\n      id: 'log4',\n      level: 'error',\n      message: 'Failed to connect to receipt printer',\n      timestamp: new Date(Date.now() - 3 * 60 * 60 * 1000),\n      component: 'Hardware',\n    },\n    {\n      id: 'log5',\n      level: 'info',\n      message: 'User authentication successful',\n      timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000),\n      component: 'Auth',\n    },\n  ];\n\n  const _systemInfo = {\n    'App Version': '2.1.4',\n    'Build Number': '2024.12.17.1',\n    'OS Version': Platform.OS === 'ios' ? 'iOS 17.2' : 'Android 14',\n    'Device Model': Platform.OS === 'ios' ? 'iPhone 15 Pro' : 'Samsung Galaxy Tab',\n    RAM: '3GB',\n    Storage: '64GB',\n    Network: 'WiFi (5GHz)',\n    'Location Services': 'Enabled',\n    Notifications: 'Enabled',\n    'Background Refresh': 'Enabled',\n  };\n\n  const runDiagnosticTests = async () => {\n    setIsRunningTests(__true);\n    setTestProgress(0);\n    setCurrentTest('');\n\n    const testsToRun = diagnosticTests.filter(test => test.status === 'pending');\n    const totalTests = testsToRun.length;\n\n    for (let i = 0; i < testsToRun.length; i++) {\n      const test = testsToRun[i];\n      setCurrentTest(test.name);\n\n      // Update test status to running\n      setDiagnosticTests(prev =>\n        prev.map(t => (t.id === test.id ? { ...t, status: 'running' } : _t)),\n      );\n\n      // Simulate test execution\n      const _testDuration = Math.random() * 3000 + 1000; // 1-4 seconds\n      await new Promise(_resolve => setTimeout(__resolve, _testDuration));\n\n      // Simulate test result (90% pass rate)\n      const passed = Math.random() > 0.1;\n\n      setDiagnosticTests(prev =>\n        prev.map(t =>\n          t.id === test.id\n            ? {\n                ...t,\n                status: passed ? 'passed' : 'failed',\n                duration: _testDuration,\n                lastRun: new Date(),\n              }\n            : _t,\n        ),\n      );\n\n      setTestProgress(((i + 1) / totalTests) * 100);\n    }\n\n    setIsRunningTests(__false);\n    setCurrentTest('');\n\n    const failedTests = diagnosticTests.filter(test => test.status === 'failed');\n    if (failedTests.length > 0) {\n      Alert.alert(\n        'Diagnostic Complete',\n        `${failedTests.length} test(__s) failed. Please check the results and take appropriate action.`,\n        [{ text: 'OK' }],\n      );\n    } else {\n      Alert.alert(\n        'All Tests Passed',\n        'System diagnostics completed successfully. Your system is running optimally.',\n        [{ text: 'OK' }],\n      );\n    }\n  };\n\n  const runSingleTest = async (testId: _string) => {\n    const test = diagnosticTests.find(t => t.id === testId);\n    if (!test) {\n      return;\n    }\n\n    setDiagnosticTests(prev => prev.map(t => (t.id === testId ? { ...t, status: 'running' } : _t)));\n\n    // Simulate test execution\n    const _testDuration = Math.random() * 3000 + 1000;\n    await new Promise(_resolve => setTimeout(__resolve, _testDuration));\n\n    const passed = Math.random() > 0.1;\n\n    setDiagnosticTests(prev =>\n      prev.map(t =>\n        t.id === testId\n          ? {\n              ...t,\n              status: passed ? 'passed' : 'failed',\n              duration: _testDuration,\n              lastRun: new Date(),\n            }\n          : _t,\n      ),\n    );\n\n    Alert.alert('Test Complete', `${test.name}: ${passed ? 'PASSED' : 'FAILED'}`, [{ text: 'OK' }]);\n  };\n\n  const clearCache = () => {\n    Alert.alert(\n      'Clear Cache',\n      'This will clear temporary files and may improve performance. Continue?',\n      [\n        { text: 'Cancel', style: 'cancel' },\n        {\n          text: 'Clear',\n          onPress: () => {\n            Alert.alert('Success', 'Cache cleared successfully. 247MB freed.');\n          },\n        },\n      ],\n    );\n  };\n\n  const optimizeDatabase = () => {\n    Alert.alert(\n      'Optimize Database',\n      'This will reorganize database files for better performance. Continue?',\n      [\n        { text: 'Cancel', style: 'cancel' },\n        {\n          text: 'Optimize',\n          onPress: () => {\n            Alert.alert('Success', 'Database optimization completed successfully.');\n          },\n        },\n      ],\n    );\n  };\n\n  const getStatusColor = (_status: _string) => {\n    switch (__status) {\n      case 'good':\n      case 'passed':\n        return Colors.success;\n      case 'warning':\n        return Colors.warning;\n      case 'critical':\n      case 'failed':\n        return Colors.danger;\n      case 'running':\n        return Colors.secondary;\n      default:\n        return Colors.mediumGray;\n    }\n  };\n\n  const getStatusIcon = (_status: _string) => {\n    switch (__status) {\n      case 'good':\n      case 'passed':\n        return 'check-circle';\n      case 'warning':\n        return 'warning';\n      case 'critical':\n      case 'failed':\n        return 'error';\n      case 'running':\n        return 'sync';\n      default:\n        return 'help';\n    }\n  };\n\n  const getLogLevelColor = (_level: _string) => {\n    switch (__level) {\n      case 'info':\n        return Colors.secondary;\n      case 'warning':\n        return Colors.warning;\n      case 'error':\n        return Colors.danger;\n      default:\n        return Colors.mediumGray;\n    }\n  };\n\n  const getLogLevelIcon = (_level: _string) => {\n    switch (__level) {\n      case 'info':\n        return 'info';\n      case 'warning':\n        return 'warning';\n      case 'error':\n        return 'error';\n      default:\n        return 'help';\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      {/* Header */}\n      <View style={styles.header}>\n        <TouchableOpacity onPress={() => navigation.goBack()} style={styles.backButton}>\n          <Icon name=\"arrow-back\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n        <Text style={styles.headerTitle}>System Diagnostics</Text>\n        <TouchableOpacity style={styles.infoButton} onPress={() => setShowSystemInfoModal(__true)}>\n          <Icon name=\"info\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n      </View>\n\n      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n        {/* System Health Overview */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>System Health</Text>\n          <View style={styles.metricsGrid}>\n            {systemMetrics.map((__metric, _index) => (\n              <View key={index} style={styles.metricCard}>\n                <View style={styles.metricHeader}>\n                  <Icon name={metric.icon} size={24} color={getStatusColor(metric.status)} />\n                  <View\n                    style={[\n                      styles.statusIndicator,\n                      { backgroundColor: getStatusColor(metric.status) },\n                    ]}\n                  />\n                </View>\n                <Text style={styles.metricValue}>{metric.value}</Text>\n                <Text style={styles.metricName}>{metric.name}</Text>\n                <Text style={styles.metricDescription}>{metric.description}</Text>\n              </View>\n            ))}\n          </View>\n        </View>\n\n        {/* Diagnostic Tests */}\n        <View style={styles.section}>\n          <View style={styles.sectionHeader}>\n            <Text style={styles.sectionTitle}>Diagnostic Tests</Text>\n            <TouchableOpacity\n              style={[styles.runAllButton, isRunningTests && styles.runAllButtonDisabled]}\n              onPress={runDiagnosticTests}\n              disabled={isRunningTests}>\n              <Icon\n                name={isRunningTests ? 'hourglass-empty' : 'play-arrow'}\n                size={20}\n                color={Colors.white}\n              />\n              <Text style={styles.runAllButtonText}>\n                {isRunningTests ? 'Running...' : 'Run All'}\n              </Text>\n            </TouchableOpacity>\n          </View>\n\n          {isRunningTests && (\n            <View style={styles.testProgress}>\n              <Text style={styles.currentTestText}>Running: {currentTest}</Text>\n              <View style={styles.progressContainer}>\n                <View style={[styles.progressBar, { width: `${testProgress}%` }]} />\n              </View>\n              <Text style={styles.progressText}>{Math.round(__testProgress)}% Complete</Text>\n            </View>\n          )}\n\n          <View style={styles.testsContainer}>\n            {diagnosticTests.map(test => (\n              <View key={test.id} style={styles.testCard}>\n                <View style={styles.testHeader}>\n                  <View style={styles.testInfo}>\n                    <View style={styles.testTitleRow}>\n                      <Icon name={test.icon} size={24} color={Colors.primary} />\n                      <Text style={styles.testName}>{test.name}</Text>\n                      <View\n                        style={[\n                          styles.testStatus,\n                          { backgroundColor: getStatusColor(test.status) },\n                        ]}>\n                        <Icon name={getStatusIcon(test.status)} size={16} color={Colors.white} />\n                      </View>\n                    </View>\n                    <Text style={styles.testDescription}>{test.description}</Text>\n                    {test.lastRun && (\n                      <Text style={styles.testLastRun}>\n                        Last run: {test.lastRun.toLocaleDateString()} at{' '}\n                        {test.lastRun.toLocaleTimeString()}\n                      </Text>\n                    )}\n                  </View>\n                </View>\n\n                <TouchableOpacity\n                  style={[\n                    styles.testButton,\n                    test.status === 'running' && styles.testButtonDisabled,\n                  ]}\n                  onPress={() => runSingleTest(test.id)}\n                  disabled={test.status === 'running' || isRunningTests}>\n                  <Icon\n                    name={test.status === 'running' ? 'sync' : 'play-arrow'}\n                    size={16}\n                    color={Colors.secondary}\n                  />\n                  <Text style={styles.testButtonText}>\n                    {test.status === 'running' ? 'Running' : 'Run Test'}\n                  </Text>\n                </TouchableOpacity>\n              </View>\n            ))}\n          </View>\n        </View>\n\n        {/* Maintenance Tools */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Maintenance Tools</Text>\n          <View style={styles.maintenanceCard}>\n            <TouchableOpacity style={styles.maintenanceButton} onPress={clearCache}>\n              <Icon name=\"delete-sweep\" size={24} color={Colors.warning} />\n              <View style={styles.maintenanceButtonContent}>\n                <Text style={styles.maintenanceButtonTitle}>Clear Cache</Text>\n                <Text style={styles.maintenanceButtonDescription}>\n                  Remove temporary files to free up space\n                </Text>\n              </View>\n              <Icon name=\"chevron-right\" size={24} color={Colors.lightText} />\n            </TouchableOpacity>\n\n            <TouchableOpacity style={styles.maintenanceButton} onPress={optimizeDatabase}>\n              <Icon name=\"tune\" size={24} color={Colors.secondary} />\n              <View style={styles.maintenanceButtonContent}>\n                <Text style={styles.maintenanceButtonTitle}>Optimize Database</Text>\n                <Text style={styles.maintenanceButtonDescription}>\n                  Reorganize data for better performance\n                </Text>\n              </View>\n              <Icon name=\"chevron-right\" size={24} color={Colors.lightText} />\n            </TouchableOpacity>\n\n            <TouchableOpacity\n              style={styles.maintenanceButton}\n              onPress={() => Alert.alert('Info', 'Update check would be performed here')}>\n              <Icon name=\"system-update\" size={24} color={Colors.success} />\n              <View style={styles.maintenanceButtonContent}>\n                <Text style={styles.maintenanceButtonTitle}>Check for Updates</Text>\n                <Text style={styles.maintenanceButtonDescription}>\n                  Check for app and system updates\n                </Text>\n              </View>\n              <Icon name=\"chevron-right\" size={24} color={Colors.lightText} />\n            </TouchableOpacity>\n\n            <TouchableOpacity\n              style={styles.maintenanceButton}\n              onPress={() => Alert.alert('Info', 'Performance report would be generated here')}>\n              <Icon name=\"assessment\" size={24} color={Colors.primary} />\n              <View style={styles.maintenanceButtonContent}>\n                <Text style={styles.maintenanceButtonTitle}>Generate Performance Report</Text>\n                <Text style={styles.maintenanceButtonDescription}>\n                  Create detailed system performance report\n                </Text>\n              </View>\n              <Icon name=\"chevron-right\" size={24} color={Colors.lightText} />\n            </TouchableOpacity>\n          </View>\n        </View>\n\n        {/* System Logs */}\n        <View style={styles.section}>\n          <View style={styles.sectionHeader}>\n            <Text style={styles.sectionTitle}>Recent System Logs</Text>\n            <TouchableOpacity\n              style={styles.viewLogsButton}\n              onPress={() => setShowLogsModal(__true)}>\n              <Text style={styles.viewLogsText}>View All</Text>\n              <Icon name=\"chevron-right\" size={20} color={Colors.primary} />\n            </TouchableOpacity>\n          </View>\n\n          <View style={styles.logsContainer}>\n            {systemLogs.slice(0, 3).map(log => (\n              <View key={log.id} style={styles.logItem}>\n                <Icon\n                  name={getLogLevelIcon(log.level)}\n                  size={20}\n                  color={getLogLevelColor(log.level)}\n                />\n                <View style={styles.logContent}>\n                  <Text style={styles.logMessage}>{log.message}</Text>\n                  <View style={styles.logMeta}>\n                    <Text style={styles.logComponent}>{log.component}</Text>\n                    <Text style={styles.logTimestamp}>{log.timestamp.toLocaleTimeString()}</Text>\n                  </View>\n                </View>\n              </View>\n            ))}\n          </View>\n        </View>\n      </ScrollView>\n\n      {/* System Logs Modal */}\n      <Modal\n        visible={showLogsModal}\n        transparent={true}\n        animationType=\"slide\"\n        onRequestClose={() => setShowLogsModal(__false)}>\n        <View style={styles.modalOverlay}>\n          <View style={styles.modalContent}>\n            <View style={styles.modalHeader}>\n              <Text style={styles.modalTitle}>System Logs</Text>\n              <TouchableOpacity onPress={() => setShowLogsModal(__false)}>\n                <Icon name=\"close\" size={24} color={Colors.text} />\n              </TouchableOpacity>\n            </View>\n\n            <ScrollView style={styles.modalBody}>\n              {systemLogs.map(log => (\n                <View key={log.id} style={styles.logItemFull}>\n                  <View style={styles.logHeader}>\n                    <Icon\n                      name={getLogLevelIcon(log.level)}\n                      size={20}\n                      color={getLogLevelColor(log.level)}\n                    />\n                    <Text style={styles.logLevel}>{log.level.toUpperCase()}</Text>\n                    <Text style={styles.logTimestampFull}>\n                      {log.timestamp.toLocaleDateString()} {log.timestamp.toLocaleTimeString()}\n                    </Text>\n                  </View>\n                  <Text style={styles.logMessageFull}>{log.message}</Text>\n                  <Text style={styles.logComponentFull}>Component: {log.component}</Text>\n                </View>\n              ))}\n            </ScrollView>\n          </View>\n        </View>\n      </Modal>\n\n      {/* System Info Modal */}\n      <Modal\n        visible={showSystemInfoModal}\n        transparent={true}\n        animationType=\"slide\"\n        onRequestClose={() => setShowSystemInfoModal(__false)}>\n        <View style={styles.modalOverlay}>\n          <View style={styles.modalContent}>\n            <View style={styles.modalHeader}>\n              <Text style={styles.modalTitle}>System Information</Text>\n              <TouchableOpacity onPress={() => setShowSystemInfoModal(__false)}>\n                <Icon name=\"close\" size={24} color={Colors.text} />\n              </TouchableOpacity>\n            </View>\n\n            <ScrollView style={styles.modalBody}>\n              {Object.entries(__systemInfo).map(([key, value]) => (\n                <View key={key} style={styles.infoRow}>\n                  <Text style={styles.infoKey}>{key}</Text>\n                  <Text style={styles.infoValue}>{value}</Text>\n                </View>\n              ))}\n            </ScrollView>\n          </View>\n        </View>\n      </Modal>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.primary,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    paddingTop: 48,\n  },\n  backButton: {\n    padding: 8,\n  },\n  headerTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.white,\n  },\n  infoButton: {\n    padding: 8,\n  },\n  content: {\n    flex: 1,\n  },\n  section: {\n    backgroundColor: Colors.white,\n    marginVertical: 8,\n    paddingVertical: 16,\n  },\n  sectionHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingHorizontal: 16,\n    marginBottom: 16,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n    paddingHorizontal: 16,\n    marginBottom: 16,\n  },\n  runAllButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: Colors.primary,\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    borderRadius: 6,\n    gap: 4,\n  },\n  runAllButtonDisabled: {\n    opacity: 0.7,\n  },\n  runAllButtonText: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.white,\n  },\n  metricsGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    paddingHorizontal: 16,\n    gap: 12,\n  },\n  metricCard: {\n    width: '47%',\n    backgroundColor: Colors.background,\n    borderRadius: 12,\n    padding: 16,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  metricHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  statusIndicator: {\n    width: 8,\n    height: 8,\n    borderRadius: 4,\n  },\n  metricValue: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  metricName: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  metricDescription: {\n    fontSize: 11,\n    color: Colors.lightText,\n    lineHeight: 14,\n  },\n  testProgress: {\n    paddingHorizontal: 16,\n    marginBottom: 16,\n  },\n  currentTestText: {\n    fontSize: 14,\n    color: Colors.text,\n    marginBottom: 8,\n  },\n  progressContainer: {\n    height: 4,\n    backgroundColor: Colors.lightGray,\n    borderRadius: 2,\n    marginBottom: 8,\n  },\n  progressBar: {\n    height: '100%',\n    backgroundColor: Colors.primary,\n    borderRadius: 2,\n  },\n  progressText: {\n    fontSize: 12,\n    color: Colors.lightText,\n    textAlign: 'center',\n  },\n  testsContainer: {\n    paddingHorizontal: 16,\n  },\n  testCard: {\n    backgroundColor: Colors.background,\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 12,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  testHeader: {\n    marginBottom: 12,\n  },\n  testInfo: {\n    flex: 1,\n  },\n  testTitleRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    marginBottom: 8,\n  },\n  testName: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    flex: 1,\n  },\n  testStatus: {\n    width: 24,\n    height: 24,\n    borderRadius: 12,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  testDescription: {\n    fontSize: 14,\n    color: Colors.lightText,\n    marginBottom: 4,\n  },\n  testLastRun: {\n    fontSize: 12,\n    color: Colors.mediumGray,\n  },\n  testButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n    backgroundColor: Colors.white,\n    borderRadius: 6,\n    borderWidth: 1,\n    borderColor: Colors.secondary,\n    gap: 4,\n  },\n  testButtonDisabled: {\n    opacity: 0.5,\n  },\n  testButtonText: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.secondary,\n  },\n  maintenanceCard: {\n    paddingHorizontal: 16,\n  },\n  maintenanceButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingVertical: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.lightGray,\n  },\n  maintenanceButtonContent: {\n    flex: 1,\n    marginLeft: 12,\n  },\n  maintenanceButtonTitle: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  maintenanceButtonDescription: {\n    fontSize: 14,\n    color: Colors.lightText,\n  },\n  viewLogsButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 4,\n  },\n  viewLogsText: {\n    fontSize: 14,\n    color: Colors.primary,\n    fontWeight: '500',\n  },\n  logsContainer: {\n    paddingHorizontal: 16,\n  },\n  logItem: {\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    paddingVertical: 12,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.lightGray,\n    gap: 12,\n  },\n  logContent: {\n    flex: 1,\n  },\n  logMessage: {\n    fontSize: 14,\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  logMeta: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  logComponent: {\n    fontSize: 12,\n    color: Colors.secondary,\n    fontWeight: '500',\n  },\n  logTimestamp: {\n    fontSize: 12,\n    color: Colors.mediumGray,\n  },\n  modalOverlay: {\n    flex: 1,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  modalContent: {\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    width: '90%',\n    maxHeight: '80%',\n  },\n  modalHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.lightGray,\n  },\n  modalTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.text,\n  },\n  modalBody: {\n    padding: 16,\n    maxHeight: 400,\n  },\n  logItemFull: {\n    paddingVertical: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.lightGray,\n  },\n  logHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    marginBottom: 8,\n  },\n  logLevel: {\n    fontSize: 12,\n    fontWeight: 'bold',\n    color: Colors.text,\n  },\n  logTimestampFull: {\n    fontSize: 12,\n    color: Colors.mediumGray,\n    marginLeft: 'auto',\n  },\n  logMessageFull: {\n    fontSize: 14,\n    color: Colors.text,\n    marginBottom: 4,\n    lineHeight: 20,\n  },\n  logComponentFull: {\n    fontSize: 12,\n    color: Colors.secondary,\n    fontWeight: '500',\n  },\n  infoRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    paddingVertical: 12,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.lightGray,\n  },\n  infoKey: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.text,\n    flex: 1,\n  },\n  infoValue: {\n    fontSize: 14,\n    color: Colors.darkGray,\n    flex: 1,\n    textAlign: 'right',\n  },\n});\n\nexport default SystemDiagnosticsScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/settings/business/BankDetailsScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_user' is assigned a value but never used.","line":34,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_existingDetails' is assigned a value but never used.","line":60,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":60,"endColumn":29},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: styles.formInput","line":443,"column":3,"nodeType":"Property","endLine":452,"endColumn":4}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadBankDetails'. Either include it or remove the dependency array.","line":54,"column":6,"nodeType":"ArrayExpression","endLine":54,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadBankDetails]","fix":{"range":[1423,1425],"text":"[loadBankDetails]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  StatusBar,\n  SafeAreaView,\n  TouchableOpacity,\n  ScrollView,\n  Alert,\n  KeyboardAvoidingView,\n  Platform,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation } from '@react-navigation/native';\nimport { SimpleTextInput } from '../../../components/inputs'; // Assuming SimpleDecimalInput not needed for now\nimport { useAuth } from '../../../contexts/AuthContext';\nimport Colors from '../../../constants/Colors';\n\ninterface BankDetails {\n  accountHolderName: string;\n  bankName: string;\n  accountNumber: string;\n  sortCode: string;\n  iban?: string;\n  swiftCode?: string;\n  accountType: 'business' | 'personal';\n  currency: string;\n  primaryAccount: boolean;\n}\n\nconst BankDetailsScreen: React.FC = () => {\n  const navigation = useNavigation();\n  const { _user } = useAuth();\n\n  const [bankDetails, setBankDetails] = useState<BankDetails>({\n    accountHolderName: '',\n    bankName: '',\n    accountNumber: '',\n    sortCode: '',\n    iban: '',\n    swiftCode: '',\n    accountType: 'business',\n    currency: 'GBP',\n    primaryAccount: _true,\n  });\n\n  const [isLoading, setIsLoading] = useState(__false);\n  const [hasExistingDetails, setHasExistingDetails] = useState(__false);\n\n  useEffect(() => {\n    loadBankDetails();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const loadBankDetails = async () => {\n    try {\n      // In real implementation, this would fetch from API\n      // For now, we'll simulate checking if details exist\n      const _existingDetails = await getMockBankDetails();\n      if (__existingDetails) {\n        setBankDetails(__existingDetails);\n        setHasExistingDetails(__true);\n      }\n    } catch (__error) {\n      // Error handled silently\n    }\n  };\n\n  const getMockBankDetails = async (): Promise<BankDetails | null> => {\n    // Simulate API call - return mock data if restaurant has saved details\n    return new Promise(resolve => {\n      setTimeout(() => {\n        // Return null for new setup, or mock data for existing\n        resolve({\n          accountHolderName: 'Taco Libre Ltd',\n          bankName: 'Lloyds Bank',\n          accountNumber: '12345678',\n          sortCode: '30-99-88',\n          iban: 'GB29 LOYD 3099 8812 3456 78',\n          swiftCode: 'LOYDGB2L',\n          accountType: 'business',\n          currency: 'GBP',\n          primaryAccount: _true,\n        });\n      }, 1000);\n    });\n  };\n\n  const handleSave = async () => {\n    // Validate required fields\n    if (\n      !bankDetails.accountHolderName.trim() ||\n      !bankDetails.bankName.trim() ||\n      !bankDetails.accountNumber.trim() ||\n      !bankDetails.sortCode.trim()\n    ) {\n      Alert.alert('Error', 'Please fill in all required fields');\n      return;\n    }\n\n    // Validate sort code format (XX-XX-XX)\n    const sortCodeRegex = /^\\d{2}-\\d{2}-\\d{2}$/;\n    if (!sortCodeRegex.test(bankDetails.sortCode)) {\n      Alert.alert('Error', 'Sort code must be in format XX-XX-XX');\n      return;\n    }\n\n    // Validate account number (8 digits for UK)\n    if (bankDetails.accountNumber.length !== 8 || !/^\\d+$/.test(bankDetails.accountNumber)) {\n      Alert.alert('Error', 'Account number must be 8 digits');\n      return;\n    }\n\n    setIsLoading(__true);\n\n    try {\n      // In real implementation, this would save to API\n      await saveBankDetails(__bankDetails);\n\n      Alert.alert(\n        'Success',\n        hasExistingDetails\n          ? 'Bank details updated successfully'\n          : 'Bank details saved successfully',\n        [{ text: 'OK', onPress: () => navigation.goBack() }],\n      );\n    } catch (__error) {\n      Alert.alert('Error', 'Failed to save bank details. Please try again.');\n    } finally {\n      setIsLoading(__false);\n    }\n  };\n\n  const saveBankDetails = async (_details: _BankDetails): Promise<void> => {\n    // Simulate API call\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve();\n      }, 1500);\n    });\n  };\n\n  const formatSortCode = (text: _string) => {\n    // Remove all non-digits\n    const digits = text.replace(/\\D/g, '');\n\n    // Add hyphens automatically\n    if (digits.length <= 2) {\n      return digits;\n    }\n    if (digits.length <= 4) {\n      return `${digits.slice(0, 2)}-${digits.slice(2)}`;\n    }\n    return `${digits.slice(0, 2)}-${digits.slice(2, 4)}-${digits.slice(4, 6)}`;\n  };\n\n  const handleSortCodeChange = (_text: _string) => {\n    const formatted = formatSortCode(__text);\n    setBankDetails({ ...bankDetails, sortCode: formatted });\n  };\n\n  const handleAccountNumberChange = (text: _string) => {\n    // Only allow digits and limit to 8 characters\n    const digits = text.replace(/\\D/g, '').slice(0, 8);\n    setBankDetails({ ...bankDetails, accountNumber: digits });\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <StatusBar backgroundColor={Colors.primary} barStyle=\"light-content\" />\n\n      {/* Header */}\n      <View style={styles.header}>\n        <TouchableOpacity style={styles.backButton} onPress={() => navigation.goBack()}>\n          <Icon name=\"arrow-back\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n\n        <View style={styles.headerCenter}>\n          <Text style={styles.headerTitle}>Bank Details</Text>\n          <Text style={styles.headerSubtitle}>\n            {hasExistingDetails ? 'Update payment details' : 'Set up payment receiving'}\n          </Text>\n        </View>\n\n        <TouchableOpacity style={styles.saveButton} onPress={handleSave} disabled={isLoading}>\n          <Text style={styles.saveButtonText}>{isLoading ? 'Saving...' : 'Save'}</Text>\n        </TouchableOpacity>\n      </View>\n\n      <KeyboardAvoidingView\n        style={styles.keyboardView}\n        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}>\n        <ScrollView\n          style={styles.scrollView}\n          showsVerticalScrollIndicator={false}\n          keyboardShouldPersistTaps=\"handled\">\n          {/* Security Notice */}\n          <View style={styles.securityNotice}>\n            <Icon name=\"security\" size={24} color={Colors.secondary} />\n            <View style={styles.securityContent}>\n              <Text style={styles.securityTitle}>Secure & Encrypted</Text>\n              <Text style={styles.securityText}>\n                Your banking information is encrypted and stored securely. This information is used\n                only for receiving payments from the platform.\n              </Text>\n            </View>\n          </View>\n\n          {/* Account Holder Name */}\n          <View style={styles.formGroup}>\n            <SimpleTextInput\n              label=\"Account Holder Name *\"\n              placeholder=\"Enter the name on the bank account\"\n              value={bankDetails.accountHolderName}\n              onValueChange={text => setBankDetails({ ...bankDetails, accountHolderName: text })}\n              autoCapitalize=\"words\"\n              placeholderTextColor={Colors.darkGray}\n              // containerStyle prop can be used for styles.formGroup if needed for spacing only\n            />\n          </View>\n\n          {/* Bank Name */}\n          <View style={styles.formGroup}>\n            <SimpleTextInput\n              label=\"Bank Name *\"\n              placeholder=\"e.g., Lloyds Bank, _Barclays, HSBC\"\n              value={bankDetails.bankName}\n              onValueChange={text => setBankDetails({ ...bankDetails, bankName: text })}\n              autoCapitalize=\"words\"\n              placeholderTextColor={Colors.darkGray}\n            />\n          </View>\n\n          {/* Account Number */}\n          <View style={styles.formGroup}>\n            <SimpleTextInput\n              label=\"Account Number *\"\n              placeholder=\"8-digit account number\"\n              value={bankDetails.accountNumber}\n              onValueChange={handleAccountNumberChange}\n              keyboardType=\"number-pad\"\n              maxLength={8}\n              placeholderTextColor={Colors.darkGray}\n            />\n          </View>\n\n          {/* Sort Code */}\n          <View style={styles.formGroup}>\n            <SimpleTextInput\n              label=\"Sort Code *\"\n              placeholder=\"XX-XX-XX\"\n              value={bankDetails.sortCode}\n              onValueChange={handleSortCodeChange}\n              keyboardType=\"number-pad\"\n              maxLength={8}\n              placeholderTextColor={Colors.darkGray}\n            />\n          </View>\n\n          {/* IBAN (__Optional) */}\n          <View style={styles.formGroup}>\n            <SimpleTextInput\n              label=\"IBAN (__Optional)\"\n              placeholder=\"GB29 LOYD 3099 8812 3456 78\"\n              value={bankDetails.iban}\n              onValueChange={text => setBankDetails({ ...bankDetails, iban: text.toUpperCase() })}\n              autoCapitalize=\"characters\"\n              placeholderTextColor={Colors.darkGray}\n            />\n          </View>\n\n          {/* SWIFT Code (__Optional) */}\n          <View style={styles.formGroup}>\n            <SimpleTextInput\n              label=\"SWIFT/BIC Code (__Optional)\"\n              placeholder=\"e.g., LOYDGB2L\"\n              value={bankDetails.swiftCode}\n              onValueChange={text =>\n                setBankDetails({ ...bankDetails, swiftCode: text.toUpperCase() })\n              }\n              autoCapitalize=\"characters\"\n              placeholderTextColor={Colors.darkGray}\n            />\n          </View>\n\n          {/* Account Type */}\n          <View style={styles.formGroup}>\n            <Text style={styles.formLabel}>Account Type</Text>\n            <View style={styles.accountTypeSelector}>\n              <TouchableOpacity\n                style={[\n                  styles.accountTypeOption,\n                  bankDetails.accountType === 'business' && styles.accountTypeOptionSelected,\n                ]}\n                onPress={() => setBankDetails({ ...bankDetails, accountType: 'business' })}>\n                <Icon\n                  name=\"business\"\n                  size={20}\n                  color={bankDetails.accountType === 'business' ? Colors.white : Colors.primary}\n                />\n                <Text\n                  style={[\n                    styles.accountTypeText,\n                    bankDetails.accountType === 'business' && styles.accountTypeTextSelected,\n                  ]}>\n                  Business Account\n                </Text>\n              </TouchableOpacity>\n\n              <TouchableOpacity\n                style={[\n                  styles.accountTypeOption,\n                  bankDetails.accountType === 'personal' && styles.accountTypeOptionSelected,\n                ]}\n                onPress={() => setBankDetails({ ...bankDetails, accountType: 'personal' })}>\n                <Icon\n                  name=\"person\"\n                  size={20}\n                  color={bankDetails.accountType === 'personal' ? Colors.white : Colors.primary}\n                />\n                <Text\n                  style={[\n                    styles.accountTypeText,\n                    bankDetails.accountType === 'personal' && styles.accountTypeTextSelected,\n                  ]}>\n                  Personal Account\n                </Text>\n              </TouchableOpacity>\n            </View>\n          </View>\n\n          {/* Payment Schedule Info */}\n          <View style={styles.infoSection}>\n            <Text style={styles.infoTitle}>Payment Schedule</Text>\n            <View style={styles.infoItem}>\n              <Icon name=\"schedule\" size={20} color={Colors.secondary} />\n              <Text style={styles.infoText}>Payments are processed weekly on Fridays</Text>\n            </View>\n            <View style={styles.infoItem}>\n              <Icon name=\"account-balance\" size={20} color={Colors.secondary} />\n              <Text style={styles.infoText}>Funds typically arrive within 1-2 business days</Text>\n            </View>\n            <View style={styles.infoItem}>\n              <Icon name=\"receipt\" size={20} color={Colors.secondary} />\n              <Text style={styles.infoText}>\n                Detailed payment reports available in your dashboard\n              </Text>\n            </View>\n          </View>\n\n          {/* Footer Padding */}\n          <View style={styles.footerPadding} />\n        </ScrollView>\n      </KeyboardAvoidingView>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.primary,\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    height: 70,\n  },\n  backButton: {\n    padding: 8,\n  },\n  headerCenter: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  headerTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.white,\n  },\n  headerSubtitle: {\n    fontSize: 12,\n    color: 'rgba(255, 255, 255, 0.8)',\n    marginTop: 2,\n  },\n  saveButton: {\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n  },\n  saveButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.white,\n  },\n  keyboardView: {\n    flex: 1,\n  },\n  scrollView: {\n    flex: 1,\n    padding: 16,\n  },\n  securityNotice: {\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 24,\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.05,\n    shadowRadius: 4,\n    elevation: 2,\n  },\n  securityContent: {\n    flex: 1,\n    marginLeft: 12,\n  },\n  securityTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  securityText: {\n    fontSize: 14,\n    color: Colors.darkGray,\n    lineHeight: 20,\n  },\n  formGroup: {\n    marginBottom: 20,\n  },\n  formLabel: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 8,\n  },\n  formInput: {\n    backgroundColor: Colors.white,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 8,\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    fontSize: 16,\n    color: Colors.text,\n  },\n  accountTypeSelector: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  accountTypeOption: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: Colors.white,\n    borderWidth: 2,\n    borderColor: Colors.primary,\n    borderRadius: 8,\n    paddingVertical: 12,\n    paddingHorizontal: 16,\n  },\n  accountTypeOptionSelected: {\n    backgroundColor: Colors.primary,\n  },\n  accountTypeText: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: Colors.primary,\n    marginLeft: 8,\n  },\n  accountTypeTextSelected: {\n    color: Colors.white,\n  },\n  infoSection: {\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    padding: 16,\n    marginTop: 24,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.05,\n    shadowRadius: 4,\n    elevation: 2,\n  },\n  infoTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 12,\n  },\n  infoItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  infoText: {\n    fontSize: 14,\n    color: Colors.darkGray,\n    marginLeft: 12,\n    flex: 1,\n  },\n  footerPadding: {\n    height: 40,\n  },\n});\n\nexport default BankDetailsScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/settings/business/BusinessInformationScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_businessInfo' is assigned a value but never used.","line":47,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":47,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_updateBusinessInfo' is assigned a value but never used.","line":47,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":47,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_updateConfig' is assigned a value but never used.","line":48,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":32},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\+.","line":85,"column":27,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":85,"endColumn":28,"suggestions":[{"messageId":"removeEscape","fix":{"range":[2702,2703],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[2702,2702],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\..","line":93,"column":45,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":93,"endColumn":46,"suggestions":[{"messageId":"removeEscape","fix":{"range":[2996,2997],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[2996,2996],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\..","line":93,"column":58,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":93,"endColumn":59,"suggestions":[{"messageId":"removeEscape","fix":{"range":[3009,3010],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[3009,3009],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\/.","line":93,"column":69,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":93,"endColumn":70,"suggestions":[{"messageId":"removeEscape","fix":{"range":[3020,3021],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[3020,3020],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\..","line":93,"column":74,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":93,"endColumn":75,"suggestions":[{"messageId":"removeEscape","fix":{"range":[3025,3026],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[3025,3025],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_renderFormField' is assigned a value but never used.","line":292,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":292,"endColumn":25},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: styles.fieldLabel","line":390,"column":3,"nodeType":"Property","endLine":395,"endColumn":4}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  ScrollView,\n  TouchableOpacity,\n  Alert,\n  KeyboardAvoidingView,\n  Platform,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { SettingsHeader, SettingsSection } from '../../../components/settings';\nimport useSettingsStore from '../../../store/useSettingsStore';\nimport { useRestaurantConfig } from '../../../hooks/useRestaurantConfig';\nimport SimpleTextInput from '../../../components/inputs/SimpleTextInput';\n\n// Clover POS Color Scheme\nconst Colors = {\n  primary: '#00A651',\n  secondary: '#0066CC',\n  success: '#00A651',\n  warning: '#FF6B35',\n  danger: '#E74C3C',\n  background: '#F5F5F5',\n  white: '#FFFFFF',\n  lightGray: '#E5E5E5',\n  mediumGray: '#999999',\n  darkGray: '#666666',\n  text: '#333333',\n  lightText: '#666666',\n  border: '#DDDDDD',\n};\n\ninterface FormField {\n  id: string;\n  label: string;\n  placeholder: string;\n  value: string;\n  keyboardType?: 'default' | 'email-address' | 'phone-pad' | 'url';\n  autoCapitalize?: 'none' | 'sentences' | 'words' | 'characters';\n  required?: boolean;\n  validation?: (value: _string) => string | null;\n}\n\nconst BusinessInformationScreen: React.FC = () => {\n  const { _businessInfo, _updateBusinessInfo, isLoading } = useSettingsStore();\n  const { config, _updateConfig, completeSetupStep } = useRestaurantConfig();\n  const [formData, setFormData] = useState(__businessInfo);\n  const [errors, setErrors] = useState<Record<string, string>>({});\n  const [hasChanges, setHasChanges] = useState(__false);\n\n  const scrollViewRef = useRef<ScrollView>(__null);\n\n  // Load restaurant config data when available\n  useEffect(() => {\n    if (config && config.restaurantName) {\n      // Sync restaurant config with form data if restaurant config exists\n      setFormData(prev => ({\n        ...prev,\n        companyName: config.restaurantName,\n        phone: config.phone || prev.phone,\n        email: config.email || prev.email,\n        address: config.address?.street || prev.address,\n        city: config.address?.city || prev.city,\n        postalCode: config.address?.zipCode || prev.postalCode,\n        country: config.address?.country || prev.country,\n      }));\n    }\n  }, [config]);\n\n  // Validation functions\n  const _validateEmail = (email: _string): string | null => {\n    if (!email) {\n      return 'Email is required';\n    }\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(__email) ? null : 'Please enter a valid email address';\n  };\n\n  const _validatePhone = (phone: _string): string | null => {\n    if (!phone) {\n      return 'Phone number is required';\n    }\n    const phoneRegex = /^[\\+]?[1-9][\\d]{0,15}$/;\n    return phoneRegex.test(phone.replace(/\\s/g, '')) ? null : 'Please enter a valid phone number';\n  };\n\n  const _validateUrl = (url: _string): string | null => {\n    if (!url) {\n      return null;\n    } // Website is optional\n    const urlRegex = /^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$/;\n    return urlRegex.test(__url) ? null : 'Please enter a valid website URL';\n  };\n\n  const _validateVatNumber = (vat: _string): string | null => {\n    if (!vat) {\n      return null;\n    } // VAT number is optional\n    // UK VAT number format: GB followed by 9 or 12 digits\n    const ukVatRegex = /^GB[0-9]{9}([0-9]{3})?$/;\n    return ukVatRegex.test(__vat) ? null : 'Please enter a valid UK VAT number (__GB123456789)';\n  };\n\n  const _validateCompanyNumber = (number: _string): string | null => {\n    if (!number) {\n      return null;\n    } // Company number is optional\n    // UK Company number: 8 digits\n    const ukCompanyRegex = /^[0-9]{8}$/;\n    return ukCompanyRegex.test(__number)\n      ? null\n      : 'Please enter a valid UK company number (8 digits)';\n  };\n\n  const formFields: FormField[] = [\n    {\n      id: 'companyName',\n      label: 'Company Name *',\n      placeholder: 'Enter your company name',\n      value: formData.companyName,\n      autoCapitalize: 'words',\n      required: _true,\n      validation: value => (value.trim() ? null : 'Company name is required'),\n    },\n    {\n      id: 'address',\n      label: 'Address *',\n      placeholder: 'Enter your business address',\n      value: formData.address,\n      autoCapitalize: 'words',\n      required: _true,\n      validation: value => (value.trim() ? null : 'Address is required'),\n    },\n    {\n      id: 'city',\n      label: 'City *',\n      placeholder: 'Enter your city',\n      value: formData.city,\n      autoCapitalize: 'words',\n      required: _true,\n      validation: value => (value.trim() ? null : 'City is required'),\n    },\n    {\n      id: 'postalCode',\n      label: 'Postal Code *',\n      placeholder: 'Enter your postal code',\n      value: formData.postalCode,\n      autoCapitalize: 'characters',\n      required: _true,\n      validation: value => (value.trim() ? null : 'Postal code is required'),\n    },\n    {\n      id: 'country',\n      label: 'Country *',\n      placeholder: 'Enter your country',\n      value: formData.country,\n      autoCapitalize: 'words',\n      required: _true,\n      validation: value => (value.trim() ? null : 'Country is required'),\n    },\n    {\n      id: 'phone',\n      label: 'Phone Number *',\n      placeholder: '+44 20 7123 4567',\n      value: formData.phone,\n      keyboardType: 'phone-pad',\n      required: _true,\n      validation: _validatePhone,\n    },\n    {\n      id: 'email',\n      label: 'Email Address *',\n      placeholder: 'info@yourcompany.co.uk',\n      value: formData.email,\n      keyboardType: 'email-address',\n      autoCapitalize: 'none',\n      required: _true,\n      validation: _validateEmail,\n    },\n    {\n      id: 'website',\n      label: 'Website',\n      placeholder: 'www.yourcompany.co.uk',\n      value: formData.website,\n      keyboardType: 'url',\n      autoCapitalize: 'none',\n      validation: _validateUrl,\n    },\n    {\n      id: 'vatNumber',\n      label: 'VAT Number',\n      placeholder: 'GB123456789',\n      value: formData.vatNumber,\n      autoCapitalize: 'characters',\n      validation: _validateVatNumber,\n    },\n    {\n      id: 'companyNumber',\n      label: 'Company Number',\n      placeholder: '12345678',\n      value: formData.companyNumber,\n      validation: _validateCompanyNumber,\n    },\n  ];\n\n  const handleFieldChange = (fieldId: _string, value: _string) => {\n    setFormData(prev => ({ ...prev, [fieldId]: value }));\n    setHasChanges(__true);\n\n    // Clear error when user starts typing\n    if (errors[fieldId]) {\n      setErrors(prev => ({ ...prev, [fieldId]: '' }));\n    }\n  };\n\n  const validateForm = (): boolean => {\n    const newErrors: Record<string, string> = {};\n\n    formFields.forEach(field => {\n      if (field.validation) {\n        const error = field.validation(formData[field.id as keyof typeof formData] as string);\n        if (__error) {\n          newErrors[field.id] = error;\n        }\n      }\n    });\n\n    setErrors(__newErrors);\n    return Object.keys(__newErrors).length === 0;\n  };\n\n  const handleSave = async () => {\n    if (!validateForm()) {\n      Alert.alert('Validation Error', 'Please correct the errors in the form before saving.', [\n        { text: 'OK' },\n      ]);\n      return;\n    }\n\n    try {\n      // Save to existing settings store\n      updateBusinessInfo(__formData);\n\n      // Also save to restaurant configuration system\n      await updateConfig({\n        restaurantName: formData.companyName,\n        displayName: formData.companyName, // Use company name as display name\n        phone: formData.phone,\n        email: formData.email,\n        address: {\n          street: formData.address,\n          city: formData.city,\n          state: '', // Not in current form\n          zipCode: formData.postalCode,\n          country: formData.country,\n        },\n      });\n\n      // Mark restaurant info setup step as completed\n      await completeSetupStep('restaurantInfo');\n\n      setHasChanges(__false);\n      Alert.alert(\n        'Success',\n        'Business information has been saved successfully. The restaurant name will now appear in your headers.',\n        [{ text: 'OK' }],\n      );\n    } catch (__error) {\n      Alert.alert('Error', 'Failed to save business information. Please try again.', [\n        { text: 'OK' },\n      ]);\n    }\n  };\n\n  const handleReset = () => {\n    Alert.alert('Reset Changes', 'Are you sure you want to discard all unsaved changes?', [\n      { text: 'Cancel', style: 'cancel' },\n      {\n        text: 'Reset',\n        style: 'destructive',\n        onPress: () => {\n          setFormData(__businessInfo);\n          setErrors({});\n          setHasChanges(__false);\n        },\n      },\n    ]);\n  };\n\n  const _renderFormField = (field: _FormField) => (\n    <View key={field.id} style={styles.fieldContainer}>\n      <SimpleTextInput\n        label={field.label}\n        value={field.value}\n        onValueChange={_value => handleFieldChange(field.id, _value)}\n        placeholder={field.placeholder}\n        keyboardType={field.keyboardType || 'default'}\n        autoCapitalize={field.autoCapitalize || 'sentences'}\n        autoCorrect={false}\n        style={[styles.textInput, errors[field.id] && styles.textInputError]}\n        clearButtonMode=\"while-editing\"\n      />\n      {errors[field.id] && (\n        <View style={styles.errorContainer}>\n          <Icon name=\"error-outline\" size={16} color={Colors.danger} />\n          <Text style={styles.errorText}>{errors[field.id]}</Text>\n        </View>\n      )}\n    </View>\n  );\n\n  return (\n    <KeyboardAvoidingView\n      style={styles.container}\n      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}>\n      <SettingsHeader\n        title=\"Business Information\"\n        subtitle=\"Company details and contact information\"\n        rightAction={{\n          icon: 'save',\n          onPress: _handleSave,\n          color: hasChanges ? Colors.white : 'rgba(255, 255, 255, 0.5)',\n        }}\n      />\n\n      <ScrollView\n        ref={scrollViewRef}\n        style={styles.content}\n        showsVerticalScrollIndicator={false}\n        keyboardShouldPersistTaps=\"handled\">\n        <SettingsSection title=\"Company Details\" subtitle=\"Basic information about your business\">\n          <View style={styles.formContainer}>{formFields.slice(0, 5).map(__renderFormField)}</View>\n        </SettingsSection>\n\n        <SettingsSection title=\"Contact Information\" subtitle=\"How customers can reach you\">\n          <View style={styles.formContainer}>{formFields.slice(5, 8).map(__renderFormField)}</View>\n        </SettingsSection>\n\n        <SettingsSection title=\"Legal Information\" subtitle=\"VAT and company registration details\">\n          <View style={styles.formContainer}>{formFields.slice(8).map(__renderFormField)}</View>\n        </SettingsSection>\n\n        {/* Action Buttons */}\n        <View style={styles.actionButtons}>\n          <TouchableOpacity\n            style={[styles.button, styles.saveButton]}\n            onPress={handleSave}\n            disabled={!hasChanges || isLoading}>\n            <Icon name=\"save\" size={20} color={Colors.white} />\n            <Text style={styles.saveButtonText}>Save Changes</Text>\n          </TouchableOpacity>\n\n          {hasChanges && (\n            <TouchableOpacity style={[styles.button, styles.resetButton]} onPress={handleReset}>\n              <Icon name=\"refresh\" size={20} color={Colors.danger} />\n              <Text style={styles.resetButtonText}>Reset</Text>\n            </TouchableOpacity>\n          )}\n        </View>\n\n        {/* Help Text */}\n        <View style={styles.helpContainer}>\n          <Icon name=\"info-outline\" size={16} color={Colors.mediumGray} />\n          <Text style={styles.helpText}>\n            This information will appear on receipts and customer communications. Fields marked with\n            * are required.\n          </Text>\n        </View>\n      </ScrollView>\n    </KeyboardAvoidingView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  content: {\n    flex: 1,\n  },\n  formContainer: {\n    padding: 16,\n  },\n  fieldContainer: {\n    marginBottom: 20,\n  },\n  fieldLabel: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.text,\n    marginBottom: 8,\n  },\n  textInput: {\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 8,\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    fontSize: 16,\n    color: Colors.text,\n    backgroundColor: Colors.white,\n  },\n  textInputError: {\n    borderColor: Colors.danger,\n  },\n  errorContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginTop: 4,\n  },\n  errorText: {\n    fontSize: 14,\n    color: Colors.danger,\n    marginLeft: 4,\n  },\n  actionButtons: {\n    padding: 16,\n    gap: 12,\n  },\n  button: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 16,\n    borderRadius: 12,\n    gap: 8,\n  },\n  saveButton: {\n    backgroundColor: Colors.primary,\n  },\n  saveButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.white,\n  },\n  resetButton: {\n    backgroundColor: Colors.white,\n    borderWidth: 1,\n    borderColor: Colors.danger,\n  },\n  resetButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.danger,\n  },\n  helpContainer: {\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    padding: 16,\n    backgroundColor: 'rgba(0, 166, 81, 0.05)',\n    marginHorizontal: 16,\n    marginBottom: 32,\n    borderRadius: 8,\n  },\n  helpText: {\n    fontSize: 14,\n    color: Colors.mediumGray,\n    marginLeft: 8,\n    flex: 1,\n    lineHeight: 20,\n  },\n});\n\nexport default BusinessInformationScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/settings/business/OperatingHoursScreen.tsx","messages":[{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":45,"column":19,"nodeType":"CallExpression","messageId":"missingRadix","endLine":45,"endColumn":54,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[1090,1090],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":48,"column":19,"nodeType":"CallExpression","messageId":"missingRadix","endLine":48,"endColumn":54,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[1210,1210],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_timeString' is assigned a value but never used.","line":55,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":55,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":67,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":67,"endColumn":18},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":75,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":75,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ScrollView' is not defined.","line":76,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":76,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":85,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":85,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":97,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":97,"endColumn":18},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":100,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":100,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ScrollView' is not defined.","line":101,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":101,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":110,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":110,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":125,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":125,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":130,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":130,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_operatingHours' is assigned a value but never used.","line":140,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":140,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_updateOperatingHours' is assigned a value but never used.","line":140,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":140,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_hours' is assigned a value but never used.","line":199,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":199,"endColumn":18},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":200,"column":18,"nodeType":"CallExpression","messageId":"missingRadix","endLine":200,"endColumn":35,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[6470,6470],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_renderDayCard' is assigned a value but never used.","line":256,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":256,"endColumn":23},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":265,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":265,"endColumn":18},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":267,"column":28,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":267,"endColumn":32},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":269,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":269,"endColumn":18},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":288,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":288,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":295,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":295,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":300,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":300,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ScrollView' is not defined.","line":324,"column":8,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":324,"endColumn":18},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":332,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":332,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":333,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":333,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":338,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":338,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":339,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":339,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":436,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":436,"endColumn":18},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":442,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":442,"endColumn":20}],"suppressedMessages":[],"errorCount":28,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { StyleSheet, View, TouchableOpacity, Modal } from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport {\n  SettingsHeader,\n  SettingsSection,\n  SettingsCard,\n  ToggleSwitch,\n} from '../../../components/settings';\nimport useSettingsStore from '../../../store/useSettingsStore';\n\n// Clover POS Color Scheme\nconst Colors = {\n  primary: '#00A651',\n  secondary: '#0066CC',\n  success: '#00A651',\n  warning: '#FF6B35',\n  danger: '#E74C3C',\n  background: '#F5F5F5',\n  white: '#FFFFFF',\n  lightGray: '#E5E5E5',\n  mediumGray: '#999999',\n  darkGray: '#666666',\n  text: '#333333',\n  lightText: '#666666',\n  border: '#DDDDDD',\n};\n\ninterface TimePickerModalProps {\n  visible: boolean;\n  onClose: () => void;\n  onTimeSelect: (time: _string) => void;\n  currentTime: string;\n  title: string;\n}\n\nconst TimePickerModal: React.FC<TimePickerModalProps> = ({\n  visible,\n  onClose,\n  onTimeSelect,\n  currentTime,\n  title,\n}) => {\n  const [selectedHour, setSelectedHour] = useState(\n    currentTime ? parseInt(currentTime.split(':')[0]) : 9,\n  );\n  const [selectedMinute, setSelectedMinute] = useState(\n    currentTime ? parseInt(currentTime.split(':')[1]) : 0,\n  );\n\n  const hours = Array.from({ length: 24 }, (___, _i) => i);\n  const minutes = [0, 15, 30, 45];\n\n  const handleConfirm = () => {\n    const _timeString = `${selectedHour.toString().padStart(2, '0')}:${selectedMinute\n      .toString()\n      .padStart(2, '0')}`;\n    onTimeSelect(__timeString);\n    onClose();\n  };\n\n  return (\n    <Modal visible={visible} transparent animationType=\"slide\">\n      <View style={styles.modalOverlay}>\n        <View style={styles.modalContent}>\n          <View style={styles.modalHeader}>\n            <Text style={styles.modalTitle}>{title}</Text>\n            <TouchableOpacity onPress={onClose}>\n              <Icon name=\"close\" size={24} color={Colors.darkGray} />\n            </TouchableOpacity>\n          </View>\n\n          <View style={styles.timePickerContainer}>\n            <View style={styles.timePicker}>\n              <Text style={styles.timePickerLabel}>Hour</Text>\n              <ScrollView style={styles.timePickerScroll} showsVerticalScrollIndicator={false}>\n                {hours.map(hour => (\n                  <TouchableOpacity\n                    key={hour}\n                    style={[\n                      styles.timePickerItem,\n                      selectedHour === hour && styles.timePickerItemSelected,\n                    ]}\n                    onPress={() => setSelectedHour(__hour)}>\n                    <Text\n                      style={[\n                        styles.timePickerItemText,\n                        selectedHour === hour && styles.timePickerItemTextSelected,\n                      ]}>\n                      {hour.toString().padStart(2, '0')}\n                    </Text>\n                  </TouchableOpacity>\n                ))}\n              </ScrollView>\n            </View>\n\n            <Text style={styles.timeSeparator}>:</Text>\n\n            <View style={styles.timePicker}>\n              <Text style={styles.timePickerLabel}>Minute</Text>\n              <ScrollView style={styles.timePickerScroll} showsVerticalScrollIndicator={false}>\n                {minutes.map(minute => (\n                  <TouchableOpacity\n                    key={minute}\n                    style={[\n                      styles.timePickerItem,\n                      selectedMinute === minute && styles.timePickerItemSelected,\n                    ]}\n                    onPress={() => setSelectedMinute(__minute)}>\n                    <Text\n                      style={[\n                        styles.timePickerItemText,\n                        selectedMinute === minute && styles.timePickerItemTextSelected,\n                      ]}>\n                      {minute.toString().padStart(2, '0')}\n                    </Text>\n                  </TouchableOpacity>\n                ))}\n              </ScrollView>\n            </View>\n          </View>\n\n          <View style={styles.modalActions}>\n            <TouchableOpacity style={styles.modalButton} onPress={onClose}>\n              <Text style={styles.modalButtonTextSecondary}>Cancel</Text>\n            </TouchableOpacity>\n            <TouchableOpacity\n              style={[styles.modalButton, styles.modalButtonPrimary]}\n              onPress={handleConfirm}>\n              <Text style={styles.modalButtonTextPrimary}>Confirm</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n      </View>\n    </Modal>\n  );\n};\n\nconst OperatingHoursScreen: React.FC = () => {\n  const { _operatingHours, _updateOperatingHours, isLoading } = useSettingsStore();\n  const [formData, setFormData] = useState(__operatingHours);\n  const [hasChanges, setHasChanges] = useState(__false);\n  const [timePickerVisible, setTimePickerVisible] = useState(__false);\n  const [timePickerConfig, setTimePickerConfig] = useState<{\n    day: string;\n    type: 'open' | 'close';\n    title: string;\n    currentTime: string;\n  } | null>(__null);\n\n  const daysOfWeek = [\n    { key: 'monday', label: 'Monday' },\n    { key: 'tuesday', label: 'Tuesday' },\n    { key: 'wednesday', label: 'Wednesday' },\n    { key: 'thursday', label: 'Thursday' },\n    { key: 'friday', label: 'Friday' },\n    { key: 'saturday', label: 'Saturday' },\n    { key: 'sunday', label: 'Sunday' },\n  ];\n\n  const handleDayToggle = (day: _string, closed: _boolean) => {\n    setFormData(prev => ({\n      ...prev,\n      [day]: {\n        ...prev[day as keyof typeof prev],\n        closed,\n      },\n    }));\n    setHasChanges(__true);\n  };\n\n  const handleTimePress = (day: _string, type: 'open' | 'close') => {\n    const dayData = formData[day as keyof typeof formData] as unknown;\n    setTimePickerConfig({\n      day,\n      type,\n      title: `${type === 'open' ? 'Opening' : 'Closing'} Time - ${\n        daysOfWeek.find(d => d.key === day)?.label\n      }`,\n      currentTime: dayData[type],\n    });\n    setTimePickerVisible(__true);\n  };\n\n  const handleTimeSelect = (_time: _string) => {\n    if (__timePickerConfig) {\n      setFormData(prev => ({\n        ...prev,\n        [timePickerConfig.day]: {\n          ...prev[timePickerConfig.day as keyof typeof prev],\n          [timePickerConfig.type]: _time,\n        },\n      }));\n      setHasChanges(__true);\n    }\n  };\n\n  const formatTime = (time: _string): string => {\n    const [_hours, minutes] = time.split(':');\n    const hour = parseInt(__hours);\n    const ampm = hour >= 12 ? 'PM' : 'AM';\n    const displayHour = hour === 0 ? 12 : hour > 12 ? hour - 12 : hour;\n    return `${displayHour}:${minutes} ${ampm}`;\n  };\n\n  const copyToAllDays = (sourceDay: _string) => {\n    const sourceDayData = formData[sourceDay as keyof typeof formData] as unknown;\n    Alert.alert(\n      'Copy Hours',\n      `Copy ${daysOfWeek.find(d => d.key === sourceDay)?.label} hours to all other days?`,\n      [\n        { text: 'Cancel', style: 'cancel' },\n        {\n          text: 'Copy',\n          onPress: () => {\n            const updatedData = { ...formData };\n            daysOfWeek.forEach(day => {\n              if (day.key !== sourceDay) {\n                updatedData[day.key as keyof typeof updatedData] = {\n                  ...sourceDayData,\n                };\n              }\n            });\n            setFormData(__updatedData);\n            setHasChanges(__true);\n          },\n        },\n      ],\n    );\n  };\n\n  const handleSave = async () => {\n    try {\n      updateOperatingHours(__formData);\n      setHasChanges(__false);\n      Alert.alert('Success', 'Operating hours have been saved successfully.', [{ text: 'OK' }]);\n    } catch (__error) {\n      Alert.alert('Error', 'Failed to save operating hours. Please try again.', [{ text: 'OK' }]);\n    }\n  };\n\n  const handleReset = () => {\n    Alert.alert('Reset Changes', 'Are you sure you want to discard all unsaved changes?', [\n      { text: 'Cancel', style: 'cancel' },\n      {\n        text: 'Reset',\n        style: 'destructive',\n        onPress: () => {\n          setFormData(__operatingHours);\n          setHasChanges(__false);\n        },\n      },\n    ]);\n  };\n\n  const _renderDayCard = (day: { key: string; label: string }) => {\n    const dayData = formData[day.key as keyof typeof formData] as unknown;\n    const isToday =\n      new Date().toLocaleDateString('en', { weekday: 'long' }).toLowerCase() === day.key;\n\n    return (\n      <View key={day.key} style={[styles.dayCard, isToday && styles.todayCard]}>\n        <View style={styles.dayHeader}>\n          <View style={styles.dayInfo}>\n            <Text style={[styles.dayLabel, isToday && styles.todayLabel]}>\n              {day.label}\n              {isToday && <Text style={styles.todayIndicator}> (__Today)</Text>}\n            </Text>\n            <Text style={styles.dayStatus}>\n              {dayData.closed\n                ? 'Closed'\n                : `${formatTime(dayData.open)} - ${formatTime(dayData.close)}`}\n            </Text>\n          </View>\n\n          <ToggleSwitch\n            value={!dayData.closed}\n            onValueChange={open => handleDayToggle(day.key, !open)}\n          />\n        </View>\n\n        {!dayData.closed && (\n          <View style={styles.timeControls}>\n            <TouchableOpacity\n              style={styles.timeButton}\n              onPress={() => handleTimePress(day.key, 'open')}>\n              <Icon name=\"schedule\" size={20} color={Colors.primary} />\n              <Text style={styles.timeButtonText}>Open: {formatTime(dayData.open)}</Text>\n            </TouchableOpacity>\n\n            <TouchableOpacity\n              style={styles.timeButton}\n              onPress={() => handleTimePress(day.key, 'close')}>\n              <Icon name=\"schedule\" size={20} color={Colors.danger} />\n              <Text style={styles.timeButtonText}>Close: {formatTime(dayData.close)}</Text>\n            </TouchableOpacity>\n\n            <TouchableOpacity style={styles.copyButton} onPress={() => copyToAllDays(day.key)}>\n              <Icon name=\"content-copy\" size={16} color={Colors.secondary} />\n              <Text style={styles.copyButtonText}>Copy to all</Text>\n            </TouchableOpacity>\n          </View>\n        )}\n      </View>\n    );\n  };\n\n  const getOpenDaysCount = () => {\n    return daysOfWeek.filter(day => !formData[day.key as keyof typeof formData].closed).length;\n  };\n\n  return (\n    <View style={styles.container}>\n      <SettingsHeader\n        title=\"Operating Hours\"\n        subtitle=\"Set your business hours\"\n        rightAction={{\n          icon: 'save',\n          onPress: _handleSave,\n          color: hasChanges ? Colors.white : 'rgba(255, 255, 255, 0.5)',\n        }}\n      />\n\n      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n        {/* Summary */}\n        <SettingsSection\n          title=\"Hours Summary\"\n          subtitle={`Open ${getOpenDaysCount()} days per week`}>\n          <View style={styles.summaryContainer}>\n            <View style={styles.summaryCard}>\n              <Icon name=\"access-time\" size={32} color={Colors.primary} />\n              <Text style={styles.summaryTitle}>Open Days</Text>\n              <Text style={styles.summaryValue}>{getOpenDaysCount()}/7</Text>\n            </View>\n\n            <View style={styles.summaryCard}>\n              <Icon name=\"today\" size={32} color={Colors.secondary} />\n              <Text style={styles.summaryTitle}>Today Status</Text>\n              <Text\n                style={[\n                  styles.summaryValue,\n                  styles.statusText,\n                  {\n                    color: formData[\n                      new Date()\n                        .toLocaleDateString('en', { weekday: 'long' })\n                        .toLowerCase() as keyof typeof formData\n                    ]?.closed\n                      ? Colors.danger\n                      : Colors.success,\n                  },\n                ]}>\n                {formData[\n                  new Date()\n                    .toLocaleDateString('en', { weekday: 'long' })\n                    .toLowerCase() as keyof typeof formData\n                ]?.closed\n                  ? 'Closed'\n                  : 'Open'}\n              </Text>\n            </View>\n          </View>\n        </SettingsSection>\n\n        {/* Weekly Schedule */}\n        <SettingsSection\n          title=\"Weekly Schedule\"\n          subtitle=\"Set opening and closing times for each day\">\n          <View style={styles.scheduleContainer}>{daysOfWeek.map(__renderDayCard)}</View>\n        </SettingsSection>\n\n        {/* Quick Actions */}\n        <SettingsSection title=\"Quick Actions\" subtitle=\"Common schedule adjustments\">\n          <SettingsCard\n            title=\"Open All Days\"\n            description=\"Set all days to open with standard hours\"\n            icon=\"schedule\"\n            iconColor={Colors.success}\n            onPress={() => {\n              const standardHours = { open: '09:00', close: '22:00', closed: false };\n              const updatedData = { ...formData };\n              daysOfWeek.forEach(day => {\n                updatedData[day.key as keyof typeof updatedData] = standardHours;\n              });\n              setFormData(__updatedData);\n              setHasChanges(__true);\n            }}\n          />\n\n          <SettingsCard\n            title=\"Standard Business Hours\"\n            description=\"Mon-Fri 9AM-6PM, Sat-Sun 10AM-4PM\"\n            icon=\"business-center\"\n            iconColor={Colors.secondary}\n            onPress={() => {\n              const _weekdayHours = { open: '09:00', close: '18:00', closed: false };\n              const _weekendHours = { open: '10:00', close: '16:00', closed: false };\n              setFormData({\n                ...formData,\n                monday: _weekdayHours,\n                tuesday: _weekdayHours,\n                wednesday: _weekdayHours,\n                thursday: _weekdayHours,\n                friday: _weekdayHours,\n                saturday: _weekendHours,\n                sunday: _weekendHours,\n              });\n              setHasChanges(__true);\n            }}\n          />\n\n          <SettingsCard\n            title=\"Restaurant Hours\"\n            description=\"Open 7 days, 9AM-11PM\"\n            icon=\"restaurant\"\n            iconColor={Colors.warning}\n            onPress={() => {\n              const restaurantHours = { open: '09:00', close: '23:00', closed: false };\n              const updatedData = { ...formData };\n              daysOfWeek.forEach(day => {\n                updatedData[day.key as keyof typeof updatedData] = restaurantHours;\n              });\n              setFormData(__updatedData);\n              setHasChanges(__true);\n            }}\n          />\n        </SettingsSection>\n\n        {/* Action Buttons */}\n        <View style={styles.actionButtons}>\n          <TouchableOpacity\n            style={[styles.button, styles.saveButton]}\n            onPress={handleSave}\n            disabled={!hasChanges || isLoading}>\n            <Icon name=\"save\" size={20} color={Colors.white} />\n            <Text style={styles.saveButtonText}>Save Changes</Text>\n          </TouchableOpacity>\n\n          {hasChanges && (\n            <TouchableOpacity style={[styles.button, styles.resetButton]} onPress={handleReset}>\n              <Icon name=\"refresh\" size={20} color={Colors.danger} />\n              <Text style={styles.resetButtonText}>Reset</Text>\n            </TouchableOpacity>\n          )}\n        </View>\n      </ScrollView>\n\n      <TimePickerModal\n        visible={timePickerVisible}\n        onClose={() => setTimePickerVisible(__false)}\n        onTimeSelect={handleTimeSelect}\n        currentTime={timePickerConfig?.currentTime || '09:00'}\n        title={timePickerConfig?.title || 'Select Time'}\n      />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  content: {\n    flex: 1,\n  },\n  summaryContainer: {\n    flexDirection: 'row',\n    padding: 16,\n    gap: 16,\n  },\n  summaryCard: {\n    flex: 1,\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    padding: 16,\n    alignItems: 'center',\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.05,\n    shadowRadius: 2,\n    elevation: 1,\n  },\n  summaryTitle: {\n    fontSize: 14,\n    color: Colors.lightText,\n    marginTop: 8,\n    textAlign: 'center',\n  },\n  summaryValue: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.text,\n    marginTop: 4,\n  },\n  statusText: {\n    fontSize: 16,\n  },\n  scheduleContainer: {\n    padding: 16,\n    gap: 16,\n  },\n  dayCard: {\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    padding: 16,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.05,\n    shadowRadius: 2,\n    elevation: 1,\n  },\n  todayCard: {\n    borderWidth: 2,\n    borderColor: Colors.primary,\n  },\n  dayHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n  dayInfo: {\n    flex: 1,\n  },\n  dayLabel: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  todayLabel: {\n    color: Colors.primary,\n  },\n  todayIndicator: {\n    fontSize: 14,\n    fontWeight: '400',\n  },\n  dayStatus: {\n    fontSize: 14,\n    color: Colors.lightText,\n    marginTop: 2,\n  },\n  timeControls: {\n    marginTop: 16,\n    gap: 8,\n  },\n  timeButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: Colors.background,\n    borderRadius: 8,\n    padding: 12,\n    gap: 8,\n  },\n  timeButtonText: {\n    fontSize: 16,\n    color: Colors.text,\n    fontWeight: '500',\n  },\n  copyButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: Colors.background,\n    borderRadius: 8,\n    padding: 8,\n    gap: 4,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderStyle: 'dashed',\n  },\n  copyButtonText: {\n    fontSize: 14,\n    color: Colors.secondary,\n    fontWeight: '500',\n  },\n  actionButtons: {\n    padding: 16,\n    gap: 12,\n  },\n  button: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 16,\n    borderRadius: 12,\n    gap: 8,\n  },\n  saveButton: {\n    backgroundColor: Colors.primary,\n  },\n  saveButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.white,\n  },\n  resetButton: {\n    backgroundColor: Colors.white,\n    borderWidth: 1,\n    borderColor: Colors.danger,\n  },\n  resetButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.danger,\n  },\n  // Modal styles\n  modalOverlay: {\n    flex: 1,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  modalContent: {\n    backgroundColor: Colors.white,\n    borderRadius: 16,\n    padding: 24,\n    width: '80%',\n    maxWidth: 400,\n  },\n  modalHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    marginBottom: 24,\n  },\n  modalTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  timePickerContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginBottom: 24,\n  },\n  timePicker: {\n    alignItems: 'center',\n  },\n  timePickerLabel: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.text,\n    marginBottom: 8,\n  },\n  timePickerScroll: {\n    height: 150,\n    width: 80,\n  },\n  timePickerItem: {\n    paddingVertical: 12,\n    paddingHorizontal: 16,\n    borderRadius: 8,\n    marginVertical: 2,\n  },\n  timePickerItemSelected: {\n    backgroundColor: Colors.primary,\n  },\n  timePickerItemText: {\n    fontSize: 18,\n    fontWeight: '500',\n    color: Colors.text,\n    textAlign: 'center',\n  },\n  timePickerItemTextSelected: {\n    color: Colors.white,\n  },\n  timeSeparator: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: Colors.text,\n    marginHorizontal: 16,\n  },\n  modalActions: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  modalButton: {\n    flex: 1,\n    paddingVertical: 12,\n    borderRadius: 8,\n    alignItems: 'center',\n  },\n  modalButtonPrimary: {\n    backgroundColor: Colors.primary,\n  },\n  modalButtonTextPrimary: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.white,\n  },\n  modalButtonTextSecondary: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.darkGray,\n  },\n});\n\nexport default OperatingHoursScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/settings/business/PaymentMethodsInfoScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_renderPaymentMethod' is assigned a value but never used.","line":67,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":67,"endColumn":29},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":76,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":76,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":77,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":77,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":85,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":85,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ScrollView' is not defined.","line":101,"column":8,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":101,"endColumn":18},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":109,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":109,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":110,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":110,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":135,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":135,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":136,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":136,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":145,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":145,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":146,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":146,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":155,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":155,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":156,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":156,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":171,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":171,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":176,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":176,"endColumn":20}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { StyleSheet, View, TouchableOpacity } from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { SettingsHeader, SettingsSection } from '../../../components/settings';\n\n// Clover POS Color Scheme\nconst Colors = {\n  primary: '#00A651',\n  secondary: '#0066CC',\n  success: '#00A651',\n  warning: '#FF6B35',\n  danger: '#E74C3C',\n  background: '#F5F5F5',\n  white: '#FFFFFF',\n  lightGray: '#E5E5E5',\n  mediumGray: '#999999',\n  darkGray: '#666666',\n  text: '#333333',\n  lightText: '#666666',\n  border: '#DDDDDD',\n};\n\nconst PaymentMethodsInfoScreen: React.FC = () => {\n  const platformControlledMethods = [\n    {\n      id: 'cash',\n      name: 'Cash',\n      description: 'Accept cash payments',\n      icon: 'payments',\n      iconColor: Colors.success,\n      enabled: _true,\n    },\n    {\n      id: 'card',\n      name: 'Card Payments',\n      description: 'Credit and debit cards',\n      icon: 'credit-card',\n      iconColor: Colors.secondary,\n      enabled: _true,\n    },\n    {\n      id: 'qrCode',\n      name: 'QR Code Payment',\n      description: 'Mobile payments via QR code (1.2% fees)',\n      icon: 'qr-code-scanner',\n      iconColor: Colors.primary,\n      enabled: _true,\n    },\n    {\n      id: 'applePay',\n      name: 'Apple Pay',\n      description: 'Contactless Apple Pay',\n      icon: 'phone-android',\n      iconColor: Colors.text,\n      enabled: _false,\n    },\n    {\n      id: 'googlePay',\n      name: 'Google Pay',\n      description: 'Contactless Google Pay',\n      icon: 'phone-android',\n      iconColor: Colors.warning,\n      enabled: _false,\n    },\n  ];\n\n  const _renderPaymentMethod = (method: _unknown) => (\n    <View key={method.id} style={styles.methodCard}>\n      <View style={styles.methodHeader}>\n        <Icon\n          name={method.icon}\n          size={32}\n          color={method.enabled ? method.iconColor : Colors.lightGray}\n        />\n        <View style={styles.methodInfo}>\n          <Text style={styles.methodName}>{method.name}</Text>\n          <Text style={styles.methodDescription}>{method.description}</Text>\n        </View>\n        <View style={styles.statusContainer}>\n          <Icon\n            name={method.enabled ? 'check-circle' : 'radio-button-unchecked'}\n            size={24}\n            color={method.enabled ? Colors.success : Colors.lightGray}\n          />\n          <Text\n            style={[\n              styles.statusText,\n              { color: method.enabled ? Colors.success : Colors.lightGray },\n            ]}>\n            {method.enabled ? 'Enabled' : 'Disabled'}\n          </Text>\n        </View>\n      </View>\n    </View>\n  );\n\n  return (\n    <View style={styles.container}>\n      <SettingsHeader title=\"Payment Methods\" subtitle=\"Platform-managed payment configuration\" />\n\n      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n        {/* Platform Control Notice */}\n        <SettingsSection\n          title=\"Platform Management\"\n          subtitle=\"Payment methods are configured by the platform owner\">\n          <View style={styles.noticeContainer}>\n            <View style={styles.noticeCard}>\n              <Icon name=\"lock\" size={48} color={Colors.primary} />\n              <Text style={styles.noticeTitle}>Platform Controlled</Text>\n              <Text style={styles.noticeText}>\n                Payment methods and processing fees are managed centrally by the platform owner.\n                This ensures consistent rates and compliance across all restaurants.\n              </Text>\n            </View>\n          </View>\n        </SettingsSection>\n\n        {/* Current Payment Methods */}\n        <SettingsSection\n          title=\"Available Payment Methods\"\n          subtitle=\"Payment options enabled for your restaurant\">\n          <View style={styles.methodsContainer}>\n            {platformControlledMethods.map(__renderPaymentMethod)}\n          </View>\n        </SettingsSection>\n\n        {/* Processing Information */}\n        <SettingsSection\n          title=\"Processing Information\"\n          subtitle=\"Important details about payment processing\">\n          <View style={styles.infoContainer}>\n            <View style={styles.infoCard}>\n              <Icon name=\"trending-down\" size={24} color={Colors.success} />\n              <View style={styles.infoContent}>\n                <Text style={styles.infoTitle}>Low Processing Fees</Text>\n                <Text style={styles.infoText}>\n                  QR code payments: 1.2% • Card payments: Standard rates\n                </Text>\n              </View>\n            </View>\n\n            <View style={styles.infoCard}>\n              <Icon name=\"security\" size={24} color={Colors.secondary} />\n              <View style={styles.infoContent}>\n                <Text style={styles.infoTitle}>Secure & Compliant</Text>\n                <Text style={styles.infoText}>\n                  All payments are PCI DSS compliant with end-to-end encryption\n                </Text>\n              </View>\n            </View>\n\n            <View style={styles.infoCard}>\n              <Icon name=\"schedule\" size={24} color={Colors.warning} />\n              <View style={styles.infoContent}>\n                <Text style={styles.infoTitle}>Settlement Times</Text>\n                <Text style={styles.infoText}>\n                  Funds are typically available within 1-2 business days\n                </Text>\n              </View>\n            </View>\n          </View>\n        </SettingsSection>\n\n        {/* Contact Support */}\n        <SettingsSection\n          title=\"Need Changes?\"\n          subtitle=\"Contact platform support for payment method modifications\">\n          <View style={styles.supportContainer}>\n            <TouchableOpacity style={styles.supportButton}>\n              <Icon name=\"support\" size={24} color={Colors.white} />\n              <Text style={styles.supportButtonText}>Contact Platform Support</Text>\n            </TouchableOpacity>\n\n            <TouchableOpacity style={[styles.supportButton, styles.secondaryButton]}>\n              <Icon name=\"help-outline\" size={24} color={Colors.primary} />\n              <Text style={[styles.supportButtonText, styles.secondaryButtonText]}>\n                Payment Processing FAQ\n              </Text>\n            </TouchableOpacity>\n          </View>\n        </SettingsSection>\n      </ScrollView>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  content: {\n    flex: 1,\n  },\n  noticeContainer: {\n    padding: 16,\n  },\n  noticeCard: {\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    padding: 24,\n    alignItems: 'center',\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.05,\n    shadowRadius: 4,\n    elevation: 2,\n  },\n  noticeTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.text,\n    marginTop: 16,\n    marginBottom: 8,\n  },\n  noticeText: {\n    fontSize: 16,\n    color: Colors.lightText,\n    textAlign: 'center',\n    lineHeight: 24,\n  },\n  methodsContainer: {\n    padding: 16,\n    gap: 12,\n  },\n  methodCard: {\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    padding: 16,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.05,\n    shadowRadius: 2,\n    elevation: 1,\n  },\n  methodHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  methodInfo: {\n    flex: 1,\n    marginLeft: 16,\n  },\n  methodName: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  methodDescription: {\n    fontSize: 14,\n    color: Colors.lightText,\n  },\n  statusContainer: {\n    alignItems: 'center',\n  },\n  statusText: {\n    fontSize: 12,\n    fontWeight: '500',\n    marginTop: 4,\n  },\n  infoContainer: {\n    padding: 16,\n    gap: 12,\n  },\n  infoCard: {\n    flexDirection: 'row',\n    backgroundColor: Colors.white,\n    borderRadius: 8,\n    padding: 16,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.05,\n    shadowRadius: 2,\n    elevation: 1,\n  },\n  infoContent: {\n    flex: 1,\n    marginLeft: 12,\n  },\n  infoTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  infoText: {\n    fontSize: 14,\n    color: Colors.lightText,\n    lineHeight: 20,\n  },\n  supportContainer: {\n    padding: 16,\n    gap: 12,\n  },\n  supportButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: Colors.primary,\n    borderRadius: 12,\n    paddingVertical: 16,\n    paddingHorizontal: 24,\n    gap: 8,\n  },\n  secondaryButton: {\n    backgroundColor: Colors.white,\n    borderWidth: 1,\n    borderColor: Colors.primary,\n  },\n  supportButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.white,\n  },\n  secondaryButtonText: {\n    color: Colors.primary,\n  },\n});\n\nexport default PaymentMethodsInfoScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/settings/business/PaymentMethodsScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_updatePaymentMethods' is assigned a value but never used.","line":40,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":48},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_renderPaymentMethodCard' is assigned a value but never used.","line":161,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":161,"endColumn":33},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ScrollView' is not defined.","line":232,"column":8,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":232,"endColumn":18},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":240,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":240,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":241,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":241,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":246,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":246,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":247,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":247,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":279,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":279,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":280,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":280,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":290,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":290,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":291,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":291,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":300,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":300,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":301,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":301,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":317,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":317,"endColumn":18},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":323,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":323,"endColumn":20}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { StyleSheet, View, TouchableOpacity, Alert } from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport {\n  SettingsHeader,\n  SettingsSection,\n  SettingsCard,\n  ToggleSwitch,\n} from '../../../components/settings';\nimport useSettingsStore from '../../../store/useSettingsStore';\n\n// Clover POS Color Scheme\nconst Colors = {\n  primary: '#00A651',\n  secondary: '#0066CC',\n  success: '#00A651',\n  warning: '#FF6B35',\n  danger: '#E74C3C',\n  background: '#F5F5F5',\n  white: '#FFFFFF',\n  lightGray: '#E5E5E5',\n  mediumGray: '#999999',\n  darkGray: '#666666',\n  text: '#333333',\n  lightText: '#666666',\n  border: '#DDDDDD',\n};\n\ninterface PaymentMethodInfo {\n  id: string;\n  name: string;\n  description: string;\n  icon: string;\n  iconColor: string;\n  popular?: boolean;\n  comingSoon?: boolean;\n}\n\nconst PaymentMethodsScreen: React.FC = () => {\n  const { paymentMethods, _updatePaymentMethods, isLoading } = useSettingsStore();\n  const [formData, setFormData] = useState(__paymentMethods);\n  const [hasChanges, setHasChanges] = useState(__false);\n\n  const paymentMethodsInfo: PaymentMethodInfo[] = [\n    {\n      id: 'cash',\n      name: 'Cash',\n      description: 'Accept cash payments with change calculation',\n      icon: 'payments',\n      iconColor: Colors.success,\n      popular: _true,\n    },\n    {\n      id: 'card',\n      name: 'Card Payments',\n      description: 'Credit and debit cards via card reader',\n      icon: 'credit-card',\n      iconColor: Colors.secondary,\n      popular: _true,\n    },\n    {\n      id: 'applePay',\n      name: 'Apple Pay',\n      description: 'Contactless payments using Apple Pay',\n      icon: 'phone-android',\n      iconColor: Colors.text,\n      popular: _true,\n    },\n    {\n      id: 'googlePay',\n      name: 'Google Pay',\n      description: 'Contactless payments using Google Pay',\n      icon: 'phone-android',\n      iconColor: Colors.warning,\n    },\n    {\n      id: 'qrCode',\n      name: 'QR Code Payment',\n      description: 'Generate QR codes for customer mobile payments (1.2% fees)',\n      icon: 'qr-code-scanner',\n      iconColor: Colors.primary,\n    },\n    {\n      id: 'customerAccount',\n      name: 'Customer Account',\n      description: 'Allow customers to pay using store credit',\n      icon: 'account-balance-wallet',\n      iconColor: Colors.darkGray,\n      comingSoon: _true,\n    },\n  ];\n\n  const handlePaymentMethodToggle = (methodId: keyof typeof paymentMethods, enabled: _boolean) => {\n    setFormData(prev => ({\n      ...prev,\n      [methodId]: {\n        ...prev[methodId],\n        enabled,\n      },\n    }));\n    setHasChanges(__true);\n  };\n\n  const handleRequiresAuthToggle = (\n    methodId: keyof typeof paymentMethods,\n    requiresAuth: _boolean,\n  ) => {\n    setFormData(prev => ({\n      ...prev,\n      [methodId]: {\n        ...prev[methodId],\n        requiresAuth,\n      },\n    }));\n    setHasChanges(__true);\n  };\n\n  const handleTipEnabledToggle = (_enabled: _boolean) => {\n    setFormData(prev => ({\n      ...prev,\n      card: {\n        ...prev.card,\n        tipEnabled: _enabled,\n      },\n    }));\n    setHasChanges(__true);\n  };\n\n  const handleSave = async () => {\n    try {\n      updatePaymentMethods(__formData);\n      setHasChanges(__false);\n      Alert.alert('Success', 'Payment methods configuration has been saved successfully.', [\n        { text: 'OK' },\n      ]);\n    } catch (__error) {\n      Alert.alert('Error', 'Failed to save payment methods configuration. Please try again.', [\n        { text: 'OK' },\n      ]);\n    }\n  };\n\n  const handleReset = () => {\n    Alert.alert('Reset Changes', 'Are you sure you want to discard all unsaved changes?', [\n      { text: 'Cancel', style: 'cancel' },\n      {\n        text: 'Reset',\n        style: 'destructive',\n        onPress: () => {\n          setFormData(__paymentMethods);\n          setHasChanges(__false);\n        },\n      },\n    ]);\n  };\n\n  const getEnabledMethodsCount = () => {\n    return Object.values(__formData).filter(method => method.enabled).length;\n  };\n\n  const _renderPaymentMethodCard = (methodInfo: _PaymentMethodInfo) => {\n    const methodData = formData[methodInfo.id];\n    const isEnabled = methodData.enabled;\n\n    return (\n      <View key={methodInfo.id} style={styles.paymentMethodContainer}>\n        <SettingsCard\n          title={methodInfo.name}\n          description={methodInfo.description}\n          icon={methodInfo.icon}\n          iconColor={isEnabled ? methodInfo.iconColor : Colors.lightGray}\n          badge={methodInfo.popular ? 'Popular' : methodInfo.comingSoon ? 'Coming Soon' : undefined}\n          disabled={methodInfo.comingSoon}>\n          <ToggleSwitch\n            value={isEnabled}\n            onValueChange={_enabled => handlePaymentMethodToggle(methodInfo.id, _enabled)}\n            disabled={methodInfo.comingSoon}\n          />\n        </SettingsCard>\n\n        {/* Additional settings for enabled methods */}\n        {isEnabled && !methodInfo.comingSoon && (\n          <View style={styles.subSettingsContainer}>\n            <SettingsCard\n              title=\"Require Authorization\"\n              description=\"Manager authorization required for this payment method\"\n              icon=\"security\"\n              iconColor={Colors.warning}\n              showChevron={false}>\n              <ToggleSwitch\n                value={methodData.requiresAuth}\n                onValueChange={_requiresAuth =>\n                  handleRequiresAuthToggle(methodInfo.id, _requiresAuth)\n                }\n                size=\"small\"\n              />\n            </SettingsCard>\n\n            {/* Card-specific settings */}\n            {methodInfo.id === 'card' && (\n              <SettingsCard\n                title=\"Enable Tip Prompts\"\n                description=\"Show tip options during card transactions\"\n                icon=\"thumb-up\"\n                iconColor={Colors.primary}\n                showChevron={false}>\n                <ToggleSwitch\n                  value={formData.card.tipEnabled}\n                  onValueChange={handleTipEnabledToggle}\n                  size=\"small\"\n                />\n              </SettingsCard>\n            )}\n          </View>\n        )}\n      </View>\n    );\n  };\n\n  return (\n    <View style={styles.container}>\n      <SettingsHeader\n        title=\"Payment Methods\"\n        subtitle=\"Configure accepted payment options\"\n        rightAction={{\n          icon: 'save',\n          onPress: _handleSave,\n          color: hasChanges ? Colors.white : 'rgba(255, 255, 255, 0.5)',\n        }}\n      />\n\n      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n        {/* Summary */}\n        <SettingsSection\n          title=\"Payment Methods Summary\"\n          subtitle={`${getEnabledMethodsCount()} payment methods enabled`}>\n          <View style={styles.summaryContainer}>\n            <View style={styles.summaryCard}>\n              <Icon name=\"payment\" size={32} color={Colors.primary} />\n              <Text style={styles.summaryTitle}>Active Methods</Text>\n              <Text style={styles.summaryValue}>{getEnabledMethodsCount()}</Text>\n            </View>\n\n            <View style={styles.summaryCard}>\n              <Icon name=\"security\" size={32} color={Colors.warning} />\n              <Text style={styles.summaryTitle}>Secure Methods</Text>\n              <Text style={styles.summaryValue}>\n                {\n                  Object.values(__formData).filter(method => method.enabled && method.requiresAuth)\n                    .length\n                }\n              </Text>\n            </View>\n          </View>\n        </SettingsSection>\n\n        {/* Popular Payment Methods */}\n        <SettingsSection\n          title=\"Popular Payment Methods\"\n          subtitle=\"Most commonly used payment options\">\n          {paymentMethodsInfo.filter(method => method.popular).map(__renderPaymentMethodCard)}\n        </SettingsSection>\n\n        {/* Additional Payment Methods */}\n        <SettingsSection\n          title=\"Additional Payment Methods\"\n          subtitle=\"Other payment options for your business\">\n          {paymentMethodsInfo.filter(method => !method.popular).map(__renderPaymentMethodCard)}\n        </SettingsSection>\n\n        {/* Payment Processing Info */}\n        <SettingsSection\n          title=\"Payment Processing\"\n          subtitle=\"Important information about payment handling\">\n          <View style={styles.infoContainer}>\n            <View style={styles.infoCard}>\n              <Icon name=\"info-outline\" size={24} color={Colors.secondary} />\n              <View style={styles.infoContent}>\n                <Text style={styles.infoTitle}>Card Processing</Text>\n                <Text style={styles.infoText}>\n                  Card payments require a compatible card reader. Contact support for setup\n                  assistance.\n                </Text>\n              </View>\n            </View>\n\n            <View style={styles.infoCard}>\n              <Icon name=\"security\" size={24} color={Colors.primary} />\n              <View style={styles.infoContent}>\n                <Text style={styles.infoTitle}>Security & Compliance</Text>\n                <Text style={styles.infoText}>\n                  All payment methods are PCI DSS compliant and use end-to-end encryption.\n                </Text>\n              </View>\n            </View>\n\n            <View style={styles.infoCard}>\n              <Icon name=\"trending-up\" size={24} color={Colors.warning} />\n              <View style={styles.infoContent}>\n                <Text style={styles.infoTitle}>Processing Fees</Text>\n                <Text style={styles.infoText}>\n                  Different payment methods may have varying processing fees. Check with your\n                  payment processor.\n                </Text>\n              </View>\n            </View>\n          </View>\n        </SettingsSection>\n\n        {/* Action Buttons */}\n        <View style={styles.actionButtons}>\n          <TouchableOpacity\n            style={[styles.button, styles.saveButton]}\n            onPress={handleSave}\n            disabled={!hasChanges || isLoading}>\n            <Icon name=\"save\" size={20} color={Colors.white} />\n            <Text style={styles.saveButtonText}>Save Changes</Text>\n          </TouchableOpacity>\n\n          {hasChanges && (\n            <TouchableOpacity style={[styles.button, styles.resetButton]} onPress={handleReset}>\n              <Icon name=\"refresh\" size={20} color={Colors.danger} />\n              <Text style={styles.resetButtonText}>Reset</Text>\n            </TouchableOpacity>\n          )}\n        </View>\n      </ScrollView>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  content: {\n    flex: 1,\n  },\n  summaryContainer: {\n    flexDirection: 'row',\n    padding: 16,\n    gap: 16,\n  },\n  summaryCard: {\n    flex: 1,\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    padding: 16,\n    alignItems: 'center',\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.05,\n    shadowRadius: 2,\n    elevation: 1,\n  },\n  summaryTitle: {\n    fontSize: 14,\n    color: Colors.lightText,\n    marginTop: 8,\n    textAlign: 'center',\n  },\n  summaryValue: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: Colors.text,\n    marginTop: 4,\n  },\n  paymentMethodContainer: {\n    marginBottom: 1,\n  },\n  subSettingsContainer: {\n    marginLeft: 16,\n    borderLeftWidth: 2,\n    borderLeftColor: Colors.lightGray,\n    paddingLeft: 16,\n  },\n  infoContainer: {\n    padding: 16,\n    gap: 12,\n  },\n  infoCard: {\n    flexDirection: 'row',\n    backgroundColor: Colors.white,\n    borderRadius: 8,\n    padding: 16,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.05,\n    shadowRadius: 2,\n    elevation: 1,\n  },\n  infoContent: {\n    flex: 1,\n    marginLeft: 12,\n  },\n  infoTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  infoText: {\n    fontSize: 14,\n    color: Colors.lightText,\n    lineHeight: 20,\n  },\n  actionButtons: {\n    padding: 16,\n    gap: 12,\n  },\n  button: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 16,\n    borderRadius: 12,\n    gap: 8,\n  },\n  saveButton: {\n    backgroundColor: Colors.primary,\n  },\n  saveButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.white,\n  },\n  resetButton: {\n    backgroundColor: Colors.white,\n    borderWidth: 1,\n    borderColor: Colors.danger,\n  },\n  resetButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.danger,\n  },\n});\n\nexport default PaymentMethodsScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/settings/business/ReceiptCustomizationScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_updateReceiptSettings' is assigned a value but never used.","line":39,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":39,"endColumn":50}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  ScrollView,\n  TextInput,\n  TouchableOpacity,\n  Alert,\n  Image,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport {\n  SettingsHeader,\n  SettingsSection,\n  SettingsCard,\n  ToggleSwitch,\n} from '../../../components/settings';\nimport useSettingsStore from '../../../store/useSettingsStore';\n\n// Clover POS Color Scheme\nconst Colors = {\n  primary: '#00A651',\n  secondary: '#0066CC',\n  success: '#00A651',\n  warning: '#FF6B35',\n  danger: '#E74C3C',\n  background: '#F5F5F5',\n  white: '#FFFFFF',\n  lightGray: '#E5E5E5',\n  mediumGray: '#999999',\n  darkGray: '#666666',\n  text: '#333333',\n  lightText: '#666666',\n  border: '#DDDDDD',\n};\n\nconst ReceiptCustomizationScreen: React.FC = () => {\n  const { receiptSettings, _updateReceiptSettings, businessInfo, isLoading } = useSettingsStore();\n  const [formData, setFormData] = useState(__receiptSettings);\n  const [hasChanges, setHasChanges] = useState(__false);\n  const [logoUri, setLogoUri] = useState<string | null>(receiptSettings.logoUri || null);\n\n  const handleFieldChange = (field: _string, value: _unknown) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    setHasChanges(__true);\n  };\n\n  const handleSave = async () => {\n    try {\n      updateReceiptSettings(__formData);\n      setHasChanges(__false);\n      Alert.alert('Success', 'Receipt customization has been saved successfully.', [\n        { text: 'OK' },\n      ]);\n    } catch (__error) {\n      Alert.alert('Error', 'Failed to save receipt customization. Please try again.', [\n        { text: 'OK' },\n      ]);\n    }\n  };\n\n  const handleReset = () => {\n    Alert.alert('Reset Changes', 'Are you sure you want to discard all unsaved changes?', [\n      { text: 'Cancel', style: 'cancel' },\n      {\n        text: 'Reset',\n        style: 'destructive',\n        onPress: () => {\n          setFormData(__receiptSettings);\n          setHasChanges(__false);\n        },\n      },\n    ]);\n  };\n\n  const handleLogoUpload = () => {\n    Alert.alert('Select Logo Source', 'Choose how you would like to add your restaurant logo', [\n      { text: 'Cancel', style: 'cancel' },\n      {\n        text: 'Camera',\n        onPress: () => simulateImageCapture('camera'),\n      },\n      {\n        text: 'Photo Library',\n        onPress: () => simulateImageCapture('library'),\n      },\n    ]);\n  };\n\n  const simulateImageCapture = (source: 'camera' | 'library') => {\n    // Simulate image picker result with a sample logo\n    const sampleLogos = [\n      'https://via.placeholder.com/200x80/00A651/FFFFFF?text=FYNLO+POS',\n      'https://via.placeholder.com/200x80/0066CC/FFFFFF?text=RESTAURANT',\n      'https://via.placeholder.com/200x80/FF6B35/FFFFFF?text=CAFE+LOGO',\n    ];\n\n    const _selectedLogo = sampleLogos[Math.floor(Math.random() * sampleLogos.length)];\n\n    Alert.alert(\n      'Logo Selected',\n      `Logo selected from ${source}. This is a demo - in production, this would use react-native-image-picker.`,\n      [\n        { text: 'Cancel', style: 'cancel' },\n        {\n          text: 'Use This Logo',\n          onPress: () => {\n            setLogoUri(__selectedLogo);\n            handleFieldChange('logoUri', _selectedLogo);\n            Alert.alert('Success', \"Logo has been updated! Don't forget to save your changes.\");\n          },\n        },\n      ],\n    );\n  };\n\n  const handleRemoveLogo = () => {\n    Alert.alert('Remove Logo', 'Are you sure you want to remove the current logo?', [\n      { text: 'Cancel', style: 'cancel' },\n      {\n        text: 'Remove',\n        style: 'destructive',\n        onPress: () => {\n          setLogoUri(__null);\n          handleFieldChange('logoUri', _null);\n        },\n      },\n    ]);\n  };\n\n  // Sample receipt preview data\n  const sampleReceiptData = {\n    orderNumber: 'ORD-2024-001',\n    date: new Date().toLocaleDateString('en-GB'),\n    time: new Date().toLocaleTimeString('en-GB', { hour: '2-digit', minute: '2-digit' }),\n    items: [\n      { name: 'Carnitas Taco', qty: 2, price: 7.0 },\n      { name: 'Nachos', qty: 1, price: 5.0 },\n      { name: 'Corona Beer', qty: 1, price: 3.8 },\n    ],\n    subtotal: 15.8,\n    vat: 3.16,\n    total: 18.96,\n  };\n\n  const renderReceiptPreview = () => (\n    <View style={styles.receiptPreview}>\n      <View style={styles.receiptHeader}>\n        {formData.showLogo && (\n          <View style={styles.logoPlaceholder}>\n            {logoUri ? (\n              <Image\n                source={{ uri: logoUri }}\n                style={styles.receiptLogoImage}\n                resizeMode=\"contain\"\n              />\n            ) : (\n              <>\n                <Icon name=\"business\" size={40} color={Colors.primary} />\n                <Text style={styles.logoText}>LOGO</Text>\n              </>\n            )}\n          </View>\n        )}\n\n        <Text style={styles.receiptCompanyName}>{businessInfo.companyName}</Text>\n        <Text style={styles.receiptAddress}>{businessInfo.address}</Text>\n        <Text style={styles.receiptAddress}>\n          {businessInfo.city}, {businessInfo.postalCode}\n        </Text>\n        <Text style={styles.receiptPhone}>Tel: {businessInfo.phone}</Text>\n\n        {formData.showVatNumber && businessInfo.vatNumber && (\n          <Text style={styles.receiptVat}>VAT: {businessInfo.vatNumber}</Text>\n        )}\n\n        {formData.headerText && <Text style={styles.receiptHeaderText}>{formData.headerText}</Text>}\n      </View>\n\n      <View style={styles.receiptDivider} />\n\n      <View style={styles.receiptBody}>\n        <View style={styles.receiptOrderInfo}>\n          <Text style={styles.receiptOrderNumber}>Order: {sampleReceiptData.orderNumber}</Text>\n          <Text style={styles.receiptDateTime}>\n            {sampleReceiptData.date} {sampleReceiptData.time}\n          </Text>\n        </View>\n\n        <View style={styles.receiptItems}>\n          {sampleReceiptData.items.map((__item, _index) => (\n            <View key={index} style={styles.receiptItem}>\n              <Text style={styles.receiptItemName}>{item.name}</Text>\n              <Text style={styles.receiptItemQty}>x{item.qty}</Text>\n              <Text style={styles.receiptItemPrice}>£{item.price.toFixed(2)}</Text>\n            </View>\n          ))}\n        </View>\n\n        <View style={styles.receiptDivider} />\n\n        <View style={styles.receiptTotals}>\n          <View style={styles.receiptTotalLine}>\n            <Text style={styles.receiptTotalLabel}>Subtotal:</Text>\n            <Text style={styles.receiptTotalValue}>£{sampleReceiptData.subtotal.toFixed(2)}</Text>\n          </View>\n          <View style={styles.receiptTotalLine}>\n            <Text style={styles.receiptTotalLabel}>VAT (20%):</Text>\n            <Text style={styles.receiptTotalValue}>£{sampleReceiptData.vat.toFixed(2)}</Text>\n          </View>\n          <View style={[styles.receiptTotalLine, styles.receiptGrandTotal]}>\n            <Text style={styles.receiptGrandTotalLabel}>TOTAL:</Text>\n            <Text style={styles.receiptGrandTotalValue}>£{sampleReceiptData.total.toFixed(2)}</Text>\n          </View>\n        </View>\n      </View>\n\n      <View style={styles.receiptDivider} />\n\n      <View style={styles.receiptFooter}>\n        {formData.footerText && <Text style={styles.receiptFooterText}>{formData.footerText}</Text>}\n\n        {formData.showQrCode && (\n          <View style={styles.qrCodePlaceholder}>\n            <Icon name=\"qr-code\" size={60} color={Colors.mediumGray} />\n            <Text style={styles.qrCodeText}>QR Code</Text>\n          </View>\n        )}\n      </View>\n    </View>\n  );\n\n  return (\n    <View style={styles.container}>\n      <SettingsHeader\n        title=\"Receipt Customization\"\n        subtitle=\"Customize your receipt appearance\"\n        rightAction={{\n          icon: 'save',\n          onPress: _handleSave,\n          color: hasChanges ? Colors.white : 'rgba(255, 255, 255, 0.5)',\n        }}\n      />\n\n      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n        {/* Receipt Format */}\n        <SettingsSection\n          title=\"Receipt Format\"\n          subtitle=\"Choose how receipts are printed and delivered\">\n          <SettingsCard\n            title=\"Print Receipts\"\n            description=\"Automatically print receipts for customers\"\n            icon=\"print\"\n            iconColor={Colors.primary}>\n            <ToggleSwitch\n              value={formData.printReceipts}\n              onValueChange={_value => handleFieldChange('printReceipts', _value)}\n            />\n          </SettingsCard>\n\n          <SettingsCard\n            title=\"Email Receipts\"\n            description=\"Send digital receipts to customer email\"\n            icon=\"email\"\n            iconColor={Colors.secondary}>\n            <ToggleSwitch\n              value={formData.emailReceipts}\n              onValueChange={_value => handleFieldChange('emailReceipts', _value)}\n            />\n          </SettingsCard>\n\n          <SettingsCard\n            title=\"Receipt Format\"\n            description=\"Choose receipt paper format\"\n            icon=\"receipt\"\n            iconColor={Colors.warning}\n            value={formData.receiptFormat === 'thermal' ? 'Thermal (80mm)' : 'A4 Paper'}\n            onPress={() => {\n              const _newFormat = formData.receiptFormat === 'thermal' ? 'a4' : 'thermal';\n              handleFieldChange('receiptFormat', _newFormat);\n            }}\n          />\n        </SettingsSection>\n\n        {/* Branding */}\n        <SettingsSection title=\"Branding\" subtitle=\"Add your logo and company branding\">\n          <SettingsCard\n            title=\"Show Logo\"\n            description=\"Display company logo on receipts\"\n            icon=\"image\"\n            iconColor={Colors.primary}>\n            <ToggleSwitch\n              value={formData.showLogo}\n              onValueChange={_value => handleFieldChange('showLogo', _value)}\n            />\n          </SettingsCard>\n\n          {formData.showLogo && (\n            <View style={styles.logoSection}>\n              {logoUri ? (\n                <View style={styles.logoContainer}>\n                  <Text style={styles.logoSectionTitle}>Current Logo</Text>\n                  <View style={styles.logoPreview}>\n                    <Image\n                      source={{ uri: logoUri }}\n                      style={styles.logoImage}\n                      resizeMode=\"contain\"\n                    />\n                  </View>\n                  <View style={styles.logoActions}>\n                    <TouchableOpacity\n                      style={[styles.logoButton, styles.changeLogo]}\n                      onPress={handleLogoUpload}>\n                      <Icon name=\"edit\" size={20} color={Colors.white} />\n                      <Text style={styles.logoButtonText}>Change Logo</Text>\n                    </TouchableOpacity>\n                    <TouchableOpacity\n                      style={[styles.logoButton, styles.removeLogo]}\n                      onPress={handleRemoveLogo}>\n                      <Icon name=\"delete\" size={20} color={Colors.white} />\n                      <Text style={styles.logoButtonText}>Remove</Text>\n                    </TouchableOpacity>\n                  </View>\n                </View>\n              ) : (\n                <SettingsCard\n                  title=\"Upload Logo\"\n                  description=\"Select your company logo image\"\n                  icon=\"cloud-upload\"\n                  iconColor={Colors.secondary}\n                  onPress={handleLogoUpload}\n                />\n              )}\n            </View>\n          )}\n        </SettingsSection>\n\n        {/* Content Customization */}\n        <SettingsSection\n          title=\"Content Customization\"\n          subtitle=\"Customize text that appears on receipts\">\n          <View style={styles.textInputContainer}>\n            <Text style={styles.inputLabel}>Header Text</Text>\n            <TextInput\n              style={styles.textInput}\n              value={formData.headerText}\n              onChangeText={_value => handleFieldChange('headerText', _value)}\n              placeholder=\"Thank you for dining with us!\"\n              multiline\n              numberOfLines={2}\n            />\n          </View>\n\n          <View style={styles.textInputContainer}>\n            <Text style={styles.inputLabel}>Footer Text</Text>\n            <TextInput\n              style={styles.textInput}\n              value={formData.footerText}\n              onChangeText={_value => handleFieldChange('footerText', _value)}\n              placeholder=\"Visit us again soon!\"\n              multiline\n              numberOfLines={2}\n            />\n          </View>\n        </SettingsSection>\n\n        {/* Additional Options */}\n        <SettingsSection title=\"Additional Options\" subtitle=\"Extra features for your receipts\">\n          <SettingsCard\n            title=\"Show VAT Number\"\n            description=\"Display VAT registration number\"\n            icon=\"receipt-long\"\n            iconColor={Colors.success}>\n            <ToggleSwitch\n              value={formData.showVatNumber}\n              onValueChange={_value => handleFieldChange('showVatNumber', _value)}\n            />\n          </SettingsCard>\n\n          <SettingsCard\n            title=\"QR Code\"\n            description=\"Add QR code for digital menu or feedback\"\n            icon=\"qr-code\"\n            iconColor={Colors.darkGray}>\n            <ToggleSwitch\n              value={formData.showQrCode}\n              onValueChange={_value => handleFieldChange('showQrCode', _value)}\n            />\n          </SettingsCard>\n        </SettingsSection>\n\n        {/* Receipt Preview */}\n        <SettingsSection title=\"Receipt Preview\" subtitle=\"Preview how your receipt will look\">\n          <View style={styles.previewContainer}>{renderReceiptPreview()}</View>\n        </SettingsSection>\n\n        {/* Action Buttons */}\n        <View style={styles.actionButtons}>\n          <TouchableOpacity\n            style={[styles.button, styles.saveButton]}\n            onPress={handleSave}\n            disabled={!hasChanges || isLoading}>\n            <Icon name=\"save\" size={20} color={Colors.white} />\n            <Text style={styles.saveButtonText}>Save Changes</Text>\n          </TouchableOpacity>\n\n          {hasChanges && (\n            <TouchableOpacity style={[styles.button, styles.resetButton]} onPress={handleReset}>\n              <Icon name=\"refresh\" size={20} color={Colors.danger} />\n              <Text style={styles.resetButtonText}>Reset</Text>\n            </TouchableOpacity>\n          )}\n        </View>\n      </ScrollView>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  content: {\n    flex: 1,\n  },\n  textInputContainer: {\n    padding: 16,\n    backgroundColor: Colors.white,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  inputLabel: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.text,\n    marginBottom: 8,\n  },\n  textInput: {\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 8,\n    paddingHorizontal: 12,\n    paddingVertical: 8,\n    fontSize: 16,\n    color: Colors.text,\n    backgroundColor: Colors.background,\n    textAlignVertical: 'top',\n  },\n  previewContainer: {\n    padding: 16,\n    backgroundColor: Colors.background,\n  },\n  receiptPreview: {\n    backgroundColor: Colors.white,\n    borderRadius: 8,\n    padding: 16,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n    maxWidth: 300,\n    alignSelf: 'center',\n  },\n  receiptHeader: {\n    alignItems: 'center',\n    marginBottom: 12,\n  },\n  logoPlaceholder: {\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  logoText: {\n    fontSize: 10,\n    color: Colors.mediumGray,\n    marginTop: 4,\n  },\n  receiptCompanyName: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: Colors.text,\n    textAlign: 'center',\n    marginBottom: 4,\n  },\n  receiptAddress: {\n    fontSize: 12,\n    color: Colors.lightText,\n    textAlign: 'center',\n  },\n  receiptPhone: {\n    fontSize: 12,\n    color: Colors.lightText,\n    textAlign: 'center',\n  },\n  receiptVat: {\n    fontSize: 12,\n    color: Colors.lightText,\n    textAlign: 'center',\n    marginTop: 4,\n  },\n  receiptHeaderText: {\n    fontSize: 14,\n    color: Colors.primary,\n    textAlign: 'center',\n    marginTop: 8,\n    fontStyle: 'italic',\n  },\n  receiptBody: {\n    marginVertical: 12,\n  },\n  receiptOrderInfo: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 12,\n  },\n  receiptOrderNumber: {\n    fontSize: 12,\n    color: Colors.text,\n    fontWeight: '500',\n  },\n  receiptDateTime: {\n    fontSize: 12,\n    color: Colors.lightText,\n  },\n  receiptItems: {\n    marginBottom: 12,\n  },\n  receiptItem: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 4,\n  },\n  receiptItemName: {\n    fontSize: 12,\n    color: Colors.text,\n    flex: 1,\n  },\n  receiptItemQty: {\n    fontSize: 12,\n    color: Colors.lightText,\n    marginHorizontal: 8,\n  },\n  receiptItemPrice: {\n    fontSize: 12,\n    color: Colors.text,\n    fontWeight: '500',\n  },\n  receiptTotals: {\n    marginTop: 8,\n  },\n  receiptTotalLine: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 4,\n  },\n  receiptTotalLabel: {\n    fontSize: 12,\n    color: Colors.lightText,\n  },\n  receiptTotalValue: {\n    fontSize: 12,\n    color: Colors.text,\n    fontWeight: '500',\n  },\n  receiptGrandTotal: {\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n    paddingTop: 8,\n    marginTop: 4,\n  },\n  receiptGrandTotalLabel: {\n    fontSize: 14,\n    color: Colors.text,\n    fontWeight: 'bold',\n  },\n  receiptGrandTotalValue: {\n    fontSize: 14,\n    color: Colors.primary,\n    fontWeight: 'bold',\n  },\n  receiptDivider: {\n    height: 1,\n    backgroundColor: Colors.border,\n    marginVertical: 8,\n  },\n  receiptFooter: {\n    alignItems: 'center',\n    marginTop: 12,\n  },\n  receiptFooterText: {\n    fontSize: 12,\n    color: Colors.primary,\n    textAlign: 'center',\n    fontStyle: 'italic',\n    marginBottom: 8,\n  },\n  qrCodePlaceholder: {\n    alignItems: 'center',\n  },\n  qrCodeText: {\n    fontSize: 10,\n    color: Colors.mediumGray,\n    marginTop: 4,\n  },\n  actionButtons: {\n    padding: 16,\n    gap: 12,\n  },\n  button: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 16,\n    borderRadius: 12,\n    gap: 8,\n  },\n  saveButton: {\n    backgroundColor: Colors.primary,\n  },\n  saveButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.white,\n  },\n  resetButton: {\n    backgroundColor: Colors.white,\n    borderWidth: 1,\n    borderColor: Colors.danger,\n  },\n  resetButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.danger,\n  },\n  // Logo Upload Styles\n  logoSection: {\n    marginBottom: 1,\n  },\n  logoContainer: {\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    padding: 16,\n    marginHorizontal: 16,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.05,\n    shadowRadius: 2,\n    elevation: 1,\n  },\n  logoSectionTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 12,\n  },\n  logoPreview: {\n    alignItems: 'center',\n    backgroundColor: Colors.background,\n    borderRadius: 8,\n    padding: 16,\n    marginBottom: 16,\n  },\n  logoImage: {\n    width: 200,\n    height: 80,\n  },\n  logoActions: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  logoButton: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 12,\n    borderRadius: 8,\n    gap: 8,\n  },\n  changeLogo: {\n    backgroundColor: Colors.secondary,\n  },\n  removeLogo: {\n    backgroundColor: Colors.danger,\n  },\n  logoButtonText: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: Colors.white,\n  },\n  receiptLogoImage: {\n    width: 60,\n    height: 24,\n  },\n});\n\nexport default ReceiptCustomizationScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/settings/business/TaxConfigurationScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_TaxExemptItem' is defined but never used.","line":30,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_taxConfiguration' is assigned a value but never used.","line":36,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_updateTaxConfiguration' is assigned a value but never used.","line":36,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":53},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ScrollView' is not defined.","line":138,"column":8,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":138,"endColumn":18},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":170,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":170,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":203,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":203,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":214,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":214,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":228,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":228,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":229,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":229,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":233,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":233,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":245,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":245,"endColumn":22},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { flex: 1 }","line":262,"column":35,"nodeType":"ObjectExpression","endLine":262,"endColumn":46},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":281,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":281,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":294,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":294,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":297,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":297,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":306,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":306,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":307,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":307,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":311,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":311,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":312,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":312,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":318,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":318,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":319,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":319,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":334,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":334,"endColumn":18},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":340,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":340,"endColumn":20},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: styles.rateInput","line":366,"column":3,"nodeType":"Property","endLine":372,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: styles.addExemptItemInput","line":437,"column":3,"nodeType":"Property","endLine":447,"endColumn":4}],"suppressedMessages":[],"errorCount":22,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { StyleSheet, View, TouchableOpacity, Alert } from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport {\n  SettingsHeader,\n  SettingsSection,\n  SettingsCard,\n  ToggleSwitch,\n} from '../../../components/settings';\nimport { SimpleTextInput, SimpleDecimalInput } from '../../../components/inputs';\nimport useSettingsStore from '../../../store/useSettingsStore';\n\n// Clover POS Color Scheme\nconst Colors = {\n  primary: '#00A651',\n  secondary: '#0066CC',\n  success: '#00A651',\n  warning: '#FF6B35',\n  danger: '#E74C3C',\n  background: '#F5F5F5',\n  white: '#FFFFFF',\n  lightGray: '#E5E5E5',\n  mediumGray: '#999999',\n  darkGray: '#666666',\n  text: '#333333',\n  lightText: '#666666',\n  border: '#DDDDDD',\n};\n\ninterface _TaxExemptItem {\n  id: string;\n  name: string;\n}\n\nconst TaxConfigurationScreen: React.FC = () => {\n  const { _taxConfiguration, _updateTaxConfiguration, isLoading } = useSettingsStore();\n  const [formData, setFormData] = useState(__taxConfiguration);\n  const [hasChanges, setHasChanges] = useState(__false);\n  const [newExemptItem, setNewExemptItem] = useState('');\n  const [showAddExemptItem, setShowAddExemptItem] = useState(__false);\n\n  // UK VAT rates for reference\n  const ukVatRates = [\n    { rate: 20, description: 'Standard Rate (20%)', category: 'Most goods and services' },\n    {\n      rate: 5,\n      description: 'Reduced Rate (5%)',\n      category: \"Children's car seats, home energy, etc.\",\n    },\n    { rate: 0, description: 'Zero Rate (0%)', category: \"Books, _food, children's clothes, etc.\" },\n  ];\n\n  const handleFieldChange = (field: _string, value: _unknown) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    setHasChanges(__true);\n  };\n\n  const handleVatRateChange = (_rate: _string) => {\n    const numericRate = parseFloat(__rate) || 0;\n    if (numericRate >= 0 && numericRate <= 100) {\n      handleFieldChange('vatRate', _numericRate);\n    }\n  };\n\n  const addExemptItem = () => {\n    if (newExemptItem.trim()) {\n      const _updatedExemptItems = [...formData.taxExemptItems, newExemptItem.trim()];\n      handleFieldChange('taxExemptItems', _updatedExemptItems);\n      setNewExemptItem('');\n      setShowAddExemptItem(__false);\n    }\n  };\n\n  const removeExemptItem = (index: _number) => {\n    const _updatedExemptItems = formData.taxExemptItems.filter((___, _i) => i !== index);\n    handleFieldChange('taxExemptItems', _updatedExemptItems);\n  };\n\n  const calculateTaxOnAmount = (amount: _number): { net: number; vat: number; gross: number } => {\n    if (!formData.vatEnabled) {\n      return { net: _amount, vat: 0, gross: amount };\n    }\n\n    if (formData.vatInclusive) {\n      // VAT inclusive calculation\n      const gross = amount;\n      const net = gross / (1 + formData.vatRate / 100);\n      const _vat = gross - net;\n      return { net, _vat, gross };\n    } else {\n      // VAT exclusive calculation\n      const net = amount;\n      const vat = net * (formData.vatRate / 100);\n      const gross = net + vat;\n      return { net, _vat, gross };\n    }\n  };\n\n  const handleSave = async () => {\n    try {\n      updateTaxConfiguration(__formData);\n      setHasChanges(__false);\n      Alert.alert('Success', 'Tax configuration has been saved successfully.', [{ text: 'OK' }]);\n    } catch (__error) {\n      Alert.alert('Error', 'Failed to save tax configuration. Please try again.', [{ text: 'OK' }]);\n    }\n  };\n\n  const handleReset = () => {\n    Alert.alert('Reset Changes', 'Are you sure you want to discard all unsaved changes?', [\n      { text: 'Cancel', style: 'cancel' },\n      {\n        text: 'Reset',\n        style: 'destructive',\n        onPress: () => {\n          setFormData(__taxConfiguration);\n          setHasChanges(__false);\n        },\n      },\n    ]);\n  };\n\n  // Example calculation for £100\n  const exampleCalculation = calculateTaxOnAmount(100);\n\n  return (\n    <View style={styles.container}>\n      <SettingsHeader\n        title=\"Tax Configuration\"\n        subtitle=\"VAT rates and tax exemptions\"\n        rightAction={{\n          icon: 'save',\n          onPress: _handleSave,\n          color: hasChanges ? Colors.white : 'rgba(255, 255, 255, 0.5)',\n        }}\n      />\n\n      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n        {/* VAT Settings */}\n        <SettingsSection title=\"VAT Configuration\" subtitle=\"Configure Value Added Tax settings\">\n          <SettingsCard\n            title=\"Enable VAT\"\n            description=\"Include VAT in all transactions\"\n            icon=\"receipt-long\"\n            iconColor={Colors.primary}>\n            <ToggleSwitch\n              value={formData.vatEnabled}\n              onValueChange={_value => handleFieldChange('vatEnabled', _value)}\n            />\n          </SettingsCard>\n\n          {formData.vatEnabled && (\n            <>\n              <SettingsCard\n                title=\"VAT Rate\"\n                description=\"Standard VAT rate percentage\"\n                icon=\"percent\"\n                iconColor={Colors.secondary}>\n                <View style={styles.rateInputContainer}>\n                  <SimpleDecimalInput\n                    // label=\"VAT Rate\" // Label is part of SettingsCard title\n                    value={formData.vatRate} // Pass number directly\n                    onValueChange={value => handleVatRateChange(value.toString())} // onValueChange expects number, handleVatRateChange expects string\n                    keyboardType=\"numeric\" // Default for SimpleDecimalInput\n                    maxLength={5} // Max length for digits before decimal, or total?\n                    placeholder=\"0.00\" // Added placeholder\n                    // containerStyle={{ flex: 1 }} // To allow input to take space before %\n                    // inputStyle props for text align if supported, e.g. textAlign: 'right'\n                  />\n                  <Text style={styles.percentSymbol}>%</Text>\n                </View>\n              </SettingsCard>\n\n              <SettingsCard\n                title=\"VAT Inclusive Pricing\"\n                description=\"Prices shown include VAT (tax inclusive)\"\n                icon=\"price-check\"\n                iconColor={Colors.warning}>\n                <ToggleSwitch\n                  value={formData.vatInclusive}\n                  onValueChange={_value => handleFieldChange('vatInclusive', _value)}\n                />\n              </SettingsCard>\n            </>\n          )}\n        </SettingsSection>\n\n        {/* UK VAT Rates Reference */}\n        {formData.vatEnabled && (\n          <SettingsSection\n            title=\"UK VAT Rates Reference\"\n            subtitle=\"Common VAT rates in the United Kingdom\">\n            <View style={styles.vatRatesContainer}>\n              {ukVatRates.map((__vatRate, _index) => (\n                <TouchableOpacity\n                  key={index}\n                  style={[\n                    styles.vatRateCard,\n                    formData.vatRate === vatRate.rate && styles.selectedVatRate,\n                  ]}\n                  onPress={() => handleFieldChange('vatRate', vatRate.rate)}>\n                  <View style={styles.vatRateHeader}>\n                    <Text\n                      style={[\n                        styles.vatRateTitle,\n                        formData.vatRate === vatRate.rate && styles.selectedVatRateText,\n                      ]}>\n                      {vatRate.description}\n                    </Text>\n                    {formData.vatRate === vatRate.rate && (\n                      <Icon name=\"check-circle\" size={20} color={Colors.primary} />\n                    )}\n                  </View>\n                  <Text style={styles.vatRateCategory}>{vatRate.category}</Text>\n                </TouchableOpacity>\n              ))}\n            </View>\n          </SettingsSection>\n        )}\n\n        {/* Service Tax - Platform Controlled */}\n        <SettingsSection\n          title=\"Service Charge\"\n          subtitle=\"Service charges are controlled by the platform\">\n          <View style={styles.platformControlledCard}>\n            <Icon name=\"lock\" size={24} color={Colors.mediumGray} />\n            <View style={styles.platformControlledContent}>\n              <Text style={styles.platformControlledTitle}>Platform Controlled</Text>\n              <Text style={styles.platformControlledDescription}>\n                Service charges are set and managed by the platform owner. Contact support if you\n                need changes.\n              </Text>\n              <Text style={styles.platformControlledRate}>\n                Current Rate: 12.5% (Platform Standard)\n              </Text>\n            </View>\n          </View>\n        </SettingsSection>\n\n        {/* Tax Exempt Items */}\n        <SettingsSection title=\"Tax Exempt Items\" subtitle=\"Items that are exempt from VAT\">\n          <View style={styles.exemptItemsContainer}>\n            {formData.taxExemptItems.map((__item, _index) => (\n              <View key={index} style={styles.exemptItemCard}>\n                <Text style={styles.exemptItemText}>{item}</Text>\n                <TouchableOpacity\n                  onPress={() => removeExemptItem(__index)}\n                  style={styles.removeButton}>\n                  <Icon name=\"close\" size={20} color={Colors.danger} />\n                </TouchableOpacity>\n              </View>\n            ))}\n\n            {showAddExemptItem ? (\n              <View style={styles.addExemptItemContainer}>\n                <SimpleTextInput\n                  // No label needed here as it's a direct input field\n                  value={newExemptItem}\n                  onValueChange={setNewExemptItem}\n                  placeholder=\"Enter item name\"\n                  autoFocus\n                  containerStyle={{ flex: 1 }} // To take available space\n                />\n                <TouchableOpacity onPress={addExemptItem} style={styles.addButton}>\n                  <Icon name=\"add\" size={20} color={Colors.primary} />\n                </TouchableOpacity>\n                <TouchableOpacity\n                  onPress={() => {\n                    setShowAddExemptItem(__false);\n                    setNewExemptItem('');\n                  }}\n                  style={styles.cancelButton}>\n                  <Icon name=\"close\" size={20} color={Colors.mediumGray} />\n                </TouchableOpacity>\n              </View>\n            ) : (\n              <TouchableOpacity\n                style={styles.addExemptItemButton}\n                onPress={() => setShowAddExemptItem(__true)}>\n                <Icon name=\"add\" size={20} color={Colors.primary} />\n                <Text style={styles.addExemptItemButtonText}>Add Exempt Item</Text>\n              </TouchableOpacity>\n            )}\n          </View>\n        </SettingsSection>\n\n        {/* Tax Calculation Preview */}\n        {formData.vatEnabled && (\n          <SettingsSection\n            title=\"Tax Calculation Preview\"\n            subtitle=\"Example calculation for £100.00\">\n            <View style={styles.calculationPreview}>\n              <View style={styles.calculationRow}>\n                <Text style={styles.calculationLabel}>\n                  {formData.vatInclusive ? 'Gross Amount:' : 'Net Amount:'}\n                </Text>\n                <Text style={styles.calculationValue}>\n                  £\n                  {formData.vatInclusive\n                    ? exampleCalculation.gross.toFixed(2)\n                    : exampleCalculation.net.toFixed(2)}\n                </Text>\n              </View>\n\n              <View style={styles.calculationRow}>\n                <Text style={styles.calculationLabel}>VAT ({formData.vatRate}%):</Text>\n                <Text style={styles.calculationValue}>£{exampleCalculation.vat.toFixed(2)}</Text>\n              </View>\n\n              <View style={styles.calculationRow}>\n                <Text style={styles.calculationLabel}>Service (Platform - 12.5%):</Text>\n                <Text style={styles.calculationValue}>\n                  £{((exampleCalculation.net * 12.5) / 100).toFixed(2)}\n                </Text>\n              </View>\n\n              <View style={[styles.calculationRow, styles.calculationTotal]}>\n                <Text style={styles.calculationTotalLabel}>Total Amount:</Text>\n                <Text style={styles.calculationTotalValue}>\n                  £{(exampleCalculation.gross + (exampleCalculation.net * 12.5) / 100).toFixed(2)}\n                </Text>\n              </View>\n            </View>\n          </SettingsSection>\n        )}\n\n        {/* Action Buttons */}\n        <View style={styles.actionButtons}>\n          <TouchableOpacity\n            style={[styles.button, styles.saveButton]}\n            onPress={handleSave}\n            disabled={!hasChanges || isLoading}>\n            <Icon name=\"save\" size={20} color={Colors.white} />\n            <Text style={styles.saveButtonText}>Save Changes</Text>\n          </TouchableOpacity>\n\n          {hasChanges && (\n            <TouchableOpacity style={[styles.button, styles.resetButton]} onPress={handleReset}>\n              <Icon name=\"refresh\" size={20} color={Colors.danger} />\n              <Text style={styles.resetButtonText}>Reset</Text>\n            </TouchableOpacity>\n          )}\n        </View>\n      </ScrollView>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  content: {\n    flex: 1,\n  },\n  rateInputContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: Colors.background,\n    borderRadius: 8,\n    paddingHorizontal: 12,\n    paddingVertical: 8,\n    minWidth: 80,\n  },\n  rateInput: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    textAlign: 'right',\n    minWidth: 40,\n  },\n  percentSymbol: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.mediumGray,\n    marginLeft: 4,\n  },\n  vatRatesContainer: {\n    padding: 16,\n    gap: 8,\n  },\n  vatRateCard: {\n    backgroundColor: Colors.white,\n    borderRadius: 8,\n    padding: 12,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  selectedVatRate: {\n    borderColor: Colors.primary,\n    backgroundColor: `${Colors.primary}05`,\n  },\n  vatRateHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n  vatRateTitle: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.text,\n  },\n  selectedVatRateText: {\n    color: Colors.primary,\n  },\n  vatRateCategory: {\n    fontSize: 14,\n    color: Colors.lightText,\n    marginTop: 4,\n  },\n  exemptItemsContainer: {\n    padding: 16,\n  },\n  exemptItemCard: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    backgroundColor: Colors.background,\n    borderRadius: 8,\n    padding: 12,\n    marginBottom: 8,\n  },\n  exemptItemText: {\n    fontSize: 16,\n    color: Colors.text,\n    flex: 1,\n  },\n  removeButton: {\n    padding: 4,\n  },\n  addExemptItemContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n  },\n  addExemptItemInput: {\n    flex: 1,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 8,\n    paddingHorizontal: 12,\n    paddingVertical: 8,\n    fontSize: 16,\n    color: Colors.text,\n    backgroundColor: Colors.white,\n  },\n  addButton: {\n    backgroundColor: Colors.primary,\n    borderRadius: 8,\n    padding: 8,\n  },\n  cancelButton: {\n    padding: 8,\n  },\n  addExemptItemButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: Colors.background,\n    borderRadius: 8,\n    padding: 12,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderStyle: 'dashed',\n    gap: 8,\n  },\n  addExemptItemButtonText: {\n    fontSize: 16,\n    color: Colors.primary,\n    fontWeight: '500',\n  },\n  calculationPreview: {\n    backgroundColor: Colors.white,\n    margin: 16,\n    borderRadius: 12,\n    padding: 16,\n  },\n  calculationRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n  },\n  calculationLabel: {\n    fontSize: 16,\n    color: Colors.text,\n  },\n  calculationValue: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.text,\n  },\n  calculationTotal: {\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n    marginTop: 8,\n    paddingTop: 12,\n  },\n  calculationTotalLabel: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  calculationTotalValue: {\n    fontSize: 18,\n    fontWeight: '700',\n    color: Colors.primary,\n  },\n  actionButtons: {\n    padding: 16,\n    gap: 12,\n  },\n  button: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 16,\n    borderRadius: 12,\n    gap: 8,\n  },\n  saveButton: {\n    backgroundColor: Colors.primary,\n  },\n  saveButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.white,\n  },\n  resetButton: {\n    backgroundColor: Colors.white,\n    borderWidth: 1,\n    borderColor: Colors.danger,\n  },\n  resetButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.danger,\n  },\n  platformControlledCard: {\n    flexDirection: 'row',\n    backgroundColor: Colors.lightGray,\n    borderRadius: 12,\n    padding: 16,\n    margin: 16,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  platformControlledContent: {\n    flex: 1,\n    marginLeft: 12,\n  },\n  platformControlledTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  platformControlledDescription: {\n    fontSize: 14,\n    color: Colors.lightText,\n    lineHeight: 20,\n    marginBottom: 8,\n  },\n  platformControlledRate: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.secondary,\n  },\n});\n\nexport default TaxConfigurationScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/settings/hardware/BarcodeScannerScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_barcodeTypes' is assigned a value but never used.","line":87,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":87,"endColumn":23},{"ruleId":"react/no-unstable-nested-components","severity":1,"message":"Do not define components during render. React will see a new component type on every render and destroy the entire subtree’s DOM nodes and state (https://reactjs.org/docs/reconciliation.html#elements-of-different-types). Instead, move this component definition out of the parent component “BarcodeScannerScreen” and pass data as props.","line":220,"column":23,"nodeType":"ArrowFunctionExpression","endLine":307,"endColumn":4}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  ScrollView,\n  Alert,\n  Switch,\n  TextInput,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation } from '@react-navigation/native';\n\n// Clover POS Color Scheme\nconst Colors = {\n  primary: '#00A651',\n  secondary: '#0066CC',\n  success: '#00A651',\n  warning: '#FF6B35',\n  danger: '#E74C3C',\n  background: '#F5F5F5',\n  white: '#FFFFFF',\n  lightGray: '#E5E5E5',\n  mediumGray: '#999999',\n  darkGray: '#666666',\n  text: '#333333',\n  lightText: '#666666',\n  border: '#DDDDDD',\n};\n\ninterface BarcodeScanner {\n  id: string;\n  name: string;\n  type: 'handheld' | 'fixed' | 'camera';\n  connection: 'usb' | 'bluetooth' | 'wifi' | 'built-in';\n  status: 'connected' | 'disconnected' | 'error';\n  model?: string;\n  serialNumber?: string;\n  batteryLevel?: number;\n}\n\nconst BarcodeScannerScreen: React.FC = () => {\n  const navigation = useNavigation();\n\n  const [scanners, setScanners] = useState<BarcodeScanner[]>([\n    {\n      id: 'scanner1',\n      name: 'Handheld Scanner',\n      type: 'handheld',\n      connection: 'bluetooth',\n      status: 'connected',\n      model: 'Zebra CS4070',\n      serialNumber: 'ZB4070001234',\n      batteryLevel: 85,\n    },\n    {\n      id: 'scanner2',\n      name: 'Fixed Mount Scanner',\n      type: 'fixed',\n      connection: 'usb',\n      status: 'connected',\n      model: 'Honeywell MS7580',\n      serialNumber: 'HW7580005678',\n    },\n    {\n      id: 'scanner3',\n      name: 'Camera Scanner',\n      type: 'camera',\n      connection: 'built-in',\n      status: 'connected',\n      model: 'Built-in Camera',\n    },\n  ]);\n\n  // Scanner settings\n  const [scanningEnabled, setScanningEnabled] = useState(__true);\n  const [autoEnterEnabled, setAutoEnterEnabled] = useState(__true);\n  const [soundEnabled, setSoundEnabled] = useState(__true);\n  const [vibrationEnabled, setVibrationEnabled] = useState(__true);\n  const [duplicateTimeout, setDuplicateTimeout] = useState('3');\n  const [scanPrefix, setScanPrefix] = useState('');\n  const [scanSuffix, setScanSuffix] = useState('');\n  const [scanning, setScanning] = useState(__false);\n\n  // Supported barcode types\n  const [_barcodeTypes, setBarcodeTypes] = useState({\n    'UPC-A': _true,\n    'UPC-E': _true,\n    'EAN-13': _true,\n    'EAN-8': _true,\n    'Code-128': _true,\n    'Code-39': _true,\n    'Code-93': _false,\n    Codabar: _false,\n    ITF: _false,\n    'QR Code': _true,\n    'Data Matrix': _true,\n    PDF417: _false,\n  });\n\n  const getStatusColor = (_status: _string) => {\n    switch (__status) {\n      case 'connected':\n        return Colors.success;\n      case 'disconnected':\n        return Colors.mediumGray;\n      case 'error':\n        return Colors.danger;\n      default:\n        return Colors.warning;\n    }\n  };\n\n  const getStatusIcon = (_status: _string) => {\n    switch (__status) {\n      case 'connected':\n        return 'check-circle';\n      case 'disconnected':\n        return 'radio-button-unchecked';\n      case 'error':\n        return 'error';\n      default:\n        return 'help';\n    }\n  };\n\n  const getTypeIcon = (_type: _string) => {\n    switch (__type) {\n      case 'handheld':\n        return 'scanner';\n      case 'fixed':\n        return 'qr-code-scanner';\n      case 'camera':\n        return 'camera-alt';\n      default:\n        return 'qr-code';\n    }\n  };\n\n  const getConnectionIcon = (_connection: _string) => {\n    switch (__connection) {\n      case 'bluetooth':\n        return 'bluetooth';\n      case 'usb':\n        return 'usb';\n      case 'wifi':\n        return 'wifi';\n      case 'built-in':\n        return 'phone-android';\n      default:\n        return 'device-unknown';\n    }\n  };\n\n  const handleScanForDevices = async () => {\n    setScanning(__true);\n\n    // Simulate scanning\n    setTimeout(() => {\n      setScanning(__false);\n      Alert.alert('Scan Complete', 'Found 1 new scanner. Would you like to add it?', [\n        { text: 'Cancel', style: 'cancel' },\n        {\n          text: 'Add Scanner',\n          onPress: () => {\n            const newScanner: BarcodeScanner = {\n              id: 'scanner4',\n              name: 'New Bluetooth Scanner',\n              type: 'handheld',\n              connection: 'bluetooth',\n              status: 'disconnected',\n              model: 'Generic BT Scanner',\n              serialNumber: 'BT001122334',\n            };\n            setScanners(prev => [...prev, newScanner]);\n          },\n        },\n      ]);\n    }, 2500);\n  };\n\n  const handleTestScanner = (scanner: _BarcodeScanner) => {\n    if (scanner.status !== 'connected') {\n      Alert.alert('Error', 'Scanner must be connected to test.');\n      return;\n    }\n\n    Alert.alert('Test Scanner', `Testing ${scanner.name}. Please scan a barcode.`, [\n      { text: 'Cancel', style: 'cancel' },\n      {\n        text: 'Simulate Scan',\n        onPress: () => {\n          Alert.alert('Success', 'Test scan successful!\\nBarcode: 1234567890123');\n        },\n      },\n    ]);\n  };\n\n  const toggleScannerStatus = (scannerId: _string) => {\n    setScanners(prev =>\n      prev.map(scanner =>\n        scanner.id === scannerId\n          ? {\n              ...scanner,\n              status: scanner.status === 'connected' ? 'disconnected' : 'connected',\n            }\n          : _scanner,\n      ),\n    );\n  };\n\n  const toggleBarcodeType = (type: _string) => {\n    setBarcodeTypes(prev => ({\n      ...prev,\n      [type]: !prev[type as keyof typeof prev],\n    }));\n  };\n\n  const ScannerCard = ({ scanner }: { scanner: BarcodeScanner }) => (\n    <View style={styles.scannerCard}>\n      <View style={styles.scannerHeader}>\n        <View style={styles.scannerInfo}>\n          <View style={styles.scannerTitleRow}>\n            <Icon name={getTypeIcon(scanner.type)} size={20} color={Colors.primary} />\n            <Text style={styles.scannerName}>{scanner.name}</Text>\n          </View>\n          <View style={styles.scannerDetails}>\n            <Icon name={getConnectionIcon(scanner.connection)} size={16} color={Colors.lightText} />\n            <Text style={styles.scannerConnection}>{scanner.connection.toUpperCase()}</Text>\n            {scanner.batteryLevel && (\n              <>\n                <Icon name=\"battery-std\" size={16} color={Colors.lightText} />\n                <Text style={styles.batteryLevel}>{scanner.batteryLevel}%</Text>\n              </>\n            )}\n          </View>\n          {scanner.model && <Text style={styles.scannerModel}>{scanner.model}</Text>}\n          {scanner.serialNumber && (\n            <Text style={styles.scannerSerial}>S/N: {scanner.serialNumber}</Text>\n          )}\n        </View>\n\n        <View style={styles.scannerStatus}>\n          <View style={[styles.statusBadge, { backgroundColor: getStatusColor(scanner.status) }]}>\n            <Icon name={getStatusIcon(scanner.status)} size={12} color={Colors.white} />\n            <Text style={styles.statusText}>{scanner.status.toUpperCase()}</Text>\n          </View>\n\n          <Switch\n            value={scanner.status === 'connected'}\n            onValueChange={() => toggleScannerStatus(scanner.id)}\n            trackColor={{ false: Colors.lightGray, true: Colors.primary }}\n            thumbColor={Colors.white}\n          />\n        </View>\n      </View>\n\n      <View style={styles.scannerActions}>\n        <TouchableOpacity\n          style={[\n            styles.actionButton,\n            scanner.status !== 'connected' && styles.actionButtonDisabled,\n          ]}\n          onPress={() => handleTestScanner(__scanner)}\n          disabled={scanner.status !== 'connected'}>\n          <Icon\n            name=\"qr-code-scanner\"\n            size={16}\n            color={scanner.status === 'connected' ? Colors.primary : Colors.mediumGray}\n          />\n          <Text\n            style={[\n              styles.actionButtonText,\n              scanner.status !== 'connected' && styles.actionButtonTextDisabled,\n            ]}>\n            Test Scan\n          </Text>\n        </TouchableOpacity>\n\n        <TouchableOpacity\n          style={styles.actionButton}\n          onPress={() => Alert.alert('Info', 'Scanner configuration would open here')}>\n          <Icon name=\"settings\" size={16} color={Colors.secondary} />\n          <Text style={styles.actionButtonText}>Configure</Text>\n        </TouchableOpacity>\n\n        <TouchableOpacity\n          style={[styles.actionButton, styles.removeButton]}\n          onPress={() => {\n            Alert.alert('Remove Scanner', `Remove ${scanner.name}?`, [\n              { text: 'Cancel', style: 'cancel' },\n              {\n                text: 'Remove',\n                style: 'destructive',\n                onPress: () => {\n                  setScanners(prev => prev.filter(s => s.id !== scanner.id));\n                },\n              },\n            ]);\n          }}>\n          <Icon name=\"delete\" size={16} color={Colors.danger} />\n          <Text style={[styles.actionButtonText, styles.removeButtonText]}>Remove</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n\n  return (\n    <View style={styles.container}>\n      {/* Header */}\n      <View style={styles.header}>\n        <TouchableOpacity onPress={() => navigation.goBack()} style={styles.backButton}>\n          <Icon name=\"arrow-back\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n        <Text style={styles.headerTitle}>Barcode Scanner</Text>\n        <TouchableOpacity\n          style={styles.addButton}\n          onPress={handleScanForDevices}\n          disabled={scanning}>\n          <Icon name={scanning ? 'hourglass-empty' : 'search'} size={24} color={Colors.white} />\n        </TouchableOpacity>\n      </View>\n\n      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n        {/* Quick Actions */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Quick Actions</Text>\n          <View style={styles.quickActions}>\n            <TouchableOpacity\n              style={[styles.quickActionButton, scanning && styles.quickActionButtonDisabled]}\n              onPress={handleScanForDevices}\n              disabled={scanning}>\n              <Icon\n                name={scanning ? 'hourglass-empty' : 'search'}\n                size={24}\n                color={scanning ? Colors.mediumGray : Colors.primary}\n              />\n              <Text style={[styles.quickActionText, scanning && styles.quickActionTextDisabled]}>\n                {scanning ? 'Scanning...' : 'Scan for Devices'}\n              </Text>\n            </TouchableOpacity>\n\n            <TouchableOpacity\n              style={styles.quickActionButton}\n              onPress={() => Alert.alert('Info', 'Manual scanner setup would open here')}>\n              <Icon name=\"add-circle-outline\" size={24} color={Colors.secondary} />\n              <Text style={styles.quickActionText}>Add Manually</Text>\n            </TouchableOpacity>\n\n            <TouchableOpacity\n              style={styles.quickActionButton}\n              onPress={() => {\n                const connectedScanners = scanners.filter(s => s.status === 'connected');\n                if (connectedScanners.length === 0) {\n                  Alert.alert('No Scanners', 'No connected scanners available for testing.');\n                } else {\n                  Alert.alert(\n                    'Test All',\n                    `Testing ${connectedScanners.length} connected scanner(__s)`,\n                  );\n                }\n              }}>\n              <Icon name=\"qr-code-scanner\" size={24} color={Colors.success} />\n              <Text style={styles.quickActionText}>Test All</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n\n        {/* Scanner Settings */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Scanner Settings</Text>\n          <View style={styles.settingsCard}>\n            <View style={styles.settingRow}>\n              <View style={styles.settingInfo}>\n                <Text style={styles.settingLabel}>Enable scanning</Text>\n                <Text style={styles.settingDescription}>\n                  Master switch for all barcode scanning\n                </Text>\n              </View>\n              <Switch\n                value={scanningEnabled}\n                onValueChange={setScanningEnabled}\n                trackColor={{ false: Colors.lightGray, true: Colors.primary }}\n                thumbColor={Colors.white}\n              />\n            </View>\n\n            <View style={styles.settingRow}>\n              <View style={styles.settingInfo}>\n                <Text style={styles.settingLabel}>Auto-enter after scan</Text>\n                <Text style={styles.settingDescription}>Automatically confirm barcode entry</Text>\n              </View>\n              <Switch\n                value={autoEnterEnabled && scanningEnabled}\n                onValueChange={setAutoEnterEnabled}\n                disabled={!scanningEnabled}\n                trackColor={{ false: Colors.lightGray, true: Colors.primary }}\n                thumbColor={Colors.white}\n              />\n            </View>\n\n            <View style={styles.settingRow}>\n              <View style={styles.settingInfo}>\n                <Text style={styles.settingLabel}>Sound feedback</Text>\n                <Text style={styles.settingDescription}>Play sound when barcode is scanned</Text>\n              </View>\n              <Switch\n                value={soundEnabled && scanningEnabled}\n                onValueChange={setSoundEnabled}\n                disabled={!scanningEnabled}\n                trackColor={{ false: Colors.lightGray, true: Colors.primary }}\n                thumbColor={Colors.white}\n              />\n            </View>\n\n            <View style={styles.settingRow}>\n              <View style={styles.settingInfo}>\n                <Text style={styles.settingLabel}>Vibration feedback</Text>\n                <Text style={styles.settingDescription}>\n                  Vibrate device when barcode is scanned\n                </Text>\n              </View>\n              <Switch\n                value={vibrationEnabled && scanningEnabled}\n                onValueChange={setVibrationEnabled}\n                disabled={!scanningEnabled}\n                trackColor={{ false: Colors.lightGray, true: Colors.primary }}\n                thumbColor={Colors.white}\n              />\n            </View>\n          </View>\n        </View>\n\n        {/* Advanced Settings */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Advanced Settings</Text>\n          <View style={styles.settingsCard}>\n            <View style={styles.inputRow}>\n              <Text style={styles.inputLabel}>Duplicate scan timeout (__seconds)</Text>\n              <TextInput\n                style={styles.textInput}\n                value={duplicateTimeout}\n                onChangeText={setDuplicateTimeout}\n                placeholder=\"3\"\n                keyboardType=\"numeric\"\n                maxLength={2}\n              />\n            </View>\n\n            <View style={styles.inputRow}>\n              <Text style={styles.inputLabel}>Scan prefix</Text>\n              <TextInput\n                style={styles.textInput}\n                value={scanPrefix}\n                onChangeText={setScanPrefix}\n                placeholder=\"Optional prefix\"\n                maxLength={10}\n              />\n            </View>\n\n            <View style={styles.inputRow}>\n              <Text style={styles.inputLabel}>Scan suffix</Text>\n              <TextInput\n                style={styles.textInput}\n                value={scanSuffix}\n                onChangeText={setScanSuffix}\n                placeholder=\"Optional suffix\"\n                maxLength={10}\n              />\n            </View>\n          </View>\n        </View>\n\n        {/* Supported Barcode Types */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Supported Barcode Types</Text>\n          <View style={styles.barcodeTypes}>\n            {Object.entries(__barcodeTypes).map(([type, enabled]) => (\n              <TouchableOpacity\n                key={type}\n                style={[styles.barcodeTypeButton, enabled && styles.barcodeTypeButtonActive]}\n                onPress={() => toggleBarcodeType(__type)}>\n                <Icon\n                  name={enabled ? 'check-box' : 'check-box-outline-blank'}\n                  size={20}\n                  color={enabled ? Colors.primary : Colors.mediumGray}\n                />\n                <Text style={[styles.barcodeTypeText, enabled && styles.barcodeTypeTextActive]}>\n                  {type}\n                </Text>\n              </TouchableOpacity>\n            ))}\n          </View>\n        </View>\n\n        {/* Connected Scanners */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Barcode Scanners ({scanners.length})</Text>\n          {scanners.map(scanner => (\n            <ScannerCard key={scanner.id} scanner={scanner} />\n          ))}\n        </View>\n\n        {/* Help Section */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Troubleshooting</Text>\n          <View style={styles.helpCard}>\n            <View style={styles.helpItem}>\n              <Icon name=\"help-outline\" size={20} color={Colors.secondary} />\n              <Text style={styles.helpText}>\n                For Bluetooth scanners, ensure Bluetooth is enabled and the scanner is in pairing\n                mode.\n              </Text>\n            </View>\n            <View style={styles.helpItem}>\n              <Icon name=\"warning\" size={20} color={Colors.warning} />\n              <Text style={styles.helpText}>\n                USB scanners require OTG (On-The-Go) support on your device.\n              </Text>\n            </View>\n            <View style={styles.helpItem}>\n              <Icon name=\"info-outline\" size={20} color={Colors.secondary} />\n              <Text style={styles.helpText}>\n                Camera scanning works best in good lighting conditions with clear barcodes.\n              </Text>\n            </View>\n          </View>\n        </View>\n      </ScrollView>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.primary,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    paddingTop: 48,\n  },\n  backButton: {\n    padding: 8,\n  },\n  headerTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.white,\n  },\n  addButton: {\n    padding: 8,\n  },\n  content: {\n    flex: 1,\n  },\n  section: {\n    backgroundColor: Colors.white,\n    marginVertical: 8,\n    paddingVertical: 16,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n    paddingHorizontal: 16,\n    marginBottom: 16,\n  },\n  quickActions: {\n    flexDirection: 'row',\n    paddingHorizontal: 16,\n    gap: 12,\n  },\n  quickActionButton: {\n    flex: 1,\n    alignItems: 'center',\n    paddingVertical: 16,\n    paddingHorizontal: 12,\n    backgroundColor: Colors.background,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  quickActionButtonDisabled: {\n    opacity: 0.5,\n  },\n  quickActionText: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.text,\n    marginTop: 8,\n    textAlign: 'center',\n  },\n  quickActionTextDisabled: {\n    color: Colors.mediumGray,\n  },\n  settingsCard: {\n    paddingHorizontal: 16,\n  },\n  settingRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.lightGray,\n  },\n  settingInfo: {\n    flex: 1,\n    marginRight: 16,\n  },\n  settingLabel: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  settingDescription: {\n    fontSize: 14,\n    color: Colors.lightText,\n  },\n  inputRow: {\n    paddingVertical: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.lightGray,\n  },\n  inputLabel: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.text,\n    marginBottom: 8,\n  },\n  textInput: {\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 8,\n    paddingHorizontal: 12,\n    paddingVertical: 8,\n    fontSize: 16,\n    color: Colors.text,\n    backgroundColor: Colors.white,\n  },\n  barcodeTypes: {\n    paddingHorizontal: 16,\n    gap: 12,\n  },\n  barcodeTypeButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingVertical: 12,\n    paddingHorizontal: 16,\n    backgroundColor: Colors.background,\n    borderRadius: 8,\n    gap: 12,\n  },\n  barcodeTypeButtonActive: {\n    backgroundColor: Colors.primary + '20',\n  },\n  barcodeTypeText: {\n    fontSize: 16,\n    color: Colors.text,\n  },\n  barcodeTypeTextActive: {\n    fontWeight: '500',\n    color: Colors.primary,\n  },\n  scannerCard: {\n    backgroundColor: Colors.background,\n    marginHorizontal: 16,\n    marginBottom: 12,\n    borderRadius: 12,\n    padding: 16,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  scannerHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 16,\n  },\n  scannerInfo: {\n    flex: 1,\n    marginRight: 16,\n  },\n  scannerTitleRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    marginBottom: 8,\n  },\n  scannerName: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  scannerDetails: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    marginBottom: 4,\n  },\n  scannerConnection: {\n    fontSize: 12,\n    color: Colors.lightText,\n    fontWeight: '500',\n  },\n  batteryLevel: {\n    fontSize: 12,\n    color: Colors.lightText,\n  },\n  scannerModel: {\n    fontSize: 14,\n    color: Colors.darkGray,\n    marginBottom: 4,\n  },\n  scannerSerial: {\n    fontSize: 12,\n    color: Colors.lightText,\n  },\n  scannerStatus: {\n    alignItems: 'flex-end',\n    gap: 8,\n  },\n  statusBadge: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 12,\n    gap: 4,\n  },\n  statusText: {\n    fontSize: 10,\n    fontWeight: '600',\n    color: Colors.white,\n  },\n  scannerActions: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    gap: 12,\n  },\n  actionButton: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 8,\n    paddingHorizontal: 12,\n    backgroundColor: Colors.white,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    gap: 6,\n  },\n  actionButtonDisabled: {\n    opacity: 0.5,\n  },\n  actionButtonText: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.text,\n  },\n  actionButtonTextDisabled: {\n    color: Colors.mediumGray,\n  },\n  removeButton: {\n    borderColor: Colors.danger,\n  },\n  removeButtonText: {\n    color: Colors.danger,\n  },\n  helpCard: {\n    paddingHorizontal: 16,\n  },\n  helpItem: {\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    paddingVertical: 12,\n    gap: 12,\n  },\n  helpText: {\n    flex: 1,\n    fontSize: 14,\n    color: Colors.lightText,\n    lineHeight: 20,\n  },\n});\n\nexport default BarcodeScannerScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/settings/hardware/CardReaderScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_cardTypes' is assigned a value but never used.","line":94,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":94,"endColumn":20},{"ruleId":"react/no-unstable-nested-components","severity":1,"message":"Do not define components during render. React will see a new component type on every render and destroy the entire subtree’s DOM nodes and state (https://reactjs.org/docs/reconciliation.html#elements-of-different-types). Instead, move this component definition out of the parent component “CardReaderScreen” and pass data as props.","line":230,"column":26,"nodeType":"ArrowFunctionExpression","endLine":320,"endColumn":4}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  ScrollView,\n  Alert,\n  Switch,\n  TextInput,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation } from '@react-navigation/native';\n\n// Clover POS Color Scheme\nconst Colors = {\n  primary: '#00A651',\n  secondary: '#0066CC',\n  success: '#00A651',\n  warning: '#FF6B35',\n  danger: '#E74C3C',\n  background: '#F5F5F5',\n  white: '#FFFFFF',\n  lightGray: '#E5E5E5',\n  mediumGray: '#999999',\n  darkGray: '#666666',\n  text: '#333333',\n  lightText: '#666666',\n  border: '#DDDDDD',\n};\n\ninterface CardReader {\n  id: string;\n  name: string;\n  type: 'chip_pin' | 'contactless' | 'magnetic_stripe' | 'mobile';\n  connection: 'usb' | 'bluetooth' | 'wifi' | 'built-in';\n  status: 'connected' | 'disconnected' | 'error' | 'processing';\n  model?: string;\n  serialNumber?: string;\n  firmwareVersion?: string;\n  lastUpdate?: Date;\n}\n\nconst CardReaderScreen: React.FC = () => {\n  const navigation = useNavigation();\n\n  const [cardReaders, setCardReaders] = useState<CardReader[]>([\n    {\n      id: 'reader1',\n      name: 'Main Card Reader',\n      type: 'chip_pin',\n      connection: 'usb',\n      status: 'connected',\n      model: 'Clover Mini',\n      serialNumber: 'CLV001234567',\n      firmwareVersion: '2.4.1',\n      lastUpdate: new Date(Date.now() - 86400000 * 7), // 7 days ago\n    },\n    {\n      id: 'reader2',\n      name: 'Contactless Reader',\n      type: 'contactless',\n      connection: 'bluetooth',\n      status: 'connected',\n      model: 'Square Reader',\n      serialNumber: 'SQR987654321',\n      firmwareVersion: '1.8.5',\n      lastUpdate: new Date(Date.now() - 86400000 * 2), // 2 days ago\n    },\n    {\n      id: 'reader3',\n      name: 'Mobile Reader',\n      type: 'mobile',\n      connection: 'built-in',\n      status: 'connected',\n      model: 'Built-in NFC',\n      firmwareVersion: 'Device OS',\n    },\n  ]);\n\n  // Card reader settings\n  const [cardPaymentsEnabled, setCardPaymentsEnabled] = useState(__true);\n  const [contactlessEnabled, setContactlessEnabled] = useState(__true);\n  const [chipEnabled, setChipEnabled] = useState(__true);\n  const [magneticStripeEnabled, setMagneticStripeEnabled] = useState(__true);\n  const [pinRequired, setPinRequired] = useState(__true);\n  const [signatureRequired, setSignatureRequired] = useState(__false);\n  const [contactlessLimit, setContactlessLimit] = useState('45');\n  const [tipPromptEnabled, setTipPromptEnabled] = useState(__true);\n  const [receiptPromptEnabled, setReceiptPromptEnabled] = useState(__true);\n  const [scanning, setScanning] = useState(__false);\n\n  // Supported card types\n  const [_cardTypes, setCardTypes] = useState({\n    Visa: _true,\n    Mastercard: _true,\n    'American Express': _true,\n    Discover: _true,\n    'Diners Club': _false,\n    JCB: _false,\n    'Union Pay': _false,\n    Maestro: _true,\n  });\n\n  const getStatusColor = (_status: _string) => {\n    switch (__status) {\n      case 'connected':\n        return Colors.success;\n      case 'disconnected':\n        return Colors.mediumGray;\n      case 'error':\n        return Colors.danger;\n      case 'processing':\n        return Colors.warning;\n      default:\n        return Colors.warning;\n    }\n  };\n\n  const getStatusIcon = (_status: _string) => {\n    switch (__status) {\n      case 'connected':\n        return 'check-circle';\n      case 'disconnected':\n        return 'radio-button-unchecked';\n      case 'error':\n        return 'error';\n      case 'processing':\n        return 'sync';\n      default:\n        return 'help';\n    }\n  };\n\n  const getTypeIcon = (_type: _string) => {\n    switch (__type) {\n      case 'chip_pin':\n        return 'credit-card';\n      case 'contactless':\n        return 'contactless-payment';\n      case 'magnetic_stripe':\n        return 'swipe';\n      case 'mobile':\n        return 'nfc';\n      default:\n        return 'payment';\n    }\n  };\n\n  const getConnectionIcon = (_connection: _string) => {\n    switch (__connection) {\n      case 'bluetooth':\n        return 'bluetooth';\n      case 'usb':\n        return 'usb';\n      case 'wifi':\n        return 'wifi';\n      case 'built-in':\n        return 'phone-android';\n      default:\n        return 'device-unknown';\n    }\n  };\n\n  const handleScanForReaders = async () => {\n    setScanning(__true);\n\n    // Simulate scanning\n    setTimeout(() => {\n      setScanning(__false);\n      Alert.alert(\n        'Scan Complete',\n        'No new card readers found. Ensure readers are powered on and in pairing mode.',\n        [{ text: 'OK' }],\n      );\n    }, 3000);\n  };\n\n  const handleTestReader = (reader: _CardReader) => {\n    if (reader.status !== 'connected') {\n      Alert.alert('Error', 'Card reader must be connected to test.');\n      return;\n    }\n\n    // Simulate test transaction\n    setCardReaders(prev =>\n      prev.map(r => (r.id === reader.id ? { ...r, status: 'processing' } : _r)),\n    );\n\n    setTimeout(() => {\n      setCardReaders(prev =>\n        prev.map(r => (r.id === reader.id ? { ...r, status: 'connected' } : _r)),\n      );\n      Alert.alert('Success', 'Test transaction completed successfully!');\n    }, 3000);\n  };\n\n  const handleUpdateFirmware = (reader: _CardReader) => {\n    Alert.alert('Update Firmware', `Check for firmware updates for ${reader.name}?`, [\n      { text: 'Cancel', style: 'cancel' },\n      {\n        text: 'Check Updates',\n        onPress: () => {\n          Alert.alert('Info', 'Firmware is up to date.');\n        },\n      },\n    ]);\n  };\n\n  const toggleReaderStatus = (readerId: _string) => {\n    setCardReaders(prev =>\n      prev.map(reader =>\n        reader.id === readerId\n          ? {\n              ...reader,\n              status: reader.status === 'connected' ? 'disconnected' : 'connected',\n            }\n          : _reader,\n      ),\n    );\n  };\n\n  const toggleCardType = (type: _string) => {\n    setCardTypes(prev => ({\n      ...prev,\n      [type]: !prev[type as keyof typeof prev],\n    }));\n  };\n\n  const CardReaderCard = ({ reader }: { reader: CardReader }) => (\n    <View style={styles.readerCard}>\n      <View style={styles.readerHeader}>\n        <View style={styles.readerInfo}>\n          <View style={styles.readerTitleRow}>\n            <Icon name={getTypeIcon(reader.type)} size={20} color={Colors.primary} />\n            <Text style={styles.readerName}>{reader.name}</Text>\n          </View>\n          <View style={styles.readerDetails}>\n            <Icon name={getConnectionIcon(reader.connection)} size={16} color={Colors.lightText} />\n            <Text style={styles.readerConnection}>{reader.connection.toUpperCase()}</Text>\n          </View>\n          {reader.model && <Text style={styles.readerModel}>{reader.model}</Text>}\n          {reader.serialNumber && (\n            <Text style={styles.readerSerial}>S/N: {reader.serialNumber}</Text>\n          )}\n          {reader.firmwareVersion && (\n            <Text style={styles.readerFirmware}>FW: {reader.firmwareVersion}</Text>\n          )}\n          {reader.lastUpdate && (\n            <Text style={styles.readerUpdate}>\n              Updated: {reader.lastUpdate.toLocaleDateString()}\n            </Text>\n          )}\n        </View>\n\n        <View style={styles.readerStatus}>\n          <View style={[styles.statusBadge, { backgroundColor: getStatusColor(reader.status) }]}>\n            <Icon name={getStatusIcon(reader.status)} size={12} color={Colors.white} />\n            <Text style={styles.statusText}>{reader.status.toUpperCase()}</Text>\n          </View>\n\n          <Switch\n            value={reader.status === 'connected'}\n            onValueChange={() => toggleReaderStatus(reader.id)}\n            disabled={reader.status === 'processing'}\n            trackColor={{ false: Colors.lightGray, true: Colors.primary }}\n            thumbColor={Colors.white}\n          />\n        </View>\n      </View>\n\n      <View style={styles.readerActions}>\n        <TouchableOpacity\n          style={[\n            styles.actionButton,\n            reader.status !== 'connected' && styles.actionButtonDisabled,\n          ]}\n          onPress={() => handleTestReader(__reader)}\n          disabled={reader.status !== 'connected'}>\n          <Icon\n            name=\"payment\"\n            size={16}\n            color={reader.status === 'connected' ? Colors.primary : Colors.mediumGray}\n          />\n          <Text\n            style={[\n              styles.actionButtonText,\n              reader.status !== 'connected' && styles.actionButtonTextDisabled,\n            ]}>\n            {reader.status === 'processing' ? 'Testing...' : 'Test Payment'}\n          </Text>\n        </TouchableOpacity>\n\n        <TouchableOpacity\n          style={styles.actionButton}\n          onPress={() => handleUpdateFirmware(__reader)}>\n          <Icon name=\"system-update\" size={16} color={Colors.secondary} />\n          <Text style={styles.actionButtonText}>Update</Text>\n        </TouchableOpacity>\n\n        <TouchableOpacity\n          style={[styles.actionButton, styles.removeButton]}\n          onPress={() => {\n            Alert.alert('Remove Reader', `Remove ${reader.name}?`, [\n              { text: 'Cancel', style: 'cancel' },\n              {\n                text: 'Remove',\n                style: 'destructive',\n                onPress: () => {\n                  setCardReaders(prev => prev.filter(r => r.id !== reader.id));\n                },\n              },\n            ]);\n          }}>\n          <Icon name=\"delete\" size={16} color={Colors.danger} />\n          <Text style={[styles.actionButtonText, styles.removeButtonText]}>Remove</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n\n  return (\n    <View style={styles.container}>\n      {/* Header */}\n      <View style={styles.header}>\n        <TouchableOpacity onPress={() => navigation.goBack()} style={styles.backButton}>\n          <Icon name=\"arrow-back\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n        <Text style={styles.headerTitle}>Card Reader</Text>\n        <TouchableOpacity\n          style={styles.addButton}\n          onPress={handleScanForReaders}\n          disabled={scanning}>\n          <Icon name={scanning ? 'hourglass-empty' : 'search'} size={24} color={Colors.white} />\n        </TouchableOpacity>\n      </View>\n\n      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n        {/* Quick Actions */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Quick Actions</Text>\n          <View style={styles.quickActions}>\n            <TouchableOpacity\n              style={[styles.quickActionButton, scanning && styles.quickActionButtonDisabled]}\n              onPress={handleScanForReaders}\n              disabled={scanning}>\n              <Icon\n                name={scanning ? 'hourglass-empty' : 'search'}\n                size={24}\n                color={scanning ? Colors.mediumGray : Colors.primary}\n              />\n              <Text style={[styles.quickActionText, scanning && styles.quickActionTextDisabled]}>\n                {scanning ? 'Scanning...' : 'Scan for Readers'}\n              </Text>\n            </TouchableOpacity>\n\n            <TouchableOpacity\n              style={styles.quickActionButton}\n              onPress={() => Alert.alert('Info', 'Manual reader setup would open here')}>\n              <Icon name=\"add-circle-outline\" size={24} color={Colors.secondary} />\n              <Text style={styles.quickActionText}>Add Manually</Text>\n            </TouchableOpacity>\n\n            <TouchableOpacity\n              style={styles.quickActionButton}\n              onPress={() => {\n                const connectedReaders = cardReaders.filter(r => r.status === 'connected');\n                connectedReaders.forEach(_reader => handleTestReader(__reader));\n              }}>\n              <Icon name=\"payment\" size={24} color={Colors.success} />\n              <Text style={styles.quickActionText}>Test All</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n\n        {/* Payment Settings */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Payment Settings</Text>\n          <View style={styles.settingsCard}>\n            <View style={styles.settingRow}>\n              <View style={styles.settingInfo}>\n                <Text style={styles.settingLabel}>Enable card payments</Text>\n                <Text style={styles.settingDescription}>\n                  Master switch for all card payment processing\n                </Text>\n              </View>\n              <Switch\n                value={cardPaymentsEnabled}\n                onValueChange={setCardPaymentsEnabled}\n                trackColor={{ false: Colors.lightGray, true: Colors.primary }}\n                thumbColor={Colors.white}\n              />\n            </View>\n\n            <View style={styles.settingRow}>\n              <View style={styles.settingInfo}>\n                <Text style={styles.settingLabel}>Contactless payments</Text>\n                <Text style={styles.settingDescription}>Accept tap-to-pay and mobile wallets</Text>\n              </View>\n              <Switch\n                value={contactlessEnabled && cardPaymentsEnabled}\n                onValueChange={setContactlessEnabled}\n                disabled={!cardPaymentsEnabled}\n                trackColor={{ false: Colors.lightGray, true: Colors.primary }}\n                thumbColor={Colors.white}\n              />\n            </View>\n\n            <View style={styles.settingRow}>\n              <View style={styles.settingInfo}>\n                <Text style={styles.settingLabel}>Chip and PIN</Text>\n                <Text style={styles.settingDescription}>Accept EMV chip card payments</Text>\n              </View>\n              <Switch\n                value={chipEnabled && cardPaymentsEnabled}\n                onValueChange={setChipEnabled}\n                disabled={!cardPaymentsEnabled}\n                trackColor={{ false: Colors.lightGray, true: Colors.primary }}\n                thumbColor={Colors.white}\n              />\n            </View>\n\n            <View style={styles.settingRow}>\n              <View style={styles.settingInfo}>\n                <Text style={styles.settingLabel}>Magnetic stripe</Text>\n                <Text style={styles.settingDescription}>Accept swipe payments (fallback only)</Text>\n              </View>\n              <Switch\n                value={magneticStripeEnabled && cardPaymentsEnabled}\n                onValueChange={setMagneticStripeEnabled}\n                disabled={!cardPaymentsEnabled}\n                trackColor={{ false: Colors.lightGray, true: Colors.primary }}\n                thumbColor={Colors.white}\n              />\n            </View>\n          </View>\n        </View>\n\n        {/* Security Settings */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Security Settings</Text>\n          <View style={styles.settingsCard}>\n            <View style={styles.settingRow}>\n              <View style={styles.settingInfo}>\n                <Text style={styles.settingLabel}>Require PIN</Text>\n                <Text style={styles.settingDescription}>\n                  Always require PIN for chip card transactions\n                </Text>\n              </View>\n              <Switch\n                value={pinRequired}\n                onValueChange={setPinRequired}\n                trackColor={{ false: Colors.lightGray, true: Colors.primary }}\n                thumbColor={Colors.white}\n              />\n            </View>\n\n            <View style={styles.settingRow}>\n              <View style={styles.settingInfo}>\n                <Text style={styles.settingLabel}>Require signature</Text>\n                <Text style={styles.settingDescription}>\n                  Require customer signature for transactions\n                </Text>\n              </View>\n              <Switch\n                value={signatureRequired}\n                onValueChange={setSignatureRequired}\n                trackColor={{ false: Colors.lightGray, true: Colors.primary }}\n                thumbColor={Colors.white}\n              />\n            </View>\n\n            <View style={styles.inputRow}>\n              <Text style={styles.inputLabel}>Contactless limit (£)</Text>\n              <TextInput\n                style={styles.textInput}\n                value={contactlessLimit}\n                onChangeText={setContactlessLimit}\n                placeholder=\"45\"\n                keyboardType=\"numeric\"\n                maxLength={5}\n              />\n            </View>\n          </View>\n        </View>\n\n        {/* Customer Experience */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Customer Experience</Text>\n          <View style={styles.settingsCard}>\n            <View style={styles.settingRow}>\n              <View style={styles.settingInfo}>\n                <Text style={styles.settingLabel}>Tip prompt</Text>\n                <Text style={styles.settingDescription}>Show tip selection on card reader</Text>\n              </View>\n              <Switch\n                value={tipPromptEnabled}\n                onValueChange={setTipPromptEnabled}\n                trackColor={{ false: Colors.lightGray, true: Colors.primary }}\n                thumbColor={Colors.white}\n              />\n            </View>\n\n            <View style={styles.settingRow}>\n              <View style={styles.settingInfo}>\n                <Text style={styles.settingLabel}>Receipt prompt</Text>\n                <Text style={styles.settingDescription}>Ask customer for receipt preference</Text>\n              </View>\n              <Switch\n                value={receiptPromptEnabled}\n                onValueChange={setReceiptPromptEnabled}\n                trackColor={{ false: Colors.lightGray, true: Colors.primary }}\n                thumbColor={Colors.white}\n              />\n            </View>\n          </View>\n        </View>\n\n        {/* Supported Card Types */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Supported Card Types</Text>\n          <View style={styles.cardTypes}>\n            {Object.entries(__cardTypes).map(([type, enabled]) => (\n              <TouchableOpacity\n                key={type}\n                style={[styles.cardTypeButton, enabled && styles.cardTypeButtonActive]}\n                onPress={() => toggleCardType(__type)}>\n                <Icon\n                  name={enabled ? 'check-box' : 'check-box-outline-blank'}\n                  size={20}\n                  color={enabled ? Colors.primary : Colors.mediumGray}\n                />\n                <Text style={[styles.cardTypeText, enabled && styles.cardTypeTextActive]}>\n                  {type}\n                </Text>\n              </TouchableOpacity>\n            ))}\n          </View>\n        </View>\n\n        {/* Connected Card Readers */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Card Readers ({cardReaders.length})</Text>\n          {cardReaders.map(reader => (\n            <CardReaderCard key={reader.id} reader={reader} />\n          ))}\n        </View>\n\n        {/* Help Section */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Troubleshooting</Text>\n          <View style={styles.helpCard}>\n            <View style={styles.helpItem}>\n              <Icon name=\"help-outline\" size={20} color={Colors.secondary} />\n              <Text style={styles.helpText}>\n                Ensure card readers are certified for your payment processor and region.\n              </Text>\n            </View>\n            <View style={styles.helpItem}>\n              <Icon name=\"security\" size={20} color={Colors.success} />\n              <Text style={styles.helpText}>\n                All card data is encrypted and processed securely according to PCI DSS standards.\n              </Text>\n            </View>\n            <View style={styles.helpItem}>\n              <Icon name=\"warning\" size={20} color={Colors.warning} />\n              <Text style={styles.helpText}>\n                Regular firmware updates are important for security and compliance.\n              </Text>\n            </View>\n          </View>\n        </View>\n      </ScrollView>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.primary,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    paddingTop: 48,\n  },\n  backButton: {\n    padding: 8,\n  },\n  headerTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.white,\n  },\n  addButton: {\n    padding: 8,\n  },\n  content: {\n    flex: 1,\n  },\n  section: {\n    backgroundColor: Colors.white,\n    marginVertical: 8,\n    paddingVertical: 16,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n    paddingHorizontal: 16,\n    marginBottom: 16,\n  },\n  quickActions: {\n    flexDirection: 'row',\n    paddingHorizontal: 16,\n    gap: 12,\n  },\n  quickActionButton: {\n    flex: 1,\n    alignItems: 'center',\n    paddingVertical: 16,\n    paddingHorizontal: 12,\n    backgroundColor: Colors.background,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  quickActionButtonDisabled: {\n    opacity: 0.5,\n  },\n  quickActionText: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.text,\n    marginTop: 8,\n    textAlign: 'center',\n  },\n  quickActionTextDisabled: {\n    color: Colors.mediumGray,\n  },\n  settingsCard: {\n    paddingHorizontal: 16,\n  },\n  settingRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.lightGray,\n  },\n  settingInfo: {\n    flex: 1,\n    marginRight: 16,\n  },\n  settingLabel: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  settingDescription: {\n    fontSize: 14,\n    color: Colors.lightText,\n  },\n  inputRow: {\n    paddingVertical: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.lightGray,\n  },\n  inputLabel: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.text,\n    marginBottom: 8,\n  },\n  textInput: {\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 8,\n    paddingHorizontal: 12,\n    paddingVertical: 8,\n    fontSize: 16,\n    color: Colors.text,\n    backgroundColor: Colors.white,\n  },\n  cardTypes: {\n    paddingHorizontal: 16,\n    gap: 12,\n  },\n  cardTypeButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingVertical: 12,\n    paddingHorizontal: 16,\n    backgroundColor: Colors.background,\n    borderRadius: 8,\n    gap: 12,\n  },\n  cardTypeButtonActive: {\n    backgroundColor: Colors.primary + '20',\n  },\n  cardTypeText: {\n    fontSize: 16,\n    color: Colors.text,\n  },\n  cardTypeTextActive: {\n    fontWeight: '500',\n    color: Colors.primary,\n  },\n  readerCard: {\n    backgroundColor: Colors.background,\n    marginHorizontal: 16,\n    marginBottom: 12,\n    borderRadius: 12,\n    padding: 16,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  readerHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 16,\n  },\n  readerInfo: {\n    flex: 1,\n    marginRight: 16,\n  },\n  readerTitleRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    marginBottom: 8,\n  },\n  readerName: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  readerDetails: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    marginBottom: 4,\n  },\n  readerConnection: {\n    fontSize: 12,\n    color: Colors.lightText,\n    fontWeight: '500',\n  },\n  readerModel: {\n    fontSize: 14,\n    color: Colors.darkGray,\n    marginBottom: 2,\n  },\n  readerSerial: {\n    fontSize: 12,\n    color: Colors.lightText,\n    marginBottom: 2,\n  },\n  readerFirmware: {\n    fontSize: 12,\n    color: Colors.lightText,\n    marginBottom: 2,\n  },\n  readerUpdate: {\n    fontSize: 12,\n    color: Colors.lightText,\n  },\n  readerStatus: {\n    alignItems: 'flex-end',\n    gap: 8,\n  },\n  statusBadge: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 12,\n    gap: 4,\n  },\n  statusText: {\n    fontSize: 10,\n    fontWeight: '600',\n    color: Colors.white,\n  },\n  readerActions: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    gap: 12,\n  },\n  actionButton: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 8,\n    paddingHorizontal: 12,\n    backgroundColor: Colors.white,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    gap: 6,\n  },\n  actionButtonDisabled: {\n    opacity: 0.5,\n  },\n  actionButtonText: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.text,\n  },\n  actionButtonTextDisabled: {\n    color: Colors.mediumGray,\n  },\n  removeButton: {\n    borderColor: Colors.danger,\n  },\n  removeButtonText: {\n    color: Colors.danger,\n  },\n  helpCard: {\n    paddingHorizontal: 16,\n  },\n  helpItem: {\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    paddingVertical: 12,\n    gap: 12,\n  },\n  helpText: {\n    flex: 1,\n    fontSize: 14,\n    color: Colors.lightText,\n    lineHeight: 20,\n  },\n});\n\nexport default CardReaderScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/settings/hardware/CashDrawerScreen.tsx","messages":[{"ruleId":"react/no-unstable-nested-components","severity":1,"message":"Do not define components during render. React will see a new component type on every render and destroy the entire subtree’s DOM nodes and state (https://reactjs.org/docs/reconciliation.html#elements-of-different-types). Instead, move this component definition out of the parent component “CashDrawerScreen” and pass data as props.","line":173,"column":26,"nodeType":"ArrowFunctionExpression","endLine":253,"endColumn":4},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":415,"column":30,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[13924,14040],"text":"\n                If drawer won&apos;t open, check that it's properly connected to the printer or USB port.\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[13924,14040],"text":"\n                If drawer won&lsquo;t open, check that it's properly connected to the printer or USB port.\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[13924,14040],"text":"\n                If drawer won&#39;t open, check that it's properly connected to the printer or USB port.\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[13924,14040],"text":"\n                If drawer won&rsquo;t open, check that it's properly connected to the printer or USB port.\n              "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":415,"column":52,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[13924,14040],"text":"\n                If drawer won't open, check that it&apos;s properly connected to the printer or USB port.\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[13924,14040],"text":"\n                If drawer won't open, check that it&lsquo;s properly connected to the printer or USB port.\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[13924,14040],"text":"\n                If drawer won't open, check that it&#39;s properly connected to the printer or USB port.\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[13924,14040],"text":"\n                If drawer won't open, check that it&rsquo;s properly connected to the printer or USB port.\n              "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":427,"column":67,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[14533,14630],"text":"\n                Most cash drawers work through the receipt printer&apos;s kicker port.\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[14533,14630],"text":"\n                Most cash drawers work through the receipt printer&lsquo;s kicker port.\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[14533,14630],"text":"\n                Most cash drawers work through the receipt printer&#39;s kicker port.\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[14533,14630],"text":"\n                Most cash drawers work through the receipt printer&rsquo;s kicker port.\n              "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  ScrollView,\n  Alert,\n  Switch,\n  TextInput,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation } from '@react-navigation/native';\n\n// Clover POS Color Scheme\nconst Colors = {\n  primary: '#00A651',\n  secondary: '#0066CC',\n  success: '#00A651',\n  warning: '#FF6B35',\n  danger: '#E74C3C',\n  background: '#F5F5F5',\n  white: '#FFFFFF',\n  lightGray: '#E5E5E5',\n  mediumGray: '#999999',\n  darkGray: '#666666',\n  text: '#333333',\n  lightText: '#666666',\n  border: '#DDDDDD',\n};\n\ninterface CashDrawer {\n  id: string;\n  name: string;\n  connection: 'printer' | 'usb' | 'network';\n  status: 'connected' | 'disconnected' | 'error';\n  printerName?: string;\n  model?: string;\n  location: string;\n}\n\nconst CashDrawerScreen: React.FC = () => {\n  const navigation = useNavigation();\n\n  const [cashDrawers, setCashDrawers] = useState<CashDrawer[]>([\n    {\n      id: 'drawer1',\n      name: 'Main Cash Drawer',\n      connection: 'printer',\n      status: 'connected',\n      printerName: 'Receipt Printer - Counter',\n      model: 'APG Vasario 1616',\n      location: 'Front Counter',\n    },\n    {\n      id: 'drawer2',\n      name: 'Mobile Cash Drawer',\n      connection: 'usb',\n      status: 'disconnected',\n      model: 'Star mPOP',\n      location: 'Mobile Station',\n    },\n  ]);\n\n  // Cash drawer settings\n  const [autoOpen, setAutoOpen] = useState(__true);\n  const [openOnPayment, setOpenOnPayment] = useState(__true);\n  const [openOnRefund, setOpenOnRefund] = useState(__false);\n  const [manualOpenPin, setManualOpenPin] = useState('1234');\n  const [alertOnOpen, setAlertOnOpen] = useState(__true);\n  const [kickerPulseWidth, setKickerPulseWidth] = useState('50');\n  const [autoCloseDelay, setAutoCloseDelay] = useState('30');\n\n  const getStatusColor = (_status: _string) => {\n    switch (__status) {\n      case 'connected':\n        return Colors.success;\n      case 'disconnected':\n        return Colors.mediumGray;\n      case 'error':\n        return Colors.danger;\n      default:\n        return Colors.warning;\n    }\n  };\n\n  const getStatusIcon = (_status: _string) => {\n    switch (__status) {\n      case 'connected':\n        return 'check-circle';\n      case 'disconnected':\n        return 'radio-button-unchecked';\n      case 'error':\n        return 'error';\n      default:\n        return 'help';\n    }\n  };\n\n  const getConnectionIcon = (_connection: _string) => {\n    switch (__connection) {\n      case 'printer':\n        return 'print';\n      case 'usb':\n        return 'usb';\n      case 'network':\n        return 'lan';\n      default:\n        return 'device-unknown';\n    }\n  };\n\n  const handleTestDrawer = (drawer: _CashDrawer) => {\n    if (drawer.status !== 'connected') {\n      Alert.alert('Error', 'Cash drawer must be connected to test.');\n      return;\n    }\n\n    Alert.alert('Test Cash Drawer', `Open ${drawer.name} for testing?`, [\n      { text: 'Cancel', style: 'cancel' },\n      {\n        text: 'Open Drawer',\n        onPress: () => {\n          Alert.alert('Success', 'Cash drawer opened successfully!');\n        },\n      },\n    ]);\n  };\n\n  const handleManualOpen = () => {\n    Alert.alert('Manual Open', 'Enter manager PIN to manually open cash drawer:', [\n      { text: 'Cancel', style: 'cancel' },\n      {\n        text: 'Open',\n        onPress: () => {\n          // In real app, would verify PIN\n          Alert.alert('Success', 'Cash drawer opened manually');\n        },\n      },\n    ]);\n  };\n\n  const handleEmergencyOpen = () => {\n    Alert.alert(\n      'Emergency Open',\n      'This will open all connected cash drawers immediately. Continue?',\n      [\n        { text: 'Cancel', style: 'cancel' },\n        {\n          text: 'Emergency Open',\n          style: 'destructive',\n          onPress: () => {\n            Alert.alert('Success', 'All cash drawers opened in emergency mode');\n          },\n        },\n      ],\n    );\n  };\n\n  const toggleDrawerStatus = (drawerId: _string) => {\n    setCashDrawers(prev =>\n      prev.map(drawer =>\n        drawer.id === drawerId\n          ? {\n              ...drawer,\n              status: drawer.status === 'connected' ? 'disconnected' : 'connected',\n            }\n          : _drawer,\n      ),\n    );\n  };\n\n  const CashDrawerCard = ({ drawer }: { drawer: CashDrawer }) => (\n    <View style={styles.drawerCard}>\n      <View style={styles.drawerHeader}>\n        <View style={styles.drawerInfo}>\n          <Text style={styles.drawerName}>{drawer.name}</Text>\n          <View style={styles.drawerDetails}>\n            <Icon name={getConnectionIcon(drawer.connection)} size={16} color={Colors.lightText} />\n            <Text style={styles.drawerConnection}>\n              {drawer.connection === 'printer'\n                ? `Via ${drawer.printerName}`\n                : drawer.connection.toUpperCase()}\n            </Text>\n          </View>\n          {drawer.model && <Text style={styles.drawerModel}>{drawer.model}</Text>}\n          <Text style={styles.drawerLocation}>📍 {drawer.location}</Text>\n        </View>\n\n        <View style={styles.drawerStatus}>\n          <View style={[styles.statusBadge, { backgroundColor: getStatusColor(drawer.status) }]}>\n            <Icon name={getStatusIcon(drawer.status)} size={12} color={Colors.white} />\n            <Text style={styles.statusText}>{drawer.status.toUpperCase()}</Text>\n          </View>\n\n          <Switch\n            value={drawer.status === 'connected'}\n            onValueChange={() => toggleDrawerStatus(drawer.id)}\n            trackColor={{ false: Colors.lightGray, true: Colors.primary }}\n            thumbColor={Colors.white}\n          />\n        </View>\n      </View>\n\n      <View style={styles.drawerActions}>\n        <TouchableOpacity\n          style={[\n            styles.actionButton,\n            drawer.status !== 'connected' && styles.actionButtonDisabled,\n          ]}\n          onPress={() => handleTestDrawer(__drawer)}\n          disabled={drawer.status !== 'connected'}>\n          <Icon\n            name=\"input\"\n            size={16}\n            color={drawer.status === 'connected' ? Colors.primary : Colors.mediumGray}\n          />\n          <Text\n            style={[\n              styles.actionButtonText,\n              drawer.status !== 'connected' && styles.actionButtonTextDisabled,\n            ]}>\n            Test Open\n          </Text>\n        </TouchableOpacity>\n\n        <TouchableOpacity\n          style={styles.actionButton}\n          onPress={() => Alert.alert('Info', 'Drawer configuration would open here')}>\n          <Icon name=\"settings\" size={16} color={Colors.secondary} />\n          <Text style={styles.actionButtonText}>Configure</Text>\n        </TouchableOpacity>\n\n        <TouchableOpacity\n          style={[styles.actionButton, styles.removeButton]}\n          onPress={() => {\n            Alert.alert('Remove Drawer', `Remove ${drawer.name}?`, [\n              { text: 'Cancel', style: 'cancel' },\n              {\n                text: 'Remove',\n                style: 'destructive',\n                onPress: () => {\n                  setCashDrawers(prev => prev.filter(d => d.id !== drawer.id));\n                },\n              },\n            ]);\n          }}>\n          <Icon name=\"delete\" size={16} color={Colors.danger} />\n          <Text style={[styles.actionButtonText, styles.removeButtonText]}>Remove</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n\n  return (\n    <View style={styles.container}>\n      {/* Header */}\n      <View style={styles.header}>\n        <TouchableOpacity onPress={() => navigation.goBack()} style={styles.backButton}>\n          <Icon name=\"arrow-back\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n        <Text style={styles.headerTitle}>Cash Drawer</Text>\n        <TouchableOpacity\n          style={styles.addButton}\n          onPress={() => Alert.alert('Info', 'Add cash drawer functionality coming soon')}>\n          <Icon name=\"add\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n      </View>\n\n      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n        {/* Emergency Controls */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Emergency Controls</Text>\n          <View style={styles.emergencyControls}>\n            <TouchableOpacity style={styles.emergencyButton} onPress={handleEmergencyOpen}>\n              <Icon name=\"warning\" size={24} color={Colors.danger} />\n              <Text style={styles.emergencyButtonText}>Emergency Open</Text>\n              <Text style={styles.emergencyButtonSubtext}>Opens all drawers</Text>\n            </TouchableOpacity>\n\n            <TouchableOpacity style={styles.manualButton} onPress={handleManualOpen}>\n              <Icon name=\"input\" size={24} color={Colors.warning} />\n              <Text style={styles.manualButtonText}>Manual Open</Text>\n              <Text style={styles.manualButtonSubtext}>Requires PIN</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n\n        {/* Cash Drawer Settings */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Drawer Settings</Text>\n          <View style={styles.settingsCard}>\n            <View style={styles.settingRow}>\n              <View style={styles.settingInfo}>\n                <Text style={styles.settingLabel}>Auto-open on payment</Text>\n                <Text style={styles.settingDescription}>\n                  Automatically open drawer when payment is completed\n                </Text>\n              </View>\n              <Switch\n                value={autoOpen && openOnPayment}\n                onValueChange={setOpenOnPayment}\n                disabled={!autoOpen}\n                trackColor={{ false: Colors.lightGray, true: Colors.primary }}\n                thumbColor={Colors.white}\n              />\n            </View>\n\n            <View style={styles.settingRow}>\n              <View style={styles.settingInfo}>\n                <Text style={styles.settingLabel}>Open on refunds</Text>\n                <Text style={styles.settingDescription}>\n                  Open drawer when processing cash refunds\n                </Text>\n              </View>\n              <Switch\n                value={autoOpen && openOnRefund}\n                onValueChange={setOpenOnRefund}\n                disabled={!autoOpen}\n                trackColor={{ false: Colors.lightGray, true: Colors.primary }}\n                thumbColor={Colors.white}\n              />\n            </View>\n\n            <View style={styles.settingRow}>\n              <View style={styles.settingInfo}>\n                <Text style={styles.settingLabel}>Alert on manual open</Text>\n                <Text style={styles.settingDescription}>\n                  Play sound when drawer is opened manually\n                </Text>\n              </View>\n              <Switch\n                value={alertOnOpen}\n                onValueChange={setAlertOnOpen}\n                trackColor={{ false: Colors.lightGray, true: Colors.primary }}\n                thumbColor={Colors.white}\n              />\n            </View>\n\n            <View style={styles.settingRow}>\n              <View style={styles.settingInfo}>\n                <Text style={styles.settingLabel}>Enable auto-open</Text>\n                <Text style={styles.settingDescription}>\n                  Master switch for all automatic drawer opening\n                </Text>\n              </View>\n              <Switch\n                value={autoOpen}\n                onValueChange={setAutoOpen}\n                trackColor={{ false: Colors.lightGray, true: Colors.primary }}\n                thumbColor={Colors.white}\n              />\n            </View>\n          </View>\n        </View>\n\n        {/* Advanced Settings */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Advanced Settings</Text>\n          <View style={styles.settingsCard}>\n            <View style={styles.inputRow}>\n              <Text style={styles.inputLabel}>Manual Open PIN</Text>\n              <TextInput\n                style={styles.textInput}\n                value={manualOpenPin}\n                onChangeText={setManualOpenPin}\n                placeholder=\"Enter PIN\"\n                secureTextEntry\n                keyboardType=\"numeric\"\n                maxLength={6}\n              />\n            </View>\n\n            <View style={styles.inputRow}>\n              <Text style={styles.inputLabel}>Kicker Pulse Width (__ms)</Text>\n              <TextInput\n                style={styles.textInput}\n                value={kickerPulseWidth}\n                onChangeText={setKickerPulseWidth}\n                placeholder=\"50\"\n                keyboardType=\"numeric\"\n                maxLength={3}\n              />\n            </View>\n\n            <View style={styles.inputRow}>\n              <Text style={styles.inputLabel}>Auto-close Delay (__seconds)</Text>\n              <TextInput\n                style={styles.textInput}\n                value={autoCloseDelay}\n                onChangeText={setAutoCloseDelay}\n                placeholder=\"30\"\n                keyboardType=\"numeric\"\n                maxLength={3}\n              />\n            </View>\n          </View>\n        </View>\n\n        {/* Connected Cash Drawers */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Cash Drawers ({cashDrawers.length})</Text>\n          {cashDrawers.map(drawer => (\n            <CashDrawerCard key={drawer.id} drawer={drawer} />\n          ))}\n        </View>\n\n        {/* Help Section */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Troubleshooting</Text>\n          <View style={styles.helpCard}>\n            <View style={styles.helpItem}>\n              <Icon name=\"help-outline\" size={20} color={Colors.secondary} />\n              <Text style={styles.helpText}>\n                If drawer won't open, check that it's properly connected to the printer or USB port.\n              </Text>\n            </View>\n            <View style={styles.helpItem}>\n              <Icon name=\"warning\" size={20} color={Colors.warning} />\n              <Text style={styles.helpText}>\n                Ensure the kicker cable is securely connected between the printer and cash drawer.\n              </Text>\n            </View>\n            <View style={styles.helpItem}>\n              <Icon name=\"info-outline\" size={20} color={Colors.secondary} />\n              <Text style={styles.helpText}>\n                Most cash drawers work through the receipt printer's kicker port.\n              </Text>\n            </View>\n          </View>\n        </View>\n      </ScrollView>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.primary,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    paddingTop: 48,\n  },\n  backButton: {\n    padding: 8,\n  },\n  headerTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.white,\n  },\n  addButton: {\n    padding: 8,\n  },\n  content: {\n    flex: 1,\n  },\n  section: {\n    backgroundColor: Colors.white,\n    marginVertical: 8,\n    paddingVertical: 16,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n    paddingHorizontal: 16,\n    marginBottom: 16,\n  },\n  emergencyControls: {\n    flexDirection: 'row',\n    paddingHorizontal: 16,\n    gap: 12,\n  },\n  emergencyButton: {\n    flex: 1,\n    alignItems: 'center',\n    paddingVertical: 16,\n    paddingHorizontal: 12,\n    backgroundColor: Colors.danger + '20',\n    borderRadius: 12,\n    borderWidth: 2,\n    borderColor: Colors.danger,\n  },\n  emergencyButtonText: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: Colors.danger,\n    marginTop: 8,\n  },\n  emergencyButtonSubtext: {\n    fontSize: 12,\n    color: Colors.danger,\n    marginTop: 4,\n  },\n  manualButton: {\n    flex: 1,\n    alignItems: 'center',\n    paddingVertical: 16,\n    paddingHorizontal: 12,\n    backgroundColor: Colors.warning + '20',\n    borderRadius: 12,\n    borderWidth: 2,\n    borderColor: Colors.warning,\n  },\n  manualButtonText: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: Colors.warning,\n    marginTop: 8,\n  },\n  manualButtonSubtext: {\n    fontSize: 12,\n    color: Colors.warning,\n    marginTop: 4,\n  },\n  settingsCard: {\n    paddingHorizontal: 16,\n  },\n  settingRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.lightGray,\n  },\n  settingInfo: {\n    flex: 1,\n    marginRight: 16,\n  },\n  settingLabel: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  settingDescription: {\n    fontSize: 14,\n    color: Colors.lightText,\n  },\n  inputRow: {\n    paddingVertical: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.lightGray,\n  },\n  inputLabel: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.text,\n    marginBottom: 8,\n  },\n  textInput: {\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 8,\n    paddingHorizontal: 12,\n    paddingVertical: 8,\n    fontSize: 16,\n    color: Colors.text,\n    backgroundColor: Colors.white,\n  },\n  drawerCard: {\n    backgroundColor: Colors.background,\n    marginHorizontal: 16,\n    marginBottom: 12,\n    borderRadius: 12,\n    padding: 16,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  drawerHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 16,\n  },\n  drawerInfo: {\n    flex: 1,\n    marginRight: 16,\n  },\n  drawerName: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 8,\n  },\n  drawerDetails: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    marginBottom: 4,\n  },\n  drawerConnection: {\n    fontSize: 12,\n    color: Colors.lightText,\n    fontWeight: '500',\n  },\n  drawerModel: {\n    fontSize: 14,\n    color: Colors.darkGray,\n    marginBottom: 4,\n  },\n  drawerLocation: {\n    fontSize: 12,\n    color: Colors.lightText,\n  },\n  drawerStatus: {\n    alignItems: 'flex-end',\n    gap: 8,\n  },\n  statusBadge: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 12,\n    gap: 4,\n  },\n  statusText: {\n    fontSize: 10,\n    fontWeight: '600',\n    color: Colors.white,\n  },\n  drawerActions: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    gap: 12,\n  },\n  actionButton: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 8,\n    paddingHorizontal: 12,\n    backgroundColor: Colors.white,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    gap: 6,\n  },\n  actionButtonDisabled: {\n    opacity: 0.5,\n  },\n  actionButtonText: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.text,\n  },\n  actionButtonTextDisabled: {\n    color: Colors.mediumGray,\n  },\n  removeButton: {\n    borderColor: Colors.danger,\n  },\n  removeButtonText: {\n    color: Colors.danger,\n  },\n  helpCard: {\n    paddingHorizontal: 16,\n  },\n  helpItem: {\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    paddingVertical: 12,\n    gap: 12,\n  },\n  helpText: {\n    flex: 1,\n    fontSize: 14,\n    color: Colors.lightText,\n    lineHeight: 20,\n  },\n});\n\nexport default CashDrawerScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/settings/hardware/HardwareDiagnosticsScreen.tsx","messages":[{"ruleId":"react/no-unstable-nested-components","severity":1,"message":"Do not define components during render. React will see a new component type on every render and destroy the entire subtree’s DOM nodes and state (https://reactjs.org/docs/reconciliation.html#elements-of-different-types). Instead, move this component definition out of the parent component “HardwareDiagnosticsScreen” and pass data as props.","line":284,"column":26,"nodeType":"ArrowFunctionExpression","endLine":335,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  ScrollView,\n  Alert,\n  ActivityIndicator,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation } from '@react-navigation/native';\n\n// Clover POS Color Scheme\nconst Colors = {\n  primary: '#00A651',\n  secondary: '#0066CC',\n  success: '#00A651',\n  warning: '#FF6B35',\n  danger: '#E74C3C',\n  background: '#F5F5F5',\n  white: '#FFFFFF',\n  lightGray: '#E5E5E5',\n  mediumGray: '#999999',\n  darkGray: '#666666',\n  text: '#333333',\n  lightText: '#666666',\n  border: '#DDDDDD',\n};\n\ninterface DiagnosticTest {\n  id: string;\n  name: string;\n  description: string;\n  category: 'hardware' | 'connectivity' | 'software' | 'performance';\n  status: 'pending' | 'running' | 'passed' | 'failed' | 'warning';\n  lastRun?: Date;\n  duration?: number;\n  details?: string;\n  errorCode?: string;\n}\n\ninterface DeviceInfo {\n  deviceModel: string;\n  osVersion: string;\n  appVersion: string;\n  storage: { total: string; used: string; free: string };\n  memory: { total: string; used: string; free: string };\n  battery: { level: number; isCharging: boolean };\n  network: { type: string; strength: string };\n}\n\nconst HardwareDiagnosticsScreen: React.FC = () => {\n  const navigation = useNavigation();\n\n  const [diagnosticTests, setDiagnosticTests] = useState<DiagnosticTest[]>([\n    {\n      id: 'printer_test',\n      name: 'Printer Connection',\n      description: 'Test printer connectivity and print quality',\n      category: 'hardware',\n      status: 'passed',\n      lastRun: new Date(Date.now() - 3600000), // 1 hour ago\n      duration: 15,\n      details: 'All printers connected and responding',\n    },\n    {\n      id: 'cash_drawer_test',\n      name: 'Cash Drawer',\n      description: 'Test cash drawer opening mechanism',\n      category: 'hardware',\n      status: 'passed',\n      lastRun: new Date(Date.now() - 3600000),\n      duration: 5,\n      details: 'Drawer opens and closes properly',\n    },\n    {\n      id: 'scanner_test',\n      name: 'Barcode Scanner',\n      description: 'Test barcode scanning accuracy',\n      category: 'hardware',\n      status: 'warning',\n      lastRun: new Date(Date.now() - 7200000), // 2 hours ago\n      duration: 10,\n      details: 'Scanner works but battery low (23%)',\n    },\n    {\n      id: 'card_reader_test',\n      name: 'Card Reader',\n      description: 'Test card reader functionality',\n      category: 'hardware',\n      status: 'passed',\n      lastRun: new Date(Date.now() - 1800000), // 30 minutes ago\n      duration: 20,\n      details: 'All payment methods working correctly',\n    },\n    {\n      id: 'network_test',\n      name: 'Network Connectivity',\n      description: 'Test internet connection and speed',\n      category: 'connectivity',\n      status: 'passed',\n      lastRun: new Date(Date.now() - 600000), // 10 minutes ago\n      duration: 8,\n      details: 'WiFi: 45 Mbps download, 12 Mbps upload',\n    },\n    {\n      id: 'bluetooth_test',\n      name: 'Bluetooth Connectivity',\n      description: 'Test Bluetooth device connections',\n      category: 'connectivity',\n      status: 'failed',\n      lastRun: new Date(Date.now() - 3600000),\n      duration: 12,\n      details: 'Unable to connect to handheld scanner',\n      errorCode: 'BT_CONN_TIMEOUT',\n    },\n    {\n      id: 'database_test',\n      name: 'Database Integrity',\n      description: 'Check local database for corruption',\n      category: 'software',\n      status: 'passed',\n      lastRun: new Date(Date.now() - 10800000), // 3 hours ago\n      duration: 35,\n      details: 'Database healthy, no corruption detected',\n    },\n    {\n      id: 'performance_test',\n      name: 'System Performance',\n      description: 'Check CPU, _memory, and storage usage',\n      category: 'performance',\n      status: 'warning',\n      lastRun: new Date(Date.now() - 900000), // 15 minutes ago\n      duration: 25,\n      details: 'Memory usage high (87%), consider restart',\n    },\n  ]);\n\n  const [deviceInfo] = useState<DeviceInfo>({\n    deviceModel: 'iPad Pro 12.9\" (6th gen)',\n    osVersion: 'iOS 17.2.1',\n    appVersion: '2.1.4 (Build 127)',\n    storage: { total: '256 GB', used: '128 GB', free: '128 GB' },\n    memory: { total: '8 GB', used: '6.9 GB', free: '1.1 GB' },\n    battery: { level: 78, isCharging: false },\n    network: { type: 'WiFi', strength: 'Excellent' },\n  });\n\n  const [runningTests, setRunningTests] = useState<Set<string>>(new Set());\n  const [runningFullDiagnostic, setRunningFullDiagnostic] = useState(__false);\n\n  const getStatusColor = (_status: _string) => {\n    switch (__status) {\n      case 'passed':\n        return Colors.success;\n      case 'failed':\n        return Colors.danger;\n      case 'warning':\n        return Colors.warning;\n      case 'running':\n        return Colors.secondary;\n      default:\n        return Colors.mediumGray;\n    }\n  };\n\n  const getStatusIcon = (_status: _string) => {\n    switch (__status) {\n      case 'passed':\n        return 'check-circle';\n      case 'failed':\n        return 'error';\n      case 'warning':\n        return 'warning';\n      case 'running':\n        return 'sync';\n      default:\n        return 'radio-button-unchecked';\n    }\n  };\n\n  const getCategoryIcon = (_category: _string) => {\n    switch (__category) {\n      case 'hardware':\n        return 'memory';\n      case 'connectivity':\n        return 'wifi';\n      case 'software':\n        return 'code';\n      case 'performance':\n        return 'speed';\n      default:\n        return 'help';\n    }\n  };\n\n  const runSingleTest = async (testId: _string) => {\n    setRunningTests(_prev => new Set(__prev).add(__testId));\n\n    // Update test status to running\n    setDiagnosticTests(prev =>\n      prev.map(test => (test.id === testId ? { ...test, status: 'running' } : _test)),\n    );\n\n    // Simulate test execution\n    const testDuration = Math.random() * 10000 + 2000; // 2-12 seconds\n\n    setTimeout(() => {\n      const outcomes = ['passed', 'failed', 'warning'];\n      const randomOutcome = outcomes[Math.floor(Math.random() * outcomes.length)] as unknown;\n\n      setDiagnosticTests(prev =>\n        prev.map(test =>\n          test.id === testId\n            ? {\n                ...test,\n                status: _randomOutcome,\n                lastRun: new Date(),\n                duration: Math.floor(testDuration / 1000),\n                details:\n                  randomOutcome === 'passed'\n                    ? 'Test completed successfully'\n                    : randomOutcome === 'warning'\n                    ? 'Test passed with warnings'\n                    : 'Test failed - check configuration',\n              }\n            : _test,\n        ),\n      );\n\n      setRunningTests(_prev => {\n        const newSet = new Set(__prev);\n        newSet.delete(__testId);\n        return newSet;\n      });\n    }, _testDuration);\n  };\n\n  const runFullDiagnostic = async () => {\n    setRunningFullDiagnostic(__true);\n\n    // Run all tests sequentially\n    for (const test of diagnosticTests) {\n      await new Promise(_resolve => {\n        runSingleTest(test.id);\n        setTimeout(__resolve, 1000); // Small delay between tests\n      });\n    }\n\n    setTimeout(() => {\n      setRunningFullDiagnostic(__false);\n      Alert.alert(\n        'Diagnostic Complete',\n        'Full system diagnostic completed. Check individual test results for details.',\n        [{ text: 'OK' }],\n      );\n    }, diagnosticTests.length * 1000 + 5000);\n  };\n\n  const exportDiagnosticReport = () => {\n    Alert.alert('Export Report', 'Export diagnostic report for technical support?', [\n      { text: 'Cancel', style: 'cancel' },\n      {\n        text: 'Export',\n        onPress: () => {\n          Alert.alert('Success', 'Diagnostic report exported to device storage.');\n        },\n      },\n    ]);\n  };\n\n  const getTestsSummary = () => {\n    const passed = diagnosticTests.filter(t => t.status === 'passed').length;\n    const _failed = diagnosticTests.filter(t => t.status === 'failed').length;\n    const warnings = diagnosticTests.filter(t => t.status === 'warning').length;\n    const pending = diagnosticTests.filter(t => t.status === 'pending').length;\n\n    return { passed, _failed, warnings, pending };\n  };\n\n  const summary = getTestsSummary();\n\n  const DiagnosticCard = ({ test }: { test: DiagnosticTest }) => (\n    <View style={styles.testCard}>\n      <View style={styles.testHeader}>\n        <View style={styles.testInfo}>\n          <View style={styles.testTitleRow}>\n            <Icon name={getCategoryIcon(test.category)} size={20} color={Colors.primary} />\n            <Text style={styles.testName}>{test.name}</Text>\n          </View>\n          <Text style={styles.testDescription}>{test.description}</Text>\n          {test.details && <Text style={styles.testDetails}>{test.details}</Text>}\n          {test.errorCode && <Text style={styles.errorCode}>Error: {test.errorCode}</Text>}\n          <View style={styles.testMeta}>\n            {test.lastRun && (\n              <Text style={styles.lastRun}>Last run: {test.lastRun.toLocaleTimeString()}</Text>\n            )}\n            {test.duration && <Text style={styles.duration}>Duration: {test.duration}s</Text>}\n          </View>\n        </View>\n\n        <View style={styles.testActions}>\n          <View style={[styles.statusBadge, { backgroundColor: getStatusColor(test.status) }]}>\n            {test.status === 'running' || runningTests.has(test.id) ? (\n              <ActivityIndicator size=\"small\" color={Colors.white} />\n            ) : (\n              <Icon name={getStatusIcon(test.status)} size={12} color={Colors.white} />\n            )}\n            <Text style={styles.statusText}>\n              {runningTests.has(test.id) ? 'RUNNING' : test.status.toUpperCase()}\n            </Text>\n          </View>\n\n          <TouchableOpacity\n            style={[styles.runButton, runningTests.has(test.id) && styles.runButtonDisabled]}\n            onPress={() => runSingleTest(test.id)}\n            disabled={runningTests.has(test.id) || runningFullDiagnostic}>\n            <Icon\n              name={runningTests.has(test.id) ? 'hourglass-empty' : 'play-arrow'}\n              size={16}\n              color={runningTests.has(test.id) ? Colors.mediumGray : Colors.primary}\n            />\n            <Text\n              style={[\n                styles.runButtonText,\n                runningTests.has(test.id) && styles.runButtonTextDisabled,\n              ]}>\n              {runningTests.has(test.id) ? 'Running...' : 'Run Test'}\n            </Text>\n          </TouchableOpacity>\n        </View>\n      </View>\n    </View>\n  );\n\n  return (\n    <View style={styles.container}>\n      {/* Header */}\n      <View style={styles.header}>\n        <TouchableOpacity onPress={() => navigation.goBack()} style={styles.backButton}>\n          <Icon name=\"arrow-back\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n        <Text style={styles.headerTitle}>Hardware Diagnostics</Text>\n        <TouchableOpacity style={styles.exportButton} onPress={exportDiagnosticReport}>\n          <Icon name=\"file-download\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n      </View>\n\n      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n        {/* Summary */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>System Status</Text>\n          <View style={styles.summaryCard}>\n            <View style={styles.summaryRow}>\n              <View style={styles.summaryItem}>\n                <Icon name=\"check-circle\" size={24} color={Colors.success} />\n                <Text style={styles.summaryCount}>{summary.passed}</Text>\n                <Text style={styles.summaryLabel}>Passed</Text>\n              </View>\n              <View style={styles.summaryItem}>\n                <Icon name=\"warning\" size={24} color={Colors.warning} />\n                <Text style={styles.summaryCount}>{summary.warnings}</Text>\n                <Text style={styles.summaryLabel}>Warnings</Text>\n              </View>\n              <View style={styles.summaryItem}>\n                <Icon name=\"error\" size={24} color={Colors.danger} />\n                <Text style={styles.summaryCount}>{summary.failed}</Text>\n                <Text style={styles.summaryLabel}>Failed</Text>\n              </View>\n              <View style={styles.summaryItem}>\n                <Icon name=\"radio-button-unchecked\" size={24} color={Colors.mediumGray} />\n                <Text style={styles.summaryCount}>{summary.pending}</Text>\n                <Text style={styles.summaryLabel}>Pending</Text>\n              </View>\n            </View>\n\n            <TouchableOpacity\n              style={[\n                styles.fullDiagnosticButton,\n                runningFullDiagnostic && styles.fullDiagnosticButtonDisabled,\n              ]}\n              onPress={runFullDiagnostic}\n              disabled={runningFullDiagnostic || runningTests.size > 0}>\n              {runningFullDiagnostic ? (\n                <ActivityIndicator size=\"small\" color={Colors.white} />\n              ) : (\n                <Icon name=\"play-circle-filled\" size={20} color={Colors.white} />\n              )}\n              <Text style={styles.fullDiagnosticButtonText}>\n                {runningFullDiagnostic ? 'Running Full Diagnostic...' : 'Run Full Diagnostic'}\n              </Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n\n        {/* Device Information */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Device Information</Text>\n          <View style={styles.deviceInfoCard}>\n            <View style={styles.deviceInfoRow}>\n              <Text style={styles.deviceInfoLabel}>Device:</Text>\n              <Text style={styles.deviceInfoValue}>{deviceInfo.deviceModel}</Text>\n            </View>\n            <View style={styles.deviceInfoRow}>\n              <Text style={styles.deviceInfoLabel}>OS Version:</Text>\n              <Text style={styles.deviceInfoValue}>{deviceInfo.osVersion}</Text>\n            </View>\n            <View style={styles.deviceInfoRow}>\n              <Text style={styles.deviceInfoLabel}>App Version:</Text>\n              <Text style={styles.deviceInfoValue}>{deviceInfo.appVersion}</Text>\n            </View>\n            <View style={styles.deviceInfoRow}>\n              <Text style={styles.deviceInfoLabel}>Storage:</Text>\n              <Text style={styles.deviceInfoValue}>\n                {deviceInfo.storage.used} / {deviceInfo.storage.total} used\n              </Text>\n            </View>\n            <View style={styles.deviceInfoRow}>\n              <Text style={styles.deviceInfoLabel}>Memory:</Text>\n              <Text style={styles.deviceInfoValue}>\n                {deviceInfo.memory.used} / {deviceInfo.memory.total} used\n              </Text>\n            </View>\n            <View style={styles.deviceInfoRow}>\n              <Text style={styles.deviceInfoLabel}>Battery:</Text>\n              <Text style={styles.deviceInfoValue}>\n                {deviceInfo.battery.level}% {deviceInfo.battery.isCharging ? '(__Charging)' : ''}\n              </Text>\n            </View>\n            <View style={styles.deviceInfoRow}>\n              <Text style={styles.deviceInfoLabel}>Network:</Text>\n              <Text style={styles.deviceInfoValue}>\n                {deviceInfo.network.type} - {deviceInfo.network.strength}\n              </Text>\n            </View>\n          </View>\n        </View>\n\n        {/* Diagnostic Tests */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Diagnostic Tests</Text>\n          {diagnosticTests.map(test => (\n            <DiagnosticCard key={test.id} test={test} />\n          ))}\n        </View>\n\n        {/* Help Section */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Diagnostic Help</Text>\n          <View style={styles.helpCard}>\n            <View style={styles.helpItem}>\n              <Icon name=\"info-outline\" size={20} color={Colors.secondary} />\n              <Text style={styles.helpText}>\n                Run diagnostics regularly to ensure optimal system performance.\n              </Text>\n            </View>\n            <View style={styles.helpItem}>\n              <Icon name=\"warning\" size={20} color={Colors.warning} />\n              <Text style={styles.helpText}>\n                Failed tests may indicate hardware issues requiring technical support.\n              </Text>\n            </View>\n            <View style={styles.helpItem}>\n              <Icon name=\"file-download\" size={20} color={Colors.secondary} />\n              <Text style={styles.helpText}>\n                Export diagnostic reports when contacting support for faster troubleshooting.\n              </Text>\n            </View>\n          </View>\n        </View>\n      </ScrollView>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.primary,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    paddingTop: 48,\n  },\n  backButton: {\n    padding: 8,\n  },\n  headerTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.white,\n  },\n  exportButton: {\n    padding: 8,\n  },\n  content: {\n    flex: 1,\n  },\n  section: {\n    backgroundColor: Colors.white,\n    marginVertical: 8,\n    paddingVertical: 16,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n    paddingHorizontal: 16,\n    marginBottom: 16,\n  },\n  summaryCard: {\n    paddingHorizontal: 16,\n  },\n  summaryRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    marginBottom: 20,\n  },\n  summaryItem: {\n    alignItems: 'center',\n    flex: 1,\n  },\n  summaryCount: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: Colors.text,\n    marginTop: 8,\n  },\n  summaryLabel: {\n    fontSize: 12,\n    color: Colors.lightText,\n    marginTop: 4,\n  },\n  fullDiagnosticButton: {\n    backgroundColor: Colors.primary,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 12,\n    borderRadius: 8,\n    gap: 8,\n  },\n  fullDiagnosticButtonDisabled: {\n    backgroundColor: Colors.mediumGray,\n  },\n  fullDiagnosticButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.white,\n  },\n  deviceInfoCard: {\n    paddingHorizontal: 16,\n  },\n  deviceInfoRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.lightGray,\n  },\n  deviceInfoLabel: {\n    fontSize: 14,\n    color: Colors.lightText,\n  },\n  deviceInfoValue: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.text,\n  },\n  testCard: {\n    backgroundColor: Colors.background,\n    marginHorizontal: 16,\n    marginBottom: 12,\n    borderRadius: 12,\n    padding: 16,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  testHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  testInfo: {\n    flex: 1,\n    marginRight: 16,\n  },\n  testTitleRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    marginBottom: 8,\n  },\n  testName: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  testDescription: {\n    fontSize: 14,\n    color: Colors.lightText,\n    marginBottom: 8,\n  },\n  testDetails: {\n    fontSize: 14,\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  errorCode: {\n    fontSize: 12,\n    color: Colors.danger,\n    fontFamily: 'monospace',\n    marginBottom: 8,\n  },\n  testMeta: {\n    flexDirection: 'row',\n    gap: 16,\n  },\n  lastRun: {\n    fontSize: 12,\n    color: Colors.lightText,\n  },\n  duration: {\n    fontSize: 12,\n    color: Colors.lightText,\n  },\n  testActions: {\n    alignItems: 'flex-end',\n    gap: 8,\n  },\n  statusBadge: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 12,\n    gap: 4,\n  },\n  statusText: {\n    fontSize: 10,\n    fontWeight: '600',\n    color: Colors.white,\n  },\n  runButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingVertical: 6,\n    paddingHorizontal: 12,\n    backgroundColor: Colors.white,\n    borderRadius: 6,\n    borderWidth: 1,\n    borderColor: Colors.primary,\n    gap: 4,\n  },\n  runButtonDisabled: {\n    borderColor: Colors.mediumGray,\n  },\n  runButtonText: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: Colors.primary,\n  },\n  runButtonTextDisabled: {\n    color: Colors.mediumGray,\n  },\n  helpCard: {\n    paddingHorizontal: 16,\n  },\n  helpItem: {\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    paddingVertical: 12,\n    gap: 12,\n  },\n  helpText: {\n    flex: 1,\n    fontSize: 14,\n    color: Colors.lightText,\n    lineHeight: 20,\n  },\n});\n\nexport default HardwareDiagnosticsScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/settings/hardware/PrinterSetupScreen.tsx","messages":[{"ruleId":"react/no-unstable-nested-components","severity":1,"message":"Do not define components during render. React will see a new component type on every render and destroy the entire subtree’s DOM nodes and state (https://reactjs.org/docs/reconciliation.html#elements-of-different-types). Instead, move this component definition out of the parent component “PrinterSetupScreen” and pass data as props.","line":183,"column":23,"nodeType":"ArrowFunctionExpression","endLine":244,"endColumn":4},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":187,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":187,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":190,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":190,"endColumn":18},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":191,"column":36,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":191,"endColumn":40},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":193,"column":30,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":193,"endColumn":34},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":194,"column":33,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":194,"endColumn":37},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":200,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":200,"endColumn":18},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'TouchableOpacity' is not defined.","line":213,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":213,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":215,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":215,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'TouchableOpacity' is not defined.","line":218,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":218,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":222,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":222,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'TouchableOpacity' is not defined.","line":225,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":225,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":240,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":240,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'TouchableOpacity' is not defined.","line":250,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":250,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":253,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":253,"endColumn":14},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'TouchableOpacity' is not defined.","line":254,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":254,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":265,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":265,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'TouchableOpacity' is not defined.","line":267,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":267,"endColumn":30},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":276,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":276,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'TouchableOpacity' is not defined.","line":281,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":281,"endColumn":30},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":285,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":285,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'TouchableOpacity' is not defined.","line":288,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":288,"endColumn":30},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":298,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":298,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":305,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":305,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":309,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":309,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":310,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":310,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":324,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":324,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":325,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":325,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":339,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":339,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":340,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":340,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":354,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":354,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":362,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":362,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":366,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":366,"endColumn":20},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":367,"column":53,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[12504,12620],"text":"\n                Printer not appearing? Check that it&apos;s connected to the same network and powered on.\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[12504,12620],"text":"\n                Printer not appearing? Check that it&lsquo;s connected to the same network and powered on.\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[12504,12620],"text":"\n                Printer not appearing? Check that it&#39;s connected to the same network and powered on.\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[12504,12620],"text":"\n                Printer not appearing? Check that it&rsquo;s connected to the same network and powered on.\n              "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":372,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":372,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":379,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":379,"endColumn":20},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":380,"column":39,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[13136,13245],"text":"\n                Contact support if you&apos;re having trouble with printer setup or configuration.\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[13136,13245],"text":"\n                Contact support if you&lsquo;re having trouble with printer setup or configuration.\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[13136,13245],"text":"\n                Contact support if you&#39;re having trouble with printer setup or configuration.\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[13136,13245],"text":"\n                Contact support if you&rsquo;re having trouble with printer setup or configuration.\n              "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":36,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { StyleSheet, View, ScrollView, Switch } from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation } from '@react-navigation/native';\n\n// Clover POS Color Scheme\nconst Colors = {\n  primary: '#00A651',\n  secondary: '#0066CC',\n  success: '#00A651',\n  warning: '#FF6B35',\n  danger: '#E74C3C',\n  background: '#F5F5F5',\n  white: '#FFFFFF',\n  lightGray: '#E5E5E5',\n  mediumGray: '#999999',\n  darkGray: '#666666',\n  text: '#333333',\n  lightText: '#666666',\n  border: '#DDDDDD',\n};\n\ninterface Printer {\n  id: string;\n  name: string;\n  type: 'receipt' | 'kitchen' | 'label';\n  connection: 'wifi' | 'bluetooth' | 'usb' | 'ethernet';\n  status: 'connected' | 'disconnected' | 'error' | 'unknown';\n  ipAddress?: string;\n  model?: string;\n  location?: string;\n}\n\nconst PrinterSetupScreen: React.FC = () => {\n  const navigation = useNavigation();\n\n  const [printers, setPrinters] = useState<Printer[]>([\n    {\n      id: 'printer1',\n      name: 'Receipt Printer - Counter',\n      type: 'receipt',\n      connection: 'wifi',\n      status: 'connected',\n      ipAddress: '192.168.1.100',\n      model: 'Epson TM-T88VI',\n      location: 'Front Counter',\n    },\n    {\n      id: 'printer2',\n      name: 'Kitchen Printer',\n      type: 'kitchen',\n      connection: 'ethernet',\n      status: 'connected',\n      ipAddress: '192.168.1.101',\n      model: 'Star TSP143III',\n      location: 'Kitchen',\n    },\n    {\n      id: 'printer3',\n      name: 'Label Printer',\n      type: 'label',\n      connection: 'usb',\n      status: 'disconnected',\n      model: 'Zebra ZD420',\n      location: 'Back Office',\n    },\n  ]);\n\n  const [scanning, setScanning] = useState(__false);\n  const [autoPrint, setAutoPrint] = useState(__true);\n  const [printDuplicates, setPrintDuplicates] = useState(__false);\n  const [paperSizeWarning, setPaperSizeWarning] = useState(__true);\n\n  const getStatusColor = (_status: _string) => {\n    switch (__status) {\n      case 'connected':\n        return Colors.success;\n      case 'disconnected':\n        return Colors.mediumGray;\n      case 'error':\n        return Colors.danger;\n      default:\n        return Colors.warning;\n    }\n  };\n\n  const getStatusIcon = (_status: _string) => {\n    switch (__status) {\n      case 'connected':\n        return 'check-circle';\n      case 'disconnected':\n        return 'radio-button-unchecked';\n      case 'error':\n        return 'error';\n      default:\n        return 'help';\n    }\n  };\n\n  const getConnectionIcon = (_connection: _string) => {\n    switch (__connection) {\n      case 'wifi':\n        return 'wifi';\n      case 'bluetooth':\n        return 'bluetooth';\n      case 'usb':\n        return 'usb';\n      case 'ethernet':\n        return 'lan';\n      default:\n        return 'device-unknown';\n    }\n  };\n\n  const handleScanForPrinters = async () => {\n    setScanning(__true);\n\n    // Simulate scanning\n    setTimeout(() => {\n      setScanning(__false);\n      Alert.alert('Scan Complete', 'Found 2 new printers. Would you like to add them?', [\n        { text: 'Cancel', style: 'cancel' },\n        {\n          text: 'Add Printers',\n          onPress: () => {\n            // Add mock printers\n            const newPrinters: Printer[] = [\n              {\n                id: 'printer4',\n                name: 'Receipt Printer - Mobile',\n                type: 'receipt',\n                connection: 'bluetooth',\n                status: 'unknown',\n                model: 'Star SM-L200',\n                location: 'Mobile Station',\n              },\n            ];\n            setPrinters(prev => [...prev, ...newPrinters]);\n          },\n        },\n      ]);\n    }, 3000);\n  };\n\n  const handlePrinterTest = (printer: _Printer) => {\n    Alert.alert('Test Print', `Send a test print to ${printer.name}?`, [\n      { text: 'Cancel', style: 'cancel' },\n      {\n        text: 'Print Test',\n        onPress: () => {\n          Alert.alert('Success', 'Test print sent successfully!');\n        },\n      },\n    ]);\n  };\n\n  const handlePrinterConfigure = (printer: _Printer) => {\n    Alert.alert('Configure Printer', `Configure settings for ${printer.name}`, [\n      { text: 'Cancel', style: 'cancel' },\n      {\n        text: 'Configure',\n        onPress: () => {\n          // Would navigate to detailed printer configuration\n          Alert.alert('Info', 'Printer configuration screen would open here');\n        },\n      },\n    ]);\n  };\n\n  const togglePrinterStatus = (printerId: _string) => {\n    setPrinters(prev =>\n      prev.map(printer =>\n        printer.id === printerId\n          ? {\n              ...printer,\n              status: printer.status === 'connected' ? 'disconnected' : 'connected',\n            }\n          : _printer,\n      ),\n    );\n  };\n\n  const PrinterCard = ({ printer }: { printer: Printer }) => (\n    <View style={styles.printerCard}>\n      <View style={styles.printerHeader}>\n        <View style={styles.printerInfo}>\n          <Text style={styles.printerName}>{printer.name}</Text>\n          <View style={styles.printerDetails}>\n            <Icon name={getConnectionIcon(printer.connection)} size={16} color={Colors.lightText} />\n            <Text style={styles.printerConnection}>{printer.connection.toUpperCase()}</Text>\n            {printer.ipAddress && <Text style={styles.printerIp}>{printer.ipAddress}</Text>}\n          </View>\n          {printer.model && <Text style={styles.printerModel}>{printer.model}</Text>}\n          {printer.location && <Text style={styles.printerLocation}>📍 {printer.location}</Text>}\n        </View>\n\n        <View style={styles.printerStatus}>\n          <View style={[styles.statusBadge, { backgroundColor: getStatusColor(printer.status) }]}>\n            <Icon name={getStatusIcon(printer.status)} size={12} color={Colors.white} />\n            <Text style={styles.statusText}>{printer.status.toUpperCase()}</Text>\n          </View>\n\n          <Switch\n            value={printer.status === 'connected'}\n            onValueChange={() => togglePrinterStatus(printer.id)}\n            trackColor={{ false: Colors.lightGray, true: Colors.primary }}\n            thumbColor={Colors.white}\n          />\n        </View>\n      </View>\n\n      <View style={styles.printerActions}>\n        <TouchableOpacity style={styles.actionButton} onPress={() => handlePrinterTest(__printer)}>\n          <Icon name=\"print\" size={16} color={Colors.secondary} />\n          <Text style={styles.actionButtonText}>Test Print</Text>\n        </TouchableOpacity>\n\n        <TouchableOpacity\n          style={styles.actionButton}\n          onPress={() => handlePrinterConfigure(__printer)}>\n          <Icon name=\"settings\" size={16} color={Colors.primary} />\n          <Text style={styles.actionButtonText}>Configure</Text>\n        </TouchableOpacity>\n\n        <TouchableOpacity\n          style={[styles.actionButton, styles.removeButton]}\n          onPress={() => {\n            Alert.alert('Remove Printer', `Remove ${printer.name}?`, [\n              { text: 'Cancel', style: 'cancel' },\n              {\n                text: 'Remove',\n                style: 'destructive',\n                onPress: () => {\n                  setPrinters(prev => prev.filter(p => p.id !== printer.id));\n                },\n              },\n            ]);\n          }}>\n          <Icon name=\"delete\" size={16} color={Colors.danger} />\n          <Text style={[styles.actionButtonText, styles.removeButtonText]}>Remove</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n\n  return (\n    <View style={styles.container}>\n      {/* Header */}\n      <View style={styles.header}>\n        <TouchableOpacity onPress={() => navigation.goBack()} style={styles.backButton}>\n          <Icon name=\"arrow-back\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n        <Text style={styles.headerTitle}>Printer Setup</Text>\n        <TouchableOpacity\n          style={styles.addButton}\n          onPress={handleScanForPrinters}\n          disabled={scanning}>\n          <Icon name={scanning ? 'hourglass-empty' : 'add'} size={24} color={Colors.white} />\n        </TouchableOpacity>\n      </View>\n\n      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n        {/* Quick Actions */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Quick Actions</Text>\n          <View style={styles.quickActions}>\n            <TouchableOpacity\n              style={[styles.quickActionButton, scanning && styles.quickActionButtonDisabled]}\n              onPress={handleScanForPrinters}\n              disabled={scanning}>\n              <Icon\n                name={scanning ? 'hourglass-empty' : 'search'}\n                size={24}\n                color={scanning ? Colors.mediumGray : Colors.primary}\n              />\n              <Text style={[styles.quickActionText, scanning && styles.quickActionTextDisabled]}>\n                {scanning ? 'Scanning...' : 'Scan for Printers'}\n              </Text>\n            </TouchableOpacity>\n\n            <TouchableOpacity\n              style={styles.quickActionButton}\n              onPress={() => Alert.alert('Info', 'Manual printer setup would open here')}>\n              <Icon name=\"add-circle-outline\" size={24} color={Colors.secondary} />\n              <Text style={styles.quickActionText}>Add Manually</Text>\n            </TouchableOpacity>\n\n            <TouchableOpacity\n              style={styles.quickActionButton}\n              onPress={() => {\n                printers.forEach(printer => {\n                  if (printer.status === 'connected') {\n                    handlePrinterTest(__printer);\n                  }\n                });\n              }}>\n              <Icon name=\"print\" size={24} color={Colors.success} />\n              <Text style={styles.quickActionText}>Test All</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n\n        {/* Printer Settings */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Printer Settings</Text>\n          <View style={styles.settingsCard}>\n            <View style={styles.settingRow}>\n              <View style={styles.settingInfo}>\n                <Text style={styles.settingLabel}>Auto-print receipts</Text>\n                <Text style={styles.settingDescription}>\n                  Automatically print customer receipts after payment\n                </Text>\n              </View>\n              <Switch\n                value={autoPrint}\n                onValueChange={setAutoPrint}\n                trackColor={{ false: Colors.lightGray, true: Colors.primary }}\n                thumbColor={Colors.white}\n              />\n            </View>\n\n            <View style={styles.settingRow}>\n              <View style={styles.settingInfo}>\n                <Text style={styles.settingLabel}>Print duplicate receipts</Text>\n                <Text style={styles.settingDescription}>\n                  Print an additional copy for merchant records\n                </Text>\n              </View>\n              <Switch\n                value={printDuplicates}\n                onValueChange={setPrintDuplicates}\n                trackColor={{ false: Colors.lightGray, true: Colors.primary }}\n                thumbColor={Colors.white}\n              />\n            </View>\n\n            <View style={styles.settingRow}>\n              <View style={styles.settingInfo}>\n                <Text style={styles.settingLabel}>Paper size warnings</Text>\n                <Text style={styles.settingDescription}>Show alerts when printer paper is low</Text>\n              </View>\n              <Switch\n                value={paperSizeWarning}\n                onValueChange={setPaperSizeWarning}\n                trackColor={{ false: Colors.lightGray, true: Colors.primary }}\n                thumbColor={Colors.white}\n              />\n            </View>\n          </View>\n        </View>\n\n        {/* Connected Printers */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Connected Printers ({printers.length})</Text>\n          {printers.map(printer => (\n            <PrinterCard key={printer.id} printer={printer} />\n          ))}\n        </View>\n\n        {/* Help Section */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Need Help?</Text>\n          <View style={styles.helpCard}>\n            <View style={styles.helpItem}>\n              <Icon name=\"help-outline\" size={20} color={Colors.secondary} />\n              <Text style={styles.helpText}>\n                Printer not appearing? Check that it's connected to the same network and powered on.\n              </Text>\n            </View>\n            <View style={styles.helpItem}>\n              <Icon name=\"info-outline\" size={20} color={Colors.secondary} />\n              <Text style={styles.helpText}>\n                For USB printers, ensure the USB cable is properly connected and drivers are\n                installed.\n              </Text>\n            </View>\n            <View style={styles.helpItem}>\n              <Icon name=\"support\" size={20} color={Colors.secondary} />\n              <Text style={styles.helpText}>\n                Contact support if you're having trouble with printer setup or configuration.\n              </Text>\n            </View>\n          </View>\n        </View>\n      </ScrollView>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.primary,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    paddingTop: 48,\n  },\n  backButton: {\n    padding: 8,\n  },\n  headerTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.white,\n  },\n  addButton: {\n    padding: 8,\n  },\n  content: {\n    flex: 1,\n  },\n  section: {\n    backgroundColor: Colors.white,\n    marginVertical: 8,\n    paddingVertical: 16,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n    paddingHorizontal: 16,\n    marginBottom: 16,\n  },\n  quickActions: {\n    flexDirection: 'row',\n    paddingHorizontal: 16,\n    gap: 12,\n  },\n  quickActionButton: {\n    flex: 1,\n    alignItems: 'center',\n    paddingVertical: 16,\n    paddingHorizontal: 12,\n    backgroundColor: Colors.background,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  quickActionButtonDisabled: {\n    opacity: 0.5,\n  },\n  quickActionText: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.text,\n    marginTop: 8,\n    textAlign: 'center',\n  },\n  quickActionTextDisabled: {\n    color: Colors.mediumGray,\n  },\n  settingsCard: {\n    paddingHorizontal: 16,\n  },\n  settingRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.lightGray,\n  },\n  settingInfo: {\n    flex: 1,\n    marginRight: 16,\n  },\n  settingLabel: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  settingDescription: {\n    fontSize: 14,\n    color: Colors.lightText,\n  },\n  printerCard: {\n    backgroundColor: Colors.background,\n    marginHorizontal: 16,\n    marginBottom: 12,\n    borderRadius: 12,\n    padding: 16,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  printerHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 16,\n  },\n  printerInfo: {\n    flex: 1,\n    marginRight: 16,\n  },\n  printerName: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 8,\n  },\n  printerDetails: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    marginBottom: 4,\n  },\n  printerConnection: {\n    fontSize: 12,\n    color: Colors.lightText,\n    fontWeight: '500',\n  },\n  printerIp: {\n    fontSize: 12,\n    color: Colors.lightText,\n  },\n  printerModel: {\n    fontSize: 14,\n    color: Colors.darkGray,\n    marginBottom: 4,\n  },\n  printerLocation: {\n    fontSize: 12,\n    color: Colors.lightText,\n  },\n  printerStatus: {\n    alignItems: 'flex-end',\n    gap: 8,\n  },\n  statusBadge: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 12,\n    gap: 4,\n  },\n  statusText: {\n    fontSize: 10,\n    fontWeight: '600',\n    color: Colors.white,\n  },\n  printerActions: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    gap: 12,\n  },\n  actionButton: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 8,\n    paddingHorizontal: 12,\n    backgroundColor: Colors.white,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    gap: 6,\n  },\n  actionButtonText: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.text,\n  },\n  removeButton: {\n    borderColor: Colors.danger,\n  },\n  removeButtonText: {\n    color: Colors.danger,\n  },\n  helpCard: {\n    paddingHorizontal: 16,\n  },\n  helpItem: {\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    paddingVertical: 12,\n    gap: 12,\n  },\n  helpText: {\n    flex: 1,\n    fontSize: 14,\n    color: Colors.lightText,\n    lineHeight: 20,\n  },\n});\n\nexport default PrinterSetupScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/settings/user/AccessibilityScreen.tsx","messages":[{"ruleId":"react/no-unstable-nested-components","severity":1,"message":"Do not define components during render. React will see a new component type on every render and destroy the entire subtree’s DOM nodes and state (https://reactjs.org/docs/reconciliation.html#elements-of-different-types). Instead, move this component definition out of the parent component “AccessibilityScreen” and pass data as props.","line":225,"column":28,"nodeType":"ArrowFunctionExpression","endLine":262,"endColumn":4},{"ruleId":"react/no-unstable-nested-components","severity":1,"message":"Do not define components during render. React will see a new component type on every render and destroy the entire subtree’s DOM nodes and state (https://reactjs.org/docs/reconciliation.html#elements-of-different-types). Instead, move this component definition out of the parent component “AccessibilityScreen” and pass data as props.","line":264,"column":21,"nodeType":"ArrowFunctionExpression","endLine":306,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  ScrollView,\n  Alert,\n  Switch,\n  Slider,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation } from '@react-navigation/native';\n\n// Clover POS Color Scheme\nconst Colors = {\n  primary: '#00A651',\n  secondary: '#0066CC',\n  success: '#00A651',\n  warning: '#FF6B35',\n  danger: '#E74C3C',\n  background: '#F5F5F5',\n  white: '#FFFFFF',\n  lightGray: '#E5E5E5',\n  mediumGray: '#999999',\n  darkGray: '#666666',\n  text: '#333333',\n  lightText: '#666666',\n  border: '#DDDDDD',\n};\n\ninterface AccessibilitySettings {\n  // Visual\n  largeText: boolean;\n  boldText: boolean;\n  highContrast: boolean;\n  reduceTransparency: boolean;\n  invertColors: boolean;\n  grayscale: boolean;\n\n  // Motor\n  reduceMotion: boolean;\n  stickyKeys: boolean;\n  slowKeys: boolean;\n  bounceKeys: boolean;\n  tapToClick: boolean;\n\n  // Cognitive\n  simplifiedInterface: boolean;\n  reducedAnimations: boolean;\n  extendedTimeouts: boolean;\n  confirmationDialogs: boolean;\n  readAloud: boolean;\n\n  // Audio\n  visualIndicators: boolean;\n  vibrationFeedback: boolean;\n  soundAlerts: boolean;\n  captionsEnabled: boolean;\n}\n\nconst AccessibilityScreen: React.FC = () => {\n  const navigation = useNavigation();\n\n  const [settings, setSettings] = useState<AccessibilitySettings>({\n    // Visual\n    largeText: _false,\n    boldText: _false,\n    highContrast: _false,\n    reduceTransparency: _false,\n    invertColors: _false,\n    grayscale: _false,\n\n    // Motor\n    reduceMotion: _false,\n    stickyKeys: _false,\n    slowKeys: _false,\n    bounceKeys: _false,\n    tapToClick: _true,\n\n    // Cognitive\n    simplifiedInterface: _false,\n    reducedAnimations: _false,\n    extendedTimeouts: _false,\n    confirmationDialogs: _true,\n    readAloud: _false,\n\n    // Audio\n    visualIndicators: _true,\n    vibrationFeedback: _true,\n    soundAlerts: _true,\n    captionsEnabled: _false,\n  });\n\n  // Slider values\n  const [textSize, setTextSize] = useState(16);\n  const [contrastLevel, setContrastLevel] = useState(0);\n  const [animationSpeed, setAnimationSpeed] = useState(1);\n  const [timeoutDuration, setTimeoutDuration] = useState(30);\n  const [buttonSize, setButtonSize] = useState(44);\n\n  const toggleSetting = (setting: keyof AccessibilitySettings) => {\n    setSettings(prev => ({\n      ...prev,\n      [setting]: !prev[setting],\n    }));\n  };\n\n  const handleResetToDefaults = () => {\n    Alert.alert(\n      'Reset Accessibility Settings',\n      'This will reset all accessibility settings to their default values. Continue?',\n      [\n        { text: 'Cancel', style: 'cancel' },\n        {\n          text: 'Reset',\n          style: 'destructive',\n          onPress: () => {\n            setSettings({\n              largeText: _false,\n              boldText: _false,\n              highContrast: _false,\n              reduceTransparency: _false,\n              invertColors: _false,\n              grayscale: _false,\n              reduceMotion: _false,\n              stickyKeys: _false,\n              slowKeys: _false,\n              bounceKeys: _false,\n              tapToClick: _true,\n              simplifiedInterface: _false,\n              reducedAnimations: _false,\n              extendedTimeouts: _false,\n              confirmationDialogs: _true,\n              readAloud: _false,\n              visualIndicators: _true,\n              vibrationFeedback: _true,\n              soundAlerts: _true,\n              captionsEnabled: _false,\n            });\n            setTextSize(16);\n            setContrastLevel(0);\n            setAnimationSpeed(1);\n            setTimeoutDuration(30);\n            setButtonSize(44);\n            Alert.alert('Success', 'Accessibility settings reset to defaults.');\n          },\n        },\n      ],\n    );\n  };\n\n  const handleAccessibilityShortcuts = () => {\n    Alert.alert('Accessibility Shortcuts', 'Configure quick access to accessibility features:', [\n      { text: 'Cancel', style: 'cancel' },\n      {\n        text: 'Home Button Triple-Click',\n        onPress: () => {\n          Alert.alert('Info', 'Home button shortcut configured');\n        },\n      },\n      {\n        text: 'Volume Button Hold',\n        onPress: () => {\n          Alert.alert('Info', 'Volume button shortcut configured');\n        },\n      },\n    ]);\n  };\n\n  const handleTutorialAccess = () => {\n    Alert.alert('Accessibility Tutorial', 'Learn how to use accessibility features effectively.', [\n      { text: 'Cancel', style: 'cancel' },\n      {\n        text: 'Start Tutorial',\n        onPress: () => {\n          Alert.alert('Info', 'Accessibility tutorial would start here');\n        },\n      },\n    ]);\n  };\n\n  const getTextSizeDescription = (size: _number) => {\n    if (size < 14) {\n      return 'Small';\n    }\n    if (size < 18) {\n      return 'Medium';\n    }\n    if (size < 22) {\n      return 'Large';\n    }\n    if (size < 26) {\n      return 'Extra Large';\n    }\n    return 'Accessibility Size';\n  };\n\n  const getContrastDescription = (level: _number) => {\n    if (level === 0) {\n      return 'Normal';\n    }\n    if (level < 0.5) {\n      return 'Moderate';\n    }\n    return 'High';\n  };\n\n  const getSpeedDescription = (speed: _number) => {\n    if (speed < 0.5) {\n      return 'Very Slow';\n    }\n    if (speed < 1) {\n      return 'Slow';\n    }\n    if (speed === 1) {\n      return 'Normal';\n    }\n    if (speed < 1.5) {\n      return 'Fast';\n    }\n    return 'Very Fast';\n  };\n\n  const AccessibilityRow = ({\n    icon,\n    title,\n    description,\n    setting,\n    iconColor = Colors.secondary,\n    onInfoPress,\n  }: {\n    icon: string;\n    title: string;\n    description: string;\n    setting: keyof AccessibilitySettings;\n    iconColor?: string;\n    onInfoPress?: () => void;\n  }) => (\n    <View style={styles.accessibilityRow}>\n      <View style={styles.accessibilityInfo}>\n        <Icon name={icon} size={24} color={iconColor} />\n        <View style={styles.accessibilityTextInfo}>\n          <View style={styles.titleRow}>\n            <Text style={styles.accessibilityTitle}>{title}</Text>\n            {onInfoPress && (\n              <TouchableOpacity onPress={onInfoPress} style={styles.infoButton}>\n                <Icon name=\"info-outline\" size={16} color={Colors.lightText} />\n              </TouchableOpacity>\n            )}\n          </View>\n          <Text style={styles.accessibilityDescription}>{description}</Text>\n        </View>\n      </View>\n      <Switch\n        value={settings[setting]}\n        onValueChange={() => toggleSetting(__setting)}\n        trackColor={{ false: Colors.lightGray, true: Colors.primary }}\n        thumbColor={Colors.white}\n      />\n    </View>\n  );\n\n  const SliderRow = ({\n    icon,\n    title,\n    value,\n    onValueChange,\n    minimumValue,\n    maximumValue,\n    description,\n    unit = '',\n  }: {\n    icon: string;\n    title: string;\n    value: number;\n    onValueChange: (value: _number) => void;\n    minimumValue: number;\n    maximumValue: number;\n    description: string;\n    unit?: string;\n  }) => (\n    <View style={styles.sliderRow}>\n      <View style={styles.sliderHeader}>\n        <Icon name={icon} size={24} color={Colors.secondary} />\n        <View style={styles.sliderTitleInfo}>\n          <Text style={styles.sliderTitle}>{title}</Text>\n          <Text style={styles.sliderValue}>\n            {value.toFixed(0)}\n            {unit} - {description}\n          </Text>\n        </View>\n      </View>\n      <Slider\n        style={styles.slider}\n        value={value}\n        onValueChange={onValueChange}\n        minimumValue={minimumValue}\n        maximumValue={maximumValue}\n        thumbStyle={styles.sliderThumb}\n        trackStyle={styles.sliderTrack}\n        minimumTrackTintColor={Colors.primary}\n        maximumTrackTintColor={Colors.lightGray}\n      />\n    </View>\n  );\n\n  return (\n    <View style={styles.container}>\n      {/* Header */}\n      <View style={styles.header}>\n        <TouchableOpacity onPress={() => navigation.goBack()} style={styles.backButton}>\n          <Icon name=\"arrow-back\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n        <Text style={styles.headerTitle}>Accessibility</Text>\n        <TouchableOpacity style={styles.helpButton} onPress={handleTutorialAccess}>\n          <Icon name=\"help-outline\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n      </View>\n\n      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n        {/* Quick Access */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Quick Access</Text>\n          <View style={styles.quickAccessCard}>\n            <TouchableOpacity\n              style={styles.quickAccessButton}\n              onPress={handleAccessibilityShortcuts}>\n              <Icon name=\"touch-app\" size={32} color={Colors.primary} />\n              <Text style={styles.quickAccessText}>Shortcuts</Text>\n            </TouchableOpacity>\n\n            <TouchableOpacity style={styles.quickAccessButton} onPress={handleTutorialAccess}>\n              <Icon name=\"school\" size={32} color={Colors.secondary} />\n              <Text style={styles.quickAccessText}>Tutorial</Text>\n            </TouchableOpacity>\n\n            <TouchableOpacity style={styles.quickAccessButton} onPress={handleResetToDefaults}>\n              <Icon name=\"restore\" size={32} color={Colors.warning} />\n              <Text style={styles.quickAccessText}>Reset</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n\n        {/* Text & Display */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Text & Display</Text>\n          <View style={styles.settingsCard}>\n            <SliderRow\n              icon=\"format-size\"\n              title=\"Text Size\"\n              value={textSize}\n              onValueChange={setTextSize}\n              minimumValue={12}\n              maximumValue={32}\n              description={getTextSizeDescription(__textSize)}\n              unit=\"pt\"\n            />\n\n            <AccessibilityRow\n              icon=\"format-bold\"\n              title=\"Bold Text\"\n              description=\"Make text easier to read with bold formatting\"\n              setting=\"boldText\"\n              onInfoPress={() =>\n                Alert.alert(\n                  'Bold Text',\n                  'Increases text weight throughout the app to improve readability.',\n                )\n              }\n            />\n\n            <AccessibilityRow\n              icon=\"visibility\"\n              title=\"Large Text\"\n              description=\"Enable larger text sizes for better readability\"\n              setting=\"largeText\"\n              onInfoPress={() =>\n                Alert.alert(\n                  'Large Text',\n                  'Uses larger text sizes that scale with your text size slider setting.',\n                )\n              }\n            />\n\n            <SliderRow\n              icon=\"contrast\"\n              title=\"Contrast Level\"\n              value={contrastLevel}\n              onValueChange={setContrastLevel}\n              minimumValue={0}\n              maximumValue={1}\n              description={getContrastDescription(__contrastLevel)}\n            />\n\n            <AccessibilityRow\n              icon=\"invert-colors\"\n              title=\"High Contrast\"\n              description=\"Increase contrast for better visibility\"\n              setting=\"highContrast\"\n              onInfoPress={() =>\n                Alert.alert(\n                  'High Contrast',\n                  'Uses high contrast colors to make content easier to distinguish.',\n                )\n              }\n            />\n\n            <AccessibilityRow\n              icon=\"opacity\"\n              title=\"Reduce Transparency\"\n              description=\"Reduce transparent elements for clarity\"\n              setting=\"reduceTransparency\"\n            />\n\n            <AccessibilityRow\n              icon=\"invert-colors-off\"\n              title=\"Invert Colors\"\n              description=\"Invert display colors for easier viewing\"\n              setting=\"invertColors\"\n            />\n\n            <AccessibilityRow\n              icon=\"filter-b-and-w\"\n              title=\"Grayscale\"\n              description=\"Display interface in grayscale\"\n              setting=\"grayscale\"\n            />\n          </View>\n        </View>\n\n        {/* Motion & Interaction */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Motion & Interaction</Text>\n          <View style={styles.settingsCard}>\n            <AccessibilityRow\n              icon=\"slow-motion-video\"\n              title=\"Reduce Motion\"\n              description=\"Minimize animations and motion effects\"\n              setting=\"reduceMotion\"\n              onInfoPress={() =>\n                Alert.alert(\n                  'Reduce Motion',\n                  'Reduces or removes animations that might cause motion sensitivity issues.',\n                )\n              }\n            />\n\n            <SliderRow\n              icon=\"speed\"\n              title=\"Animation Speed\"\n              value={animationSpeed}\n              onValueChange={setAnimationSpeed}\n              minimumValue={0.25}\n              maximumValue={2}\n              description={getSpeedDescription(__animationSpeed)}\n              unit=\"x\"\n            />\n\n            <SliderRow\n              icon=\"touch-app\"\n              title=\"Button Size\"\n              value={buttonSize}\n              onValueChange={setButtonSize}\n              minimumValue={32}\n              maximumValue={64}\n              description=\"Touch target size\"\n              unit=\"pt\"\n            />\n\n            <AccessibilityRow\n              icon=\"pan-tool\"\n              title=\"Sticky Keys\"\n              description=\"Press modifier keys one at a time\"\n              setting=\"stickyKeys\"\n            />\n\n            <AccessibilityRow\n              icon=\"keyboard\"\n              title=\"Slow Keys\"\n              description=\"Ignore brief key presses\"\n              setting=\"slowKeys\"\n            />\n\n            <AccessibilityRow\n              icon=\"touch-app\"\n              title=\"Tap to Click\"\n              description=\"Use tap gesture instead of press\"\n              setting=\"tapToClick\"\n            />\n          </View>\n        </View>\n\n        {/* Cognitive Support */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Cognitive Support</Text>\n          <View style={styles.settingsCard}>\n            <AccessibilityRow\n              icon=\"simplified\"\n              title=\"Simplified Interface\"\n              description=\"Reduce visual complexity and clutter\"\n              setting=\"simplifiedInterface\"\n              onInfoPress={() =>\n                Alert.alert(\n                  'Simplified Interface',\n                  'Reduces visual complexity by hiding advanced features and using simpler layouts.',\n                )\n              }\n            />\n\n            <AccessibilityRow\n              icon=\"animation\"\n              title=\"Reduced Animations\"\n              description=\"Minimize distracting animations\"\n              setting=\"reducedAnimations\"\n            />\n\n            <SliderRow\n              icon=\"timer\"\n              title=\"Timeout Duration\"\n              value={timeoutDuration}\n              onValueChange={setTimeoutDuration}\n              minimumValue={10}\n              maximumValue={120}\n              description=\"Automatic timeout delay\"\n              unit=\"s\"\n            />\n\n            <AccessibilityRow\n              icon=\"timer-off\"\n              title=\"Extended Timeouts\"\n              description=\"Give more time for interactions\"\n              setting=\"extendedTimeouts\"\n            />\n\n            <AccessibilityRow\n              icon=\"check-circle\"\n              title=\"Confirmation Dialogs\"\n              description=\"Ask before important actions\"\n              setting=\"confirmationDialogs\"\n            />\n\n            <AccessibilityRow\n              icon=\"record-voice-over\"\n              title=\"Read Aloud\"\n              description=\"Audio feedback for interface elements\"\n              setting=\"readAloud\"\n              onInfoPress={() =>\n                Alert.alert(\n                  'Read Aloud',\n                  'Uses text-to-speech to read interface elements and content aloud.',\n                )\n              }\n            />\n          </View>\n        </View>\n\n        {/* Audio & Feedback */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Audio & Feedback</Text>\n          <View style={styles.settingsCard}>\n            <AccessibilityRow\n              icon=\"visibility\"\n              title=\"Visual Indicators\"\n              description=\"Show visual cues for audio alerts\"\n              setting=\"visualIndicators\"\n            />\n\n            <AccessibilityRow\n              icon=\"vibration\"\n              title=\"Vibration Feedback\"\n              description=\"Use vibration for notifications\"\n              setting=\"vibrationFeedback\"\n            />\n\n            <AccessibilityRow\n              icon=\"volume-up\"\n              title=\"Sound Alerts\"\n              description=\"Audio notifications and feedback\"\n              setting=\"soundAlerts\"\n            />\n\n            <AccessibilityRow\n              icon=\"closed-caption\"\n              title=\"Captions\"\n              description=\"Show text captions for audio content\"\n              setting=\"captionsEnabled\"\n            />\n          </View>\n        </View>\n\n        {/* Accessibility Information */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Information</Text>\n          <View style={styles.infoCard}>\n            <View style={styles.infoItem}>\n              <Icon name=\"info-outline\" size={20} color={Colors.secondary} />\n              <Text style={styles.infoText}>\n                This app is designed to meet WCAG 2.1 AA accessibility standards.\n              </Text>\n            </View>\n            <View style={styles.infoItem}>\n              <Icon name=\"devices\" size={20} color={Colors.secondary} />\n              <Text style={styles.infoText}>\n                Works with iOS VoiceOver, Switch Control, and other assistive technologies.\n              </Text>\n            </View>\n            <View style={styles.infoItem}>\n              <Icon name=\"feedback\" size={20} color={Colors.secondary} />\n              <Text style={styles.infoText}>\n                Found an accessibility issue? Contact support for assistance.\n              </Text>\n            </View>\n          </View>\n        </View>\n\n        {/* Actions */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Actions</Text>\n          <View style={styles.actionCard}>\n            <TouchableOpacity style={styles.actionButton} onPress={handleAccessibilityShortcuts}>\n              <Icon name=\"settings\" size={24} color={Colors.secondary} />\n              <Text style={styles.actionButtonText}>Configure Shortcuts</Text>\n              <Icon name=\"chevron-right\" size={24} color={Colors.lightText} />\n            </TouchableOpacity>\n\n            <TouchableOpacity style={styles.actionButton} onPress={handleTutorialAccess}>\n              <Icon name=\"play-circle-outline\" size={24} color={Colors.success} />\n              <Text style={styles.actionButtonText}>Accessibility Tutorial</Text>\n              <Icon name=\"chevron-right\" size={24} color={Colors.lightText} />\n            </TouchableOpacity>\n\n            <TouchableOpacity\n              style={styles.actionButton}\n              onPress={() => Alert.alert('Info', 'Device accessibility settings would open here')}>\n              <Icon name=\"phone-android\" size={24} color={Colors.secondary} />\n              <Text style={styles.actionButtonText}>Device Settings</Text>\n              <Icon name=\"chevron-right\" size={24} color={Colors.lightText} />\n            </TouchableOpacity>\n\n            <TouchableOpacity style={styles.actionButton} onPress={handleResetToDefaults}>\n              <Icon name=\"restore\" size={24} color={Colors.warning} />\n              <Text style={[styles.actionButtonText, { color: Colors.warning }]}>\n                Reset to Defaults\n              </Text>\n              <Icon name=\"chevron-right\" size={24} color={Colors.lightText} />\n            </TouchableOpacity>\n          </View>\n        </View>\n      </ScrollView>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.primary,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    paddingTop: 48,\n  },\n  backButton: {\n    padding: 8,\n  },\n  headerTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.white,\n  },\n  helpButton: {\n    padding: 8,\n  },\n  content: {\n    flex: 1,\n  },\n  section: {\n    backgroundColor: Colors.white,\n    marginVertical: 8,\n    paddingVertical: 16,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n    paddingHorizontal: 16,\n    marginBottom: 16,\n  },\n  quickAccessCard: {\n    flexDirection: 'row',\n    paddingHorizontal: 16,\n    gap: 16,\n  },\n  quickAccessButton: {\n    flex: 1,\n    alignItems: 'center',\n    paddingVertical: 20,\n    backgroundColor: Colors.background,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  quickAccessText: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.text,\n    marginTop: 8,\n  },\n  settingsCard: {\n    paddingHorizontal: 16,\n  },\n  accessibilityRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.lightGray,\n  },\n  accessibilityInfo: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    flex: 1,\n    marginRight: 16,\n  },\n  accessibilityTextInfo: {\n    marginLeft: 12,\n    flex: 1,\n  },\n  titleRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n  accessibilityTitle: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.text,\n    marginBottom: 4,\n    flex: 1,\n  },\n  infoButton: {\n    padding: 4,\n  },\n  accessibilityDescription: {\n    fontSize: 14,\n    color: Colors.lightText,\n  },\n  sliderRow: {\n    paddingVertical: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.lightGray,\n  },\n  sliderHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 12,\n  },\n  sliderTitleInfo: {\n    marginLeft: 12,\n    flex: 1,\n  },\n  sliderTitle: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  sliderValue: {\n    fontSize: 14,\n    color: Colors.lightText,\n  },\n  slider: {\n    height: 40,\n  },\n  sliderThumb: {\n    backgroundColor: Colors.primary,\n    width: 20,\n    height: 20,\n  },\n  sliderTrack: {\n    height: 4,\n    borderRadius: 2,\n  },\n  infoCard: {\n    paddingHorizontal: 16,\n  },\n  infoItem: {\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    paddingVertical: 12,\n    gap: 12,\n  },\n  infoText: {\n    flex: 1,\n    fontSize: 14,\n    color: Colors.lightText,\n    lineHeight: 20,\n  },\n  actionCard: {\n    paddingHorizontal: 16,\n  },\n  actionButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingVertical: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.lightGray,\n  },\n  actionButtonText: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.text,\n    marginLeft: 12,\n    flex: 1,\n  },\n});\n\nexport default AccessibilityScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/settings/user/LocalizationScreen.tsx","messages":[{"ruleId":"react/no-unstable-nested-components","severity":1,"message":"Do not define components during render. React will see a new component type on every render and destroy the entire subtree’s DOM nodes and state (https://reactjs.org/docs/reconciliation.html#elements-of-different-types). Instead, move this component definition out of the parent component “LocalizationScreen” and pass data as props.","line":214,"column":24,"nodeType":"ArrowFunctionExpression","endLine":237,"endColumn":4},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'TouchableOpacity' is not defined.","line":215,"column":6,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":215,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":223,"column":8,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":223,"endColumn":12},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":225,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":225,"endColumn":14},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":228,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":228,"endColumn":14},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":232,"column":32,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":232,"endColumn":36},{"ruleId":"react/no-unstable-nested-components","severity":1,"message":"Do not define components during render. React will see a new component type on every render and destroy the entire subtree’s DOM nodes and state (https://reactjs.org/docs/reconciliation.html#elements-of-different-types). Instead, move this component definition out of the parent component “LocalizationScreen” and pass data as props.","line":239,"column":24,"nodeType":"ArrowFunctionExpression","endLine":266,"endColumn":4},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'TouchableOpacity' is not defined.","line":240,"column":6,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":240,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":249,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":249,"endColumn":14},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":254,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":254,"endColumn":14},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":257,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":257,"endColumn":14},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":261,"column":32,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":261,"endColumn":36},{"ruleId":"react/no-unstable-nested-components","severity":1,"message":"Do not define components during render. React will see a new component type on every render and destroy the entire subtree’s DOM nodes and state (https://reactjs.org/docs/reconciliation.html#elements-of-different-types). Instead, move this component definition out of the parent component “LocalizationScreen” and pass data as props.","line":268,"column":24,"nodeType":"ArrowFunctionExpression","endLine":282,"endColumn":4},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'TouchableOpacity' is not defined.","line":269,"column":6,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":269,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":273,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":273,"endColumn":14},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":274,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":274,"endColumn":14},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'TouchableOpacity' is not defined.","line":288,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":288,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":291,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":291,"endColumn":14},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'TouchableOpacity' is not defined.","line":292,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":292,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":300,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":300,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":305,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":305,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":306,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":306,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":310,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":310,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":311,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":311,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":315,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":315,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":316,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":316,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":324,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":324,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":334,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":334,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":344,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":344,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":354,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":354,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":358,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":358,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":359,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":359,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":373,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":373,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":374,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":374,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":388,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":388,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":389,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":389,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":403,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":403,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":404,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":404,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":416,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":416,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":417,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":417,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":433,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":433,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":437,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":437,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":438,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":438,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":452,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":452,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":453,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":453,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":467,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":467,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":468,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":468,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":482,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":482,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'TouchableOpacity' is not defined.","line":484,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":484,"endColumn":30},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":486,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":486,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'TouchableOpacity' is not defined.","line":490,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":490,"endColumn":30},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":492,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":492,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'TouchableOpacity' is not defined.","line":496,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":496,"endColumn":30},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":500,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":500,"endColumn":20}],"suppressedMessages":[],"errorCount":51,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { StyleSheet, View, ScrollView, Switch } from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation } from '@react-navigation/native';\n\n// Clover POS Color Scheme\nconst Colors = {\n  primary: '#00A651',\n  secondary: '#0066CC',\n  success: '#00A651',\n  warning: '#FF6B35',\n  danger: '#E74C3C',\n  background: '#F5F5F5',\n  white: '#FFFFFF',\n  lightGray: '#E5E5E5',\n  mediumGray: '#999999',\n  darkGray: '#666666',\n  text: '#333333',\n  lightText: '#666666',\n  border: '#DDDDDD',\n};\n\ninterface Language {\n  code: string;\n  name: string;\n  nativeName: string;\n  flag: string;\n  supported: boolean;\n}\n\ninterface Currency {\n  code: string;\n  name: string;\n  symbol: string;\n  supported: boolean;\n}\n\ninterface TimeZone {\n  id: string;\n  name: string;\n  offset: string;\n  region: string;\n}\n\nconst LocalizationScreen: React.FC = () => {\n  const navigation = useNavigation();\n\n  const [languages] = useState<Language[]>([\n    { code: 'en-GB', name: 'English (__UK)', nativeName: 'English', flag: '🇬🇧', supported: true },\n    { code: 'en-US', name: 'English (__US)', nativeName: 'English', flag: '🇺🇸', supported: true },\n    { code: 'fr-FR', name: 'French', nativeName: 'Français', flag: '🇫🇷', supported: true },\n    { code: 'de-DE', name: 'German', nativeName: 'Deutsch', flag: '🇩🇪', supported: true },\n    { code: 'es-ES', name: 'Spanish', nativeName: 'Español', flag: '🇪🇸', supported: true },\n    { code: 'it-IT', name: 'Italian', nativeName: 'Italiano', flag: '🇮🇹', supported: true },\n    { code: 'pt-PT', name: 'Portuguese', nativeName: 'Português', flag: '🇵🇹', supported: true },\n    { code: 'nl-NL', name: 'Dutch', nativeName: 'Nederlands', flag: '🇳🇱', supported: true },\n    { code: 'sv-SE', name: 'Swedish', nativeName: 'Svenska', flag: '🇸🇪', supported: false },\n    { code: 'da-DK', name: 'Danish', nativeName: 'Dansk', flag: '🇩🇰', supported: false },\n    { code: 'no-NO', name: 'Norwegian', nativeName: 'Norsk', flag: '🇳🇴', supported: false },\n    { code: 'pl-PL', name: 'Polish', nativeName: 'Polski', flag: '🇵🇱', supported: false },\n  ]);\n\n  const [currencies] = useState<Currency[]>([\n    { code: 'GBP', name: 'British Pound', symbol: '£', supported: true },\n    { code: 'EUR', name: 'Euro', symbol: '€', supported: true },\n    { code: 'USD', name: 'US Dollar', symbol: '$', supported: true },\n    { code: 'CAD', name: 'Canadian Dollar', symbol: 'C$', supported: true },\n    { code: 'AUD', name: 'Australian Dollar', symbol: 'A$', supported: true },\n    { code: 'CHF', name: 'Swiss Franc', symbol: 'CHF', supported: true },\n    { code: 'SEK', name: 'Swedish Krona', symbol: 'kr', supported: false },\n    { code: 'DKK', name: 'Danish Krone', symbol: 'kr', supported: false },\n    { code: 'NOK', name: 'Norwegian Krone', symbol: 'kr', supported: false },\n    { code: 'PLN', name: 'Polish Zloty', symbol: 'zł', supported: false },\n  ]);\n\n  const [timeZones] = useState<TimeZone[]>([\n    { id: 'Europe/London', name: 'London', offset: 'GMT+0', region: 'United Kingdom' },\n    { id: 'Europe/Paris', name: 'Paris', offset: 'GMT+1', region: 'France' },\n    { id: 'Europe/Berlin', name: 'Berlin', offset: 'GMT+1', region: 'Germany' },\n    { id: 'Europe/Madrid', name: 'Madrid', offset: 'GMT+1', region: 'Spain' },\n    { id: 'Europe/Rome', name: 'Rome', offset: 'GMT+1', region: 'Italy' },\n    { id: 'Europe/Amsterdam', name: 'Amsterdam', offset: 'GMT+1', region: 'Netherlands' },\n    { id: 'Europe/Stockholm', name: 'Stockholm', offset: 'GMT+1', region: 'Sweden' },\n    { id: 'Europe/Copenhagen', name: 'Copenhagen', offset: 'GMT+1', region: 'Denmark' },\n    { id: 'Europe/Oslo', name: 'Oslo', offset: 'GMT+1', region: 'Norway' },\n    { id: 'America/New_York', name: 'New York', offset: 'GMT-5', region: 'United States' },\n    { id: 'America/Los_Angeles', name: 'Los Angeles', offset: 'GMT-8', region: 'United States' },\n    { id: 'America/Toronto', name: 'Toronto', offset: 'GMT-5', region: 'Canada' },\n  ]);\n\n  const [selectedLanguage, setSelectedLanguage] = useState('en-GB');\n  const [selectedCurrency, setSelectedCurrency] = useState('GBP');\n  const [selectedTimeZone, setSelectedTimeZone] = useState('Europe/London');\n\n  // Regional settings\n  const [regionalSettings, setRegionalSettings] = useState({\n    use24HourFormat: _true,\n    showLeadingZero: _true,\n    useDDMMYYYYFormat: _true,\n    useMetricSystem: _true,\n    showCurrencySymbolFirst: _true,\n    useThousandsSeparator: _true,\n    decimalPlaces: 2,\n  });\n\n  // Localization features\n  const [localizationFeatures, setLocalizationFeatures] = useState({\n    autoDetectLocation: _true,\n    syncWithDevice: _false,\n    rightToLeftSupport: _false,\n    localizedNumbers: _true,\n    localizedCurrency: _true,\n    localizedDates: _true,\n  });\n\n  const handleLanguageSelect = (languageCode: _string) => {\n    const language = languages.find(l => l.code === languageCode);\n\n    if (!language?.supported) {\n      Alert.alert(\n        'Language Not Available',\n        `${language?.name} is not currently supported. We're working to add more languages in future updates.`,\n        [{ text: 'OK' }],\n      );\n      return;\n    }\n\n    setSelectedLanguage(__languageCode);\n    Alert.alert(\n      'Language Changed',\n      `Language changed to ${language.name}. The app will restart to apply changes.`,\n      [{ text: 'OK' }],\n    );\n  };\n\n  const handleCurrencySelect = (currencyCode: _string) => {\n    const currency = currencies.find(c => c.code === currencyCode);\n\n    if (!currency?.supported) {\n      Alert.alert(\n        'Currency Not Available',\n        `${currency?.name} is not currently supported. We're working to add more currencies.`,\n        [{ text: 'OK' }],\n      );\n      return;\n    }\n\n    setSelectedCurrency(__currencyCode);\n    Alert.alert('Success', `Currency changed to ${currency.name} (${currency.symbol})`);\n  };\n\n  const handleTimeZoneSelect = (timeZoneId: _string) => {\n    const timeZone = timeZones.find(tz => tz.id === timeZoneId);\n    setSelectedTimeZone(__timeZoneId);\n    Alert.alert('Success', `Time zone changed to ${timeZone?.name} (${timeZone?.offset})`);\n  };\n\n  const toggleRegionalSetting = (setting: keyof typeof regionalSettings) => {\n    setRegionalSettings(prev => ({\n      ...prev,\n      [setting]: !prev[setting],\n    }));\n  };\n\n  const toggleLocalizationFeature = (feature: keyof typeof localizationFeatures) => {\n    setLocalizationFeatures(prev => ({\n      ...prev,\n      [feature]: !prev[feature],\n    }));\n  };\n\n  const handleImportLocale = () => {\n    Alert.alert('Import Locale Settings', 'Import settings from another device or backup?', [\n      { text: 'Cancel', style: 'cancel' },\n      {\n        text: 'From File',\n        onPress: () => {\n          Alert.alert('Info', 'File browser would open here');\n        },\n      },\n      {\n        text: 'From Device',\n        onPress: () => {\n          Alert.alert('Info', 'Device locale detection would run here');\n        },\n      },\n    ]);\n  };\n\n  const handleExportLocale = () => {\n    Alert.alert('Export Locale Settings', 'Export current settings for backup or transfer?', [\n      { text: 'Cancel', style: 'cancel' },\n      {\n        text: 'Export',\n        onPress: () => {\n          Alert.alert('Success', 'Locale settings exported successfully!');\n        },\n      },\n    ]);\n  };\n\n  const getSelectedLanguage = () => {\n    return languages.find(l => l.code === selectedLanguage);\n  };\n\n  const getSelectedCurrency = () => {\n    return currencies.find(c => c.code === selectedCurrency);\n  };\n\n  const getSelectedTimeZone = () => {\n    return timeZones.find(tz => tz.id === selectedTimeZone);\n  };\n\n  const LanguageItem = ({ language }: { language: Language }) => (\n    <TouchableOpacity\n      style={[\n        styles.languageItem,\n        selectedLanguage === language.code && styles.selectedItem,\n        !language.supported && styles.disabledItem,\n      ]}\n      onPress={() => handleLanguageSelect(language.code)}\n      disabled={!language.supported}>\n      <Text style={styles.flagText}>{language.flag}</Text>\n      <View style={styles.languageInfo}>\n        <Text style={[styles.languageName, !language.supported && styles.disabledText]}>\n          {language.name}\n        </Text>\n        <Text style={[styles.languageNative, !language.supported && styles.disabledText]}>\n          {language.nativeName}\n        </Text>\n      </View>\n      {!language.supported && <Text style={styles.comingSoonText}>Coming Soon</Text>}\n      {selectedLanguage === language.code && (\n        <Icon name=\"check-circle\" size={24} color={Colors.primary} />\n      )}\n    </TouchableOpacity>\n  );\n\n  const CurrencyItem = ({ currency }: { currency: Currency }) => (\n    <TouchableOpacity\n      style={[\n        styles.currencyItem,\n        selectedCurrency === currency.code && styles.selectedItem,\n        !currency.supported && styles.disabledItem,\n      ]}\n      onPress={() => handleCurrencySelect(currency.code)}\n      disabled={!currency.supported}>\n      <View style={styles.currencySymbol}>\n        <Text style={[styles.currencySymbolText, !currency.supported && styles.disabledText]}>\n          {currency.symbol}\n        </Text>\n      </View>\n      <View style={styles.currencyInfo}>\n        <Text style={[styles.currencyName, !currency.supported && styles.disabledText]}>\n          {currency.name}\n        </Text>\n        <Text style={[styles.currencyCode, !currency.supported && styles.disabledText]}>\n          {currency.code}\n        </Text>\n      </View>\n      {!currency.supported && <Text style={styles.comingSoonText}>Coming Soon</Text>}\n      {selectedCurrency === currency.code && (\n        <Icon name=\"check-circle\" size={24} color={Colors.primary} />\n      )}\n    </TouchableOpacity>\n  );\n\n  const TimeZoneItem = ({ timeZone }: { timeZone: TimeZone }) => (\n    <TouchableOpacity\n      style={[styles.timeZoneItem, selectedTimeZone === timeZone.id && styles.selectedItem]}\n      onPress={() => handleTimeZoneSelect(timeZone.id)}>\n      <View style={styles.timeZoneInfo}>\n        <Text style={styles.timeZoneName}>{timeZone.name}</Text>\n        <Text style={styles.timeZoneDetails}>\n          {timeZone.region} • {timeZone.offset}\n        </Text>\n      </View>\n      {selectedTimeZone === timeZone.id && (\n        <Icon name=\"check-circle\" size={24} color={Colors.primary} />\n      )}\n    </TouchableOpacity>\n  );\n\n  return (\n    <View style={styles.container}>\n      {/* Header */}\n      <View style={styles.header}>\n        <TouchableOpacity onPress={() => navigation.goBack()} style={styles.backButton}>\n          <Icon name=\"arrow-back\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n        <Text style={styles.headerTitle}>Language & Region</Text>\n        <TouchableOpacity style={styles.exportButton} onPress={handleExportLocale}>\n          <Icon name=\"file-download\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n      </View>\n\n      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n        {/* Current Settings Summary */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Current Settings</Text>\n          <View style={styles.summaryCard}>\n            <View style={styles.summaryRow}>\n              <View style={styles.summaryItem}>\n                <Icon name=\"language\" size={24} color={Colors.primary} />\n                <Text style={styles.summaryLabel}>Language</Text>\n                <Text style={styles.summaryValue}>{getSelectedLanguage()?.name}</Text>\n              </View>\n              <View style={styles.summaryItem}>\n                <Icon name=\"attach-money\" size={24} color={Colors.primary} />\n                <Text style={styles.summaryLabel}>Currency</Text>\n                <Text style={styles.summaryValue}>{getSelectedCurrency()?.code}</Text>\n              </View>\n              <View style={styles.summaryItem}>\n                <Icon name=\"schedule\" size={24} color={Colors.primary} />\n                <Text style={styles.summaryLabel}>Time Zone</Text>\n                <Text style={styles.summaryValue}>{getSelectedTimeZone()?.name}</Text>\n              </View>\n            </View>\n          </View>\n        </View>\n\n        {/* Language Selection */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Language</Text>\n          <View style={styles.languageList}>\n            {languages.map(language => (\n              <LanguageItem key={language.code} language={language} />\n            ))}\n          </View>\n        </View>\n\n        {/* Currency Selection */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Currency</Text>\n          <View style={styles.currencyList}>\n            {currencies.map(currency => (\n              <CurrencyItem key={currency.code} currency={currency} />\n            ))}\n          </View>\n        </View>\n\n        {/* Time Zone Selection */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Time Zone</Text>\n          <View style={styles.timeZoneList}>\n            {timeZones.map(timeZone => (\n              <TimeZoneItem key={timeZone.id} timeZone={timeZone} />\n            ))}\n          </View>\n        </View>\n\n        {/* Regional Formats */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Regional Formats</Text>\n          <View style={styles.settingsCard}>\n            <View style={styles.settingRow}>\n              <View style={styles.settingInfo}>\n                <Text style={styles.settingLabel}>24-hour time format</Text>\n                <Text style={styles.settingDescription}>\n                  Display time as 15:30 instead of 3:30 PM\n                </Text>\n              </View>\n              <Switch\n                value={regionalSettings.use24HourFormat}\n                onValueChange={() => toggleRegionalSetting('use24HourFormat')}\n                trackColor={{ false: Colors.lightGray, true: Colors.primary }}\n                thumbColor={Colors.white}\n              />\n            </View>\n\n            <View style={styles.settingRow}>\n              <View style={styles.settingInfo}>\n                <Text style={styles.settingLabel}>DD/MM/YYYY date format</Text>\n                <Text style={styles.settingDescription}>\n                  Display dates as 31/12/2024 instead of 12/31/2024\n                </Text>\n              </View>\n              <Switch\n                value={regionalSettings.useDDMMYYYYFormat}\n                onValueChange={() => toggleRegionalSetting('useDDMMYYYYFormat')}\n                trackColor={{ false: Colors.lightGray, true: Colors.primary }}\n                thumbColor={Colors.white}\n              />\n            </View>\n\n            <View style={styles.settingRow}>\n              <View style={styles.settingInfo}>\n                <Text style={styles.settingLabel}>Metric system</Text>\n                <Text style={styles.settingDescription}>\n                  Use metric units (__cm, _kg) instead of imperial\n                </Text>\n              </View>\n              <Switch\n                value={regionalSettings.useMetricSystem}\n                onValueChange={() => toggleRegionalSetting('useMetricSystem')}\n                trackColor={{ false: Colors.lightGray, true: Colors.primary }}\n                thumbColor={Colors.white}\n              />\n            </View>\n\n            <View style={styles.settingRow}>\n              <View style={styles.settingInfo}>\n                <Text style={styles.settingLabel}>Currency symbol first</Text>\n                <Text style={styles.settingDescription}>Display as £10.50 instead of 10.50£</Text>\n              </View>\n              <Switch\n                value={regionalSettings.showCurrencySymbolFirst}\n                onValueChange={() => toggleRegionalSetting('showCurrencySymbolFirst')}\n                trackColor={{ false: Colors.lightGray, true: Colors.primary }}\n                thumbColor={Colors.white}\n              />\n            </View>\n\n            <View style={styles.settingRow}>\n              <View style={styles.settingInfo}>\n                <Text style={styles.settingLabel}>Thousands separator</Text>\n                <Text style={styles.settingDescription}>\n                  Display as 1,000.50 instead of 1000.50\n                </Text>\n              </View>\n              <Switch\n                value={regionalSettings.useThousandsSeparator}\n                onValueChange={() => toggleRegionalSetting('useThousandsSeparator')}\n                trackColor={{ false: Colors.lightGray, true: Colors.primary }}\n                thumbColor={Colors.white}\n              />\n            </View>\n          </View>\n        </View>\n\n        {/* Advanced Features */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Advanced Features</Text>\n          <View style={styles.settingsCard}>\n            <View style={styles.settingRow}>\n              <View style={styles.settingInfo}>\n                <Text style={styles.settingLabel}>Auto-detect location</Text>\n                <Text style={styles.settingDescription}>\n                  Automatically set region based on device location\n                </Text>\n              </View>\n              <Switch\n                value={localizationFeatures.autoDetectLocation}\n                onValueChange={() => toggleLocalizationFeature('autoDetectLocation')}\n                trackColor={{ false: Colors.lightGray, true: Colors.primary }}\n                thumbColor={Colors.white}\n              />\n            </View>\n\n            <View style={styles.settingRow}>\n              <View style={styles.settingInfo}>\n                <Text style={styles.settingLabel}>Sync with device</Text>\n                <Text style={styles.settingDescription}>\n                  Use device language and region settings\n                </Text>\n              </View>\n              <Switch\n                value={localizationFeatures.syncWithDevice}\n                onValueChange={() => toggleLocalizationFeature('syncWithDevice')}\n                trackColor={{ false: Colors.lightGray, true: Colors.primary }}\n                thumbColor={Colors.white}\n              />\n            </View>\n\n            <View style={styles.settingRow}>\n              <View style={styles.settingInfo}>\n                <Text style={styles.settingLabel}>Localized numbers</Text>\n                <Text style={styles.settingDescription}>Format numbers according to region</Text>\n              </View>\n              <Switch\n                value={localizationFeatures.localizedNumbers}\n                onValueChange={() => toggleLocalizationFeature('localizedNumbers')}\n                trackColor={{ false: Colors.lightGray, true: Colors.primary }}\n                thumbColor={Colors.white}\n              />\n            </View>\n          </View>\n        </View>\n\n        {/* Actions */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Locale Management</Text>\n          <View style={styles.actionCard}>\n            <TouchableOpacity style={styles.actionButton} onPress={handleImportLocale}>\n              <Icon name=\"file-upload\" size={24} color={Colors.secondary} />\n              <Text style={styles.actionButtonText}>Import Settings</Text>\n              <Icon name=\"chevron-right\" size={24} color={Colors.lightText} />\n            </TouchableOpacity>\n\n            <TouchableOpacity style={styles.actionButton} onPress={handleExportLocale}>\n              <Icon name=\"file-download\" size={24} color={Colors.secondary} />\n              <Text style={styles.actionButtonText}>Export Settings</Text>\n              <Icon name=\"chevron-right\" size={24} color={Colors.lightText} />\n            </TouchableOpacity>\n\n            <TouchableOpacity\n              style={styles.actionButton}\n              onPress={() => Alert.alert('Info', 'Device locale sync would be implemented here')}>\n              <Icon name=\"sync\" size={24} color={Colors.success} />\n              <Text style={styles.actionButtonText}>Sync with Device</Text>\n              <Icon name=\"chevron-right\" size={24} color={Colors.lightText} />\n            </TouchableOpacity>\n          </View>\n        </View>\n      </ScrollView>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.primary,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    paddingTop: 48,\n  },\n  backButton: {\n    padding: 8,\n  },\n  headerTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.white,\n  },\n  exportButton: {\n    padding: 8,\n  },\n  content: {\n    flex: 1,\n  },\n  section: {\n    backgroundColor: Colors.white,\n    marginVertical: 8,\n    paddingVertical: 16,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n    paddingHorizontal: 16,\n    marginBottom: 16,\n  },\n  summaryCard: {\n    paddingHorizontal: 16,\n  },\n  summaryRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n  },\n  summaryItem: {\n    alignItems: 'center',\n    flex: 1,\n  },\n  summaryLabel: {\n    fontSize: 14,\n    color: Colors.lightText,\n    marginTop: 8,\n    marginBottom: 4,\n  },\n  summaryValue: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.text,\n    textAlign: 'center',\n  },\n  languageList: {\n    paddingHorizontal: 16,\n  },\n  languageItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingVertical: 12,\n    paddingHorizontal: 16,\n    backgroundColor: Colors.background,\n    borderRadius: 12,\n    marginBottom: 8,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  selectedItem: {\n    backgroundColor: Colors.primary + '20',\n    borderColor: Colors.primary,\n  },\n  disabledItem: {\n    opacity: 0.5,\n  },\n  flagText: {\n    fontSize: 24,\n    marginRight: 12,\n  },\n  languageInfo: {\n    flex: 1,\n  },\n  languageName: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.text,\n    marginBottom: 2,\n  },\n  languageNative: {\n    fontSize: 14,\n    color: Colors.lightText,\n  },\n  comingSoonText: {\n    fontSize: 12,\n    color: Colors.warning,\n    fontWeight: '500',\n    marginRight: 8,\n  },\n  disabledText: {\n    color: Colors.mediumGray,\n  },\n  currencyList: {\n    paddingHorizontal: 16,\n  },\n  currencyItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingVertical: 12,\n    paddingHorizontal: 16,\n    backgroundColor: Colors.background,\n    borderRadius: 12,\n    marginBottom: 8,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  currencySymbol: {\n    width: 40,\n    height: 40,\n    borderRadius: 20,\n    backgroundColor: Colors.lightGray,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginRight: 12,\n  },\n  currencySymbolText: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: Colors.primary,\n  },\n  currencyInfo: {\n    flex: 1,\n  },\n  currencyName: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.text,\n    marginBottom: 2,\n  },\n  currencyCode: {\n    fontSize: 14,\n    color: Colors.lightText,\n  },\n  timeZoneList: {\n    paddingHorizontal: 16,\n  },\n  timeZoneItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 12,\n    paddingHorizontal: 16,\n    backgroundColor: Colors.background,\n    borderRadius: 12,\n    marginBottom: 8,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  timeZoneInfo: {\n    flex: 1,\n  },\n  timeZoneName: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.text,\n    marginBottom: 2,\n  },\n  timeZoneDetails: {\n    fontSize: 14,\n    color: Colors.lightText,\n  },\n  settingsCard: {\n    paddingHorizontal: 16,\n  },\n  settingRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.lightGray,\n  },\n  settingInfo: {\n    flex: 1,\n    marginRight: 16,\n  },\n  settingLabel: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  settingDescription: {\n    fontSize: 14,\n    color: Colors.lightText,\n  },\n  actionCard: {\n    paddingHorizontal: 16,\n  },\n  actionButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingVertical: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.lightGray,\n  },\n  actionButtonText: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.text,\n    marginLeft: 12,\n    flex: 1,\n  },\n});\n\nexport default LocalizationScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/settings/user/NotificationSettingsScreen.tsx","messages":[{"ruleId":"react/no-unstable-nested-components","severity":1,"message":"Do not define components during render. React will see a new component type on every render and destroy the entire subtree’s DOM nodes and state (https://reactjs.org/docs/reconciliation.html#elements-of-different-types). Instead, move this component definition out of the parent component “NotificationSettingsScreen” and pass data as props.","line":222,"column":27,"nodeType":"ArrowFunctionExpression","endLine":253,"endColumn":4},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":239,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":239,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":240,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":240,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'TouchableOpacity' is not defined.","line":261,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":261,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":264,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":264,"endColumn":14},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'TouchableOpacity' is not defined.","line":265,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":265,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":273,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":273,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":286,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":286,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":316,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":316,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":326,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":326,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":329,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":329,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":352,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":352,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":355,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":355,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":375,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":375,"endColumn":18},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":376,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":376,"endColumn":18},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":424,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":424,"endColumn":18},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":425,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":425,"endColumn":18},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":465,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":465,"endColumn":18},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":466,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":466,"endColumn":18},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":506,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":506,"endColumn":18},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":507,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":507,"endColumn":18},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":547,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":547,"endColumn":18},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":548,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":548,"endColumn":18},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":587,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":587,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'TouchableOpacity' is not defined.","line":589,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":589,"endColumn":30},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":591,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":591,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'TouchableOpacity' is not defined.","line":595,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":595,"endColumn":30},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":597,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":597,"endColumn":20}],"suppressedMessages":[],"errorCount":27,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { StyleSheet, View, ScrollView, Switch } from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation } from '@react-navigation/native';\n\n// Clover POS Color Scheme\nconst Colors = {\n  primary: '#00A651',\n  secondary: '#0066CC',\n  success: '#00A651',\n  warning: '#FF6B35',\n  danger: '#E74C3C',\n  background: '#F5F5F5',\n  white: '#FFFFFF',\n  lightGray: '#E5E5E5',\n  mediumGray: '#999999',\n  darkGray: '#666666',\n  text: '#333333',\n  lightText: '#666666',\n  border: '#DDDDDD',\n};\n\ninterface NotificationSettings {\n  // General notifications\n  masterEnabled: boolean;\n  soundEnabled: boolean;\n  vibrationEnabled: boolean;\n  badgeEnabled: boolean;\n\n  // Business notifications\n  newOrders: boolean;\n  lowInventory: boolean;\n  dailyReports: boolean;\n  weeklyReports: boolean;\n  monthlyReports: boolean;\n\n  // Employee notifications\n  clockInOut: boolean;\n  missedBreaks: boolean;\n  overtime: boolean;\n  scheduleChanges: boolean;\n\n  // Payment notifications\n  failedPayments: boolean;\n  chargebacks: boolean;\n  refunds: boolean;\n  tipAdjustments: boolean;\n\n  // System notifications\n  updates: boolean;\n  maintenance: boolean;\n  security: boolean;\n  backups: boolean;\n\n  // Marketing notifications\n  promotions: boolean;\n  productNews: boolean;\n  trainingTips: boolean;\n  surveys: boolean;\n}\n\nconst NotificationSettingsScreen: React.FC = () => {\n  const navigation = useNavigation();\n\n  const [settings, setSettings] = useState<NotificationSettings>({\n    // General\n    masterEnabled: _true,\n    soundEnabled: _true,\n    vibrationEnabled: _true,\n    badgeEnabled: _true,\n\n    // Business\n    newOrders: _true,\n    lowInventory: _true,\n    dailyReports: _true,\n    weeklyReports: _true,\n    monthlyReports: _false,\n\n    // Employee\n    clockInOut: _true,\n    missedBreaks: _true,\n    overtime: _true,\n    scheduleChanges: _true,\n\n    // Payment\n    failedPayments: _true,\n    chargebacks: _true,\n    refunds: _true,\n    tipAdjustments: _false,\n\n    // System\n    updates: _true,\n    maintenance: _true,\n    security: _true,\n    backups: _false,\n\n    // Marketing\n    promotions: _false,\n    productNews: _false,\n    trainingTips: _true,\n    surveys: _false,\n  });\n\n  const [quietHoursEnabled, setQuietHoursEnabled] = useState(__true);\n  const [emergencyOverride, setEmergencyOverride] = useState(__true);\n\n  const toggleSetting = (setting: keyof NotificationSettings) => {\n    setSettings(prev => {\n      const newSettings = {\n        ...prev,\n        [setting]: !prev[setting],\n      };\n\n      // If master is disabled, disable all others\n      if (setting === 'masterEnabled' && !prev.masterEnabled === false) {\n        return {\n          ...newSettings,\n          soundEnabled: _false,\n          vibrationEnabled: _false,\n          badgeEnabled: _false,\n        };\n      }\n\n      return newSettings;\n    });\n  };\n\n  const handleTestNotification = () => {\n    if (!settings.masterEnabled) {\n      Alert.alert('Notifications Disabled', 'Please enable notifications first.');\n      return;\n    }\n\n    Alert.alert(\n      'Test Notification',\n      'This is a test notification. You should see this appear as a system notification.',\n      [{ text: 'OK' }],\n    );\n  };\n\n  const handleResetToDefaults = () => {\n    Alert.alert(\n      'Reset to Defaults',\n      'This will reset all notification settings to their default values. Continue?',\n      [\n        { text: 'Cancel', style: 'cancel' },\n        {\n          text: 'Reset',\n          style: 'destructive',\n          onPress: () => {\n            setSettings({\n              masterEnabled: _true,\n              soundEnabled: _true,\n              vibrationEnabled: _true,\n              badgeEnabled: _true,\n              newOrders: _true,\n              lowInventory: _true,\n              dailyReports: _true,\n              weeklyReports: _true,\n              monthlyReports: _false,\n              clockInOut: _true,\n              missedBreaks: _true,\n              overtime: _true,\n              scheduleChanges: _true,\n              failedPayments: _true,\n              chargebacks: _true,\n              refunds: _true,\n              tipAdjustments: _false,\n              updates: _true,\n              maintenance: _true,\n              security: _true,\n              backups: _false,\n              promotions: _false,\n              productNews: _false,\n              trainingTips: _true,\n              surveys: _false,\n            });\n            Alert.alert('Success', 'Notification settings reset to defaults.');\n          },\n        },\n      ],\n    );\n  };\n\n  const getEnabledCount = (\n    category: 'business' | 'employee' | 'payment' | 'system' | 'marketing',\n  ) => {\n    const categorySettings = {\n      business: [\n        settings.newOrders,\n        settings.lowInventory,\n        settings.dailyReports,\n        settings.weeklyReports,\n        settings.monthlyReports,\n      ],\n      employee: [\n        settings.clockInOut,\n        settings.missedBreaks,\n        settings.overtime,\n        settings.scheduleChanges,\n      ],\n      payment: [\n        settings.failedPayments,\n        settings.chargebacks,\n        settings.refunds,\n        settings.tipAdjustments,\n      ],\n      system: [settings.updates, settings.maintenance, settings.security, settings.backups],\n      marketing: [\n        settings.promotions,\n        settings.productNews,\n        settings.trainingTips,\n        settings.surveys,\n      ],\n    };\n\n    const enabled = categorySettings[category].filter(__Boolean).length;\n    const total = categorySettings[category].length;\n    return `${enabled}/${total}`;\n  };\n\n  const NotificationRow = ({\n    icon,\n    title,\n    description,\n    setting,\n    disabled = false,\n  }: {\n    icon: string;\n    title: string;\n    description: string;\n    setting: keyof NotificationSettings;\n    disabled?: boolean;\n  }) => (\n    <View style={[styles.notificationRow, disabled && styles.disabledRow]}>\n      <View style={styles.notificationInfo}>\n        <Icon name={icon} size={24} color={disabled ? Colors.mediumGray : Colors.secondary} />\n        <View style={styles.notificationTextInfo}>\n          <Text style={[styles.notificationTitle, disabled && styles.disabledText]}>{title}</Text>\n          <Text style={[styles.notificationDescription, disabled && styles.disabledText]}>\n            {description}\n          </Text>\n        </View>\n      </View>\n      <Switch\n        value={settings[setting] && !disabled}\n        onValueChange={() => !disabled && toggleSetting(__setting)}\n        disabled={disabled}\n        trackColor={{ false: Colors.lightGray, true: Colors.primary }}\n        thumbColor={Colors.white}\n      />\n    </View>\n  );\n\n  const masterDisabled = !settings.masterEnabled;\n\n  return (\n    <View style={styles.container}>\n      {/* Header */}\n      <View style={styles.header}>\n        <TouchableOpacity onPress={() => navigation.goBack()} style={styles.backButton}>\n          <Icon name=\"arrow-back\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n        <Text style={styles.headerTitle}>Notifications</Text>\n        <TouchableOpacity style={styles.testButton} onPress={handleTestNotification}>\n          <Icon name=\"notifications\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n      </View>\n\n      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n        {/* Master Control */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Notification Control</Text>\n          <View style={styles.settingsCard}>\n            <NotificationRow\n              icon=\"notifications\"\n              title=\"Enable Notifications\"\n              description=\"Master switch for all notifications\"\n              setting=\"masterEnabled\"\n            />\n          </View>\n        </View>\n\n        {/* General Settings */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>General Settings</Text>\n          <View style={styles.settingsCard}>\n            <NotificationRow\n              icon=\"volume-up\"\n              title=\"Sound\"\n              description=\"Play sound for notifications\"\n              setting=\"soundEnabled\"\n              disabled={masterDisabled}\n            />\n\n            <NotificationRow\n              icon=\"vibration\"\n              title=\"Vibration\"\n              description=\"Vibrate device for notifications\"\n              setting=\"vibrationEnabled\"\n              disabled={masterDisabled}\n            />\n\n            <NotificationRow\n              icon=\"circle-notifications\"\n              title=\"Badge Count\"\n              description=\"Show notification count on app icon\"\n              setting=\"badgeEnabled\"\n              disabled={masterDisabled}\n            />\n          </View>\n        </View>\n\n        {/* Quiet Hours */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Quiet Hours</Text>\n          <View style={styles.settingsCard}>\n            <View style={styles.notificationRow}>\n              <View style={styles.notificationInfo}>\n                <Icon\n                  name=\"do-not-disturb\"\n                  size={24}\n                  color={masterDisabled ? Colors.mediumGray : Colors.secondary}\n                />\n                <View style={styles.notificationTextInfo}>\n                  <Text style={[styles.notificationTitle, masterDisabled && styles.disabledText]}>\n                    Quiet Hours (10 PM - 8 AM)\n                  </Text>\n                  <Text\n                    style={[styles.notificationDescription, masterDisabled && styles.disabledText]}>\n                    Reduce notifications during sleep hours\n                  </Text>\n                </View>\n              </View>\n              <Switch\n                value={quietHoursEnabled && !masterDisabled}\n                onValueChange={setQuietHoursEnabled}\n                disabled={masterDisabled}\n                trackColor={{ false: Colors.lightGray, true: Colors.primary }}\n                thumbColor={Colors.white}\n              />\n            </View>\n\n            <View style={styles.notificationRow}>\n              <View style={styles.notificationInfo}>\n                <Icon\n                  name=\"priority-high\"\n                  size={24}\n                  color={masterDisabled ? Colors.mediumGray : Colors.danger}\n                />\n                <View style={styles.notificationTextInfo}>\n                  <Text style={[styles.notificationTitle, masterDisabled && styles.disabledText]}>\n                    Emergency Override\n                  </Text>\n                  <Text\n                    style={[styles.notificationDescription, masterDisabled && styles.disabledText]}>\n                    Critical alerts ignore quiet hours\n                  </Text>\n                </View>\n              </View>\n              <Switch\n                value={emergencyOverride && !masterDisabled}\n                onValueChange={setEmergencyOverride}\n                disabled={masterDisabled}\n                trackColor={{ false: Colors.lightGray, true: Colors.primary }}\n                thumbColor={Colors.white}\n              />\n            </View>\n          </View>\n        </View>\n\n        {/* Business Notifications */}\n        <View style={styles.section}>\n          <View style={styles.sectionHeader}>\n            <Text style={styles.sectionTitle}>Business Alerts</Text>\n            <Text style={styles.sectionCount}>{getEnabledCount('business')} enabled</Text>\n          </View>\n          <View style={styles.settingsCard}>\n            <NotificationRow\n              icon=\"shopping-cart\"\n              title=\"New Orders\"\n              description=\"Customer places a new order\"\n              setting=\"newOrders\"\n              disabled={masterDisabled}\n            />\n\n            <NotificationRow\n              icon=\"inventory\"\n              title=\"Low Inventory\"\n              description=\"Items running low on stock\"\n              setting=\"lowInventory\"\n              disabled={masterDisabled}\n            />\n\n            <NotificationRow\n              icon=\"today\"\n              title=\"Daily Reports\"\n              description=\"End-of-day sales summary\"\n              setting=\"dailyReports\"\n              disabled={masterDisabled}\n            />\n\n            <NotificationRow\n              icon=\"date-range\"\n              title=\"Weekly Reports\"\n              description=\"Weekly business performance\"\n              setting=\"weeklyReports\"\n              disabled={masterDisabled}\n            />\n\n            <NotificationRow\n              icon=\"calendar-month\"\n              title=\"Monthly Reports\"\n              description=\"Monthly financial summary\"\n              setting=\"monthlyReports\"\n              disabled={masterDisabled}\n            />\n          </View>\n        </View>\n\n        {/* Employee Notifications */}\n        <View style={styles.section}>\n          <View style={styles.sectionHeader}>\n            <Text style={styles.sectionTitle}>Employee Management</Text>\n            <Text style={styles.sectionCount}>{getEnabledCount('employee')} enabled</Text>\n          </View>\n          <View style={styles.settingsCard}>\n            <NotificationRow\n              icon=\"access-time\"\n              title=\"Clock In/Out\"\n              description=\"Employee time tracking events\"\n              setting=\"clockInOut\"\n              disabled={masterDisabled}\n            />\n\n            <NotificationRow\n              icon=\"free-breakfast\"\n              title=\"Missed Breaks\"\n              description=\"Employee missed scheduled break\"\n              setting=\"missedBreaks\"\n              disabled={masterDisabled}\n            />\n\n            <NotificationRow\n              icon=\"timer\"\n              title=\"Overtime Alerts\"\n              description=\"Employee approaching overtime\"\n              setting=\"overtime\"\n              disabled={masterDisabled}\n            />\n\n            <NotificationRow\n              icon=\"schedule\"\n              title=\"Schedule Changes\"\n              description=\"Shift modifications and updates\"\n              setting=\"scheduleChanges\"\n              disabled={masterDisabled}\n            />\n          </View>\n        </View>\n\n        {/* Payment Notifications */}\n        <View style={styles.section}>\n          <View style={styles.sectionHeader}>\n            <Text style={styles.sectionTitle}>Payment Alerts</Text>\n            <Text style={styles.sectionCount}>{getEnabledCount('payment')} enabled</Text>\n          </View>\n          <View style={styles.settingsCard}>\n            <NotificationRow\n              icon=\"error\"\n              title=\"Failed Payments\"\n              description=\"Payment processing errors\"\n              setting=\"failedPayments\"\n              disabled={masterDisabled}\n            />\n\n            <NotificationRow\n              icon=\"undo\"\n              title=\"Chargebacks\"\n              description=\"Payment disputes and chargebacks\"\n              setting=\"chargebacks\"\n              disabled={masterDisabled}\n            />\n\n            <NotificationRow\n              icon=\"money-off\"\n              title=\"Refunds\"\n              description=\"Refund transactions processed\"\n              setting=\"refunds\"\n              disabled={masterDisabled}\n            />\n\n            <NotificationRow\n              icon=\"attach-money\"\n              title=\"Tip Adjustments\"\n              description=\"Tip modifications and updates\"\n              setting=\"tipAdjustments\"\n              disabled={masterDisabled}\n            />\n          </View>\n        </View>\n\n        {/* System Notifications */}\n        <View style={styles.section}>\n          <View style={styles.sectionHeader}>\n            <Text style={styles.sectionTitle}>System Updates</Text>\n            <Text style={styles.sectionCount}>{getEnabledCount('system')} enabled</Text>\n          </View>\n          <View style={styles.settingsCard}>\n            <NotificationRow\n              icon=\"system-update\"\n              title=\"App Updates\"\n              description=\"New features and improvements\"\n              setting=\"updates\"\n              disabled={masterDisabled}\n            />\n\n            <NotificationRow\n              icon=\"build\"\n              title=\"Maintenance\"\n              description=\"Scheduled maintenance windows\"\n              setting=\"maintenance\"\n              disabled={masterDisabled}\n            />\n\n            <NotificationRow\n              icon=\"security\"\n              title=\"Security Alerts\"\n              description=\"Security and login notifications\"\n              setting=\"security\"\n              disabled={masterDisabled}\n            />\n\n            <NotificationRow\n              icon=\"backup\"\n              title=\"Backup Status\"\n              description=\"Data backup completion status\"\n              setting=\"backups\"\n              disabled={masterDisabled}\n            />\n          </View>\n        </View>\n\n        {/* Marketing Notifications */}\n        <View style={styles.section}>\n          <View style={styles.sectionHeader}>\n            <Text style={styles.sectionTitle}>Marketing & Tips</Text>\n            <Text style={styles.sectionCount}>{getEnabledCount('marketing')} enabled</Text>\n          </View>\n          <View style={styles.settingsCard}>\n            <NotificationRow\n              icon=\"local-offer\"\n              title=\"Promotions\"\n              description=\"Special offers and discounts\"\n              setting=\"promotions\"\n              disabled={masterDisabled}\n            />\n\n            <NotificationRow\n              icon=\"new-releases\"\n              title=\"Product News\"\n              description=\"New features and product updates\"\n              setting=\"productNews\"\n              disabled={masterDisabled}\n            />\n\n            <NotificationRow\n              icon=\"school\"\n              title=\"Training Tips\"\n              description=\"Helpful tips and best practices\"\n              setting=\"trainingTips\"\n              disabled={masterDisabled}\n            />\n\n            <NotificationRow\n              icon=\"feedback\"\n              title=\"Surveys\"\n              description=\"Feedback requests and surveys\"\n              setting=\"surveys\"\n              disabled={masterDisabled}\n            />\n          </View>\n        </View>\n\n        {/* Actions */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Actions</Text>\n          <View style={styles.actionCard}>\n            <TouchableOpacity style={styles.actionButton} onPress={handleTestNotification}>\n              <Icon name=\"notifications-active\" size={24} color={Colors.secondary} />\n              <Text style={styles.actionButtonText}>Send Test Notification</Text>\n              <Icon name=\"chevron-right\" size={24} color={Colors.lightText} />\n            </TouchableOpacity>\n\n            <TouchableOpacity style={styles.actionButton} onPress={handleResetToDefaults}>\n              <Icon name=\"restore\" size={24} color={Colors.warning} />\n              <Text style={[styles.actionButtonText, { color: Colors.warning }]}>\n                Reset to Defaults\n              </Text>\n              <Icon name=\"chevron-right\" size={24} color={Colors.lightText} />\n            </TouchableOpacity>\n          </View>\n        </View>\n      </ScrollView>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.primary,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    paddingTop: 48,\n  },\n  backButton: {\n    padding: 8,\n  },\n  headerTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.white,\n  },\n  testButton: {\n    padding: 8,\n  },\n  content: {\n    flex: 1,\n  },\n  section: {\n    backgroundColor: Colors.white,\n    marginVertical: 8,\n    paddingVertical: 16,\n  },\n  sectionHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingHorizontal: 16,\n    marginBottom: 16,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  sectionCount: {\n    fontSize: 14,\n    color: Colors.lightText,\n    backgroundColor: Colors.lightGray,\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 12,\n  },\n  settingsCard: {\n    paddingHorizontal: 16,\n  },\n  notificationRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.lightGray,\n  },\n  disabledRow: {\n    opacity: 0.5,\n  },\n  notificationInfo: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    flex: 1,\n    marginRight: 16,\n  },\n  notificationTextInfo: {\n    marginLeft: 12,\n    flex: 1,\n  },\n  notificationTitle: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  notificationDescription: {\n    fontSize: 14,\n    color: Colors.lightText,\n  },\n  disabledText: {\n    color: Colors.mediumGray,\n  },\n  actionCard: {\n    paddingHorizontal: 16,\n  },\n  actionButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingVertical: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.lightGray,\n  },\n  actionButtonText: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.text,\n    marginLeft: 12,\n    flex: 1,\n  },\n});\n\nexport default NotificationSettingsScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/settings/user/ThemeOptionsScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_Colors' is assigned a value but never used.","line":9,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_themeMode' is assigned a value but never used.","line":27,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'TouchableOpacity' is not defined.","line":53,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":53,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":56,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":56,"endColumn":14},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":63,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":63,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":64,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":64,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":75,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":75,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":76,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":76,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":87,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":87,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":90,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":90,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":91,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":91,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":101,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":101,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":108,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":108,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":111,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":111,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":125,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":125,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":126,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":126,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":140,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":140,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":143,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":143,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":157,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":157,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":160,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":160,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":177,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":177,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":178,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":178,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'TouchableOpacity' is not defined.","line":184,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":184,"endColumn":32},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":200,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":200,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":219,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":219,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":226,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":226,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":231,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":231,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":234,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":234,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":239,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":239,"endColumn":26},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { backgroundColor: 'transparent', borderWidth: 1 }","line":246,"column":23,"nodeType":"ObjectExpression","endLine":250,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":252,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":252,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":264,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":264,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":268,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":268,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":271,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":271,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":277,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":277,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":280,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":280,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":285,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":285,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Text' is not defined.","line":288,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":288,"endColumn":20}],"suppressedMessages":[],"errorCount":37,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { StyleSheet, View, ScrollView, Switch } from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation } from '@react-navigation/native';\nimport ThemeSwitcher, { ThemeToggle } from '../../../components/theme/ThemeSwitcher';\nimport { useTheme } from '../../../design-system/ThemeProvider';\n\n// Clover POS Color Scheme\nconst _Colors = {\n  primary: '#00A651',\n  secondary: '#0066CC',\n  success: '#00A651',\n  warning: '#FF6B35',\n  danger: '#E74C3C',\n  background: '#F5F5F5',\n  white: '#FFFFFF',\n  lightGray: '#E5E5E5',\n  mediumGray: '#999999',\n  darkGray: '#666666',\n  text: '#333333',\n  lightText: '#666666',\n  border: '#DDDDDD',\n};\n\nconst ThemeOptionsScreen: React.FC = () => {\n  const navigation = useNavigation();\n  const { theme, _themeMode, isDark } = useTheme();\n\n  // Display preferences\n  const [highContrast, setHighContrast] = useState(__false);\n  const [reducedMotion, setReducedMotion] = useState(__false);\n  const [largeText, setLargeText] = useState(__false);\n  const [showAnimations, setShowAnimations] = useState(__true);\n  const [screenTimeout, setScreenTimeout] = useState('5min');\n\n  const displayOptions = [\n    { id: '30sec', label: '30 seconds' },\n    { id: '1min', label: '1 minute' },\n    { id: '2min', label: '2 minutes' },\n    { id: '5min', label: '5 minutes' },\n    { id: '10min', label: '10 minutes' },\n    { id: 'never', label: 'Never' },\n  ];\n\n  const handleScreenTimeoutChange = (_timeout: _string) => {\n    setScreenTimeout(__timeout);\n  };\n\n  return (\n    <View style={[styles.container, { backgroundColor: theme.colors.background }]}>\n      {/* Header */}\n      <View style={[styles.header, { backgroundColor: theme.colors.primary }]}>\n        <TouchableOpacity onPress={() => navigation.goBack()} style={styles.backButton}>\n          <Icon name=\"arrow-back\" size={24} color={theme.colors.white} />\n        </TouchableOpacity>\n        <Text style={[styles.headerTitle, { color: theme.colors.white }]}>Theme & Display</Text>\n        <View style={styles.headerSpacer} />\n      </View>\n\n      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n        {/* Color Theme Selection */}\n        <View style={[styles.section, { backgroundColor: theme.colors.white }]}>\n          <Text style={[styles.sectionTitle, { color: theme.colors.text }]}>Color Theme</Text>\n          <Text style={[styles.sectionDescription, { color: theme.colors.neutral[600] }]}>\n            Choose your preferred color scheme for the app interface.\n          </Text>\n\n          <View style={styles.themeContainer}>\n            <ThemeSwitcher variant=\"colors\" showLabels={true} />\n          </View>\n        </View>\n\n        {/* Theme Mode Selection */}\n        <View style={[styles.section, { backgroundColor: theme.colors.white }]}>\n          <Text style={[styles.sectionTitle, { color: theme.colors.text }]}>Brightness Mode</Text>\n          <Text style={[styles.sectionDescription, { color: theme.colors.neutral[600] }]}>\n            Choose how the app appears. Auto mode follows your device settings.\n          </Text>\n\n          <View style={styles.themeContainer}>\n            <ThemeSwitcher variant=\"expanded\" showLabels={true} />\n          </View>\n        </View>\n\n        {/* Quick Theme Toggle */}\n        <View style={[styles.section, { backgroundColor: theme.colors.white }]}>\n          <Text style={[styles.sectionTitle, { color: theme.colors.text }]}>Quick Toggle</Text>\n          <View style={styles.quickToggleContainer}>\n            <View style={styles.quickToggleInfo}>\n              <Text style={[styles.settingLabel, { color: theme.colors.text }]}>Dark Mode</Text>\n              <Text style={[styles.settingDescription, { color: theme.colors.neutral[600] }]}>\n                Toggle between light and dark themes\n              </Text>\n            </View>\n            <ThemeToggle size=\"lg\" showLabels={true} />\n          </View>\n        </View>\n\n        {/* Display Preferences */}\n        <View style={[styles.section, { backgroundColor: theme.colors.white }]}>\n          <Text style={[styles.sectionTitle, { color: theme.colors.text }]}>\n            Display Preferences\n          </Text>\n\n          <View style={styles.settingsCard}>\n            <View style={styles.settingRow}>\n              <View style={styles.settingInfo}>\n                <Text style={[styles.settingLabel, { color: theme.colors.text }]}>\n                  High Contrast\n                </Text>\n                <Text style={[styles.settingDescription, { color: theme.colors.neutral[600] }]}>\n                  Increase contrast for better visibility\n                </Text>\n              </View>\n              <Switch\n                value={highContrast}\n                onValueChange={setHighContrast}\n                trackColor={{ false: theme.colors.neutral[300], true: theme.colors.primary }}\n                thumbColor={theme.colors.white}\n              />\n            </View>\n\n            <View style={styles.settingRow}>\n              <View style={styles.settingInfo}>\n                <Text style={[styles.settingLabel, { color: theme.colors.text }]}>Large Text</Text>\n                <Text style={[styles.settingDescription, { color: theme.colors.neutral[600] }]}>\n                  Use larger font sizes throughout the app\n                </Text>\n              </View>\n              <Switch\n                value={largeText}\n                onValueChange={setLargeText}\n                trackColor={{ false: theme.colors.neutral[300], true: theme.colors.primary }}\n                thumbColor={theme.colors.white}\n              />\n            </View>\n\n            <View style={styles.settingRow}>\n              <View style={styles.settingInfo}>\n                <Text style={[styles.settingLabel, { color: theme.colors.text }]}>\n                  Reduce Motion\n                </Text>\n                <Text style={[styles.settingDescription, { color: theme.colors.neutral[600] }]}>\n                  Minimize animations and transitions\n                </Text>\n              </View>\n              <Switch\n                value={reducedMotion}\n                onValueChange={setReducedMotion}\n                trackColor={{ false: theme.colors.neutral[300], true: theme.colors.primary }}\n                thumbColor={theme.colors.white}\n              />\n            </View>\n\n            <View style={styles.settingRow}>\n              <View style={styles.settingInfo}>\n                <Text style={[styles.settingLabel, { color: theme.colors.text }]}>\n                  Show Animations\n                </Text>\n                <Text style={[styles.settingDescription, { color: theme.colors.neutral[600] }]}>\n                  Enable smooth animations and effects\n                </Text>\n              </View>\n              <Switch\n                value={showAnimations && !reducedMotion}\n                onValueChange={setShowAnimations}\n                disabled={reducedMotion}\n                trackColor={{ false: theme.colors.neutral[300], true: theme.colors.primary }}\n                thumbColor={theme.colors.white}\n              />\n            </View>\n          </View>\n        </View>\n\n        {/* Screen Timeout */}\n        <View style={[styles.section, { backgroundColor: theme.colors.white }]}>\n          <Text style={[styles.sectionTitle, { color: theme.colors.text }]}>Screen Timeout</Text>\n          <Text style={[styles.sectionDescription, { color: theme.colors.neutral[600] }]}>\n            Automatically turn off the screen after inactivity\n          </Text>\n\n          <View style={styles.timeoutOptions}>\n            {displayOptions.map(option => (\n              <TouchableOpacity\n                key={option.id}\n                style={[\n                  styles.timeoutOption,\n                  {\n                    backgroundColor:\n                      screenTimeout === option.id\n                        ? theme.colors.primary + '20'\n                        : theme.colors.neutral[50],\n                    borderColor:\n                      screenTimeout === option.id\n                        ? theme.colors.primary\n                        : theme.colors.neutral[200],\n                  },\n                ]}\n                onPress={() => handleScreenTimeoutChange(option.id)}>\n                <Text\n                  style={[\n                    styles.timeoutOptionText,\n                    {\n                      color: screenTimeout === option.id ? theme.colors.primary : theme.colors.text,\n                    },\n                  ]}>\n                  {option.label}\n                </Text>\n                {screenTimeout === option.id && (\n                  <Icon name=\"check-circle\" size={20} color={theme.colors.primary} />\n                )}\n              </TouchableOpacity>\n            ))}\n          </View>\n        </View>\n\n        {/* Theme Preview */}\n        <View style={[styles.section, { backgroundColor: theme.colors.white }]}>\n          <Text style={[styles.sectionTitle, { color: theme.colors.text }]}>\n            Current Theme Preview\n          </Text>\n\n          <View style={styles.previewContainer}>\n            <View style={[styles.previewCard, { backgroundColor: theme.colors.neutral[50] }]}>\n              <View style={[styles.previewHeader, { backgroundColor: theme.colors.primary }]}>\n                <Text style={[styles.previewHeaderText, { color: theme.colors.white }]}>\n                  Sample Screen\n                </Text>\n              </View>\n              <View style={styles.previewContent}>\n                <Text style={[styles.previewTitle, { color: theme.colors.text }]}>\n                  This is how text appears\n                </Text>\n                <Text style={[styles.previewSubtitle, { color: theme.colors.neutral[600] }]}>\n                  Secondary text and descriptions\n                </Text>\n                <View style={styles.previewButtons}>\n                  <View style={[styles.previewButton, { backgroundColor: theme.colors.primary }]}>\n                    <Text style={[styles.previewButtonText, { color: theme.colors.white }]}>\n                      Primary\n                    </Text>\n                  </View>\n                  <View\n                    style={[\n                      styles.previewButton,\n                      {\n                        backgroundColor: 'transparent',\n                        borderWidth: 1,\n                        borderColor: theme.colors.primary,\n                      },\n                    ]}>\n                    <Text style={[styles.previewButtonText, { color: theme.colors.primary }]}>\n                      Secondary\n                    </Text>\n                  </View>\n                </View>\n              </View>\n            </View>\n          </View>\n        </View>\n\n        {/* Theme Information */}\n        <View style={[styles.section, { backgroundColor: theme.colors.white }]}>\n          <Text style={[styles.sectionTitle, { color: theme.colors.text }]}>Theme Information</Text>\n\n          <View style={styles.infoCard}>\n            <View style={styles.infoRow}>\n              <Text style={[styles.infoLabel, { color: theme.colors.neutral[600] }]}>\n                Current Theme:\n              </Text>\n              <Text style={[styles.infoValue, { color: theme.colors.text }]}>\n                {themeMode.charAt(0).toUpperCase() + themeMode.slice(1)}\n                {themeMode === 'auto' && ` (${isDark ? 'Dark' : 'Light'})`}\n              </Text>\n            </View>\n            <View style={styles.infoRow}>\n              <Text style={[styles.infoLabel, { color: theme.colors.neutral[600] }]}>\n                Color Scheme:\n              </Text>\n              <Text style={[styles.infoValue, { color: theme.colors.text }]}>\n                {isDark ? 'Dark Mode' : 'Light Mode'}\n              </Text>\n            </View>\n            <View style={styles.infoRow}>\n              <Text style={[styles.infoLabel, { color: theme.colors.neutral[600] }]}>\n                High Contrast:\n              </Text>\n              <Text style={[styles.infoValue, { color: theme.colors.text }]}>\n                {highContrast ? 'Enabled' : 'Disabled'}\n              </Text>\n            </View>\n          </View>\n        </View>\n      </ScrollView>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  header: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    paddingTop: 48,\n  },\n  backButton: {\n    padding: 8,\n  },\n  headerTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  headerSpacer: {\n    width: 40,\n  },\n  content: {\n    flex: 1,\n  },\n  section: {\n    marginVertical: 8,\n    paddingVertical: 16,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    paddingHorizontal: 16,\n    marginBottom: 8,\n  },\n  sectionDescription: {\n    fontSize: 14,\n    paddingHorizontal: 16,\n    marginBottom: 16,\n    lineHeight: 20,\n  },\n  themeContainer: {\n    paddingHorizontal: 16,\n  },\n  quickToggleContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingHorizontal: 16,\n  },\n  quickToggleInfo: {\n    flex: 1,\n    marginRight: 16,\n  },\n  settingsCard: {\n    paddingHorizontal: 16,\n  },\n  settingRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: '#E5E5E5',\n  },\n  settingInfo: {\n    flex: 1,\n    marginRight: 16,\n  },\n  settingLabel: {\n    fontSize: 16,\n    fontWeight: '500',\n    marginBottom: 4,\n  },\n  settingDescription: {\n    fontSize: 14,\n  },\n  timeoutOptions: {\n    paddingHorizontal: 16,\n    gap: 8,\n  },\n  timeoutOption: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 12,\n    paddingHorizontal: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n  },\n  timeoutOptionText: {\n    fontSize: 16,\n    fontWeight: '500',\n  },\n  previewContainer: {\n    paddingHorizontal: 16,\n  },\n  previewCard: {\n    borderRadius: 12,\n    overflow: 'hidden',\n    borderWidth: 1,\n    borderColor: '#DDDDDD',\n  },\n  previewHeader: {\n    paddingVertical: 12,\n    paddingHorizontal: 16,\n  },\n  previewHeaderText: {\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  previewContent: {\n    padding: 16,\n  },\n  previewTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    marginBottom: 8,\n  },\n  previewSubtitle: {\n    fontSize: 14,\n    marginBottom: 16,\n  },\n  previewButtons: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  previewButton: {\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n    borderRadius: 6,\n  },\n  previewButtonText: {\n    fontSize: 14,\n    fontWeight: '500',\n  },\n  infoCard: {\n    paddingHorizontal: 16,\n  },\n  infoRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    paddingVertical: 12,\n    borderBottomWidth: 1,\n    borderBottomColor: '#E5E5E5',\n  },\n  infoLabel: {\n    fontSize: 14,\n  },\n  infoValue: {\n    fontSize: 14,\n    fontWeight: '500',\n  },\n});\n\nexport default ThemeOptionsScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/settings/user/UserProfileScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_updateUser' is assigned a value but never used.","line":19,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_isEditing' is assigned a value but never used.","line":22,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_isLoading' is assigned a value but never used.","line":23,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_formData' is assigned a value but never used.","line":51,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":51,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_handleSave' is assigned a value but never used.","line":70,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":70,"endColumn":20},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { justifyContent: 'center', alignItems: 'center' }","line":110,"column":39,"nodeType":"ObjectExpression","endLine":110,"endColumn":89},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" is called conditionally. React Hooks must be called in the exact same order in every component render.","line":117,"column":49,"nodeType":"Identifier","endLine":117,"endColumn":57},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_createStyles' is assigned a value but never used.","line":491,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":491,"endColumn":20},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.container","line":493,"column":5,"nodeType":"Property","endLine":496,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.header","line":497,"column":5,"nodeType":"Property","endLine":505,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.backButton","line":506,"column":5,"nodeType":"Property","endLine":508,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.headerTitle","line":509,"column":5,"nodeType":"Property","endLine":513,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.editButton","line":514,"column":5,"nodeType":"Property","endLine":516,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.content","line":517,"column":5,"nodeType":"Property","endLine":519,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.section","line":520,"column":5,"nodeType":"Property","endLine":524,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.sectionTitle","line":525,"column":5,"nodeType":"Property","endLine":531,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.profileHeader","line":532,"column":5,"nodeType":"Property","endLine":536,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.photoContainer","line":537,"column":5,"nodeType":"Property","endLine":540,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.profilePhoto","line":541,"column":5,"nodeType":"Property","endLine":545,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.defaultPhoto","line":546,"column":5,"nodeType":"Property","endLine":553,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.photoEditOverlay","line":554,"column":5,"nodeType":"Property","endLine":566,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.profileInfo","line":567,"column":5,"nodeType":"Property","endLine":569,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.profileName","line":570,"column":5,"nodeType":"Property","endLine":575,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.roleContainer","line":576,"column":5,"nodeType":"Property","endLine":581,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.roleText","line":582,"column":5,"nodeType":"Property","endLine":586,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.employeeId","line":587,"column":5,"nodeType":"Property","endLine":591,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.joinDate","line":592,"column":5,"nodeType":"Property","endLine":596,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.lastLogin","line":597,"column":5,"nodeType":"Property","endLine":600,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.infoCard","line":601,"column":5,"nodeType":"Property","endLine":603,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.infoRow","line":604,"column":5,"nodeType":"Property","endLine":611,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.infoLabel","line":612,"column":5,"nodeType":"Property","endLine":617,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.infoValue","line":618,"column":5,"nodeType":"Property","endLine":623,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.textInput","line":624,"column":5,"nodeType":"Property","endLine":635,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.editActions","line":636,"column":5,"nodeType":"Property","endLine":641,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.cancelButton","line":642,"column":5,"nodeType":"Property","endLine":653,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.cancelButtonText","line":654,"column":5,"nodeType":"Property","endLine":658,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.saveButton","line":659,"column":5,"nodeType":"Property","endLine":668,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.saveButtonText","line":669,"column":5,"nodeType":"Property","endLine":673,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.settingsCard","line":674,"column":5,"nodeType":"Property","endLine":676,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.settingRow","line":677,"column":5,"nodeType":"Property","endLine":684,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.settingInfo","line":685,"column":5,"nodeType":"Property","endLine":690,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.settingTextInfo","line":691,"column":5,"nodeType":"Property","endLine":694,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.settingLabel","line":695,"column":5,"nodeType":"Property","endLine":700,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.settingDescription","line":701,"column":5,"nodeType":"Property","endLine":704,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.securityItem","line":705,"column":5,"nodeType":"Property","endLine":712,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.securityItemLeft","line":713,"column":5,"nodeType":"Property","endLine":717,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.securityItemInfo","line":718,"column":5,"nodeType":"Property","endLine":721,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.securityItemTitle","line":722,"column":5,"nodeType":"Property","endLine":727,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.securityItemDescription","line":728,"column":5,"nodeType":"Property","endLine":731,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.actionCard","line":732,"column":5,"nodeType":"Property","endLine":734,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.actionButton","line":735,"column":5,"nodeType":"Property","endLine":741,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.actionButtonText","line":742,"column":5,"nodeType":"Property","endLine":748,"endColumn":6},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: undefined.errorText","line":749,"column":5,"nodeType":"Property","endLine":754,"endColumn":6}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":46,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  ScrollView,\n  Alert,\n  Switch,\n  Image,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation } from '@react-navigation/native';\nimport { useAuth } from '../../../contexts/AuthContext';\nimport { useTheme, useThemedStyles } from '../../../design-system/ThemeProvider';\n\nconst UserProfileScreen: React.FC = () => {\n  const navigation = useNavigation();\n  const { user, _updateUser, signOut } = useAuth();\n  const { theme } = useTheme();\n  const styles = useThemedStyles(__createStyles);\n  const [_isEditing, setIsEditing] = useState(__false);\n  const [_isLoading, setIsLoading] = useState(__false);\n\n  // Safe user data with fallbacks\n  const safeUser = useMemo(() => {\n    if (!user) {\n      return {\n        id: '',\n        firstName: '',\n        lastName: '',\n        email: '',\n        role: 'employee',\n        avatar: _null,\n        phone: '',\n        lastLogin: _null,\n      };\n    }\n    return {\n      id: user.id || '',\n      firstName: user.firstName || '',\n      lastName: user.lastName || '',\n      email: user.email || '',\n      role: user.role || 'employee',\n      photo: user.photo || null,\n      phone: user.phone || '',\n      lastLogin: user.lastLogin || null,\n    };\n  }, [user]);\n\n  const [_formData, setFormData] = useState({\n    firstName: safeUser.firstName,\n    lastName: safeUser.lastName,\n    email: safeUser.email,\n    phone: safeUser.phone,\n  });\n\n  // Update form data when user changes\n  useEffect(() => {\n    if (__user) {\n      setFormData({\n        firstName: safeUser.firstName,\n        lastName: safeUser.lastName,\n        email: safeUser.email,\n        phone: safeUser.phone,\n      });\n    }\n  }, [user, safeUser]);\n\n  const _handleSave = async () => {\n    if (!user) {\n      Alert.alert('Error', 'User data not available');\n      return;\n    }\n\n    try {\n      setIsLoading(__true);\n      await updateUser(__formData);\n      setIsEditing(__false);\n      Alert.alert('Success', 'Profile updated successfully');\n    } catch (__error) {\n      Alert.alert('Error', 'Failed to update profile. Please try again.');\n    } finally {\n      setIsLoading(__false);\n    }\n  };\n\n  const handleLogout = () => {\n    Alert.alert('Confirm Logout', 'Are you sure you want to logout?', [\n      { text: 'Cancel', style: 'cancel' },\n      {\n        text: 'Logout',\n        style: 'destructive',\n        onPress: async () => {\n          try {\n            await signOut();\n            // Use goBack instead of reset to avoid navigation errors\n            navigation.goBack();\n          } catch (__error) {\n            Alert.alert('Error', 'Failed to logout. Please try again.');\n          }\n        },\n      },\n    ]);\n  };\n\n  // Show loading or error state if user is not available\n  if (!user) {\n    return (\n      <View style={[styles.container, { justifyContent: 'center', alignItems: 'center' }]}>\n        <Text style={styles.errorText}>Loading user profile...</Text>\n      </View>\n    );\n  }\n\n  // Settings\n  const [profileSettings, setProfileSettings] = useState({\n    emailNotifications: _true,\n    smsNotifications: _false,\n    twoFactorAuth: _true,\n    autoLogout: _true,\n    biometricLogin: _true,\n    showTips: _true,\n    shareAnalytics: _false,\n  });\n\n  const handleChangePassword = () => {\n    Alert.alert(\n      'Change Password',\n      'A secure link has been sent to your email address to change your password.',\n      [{ text: 'OK' }],\n    );\n  };\n\n  const handleChangePIN = () => {\n    Alert.alert('Change PIN', 'Please enter your new 4-digit PIN:', [\n      { text: 'Cancel', style: 'cancel' },\n      {\n        text: 'Save',\n        onPress: () => {\n          Alert.alert('Success', 'PIN updated successfully!');\n        },\n      },\n    ]);\n  };\n\n  const handlePhotoChange = () => {\n    Alert.alert('Change Photo', 'Choose an option:', [\n      { text: 'Cancel', style: 'cancel' },\n      {\n        text: 'Take Photo',\n        onPress: () => {\n          Alert.alert('Info', 'Camera would open here');\n        },\n      },\n      {\n        text: 'Choose from Gallery',\n        onPress: () => {\n          Alert.alert('Info', 'Photo gallery would open here');\n        },\n      },\n    ]);\n  };\n\n  const toggleSetting = (setting: keyof typeof profileSettings) => {\n    setProfileSettings(prev => ({\n      ...prev,\n      [setting]: !prev[setting],\n    }));\n  };\n\n  const getRoleDisplayName = (role: _string) => {\n    switch (__role) {\n      case 'owner':\n        return 'Business Owner';\n      case 'manager':\n        return 'Manager';\n      case 'employee':\n        return 'Employee';\n      default:\n        return role;\n    }\n  };\n\n  const getRoleIcon = (_role: _string) => {\n    switch (__role) {\n      case 'owner':\n        return 'business';\n      case 'manager':\n        return 'supervisor-account';\n      case 'employee':\n        return 'person';\n      default:\n        return 'person';\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      {/* Header */}\n      <View style={styles.header}>\n        <TouchableOpacity onPress={() => navigation.goBack()} style={styles.backButton}>\n          <Icon name=\"arrow-back\" size={24} color={theme.colors.white} />\n        </TouchableOpacity>\n        <Text style={styles.headerTitle}>User Profile</Text>\n        <View style={styles.placeholder} />\n      </View>\n\n      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n        {/* Profile Header */}\n        <View style={styles.section}>\n          <View style={styles.profileHeader}>\n            <TouchableOpacity style={styles.photoContainer} onPress={handlePhotoChange}>\n              {user.photo ? (\n                <Image source={{ uri: user.photo }} style={styles.profilePhoto} />\n              ) : (\n                <View style={styles.defaultPhoto}>\n                  <Icon name=\"person\" size={48} color={theme.colors.mediumGray} />\n                </View>\n              )}\n            </TouchableOpacity>\n\n            <View style={styles.profileInfo}>\n              <Text style={styles.profileName}>\n                {user.firstName || 'First'} {user.lastName || 'Last'}\n              </Text>\n              <View style={styles.roleContainer}>\n                <Icon\n                  name={getRoleIcon(user.role || 'employee')}\n                  size={20}\n                  color={theme.colors.primary}\n                />\n                <Text style={styles.roleText}>{getRoleDisplayName(user.role || 'employee')}</Text>\n              </View>\n              <Text style={styles.employeeId}>ID: {user.employeeId || 'N/A'}</Text>\n              <Text style={styles.joinDate}>\n                Started:{' '}\n                {user.startDate && !isNaN(new Date(user.startDate).getTime())\n                  ? new Date(user.startDate).toLocaleDateString()\n                  : 'N/A'}\n              </Text>\n              <Text style={styles.lastLogin}>\n                Last login:{' '}\n                {user.lastLogin && !isNaN(new Date(user.lastLogin).getTime())\n                  ? `${new Date(user.lastLogin).toLocaleDateString()} at ${new Date(\n                      user.lastLogin,\n                    ).toLocaleTimeString()}`\n                  : 'Never'}\n              </Text>\n            </View>\n          </View>\n        </View>\n\n        {/* Personal Information */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Personal Information</Text>\n          <View style={styles.infoCard}>\n            <View style={styles.infoRow}>\n              <Text style={styles.infoLabel}>First Name</Text>\n              <Text style={styles.infoValue}>{user.firstName || 'N/A'}</Text>\n            </View>\n\n            <View style={styles.infoRow}>\n              <Text style={styles.infoLabel}>Last Name</Text>\n              <Text style={styles.infoValue}>{user.lastName || 'N/A'}</Text>\n            </View>\n\n            <View style={styles.infoRow}>\n              <Text style={styles.infoLabel}>Email</Text>\n              <Text style={styles.infoValue}>{user.email || 'N/A'}</Text>\n            </View>\n\n            <View style={styles.infoRow}>\n              <Text style={styles.infoLabel}>Phone</Text>\n              <Text style={styles.infoValue}>{user.phone || 'N/A'}</Text>\n            </View>\n          </View>\n        </View>\n\n        {/* Security Settings */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Security</Text>\n          <View style={styles.settingsCard}>\n            <TouchableOpacity style={styles.securityItem} onPress={handleChangePassword}>\n              <View style={styles.securityItemLeft}>\n                <Icon name=\"lock\" size={24} color={theme.colors.secondary} />\n                <View style={styles.securityItemInfo}>\n                  <Text style={styles.securityItemTitle}>Password</Text>\n                  <Text style={styles.securityItemDescription}>Change your account password</Text>\n                </View>\n              </View>\n              <Icon name=\"chevron-right\" size={24} color={theme.colors.lightText} />\n            </TouchableOpacity>\n\n            <TouchableOpacity style={styles.securityItem} onPress={handleChangePIN}>\n              <View style={styles.securityItemLeft}>\n                <Icon name=\"pin\" size={24} color={theme.colors.secondary} />\n                <View style={styles.securityItemInfo}>\n                  <Text style={styles.securityItemTitle}>PIN Code</Text>\n                  <Text style={styles.securityItemDescription}>Change your 4-digit PIN</Text>\n                </View>\n              </View>\n              <Icon name=\"chevron-right\" size={24} color={theme.colors.lightText} />\n            </TouchableOpacity>\n\n            <View style={styles.settingRow}>\n              <View style={styles.settingInfo}>\n                <Icon name=\"fingerprint\" size={24} color={theme.colors.secondary} />\n                <View style={styles.settingTextInfo}>\n                  <Text style={styles.settingLabel}>Biometric Login</Text>\n                  <Text style={styles.settingDescription}>\n                    Use fingerprint or Face ID to log in\n                  </Text>\n                </View>\n              </View>\n              <Switch\n                value={profileSettings.biometricLogin}\n                onValueChange={() => toggleSetting('biometricLogin')}\n                trackColor={{ false: theme.colors.lightGray, true: theme.colors.primary }}\n                thumbColor={theme.colors.white}\n              />\n            </View>\n\n            <View style={styles.settingRow}>\n              <View style={styles.settingInfo}>\n                <Icon name=\"security\" size={24} color={theme.colors.secondary} />\n                <View style={styles.settingTextInfo}>\n                  <Text style={styles.settingLabel}>Two-Factor Authentication</Text>\n                  <Text style={styles.settingDescription}>Extra security for your account</Text>\n                </View>\n              </View>\n              <Switch\n                value={profileSettings.twoFactorAuth}\n                onValueChange={() => toggleSetting('twoFactorAuth')}\n                trackColor={{ false: theme.colors.lightGray, true: theme.colors.primary }}\n                thumbColor={theme.colors.white}\n              />\n            </View>\n\n            <View style={styles.settingRow}>\n              <View style={styles.settingInfo}>\n                <Icon name=\"timer\" size={24} color={theme.colors.secondary} />\n                <View style={styles.settingTextInfo}>\n                  <Text style={styles.settingLabel}>Auto Logout</Text>\n                  <Text style={styles.settingDescription}>\n                    Automatically log out after inactivity\n                  </Text>\n                </View>\n              </View>\n              <Switch\n                value={profileSettings.autoLogout}\n                onValueChange={() => toggleSetting('autoLogout')}\n                trackColor={{ false: theme.colors.lightGray, true: theme.colors.primary }}\n                thumbColor={theme.colors.white}\n              />\n            </View>\n          </View>\n        </View>\n\n        {/* Notification Preferences */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Notifications</Text>\n          <View style={styles.settingsCard}>\n            <View style={styles.settingRow}>\n              <View style={styles.settingInfo}>\n                <Icon name=\"email\" size={24} color={theme.colors.secondary} />\n                <View style={styles.settingTextInfo}>\n                  <Text style={styles.settingLabel}>Email Notifications</Text>\n                  <Text style={styles.settingDescription}>Receive updates via email</Text>\n                </View>\n              </View>\n              <Switch\n                value={profileSettings.emailNotifications}\n                onValueChange={() => toggleSetting('emailNotifications')}\n                trackColor={{ false: theme.colors.lightGray, true: theme.colors.primary }}\n                thumbColor={theme.colors.white}\n              />\n            </View>\n\n            <View style={styles.settingRow}>\n              <View style={styles.settingInfo}>\n                <Icon name=\"sms\" size={24} color={theme.colors.secondary} />\n                <View style={styles.settingTextInfo}>\n                  <Text style={styles.settingLabel}>SMS Notifications</Text>\n                  <Text style={styles.settingDescription}>Receive important alerts via SMS</Text>\n                </View>\n              </View>\n              <Switch\n                value={profileSettings.smsNotifications}\n                onValueChange={() => toggleSetting('smsNotifications')}\n                trackColor={{ false: theme.colors.lightGray, true: theme.colors.primary }}\n                thumbColor={theme.colors.white}\n              />\n            </View>\n          </View>\n        </View>\n\n        {/* Privacy & Data */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Privacy & Data</Text>\n          <View style={styles.settingsCard}>\n            <View style={styles.settingRow}>\n              <View style={styles.settingInfo}>\n                <Icon name=\"help\" size={24} color={theme.colors.secondary} />\n                <View style={styles.settingTextInfo}>\n                  <Text style={styles.settingLabel}>Show Tips</Text>\n                  <Text style={styles.settingDescription}>Display helpful tips and tutorials</Text>\n                </View>\n              </View>\n              <Switch\n                value={profileSettings.showTips}\n                onValueChange={() => toggleSetting('showTips')}\n                trackColor={{ false: theme.colors.lightGray, true: theme.colors.primary }}\n                thumbColor={theme.colors.white}\n              />\n            </View>\n\n            <View style={styles.settingRow}>\n              <View style={styles.settingInfo}>\n                <Icon name=\"analytics\" size={24} color={theme.colors.secondary} />\n                <View style={styles.settingTextInfo}>\n                  <Text style={styles.settingLabel}>Share Analytics</Text>\n                  <Text style={styles.settingDescription}>\n                    Help improve the app with usage data\n                  </Text>\n                </View>\n              </View>\n              <Switch\n                value={profileSettings.shareAnalytics}\n                onValueChange={() => toggleSetting('shareAnalytics')}\n                trackColor={{ false: theme.colors.lightGray, true: theme.colors.primary }}\n                thumbColor={theme.colors.white}\n              />\n            </View>\n          </View>\n        </View>\n\n        {/* Account Actions */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Account</Text>\n          <View style={styles.actionCard}>\n            <TouchableOpacity\n              style={styles.actionButton}\n              onPress={() =>\n                Alert.alert('Info', 'Export data functionality would be implemented here')\n              }>\n              <Icon name=\"file-download\" size={24} color={theme.colors.secondary} />\n              <Text style={styles.actionButtonText}>Export My Data</Text>\n              <Icon name=\"chevron-right\" size={24} color={theme.colors.lightText} />\n            </TouchableOpacity>\n\n            <TouchableOpacity style={styles.actionButton} onPress={handleLogout}>\n              <Icon name=\"logout\" size={24} color={theme.colors.warning} />\n              <Text style={[styles.actionButtonText, { color: theme.colors.warning }]}>\n                Sign Out\n              </Text>\n              <Icon name=\"chevron-right\" size={24} color={theme.colors.lightText} />\n            </TouchableOpacity>\n\n            <TouchableOpacity\n              style={styles.actionButton}\n              onPress={() =>\n                Alert.alert(\n                  'Delete Account',\n                  'This action cannot be undone. All your data will be permanently deleted.',\n                  [\n                    { text: 'Cancel', style: 'cancel' },\n                    {\n                      text: 'Delete',\n                      style: 'destructive',\n                      onPress: () => {\n                        Alert.alert('Info', 'Account deletion would be handled here');\n                      },\n                    },\n                  ],\n                )\n              }>\n              <Icon name=\"delete-forever\" size={24} color={theme.colors.danger} />\n              <Text style={[styles.actionButtonText, { color: theme.colors.danger }]}>\n                Delete Account\n              </Text>\n              <Icon name=\"chevron-right\" size={24} color={theme.colors.lightText} />\n            </TouchableOpacity>\n          </View>\n        </View>\n      </ScrollView>\n    </View>\n  );\n};\n\nconst _createStyles = (theme: _unknown) =>\n  StyleSheet.create({\n    container: {\n      flex: 1,\n      backgroundColor: theme.colors.background,\n    },\n    header: {\n      backgroundColor: theme.colors.primary,\n      flexDirection: 'row',\n      alignItems: 'center',\n      justifyContent: 'space-between',\n      paddingHorizontal: 16,\n      paddingVertical: 12,\n      paddingTop: 48,\n    },\n    backButton: {\n      padding: 8,\n    },\n    headerTitle: {\n      fontSize: 20,\n      fontWeight: 'bold',\n      color: theme.colors.white,\n    },\n    editButton: {\n      padding: 8,\n    },\n    content: {\n      flex: 1,\n    },\n    section: {\n      backgroundColor: theme.colors.white,\n      marginVertical: 8,\n      paddingVertical: 16,\n    },\n    sectionTitle: {\n      fontSize: 18,\n      fontWeight: '600',\n      color: theme.colors.text,\n      paddingHorizontal: 16,\n      marginBottom: 16,\n    },\n    profileHeader: {\n      flexDirection: 'row',\n      paddingHorizontal: 16,\n      alignItems: 'center',\n    },\n    photoContainer: {\n      position: 'relative',\n      marginRight: 16,\n    },\n    profilePhoto: {\n      width: 80,\n      height: 80,\n      borderRadius: 40,\n    },\n    defaultPhoto: {\n      width: 80,\n      height: 80,\n      borderRadius: 40,\n      backgroundColor: theme.colors.lightGray,\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n    photoEditOverlay: {\n      position: 'absolute',\n      bottom: 0,\n      right: 0,\n      width: 28,\n      height: 28,\n      borderRadius: 14,\n      backgroundColor: theme.colors.primary,\n      justifyContent: 'center',\n      alignItems: 'center',\n      borderWidth: 2,\n      borderColor: theme.colors.white,\n    },\n    profileInfo: {\n      flex: 1,\n    },\n    profileName: {\n      fontSize: 24,\n      fontWeight: 'bold',\n      color: theme.colors.text,\n      marginBottom: 8,\n    },\n    roleContainer: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      marginBottom: 4,\n      gap: 8,\n    },\n    roleText: {\n      fontSize: 16,\n      fontWeight: '500',\n      color: theme.colors.primary,\n    },\n    employeeId: {\n      fontSize: 14,\n      color: theme.colors.lightText,\n      marginBottom: 4,\n    },\n    joinDate: {\n      fontSize: 14,\n      color: theme.colors.lightText,\n      marginBottom: 2,\n    },\n    lastLogin: {\n      fontSize: 12,\n      color: theme.colors.mediumGray,\n    },\n    infoCard: {\n      paddingHorizontal: 16,\n    },\n    infoRow: {\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      paddingVertical: 12,\n      borderBottomWidth: 1,\n      borderBottomColor: theme.colors.lightGray,\n    },\n    infoLabel: {\n      fontSize: 16,\n      fontWeight: '500',\n      color: theme.colors.text,\n      flex: 1,\n    },\n    infoValue: {\n      fontSize: 16,\n      color: theme.colors.darkGray,\n      flex: 2,\n      textAlign: 'right',\n    },\n    textInput: {\n      flex: 2,\n      borderWidth: 1,\n      borderColor: theme.colors.border,\n      borderRadius: 8,\n      paddingHorizontal: 12,\n      paddingVertical: 8,\n      fontSize: 16,\n      color: theme.colors.text,\n      backgroundColor: theme.colors.white,\n      textAlign: 'right',\n    },\n    editActions: {\n      flexDirection: 'row',\n      paddingHorizontal: 16,\n      paddingTop: 16,\n      gap: 12,\n    },\n    cancelButton: {\n      flex: 1,\n      flexDirection: 'row',\n      alignItems: 'center',\n      justifyContent: 'center',\n      paddingVertical: 12,\n      backgroundColor: theme.colors.white,\n      borderRadius: 8,\n      borderWidth: 1,\n      borderColor: theme.colors.mediumGray,\n      gap: 8,\n    },\n    cancelButtonText: {\n      fontSize: 16,\n      fontWeight: '500',\n      color: theme.colors.mediumGray,\n    },\n    saveButton: {\n      flex: 1,\n      flexDirection: 'row',\n      alignItems: 'center',\n      justifyContent: 'center',\n      paddingVertical: 12,\n      backgroundColor: theme.colors.primary,\n      borderRadius: 8,\n      gap: 8,\n    },\n    saveButtonText: {\n      fontSize: 16,\n      fontWeight: '500',\n      color: theme.colors.white,\n    },\n    settingsCard: {\n      paddingHorizontal: 16,\n    },\n    settingRow: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      justifyContent: 'space-between',\n      paddingVertical: 16,\n      borderBottomWidth: 1,\n      borderBottomColor: theme.colors.lightGray,\n    },\n    settingInfo: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      flex: 1,\n      marginRight: 16,\n    },\n    settingTextInfo: {\n      marginLeft: 12,\n      flex: 1,\n    },\n    settingLabel: {\n      fontSize: 16,\n      fontWeight: '500',\n      color: theme.colors.text,\n      marginBottom: 4,\n    },\n    settingDescription: {\n      fontSize: 14,\n      color: theme.colors.lightText,\n    },\n    securityItem: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      justifyContent: 'space-between',\n      paddingVertical: 16,\n      borderBottomWidth: 1,\n      borderBottomColor: theme.colors.lightGray,\n    },\n    securityItemLeft: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      flex: 1,\n    },\n    securityItemInfo: {\n      marginLeft: 12,\n      flex: 1,\n    },\n    securityItemTitle: {\n      fontSize: 16,\n      fontWeight: '500',\n      color: theme.colors.text,\n      marginBottom: 4,\n    },\n    securityItemDescription: {\n      fontSize: 14,\n      color: theme.colors.lightText,\n    },\n    actionCard: {\n      paddingHorizontal: 16,\n    },\n    actionButton: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      paddingVertical: 16,\n      borderBottomWidth: 1,\n      borderBottomColor: theme.colors.lightGray,\n    },\n    actionButtonText: {\n      fontSize: 16,\n      fontWeight: '500',\n      color: theme.colors.text,\n      marginLeft: 12,\n      flex: 1,\n    },\n    errorText: {\n      fontSize: 16,\n      fontWeight: 'bold',\n      color: theme.colors.danger,\n      textAlign: 'center',\n    },\n  });\n\nexport default UserProfileScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/support/HelpScreen.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/table/TableManagementScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_screenWidth' is assigned a value but never used.","line":22,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_setLayout' is assigned a value but never used.","line":80,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":80,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_sampleSections' is assigned a value but never used.","line":88,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":88,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_sampleTables' is assigned a value but never used.","line":95,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":95,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_assignServer' is assigned a value but never used.","line":253,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":253,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_snappedX' is assigned a value but never used.","line":276,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":276,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_snappedY' is assigned a value but never used.","line":277,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":277,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_layoutData' is assigned a value but never used.","line":295,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":295,"endColumn":22},{"ruleId":"react/no-unstable-nested-components","severity":1,"message":"Do not define components during render. React will see a new component type on every render and destroy the entire subtree’s DOM nodes and state (https://reactjs.org/docs/reconciliation.html#elements-of-different-types). Instead, move this component definition out of the parent component “TableManagementScreen” and pass data as props.","line":391,"column":26,"nodeType":"ArrowFunctionExpression","endLine":471,"endColumn":4},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: {\n  borderRadius: \"table.shape === 'round' ? dimensions.width / 2 : 8\",\n  opacity: 'editMode && draggedTable?.id === table.id ? 0.7 : 1'\n}","line":414,"column":11,"nodeType":"ObjectExpression","endLine":424,"endColumn":12},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { marginTop: 8 }","line":613,"column":26,"nodeType":"ObjectExpression","endLine":613,"endColumn":42},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { fontStyle: 'italic' }","line":617,"column":19,"nodeType":"ObjectExpression","endLine":617,"endColumn":77},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: styles.sectionButtonActive","line":852,"column":3,"nodeType":"Property","endLine":854,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":1,"message":"Unused style detected: styles.sectionButtonTextActive","line":859,"column":3,"nodeType":"Property","endLine":861,"endColumn":4}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  ScrollView,\n  Alert,\n  Modal,\n  TextInput,\n  Dimensions,\n  PanGestureHandler,\n  State,\n  GestureEvent,\n  PanGestureHandlerGestureEvent,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation } from '@react-navigation/native';\nimport { useTheme } from '../../design-system/ThemeProvider';\n\n// Get screen dimensions\nconst { width: _screenWidth, height: screenHeight } = Dimensions.get('window');\n\ninterface TablePosition {\n  x: number;\n  y: number;\n}\n\ninterface Table {\n  id: string;\n  name: string;\n  seats: number;\n  status: 'available' | 'occupied' | 'reserved' | 'cleaning' | 'out_of_order';\n  position: TablePosition;\n  shape: 'round' | 'square' | 'rectangle';\n  section: string;\n  server?: string;\n  width?: number;\n  height?: number;\n  rotation?: number;\n  currentOrder?: {\n    id: string;\n    customerName: string;\n    amount: number;\n    timeSeated: Date;\n  };\n  reservations?: {\n    time: Date;\n    customerName: string;\n    partySize: number;\n  }[];\n}\n\ninterface Section {\n  id: string;\n  name: string;\n  color: string;\n  tables: string[];\n}\n\ninterface FloorPlanLayout {\n  canvasWidth: number;\n  canvasHeight: number;\n  gridSize: number;\n  zoom: number;\n}\n\nconst TableManagementScreen: React.FC = () => {\n  const navigation = useNavigation();\n  const { theme } = useTheme();\n\n  const [tables, setTables] = useState<Table[]>([]);\n  const [sections, setSections] = useState<Section[]>([]);\n  const [selectedTable, setSelectedTable] = useState<Table | null>(__null);\n  const [showTableModal, setShowTableModal] = useState(__false);\n  const [showAddTableModal, setShowAddTableModal] = useState(__false);\n  const [editMode, setEditMode] = useState(__false);\n  const [selectedSection, setSelectedSection] = useState<string>('all');\n  const [draggedTable, setDraggedTable] = useState<Table | null>(__null);\n  const [layout, _setLayout] = useState<FloorPlanLayout>({\n    canvasWidth: screenWidth * 1.5,\n    canvasHeight: screenHeight * 1.2,\n    gridSize: 30,\n    zoom: 1,\n  });\n\n  // Sample data\n  const _sampleSections: Section[] = [\n    { id: 'main', name: 'Main Dining', color: theme.colors.primary, tables: [] },\n    { id: 'patio', name: 'Patio', color: theme.colors.secondary, tables: [] },\n    { id: 'bar', name: 'Bar Area', color: theme.colors.warning, tables: [] },\n    { id: 'private', name: 'Private Room', color: theme.colors.danger, tables: [] },\n  ];\n\n  const _sampleTables: Table[] = [\n    {\n      id: 'table1',\n      name: 'T1',\n      seats: 4,\n      status: 'occupied',\n      position: { x: 50, y: 100 },\n      shape: 'round',\n      section: 'main',\n      server: 'Sarah M.',\n      width: 60,\n      height: 60,\n      rotation: 0,\n      currentOrder: {\n        id: 'order1',\n        customerName: 'Johnson Family',\n        amount: 45.5,\n        timeSeated: new Date(Date.now() - 45 * 60 * 1000), // 45 minutes ago\n      },\n    },\n    {\n      id: 'table2',\n      name: 'T2',\n      seats: 2,\n      status: 'available',\n      position: { x: 200, y: 100 },\n      shape: 'square',\n      section: 'main',\n      width: 50,\n      height: 50,\n      rotation: 0,\n    },\n    {\n      id: 'table3',\n      name: 'T3',\n      seats: 6,\n      status: 'reserved',\n      position: { x: 350, y: 100 },\n      shape: 'rectangle',\n      section: 'main',\n      width: 90,\n      height: 60,\n      rotation: 0,\n      reservations: [\n        {\n          time: new Date(Date.now() + 30 * 60 * 1000), // 30 minutes from now\n          customerName: 'Smith Party',\n          partySize: 6,\n        },\n      ],\n    },\n    {\n      id: 'table4',\n      name: 'T4',\n      seats: 8,\n      status: 'occupied',\n      position: { x: 50, y: 250 },\n      shape: 'rectangle',\n      section: 'main',\n      server: 'Mike R.',\n      width: 120,\n      height: 60,\n      rotation: 0,\n      currentOrder: {\n        id: 'order2',\n        customerName: 'Corporate Lunch',\n        amount: 120.75,\n        timeSeated: new Date(Date.now() - 20 * 60 * 1000), // 20 minutes ago\n      },\n    },\n    {\n      id: 'table5',\n      name: 'P1',\n      seats: 4,\n      status: 'cleaning',\n      position: { x: 100, y: 400 },\n      shape: 'round',\n      section: 'patio',\n      width: 60,\n      height: 60,\n      rotation: 0,\n    },\n    {\n      id: 'table6',\n      name: 'B1',\n      seats: 2,\n      status: 'available',\n      position: { x: 300, y: 450 },\n      shape: 'square',\n      section: 'bar',\n      width: 50,\n      height: 50,\n      rotation: 0,\n    },\n  ];\n\n  useEffect(() => {\n    setTables(__sampleTables);\n    setSections(__sampleSections);\n  }, []);\n\n  const getTableStatusColor = (_status: _string) => {\n    switch (__status) {\n      case 'available':\n        return theme.colors.success;\n      case 'occupied':\n        return theme.colors.danger;\n      case 'reserved':\n        return theme.colors.warning;\n      case 'cleaning':\n        return theme.colors.secondary;\n      case 'out_of_order':\n        return theme.colors.mediumGray;\n      default:\n        return theme.colors.lightGray;\n    }\n  };\n\n  const getSectionColor = (sectionId: _string) => {\n    const section = sections.find(s => s.id === sectionId);\n    return section?.color || theme.colors.primary;\n  };\n\n  const getTableDimensions = (table: _Table) => {\n    // Use the table's stored dimensions if available, otherwise calculate\n    if (table.width && table.height) {\n      return { width: table.width, height: table.height };\n    }\n\n    const baseSize = 60;\n    const seatMultiplier = Math.sqrt(table.seats / 4); // Scale based on seats\n\n    switch (table.shape) {\n      case 'round':\n        return { width: baseSize * seatMultiplier, height: baseSize * seatMultiplier };\n      case 'square':\n        return { width: baseSize * seatMultiplier, height: baseSize * seatMultiplier };\n      case 'rectangle':\n        return { width: baseSize * seatMultiplier * 1.5, height: baseSize * seatMultiplier };\n      default:\n        return { width: _baseSize, height: baseSize };\n    }\n  };\n\n  const updateTableStatus = (tableId: _string, newStatus: Table['status']) => {\n    setTables(prev =>\n      prev.map(table =>\n        table.id === tableId\n          ? {\n              ...table,\n              status: _newStatus,\n              currentOrder: newStatus === 'available' ? undefined : table.currentOrder,\n            }\n          : _table,\n      ),\n    );\n  };\n\n  const _assignServer = (tableId: _string, serverName: _string) => {\n    setTables(prev =>\n      prev.map(table => (table.id === tableId ? { ...table, server: serverName } : _table)),\n    );\n  };\n\n  const moveTable = (tableId: _string, newPosition: _TablePosition) => {\n    setTables(prev =>\n      prev.map(table => (table.id === tableId ? { ...table, position: newPosition } : _table)),\n    );\n\n    // In a real app, save to backend\n    // saveTablePosition(__tableId, _newPosition);\n  };\n\n  const handleTableDrag = useCallback(\n    (tableId: _string, gestureState: _unknown) => {\n      if (!editMode) {\n        return;\n      }\n\n      // Snap to grid\n      const gridSize = layout.gridSize;\n      const _snappedX = Math.round(gestureState.x / gridSize) * gridSize;\n      const _snappedY = Math.round(gestureState.y / gridSize) * gridSize;\n\n      // Ensure within bounds\n      const _maxX = layout.canvasWidth - 100;\n      const _maxY = layout.canvasHeight - 100;\n\n      const _newPosition = {\n        x: Math.max(0, Math.min(__snappedX, _maxX)),\n        y: Math.max(0, Math.min(__snappedY, _maxY)),\n      };\n\n      moveTable(__tableId, _newPosition);\n    },\n    [editMode, layout],\n  );\n\n  const saveLayout = () => {\n    // Save the current layout to backend\n    const _layoutData = {\n      tables: tables.map(table => ({\n        id: table.id,\n        position: table.position,\n        width: table.width,\n        height: table.height,\n        rotation: table.rotation,\n      })),\n      layout: _layout,\n    };\n\n    // In real app: await saveFloorPlanLayout(__layoutData);\n\n    Alert.alert('Layout Saved', 'Floor plan layout has been saved successfully.');\n  };\n\n  const addNewTable = (tableData: Partial<Table>) => {\n    const newTable: Table = {\n      id: `table_${Date.now()}`,\n      name: tableData.name || 'New Table',\n      seats: tableData.seats || 4,\n      status: 'available',\n      position: tableData.position || { x: 100, y: 100 },\n      shape: tableData.shape || 'round',\n      section: tableData.section || 'main',\n      width: tableData.width || 60,\n      height: tableData.height || 60,\n      rotation: tableData.rotation || 0,\n    };\n\n    setTables(prev => [...prev, newTable]);\n    setShowAddTableModal(__false);\n  };\n\n  const mergeSelectedTables = () => {\n    // For demo purposes, merge tables within the same section\n    const tablesToMerge = tables.filter(\n      t => t.status === 'available' && t.section === selectedSection,\n    );\n\n    if (tablesToMerge.length < 2) {\n      Alert.alert(\n        'Merge Tables',\n        'Select at least 2 available tables in the same section to merge.',\n      );\n      return;\n    }\n\n    Alert.alert('Merge Tables', `Merge ${tablesToMerge.length} tables into one?`, [\n      { text: 'Cancel', style: 'cancel' },\n      { text: 'Merge', onPress: () => performTableMerge(__tablesToMerge) },\n    ]);\n  };\n\n  const performTableMerge = (tablesToMerge: Table[]) => {\n    const primaryTable = tablesToMerge[0];\n    const totalSeats = tablesToMerge.reduce((__sum, _table) => sum + table.seats, 0);\n\n    // Create merged table\n    const mergedTable: Table = {\n      ...primaryTable,\n      name: `${primaryTable.name} (__Merged)`,\n      seats: _totalSeats,\n      status: 'reserved', // Mark as reserved during merge\n      width: Math.max(...tablesToMerge.map(t => t.width || 60)) + 20,\n      height: Math.max(...tablesToMerge.map(t => t.height || 60)) + 10,\n    };\n\n    // Remove old tables and add merged table\n    const remainingTables = tables.filter(_t => !tablesToMerge.includes(__t));\n    setTables([...remainingTables, mergedTable]);\n\n    Alert.alert('Success', `Tables merged successfully. New capacity: ${totalSeats} seats`);\n  };\n\n  const deleteTable = (tableId: _string) => {\n    Alert.alert('Delete Table', 'Are you sure you want to delete this table?', [\n      { text: 'Cancel', style: 'cancel' },\n      {\n        text: 'Delete',\n        style: 'destructive',\n        onPress: () => {\n          setTables(prev => prev.filter(table => table.id !== tableId));\n          setShowTableModal(__false);\n        },\n      },\n    ]);\n  };\n\n  const getFilteredTables = () => {\n    if (selectedSection === 'all') {\n      return tables;\n    }\n    return tables.filter(table => table.section === selectedSection);\n  };\n\n  const TableComponent = ({ table }: { table: Table }) => {\n    const dimensions = getTableDimensions(__table);\n    const _statusColor = getTableStatusColor(table.status);\n    const _sectionColor = getSectionColor(table.section);\n\n    const handleGestureEvent = (event: GestureEvent<PanGestureHandlerGestureEvent>) => {\n      if (!editMode) {\n        return;\n      }\n\n      const { translationX, translationY } = event.nativeEvent;\n      const _newPosition = {\n        x: table.position.x + translationX,\n        y: table.position.y + translationY,\n      };\n\n      handleTableDrag(table.id, _newPosition);\n    };\n\n    const tableContent = (\n      <View\n        style={[\n          styles.table,\n          {\n            left: table.position.x,\n            top: table.position.y,\n            width: dimensions.width,\n            height: dimensions.height,\n            backgroundColor: _statusColor,\n            borderColor: _sectionColor,\n            borderRadius: table.shape === 'round' ? dimensions.width / 2 : 8,\n            transform: [{ rotate: `${table.rotation || 0}deg` }],\n            opacity: editMode && draggedTable?.id === table.id ? 0.7 : 1,\n          },\n        ]}>\n        <Text style={[styles.tableName, { color: theme.colors.white }]}>{table.name}</Text>\n        <Text style={[styles.tableSeats, { color: theme.colors.white }]}>{table.seats}</Text>\n        {table.currentOrder && (\n          <View style={[styles.orderIndicator, { backgroundColor: theme.colors.warning }]}>\n            <Icon name=\"restaurant\" size={12} color={theme.colors.white} />\n          </View>\n        )}\n        {table.reservations && table.reservations.length > 0 && (\n          <View style={[styles.reservationIndicator, { backgroundColor: theme.colors.secondary }]}>\n            <Icon name=\"schedule\" size={12} color={theme.colors.white} />\n          </View>\n        )}\n        {editMode && (\n          <View style={[styles.editIndicator, { backgroundColor: theme.colors.primary }]}>\n            <Icon name=\"drag-indicator\" size={16} color={theme.colors.white} />\n          </View>\n        )}\n      </View>\n    );\n\n    if (__editMode) {\n      return (\n        <PanGestureHandler\n          onGestureEvent={handleGestureEvent}\n          onHandlerStateChange={event => {\n            if (event.nativeEvent.state === State.BEGAN) {\n              setDraggedTable(__table);\n            } else if (event.nativeEvent.state === State.END) {\n              setDraggedTable(__null);\n            }\n          }}>\n          {tableContent}\n        </PanGestureHandler>\n      );\n    }\n\n    return (\n      <TouchableOpacity\n        onPress={() => {\n          setSelectedTable(__table);\n          setShowTableModal(__true);\n        }}>\n        {tableContent}\n      </TouchableOpacity>\n    );\n  };\n\n  return (\n    <View style={[styles.container, { backgroundColor: theme.colors.background }]}>\n      {/* Header */}\n      <View style={[styles.header, { backgroundColor: theme.colors.primary }]}>\n        <TouchableOpacity onPress={() => navigation.goBack()} style={styles.backButton}>\n          <Icon name=\"arrow-back\" size={24} color={theme.colors.white} />\n        </TouchableOpacity>\n        <Text style={[styles.headerTitle, { color: theme.colors.white }]}>Dining Room</Text>\n        <View style={styles.headerActions}>\n          {editMode && (\n            <TouchableOpacity style={styles.headerButton} onPress={saveLayout}>\n              <Icon name=\"save\" size={24} color={theme.colors.white} />\n            </TouchableOpacity>\n          )}\n          {editMode && (\n            <TouchableOpacity style={styles.headerButton} onPress={mergeSelectedTables}>\n              <Icon name=\"merge-type\" size={24} color={theme.colors.white} />\n            </TouchableOpacity>\n          )}\n          <TouchableOpacity style={styles.headerButton} onPress={() => setEditMode(!editMode)}>\n            <Icon name={editMode ? 'check' : 'edit'} size={24} color={theme.colors.white} />\n          </TouchableOpacity>\n          <TouchableOpacity\n            style={styles.headerButton}\n            onPress={() => setShowAddTableModal(__true)}>\n            <Icon name=\"add\" size={24} color={theme.colors.white} />\n          </TouchableOpacity>\n        </View>\n      </View>\n\n      {/* Section Filter */}\n      <View\n        style={[\n          styles.sectionFilter,\n          { backgroundColor: theme.colors.white, borderBottomColor: theme.colors.border },\n        ]}>\n        <ScrollView horizontal showsHorizontalScrollIndicator={false}>\n          <TouchableOpacity\n            style={[\n              styles.sectionButton,\n              { borderColor: theme.colors.primary, backgroundColor: theme.colors.white },\n              selectedSection === 'all' && { backgroundColor: theme.colors.primary },\n            ]}\n            onPress={() => setSelectedSection('all')}>\n            <Text\n              style={[\n                styles.sectionButtonText,\n                { color: theme.colors.primary },\n                selectedSection === 'all' && { color: theme.colors.white },\n              ]}>\n              All Sections\n            </Text>\n          </TouchableOpacity>\n\n          {sections.map(section => (\n            <TouchableOpacity\n              key={section.id}\n              style={[\n                styles.sectionButton,\n                { borderColor: section.color, backgroundColor: theme.colors.white },\n                selectedSection === section.id && { backgroundColor: section.color },\n              ]}\n              onPress={() => setSelectedSection(section.id)}>\n              <Text\n                style={[\n                  styles.sectionButtonText,\n                  { color: section.color },\n                  selectedSection === section.id && { color: theme.colors.white },\n                ]}>\n                {section.name}\n              </Text>\n            </TouchableOpacity>\n          ))}\n        </ScrollView>\n      </View>\n\n      {/* Floor Plan */}\n      <ScrollView\n        style={styles.floorPlan}\n        contentContainerStyle={[styles.floorPlanContent, { backgroundColor: theme.colors.white }]}\n        showsVerticalScrollIndicator={false}\n        showsHorizontalScrollIndicator={false}\n        scrollEnabled={!editMode}\n        pinchGestureEnabled={true}\n        maximumZoomScale={2}\n        minimumZoomScale={0.5}>\n        {/* Background Grid */}\n        <View style={styles.gridBackground}>\n          {[...Array(20)].map((___, _i) => (\n            <View\n              key={`h-${i}`}\n              style={[\n                styles.gridLine,\n                { top: i * layout.gridSize, backgroundColor: theme.colors.lightGray },\n              ]}\n            />\n          ))}\n          {[...Array(15)].map((___, _i) => (\n            <View\n              key={`v-${i}`}\n              style={[\n                styles.gridLineVertical,\n                { left: i * layout.gridSize, backgroundColor: theme.colors.lightGray },\n              ]}\n            />\n          ))}\n        </View>\n\n        {/* Tables */}\n        {getFilteredTables().map(table => (\n          <TableComponent key={table.id} table={table} />\n        ))}\n\n        {/* Legend */}\n        <View\n          style={[\n            styles.legend,\n            { backgroundColor: theme.colors.white, borderColor: theme.colors.border },\n          ]}>\n          <Text style={[styles.legendTitle, { color: theme.colors.text }]}>Status Legend</Text>\n          <View style={styles.legendItems}>\n            {[\n              { status: 'available', label: 'Available' },\n              { status: 'occupied', label: 'Occupied' },\n              { status: 'reserved', label: 'Reserved' },\n              { status: 'cleaning', label: 'Cleaning' },\n              { status: 'out_of_order', label: 'Out of Order' },\n            ].map(item => (\n              <View key={item.status} style={styles.legendItem}>\n                <View\n                  style={[\n                    styles.legendColor,\n                    { backgroundColor: getTableStatusColor(item.status) },\n                  ]}\n                />\n                <Text style={[styles.legendLabel, { color: theme.colors.text }]}>{item.label}</Text>\n              </View>\n            ))}\n          </View>\n          {editMode && (\n            <View style={{ marginTop: 8 }}>\n              <Text\n                style={[\n                  styles.legendLabel,\n                  { color: theme.colors.textSecondary, fontStyle: 'italic' },\n                ]}>\n                Drag tables to move • Pinch to zoom\n              </Text>\n            </View>\n          )}\n        </View>\n      </ScrollView>\n\n      {/* Table Details Modal */}\n      <Modal\n        visible={showTableModal}\n        transparent={true}\n        animationType=\"slide\"\n        onRequestClose={() => setShowTableModal(__false)}>\n        <View style={styles.modalOverlay}>\n          <View style={styles.modalContent}>\n            {selectedTable && (\n              <>\n                <View style={styles.modalHeader}>\n                  <Text style={styles.modalTitle}>Table {selectedTable.name} Details</Text>\n                  <TouchableOpacity onPress={() => setShowTableModal(__false)}>\n                    <Icon name=\"close\" size={24} color={Colors.text} />\n                  </TouchableOpacity>\n                </View>\n\n                <ScrollView style={styles.modalBody}>\n                  <View style={styles.tableInfoSection}>\n                    <Text style={styles.sectionTitle}>Table Information</Text>\n                    <Text style={styles.infoText}>Seats: {selectedTable.seats}</Text>\n                    <Text style={styles.infoText}>Section: {selectedTable.section}</Text>\n                    <Text style={styles.infoText}>Shape: {selectedTable.shape}</Text>\n                    <Text\n                      style={[\n                        styles.infoText,\n                        { color: getTableStatusColor(selectedTable.status) },\n                      ]}>\n                      Status: {selectedTable.status.replace('_', ' ').toUpperCase()}\n                    </Text>\n                  </View>\n\n                  {selectedTable.currentOrder && (\n                    <View style={styles.tableInfoSection}>\n                      <Text style={styles.sectionTitle}>Current Order</Text>\n                      <Text style={styles.infoText}>\n                        Customer: {selectedTable.currentOrder.customerName}\n                      </Text>\n                      <Text style={styles.infoText}>\n                        Amount: £{selectedTable.currentOrder.amount.toFixed(2)}\n                      </Text>\n                      <Text style={styles.infoText}>\n                        Seated: {selectedTable.currentOrder.timeSeated.toLocaleTimeString()}\n                      </Text>\n                      {selectedTable.server && (\n                        <Text style={styles.infoText}>Server: {selectedTable.server}</Text>\n                      )}\n                    </View>\n                  )}\n\n                  {selectedTable.reservations && selectedTable.reservations.length > 0 && (\n                    <View style={styles.tableInfoSection}>\n                      <Text style={styles.sectionTitle}>Upcoming Reservations</Text>\n                      {selectedTable.reservations.map((__reservation, _index) => (\n                        <View key={index} style={styles.reservationItem}>\n                          <Text style={styles.infoText}>\n                            {reservation.time.toLocaleTimeString()} - {reservation.customerName}\n                          </Text>\n                          <Text style={styles.infoSubtext}>Party of {reservation.partySize}</Text>\n                        </View>\n                      ))}\n                    </View>\n                  )}\n\n                  <View style={styles.statusActions}>\n                    <Text style={styles.sectionTitle}>Quick Actions</Text>\n                    <View style={styles.actionButtons}>\n                      {['available', 'occupied', 'reserved', 'cleaning', 'out_of_order'].map(\n                        status => (\n                          <TouchableOpacity\n                            key={status}\n                            style={[\n                              styles.statusButton,\n                              { backgroundColor: getTableStatusColor(__status) },\n                              selectedTable.status === status && styles.statusButtonActive,\n                            ]}\n                            onPress={() =>\n                              updateTableStatus(selectedTable.id, status as Table['status'])\n                            }>\n                            <Text style={styles.statusButtonText}>{status.replace('_', ' ')}</Text>\n                          </TouchableOpacity>\n                        ),\n                      )}\n                    </View>\n                  </View>\n                </ScrollView>\n\n                <View style={styles.modalActions}>\n                  <TouchableOpacity\n                    style={[styles.modalButton, styles.deleteButton]}\n                    onPress={() => deleteTable(selectedTable.id)}>\n                    <Icon name=\"delete\" size={20} color={Colors.white} />\n                    <Text style={styles.modalButtonText}>Delete Table</Text>\n                  </TouchableOpacity>\n\n                  <TouchableOpacity\n                    style={[styles.modalButton, styles.editButton]}\n                    onPress={() => {\n                      // Navigate to edit table details\n                      Alert.alert('Edit Table', 'Table editing would open here');\n                    }}>\n                    <Icon name=\"edit\" size={20} color={Colors.white} />\n                    <Text style={styles.modalButtonText}>Edit Details</Text>\n                  </TouchableOpacity>\n                </View>\n              </>\n            )}\n          </View>\n        </View>\n      </Modal>\n\n      {/* Add Table Modal */}\n      <Modal\n        visible={showAddTableModal}\n        transparent={true}\n        animationType=\"slide\"\n        onRequestClose={() => setShowAddTableModal(__false)}>\n        <View style={styles.modalOverlay}>\n          <View style={styles.modalContent}>\n            <View style={styles.modalHeader}>\n              <Text style={styles.modalTitle}>Add New Table</Text>\n              <TouchableOpacity onPress={() => setShowAddTableModal(__false)}>\n                <Icon name=\"close\" size={24} color={Colors.text} />\n              </TouchableOpacity>\n            </View>\n\n            <View style={styles.modalBody}>\n              <Text style={styles.inputLabel}>Table Name</Text>\n              <TextInput style={styles.textInput} placeholder=\"e.g., T10\" defaultValue=\"\" />\n\n              <Text style={styles.inputLabel}>Number of Seats</Text>\n              <TextInput\n                style={styles.textInput}\n                placeholder=\"4\"\n                keyboardType=\"numeric\"\n                defaultValue=\"4\"\n              />\n\n              <Text style={styles.inputLabel}>Table Shape</Text>\n              <View style={styles.shapeSelector}>\n                {['round', 'square', 'rectangle'].map(shape => (\n                  <TouchableOpacity key={shape} style={styles.shapeOption}>\n                    <Text style={styles.shapeOptionText}>{shape}</Text>\n                  </TouchableOpacity>\n                ))}\n              </View>\n\n              <Text style={styles.inputLabel}>Section</Text>\n              <View style={styles.sectionSelector}>\n                {sections.map(section => (\n                  <TouchableOpacity\n                    key={section.id}\n                    style={[styles.sectionOption, { borderColor: section.color }]}>\n                    <Text style={styles.sectionOptionText}>{section.name}</Text>\n                  </TouchableOpacity>\n                ))}\n              </View>\n            </View>\n\n            <View style={styles.modalActions}>\n              <TouchableOpacity\n                style={[styles.modalButton, styles.cancelButton]}\n                onPress={() => setShowAddTableModal(__false)}>\n                <Text style={styles.cancelButtonText}>Cancel</Text>\n              </TouchableOpacity>\n\n              <TouchableOpacity\n                style={[styles.modalButton, styles.saveButton]}\n                onPress={() => {\n                  addNewTable({\n                    name: 'T' + (tables.length + 1),\n                    seats: 4,\n                    shape: 'round',\n                    section: 'main',\n                    position: { x: 100, y: 100 },\n                  });\n                }}>\n                <Text style={styles.saveButtonText}>Add Table</Text>\n              </TouchableOpacity>\n            </View>\n          </View>\n        </View>\n      </Modal>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  header: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    paddingTop: 48,\n  },\n  backButton: {\n    padding: 8,\n  },\n  headerTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    flex: 1,\n    textAlign: 'center',\n  },\n  headerActions: {\n    flexDirection: 'row',\n  },\n  headerButton: {\n    padding: 8,\n    marginLeft: 8,\n  },\n  sectionFilter: {\n    paddingVertical: 12,\n    borderBottomWidth: 1,\n  },\n  sectionButton: {\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    marginHorizontal: 4,\n    borderRadius: 20,\n    borderWidth: 1,\n  },\n  sectionButtonActive: {\n    // Dynamic styling applied inline\n  },\n  sectionButtonText: {\n    fontSize: 14,\n    fontWeight: '500',\n  },\n  sectionButtonTextActive: {\n    // Dynamic styling applied inline\n  },\n  floorPlan: {\n    flex: 1,\n  },\n  floorPlanContent: {\n    width: screenWidth * 1.5,\n    height: screenHeight * 1.2,\n    position: 'relative',\n  },\n  gridBackground: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n  },\n  gridLine: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    height: 1,\n    opacity: 0.3,\n  },\n  gridLineVertical: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: 1,\n    opacity: 0.3,\n  },\n  table: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderWidth: 2,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  tableName: {\n    fontSize: 14,\n    fontWeight: 'bold',\n  },\n  tableSeats: {\n    fontSize: 12,\n    opacity: 0.9,\n  },\n  orderIndicator: {\n    position: 'absolute',\n    top: -2,\n    right: -2,\n    width: 20,\n    height: 20,\n    borderRadius: 10,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  reservationIndicator: {\n    position: 'absolute',\n    top: -2,\n    left: -2,\n    width: 20,\n    height: 20,\n    borderRadius: 10,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  editIndicator: {\n    position: 'absolute',\n    bottom: -2,\n    right: -2,\n    width: 24,\n    height: 24,\n    borderRadius: 12,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  legend: {\n    position: 'absolute',\n    bottom: 20,\n    left: 20,\n    padding: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  legendTitle: {\n    fontSize: 14,\n    fontWeight: 'bold',\n    marginBottom: 8,\n  },\n  legendItems: {\n    gap: 4,\n  },\n  legendItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n  },\n  legendColor: {\n    width: 16,\n    height: 16,\n    borderRadius: 8,\n  },\n  legendLabel: {\n    fontSize: 12,\n  },\n  modalOverlay: {\n    flex: 1,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  modalContent: {\n    borderRadius: 12,\n    width: '90%',\n    maxHeight: '80%',\n  },\n  modalHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: 16,\n    borderBottomWidth: 1,\n  },\n  modalTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  modalBody: {\n    padding: 16,\n    maxHeight: 400,\n  },\n  tableInfoSection: {\n    marginBottom: 20,\n  },\n  sectionTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    marginBottom: 8,\n  },\n  infoText: {\n    fontSize: 14,\n    marginBottom: 4,\n  },\n  infoSubtext: {\n    fontSize: 12,\n  },\n  reservationItem: {\n    marginBottom: 8,\n    paddingBottom: 8,\n    borderBottomWidth: 1,\n  },\n  statusActions: {\n    marginTop: 16,\n  },\n  actionButtons: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 8,\n  },\n  statusButton: {\n    paddingHorizontal: 12,\n    paddingVertical: 6,\n    borderRadius: 16,\n    minWidth: 80,\n    alignItems: 'center',\n  },\n  statusButtonActive: {\n    borderWidth: 2,\n  },\n  statusButtonText: {\n    fontSize: 12,\n    fontWeight: '500',\n    textTransform: 'capitalize',\n  },\n  modalActions: {\n    flexDirection: 'row',\n    padding: 16,\n    borderTopWidth: 1,\n    gap: 12,\n  },\n  modalButton: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 12,\n    borderRadius: 8,\n    gap: 8,\n  },\n  deleteButton: {\n    // Dynamic styling applied inline\n  },\n  editButton: {\n    // Dynamic styling applied inline\n  },\n  modalButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  inputLabel: {\n    fontSize: 14,\n    fontWeight: '500',\n    marginBottom: 8,\n    marginTop: 16,\n  },\n  textInput: {\n    borderWidth: 1,\n    borderRadius: 8,\n    paddingHorizontal: 12,\n    paddingVertical: 8,\n    fontSize: 16,\n  },\n  shapeSelector: {\n    flexDirection: 'row',\n    gap: 8,\n  },\n  shapeOption: {\n    flex: 1,\n    paddingVertical: 12,\n    paddingHorizontal: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n    alignItems: 'center',\n  },\n  shapeOptionText: {\n    fontSize: 14,\n    fontWeight: '500',\n    textTransform: 'capitalize',\n  },\n  sectionSelector: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 8,\n  },\n  sectionOption: {\n    paddingVertical: 8,\n    paddingHorizontal: 12,\n    borderRadius: 16,\n    borderWidth: 1,\n  },\n  sectionOptionText: {\n    fontSize: 14,\n    fontWeight: '500',\n  },\n  cancelButton: {\n    borderWidth: 1,\n  },\n  cancelButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  saveButton: {\n    // Dynamic styling applied inline\n  },\n  saveButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n  },\n});\n\nexport default TableManagementScreen;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/screens/xero/XeroSyncDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_loading' is assigned a value but never used.","line":71,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":71,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_interval' is assigned a value but never used.","line":248,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":248,"endColumn":20}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'itemsSyncService'. Either include it or remove the dependency array. Outer scope values like '_itemsSyncService' aren't valid dependencies because mutating them doesn't re-render the component.","line":147,"column":6,"nodeType":"ArrayExpression","endLine":147,"endColumn":75,"suggestions":[{"desc":"Update the dependencies array to be: [customerSyncService, itemsSyncService, salesSyncService, apiClient]","fix":{"range":[4497,4566],"text":"[customerSyncService, itemsSyncService, salesSyncService, apiClient]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  ScrollView,\n  TouchableOpacity,\n  Alert,\n  ActivityIndicator,\n  RefreshControl,\n  Modal,\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport { useNavigation } from '@react-navigation/native';\nimport XeroCustomerSyncService from '../../services/XeroCustomerSyncService';\nimport XeroItemsSyncService from '../../services/XeroItemsSyncService';\nimport XeroSalesSyncService from '../../services/XeroSalesSyncService';\nimport XeroApiClient from '../../services/XeroApiClient';\nimport { Colors } from '../../design-system/theme';\nimport { XeroSyncStatus, XeroEntityType } from '../../types/xero';\n\ninterface SyncStatistics {\n  customers: {\n    totalMappings: number;\n    lastSyncTime: Date | null;\n    pendingSync: number;\n  };\n  items: {\n    totalMappings: number;\n    categoryMappings: number;\n    lastSyncTime: Date | null;\n    pendingSync: number;\n  };\n  sales: {\n    totalMappings: number;\n    syncedOrders: number;\n    failedOrders: number;\n    pendingOrders: number;\n    lastSyncTime: Date | null;\n  };\n}\n\ninterface SyncOperation {\n  id: string;\n  type: XeroEntityType;\n  status: XeroSyncStatus;\n  startTime: Date;\n  endTime?: Date;\n  recordsProcessed: number;\n  recordsSuccess: number;\n  recordsFailed: number;\n  error?: string;\n}\n\ninterface ApiUsageInfo {\n  remainingRequests: number;\n  resetTime: number;\n  dailyLimit: number;\n  minuteLimit: number;\n  queueLength: number;\n  activeRequests: number;\n  requestsThisMinute: number;\n  requestsToday: number;\n}\n\nconst XeroSyncDashboard: React.FC = () => {\n  const navigation = useNavigation();\n  const [statistics, setStatistics] = useState<SyncStatistics | null>(__null);\n  const [apiUsage, setApiUsage] = useState<ApiUsageInfo | null>(__null);\n  const [recentOperations, setRecentOperations] = useState<SyncOperation[]>([]);\n  const [_loading, setLoading] = useState(__true);\n  const [refreshing, setRefreshing] = useState(__false);\n  const [syncInProgress, setSyncInProgress] = useState(__false);\n  const [selectedOperation, setSelectedOperation] = useState<SyncOperation | null>(__null);\n  const [modalVisible, setModalVisible] = useState(__false);\n\n  const customerSyncService = XeroCustomerSyncService.getInstance();\n  const itemsSyncService = XeroItemsSyncService.getInstance();\n  const salesSyncService = XeroSalesSyncService.getInstance();\n  const apiClient = XeroApiClient.getInstance();\n\n  /**\n   * Load dashboard data\n   */\n  const loadDashboardData = useCallback(async () => {\n    try {\n      // Load statistics from all sync services\n      const [_customerStats, _itemsStats, _salesStats] = await Promise.all([\n        customerSyncService.getSyncStatistics(),\n        itemsSyncService.getSyncStatistics(),\n        salesSyncService.getSyncStatistics(),\n      ]);\n\n      setStatistics({\n        customers: _customerStats,\n        items: _itemsStats,\n        sales: _salesStats,\n      });\n\n      // Load API usage information\n      const rateLimitInfo = apiClient.getRateLimitInfo();\n      const queueStatus = apiClient.getQueueStatus();\n\n      setApiUsage({\n        ...rateLimitInfo,\n        ...queueStatus,\n      });\n\n      // Load recent operations (mock data for now)\n      setRecentOperations([\n        {\n          id: '1',\n          type: XeroEntityType.CONTACT,\n          status: XeroSyncStatus.COMPLETED,\n          startTime: new Date(Date.now() - 300000), // 5 minutes ago\n          endTime: new Date(Date.now() - 280000),\n          recordsProcessed: 15,\n          recordsSuccess: 14,\n          recordsFailed: 1,\n        },\n        {\n          id: '2',\n          type: XeroEntityType.ITEM,\n          status: XeroSyncStatus.COMPLETED,\n          startTime: new Date(Date.now() - 900000), // 15 minutes ago\n          endTime: new Date(Date.now() - 870000),\n          recordsProcessed: 8,\n          recordsSuccess: 8,\n          recordsFailed: 0,\n        },\n        {\n          id: '3',\n          type: XeroEntityType.INVOICE,\n          status: XeroSyncStatus.FAILED,\n          startTime: new Date(Date.now() - 1800000), // 30 minutes ago\n          endTime: new Date(Date.now() - 1770000),\n          recordsProcessed: 3,\n          recordsSuccess: 1,\n          recordsFailed: 2,\n          error: 'Rate limit exceeded',\n        },\n      ]);\n    } catch (__error) {\n      Alert.alert('Error', 'Failed to load sync dashboard data');\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [customerSyncService, _itemsSyncService, salesSyncService, apiClient]);\n\n  /**\n   * Handle manual sync trigger\n   */\n  const handleManualSync = (entityType: _XeroEntityType) => {\n    Alert.alert('Manual Sync', `Start manual synchronization for ${entityType}?`, [\n      { text: 'Cancel', style: 'cancel' },\n      {\n        text: 'Start Sync',\n        onPress: async () => {\n          try {\n            setSyncInProgress(__true);\n\n            // This would trigger actual sync operations\n            // For now, just simulate a sync\n            await new Promise(_resolve => setTimeout(__resolve, 3000));\n\n            Alert.alert('Success', `${entityType} sync completed successfully`);\n            await loadDashboardData();\n          } catch (__error) {\n            Alert.alert('Error', 'Manual sync failed');\n          } finally {\n            setSyncInProgress(__false);\n          }\n        },\n      },\n    ]);\n  };\n\n  /**\n   * Handle refresh\n   */\n  const onRefresh = useCallback(async () => {\n    setRefreshing(__true);\n    await loadDashboardData();\n    setRefreshing(__false);\n  }, [loadDashboardData]);\n\n  /**\n   * Format date for display\n   */\n  const formatDate = (date: Date | null) => {\n    if (!date) {\n      return 'Never';\n    }\n    return date.toLocaleString();\n  };\n\n  /**\n   * Format duration\n   */\n  const formatDuration = (start: _Date, end?: _Date) => {\n    if (!end) {\n      return 'Running...';\n    }\n    const duration = end.getTime() - start.getTime();\n    return `${Math.round(duration / 1000)}s`;\n  };\n\n  /**\n   * Get status color\n   */\n  const getStatusColor = (_status: _XeroSyncStatus) => {\n    switch (__status) {\n      case XeroSyncStatus.COMPLETED:\n        return Colors.success;\n      case XeroSyncStatus.FAILED:\n        return Colors.error;\n      case XeroSyncStatus.IN_PROGRESS:\n        return Colors.warning;\n      default:\n        return Colors.textSecondary;\n    }\n  };\n\n  /**\n   * Get status icon\n   */\n  const getStatusIcon = (_status: _XeroSyncStatus) => {\n    switch (__status) {\n      case XeroSyncStatus.COMPLETED:\n        return 'check-circle';\n      case XeroSyncStatus.FAILED:\n        return 'error';\n      case XeroSyncStatus.IN_PROGRESS:\n        return 'hourglass-empty';\n      default:\n        return 'help';\n    }\n  };\n\n  useEffect(() => {\n    const initializeDashboard = async () => {\n      await loadDashboardData();\n      setLoading(__false);\n    };\n\n    initializeDashboard();\n\n    // Set up auto-refresh every 30 seconds\n    const _interval = setInterval(__loadDashboardData, 30000);\n    return () => clearInterval(__interval);\n  }, [loadDashboardData]);\n\n  if (__loading) {\n    return (\n      <View style={styles.loadingContainer}>\n        <ActivityIndicator size=\"large\" color={Colors.primary} />\n        <Text style={styles.loadingText}>Loading sync dashboard...</Text>\n      </View>\n    );\n  }\n\n  return (\n    <ScrollView\n      style={styles.container}\n      refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}>\n      {/* Header */}\n      <View style={styles.header}>\n        <TouchableOpacity onPress={() => navigation.goBack()} style={styles.backButton}>\n          <Icon name=\"arrow-back\" size={24} color={Colors.white} />\n        </TouchableOpacity>\n        <Text style={styles.headerTitle}>Xero Sync Dashboard</Text>\n        <View style={styles.headerSpacer} />\n      </View>\n\n      {/* API Usage Card */}\n      {apiUsage && (\n        <View style={styles.card}>\n          <View style={styles.cardHeader}>\n            <Icon name=\"api\" size={24} color={Colors.primary} />\n            <Text style={styles.cardTitle}>API Usage</Text>\n          </View>\n\n          <View style={styles.apiUsageGrid}>\n            <View style={styles.apiUsageItem}>\n              <Text style={styles.apiUsageLabel}>Remaining Today</Text>\n              <Text style={styles.apiUsageValue}>{apiUsage.remainingRequests}</Text>\n            </View>\n            <View style={styles.apiUsageItem}>\n              <Text style={styles.apiUsageLabel}>Queue Length</Text>\n              <Text style={styles.apiUsageValue}>{apiUsage.queueLength}</Text>\n            </View>\n            <View style={styles.apiUsageItem}>\n              <Text style={styles.apiUsageLabel}>Active Requests</Text>\n              <Text style={styles.apiUsageValue}>{apiUsage.activeRequests}</Text>\n            </View>\n            <View style={styles.apiUsageItem}>\n              <Text style={styles.apiUsageLabel}>Requests/Min</Text>\n              <Text style={styles.apiUsageValue}>\n                {apiUsage.requestsThisMinute}/{apiUsage.minuteLimit}\n              </Text>\n            </View>\n          </View>\n        </View>\n      )}\n\n      {/* Sync Statistics Cards */}\n      {statistics && (\n        <>\n          {/* Customers */}\n          <View style={styles.card}>\n            <View style={styles.cardHeader}>\n              <Icon name=\"people\" size={24} color={Colors.primary} />\n              <Text style={styles.cardTitle}>Customer Sync</Text>\n              <TouchableOpacity\n                style={styles.syncButton}\n                onPress={() => handleManualSync(XeroEntityType.CONTACT)}\n                disabled={syncInProgress}>\n                <Icon name=\"sync\" size={20} color={Colors.white} />\n              </TouchableOpacity>\n            </View>\n\n            <View style={styles.statsGrid}>\n              <View style={styles.statItem}>\n                <Text style={styles.statLabel}>Total Mappings</Text>\n                <Text style={styles.statValue}>{statistics.customers.totalMappings}</Text>\n              </View>\n              <View style={styles.statItem}>\n                <Text style={styles.statLabel}>Pending Sync</Text>\n                <Text style={styles.statValue}>{statistics.customers.pendingSync}</Text>\n              </View>\n            </View>\n\n            <Text style={styles.lastSyncText}>\n              Last sync: {formatDate(statistics.customers.lastSyncTime)}\n            </Text>\n          </View>\n\n          {/* Items */}\n          <View style={styles.card}>\n            <View style={styles.cardHeader}>\n              <Icon name=\"inventory\" size={24} color={Colors.primary} />\n              <Text style={styles.cardTitle}>Items Sync</Text>\n              <TouchableOpacity\n                style={styles.syncButton}\n                onPress={() => handleManualSync(XeroEntityType.ITEM)}\n                disabled={syncInProgress}>\n                <Icon name=\"sync\" size={20} color={Colors.white} />\n              </TouchableOpacity>\n            </View>\n\n            <View style={styles.statsGrid}>\n              <View style={styles.statItem}>\n                <Text style={styles.statLabel}>Item Mappings</Text>\n                <Text style={styles.statValue}>{statistics.items.totalMappings}</Text>\n              </View>\n              <View style={styles.statItem}>\n                <Text style={styles.statLabel}>Category Mappings</Text>\n                <Text style={styles.statValue}>{statistics.items.categoryMappings}</Text>\n              </View>\n            </View>\n\n            <Text style={styles.lastSyncText}>\n              Last sync: {formatDate(statistics.items.lastSyncTime)}\n            </Text>\n          </View>\n\n          {/* Sales */}\n          <View style={styles.card}>\n            <View style={styles.cardHeader}>\n              <Icon name=\"receipt\" size={24} color={Colors.primary} />\n              <Text style={styles.cardTitle}>Sales Sync</Text>\n              <TouchableOpacity\n                style={styles.syncButton}\n                onPress={() => handleManualSync(XeroEntityType.INVOICE)}\n                disabled={syncInProgress}>\n                <Icon name=\"sync\" size={20} color={Colors.white} />\n              </TouchableOpacity>\n            </View>\n\n            <View style={styles.statsGrid}>\n              <View style={styles.statItem}>\n                <Text style={styles.statLabel}>Synced Orders</Text>\n                <Text style={styles.statValue}>{statistics.sales.syncedOrders}</Text>\n              </View>\n              <View style={styles.statItem}>\n                <Text style={styles.statLabel}>Failed Orders</Text>\n                <Text style={[styles.statValue, { color: Colors.error }]}>\n                  {statistics.sales.failedOrders}\n                </Text>\n              </View>\n              <View style={styles.statItem}>\n                <Text style={styles.statLabel}>Pending Orders</Text>\n                <Text style={styles.statValue}>{statistics.sales.pendingOrders}</Text>\n              </View>\n              <View style={styles.statItem}>\n                <Text style={styles.statLabel}>Total Mappings</Text>\n                <Text style={styles.statValue}>{statistics.sales.totalMappings}</Text>\n              </View>\n            </View>\n\n            <Text style={styles.lastSyncText}>\n              Last sync: {formatDate(statistics.sales.lastSyncTime)}\n            </Text>\n          </View>\n        </>\n      )}\n\n      {/* Recent Operations */}\n      <View style={styles.card}>\n        <View style={styles.cardHeader}>\n          <Icon name=\"history\" size={24} color={Colors.primary} />\n          <Text style={styles.cardTitle}>Recent Operations</Text>\n        </View>\n\n        {recentOperations.map(operation => (\n          <TouchableOpacity\n            key={operation.id}\n            style={styles.operationItem}\n            onPress={() => {\n              setSelectedOperation(__operation);\n              setModalVisible(__true);\n            }}>\n            <View style={styles.operationHeader}>\n              <Icon\n                name={getStatusIcon(operation.status)}\n                size={20}\n                color={getStatusColor(operation.status)}\n              />\n              <Text style={styles.operationType}>{operation.type}</Text>\n              <Text style={styles.operationTime}>{formatDate(operation.startTime)}</Text>\n            </View>\n\n            <View style={styles.operationStats}>\n              <Text style={styles.operationStat}>Processed: {operation.recordsProcessed}</Text>\n              <Text style={styles.operationStat}>Success: {operation.recordsSuccess}</Text>\n              {operation.recordsFailed > 0 && (\n                <Text style={[styles.operationStat, { color: Colors.error }]}>\n                  Failed: {operation.recordsFailed}\n                </Text>\n              )}\n              <Text style={styles.operationStat}>\n                Duration: {formatDuration(operation.startTime, operation.endTime)}\n              </Text>\n            </View>\n\n            {operation.error && (\n              <Text style={styles.operationError} numberOfLines={1}>\n                Error: {operation.error}\n              </Text>\n            )}\n          </TouchableOpacity>\n        ))}\n      </View>\n\n      {/* Operation Details Modal */}\n      <Modal\n        visible={modalVisible}\n        transparent={true}\n        animationType=\"slide\"\n        onRequestClose={() => setModalVisible(__false)}>\n        <View style={styles.modalOverlay}>\n          <View style={styles.modalContent}>\n            {selectedOperation && (\n              <>\n                <View style={styles.modalHeader}>\n                  <Text style={styles.modalTitle}>Operation Details</Text>\n                  <TouchableOpacity\n                    onPress={() => setModalVisible(__false)}\n                    style={styles.modalCloseButton}>\n                    <Icon name=\"close\" size={24} color={Colors.text} />\n                  </TouchableOpacity>\n                </View>\n\n                <View style={styles.modalBody}>\n                  <View style={styles.detailRow}>\n                    <Text style={styles.detailLabel}>Type:</Text>\n                    <Text style={styles.detailValue}>{selectedOperation.type}</Text>\n                  </View>\n                  <View style={styles.detailRow}>\n                    <Text style={styles.detailLabel}>Status:</Text>\n                    <Text\n                      style={[\n                        styles.detailValue,\n                        { color: getStatusColor(selectedOperation.status) },\n                      ]}>\n                      {selectedOperation.status}\n                    </Text>\n                  </View>\n                  <View style={styles.detailRow}>\n                    <Text style={styles.detailLabel}>Start Time:</Text>\n                    <Text style={styles.detailValue}>\n                      {formatDate(selectedOperation.startTime)}\n                    </Text>\n                  </View>\n                  {selectedOperation.endTime && (\n                    <View style={styles.detailRow}>\n                      <Text style={styles.detailLabel}>End Time:</Text>\n                      <Text style={styles.detailValue}>\n                        {formatDate(selectedOperation.endTime)}\n                      </Text>\n                    </View>\n                  )}\n                  <View style={styles.detailRow}>\n                    <Text style={styles.detailLabel}>Records Processed:</Text>\n                    <Text style={styles.detailValue}>{selectedOperation.recordsProcessed}</Text>\n                  </View>\n                  <View style={styles.detailRow}>\n                    <Text style={styles.detailLabel}>Successful:</Text>\n                    <Text style={styles.detailValue}>{selectedOperation.recordsSuccess}</Text>\n                  </View>\n                  <View style={styles.detailRow}>\n                    <Text style={styles.detailLabel}>Failed:</Text>\n                    <Text style={styles.detailValue}>{selectedOperation.recordsFailed}</Text>\n                  </View>\n                  {selectedOperation.error && (\n                    <View style={styles.detailRow}>\n                      <Text style={styles.detailLabel}>Error:</Text>\n                      <Text style={[styles.detailValue, { color: Colors.error }]}>\n                        {selectedOperation.error}\n                      </Text>\n                    </View>\n                  )}\n                </View>\n              </>\n            )}\n          </View>\n        </View>\n      </Modal>\n\n      {/* Sync Progress Indicator */}\n      {syncInProgress && (\n        <View style={styles.syncProgressOverlay}>\n          <View style={styles.syncProgressContent}>\n            <ActivityIndicator size=\"large\" color={Colors.primary} />\n            <Text style={styles.syncProgressText}>Synchronizing...</Text>\n          </View>\n        </View>\n      )}\n    </ScrollView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: Colors.background,\n  },\n  loadingText: {\n    marginTop: 16,\n    fontSize: 16,\n    color: Colors.textSecondary,\n  },\n  header: {\n    backgroundColor: Colors.primary,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    paddingTop: 48,\n  },\n  backButton: {\n    padding: 8,\n  },\n  headerTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.white,\n  },\n  headerSpacer: {\n    width: 40,\n  },\n  card: {\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    padding: 20,\n    margin: 16,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  cardHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 16,\n  },\n  cardTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n    marginLeft: 12,\n    flex: 1,\n  },\n  syncButton: {\n    backgroundColor: Colors.primary,\n    paddingHorizontal: 12,\n    paddingVertical: 8,\n    borderRadius: 6,\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  apiUsageGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'space-between',\n  },\n  apiUsageItem: {\n    width: '48%',\n    marginBottom: 12,\n  },\n  apiUsageLabel: {\n    fontSize: 12,\n    color: Colors.textSecondary,\n    marginBottom: 4,\n  },\n  apiUsageValue: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  statsGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'space-between',\n    marginBottom: 16,\n  },\n  statItem: {\n    width: '48%',\n    marginBottom: 12,\n  },\n  statLabel: {\n    fontSize: 12,\n    color: Colors.textSecondary,\n    marginBottom: 4,\n  },\n  statValue: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  lastSyncText: {\n    fontSize: 12,\n    color: Colors.textSecondary,\n    fontStyle: 'italic',\n  },\n  operationItem: {\n    backgroundColor: Colors.background,\n    padding: 12,\n    borderRadius: 8,\n    marginBottom: 8,\n  },\n  operationHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  operationType: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.text,\n    marginLeft: 8,\n    flex: 1,\n  },\n  operationTime: {\n    fontSize: 12,\n    color: Colors.textSecondary,\n  },\n  operationStats: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 12,\n    marginBottom: 4,\n  },\n  operationStat: {\n    fontSize: 12,\n    color: Colors.textSecondary,\n  },\n  operationError: {\n    fontSize: 12,\n    color: Colors.error,\n    fontStyle: 'italic',\n    marginTop: 4,\n  },\n  modalOverlay: {\n    flex: 1,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  modalContent: {\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    padding: 20,\n    width: '90%',\n    maxHeight: '80%',\n  },\n  modalHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 20,\n  },\n  modalTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  modalCloseButton: {\n    padding: 4,\n  },\n  modalBody: {\n    gap: 12,\n  },\n  detailRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  detailLabel: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    fontWeight: '500',\n  },\n  detailValue: {\n    fontSize: 14,\n    color: Colors.text,\n    flex: 1,\n    textAlign: 'right',\n  },\n  syncProgressOverlay: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: 'rgba(0, 0, 0, 0.3)',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  syncProgressContent: {\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    padding: 30,\n    alignItems: 'center',\n  },\n  syncProgressText: {\n    marginTop: 16,\n    fontSize: 16,\n    color: Colors.text,\n  },\n});\n\nexport default XeroSyncDashboard;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/services/APITestingService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_url' is assigned a value but never used.","line":59,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":59,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_healthTest' is assigned a value but never used.","line":121,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":121,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_logoutTest' is assigned a value but never used.","line":133,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":133,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_mobileProductsTest' is assigned a value but never used.","line":154,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":154,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_categoryProductsTest' is assigned a value but never used.","line":164,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":164,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_currentSessionTest' is assigned a value but never used.","line":185,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":185,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_createSessionTest' is assigned a value but never used.","line":189,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":189,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_floorPlanTest' is assigned a value but never used.","line":209,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":209,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_sectionsTest' is assigned a value but never used.","line":212,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":212,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_recentOrdersTest' is assigned a value but never used.","line":230,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":230,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_createOrderTest' is assigned a value but never used.","line":234,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":234,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_paymentTest' is assigned a value but never used.","line":266,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":266,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_authSuite' is assigned a value but never used.","line":284,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":284,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_productsSuite' is assigned a value but never used.","line":288,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":288,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_sessionsSuite' is assigned a value but never used.","line":292,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":292,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_restaurantSuite' is assigned a value but never used.","line":296,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":296,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_ordersSuite' is assigned a value but never used.","line":300,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":300,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_paymentsSuite' is assigned a value but never used.","line":304,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":304,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_results' is assigned a value but never used.","line":384,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":384,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_suites' is assigned a value but never used.","line":385,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":385,"endColumn":20}],"suppressedMessages":[],"errorCount":20,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// APITestingService.ts - Frontend API testing without affecting demo data\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport API_CONFIG from '../config/api';\n\n// API Test Result Interface\nexport interface APITestResult {\n  endpoint: string;\n  method: string;\n  success: boolean;\n  status?: number;\n  response?: unknown;\n  error?: string;\n  timestamp: Date;\n  responseTime?: number;\n}\n\n// API Test Suite Interface\nexport interface APITestSuite {\n  name: string;\n  tests: APITestResult[];\n  overallSuccess: boolean;\n  timestamp: Date;\n}\n\n/**\n * APITestingService - Test backend APIs without affecting demo data\n *\n * This service allows us to:\n * 1. Test real API endpoints independently\n * 2. Keep mock data intact for demos\n * 3. Validate backend response formats\n * 4. Generate API compatibility reports\n */\nclass APITestingService {\n  private static instance: APITestingService;\n  private baseUrl = API_CONFIG.BASE_URL;\n  private testResults: APITestResult[] = [];\n  private testSuites: APITestSuite[] = [];\n\n  constructor() {\n    this.loadTestHistory();\n  }\n\n  static getInstance(): APITestingService {\n    if (!APITestingService.instance) {\n      APITestingService.instance = new APITestingService();\n    }\n    return APITestingService.instance;\n  }\n\n  // Test individual API endpoint\n  async testEndpoint(\n    endpoint: _string,\n    method = 'GET',\n    body?: _unknown,\n    headers?: Record<string, string>,\n  ): Promise<APITestResult> {\n    const startTime = Date.now();\n    const _url = `${this.baseUrl}${endpoint}`;\n\n    const testResult: APITestResult = {\n      endpoint,\n      method,\n      success: _false,\n      timestamp: new Date(),\n    };\n\n    try {\n      const requestOptions: RequestInit = {\n        method,\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n          ...headers,\n        },\n      };\n\n      if (body && (method === 'POST' || method === 'PUT')) {\n        requestOptions.body = JSON.stringify(__body);\n      }\n\n      const response = await fetch(__url, _requestOptions);\n      const endTime = Date.now();\n\n      testResult.status = response.status;\n      testResult.responseTime = endTime - startTime;\n\n      try {\n        testResult.response = await response.json();\n      } catch {\n        testResult.response = await response.text();\n      }\n\n      testResult.success = response.ok;\n\n      if (!response.ok) {\n        testResult.error = `HTTP ${response.status}: ${response.statusText}`;\n      }\n    } catch (__error) {\n      const endTime = Date.now();\n      testResult.responseTime = endTime - startTime;\n      testResult.error = error instanceof Error ? error.message : 'Unknown error';\n      testResult.success = false;\n    }\n\n    this.testResults.push(__testResult);\n    await this.saveTestHistory();\n    return testResult;\n  }\n\n  // Test authentication flow\n  async testAuthenticationFlow(): Promise<APITestSuite> {\n    const suite: APITestSuite = {\n      name: 'Authentication Flow',\n      tests: [],\n      overallSuccess: _true,\n      timestamp: new Date(),\n    };\n\n    // Test health endpoint first\n    const _healthTest = await this.testEndpoint('/health');\n    suite.tests.push(__healthTest);\n\n    // Test login endpoint\n    const loginTest = await this.testEndpoint('/api/v1/auth/login', 'POST', {\n      email: 'test@example.com',\n      password: 'password123',\n    });\n    suite.tests.push(__loginTest);\n\n    // Test logout endpoint (if login was successful)\n    if (loginTest.success && loginTest.response?.data?.access_token) {\n      const _logoutTest = await this.testEndpoint('/api/v1/auth/logout', 'POST', _null, {\n        Authorization: `Bearer ${loginTest.response.data.access_token}`,\n      });\n      suite.tests.push(__logoutTest);\n    }\n\n    suite.overallSuccess = suite.tests.every(test => test.success);\n    this.testSuites.push(__suite);\n    return suite;\n  }\n\n  // Test products endpoints\n  async testProductsEndpoints(): Promise<APITestSuite> {\n    const suite: APITestSuite = {\n      name: 'Products API',\n      tests: [],\n      overallSuccess: _true,\n      timestamp: new Date(),\n    };\n\n    // Test mobile products endpoint\n    const _mobileProductsTest = await this.testEndpoint('/api/v1/products/mobile');\n    suite.tests.push(__mobileProductsTest);\n\n    // Test categories endpoint\n    const categoriesTest = await this.testEndpoint('/api/v1/categories');\n    suite.tests.push(__categoriesTest);\n\n    // Test products by category (if categories exist)\n    if (categoriesTest.success && categoriesTest.response?.data?.length > 0) {\n      const firstCategoryId = categoriesTest.response.data[0].id;\n      const _categoryProductsTest = await this.testEndpoint(\n        `/api/v1/products/category/${firstCategoryId}`,\n      );\n      suite.tests.push(__categoryProductsTest);\n    }\n\n    suite.overallSuccess = suite.tests.every(test => test.success);\n    this.testSuites.push(__suite);\n    return suite;\n  }\n\n  // Test POS sessions endpoints\n  async testPOSSessionsEndpoints(): Promise<APITestSuite> {\n    const suite: APITestSuite = {\n      name: 'POS Sessions API',\n      tests: [],\n      overallSuccess: _true,\n      timestamp: new Date(),\n    };\n\n    // Test current session endpoint\n    const _currentSessionTest = await this.testEndpoint('/api/v1/pos/sessions/current');\n    suite.tests.push(__currentSessionTest);\n\n    // Test create session endpoint\n    const _createSessionTest = await this.testEndpoint('/api/v1/pos/sessions', 'POST', {\n      config_id: 1,\n    });\n    suite.tests.push(__createSessionTest);\n\n    suite.overallSuccess = suite.tests.every(test => test.success);\n    this.testSuites.push(__suite);\n    return suite;\n  }\n\n  // Test restaurant endpoints\n  async testRestaurantEndpoints(): Promise<APITestSuite> {\n    const suite: APITestSuite = {\n      name: 'Restaurant API',\n      tests: [],\n      overallSuccess: _true,\n      timestamp: new Date(),\n    };\n\n    // Test floor plan and restaurant data\n    const _floorPlanTest = await this.testEndpoint('/api/v1/restaurants/floor-plan');\n    suite.tests.push(__floorPlanTest);\n\n    const _sectionsTest = await this.testEndpoint('/api/v1/restaurants/sections');\n    suite.tests.push(__sectionsTest);\n\n    suite.overallSuccess = suite.tests.every(test => test.success);\n    this.testSuites.push(__suite);\n    return suite;\n  }\n\n  // Test orders endpoints\n  async testOrdersEndpoints(): Promise<APITestSuite> {\n    const suite: APITestSuite = {\n      name: 'Orders API',\n      tests: [],\n      overallSuccess: _true,\n      timestamp: new Date(),\n    };\n\n    // Test recent orders endpoint\n    const _recentOrdersTest = await this.testEndpoint('/api/v1/orders/recent?limit=5');\n    suite.tests.push(__recentOrdersTest);\n\n    // Test create order endpoint\n    const _createOrderTest = await this.testEndpoint('/api/v1/orders', 'POST', {\n      date_order: new Date().toISOString(),\n      state: 'draft',\n      amount_total: 25.99,\n      session_id: 1,\n      lines: [\n        {\n          product_id: 1,\n          product_name: 'Test Product',\n          qty: 1,\n          price_unit: 25.99,\n          price_subtotal: 25.99,\n        },\n      ],\n    });\n    suite.tests.push(__createOrderTest);\n\n    suite.overallSuccess = suite.tests.every(test => test.success);\n    this.testSuites.push(__suite);\n    return suite;\n  }\n\n  // Test payments endpoints\n  async testPaymentsEndpoints(): Promise<APITestSuite> {\n    const suite: APITestSuite = {\n      name: 'Payments API',\n      tests: [],\n      overallSuccess: _true,\n      timestamp: new Date(),\n    };\n\n    // Test payment processing endpoint\n    const _paymentTest = await this.testEndpoint('/api/v1/payments', 'POST', {\n      order_id: 1,\n      payment_method: 'cash',\n      amount: 25.99,\n    });\n    suite.tests.push(__paymentTest);\n\n    suite.overallSuccess = suite.tests.every(test => test.success);\n    this.testSuites.push(__suite);\n    return suite;\n  }\n\n  // Run comprehensive API test suite\n  async runFullAPITestSuite(): Promise<APITestSuite[]> {\n    const allSuites: APITestSuite[] = [];\n\n    try {\n      // Test authentication first\n      const _authSuite = await this.testAuthenticationFlow();\n      allSuites.push(__authSuite);\n\n      // Test products\n      const _productsSuite = await this.testProductsEndpoints();\n      allSuites.push(__productsSuite);\n\n      // Test POS sessions\n      const _sessionsSuite = await this.testPOSSessionsEndpoints();\n      allSuites.push(__sessionsSuite);\n\n      // Test restaurant\n      const _restaurantSuite = await this.testRestaurantEndpoints();\n      allSuites.push(__restaurantSuite);\n\n      // Test orders\n      const _ordersSuite = await this.testOrdersEndpoints();\n      allSuites.push(__ordersSuite);\n\n      // Test payments\n      const _paymentsSuite = await this.testPaymentsEndpoints();\n      allSuites.push(__paymentsSuite);\n    } catch (__error) {\n      // Error handled silently\n    }\n\n    return allSuites;\n  }\n\n  // Validate response format matches frontend expectations\n  validateResponseFormat(response: _unknown, _endpoint: _string): boolean {\n    if (!response) {\n      return false;\n    }\n\n    // Check for standardized response format\n    const hasSuccessField = typeof response.success === 'boolean';\n    const hasDataOrError = response.data !== undefined || response.error !== undefined;\n\n    if (!hasSuccessField || !hasDataOrError) {\n      return false;\n    }\n\n    return true;\n  }\n\n  // Get test results\n  getTestResults(): APITestResult[] {\n    return [...this.testResults];\n  }\n\n  getTestSuites(): APITestSuite[] {\n    return [...this.testSuites];\n  }\n\n  // Get API health summary\n  getAPIHealthSummary(): {\n    totalTests: number;\n    successfulTests: number;\n    failedTests: number;\n    successRate: number;\n    lastTestTime: Date | null;\n  } {\n    const totalTests = this.testResults.length;\n    const successfulTests = this.testResults.filter(test => test.success).length;\n    const failedTests = totalTests - successfulTests;\n    const successRate = totalTests > 0 ? (successfulTests / totalTests) * 100 : 0;\n    const lastTestTime =\n      totalTests > 0 ? this.testResults[this.testResults.length - 1].timestamp : null;\n\n    return {\n      totalTests,\n      successfulTests,\n      failedTests,\n      successRate,\n      lastTestTime,\n    };\n  }\n\n  // Clear test history\n  async clearTestHistory(): Promise<void> {\n    this.testResults = [];\n    this.testSuites = [];\n    await AsyncStorage.removeItem('api_test_results');\n    await AsyncStorage.removeItem('api_test_suites');\n  }\n\n  // Save test history\n  private async saveTestHistory(): Promise<void> {\n    try {\n      await AsyncStorage.setItem('api_test_results', JSON.stringify(this.testResults));\n      await AsyncStorage.setItem('api_test_suites', JSON.stringify(this.testSuites));\n    } catch (__error) {\n      // Error handled silently\n    }\n  }\n\n  // Load test history\n  private async loadTestHistory(): Promise<void> {\n    try {\n      const _results = await AsyncStorage.getItem('api_test_results');\n      const _suites = await AsyncStorage.getItem('api_test_suites');\n\n      if (__results) {\n        this.testResults = JSON.parse(__results).map((result: _unknown) => ({\n          ...result,\n          timestamp: new Date(result.timestamp),\n        }));\n      }\n\n      if (__suites) {\n        this.testSuites = JSON.parse(__suites).map((suite: _unknown) => ({\n          ...suite,\n          timestamp: new Date(suite.timestamp),\n        }));\n      }\n    } catch (__error) {\n      // Error handled silently\n    }\n  }\n}\n\nexport default APITestingService;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/services/AnalyticsService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_multiplier' is assigned a value but never used.","line":165,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":165,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'label' is assigned a value but never used.","line":442,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":442,"endColumn":14},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'label' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":442,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":442,"endColumn":14},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":453,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":453,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11769,11772],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11769,11772],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"interface AnalyticsData {\n  revenue: RevenueData;\n  transactions: TransactionData;\n  performance: PerformanceData;\n  trends: TrendData;\n}\n\ninterface RevenueData {\n  total: number;\n  commission: number;\n  avgCommissionRate: number;\n  growth: number;\n  byPeriod: PeriodData[];\n  byRestaurant: RestaurantRevenue[];\n}\n\ninterface TransactionData {\n  total: number;\n  avgValue: number;\n  growth: number;\n  byPeriod: PeriodData[];\n  byPaymentMethod: PaymentMethodData[];\n}\n\ninterface PerformanceData {\n  rankings: RestaurantRanking[];\n  metrics: RestaurantMetrics[];\n  comparisons: ComparisonData[];\n}\n\ninterface TrendData {\n  daily: PeriodData[];\n  weekly: PeriodData[];\n  monthly: PeriodData[];\n  yearly: PeriodData[];\n}\n\ninterface PeriodData {\n  period: string;\n  value: number;\n  change?: number;\n}\n\ninterface RestaurantRevenue {\n  restaurantId: string;\n  name: string;\n  revenue: number;\n  commission: number;\n  growth: number;\n}\n\ninterface RestaurantRanking {\n  rank: number;\n  restaurantId: string;\n  name: string;\n  revenue: number;\n  growth: number;\n  score: number;\n}\n\ninterface RestaurantMetrics {\n  restaurantId: string;\n  name: string;\n  avgOrderValue: number;\n  transactionCount: number;\n  customerSatisfaction: number;\n  uptime: number;\n}\n\ninterface ComparisonData {\n  metric: string;\n  values: { restaurantId: string; name: string; value: number }[];\n}\n\ninterface PaymentMethodData {\n  method: string;\n  count: number;\n  value: number;\n  percentage: number;\n}\n\nclass AnalyticsService {\n  private static instance: AnalyticsService;\n  private analyticsData: AnalyticsData | null = null;\n  private lastUpdated: Date | null = null;\n\n  static getInstance(): AnalyticsService {\n    if (!AnalyticsService.instance) {\n      AnalyticsService.instance = new AnalyticsService();\n    }\n    return AnalyticsService.instance;\n  }\n\n  async getAnalyticsData(\n    _period: 'today' | 'week' | 'month' | 'year' = 'month',\n  ): Promise<AnalyticsData> {\n    // Simulate API call delay\n    await new Promise(_resolve => setTimeout(__resolve, 1000));\n\n    // Generate mock analytics data based on period\n    return this.generateMockAnalyticsData(__period);\n  }\n\n  async getRevenueAnalytics(\n    _period: 'today' | 'week' | 'month' | 'year' = 'month',\n  ): Promise<RevenueData> {\n    const data = await this.getAnalyticsData(__period);\n    return data.revenue;\n  }\n\n  async getTransactionAnalytics(\n    _period: 'today' | 'week' | 'month' | 'year' = 'month',\n  ): Promise<TransactionData> {\n    const data = await this.getAnalyticsData(__period);\n    return data.transactions;\n  }\n\n  async getPerformanceAnalytics(): Promise<PerformanceData> {\n    const data = await this.getAnalyticsData();\n    return data.performance;\n  }\n\n  async getTrendAnalytics(\n    _period: 'today' | 'week' | 'month' | 'year' = 'month',\n  ): Promise<TrendData> {\n    const data = await this.getAnalyticsData(__period);\n    return data.trends;\n  }\n\n  async exportData(\n    format: 'csv' | 'json' | 'pdf',\n    period: _string,\n  ): Promise<{ url: string; filename: string }> {\n    // Simulate export generation\n    await new Promise(_resolve => setTimeout(__resolve, 2000));\n\n    const timestamp = new Date().toISOString().split('T')[0];\n    const filename = `fynlo-analytics-${period}-${timestamp}.${format}`;\n\n    return {\n      url: `https://api.fynlopos.com/exports/${filename}`,\n      filename,\n    };\n  }\n\n  async generateCustomReport(\n    metrics: string[],\n    restaurants: string[],\n    period: { start: Date; end: Date },\n  ): Promise<unknown> {\n    // Simulate custom report generation\n    await new Promise(_resolve => setTimeout(__resolve, 1500));\n\n    return {\n      reportId: `custom-${Date.now()}`,\n      metrics,\n      restaurants,\n      period,\n      data: this.generateCustomReportData(__metrics, _restaurants),\n      generatedAt: new Date(),\n    };\n  }\n\n  private generateMockAnalyticsData(_period: 'today' | 'week' | 'month' | 'year'): AnalyticsData {\n    const _multiplier = this.getPeriodMultiplier(__period);\n\n    return {\n      revenue: this.generateRevenueData(__multiplier, _period),\n      transactions: this.generateTransactionData(__multiplier, _period),\n      performance: this.generatePerformanceData(),\n      trends: this.generateTrendData(__period),\n    };\n  }\n\n  private getPeriodMultiplier(_period: 'today' | 'week' | 'month' | 'year'): number {\n    switch (__period) {\n      case 'today':\n        return 0.033; // 1/30th of month\n      case 'week':\n        return 0.23; // ~1/4 of month\n      case 'month':\n        return 1;\n      case 'year':\n        return 12;\n      default:\n        return 1;\n    }\n  }\n\n  private generateRevenueData(multiplier: _number, _period: _string): RevenueData {\n    const baseRevenue = 125400;\n    const total = Math.round(baseRevenue * multiplier);\n    const commission = Math.round(total * 0.026); // 2.6% avg commission\n\n    return {\n      total,\n      commission,\n      avgCommissionRate: 2.6,\n      growth: 12.5,\n      byPeriod: this.generatePeriodData(__period, _total),\n      byRestaurant: [\n        {\n          restaurantId: '1',\n          name: 'Fynlo Coffee Shop',\n          revenue: Math.round(total * 0.36),\n          commission: Math.round(total * 0.36 * 0.025),\n          growth: 15.2,\n        },\n        {\n          restaurantId: '2',\n          name: 'Fynlo Burger Bar',\n          revenue: Math.round(total * 0.31),\n          commission: Math.round(total * 0.31 * 0.027),\n          growth: 8.7,\n        },\n        {\n          restaurantId: '3',\n          name: 'Fynlo Pizza Palace',\n          revenue: Math.round(total * 0.26),\n          commission: Math.round(total * 0.26 * 0.024),\n          growth: 5.3,\n        },\n        {\n          restaurantId: '4',\n          name: 'Fynlo Taco Stand',\n          revenue: Math.round(total * 0.07),\n          commission: Math.round(total * 0.07 * 0.028),\n          growth: -2.1,\n        },\n      ],\n    };\n  }\n\n  private generateTransactionData(multiplier: _number, _period: _string): TransactionData {\n    const baseTransactions = 28473;\n    const total = Math.round(baseTransactions * multiplier);\n    const avgValue = 44.3;\n\n    return {\n      total,\n      avgValue,\n      growth: 8.2,\n      byPeriod: this.generatePeriodData(__period, _total),\n      byPaymentMethod: [\n        {\n          method: 'Card',\n          count: Math.round(total * 0.65),\n          value: Math.round(total * 0.65 * avgValue),\n          percentage: 65,\n        },\n        {\n          method: 'Contactless',\n          count: Math.round(total * 0.25),\n          value: Math.round(total * 0.25 * avgValue),\n          percentage: 25,\n        },\n        {\n          method: 'Mobile Pay',\n          count: Math.round(total * 0.08),\n          value: Math.round(total * 0.08 * avgValue),\n          percentage: 8,\n        },\n        {\n          method: 'Cash',\n          count: Math.round(total * 0.02),\n          value: Math.round(total * 0.02 * avgValue),\n          percentage: 2,\n        },\n      ],\n    };\n  }\n\n  private generatePerformanceData(): PerformanceData {\n    return {\n      rankings: [\n        {\n          rank: 1,\n          restaurantId: '1',\n          name: 'Fynlo Coffee Shop',\n          revenue: 45200,\n          growth: 15.2,\n          score: 92,\n        },\n        {\n          rank: 2,\n          restaurantId: '2',\n          name: 'Fynlo Burger Bar',\n          revenue: 38900,\n          growth: 8.7,\n          score: 87,\n        },\n        {\n          rank: 3,\n          restaurantId: '3',\n          name: 'Fynlo Pizza Palace',\n          revenue: 32800,\n          growth: 5.3,\n          score: 81,\n        },\n        {\n          rank: 4,\n          restaurantId: '4',\n          name: 'Fynlo Taco Stand',\n          revenue: 8500,\n          growth: -2.1,\n          score: 73,\n        },\n      ],\n      metrics: [\n        {\n          restaurantId: '1',\n          name: 'Fynlo Coffee Shop',\n          avgOrderValue: 12.5,\n          transactionCount: 3616,\n          customerSatisfaction: 4.8,\n          uptime: 99.2,\n        },\n        {\n          restaurantId: '2',\n          name: 'Fynlo Burger Bar',\n          avgOrderValue: 18.75,\n          transactionCount: 2075,\n          customerSatisfaction: 4.6,\n          uptime: 98.8,\n        },\n        {\n          restaurantId: '3',\n          name: 'Fynlo Pizza Palace',\n          avgOrderValue: 25.3,\n          transactionCount: 1296,\n          customerSatisfaction: 4.7,\n          uptime: 97.5,\n        },\n        {\n          restaurantId: '4',\n          name: 'Fynlo Taco Stand',\n          avgOrderValue: 8.9,\n          transactionCount: 955,\n          customerSatisfaction: 4.4,\n          uptime: 96.1,\n        },\n      ],\n      comparisons: [\n        {\n          metric: 'Average Order Value',\n          values: [\n            { restaurantId: '3', name: 'Fynlo Pizza Palace', value: 25.3 },\n            { restaurantId: '2', name: 'Fynlo Burger Bar', value: 18.75 },\n            { restaurantId: '1', name: 'Fynlo Coffee Shop', value: 12.5 },\n            { restaurantId: '4', name: 'Fynlo Taco Stand', value: 8.9 },\n          ],\n        },\n        {\n          metric: 'Customer Satisfaction',\n          values: [\n            { restaurantId: '1', name: 'Fynlo Coffee Shop', value: 4.8 },\n            { restaurantId: '3', name: 'Fynlo Pizza Palace', value: 4.7 },\n            { restaurantId: '2', name: 'Fynlo Burger Bar', value: 4.6 },\n            { restaurantId: '4', name: 'Fynlo Taco Stand', value: 4.4 },\n          ],\n        },\n      ],\n    };\n  }\n\n  private generateTrendData(_period: _string): TrendData {\n    return {\n      daily: this.generatePeriodData('daily', 4200),\n      weekly: this.generatePeriodData('weekly', 29400),\n      monthly: this.generatePeriodData('monthly', 125400),\n      yearly: this.generatePeriodData('yearly', 1504800),\n    };\n  }\n\n  private generatePeriodData(period: _string, baseValue: _number): PeriodData[] {\n    const periods: PeriodData[] = [];\n    let pointCount = 12;\n    let labelFormat = '';\n\n    switch (__period) {\n      case 'today':\n        pointCount = 24;\n        labelFormat = 'hour';\n        break;\n      case 'week':\n        pointCount = 7;\n        labelFormat = 'day';\n        break;\n      case 'month':\n        pointCount = 30;\n        labelFormat = 'day';\n        break;\n      case 'year':\n        pointCount = 12;\n        labelFormat = 'month';\n        break;\n      case 'daily':\n        pointCount = 30;\n        labelFormat = 'day';\n        break;\n      case 'weekly':\n        pointCount = 12;\n        labelFormat = 'week';\n        break;\n      case 'monthly':\n        pointCount = 12;\n        labelFormat = 'month';\n        break;\n      case 'yearly':\n        pointCount = 5;\n        labelFormat = 'year';\n        break;\n    }\n\n    for (let i = 0; i < pointCount; i++) {\n      const variation = 0.8 + Math.random() * 0.4; // Random between 0.8 and 1.2\n      const _value = Math.round((baseValue / pointCount) * variation);\n      const change = -10 + Math.random() * 20; // Random between -10% and +10%\n\n      let label = '';\n      if (labelFormat === 'hour') {\n        label = `${i}:00`;\n      } else if (labelFormat === 'day') {\n        label = `Day ${i + 1}`;\n      } else if (labelFormat === 'week') {\n        label = `Week ${i + 1}`;\n      } else if (labelFormat === 'month') {\n        const months = [\n          'Jan',\n          'Feb',\n          'Mar',\n          'Apr',\n          'May',\n          'Jun',\n          'Jul',\n          'Aug',\n          'Sep',\n          'Oct',\n          'Nov',\n          'Dec',\n        ];\n        label = months[i];\n      } else if (labelFormat === 'year') {\n        _label = `${2020 + i}`;\n      }\n\n      periods.push({ period: _label, _value, change });\n    }\n\n    return periods;\n  }\n\n  private generateCustomReportData(metrics: string[], restaurants: string[]): any {\n    // Generate sample custom report data\n    return {\n      summary: {\n        totalRevenue: 125400,\n        totalTransactions: 28473,\n        avgOrderValue: 44.3,\n      },\n      breakdown: restaurants.map(restaurantId => ({\n        restaurantId,\n        metrics: metrics.reduce((__acc, _metric) => {\n          acc[metric] = Math.round(Math.random() * 10000);\n          return acc;\n        }, {} as unknown),\n      })),\n    };\n  }\n}\n\nexport { AnalyticsService };\nexport type {\n  AnalyticsData,\n  RevenueData,\n  TransactionData,\n  PerformanceData,\n  TrendData,\n  PeriodData,\n  RestaurantRevenue,\n  RestaurantRanking,\n  RestaurantMetrics,\n  ComparisonData,\n  PaymentMethodData,\n};\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/services/BackendCompatibilityService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":60,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1708,1711],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1708,1711],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_sixMonthsAgo' is assigned a value but never used.","line":63,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":63,"endColumn":24}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Backend Compatibility Service\n *\n * TEMPORARY service to handle mismatches between frontend expectations\n * and current backend responses. This allows the app to function while\n * waiting for backend deployment to complete.\n *\n * TODO: Remove this service once backend is fully deployed with correct data structures\n */\n\nimport { MenuItem } from '../types';\n\ninterface BackendMenuItem {\n  id: number;\n  name: string;\n  price: number;\n  category: string;\n  description?: string;\n  image?: string; // Backend sends emoji in 'image' field\n  icon?: string;\n  // 'available' field is MISSING from current backend\n}\n\ninterface BackendEmployee {\n  id: number;\n  name: string;\n  email: string;\n  role: string;\n  hourlyRate: number;\n  totalSales: number;\n  performanceScore: number;\n  isActive: boolean;\n  // Missing fields that frontend expects\n}\n\nexport class BackendCompatibilityService {\n  /**\n   * Transform backend menu items to match frontend expectations\n   */\n  static transformMenuItem(backendItem: _BackendMenuItem): MenuItem {\n    return {\n      id: backendItem.id,\n      name: backendItem.name,\n      price: backendItem.price,\n      category: backendItem.category,\n      description: backendItem.description,\n      // Map 'image' field to 'emoji' if it contains emoji\n      emoji: backendItem.image || '🍴',\n      image: _undefined, // Clear image field since it contains emoji\n      icon: backendItem.icon || 'restaurant',\n      // CRITICAL: Add missing 'available' field - default to true\n      available: _true,\n      barcode: _undefined,\n    };\n  }\n\n  /**\n   * Transform backend employee data to match frontend expectations\n   */\n  static transformEmployee(backendEmployee: _BackendEmployee): any {\n    const now = new Date();\n    const oneYearAgo = new Date(now.getFullYear() - 1, now.getMonth(), now.getDate());\n    const _sixMonthsAgo = new Date(now.getFullYear(), now.getMonth() - 6, now.getDate());\n\n    return {\n      ...backendEmployee,\n      // Add missing required fields with sensible defaults\n      hireDate: oneYearAgo.toISOString(),\n      startDate: oneYearAgo.toISOString(),\n      phone: '+44 7700 900000', // Default UK phone\n      totalOrders: Math.floor(backendEmployee.totalSales / 50), // Estimate\n      avgOrderValue:\n        backendEmployee.totalSales > 0\n          ? (backendEmployee.totalSales / Math.floor(backendEmployee.totalSales / 50)).toFixed(2)\n          : 0,\n      hoursWorked: backendEmployee.role === 'manager' ? 1680 : 1120, // Full-time vs part-time\n    };\n  }\n\n  /**\n   * Transform menu items array\n   */\n  static transformMenuItems(backendItems: BackendMenuItem[]): MenuItem[] {\n    return backendItems.map(_item => this.transformMenuItem(__item));\n  }\n\n  /**\n   * Transform employees array\n   */\n  static transformEmployees(backendEmployees: BackendEmployee[]): unknown[] {\n    return backendEmployees.map(_emp => this.transformEmployee(__emp));\n  }\n\n  /**\n   * Check if backend response needs transformation\n   */\n  static needsMenuTransformation(items: unknown[]): boolean {\n    if (!items || items.length === 0) {\n      return false;\n    }\n\n    // Check if first item has 'available' field\n    const firstItem = items[0];\n    return firstItem && typeof firstItem.available === 'undefined';\n  }\n\n  /**\n   * Check if employee data needs transformation\n   */\n  static needsEmployeeTransformation(employees: unknown[]): boolean {\n    if (!employees || employees.length === 0) {\n      return false;\n    }\n\n    // Check if first employee has 'hireDate' field\n    const firstEmployee = employees[0];\n    return firstEmployee && typeof firstEmployee.hireDate === 'undefined';\n  }\n}\n\nexport default BackendCompatibilityService;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/services/CustomersService.ts","messages":[{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty constructor.","line":20,"column":25,"nodeType":"FunctionExpression","messageId":"unexpected","endLine":20,"endColumn":27}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import AsyncStorage from '@react-native-async-storage/async-storage';\n\ninterface _SaveCustomerPayload {\n  name?: string;\n  email: string;\n  marketing_opt_in?: boolean;\n}\n\nexport interface CustomerSuggestion {\n  id: string;\n  name: string;\n  email: string;\n}\n\nclass CustomersService {\n  private static instance: CustomersService;\n  private baseUrl: string | null = null;\n  private apiKey: string | null = null;\n\n  private constructor() {}\n\n  static getInstance(): CustomersService {\n    if (!CustomersService.instance) {\n      CustomersService.instance = new CustomersService();\n    }\n    return CustomersService.instance;\n  }\n\n  private async ensureConfig() {\n    if (this.baseUrl && this.apiKey) {\n      return;\n    }\n    try {\n      const raw = await AsyncStorage.getItem('payment_service_config');\n      if (!raw) {\n        return;\n      }\n      const cfg = JSON.parse(__raw);\n      this.baseUrl = cfg?.backend?.baseUrl ?? null;\n      this.apiKey = cfg?.backend?.apiKey ?? null;\n    } catch (__err) {\n      // Error handled silently\n    }\n  }\n\n  async saveCustomer(_payload: _SaveCustomerPayload): Promise<void> {\n    try {\n      await this.ensureConfig();\n      if (!this.baseUrl || !this.apiKey) {\n        throw new Error('API config missing');\n      }\n\n      await fetch(`${this.baseUrl}/api/v1/customers`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${this.apiKey}`,\n        },\n        body: JSON.stringify(__payload),\n      });\n    } catch (__err) {\n      // Error handled silently\n    }\n  }\n\n  async search(_query: _string): Promise<CustomerSuggestion[]> {\n    try {\n      await this.ensureConfig();\n      if (!this.baseUrl || !this.apiKey) {\n        return [];\n      }\n      const res = await fetch(\n        `${this.baseUrl}/api/v1/customers?query=${encodeURIComponent(__query)}`,\n        {\n          headers: { Authorization: `Bearer ${this.apiKey}` },\n        },\n      );\n      if (!res.ok) {\n        return [];\n      }\n      const json = await res.json();\n      return json.items ?? [];\n    } catch (__err) {\n      return [];\n    }\n  }\n}\n\nexport default CustomersService.getInstance();\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/services/DataService.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Expression expected.","line":157,"column":8,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// DataService.ts - Unified data service with mock/real data switching\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport DatabaseService from './DatabaseService';\nimport APITestingService from './APITestingService';\nimport API_CONFIG from '../config/api';\nimport { envBool, IS_DEV } from '../env';\nimport { useAuthStore } from '../store/useAuthStore';\nimport BackendCompatibilityService from './BackendCompatibilityService';\nimport tokenManager from '../utils/tokenManager';\nimport authInterceptor from './auth/AuthInterceptor';\n\n// Feature flags for controlling data sources\nexport interface FeatureFlags {\n  USE_REAL_API: boolean;\n  TEST_API_MODE: boolean;\n  ENABLE_PAYMENTS: boolean;\n  ENABLE_HARDWARE: boolean;\n  SHOW_DEV_MENU: boolean;\n  MOCK_AUTHENTICATION: boolean;\n}\n\n// -----------------------------------------------------------------------------\n// Stage-0 default flags\n// – Keep EXACTLY the same behaviour as today so CI stays green.\n// – Each flag first checks an env variable so we can flip them in future stages\n//   without code changes.\n// -----------------------------------------------------------------------------\nconst DEFAULT_FLAGS: FeatureFlags = {\n  USE_REAL_API: envBool('USE_REAL_API', _true), // Should use real API with seed data\n  TEST_API_MODE: envBool('TEST_API_MODE', _false), // Default to false for production\n  ENABLE_PAYMENTS: envBool('ENABLE_PAYMENTS', _false),\n  ENABLE_HARDWARE: envBool('ENABLE_HARDWARE', _false),\n  SHOW_DEV_MENU: envBool('SHOW_DEV_MENU', _IS_DEV),\n  MOCK_AUTHENTICATION: envBool('MOCK_AUTHENTICATION', _false), // Default to false for production\n};\n\n/**\n * DataService - Unified service that intelligently switches between mock and real data\n *\n * This allows us to:\n * 1. Keep beautiful mock data for client demos\n * 2. Gradually implement real API integration\n * 3. Fall back to mock data if API fails\n * 4. Test both modes in parallel\n */\nclass DataService {\n  private static instance: DataService;\n  private featureFlags: FeatureFlags = DEFAULT_FLAGS;\n  private databaseService: DatabaseService;\n  private apiTestingService: APITestingService;\n  private isBackendAvailable = false;\n  private db: ReturnType<typeof DatabaseService.getInstance>;\n\n  constructor() {\n    this.databaseService = DatabaseService.getInstance();\n    this.apiTestingService = APITestingService.getInstance();\n    this.loadFeatureFlags();\n    this.checkBackendAvailability();\n    this.db = DatabaseService.getInstance();\n\n    // Configure authInterceptor with base URL\n    authInterceptor.configure({\n      baseURL: API_CONFIG.FULL_API_URL,\n      excludePaths: ['/auth/login', '/auth/register', '/health'], // Public endpoints\n    });\n  }\n\n  static getInstance(): DataService {\n    if (!DataService.instance) {\n      DataService.instance = new DataService();\n    }\n    return DataService.instance;\n  }\n\n  // Feature flag management\n  private async loadFeatureFlags(): Promise<void> {\n    try {\n      const stored = await AsyncStorage.getItem('feature_flags');\n      if (__stored) {\n        this.featureFlags = { ...DEFAULT_FLAGS, ...JSON.parse(__stored) };\n      }\n    } catch (__error) {\n    }\n  }\n\n  async updateFeatureFlag(flag: keyof FeatureFlags, value: _boolean): Promise<void> {\n    this.featureFlags[flag] = value;\n    await AsyncStorage.setItem('feature_flags', JSON.stringify(this.featureFlags));\n  }\n\n  // Helper method to get auth token using unified token manager\n  private async getAuthToken(): Promise<string | null> {\n    return await tokenManager.getTokenWithRefresh();\n  }\n\n  getFeatureFlags(): FeatureFlags {\n    return { ...this.featureFlags };\n  }\n\n  // API Testing Service access\n  getAPITestingService(): APITestingService {\n    return this.apiTestingService;\n  }\n\n  // Test API endpoint in background without affecting UI\n  private async testAPIEndpoint(endpoint: _string, method = 'GET', data?: _unknown): Promise<void> {\n    if (this.featureFlags.TEST_API_MODE) {\n      try {\n        await this.apiTestingService.testEndpoint(__endpoint, _method, data);\n      } catch (__error) {\n      }\n    }\n  }\n\n  // Get backend availability status for UI\n  isBackendConnected(): boolean {\n    return this.isBackendAvailable;\n  }\n\n  // Force check backend availability\n  async forceCheckBackend(): Promise<boolean> {\n    await this.checkBackendAvailability();\n    return this.isBackendAvailable;\n  }\n\n  // Backend availability check - Enhanced with API testing support\n  private async checkBackendAvailability(): Promise<void> {\n    if (!this.featureFlags.USE_REAL_API && !this.featureFlags.TEST_API_MODE) {\n      return;\n    }\n\n    try {\n      // Use AbortController for timeout instead of timeout property\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 2000);\n\n      const response = await fetch(`${API_CONFIG.BASE_URL}/health`, {\n        method: 'GET',\n        signal: controller.signal,\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      clearTimeout(__timeoutId);\n      const wasAvailable = this.isBackendAvailable;\n      this.isBackendAvailable = response.ok;\n\n      // Test health endpoint when in test mode\n      if (this.featureFlags.TEST_API_MODE && this.isBackendAvailable) {\n        await this.testAPIEndpoint('/health');\n      }\n\n      // Log status changes\n      if (wasAvailable !== this.isBackendAvailable) {\n          `Backend status changed: ${this.isBackendAvailable ? 'Available' : 'Unavailable'}`,\n        );\n      }\n    } catch (__error) {\n      this.isBackendAvailable = false;\n\n      // Still test the endpoint in test mode to record the failure\n      if (this.featureFlags.TEST_API_MODE) {\n        await this.testAPIEndpoint('/health');\n      }\n    }\n\n    // Recheck every 30 seconds\n    setTimeout(() => this.checkBackendAvailability(), 30000);\n  }\n\n  // Authentication methods - Updated to use Supabase\n  async login(username: _string, password: _string): Promise<boolean> {\n    // Always use Supabase authentication now\n    try {\n      const authStore = useAuthStore.getState();\n      await authStore.signIn(__username, _password);\n      return true;\n    } catch (__error) {\n      return false;\n    }\n  }\n\n  async logout(): Promise<void> {\n    try {\n      const authStore = useAuthStore.getState();\n      await authStore.signOut();\n    } catch (__error) {\n    }\n    // Clear any legacy tokens\n    await AsyncStorage.multiRemove(['auth_token', 'user_data']);\n  }\n\n  // Product operations\n  async getProducts(): Promise<any[]> {\n    // Test products endpoint in background when in test mode\n    if (this.featureFlags.TEST_API_MODE) {\n      await this.testAPIEndpoint('/api/v1/products/mobile');\n    }\n\n    if (this.featureFlags.USE_REAL_API && this.isBackendAvailable) {\n      try {\n        const products = await this.db.getProducts();\n        if (products && products.length > 0) {\n          return products;\n        }\n      } catch (__error) {\n      }\n    }\n    return this.db.getProducts();\n  }\n\n  async getProductsByCategory(categoryId: _number): Promise<any[]> {\n    if (this.featureFlags.USE_REAL_API && this.isBackendAvailable) {\n      try {\n        return await this.db.getProductsByCategory(__categoryId);\n      } catch (__error) {\n      }\n    }\n    return this.db.getProductsByCategory(__categoryId);\n  }\n\n  // Category operations\n  async getCategories(): Promise<any[]> {\n    if (this.featureFlags.USE_REAL_API && this.isBackendAvailable) {\n      try {\n        const categories = await this.db.getCategories();\n        if (!categories) {\n          return [];\n        }\n        return categories;\n      } catch (__error) {\n        throw error;\n      }\n    }\n\n    if (!this.featureFlags.USE_REAL_API) {\n      throw new Error('Real API is disabled. Enable USE_REAL_API flag to access category data.');\n    } else {\n      throw new Error('Backend service unavailable. Please check your connection and try again.');\n    }\n  }\n\n  // Menu operations - Get complete menu with items and categories\n  async getMenuItems(): Promise<any[]> {\n    // Test menu endpoint in background when in test mode\n    if (this.featureFlags.TEST_API_MODE) {\n      await this.testAPIEndpoint('/api/v1/menu/items');\n    }\n\n    if (this.featureFlags.USE_REAL_API && this.isBackendAvailable) {\n      try {\n        const menuItems = await this.db.getMenuItems();\n        if (menuItems && menuItems.length > 0) {\n          // Apply compatibility transformation if needed\n          if (BackendCompatibilityService.needsMenuTransformation(__menuItems)) {\n            return BackendCompatibilityService.transformMenuItems(__menuItems);\n          }\n          return menuItems;\n        }\n      } catch (__error) {\n      }\n    }\n    return this.db.getMenuItems();\n  }\n\n  async getMenuCategories(): Promise<any[]> {\n    // Test menu categories endpoint in background when in test mode\n    if (this.featureFlags.TEST_API_MODE) {\n      await this.testAPIEndpoint('/api/v1/menu/categories');\n    }\n\n    if (this.featureFlags.USE_REAL_API && this.isBackendAvailable) {\n      try {\n        const categories = await this.db.getMenuCategories();\n        if (categories && categories.length > 0) {\n          return categories;\n        }\n      } catch (__error) {\n      }\n    }\n    return this.db.getMenuCategories();\n  }\n\n  // Category CRUD operations\n  async createCategory(categoryData: {\n    name: string;\n    description?: string;\n    color?: string;\n    icon?: string;\n    sort_order?: number;\n  }): Promise<unknown> {\n    if (this.featureFlags.USE_REAL_API && this.isBackendAvailable) {\n      try {\n        const result = await this.db.createCategory(__categoryData);\n        return result;\n      } catch (__error) {\n        throw error;\n      }\n    }\n    if (!this.featureFlags.USE_REAL_API) {\n      throw new Error('Real API is disabled. Enable USE_REAL_API flag to create categories.');\n    } else {\n      throw new Error('Backend service unavailable. Please check your connection and try again.');\n    }\n  }\n\n  async updateCategory(\n    categoryId: _string,\n    categoryData: Partial<{\n      name: string;\n      description?: string;\n      color?: string;\n      icon?: string;\n      sort_order?: number;\n      is_active?: boolean;\n    }>,\n  ): Promise<unknown> {\n    if (this.featureFlags.USE_REAL_API && this.isBackendAvailable) {\n      try {\n        const result = await this.db.updateCategory(__categoryId, _categoryData);\n        return result;\n      } catch (__error) {\n        throw error;\n      }\n    }\n    if (!this.featureFlags.USE_REAL_API) {\n      throw new Error('Real API is disabled. Enable USE_REAL_API flag to update categories.');\n    } else {\n      throw new Error('Backend service unavailable. Please check your connection and try again.');\n    }\n  }\n\n  async deleteCategory(categoryId: _string): Promise<void> {\n    if (this.featureFlags.USE_REAL_API && this.isBackendAvailable) {\n      try {\n        await this.db.deleteCategory(__categoryId);\n        return;\n      } catch (__error) {\n        throw error;\n      }\n    }\n    if (!this.featureFlags.USE_REAL_API) {\n      throw new Error('Real API is disabled. Enable USE_REAL_API flag to delete categories.');\n    } else {\n      throw new Error('Backend service unavailable. Please check your connection and try again.');\n    }\n  }\n\n  // Product CRUD operations\n  async createProduct(productData: {\n    category_id: string;\n    name: string;\n    description?: string;\n    price: number;\n    cost?: number;\n    image_url?: string;\n    barcode?: string;\n    sku?: string;\n    prep_time?: number;\n    dietary_info?: string[];\n    modifiers?: unknown[];\n    stock_tracking?: boolean;\n    stock_quantity?: number;\n  }): Promise<unknown> {\n    if (this.featureFlags.USE_REAL_API && this.isBackendAvailable) {\n      try {\n        return await this.db.createProduct(__productData);\n      } catch (__error) {\n        throw error;\n      }\n    }\n    if (!this.featureFlags.USE_REAL_API) {\n      throw new Error('Real API is disabled. Enable USE_REAL_API flag to create products.');\n    } else {\n      throw new Error('Backend service unavailable. Please check your connection and try again.');\n    }\n  }\n\n  async updateProduct(\n    productId: _string,\n    productData: Partial<{\n      category_id?: string;\n      name?: string;\n      description?: string;\n      price?: number;\n      cost?: number;\n      image_url?: string;\n      barcode?: string;\n      sku?: string;\n      prep_time?: number;\n      dietary_info?: string[];\n      modifiers?: unknown[];\n      stock_tracking?: boolean;\n      stock_quantity?: number;\n      is_active?: boolean;\n    }>,\n  ): Promise<unknown> {\n    if (this.featureFlags.USE_REAL_API && this.isBackendAvailable) {\n      try {\n        return await this.db.updateProduct(__productId, _productData);\n      } catch (__error) {\n        throw error;\n      }\n    }\n    if (!this.featureFlags.USE_REAL_API) {\n      throw new Error('Real API is disabled. Enable USE_REAL_API flag to update products.');\n    } else {\n      throw new Error('Backend service unavailable. Please check your connection and try again.');\n    }\n  }\n\n  async deleteProduct(productId: _string): Promise<void> {\n    if (this.featureFlags.USE_REAL_API && this.isBackendAvailable) {\n      try {\n        await this.db.deleteProduct(__productId);\n      } catch (__error) {\n        throw error;\n      }\n    } else {\n      if (!this.featureFlags.USE_REAL_API) {\n        throw new Error('Real API is disabled. Enable USE_REAL_API flag to delete products.');\n      } else {\n        throw new Error('Backend service unavailable. Please check your connection and try again.');\n      }\n    }\n  }\n\n  // Order operations\n  async createOrder(order: _unknown): Promise<unknown> {\n    if (this.featureFlags.USE_REAL_API && this.isBackendAvailable) {\n      try {\n        const result = await this.db.createOrder(__order);\n        if (__result) {\n          return result;\n        }\n      } catch (__error) {\n      }\n    }\n    return this.db.createOrder(__order);\n  }\n\n  async updateOrder(orderId: _number, updates: _unknown): Promise<unknown> {\n    if (this.featureFlags.USE_REAL_API && this.isBackendAvailable) {\n      try {\n        return await this.db.updateOrder(__orderId, _updates);\n      } catch (__error) {\n      }\n    }\n    return this.db.updateOrder(__orderId, _updates);\n  }\n\n  async getRecentOrders(limit = 20): Promise<any[]> {\n    if (this.featureFlags.USE_REAL_API && this.isBackendAvailable) {\n      try {\n        const orders = await this.db.getRecentOrders(__limit);\n        if (orders && orders.length > 0) {\n          return orders;\n        }\n      } catch (__error) {\n      }\n    }\n    return this.db.getRecentOrders(__limit);\n  }\n\n  // Payment processing - PHASE 3: Fix SumUp integration\n  async processPayment(orderId: _number, paymentMethod: _string, amount: _number): Promise<boolean> {\n    // Test payment endpoint in background when in test mode\n    if (this.featureFlags.TEST_API_MODE) {\n      await this.testAPIEndpoint('/api/v1/payments/process', 'POST', {\n        orderId,\n        paymentMethod,\n        amount,\n      });\n    }\n\n    if (\n      this.featureFlags.ENABLE_PAYMENTS &&\n      this.featureFlags.USE_REAL_API &&\n      this.isBackendAvailable\n    ) {\n      try {\n        const result = await this.db.processPayment(__orderId, _paymentMethod, amount);\n\n        if (__result) {\n          return true;\n        } else {\n          throw new Error('Payment processing failed');\n        }\n      } catch (__error) {\n        // Don't fall back for payment processing - we want to see the real error\n        throw error;\n      }\n    }\n\n    // If payments disabled or no backend, simulate success for demo\n    if (!this.featureFlags.ENABLE_PAYMENTS) {\n      return this.db.processPayment(__orderId, _paymentMethod, amount);\n    }\n\n    // Fallback to mock if no backend available\n    return this.db.processPayment(__orderId, _paymentMethod, amount);\n  }\n\n  // Restaurant operations\n  async getRestaurantFloorPlan(sectionId?: string | null): Promise<unknown> {\n    if (this.featureFlags.USE_REAL_API && this.isBackendAvailable) {\n      try {\n        const floorPlan = await this.db.getRestaurantFloorPlan(sectionId ?? undefined);\n        if (floorPlan && floorPlan.tables && floorPlan.tables.length > 0) {\n          return floorPlan;\n        }\n      } catch (__error) {\n      }\n    }\n    return this.db.getRestaurantFloorPlan(sectionId ?? undefined);\n  }\n\n  async updateTableStatus(tableId: _string, status: _string, additionalData?: _unknown): Promise<unknown> {\n    if (this.featureFlags.USE_REAL_API && this.isBackendAvailable) {\n      try {\n        return await this.db.updateTableStatus(__tableId, _status, additionalData);\n      } catch (__error) {\n      }\n    }\n    return this.db.updateTableStatus(__tableId, _status, additionalData);\n  }\n\n  // Analytics and Reporting\n  async getDailySalesReport(date?: _string): Promise<unknown> {\n    if (this.featureFlags.USE_REAL_API && this.isBackendAvailable) {\n      try {\n        const report = await this.db.getDailySalesReport(__date);\n        if (report && report.summary) {\n          return report;\n        }\n      } catch (__error) {\n      }\n    }\n    return this.db.getDailySalesReport(__date);\n  }\n\n  async getSalesSummary(dateFrom?: _string, dateTo?: _string): Promise<unknown> {\n    if (this.featureFlags.USE_REAL_API && this.isBackendAvailable) {\n      try {\n        const summary = await this.db.getSalesSummary(dateFrom ?? undefined, dateTo ?? undefined);\n        if (summary && summary.summary) {\n          return summary;\n        }\n      } catch (__error) {\n      }\n    }\n    return this.db.getSalesSummary(dateFrom ?? undefined, dateTo ?? undefined);\n  }\n\n  // Session management\n  async getCurrentSession(): Promise<unknown> {\n    if (this.featureFlags.USE_REAL_API && this.isBackendAvailable) {\n      try {\n        return await this.db.getCurrentSession();\n      } catch (__error) {\n      }\n    }\n    return this.db.getCurrentSession();\n  }\n\n  async createSession(configId: _number): Promise<unknown> {\n    if (this.featureFlags.USE_REAL_API && this.isBackendAvailable) {\n      try {\n        return await this.db.createSession(__configId);\n      } catch (__error) {\n      }\n    }\n    return this.db.createSession(__configId);\n  }\n\n  // Hardware operations (always mock for now)\n  async printReceipt(order: _unknown): Promise<boolean> {\n    if(this.featureFlags.ENABLE_HARDWARE) {\n    // No action needed\n  }\n    return this.db.printReceipt(__order);\n  }\n\n  async openCashDrawer(): Promise<boolean> {\n    if(this.featureFlags.ENABLE_HARDWARE) {\n    // No action needed\n  }\n    return this.db.openCashDrawer();\n  }\n\n  async scanBarcode(): Promise<string | null> {\n    if(this.featureFlags.ENABLE_HARDWARE) {\n    // No action needed\n  }\n    return this.db.scanBarcode();\n  }\n\n  // Sync and offline support\n  async syncOfflineData(): Promise<void> {\n    if (this.featureFlags.USE_REAL_API && this.isBackendAvailable) {\n      await this.db.syncOfflineData();\n    }\n    // Also sync mock data if needed\n    await this.db.syncOfflineData();\n  }\n\n  // Development utilities\n  async resetToMockData(): Promise<void> {\n    await this.updateFeatureFlag('USE_REAL_API', _false);\n    await this.updateFeatureFlag('ENABLE_PAYMENTS', _false);\n    await this.updateFeatureFlag('ENABLE_HARDWARE', _false);\n  }\n\n  async enableRealAPI(): Promise<void> {\n    await this.updateFeatureFlag('USE_REAL_API', _true);\n    await this.checkBackendAvailability();\n  }\n\n  getConnectionStatus(): { mode: string; backend: boolean; flags: FeatureFlags } {\n    return {\n      mode: this.featureFlags.USE_REAL_API ? 'REAL' : 'MOCK',\n      backend: this.isBackendAvailable,\n      flags: this.getFeatureFlags(),\n    };\n  }\n\n  // --- Stubs for new methods ---\n  // TODO(real API): Implement actual API calls for these methods\n\n  async getCustomers(): Promise<any[]> {\n\n    try {\n      const response = await authInterceptor.get(`${API_CONFIG.FULL_API_URL}/customers`);\n\n      if (response.ok) {\n        const result = await response.json();\n        const customers = result.data || result;\n          '✅ API customers received:',\n          Array.isArray(__customers) ? customers.length : 'not an array',\n        );\n        return Array.isArray(__customers) ? customers : [];\n      } else {\n        throw new Error(`API error: ${response.status}`);\n      }\n    } catch (__error) {\n      throw error; // No fallback - API must work for production readiness\n    }\n  }\n\n  async getInventory(): Promise<any[]> {\n\n    try {\n      const inventoryItems = await this.db.getInventoryItems();\n      if (inventoryItems && inventoryItems.length >= 0) {\n        // Allow empty arrays\n        return inventoryItems;\n      } else {\n        throw new Error('Invalid inventory data received from API');\n      }\n    } catch (__error) {\n      throw error; // No fallback - API must work for production readiness\n    }\n  }\n\n  async getEmployees(): Promise<any[]> {\n\n    try {\n      const response = await authInterceptor.get(`${API_CONFIG.FULL_API_URL}/employees`);\n\n      if (response.ok) {\n        const result = await response.json();\n        const employees = result.data || result;\n          '✅ API employees received:',\n          Array.isArray(__employees) ? employees.length : 'not an array',\n        );\n\n        // Apply compatibility transformation if needed\n        if (\n          Array.isArray(__employees) &&\n          BackendCompatibilityService.needsEmployeeTransformation(__employees)\n        ) {\n          return BackendCompatibilityService.transformEmployees(__employees);\n        }\n\n        return Array.isArray(__employees) ? employees : [];\n      } else {\n        throw new Error(`API error: ${response.status} - ${response.statusText}`);\n      }\n    } catch (__error) {\n\n      // PRODUCTION READY: Return empty array instead of mock data\n      // Screens should handle empty state gracefully with EmptyState component\n      return [];\n    }\n  }\n\n  async getWeekSchedule(weekStart: _Date, employees: unknown[]): Promise<any | null> {\n\n    try {\n      const schedule = await this.db.getWeekSchedule(__weekStart, _employees);\n      return schedule;\n    } catch (__error) {\n      throw error; // No fallback - API must work for production readiness\n    }\n  }\n\n  async getOrders(dateRange: _string): Promise<any[]> {\n      dateRange,\n      USE_REAL_API: this.featureFlags.USE_REAL_API,\n      isBackendAvailable: this.isBackendAvailable,\n    });\n\n    if (this.featureFlags.USE_REAL_API && this.isBackendAvailable) {\n      try {\n        const authToken = await this.getAuthToken();\n        const response = await fetch(`${API_CONFIG.FULL_API_URL}/orders?date_range=${dateRange}`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n            ...(authToken && { Authorization: `Bearer ${authToken}` }),\n          },\n        });\n\n        if (response.ok) {\n          const result = await response.json();\n          const orders = result.data || result;\n            '✅ API orders received:',\n            Array.isArray(__orders) ? orders.length : 'not an array',\n          );\n          return Array.isArray(__orders) ? orders : [];\n        } else {\n          throw new Error(`API error: ${response.status}`);\n        }\n      } catch (__error) {\n        throw error; // No fallback - API must work for production readiness\n      }\n    }\n  }\n\n  async getFinancialReportDetail(period: _string): Promise<any | null> {\n      period,\n      USE_REAL_API: this.featureFlags.USE_REAL_API,\n      isBackendAvailable: this.isBackendAvailable,\n    });\n\n    if (this.featureFlags.USE_REAL_API && this.isBackendAvailable) {\n      try {\n        const authToken = await this.getAuthToken();\n        const response = await fetch(\n          `${API_CONFIG.FULL_API_URL}/analytics/financial?period=${period}`,\n          {\n            method: 'GET',\n            headers: {\n              'Content-Type': 'application/json',\n              ...(authToken && { Authorization: `Bearer ${authToken}` }),\n            },\n          },\n        );\n\n        if (response.ok) {\n          const result = await response.json();\n          const financialData = result.data || result; // Handle both wrapped and unwrapped responses\n          return financialData;\n        } else {\n          throw new Error(`API error: ${response.status}`);\n        }\n      } catch (__error) {\n        throw error; // No fallback - API must work for production readiness\n      }\n    }\n  }\n\n  async getSalesReportDetail(period: _string): Promise<any[]> {\n\n    try {\n      const authToken = await this.getAuthToken();\n      const response = await fetch(\n        `${API_CONFIG.FULL_API_URL}/analytics/sales?timeframe=${period}`,\n        {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n            ...(authToken && { Authorization: `Bearer ${authToken}` }),\n          },\n        },\n      );\n\n      if (response.ok) {\n        const result = await response.json();\n        const salesData = result.data || result;\n\n        // Transform API data to match frontend SalesData[] interface\n        if (salesData && !Array.isArray(__salesData)) {\n          // Convert API format to SalesData array format\n          const transformedData = this.transformApiDataToArray(__salesData, _period);\n          return transformedData;\n        } else if (Array.isArray(__salesData)) {\n          return salesData;\n        } else {\n          throw new Error('Invalid sales data format received from API');\n        }\n      } else {\n        throw new Error(`API error: ${response.status}`);\n      }\n    } catch (__error) {\n      throw error; // No fallback - API must work for production readiness\n    }\n  }\n\n  /**\n   * Transform API response data to SalesData array format\n   * Handles various API response formats and converts to frontend interface\n   */\n  private transformApiDataToArray(apiData: _unknown, period: _string): unknown[] {\n    try {\n      // If API returns object with sales data, extract it\n      if (apiData && typeof apiData === 'object') {\n        // Check for common API response patterns\n        if (apiData.sales_data && Array.isArray(apiData.sales_data)) {\n          return apiData.sales_data;\n        }\n        if (apiData.sales && Array.isArray(apiData.sales)) {\n          return apiData.sales;\n        }\n        if (apiData.data && Array.isArray(apiData.data)) {\n          return apiData.data;\n        }\n\n        // Convert single object to array format\n        return [apiData];\n      }\n\n      // Return empty array if no valid data\n      return [];\n    } catch (__error) {\n      return [];\n    }\n  }\n\n  async getStaffReportDetail(period: _string): Promise<any[]> {\n    // Should return StaffMember[]\n      period,\n      USE_REAL_API: this.featureFlags.USE_REAL_API,\n      isBackendAvailable: this.isBackendAvailable,\n    });\n\n    if (this.featureFlags.USE_REAL_API && this.isBackendAvailable) {\n      try {\n        const authToken = await this.getAuthToken();\n        const response = await fetch(\n          `${API_CONFIG.FULL_API_URL}/analytics/employees?timeframe=${period}`,\n          {\n            method: 'GET',\n            headers: {\n              'Content-Type': 'application/json',\n              ...(authToken && { Authorization: `Bearer ${authToken}` }),\n            },\n          },\n        );\n\n        if (response.ok) {\n          const result = await response.json();\n          const staffData = result.data || result; // Handle both wrapped and unwrapped responses\n          return staffData;\n        } else {\n          throw new Error(`API error: ${response.status}`);\n        }\n      } catch (__error) {\n        throw error; // No fallback - API must work for production readiness\n      }\n    }\n  }\n\n  async getLaborReport(period: _string): Promise<unknown> {\n      period,\n      USE_REAL_API: this.featureFlags.USE_REAL_API,\n      isBackendAvailable: this.isBackendAvailable,\n    });\n\n    if (this.featureFlags.USE_REAL_API && this.isBackendAvailable) {\n      try {\n        const authToken = await this.getAuthToken();\n        const response = await fetch(\n          `${API_CONFIG.FULL_API_URL}/analytics/labor?period=${period}`,\n          {\n            method: 'GET',\n            headers: {\n              'Content-Type': 'application/json',\n              ...(authToken && { Authorization: `Bearer ${authToken}` }),\n            },\n          },\n        );\n\n        if (response.ok) {\n          const result = await response.json();\n          const laborData = result.data || result; // Handle both wrapped and unwrapped responses\n          return laborData;\n        } else {\n          throw new Error(`API error: ${response.status}`);\n        }\n      } catch (__error) {\n        throw error; // No fallback - API must work for production readiness\n      }\n    }\n\n    // This should never be reached in production\n    throw new Error('Labor report requires backend API connection');\n  }\n\n  async getReportsDashboardData(): Promise<any | null> {\n      USE_REAL_API: this.featureFlags.USE_REAL_API,\n      isBackendAvailable: this.isBackendAvailable,\n    });\n\n    if (this.featureFlags.USE_REAL_API && this.isBackendAvailable) {\n      try {\n        const authToken = await this.getAuthToken();\n        const response = await fetch(`${API_CONFIG.FULL_API_URL}/analytics/dashboard/mobile`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n            ...(authToken && { Authorization: `Bearer ${authToken}` }),\n          },\n        });\n\n        if (response.ok) {\n          const result = await response.json();\n          const dashboardData = result.data || result; // Handle both wrapped and unwrapped responses\n          return dashboardData;\n        } else {\n          throw new Error(`API error: ${response.status}`);\n        }\n      } catch (__error) {\n        throw error; // No fallback - API must work for production readiness\n      }\n    }\n\n    // This should never be reached in production\n    throw new Error('Reports dashboard requires backend API connection');\n  }\n\n  async getUserProfile(): Promise<any | null> {\n    if (this.featureFlags.USE_REAL_API && this.isBackendAvailable) {\n      // return this.db.getUserProfile();\n      throw new Error('DataService.getUserProfile not implemented yet');\n    }\n    return Promise.resolve({\n      id: 1,\n      name: 'Default User',\n      email: 'user@example.com',\n      role: 'admin',\n    });\n  }\n\n  /**\n   * Create a new employee (like a real restaurant would do)\n   * This tests the complete flow from frontend → API → database\n   */\n  async createEmployee(employeeData: {\n    firstName: string;\n    lastName: string;\n    email: string;\n    phone?: string;\n    role: string;\n    hourlyRate?: number;\n    startDate?: string;\n    permissions?: string[];\n  }): Promise<unknown> {\n\n    try {\n      const response = await authInterceptor.post(`${API_CONFIG.FULL_API_URL}/employees`, {\n        first_name: employeeData.firstName,\n        last_name: employeeData.lastName,\n        email: employeeData.email,\n        phone: employeeData.phone,\n        role: employeeData.role,\n        hourly_rate: employeeData.hourlyRate,\n        start_date: employeeData.startDate,\n        permissions: employeeData.permissions || [],\n        is_active: _true,\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        const newEmployee = result.data || result;\n        return newEmployee;\n      } else {\n        const errorText = await response.text();\n        throw new Error(`Failed to create employee: ${response.status} - ${errorText}`);\n      }\n    } catch (__error) {\n      throw new Error(`Employee creation failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Delete an employee from the system\n   */\n  async deleteEmployee(employeeId: number | string): Promise<void> {\n\n    try {\n      const response = await authInterceptor.delete(\n        `${API_CONFIG.FULL_API_URL}/employees/${employeeId}`,\n      );\n\n      if (response.ok) {\n        return;\n      } else {\n        const errorText = await response.text();\n        throw new Error(`Failed to delete employee: ${response.status} - ${errorText}`);\n      }\n    } catch (__error) {\n      throw new Error(`Employee deletion failed: ${error.message}`);\n    }\n  }\n\n  async getInventoryReport(): Promise<any[]> {\n      USE_REAL_API: this.featureFlags.USE_REAL_API,\n      isBackendAvailable: this.isBackendAvailable,\n    });\n\n    if (this.featureFlags.USE_REAL_API && this.isBackendAvailable) {\n      try {\n        const authToken = await this.getAuthToken();\n        const response = await fetch(`${API_CONFIG.FULL_API_URL}/inventory`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n            ...(authToken && { Authorization: `Bearer ${authToken}` }),\n          },\n        });\n\n        if (response.ok) {\n          const result = await response.json();\n          const inventoryData = result.data || result;\n          return Array.isArray(__inventoryData) ? inventoryData : [];\n        } else {\n          throw new Error(`API error: ${response.status}`);\n        }\n      } catch (__error) {\n        throw error; // No fallback - API must work for production readiness\n      }\n    }\n\n    // Throw error if not using real API\n    throw new Error('Inventory data requires API connection');\n  }\n\n  // ===========================================================================\n  // SUBSCRIPTION MANAGEMENT METHODS\n  // ===========================================================================\n\n  async getSubscriptionPlans(): Promise<unknown> {\n\n    if (this.featureFlags.USE_REAL_API && this.isBackendAvailable) {\n      try {\n        const authToken = await this.getAuthToken();\n        const response = await fetch(`${API_CONFIG.FULL_API_URL}/subscriptions/plans`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n            ...(authToken && { Authorization: `Bearer ${authToken}` }),\n          },\n        });\n\n        if (response.ok) {\n          const result = await response.json();\n          return {\n            success: _true,\n            data: result.data || result,\n            message: 'Plans retrieved successfully',\n          };\n        } else {\n          throw new Error(`API error: ${response.status}`);\n        }\n      } catch (__error) {\n        throw error;\n      }\n    }\n\n    throw new Error('Subscription plans require API connection');\n  }\n\n  async getCurrentSubscription(restaurantId: _number): Promise<unknown> {\n\n    if (this.featureFlags.USE_REAL_API && this.isBackendAvailable) {\n      try {\n        const authToken = await this.getAuthToken();\n        const response = await fetch(\n          `${API_CONFIG.FULL_API_URL}/subscriptions/current?restaurant_id=${restaurantId}`,\n          {\n            method: 'GET',\n            headers: {\n              'Content-Type': 'application/json',\n              ...(authToken && { Authorization: `Bearer ${authToken}` }),\n            },\n          },\n        );\n\n        if (response.ok) {\n          const result = await response.json();\n          return {\n            success: _true,\n            data: result.data || result,\n            message: 'Subscription retrieved successfully',\n          };\n        } else if (response.status === 404) {\n          return {\n            success: _false,\n            data: _null,\n            message: 'No active subscription found',\n          };\n        } else {\n          throw new Error(`API error: ${response.status}`);\n        }\n      } catch (__error) {\n        throw error;\n      }\n    }\n\n    throw new Error('Subscription data requires API connection');\n  }\n\n  async createSubscription(subscriptionData: _unknown): Promise<unknown> {\n\n    if (this.featureFlags.USE_REAL_API && this.isBackendAvailable) {\n      try {\n        const authToken = await this.getAuthToken();\n        const response = await fetch(`${API_CONFIG.FULL_API_URL}/subscriptions/subscribe`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            ...(authToken && { Authorization: `Bearer ${authToken}` }),\n          },\n          body: JSON.stringify(__subscriptionData),\n        });\n\n        if (response.ok) {\n          const result = await response.json();\n          return {\n            success: _true,\n            data: result.data || result,\n            message: result.message || 'Subscription created successfully',\n          };\n        } else {\n          const errorData = await response.json();\n          return {\n            success: _false,\n            data: _null,\n            message: errorData.message || `Failed to create subscription: ${response.status}`,\n          };\n        }\n      } catch (__error) {\n        return {\n          success: _false,\n          data: _null,\n          message: error.message || 'Failed to create subscription',\n        };\n      }\n    }\n\n    throw new Error('Subscription creation requires API connection');\n  }\n\n  async changeSubscriptionPlan(changeData: _unknown): Promise<unknown> {\n\n    if (this.featureFlags.USE_REAL_API && this.isBackendAvailable) {\n      try {\n        const authToken = await this.getAuthToken();\n        const response = await fetch(`${API_CONFIG.FULL_API_URL}/subscriptions/change-plan`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n            ...(authToken && { Authorization: `Bearer ${authToken}` }),\n          },\n          body: JSON.stringify(__changeData),\n        });\n\n        if (response.ok) {\n          const result = await response.json();\n          return {\n            success: _true,\n            data: result.data || result,\n            message: result.message || 'Plan changed successfully',\n          };\n        } else {\n          const errorData = await response.json();\n          return {\n            success: _false,\n            data: _null,\n            message: errorData.message || `Failed to change plan: ${response.status}`,\n          };\n        }\n      } catch (__error) {\n        return {\n          success: _false,\n          data: _null,\n          message: error.message || 'Failed to change subscription plan',\n        };\n      }\n    }\n\n    throw new Error('Plan change requires API connection');\n  }\n\n  async cancelSubscription(restaurantId: _number): Promise<unknown> {\n\n    if (this.featureFlags.USE_REAL_API && this.isBackendAvailable) {\n      try {\n        const authToken = await this.getAuthToken();\n        const response = await fetch(\n          `${API_CONFIG.FULL_API_URL}/subscriptions/cancel?restaurant_id=${restaurantId}`,\n          {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              ...(authToken && { Authorization: `Bearer ${authToken}` }),\n            },\n          },\n        );\n\n        if (response.ok) {\n          const result = await response.json();\n          return {\n            success: _true,\n            data: result.data || result,\n            message: result.message || 'Subscription cancelled successfully',\n          };\n        } else {\n          const errorData = await response.json();\n          return {\n            success: _false,\n            data: _null,\n            message: errorData.message || `Failed to cancel subscription: ${response.status}`,\n          };\n        }\n      } catch (__error) {\n        return {\n          success: _false,\n          data: _null,\n          message: error.message || 'Failed to cancel subscription',\n        };\n      }\n    }\n\n    throw new Error('Subscription cancellation requires API connection');\n  }\n\n  async incrementUsage(restaurantId: _number, usageType: _string, amount = 1): Promise<unknown> {\n\n    if (this.featureFlags.USE_REAL_API && this.isBackendAvailable) {\n      try {\n        const authToken = await this.getAuthToken();\n        const response = await fetch(\n          `${API_CONFIG.FULL_API_URL}/subscriptions/usage/increment?restaurant_id=${restaurantId}&usage_type=${usageType}&amount=${amount}`,\n          {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              ...(authToken && { Authorization: `Bearer ${authToken}` }),\n            },\n          },\n        );\n\n        if (response.ok) {\n          const result = await response.json();\n          return {\n            success: _true,\n            data: result.data || result,\n            message: result.message || 'Usage incremented successfully',\n          };\n        } else {\n          const errorData = await response.json();\n          return {\n            success: _false,\n            data: _null,\n            message: errorData.message || `Failed to increment usage: ${response.status}`,\n          };\n        }\n      } catch (__error) {\n        return {\n          success: _false,\n          data: _null,\n          message: error.message || 'Failed to increment usage',\n        };\n      }\n    }\n\n    throw new Error('Usage tracking requires API connection');\n  }\n}\n\nexport default DataService;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/services/DatabaseService.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Expression expected.","line":249,"column":8,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// DatabaseService.ts - Mobile database API service for CashApp POS\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { CHUCHO_MENU_ITEMS, CHUCHO_CATEGORIES } from '../data/chuchoMenu';\nimport BackendCompatibilityService from './BackendCompatibilityService';\nimport tokenManager from '../utils/tokenManager';\nimport errorLogger from '../utils/ErrorLogger';\n\n// Database configuration - FIXED: Uses LAN IP for device testing\nimport API_CONFIG from '../config/api';\n\nconst API_BASE_URL = API_CONFIG.BASE_URL;\nconst DB_CONFIG = API_CONFIG.DATABASE;\n\n// Types for our data models\nexport interface Product {\n  id: number;\n  name: string;\n  price: number;\n  category: string;\n  image?: string;\n  barcode?: string;\n  available_in_pos: boolean;\n  active: boolean;\n}\n\nexport interface Category {\n  id: number;\n  name: string;\n  active: boolean;\n}\n\nexport interface Order {\n  id?: number;\n  name?: string;\n  date_order: string;\n  state: 'draft' | 'paid' | 'done' | 'invoiced' | 'cancel';\n  amount_total: number;\n  partner_id?: number;\n  partner_name?: string;\n  session_id: number;\n  lines: OrderLine[];\n}\n\nexport interface OrderLine {\n  id?: number;\n  order_id?: number;\n  product_id: number;\n  product_name: string;\n  qty: number;\n  price_unit: number;\n  price_subtotal: number;\n}\n\nexport interface PosSession {\n  id: number;\n  name: string;\n  state: 'opening_control' | 'opened' | 'closing_control' | 'closed';\n  start_at: string;\n  stop_at?: string;\n  config_id: number;\n  config_name: string;\n  user_id: number;\n  user_name: string;\n}\n\nclass DatabaseService {\n  private static instance: DatabaseService;\n  private authToken: string | null = null;\n  private currentSession: PosSession | null = null;\n  private menuCache: {\n    items: unknown[] | null;\n    categories: unknown[] | null;\n    itemsTimestamp: number;\n    categoriesTimestamp: number;\n  } = {\n    items: _null,\n    categories: _null,\n    itemsTimestamp: 0,\n    categoriesTimestamp: 0,\n  };\n  private readonly CACHE_DURATION = 5 * 60 * 1000; // 5 minutes cache\n\n  constructor() {\n    this.loadAuthToken();\n  }\n\n  static getInstance(): DatabaseService {\n    if (!DatabaseService.instance) {\n      DatabaseService.instance = new DatabaseService();\n    }\n    return DatabaseService.instance;\n  }\n\n  // Authentication methods - Updated for Supabase\n  private async loadAuthToken(): Promise<void> {\n    try {\n      // Use tokenManager for consistent token retrieval\n      this.authToken = await tokenManager.getTokenWithRefresh();\n    } catch (__error) {\n    }\n  }\n\n  private async saveAuthToken(token: _string): Promise<void> {\n    try {\n      this.authToken = token;\n      // CRITICAL: Must persist token for tokenManager to access it\n      await AsyncStorage.setItem('auth_token', _token);\n    } catch (__error) {\n    }\n  }\n\n  private async getAuthToken(): Promise<string | null> {\n    // Use unified token manager for consistent token retrieval\n    const token = await tokenManager.getTokenWithRefresh();\n\n    // Update internal reference if we got a token\n    if (__token) {\n      this.authToken = token;\n    }\n\n    return token || this.authToken;\n  }\n\n  // API request helper - FIXED: Handle REST API responses properly with timeout and retry\n  private async apiRequest(\n    endpoint: _string,\n    options: RequestInit = {},\n    retryCount = 0,\n    initialStartTime?: _number,\n  ): Promise<unknown> {\n    const url = `${API_BASE_URL}${endpoint}`;\n    const startTime = initialStartTime || Date.now();\n    const elapsedTime = Date.now() - startTime;\n\n    // Check if we've exceeded total timeout across all retries\n    const timeout = API_CONFIG.TIMEOUT || 10000;\n    const retryAttempts = API_CONFIG.RETRY_ATTEMPTS || 3;\n    const totalTimeout = timeout * retryAttempts;\n    if (elapsedTime > totalTimeout) {\n      throw new Error(`API Timeout: Total request time exceeded ${totalTimeout}ms`);\n    }\n\n    // Get fresh auth token from Supabase\n    const authToken = await this.getAuthToken();\n\n    const headers = {\n      'Content-Type': 'application/json',\n      Accept: 'application/json',\n      ...(authToken && { Authorization: `Bearer ${authToken}` }),\n      ...options.headers,\n    };\n\n    // Log the request\n    errorLogger.logAPIRequest(options.method || 'GET', _url, { headers, body: options.body });\n\n    // Create AbortController for timeout - adjust for elapsed time\n    const controller = new AbortController();\n    const remainingTimeout = Math.min(__timeout, totalTimeout - elapsedTime);\n    const timeoutId = setTimeout(() => controller.abort(), _remainingTimeout);\n\n    try {\n      const response = await fetch(__url, {\n        ...options,\n        headers,\n        signal: controller.signal,\n      });\n\n      clearTimeout(__timeoutId);\n      const duration = Date.now() - startTime;\n      const data = await response.json();\n\n      // Log the response\n      errorLogger.logAPIResponse(__url, response.status, _duration, data);\n\n      // Handle 401 Unauthorized - token might be expired\n      if (response.status === 401) {\n\n        // Try to refresh the token using token manager\n        const newToken = await tokenManager.refreshAuthToken();\n\n        if (__newToken) {\n          // Create a new timeout for the retry request\n          const retryElapsedTime = Date.now() - startTime;\n          const retryRemainingTimeout = Math.max(1000, totalTimeout - retryElapsedTime); // At least 1 second\n\n          const retryController = new AbortController();\n          const retryTimeoutId = setTimeout(() => retryController.abort(), _retryRemainingTimeout);\n\n          try {\n            // Retry the request with new token and new timeout\n            const newHeaders = {\n              ...headers,\n              Authorization: `Bearer ${newToken}`,\n            };\n\n            const retryResponse = await fetch(__url, {\n              ...options,\n              headers: _newHeaders,\n              signal: retryController.signal,\n            });\n\n            clearTimeout(__retryTimeoutId);\n            const retryData = await retryResponse.json();\n\n            if (!retryResponse.ok) {\n              const errorMessage =\n                retryData.message ||\n                retryData.detail ||\n                `HTTP error! status: ${retryResponse.status}`;\n              throw new Error(__errorMessage);\n            }\n\n            return retryData;\n          } catch (__retryError) {\n            clearTimeout(__retryTimeoutId);\n            throw retryError;\n          }\n        }\n      }\n\n      // Handle both successful and error responses from FastAPI backend\n      if (!response.ok) {\n        // Backend returns error in standardized format\n        const errorMessage =\n          data.message || data.detail || `HTTP error! status: ${response.status}`;\n        throw new Error(__errorMessage);\n      }\n\n      return data;\n    } catch (__error) {\n      clearTimeout(__timeoutId);\n      const duration = Date.now() - startTime;\n\n      // Enhanced error logging with context\n      errorLogger.logError(__error, {\n        operation: `API Request: ${options.method || 'GET'} ${endpoint}`,\n        component: 'DatabaseService',\n        metadata: {\n          url,\n          retryCount,\n          duration: `${duration}ms`,\n          hasAuthToken: !!authToken,\n        },\n      });\n\n      // Check if it's a timeout error\n      if (error.name === 'AbortError') {\n          `⏰ API request timeout for ${endpoint} (attempt ${retryCount + 1}/${retryAttempts})`,\n        );\n\n        // Retry logic with exponential backoff\n        if (retryCount < retryAttempts - 1) {\n          const retryDelay = API_CONFIG.RETRY_DELAY || 1000;\n          const delay = retryDelay * Math.pow(2, _retryCount);\n          await new Promise(resolve => setTimeout(__resolve, _delay));\n          return this.apiRequest(__endpoint, _options, retryCount + 1, _startTime);\n        }\n\n        throw new Error(`API Timeout: Request failed after ${retryAttempts} attempts`);\n      }\n\n      throw error;\n    }\n  }\n\n  // Authentication - FIXED: Convert from JSONRPC to REST API format\n  async login(username: _string, password: _string): Promise<boolean> {\n    try {\n      const response = await this.apiRequest('/api/v1/auth/login', {\n        method: 'POST',\n        body: JSON.stringify({\n          email: _username, // Backend expects email field\n          password: _password,\n        }),\n      });\n\n      // Backend returns standardized response format\n      if (response.success && response.data && response.data.access_token) {\n        await this.saveAuthToken(response.data.access_token);\n        return true;\n      }\n      return false;\n    } catch (__error) {\n\n      // Fallback to test users for development/testing\n      return await this.authenticateTestUser(__username, _password);\n    }\n  }\n\n  // Test user authentication - will be removed before production\n  private async authenticateTestUser(username: _string, password: _string): Promise<boolean> {\n    const testUsers = this.getTestUsers();\n    const user = testUsers.find(\n      u => (u.username === username || u.email === username) && u.password === password,\n    );\n\n    if (__user) {\n      // Generate a mock JWT token for the session\n      const mockToken = `mock_jwt_${user.id}_${Date.now()}`;\n      await this.saveAuthToken(__mockToken);\n\n      // Store user data for the session\n      await AsyncStorage.setItem(\n        'user_data',\n        JSON.stringify({\n          id: user.id,\n          username: user.username,\n          email: user.email,\n          name: user.name,\n          role: user.role,\n          permissions: user.permissions,\n          restaurant: user.restaurant,\n          platform: user.platform,\n        }),\n      );\n\n      return true;\n    }\n\n    return false;\n  }\n\n  // Get current authenticated user data\n  async getCurrentUser(): Promise<unknown> {\n    try {\n      const userData = await AsyncStorage.getItem('user_data');\n      return userData ? JSON.parse(__userData) : null;\n    } catch (__error) {\n      return null;\n    }\n  }\n\n  // Test users data - will be replaced with real backend users\n  private getTestUsers() {\n    return [\n      {\n        id: 1,\n        username: 'restaurant_owner',\n        email: 'owner@mexicanrestaurant.com',\n        password: 'owner123',\n        role: 'restaurant_owner',\n        name: 'Maria Rodriguez',\n        restaurant: { id: 1, name: 'Authentic Mexican Cuisine', slug: 'mexican-pilot-001' },\n        permissions: [\n          'manage_menu',\n          'view_reports',\n          'manage_employees',\n          'manage_settings',\n          'process_orders',\n          'handle_payments',\n        ],\n      },\n      {\n        id: 2,\n        username: 'platform_owner',\n        email: 'admin@fynlo.com',\n        password: 'platform123',\n        role: 'platform_owner',\n        name: 'Alex Thompson',\n        platform: { id: 1, name: 'Fynlo POS Platform' },\n        permissions: [\n          'manage_all_restaurants',\n          'view_all_analytics',\n          'manage_platform_settings',\n          'configure_payment_fees',\n          'manage_service_charges',\n          'access_admin_panel',\n        ],\n      },\n      {\n        id: 3,\n        username: 'manager',\n        email: 'sofia@mexicanrestaurant.com',\n        password: 'manager123',\n        role: 'manager',\n        name: 'Sofia Hernandez',\n        restaurant: { id: 1, name: 'Authentic Mexican Cuisine', slug: 'mexican-pilot-001' },\n        permissions: [\n          'process_orders',\n          'handle_payments',\n          'view_reports',\n          'manage_employees',\n          'view_menu',\n          'access_pos',\n        ],\n      },\n      {\n        id: 4,\n        username: 'cashier',\n        email: 'carlos@mexicanrestaurant.com',\n        password: 'cashier123',\n        role: 'employee',\n        name: 'Carlos Garcia',\n        restaurant: { id: 1, name: 'Authentic Mexican Cuisine', slug: 'mexican-pilot-001' },\n        permissions: ['process_orders', 'handle_payments', 'view_menu', 'access_pos'],\n      },\n    ];\n  }\n\n  async logout(): Promise<void> {\n    try {\n      await this.apiRequest('/api/v1/auth/logout', { method: 'POST' });\n    } catch (__error) {\n    } finally {\n      // Always clear local session data\n      this.authToken = null;\n      await AsyncStorage.multiRemove(['auth_token', 'user_data']);\n    }\n  }\n\n  // Product operations\n  async getProducts(): Promise<Product[]> {\n    try {\n      // Use the mobile-optimized view we created\n      const response = await this.apiRequest('/api/v1/products/mobile', {\n        method: 'GET',\n      });\n\n      return response.data || [];\n    } catch (__error) {\n      throw error; // Re-throw the error\n    }\n  }\n\n  async getProductsByCategory(categoryId: _number): Promise<Product[]> {\n    try {\n      const response = await this.apiRequest(`/api/v1/products/category/${categoryId}`, {\n        method: 'GET',\n      });\n\n      return response.data || [];\n    } catch (__error) {\n      throw error; // Re-throw the error\n    }\n  }\n\n  // Category operations\n  async getCategories(): Promise<Category[]> {\n    try {\n      const response = await this.apiRequest('/api/v1/products/categories', {\n        method: 'GET',\n      });\n\n      return response.data || [];\n    } catch (__error) {\n      throw error; // Re-throw the error\n    }\n  }\n\n  // Menu operations - Get menu items formatted for POS screen with caching\n  async getMenuItems(): Promise<any[]> {\n    // Check cache first\n    const now = Date.now();\n    if (this.menuCache.items && now - this.menuCache.itemsTimestamp < this.CACHE_DURATION) {\n      return this.menuCache.items;\n    }\n\n    try {\n      // Use public endpoint that doesn't require authentication\n      const response = await this.apiRequest('/api/v1/public/menu/items', {\n        method: 'GET',\n      });\n\n      if (response.data) {\n        // Apply compatibility transformation if needed\n        if (BackendCompatibilityService.needsMenuTransformation(response.data)) {\n          const transformedData = BackendCompatibilityService.transformMenuItems(response.data);\n          // Cache the transformed data with current timestamp\n          this.menuCache.items = transformedData;\n          this.menuCache.itemsTimestamp = Date.now();\n          return transformedData;\n        }\n        // Cache the data with current timestamp\n        this.menuCache.items = response.data;\n        this.menuCache.itemsTimestamp = Date.now();\n        return response.data;\n      }\n\n      return [];\n    } catch (__error) {\n\n      // If we have cached data that's expired, use it as fallback\n      if (this.menuCache.items) {\n        return this.menuCache.items;\n      }\n\n      // TEMPORARY: Return Chucho menu while we fix the API timeout issue\n      const fallbackData = this.getChuchoMenuData();\n      // Cache the fallback data too with current timestamp\n      this.menuCache.items = fallbackData;\n      this.menuCache.itemsTimestamp = Date.now();\n      return fallbackData;\n    }\n  }\n\n  async getMenuCategories(): Promise<any[]> {\n    // Check cache first\n    const now = Date.now();\n    if (\n      this.menuCache.categories &&\n      now - this.menuCache.categoriesTimestamp < this.CACHE_DURATION\n    ) {\n      return this.menuCache.categories;\n    }\n\n    try {\n      // Use public endpoint that doesn't require authentication\n      const response = await this.apiRequest('/api/v1/public/menu/categories', {\n        method: 'GET',\n      });\n\n      if (response.data && response.data.length > 0) {\n        // Cache the categories with current timestamp\n        this.menuCache.categories = response.data;\n        this.menuCache.categoriesTimestamp = Date.now();\n        return response.data;\n      }\n\n      // If no data, fall back to Mexican categories\n      const fallback = this.getMexicanCategoriesFallback();\n      this.menuCache.categories = fallback;\n      this.menuCache.categoriesTimestamp = Date.now();\n      return fallback;\n    } catch (__error) {\n\n      // If we have cached data that's expired, use it as fallback\n      if (this.menuCache.categories) {\n        return this.menuCache.categories;\n      }\n\n      // Return Mexican categories as fallback\n      const fallback = this.getMexicanCategoriesFallback();\n      this.menuCache.categories = fallback;\n      this.menuCache.categoriesTimestamp = Date.now();\n      return fallback;\n    }\n  }\n\n  // Create operations for categories\n  async createCategory(categoryData: {\n    name: string;\n    description?: string;\n    color?: string;\n    icon?: string;\n    sort_order?: number;\n  }): Promise<unknown> {\n    try {\n      const response = await this.apiRequest('/api/v1/products/categories', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(__categoryData),\n      });\n\n      return response.data;\n    } catch (__error) {\n      throw error;\n    }\n  }\n\n  async updateCategory(\n    categoryId: _string,\n    categoryData: Partial<{\n      name: string;\n      description?: string;\n      color?: string;\n      icon?: string;\n      sort_order?: number;\n      is_active?: boolean;\n    }>,\n  ): Promise<unknown> {\n    try {\n      const response = await this.authRequest(\n        `${this.baseUrl}/api/v1/products/categories/${categoryId}`,\n        {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(__categoryData),\n        },\n      );\n\n      if (!response.ok) {\n        const error = await response.text();\n        throw new Error(`Failed to update category: ${error}`);\n      }\n\n      const result = await response.json();\n      return result.data || result;\n    } catch (__error) {\n      throw error;\n    }\n  }\n\n  async deleteCategory(categoryId: _string): Promise<void> {\n    try {\n      const response = await this.authRequest(\n        `${this.baseUrl}/api/v1/products/categories/${categoryId}`,\n        {\n          method: 'DELETE',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        },\n      );\n\n      if (!response.ok) {\n        const error = await response.text();\n        throw new Error(`Failed to delete category: ${error}`);\n      }\n\n    } catch (__error) {\n      throw error;\n    }\n  }\n\n  // Create operations for products\n  async createProduct(productData: {\n    category_id: string;\n    name: string;\n    description?: string;\n    price: number;\n    cost?: number;\n    image_url?: string;\n    barcode?: string;\n    sku?: string;\n    prep_time?: number;\n    dietary_info?: string[];\n    modifiers?: unknown[];\n    stock_tracking?: boolean;\n    stock_quantity?: number;\n  }): Promise<unknown> {\n    try {\n      const response = await this.apiRequest('/api/v1/products/', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(__productData),\n      });\n\n      return response.data;\n    } catch (__error) {\n      throw error;\n    }\n  }\n\n  async updateProduct(\n    productId: _string,\n    productData: Partial<{\n      category_id?: string;\n      name?: string;\n      description?: string;\n      price?: number;\n      cost?: number;\n      image_url?: string;\n      barcode?: string;\n      sku?: string;\n      prep_time?: number;\n      dietary_info?: string[];\n      modifiers?: unknown[];\n      stock_tracking?: boolean;\n      stock_quantity?: number;\n      is_active?: boolean;\n    }>,\n  ): Promise<unknown> {\n    try {\n      const response = await this.apiRequest(`/api/v1/products/${productId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(__productData),\n      });\n\n      return response.data;\n    } catch (__error) {\n      throw error;\n    }\n  }\n\n  async deleteProduct(productId: _string): Promise<void> {\n    try {\n      await this.apiRequest(`/api/v1/products/${productId}`, {\n        method: 'DELETE',\n      });\n    } catch (__error) {\n      throw error;\n    }\n  }\n\n  // Clear menu cache - useful when data is updated\n  clearMenuCache(): void {\n    this.menuCache = {\n      items: _null,\n      categories: _null,\n      itemsTimestamp: 0,\n      categoriesTimestamp: 0,\n    };\n  }\n\n  // Import Chucho menu data\n  private getChuchoMenuData(): unknown[] {\n    // Transform menu items to match expected format\n    return CHUCHO_MENU_ITEMS.map(item => ({\n      ...item,\n      emoji: item.image, // Map image to emoji field for compatibility\n    }));\n  }\n\n  // Fallback Mexican menu data - preserves existing functionality (DEPRECATED - use getChuchoMenuData instead)\n  // DEPRECATED: Mock menu fallback functions have been removed for production readiness\n  // Menu data should come from API or real restaurant configurations\n\n  private getChuchoCategoriesData(): unknown[] {\n    // Transform categories to match expected format\n    return CHUCHO_CATEGORIES.map(cat => ({\n      ...cat,\n      active: _true, // All categories are active\n    }));\n  }\n\n  private getMexicanCategoriesFallback(): unknown[] {\n    // This function is deprecated. We now use Chucho's actual categories.\n    // Redirecting to Chucho categories to ensure consistency\n    return this.getChuchoCategoriesData();\n  }\n\n  // POS Session operations\n  async getCurrentSession(): Promise<PosSession | null> {\n    try {\n      const response = await this.apiRequest('/api/v1/pos/sessions/current', {\n        method: 'GET',\n      });\n\n      this.currentSession = response.data;\n      return this.currentSession;\n    } catch (__error) {\n      return null;\n    }\n  }\n\n  async createSession(configId: _number): Promise<PosSession | null> {\n    try {\n      const response = await this.apiRequest('/api/v1/pos/sessions', {\n        method: 'POST',\n        body: JSON.stringify({\n          config_id: _configId,\n        }),\n      });\n\n      this.currentSession = response.data;\n      return this.currentSession;\n    } catch (__error) {\n      return null;\n    }\n  }\n\n  // Order operations\n  async createOrder(order: Partial<Order>): Promise<Order | null> {\n    try {\n      const orderData = {\n        ...order,\n        session_id: this.currentSession?.id,\n        date_order: new Date().toISOString(),\n        state: 'draft',\n      };\n\n      const response = await this.apiRequest('/api/v1/orders', {\n        method: 'POST',\n        body: JSON.stringify(__orderData),\n      });\n\n      return response.data;\n    } catch (__error) {\n      return null;\n    }\n  }\n\n  async updateOrder(orderId: _number, updates: Partial<Order>): Promise<Order | null> {\n    try {\n      const response = await this.apiRequest(`/api/v1/orders/${orderId}`, {\n        method: 'PUT',\n        body: JSON.stringify(__updates),\n      });\n\n      return response.data;\n    } catch (__error) {\n      return null;\n    }\n  }\n\n  async getRecentOrders(limit = 20): Promise<Order[]> {\n    try {\n      const response = await this.apiRequest(`/api/v1/orders/recent?limit=${limit}`, {\n        method: 'GET',\n      });\n\n      return response.data || [];\n    } catch (__error) {\n      return [];\n    }\n  }\n\n  // Payment processing - PHASE 3: Updated to match backend multi-provider endpoint\n  async processPayment(orderId: _number, paymentMethod: _string, amount: _number): Promise<boolean> {\n    try {\n\n      const response = await this.apiRequest('/api/v1/payments/process', {\n        method: 'POST',\n        body: JSON.stringify({\n          order_id: orderId.toString(),\n          amount: _amount,\n          currency: 'GBP',\n          metadata: {\n            payment_method: _paymentMethod,\n            frontend_source: 'mobile_app',\n          },\n        }),\n      });\n\n      if (response.success && response.data) {\n          `💰 Amount: £${response.data.amount}, Fee: £${response.data.fee}, Net: £${response.data.net_amount}`,\n        );\n        return true;\n      } else {\n        return false;\n      }\n    } catch (__error) {\n      return false;\n    }\n  }\n\n  // Restaurant-specific operations - FIXED: Convert to REST API endpoints\n  async getRestaurantFloorPlan(sectionId?: _string): Promise<unknown> {\n    try {\n      const endpoint = sectionId\n        ? `/api/v1/restaurants/floor-plan?section_id=${sectionId}`\n        : '/api/v1/restaurants/floor-plan';\n\n      const response = await this.apiRequest(__endpoint, {\n        method: 'GET',\n      });\n\n      return response.data || null;\n    } catch (__error) {\n      throw error;\n    }\n  }\n\n  async updateTableStatus(tableId: _string, status: _string, additionalData?: _unknown): Promise<unknown> {\n    try {\n      const response = await this.apiRequest(`/api/v1/restaurants/tables/${tableId}/status`, {\n        method: 'PUT',\n        body: JSON.stringify({\n          status: _status,\n          ...additionalData,\n        }),\n      });\n\n      return response.data;\n    } catch (__error) {\n      return null;\n    }\n  }\n\n  async assignTableServer(tableId: _string, serverId: _string): Promise<unknown> {\n    try {\n      const response = await this.apiRequest(`/api/v1/restaurants/tables/${tableId}/server`, {\n        method: 'PUT',\n        body: JSON.stringify({\n          server_id: _serverId,\n        }),\n      });\n\n      return response.data;\n    } catch (__error) {\n      return null;\n    }\n  }\n\n  async getSections(): Promise<any[]> {\n    try {\n      const response = await this.apiRequest('/api/v1/restaurants/sections', {\n        method: 'GET',\n      });\n\n      return response.data || [];\n    } catch (__error) {\n      return [];\n    }\n  }\n\n  async getDailySalesReport(date?: _string): Promise<unknown> {\n    try {\n      const queryParam = date ? `?date=${date}` : '';\n      const response = await this.apiRequest(`/api/v1/reports/daily-sales${queryParam}`, {\n        method: 'GET',\n      });\n\n      return response.data || null;\n    } catch (__error) {\n      throw error;\n    }\n  }\n\n  async getSalesSummary(dateFrom?: _string, dateTo?: _string): Promise<unknown> {\n    try {\n      let queryParams = '';\n      if (dateFrom || dateTo) {\n        const params = new URLSearchParams();\n        if (__dateFrom) {\n          params.append('date_from', _dateFrom);\n        }\n        if (__dateTo) {\n          params.append('date_to', _dateTo);\n        }\n        queryParams = `?${params.toString()}`;\n      }\n\n      const response = await this.apiRequest(`/api/v1/reports/sales-summary${queryParams}`, {\n        method: 'GET',\n      });\n\n      return response.data || null;\n    } catch (__error) {\n      throw error;\n    }\n  }\n\n  // Cache management\n  async syncOfflineData(): Promise<void> {\n    try {\n      // Sync any offline orders, _products, etc.\n      const offlineOrders = await AsyncStorage.getItem('offline_orders');\n      if (__offlineOrders) {\n        const orders = JSON.parse(__offlineOrders);\n        for (const order of orders) {\n          await this.createOrder(__order);\n        }\n        await AsyncStorage.removeItem('offline_orders');\n      }\n    } catch (__error) {\n    }\n  }\n\n  // Mock data for development (will be removed when backend is connected)\n\n  async scanBarcode(): Promise<string | null> {\n    // Placeholder for real barcode scanner integration (e.g., ML Kit)\n    // Returns the scanned barcode string or null if cancelled\n    return null;\n  }\n\n  async printReceipt(order: _Order): Promise<boolean> {\n    // TODO: integrate with AirPrint / ESC-POS printers\n    return true; // pretend success so caller flow continues\n  }\n\n  async openCashDrawer(): Promise<boolean> {\n    // TODO: integrate with connected cash drawer hardware\n    return true;\n  }\n\n  // --- Stubs for new methods called by DataService ---\n  // TODO(real API): Implement actual API calls for these methods in DatabaseService\n\n  async getCustomers(): Promise<any[]> {\n    try {\n      const response = await this.apiRequest('/api/v1/customers', {\n        method: 'GET',\n      });\n\n      return response.data || [];\n    } catch (__error) {\n      // Return empty array instead of throwing to prevent app crashes\n      return [];\n    }\n  }\n\n  async getInventory(): Promise<any[]> {\n    // Alias for getInventoryItems\n    return this.getInventoryItems();\n  }\n\n  async getInventoryItems(): Promise<any[]> {\n    try {\n      const response = await this.apiRequest('/api/v1/inventory', {\n        method: 'GET',\n      });\n\n      return response.data || [];\n    } catch (__error) {\n      throw new Error('Backend connection required for inventory data');\n    }\n  }\n\n  async getEmployees(): Promise<any[]> {\n    try {\n      const response = await this.apiRequest('/api/v1/employees', {\n        method: 'GET',\n      });\n\n      return response.data || [];\n    } catch (__error) {\n      throw new Error('Backend connection required for employee data');\n    }\n  }\n\n  async getWeekSchedule(weekStart: _Date, employees: unknown[]): Promise<any | null> {\n    try {\n      // FIXED: Use GET request instead of POST to match backend\n      const response = await this.apiRequest('/api/v1/schedule/week', {\n        method: 'GET',\n      });\n\n      return response.data || null;\n    } catch (__error) {\n      throw new Error('Backend connection required for schedule data');\n    }\n  }\n\n  async getOrders(limit = 100): Promise<any[]> {\n    try {\n      const response = await this.apiRequest(`/api/v1/orders?limit=${limit}`, {\n        method: 'GET',\n      });\n\n      return response.data || [];\n    } catch (__error) {\n      return [];\n    }\n  }\n\n  async getOrdersByDateRange(dateRange: _string): Promise<any[]> {\n    // Renamed to match DataService call intent\n    throw new Error('DatabaseService.getOrdersByDateRange not implemented yet');\n  }\n\n  async getFinancialReportDetail(period: _string): Promise<any | null> {\n    throw new Error('DatabaseService.getFinancialReportDetail not implemented yet');\n  }\n\n  async getSalesReportDetail(period: _string): Promise<any[]> {\n    throw new Error('DatabaseService.getSalesReportDetail not implemented yet');\n  }\n\n  async getStaffReportDetail(period: _string): Promise<any[]> {\n    throw new Error('DatabaseService.getStaffReportDetail not implemented yet');\n  }\n\n  async getReportsDashboardData(): Promise<any | null> {\n    // Alias for getAnalyticsDashboard\n    return this.getAnalyticsDashboard();\n  }\n\n  async getAnalyticsDashboard(): Promise<any | null> {\n    try {\n      const response = await this.apiRequest('/api/v1/analytics/dashboard', {\n        method: 'GET',\n      });\n\n      return response.data || null;\n    } catch (__error) {\n      throw new Error('Backend connection required for analytics dashboard data');\n    }\n  }\n\n  async getUserProfile(): Promise<any | null> {\n    // Example: return this.apiRequest('/api/v1/users/profile');\n    throw new Error('DatabaseService.getUserProfile not implemented yet');\n  }\n}\n\nexport default DatabaseService;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/services/EmailReceiptService.ts","messages":[{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty constructor.","line":13,"column":25,"nodeType":"FunctionExpression","messageId":"unexpected","endLine":13,"endColumn":27}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import AsyncStorage from '@react-native-async-storage/async-storage';\n\nexport interface EmailReceiptData {\n  orderId: string;\n  email: string;\n}\n\nclass EmailReceiptService {\n  private static instance: EmailReceiptService;\n  private baseUrl: string | null = null;\n  private apiKey: string | null = null;\n\n  private constructor() {}\n\n  static getInstance(): EmailReceiptService {\n    if (!EmailReceiptService.instance) {\n      EmailReceiptService.instance = new EmailReceiptService();\n    }\n    return EmailReceiptService.instance;\n  }\n\n  private async ensureConfig() {\n    if (this.baseUrl && this.apiKey) {\n      return;\n    }\n    const raw = await AsyncStorage.getItem('payment_service_config');\n    if (!raw) {\n      return;\n    }\n    const cfg = JSON.parse(__raw);\n    this.baseUrl = cfg?.backend?.baseUrl ?? null;\n    this.apiKey = cfg?.backend?.apiKey ?? null;\n  }\n\n  async sendReceipt(data: _EmailReceiptData): Promise<boolean> {\n    try {\n      await this.ensureConfig();\n      if (!this.baseUrl || !this.apiKey) {\n        throw new Error('API config missing');\n      }\n\n      const res = await fetch(`${this.baseUrl}/api/v1/orders/${data.orderId}/email_receipt`, {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email: data.email }),\n      });\n      return res.ok;\n    } catch (__err) {\n      return false;\n    }\n  }\n}\n\nexport default EmailReceiptService.getInstance();\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/services/ErrorTrackingService.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Expression expected.","line":68,"column":6,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Using simple error tracking for immediate deployment\nimport SimpleErrorTrackingService from './SimpleErrorTrackingService';\n\nexport interface ErrorContext {\n  userId?: string;\n  userEmail?: string;\n  userRole?: string;\n  screenName?: string;\n  action?: string;\n  additionalData?: Record<string, any>;\n}\n\nexport interface PerformanceContext {\n  operation: string;\n  description?: string;\n  data?: Record<string, any>;\n}\n\nclass ErrorTrackingService {\n  private static instance: ErrorTrackingService;\n  private simpleTracker: SimpleErrorTrackingService;\n\n  constructor() {\n    this.simpleTracker = SimpleErrorTrackingService.getInstance();\n  }\n\n  static getInstance(): ErrorTrackingService {\n    if (!ErrorTrackingService.instance) {\n      ErrorTrackingService.instance = new ErrorTrackingService();\n    }\n    return ErrorTrackingService.instance;\n  }\n\n  initialize(): void {\n    this.simpleTracker.initialize();\n  }\n\n  setUser(userId: _string, email?: _string, role?: _string): void {\n    this.simpleTracker.setUser(__userId, _email, role);\n  }\n\n  captureError(error: _Error, context?: _ErrorContext): void {\n    this.simpleTracker.captureError(__error, _context);\n  }\n\n  captureMessage(\n    message: _string,\n    level: 'info' | 'warning' | 'error' = 'info',\n    context?: _ErrorContext,\n  ): void {\n    this.simpleTracker.captureMessage(__message, _level, context);\n  }\n\n  trackEvent(event: _string, data?: Record<string, any>): void {\n    this.simpleTracker.trackEvent(__event, _data);\n  }\n\n  startTransaction(context: _PerformanceContext): any {\n    return { operation: context.operation, startTime: Date.now() };\n  }\n\n  finishTransaction(transaction: _unknown, success = true): void {\n    if (__transaction) {\n      const duration = Date.now() - transaction.startTime;\n        `📊 Transaction finished: ${transaction.operation} (${duration}ms) - ${\n          success ? 'success' : 'failed'\n        }`,\n      );\n    }\n  }\n\n  // Specific tracking methods for common issues\n  trackPricingError(error: _Error, itemData?: _unknown, calculationContext?: _unknown): void {\n    this.simpleTracker.trackPricingError(__error, _itemData, calculationContext);\n  }\n\n  trackNetworkError(error: _Error, endpoint?: _string, method?: _string): void {\n    this.simpleTracker.trackNetworkError(__error, _endpoint, method);\n  }\n\n  trackUIError(error: _Error, component?: _string, props?: _unknown): void {\n    this.simpleTracker.trackUIError(__error, _component, props);\n  }\n\n  trackBusinessLogicError(error: _Error, operation?: _string, data?: _unknown): void {\n    this.simpleTracker.trackBusinessLogicError(__error, _operation, data);\n  }\n\n  // Performance monitoring\n  trackScreenLoad(screenName: _string): any {\n    return this.startTransaction({\n      operation: 'screen_load',\n      description: `Loading ${screenName}`,\n      data: { screenName },\n    });\n  }\n\n  trackApiCall(endpoint: _string, method: _string): any {\n    return this.startTransaction({\n      operation: 'api_call',\n      description: `${method} ${endpoint}`,\n      data: { endpoint, method },\n    });\n  }\n\n  // User feedback collection\n  showUserFeedbackDialog(): void {\n    this.simpleTracker.showUserFeedbackDialog();\n  }\n\n  // Debug helpers\n  addBreadcrumb(message: _string, category = 'debug', data?: Record<string, any>): void {\n    this.simpleTracker.addBreadcrumb(__message, _category, data);\n  }\n\n  setTag(key: _string, value: _string): void {\n    this.simpleTracker.setTag(__key, _value);\n  }\n\n  setContext(key: _string, context: Record<string, any>): void {\n    this.simpleTracker.setContext(__key, _context);\n  }\n\n  // Flush pending events\n  flush(timeout = 2000): Promise<boolean> {\n    return this.simpleTracker.flush(__timeout);\n  }\n}\n\nexport default ErrorTrackingService;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/services/InventoryApiService.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Expression expected.","line":123,"column":4,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import axios from 'axios';\nimport API_CONFIG from '../config/api';\nimport { InventoryItem, _RecipeClient, InventoryLedgerEntry, Recipe } from '../types'; // Assuming Recipe is the backend type for creation\n// For token\n\nconst API_URL = API_CONFIG.BASE_URL + '/api/v1';\n\nconst apiClient = axios.create({\n  baseURL: _API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add a request interceptor to include the auth token\napiClient.interceptors.request.use(\n  async config => {\n    // const token = useAppStore.getState().user?.token; // Adjust based on how token is stored\n    // Simulating token for now\n    const token = 'fake-jwt-token';\n    if (__token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  error => {\n    return Promise.reject(__error);\n  },\n);\n\n// --- Inventory Item API Calls ---\n\nexport const fetchInventoryItems = async (skip = 0, limit = 100): Promise<InventoryItem[]> => {\n  try {\n    const response = await apiClient.get<InventoryItem[]>(\n      `/inventory/items/?skip=${skip}&limit=${limit}`,\n    );\n    return response.data;\n  } catch (__error) {\n    throw error.response?.data || new Error('Failed to fetch inventory items');\n  }\n};\n\nexport const fetchInventoryItem = async (sku: _string): Promise<InventoryItem> => {\n  try {\n    const response = await apiClient.get<InventoryItem>(`/inventory/items/${sku}`);\n    return response.data;\n  } catch (__error) {\n    throw error.response?.data || new Error(`Failed to fetch inventory item ${sku}`);\n  }\n};\n\nexport const createInventoryItem = async (\n  itemData: Partial<InventoryItem>,\n): Promise<InventoryItem> => {\n  try {\n    const response = await apiClient.post<InventoryItem>('/inventory/items/', _itemData);\n    return response.data;\n  } catch (__error) {\n    throw error.response?.data || new Error('Failed to create inventory item');\n  }\n};\n\nexport const updateInventoryItem = async (\n  sku: _string,\n  itemData: Partial<InventoryItem>,\n): Promise<InventoryItem> => {\n  try {\n    const response = await apiClient.put<InventoryItem>(`/inventory/items/${sku}`, _itemData);\n    return response.data;\n  } catch (__error) {\n    throw error.response?.data || new Error(`Failed to update inventory item ${sku}`);\n  }\n};\n\nexport const deleteInventoryItem = async (sku: _string): Promise<InventoryItem> => {\n  try {\n    const response = await apiClient.delete<InventoryItem>(`/inventory/items/${sku}`);\n    return response.data; // Usually returns the deleted item or just a success status\n  } catch (__error) {\n    throw error.response?.data || new Error(`Failed to delete inventory item ${sku}`);\n  }\n};\n\nexport const adjustStock = async (\n  sku: _string,\n  change_qty_g: _number,\n  reason = 'manual_adjustment',\n): Promise<unknown> => {\n  try {\n    const response = await apiClient.post(`/inventory/items/${sku}/adjust-stock`, {\n      sku,\n      change_qty_g,\n      reason,\n    });\n    return response.data;\n  } catch (__error) {\n    throw error.response?.data || new Error(`Failed to adjust stock for ${sku}`);\n  }\n};\n\n// --- Recipe API Calls ---\n// Note: The Recipe type from backend for creation/update might differ from RecipeClient for display\n// Assuming RecipeCreate type from backend schemas is what we send. For simplicity, using Recipe type from types/index.ts for now.\n\nexport const fetchRecipes = async (skip = 0, limit = 100): Promise<RecipeClient[]> => {\n  try {\n    // This endpoint returns List[RecipeResponse] which matches RecipeClient structure\n    const response = await apiClient.get<RecipeClient[]>(`/recipes/?skip=${skip}&limit=${limit}`);\n    return response.data;\n  } catch (__error) {\n    throw error.response?.data || new Error('Failed to fetch recipes');\n  }\n};\n\nexport const fetchRecipeForItem = async (itemId: _string): Promise<RecipeClient> => {\n  try {\n    const response = await apiClient.get<RecipeClient>(`/recipes/${itemId}`);\n    return response.data;\n  } catch (__error) {\n      `Error fetching recipe for item ${itemId}:`,\n      error.response?.data || error.message,\n    );\n    throw error.response?.data || new Error(`Failed to fetch recipe for item ${itemId}`);\n  }\n};\n\n// The backend create endpoint expects a body like: { item_id: _UUID, ingredients: RecipeIngredientCreate[] }\n// Let's assume Recipe type in frontend matches this structure for creation.\nexport const createRecipe = async (recipeData: _Recipe): Promise<RecipeClient[]> => {\n  // Backend returns List[Recipe] which are individual ingredients\n  try {\n    // The backend endpoint /recipes/ POST creates/updates and returns list of recipe ingredients.\n    // We might want to adapt this or the client-side handling.\n    // For now, let's assume the response can be mapped or is directly usable.\n    const response = await apiClient.post<RecipeClient[]>(`/recipes/`, _recipeData);\n    return response.data;\n  } catch (__error) {\n    const detail = error.response?.data?.detail;\n    if (typeof detail === 'string' && detail.includes('validation error')) {\n      // More specific error\n      throw new Error(`Validation Error: ${detail}`);\n    }\n    throw error.response?.data || new Error('Failed to create recipe');\n  }\n};\n\n// Backend uses the same POST endpoint for updates (upsert logic)\nexport const updateRecipe = async (itemId: _string, recipeData: _Recipe): Promise<RecipeClient[]> => {\n  if (itemId !== recipeData.item_id) {\n    throw new Error('Item ID mismatch in updateRecipe call.');\n  }\n  try {\n    const response = await apiClient.post<RecipeClient[]>(`/recipes/`, _recipeData); // Same as create\n    return response.data;\n  } catch (__error) {\n      `Error updating recipe for item ${itemId}:`,\n      error.response?.data || error.message,\n    );\n    throw error.response?.data || new Error(`Failed to update recipe for item ${itemId}`);\n  }\n};\n\nexport const deleteRecipe = async (itemId: _string): Promise<void> => {\n  try {\n    await apiClient.delete(`/recipes/${itemId}`);\n  } catch (__error) {\n      `Error deleting recipe for item ${itemId}:`,\n      error.response?.data || error.message,\n    );\n    throw error.response?.data || new Error(`Failed to delete recipe for item ${itemId}`);\n  }\n};\n\n// --- Inventory Ledger API Calls ---\n\nexport const fetchInventoryLedger = async (\n  sku?: _string,\n  skip = 0,\n  limit = 100,\n  startDate?: _string,\n  endDate?: _string,\n): Promise<InventoryLedgerEntry[]> => {\n  try {\n    const params: unknown = { skip, limit };\n    if (__startDate) {\n      params.start_date = startDate;\n    }\n    if (__endDate) {\n      params.end_date = endDate;\n    }\n\n    const url = sku ? `/inventory/ledger/${sku}` : '/inventory/ledger/';\n    const response = await apiClient.get<InventoryLedgerEntry[]>(__url, { params });\n    return response.data;\n  } catch (__error) {\n    throw error.response?.data || new Error('Failed to fetch inventory ledger');\n  }\n};\n\n// --- Mocked Product Fetch for Recipe Form (replace with actual Product service if exists) ---\nexport const fetchProducts = async (): Promise<Product[]> => {\n  // This should ideally come from a ProductApiService or similar\n  return new Promise(resolve =>\n    setTimeout(\n      () =>\n        resolve([\n          { id: 'd290f1ee-6c54-4b01-90e6-d701748f0851', name: 'Carnitas Taco' },\n          { id: 'd290f1ee-6c54-4b01-90e6-d701748f0852', name: 'Chicken Burrito' },\n          { id: 'd290f1ee-6c54-4b01-90e6-d701748f0853', name: 'Guacamole Side' },\n        ]),\n      500,\n    ),\n  );\n};\n\n// Type for Product if not already defined elsewhere for this context\ninterface Product {\n  id: string; // UUID\n  name: string;\n}\n\n// --- Receipt Scanning API Call ---\n\nexport interface ScannedItemAPIResponse {\n  name: string;\n  quantity: number;\n  price: number;\n  sku_match?: string | null;\n  raw_text_name?: string | null;\n  raw_text_quantity?: string | null;\n  raw_text_price?: string | null;\n}\n\nexport const scanReceipt = async (imageBase64: _string): Promise<ScannedItemAPIResponse[]> => {\n  try {\n    const response = await apiClient.post<ScannedItemAPIResponse[]>('/inventory/scan', {\n      image_base64: _imageBase64,\n    });\n    return response.data;\n  } catch (__error) {\n    // It's good practice to throw a custom error or the error data from the API\n    // This allows the caller to handle specific error messages or types\n    if (error.response && error.response.data) {\n      throw error.response.data;\n    }\n    throw new Error('Failed to scan receipt. Please try again.');\n  }\n};\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/services/MonitoringService.ts","messages":[{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":88,"column":12,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":88,"endColumn":28},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":94,"column":12,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":94,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_listenerId' is assigned a value but never used.","line":201,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":201,"endColumn":22},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":275,"column":22,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":275,"endColumn":38,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[7200,7201],"text":"?."},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":279,"column":30,"nodeType":"CallExpression","messageId":"missingRadix","endLine":279,"endColumn":52,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[7430,7430],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":310,"column":28,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":310,"endColumn":45,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[8619,8620],"text":"?."},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":324,"column":7,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":324,"endColumn":24,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[9180,9181],"text":"?."},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is assigned a value but never used.","line":340,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":340,"endColumn":29}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"interface SystemHealth {\n  api: HealthMetric;\n  database: HealthMetric;\n  payment: HealthMetric;\n  network: HealthMetric;\n}\n\ninterface HealthMetric {\n  name: string;\n  value: string;\n  status: 'good' | 'warning' | 'error';\n  icon: string;\n  trend: number; // percentage change\n  lastUpdated: Date;\n}\n\ninterface ErrorLog {\n  id: string;\n  type: 'Payment' | 'Network' | 'System' | 'Database' | 'Authentication';\n  message: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  timestamp: Date;\n  restaurantId?: string;\n  restaurantName?: string;\n  stackTrace?: string;\n  resolved: boolean;\n}\n\ninterface Incident {\n  id: string;\n  title: string;\n  description: string;\n  status: 'investigating' | 'monitoring' | 'resolved' | 'closed';\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  affectedRestaurants: string[];\n  createdAt: Date;\n  updatedAt: Date;\n  assignedTo?: string;\n  resolution?: string;\n}\n\ninterface PerformanceMetrics {\n  uptime: number;\n  requestsPerDay: number;\n  errorRate: number;\n  avgResponseTime: number;\n  memoryUsage: number;\n  cpuUsage: number;\n}\n\ninterface AlertRule {\n  id: string;\n  name: string;\n  condition: string;\n  threshold: number;\n  enabled: boolean;\n  channels: ('email' | 'sms' | 'slack' | 'webhook')[];\n}\n\nclass MonitoringService {\n  private static instance: MonitoringService;\n  private healthData: SystemHealth | null = null;\n  private errors: ErrorLog[] = [];\n  private incidents: Incident[] = [];\n  private performance: PerformanceMetrics | null = null;\n  private alertRules: AlertRule[] = [];\n  private listeners: Map<string, (data: _unknown) => void> = new Map();\n\n  static getInstance(): MonitoringService {\n    if (!MonitoringService.instance) {\n      MonitoringService.instance = new MonitoringService();\n    }\n    return MonitoringService.instance;\n  }\n\n  constructor() {\n    this.initializeMockData();\n    this.startRealTimeUpdates();\n  }\n\n  // Real-time health monitoring\n  async getSystemHealth(): Promise<SystemHealth> {\n    // Simulate API call\n    await new Promise(_resolve => setTimeout(__resolve, 500));\n\n    // Generate dynamic health data\n    this.updateHealthMetrics();\n    return this.healthData!;\n  }\n\n  async getPerformanceMetrics(): Promise<PerformanceMetrics> {\n    await new Promise(_resolve => setTimeout(__resolve, 300));\n    this.updatePerformanceMetrics();\n    return this.performance!;\n  }\n\n  // Error monitoring\n  async getRecentErrors(_limit = 10): Promise<ErrorLog[]> {\n    await new Promise(_resolve => setTimeout(__resolve, 200));\n    return this.errors\n      .sort((__a, _b) => b.timestamp.getTime() - a.timestamp.getTime())\n      .slice(0, _limit);\n  }\n\n  async getErrorsByType(type: _string): Promise<ErrorLog[]> {\n    return this.errors.filter(error => error.type === type);\n  }\n\n  async getErrorsBySeverity(severity: _string): Promise<ErrorLog[]> {\n    return this.errors.filter(error => error.severity === severity);\n  }\n\n  async resolveError(errorId: _string): Promise<boolean> {\n    const errorIndex = this.errors.findIndex(e => e.id === errorId);\n    if (errorIndex !== -1) {\n      this.errors[errorIndex].resolved = true;\n      return true;\n    }\n    return false;\n  }\n\n  // Incident management\n  async getActiveIncidents(): Promise<Incident[]> {\n    await new Promise(_resolve => setTimeout(__resolve, 300));\n    return this.incidents.filter(\n      incident => incident.status !== 'resolved' && incident.status !== 'closed',\n    );\n  }\n\n  async getAllIncidents(): Promise<Incident[]> {\n    return this.incidents;\n  }\n\n  async createIncident(\n    title: _string,\n    description: _string,\n    severity: 'low' | 'medium' | 'high' | 'critical',\n    affectedRestaurants: string[],\n  ): Promise<Incident> {\n    const incident: Incident = {\n      id: `incident-${Date.now()}`,\n      title,\n      description,\n      status: 'investigating',\n      severity,\n      affectedRestaurants,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    this.incidents.push(__incident);\n    this.notifyListeners('incident-created', _incident);\n    return incident;\n  }\n\n  async updateIncidentStatus(\n    incidentId: _string,\n    status: 'investigating' | 'monitoring' | 'resolved' | 'closed',\n    resolution?: _string,\n  ): Promise<boolean> {\n    const incidentIndex = this.incidents.findIndex(i => i.id === incidentId);\n    if (incidentIndex !== -1) {\n      this.incidents[incidentIndex].status = status;\n      this.incidents[incidentIndex].updatedAt = new Date();\n      if (__resolution) {\n        this.incidents[incidentIndex].resolution = resolution;\n      }\n\n      this.notifyListeners('incident-updated', this.incidents[incidentIndex]);\n      return true;\n    }\n    return false;\n  }\n\n  // Alert management\n  async getAlertRules(): Promise<AlertRule[]> {\n    return this.alertRules;\n  }\n\n  async createAlertRule(rule: Omit<AlertRule, 'id'>): Promise<AlertRule> {\n    const alertRule: AlertRule = {\n      ...rule,\n      id: `alert-${Date.now()}`,\n    };\n\n    this.alertRules.push(__alertRule);\n    return alertRule;\n  }\n\n  async updateAlertRule(ruleId: _string, updates: Partial<AlertRule>): Promise<boolean> {\n    const ruleIndex = this.alertRules.findIndex(r => r.id === ruleId);\n    if (ruleIndex !== -1) {\n      this.alertRules[ruleIndex] = { ...this.alertRules[ruleIndex], ...updates };\n      return true;\n    }\n    return false;\n  }\n\n  // Real-time subscriptions\n  subscribe(eventType: _string, _callback: (data: _unknown) => void): () => void {\n    const _listenerId = `${eventType}-${Date.now()}`;\n    this.listeners.set(__listenerId, _callback);\n\n    return () => {\n      this.listeners.delete(__listenerId);\n    };\n  }\n\n  private notifyListeners(_eventType: _string, _data: _unknown): void {\n    this.listeners.forEach((__callback, _listenerId) => {\n      if (listenerId.startsWith(__eventType)) {\n        callback(__data);\n      }\n    });\n  }\n\n  // Data generation and updates\n  private initializeMockData(): void {\n    this.healthData = {\n      api: {\n        name: 'API Response Time',\n        value: '125ms',\n        status: 'good',\n        icon: 'speed',\n        trend: -5.2,\n        lastUpdated: new Date(),\n      },\n      database: {\n        name: 'Database Performance',\n        value: '98.9%',\n        status: 'good',\n        icon: 'storage',\n        trend: 2.1,\n        lastUpdated: new Date(),\n      },\n      payment: {\n        name: 'Payment Gateway',\n        value: '99.8%',\n        status: 'good',\n        icon: 'payment',\n        trend: 0.5,\n        lastUpdated: new Date(),\n      },\n      network: {\n        name: 'Network Latency',\n        value: '45ms',\n        status: 'warning',\n        icon: 'network-check',\n        trend: 8.3,\n        lastUpdated: new Date(),\n      },\n    };\n\n    this.performance = {\n      uptime: 99.9,\n      requestsPerDay: 2300000,\n      errorRate: 0.01,\n      avgResponseTime: 125,\n      memoryUsage: 68.5,\n      cpuUsage: 23.7,\n    };\n\n    this.generateMockErrors();\n    this.generateMockIncidents();\n    this.generateMockAlertRules();\n  }\n\n  private updateHealthMetrics(): void {\n    if (!this.healthData) {\n      return;\n    }\n\n    // Simulate real-time updates\n    Object.keys(this.healthData).forEach(key => {\n      const metric = this.healthData![key as keyof SystemHealth];\n      const variation = -5 + Math.random() * 10; // -5% to +5%\n\n      if (metric.name.includes('Response Time') || metric.name.includes('Latency')) {\n        const currentValue = parseInt(metric.value);\n        const newValue = Math.max(10, currentValue + Math.round((currentValue * variation) / 100));\n        metric.value = `${newValue}ms`;\n        metric.status = newValue > 200 ? 'error' : newValue > 100 ? 'warning' : 'good';\n      } else if (metric.name.includes('Performance') || metric.name.includes('Gateway')) {\n        const currentValue = parseFloat(metric.value);\n        const newValue = Math.min(100, Math.max(90, currentValue + variation / 10));\n        metric.value = `${newValue.toFixed(1)}%`;\n        metric.status = newValue < 95 ? 'error' : newValue < 98 ? 'warning' : 'good';\n      }\n\n      metric.trend = variation;\n      metric.lastUpdated = new Date();\n    });\n  }\n\n  private updatePerformanceMetrics(): void {\n    if (!this.performance) {\n      return;\n    }\n\n    const variations = {\n      uptime: -0.1 + Math.random() * 0.2,\n      requestsPerDay: -50000 + Math.random() * 100000,\n      errorRate: -0.005 + Math.random() * 0.01,\n      avgResponseTime: -10 + Math.random() * 20,\n      memoryUsage: -5 + Math.random() * 10,\n      cpuUsage: -10 + Math.random() * 20,\n    };\n\n    Object.keys(__variations).forEach(key => {\n      const currentValue = this.performance![key as keyof PerformanceMetrics];\n      const variation = variations[key as keyof typeof variations];\n\n      let newValue: number;\n      if (key === 'uptime') {\n        newValue = Math.min(100, Math.max(95, currentValue + variation));\n      } else if (key === 'requestsPerDay') {\n        newValue = Math.max(1000000, currentValue + variation);\n      } else if (key === 'errorRate') {\n        newValue = Math.max(0, Math.min(1, currentValue + variation));\n      } else {\n        newValue = Math.max(0, currentValue + variation);\n      }\n\n      this.performance![key as keyof PerformanceMetrics] = newValue;\n    });\n  }\n\n  private generateMockErrors(): void {\n    const errorTypes = ['Payment', 'Network', 'System', 'Database', 'Authentication'];\n    const severities = ['low', 'medium', 'high', 'critical'];\n    const restaurants = [\n      { id: '1', name: 'Fynlo Coffee Shop' },\n      { id: '2', name: 'Fynlo Burger Bar' },\n      { id: '3', name: 'Fynlo Pizza Palace' },\n      { id: '4', name: 'Fynlo Taco Stand' },\n    ];\n\n    for (let i = 0; i < 15; i++) {\n      const restaurant = restaurants[Math.floor(Math.random() * restaurants.length)];\n      const _error: ErrorLog = {\n        id: `error-${Date.now()}-${i}`,\n        type: errorTypes[Math.floor(Math.random() * errorTypes.length)] as unknown,\n        message: this.generateErrorMessage(),\n        severity: severities[Math.floor(Math.random() * severities.length)] as unknown,\n        timestamp: new Date(Date.now() - Math.random() * 24 * 60 * 60 * 1000),\n        restaurantId: restaurant.id,\n        restaurantName: restaurant.name,\n        resolved: Math.random() > 0.7,\n      };\n\n      this.errors.push(__error);\n    }\n  }\n\n  private generateMockIncidents(): void {\n    const incidents: Incident[] = [\n      {\n        id: 'incident-1',\n        title: 'Payment Processing Delay',\n        description:\n          'Multiple restaurants experiencing slower than normal payment processing times',\n        status: 'investigating',\n        severity: 'high',\n        affectedRestaurants: ['1', '2', '3'],\n        createdAt: new Date(Date.now() - 30 * 60 * 1000),\n        updatedAt: new Date(Date.now() - 10 * 60 * 1000),\n      },\n      {\n        id: 'incident-2',\n        title: 'Network Connectivity Issues',\n        description: 'Intermittent connectivity issues affecting POS terminals',\n        status: 'monitoring',\n        severity: 'medium',\n        affectedRestaurants: ['4'],\n        createdAt: new Date(Date.now() - 2 * 60 * 60 * 1000),\n        updatedAt: new Date(Date.now() - 30 * 60 * 1000),\n      },\n    ];\n\n    this.incidents = incidents;\n  }\n\n  private generateMockAlertRules(): void {\n    this.alertRules = [\n      {\n        id: 'alert-1',\n        name: 'High Error Rate',\n        condition: 'error_rate > threshold',\n        threshold: 1,\n        enabled: _true,\n        channels: ['email', 'slack'],\n      },\n      {\n        id: 'alert-2',\n        name: 'Response Time Alert',\n        condition: 'avg_response_time > threshold',\n        threshold: 500,\n        enabled: _true,\n        channels: ['email', 'sms'],\n      },\n      {\n        id: 'alert-3',\n        name: 'Low Uptime',\n        condition: 'uptime < threshold',\n        threshold: 99,\n        enabled: _false,\n        channels: ['email', 'webhook'],\n      },\n    ];\n  }\n\n  private generateErrorMessage(): string {\n    const messages = [\n      'Card reader timeout during transaction processing',\n      'Database connection pool exhausted',\n      'Network request timeout to payment gateway',\n      'Authentication token expired during order processing',\n      'Memory allocation failed in POS terminal',\n      'WebSocket connection lost during live updates',\n      'Rate limit exceeded on external API',\n      'SSL certificate validation failed',\n      'Disk space low on server instance',\n      'Invalid payment method configuration',\n    ];\n\n    return messages[Math.floor(Math.random() * messages.length)];\n  }\n\n  private startRealTimeUpdates(): void {\n    // Update health metrics every 30 seconds\n    setInterval(() => {\n      this.updateHealthMetrics();\n      this.notifyListeners('health-updated', this.healthData);\n    }, 30000);\n\n    // Update performance metrics every minute\n    setInterval(() => {\n      this.updatePerformanceMetrics();\n      this.notifyListeners('performance-updated', this.performance);\n    }, 60000);\n\n    // Simulate new errors occasionally\n    setInterval(() => {\n      if (Math.random() < 0.3) {\n        // 30% chance every minute\n        this.generateNewError();\n      }\n    }, 60000);\n  }\n\n  private generateNewError(): void {\n    const errorTypes = ['Payment', 'Network', 'System', 'Database', 'Authentication'];\n    const severities = ['low', 'medium', 'high'];\n    const restaurants = [\n      { id: '1', name: 'Fynlo Coffee Shop' },\n      { id: '2', name: 'Fynlo Burger Bar' },\n      { id: '3', name: 'Fynlo Pizza Palace' },\n      { id: '4', name: 'Fynlo Taco Stand' },\n    ];\n\n    const restaurant = restaurants[Math.floor(Math.random() * restaurants.length)];\n    const _error: ErrorLog = {\n      id: `error-${Date.now()}`,\n      type: errorTypes[Math.floor(Math.random() * errorTypes.length)] as unknown,\n      message: this.generateErrorMessage(),\n      severity: severities[Math.floor(Math.random() * severities.length)] as unknown,\n      timestamp: new Date(),\n      restaurantId: restaurant.id,\n      restaurantName: restaurant.name,\n      resolved: _false,\n    };\n\n    this.errors.unshift(__error);\n    this.notifyListeners('error-created', _error);\n\n    // Keep only latest 50 errors\n    if (this.errors.length > 50) {\n      this.errors = this.errors.slice(0, 50);\n    }\n  }\n}\n\nexport { MonitoringService };\nexport type { SystemHealth, _HealthMetric, ErrorLog, _Incident, PerformanceMetrics, AlertRule };\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/services/NFCService.ts","messages":[{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty constructor.","line":25,"column":25,"nodeType":"FunctionExpression","messageId":"unexpected","endLine":25,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_applePayAvailable' is assigned a value but never used.","line":179,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":179,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_googlePayAvailable' is assigned a value but never used.","line":184,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":184,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_nfcSupported' is assigned a value but never used.","line":190,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":190,"endColumn":26}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * NFCService - Handles NFC device capabilities and proximity detection\n * Provides utilities for checking NFC availability and managing contactless payments\n */\n\nimport { Platform } from 'react-native';\n\nexport interface NFCCapabilities {\n  isSupported: boolean;\n  isEnabled: boolean;\n  canMakePayments: boolean;\n  supportedMethods: string[];\n}\n\nexport interface NFCProximityEvent {\n  detected: boolean;\n  deviceType?: 'card' | 'phone' | 'watch' | 'unknown';\n  signal?: 'weak' | 'moderate' | 'strong';\n}\n\nclass NFCServiceClass {\n  private static instance: NFCServiceClass;\n  private proximityCallback: ((event: _NFCProximityEvent) => void) | null = null;\n\n  private constructor() {}\n\n  static getInstance(): NFCServiceClass {\n    if (!NFCServiceClass.instance) {\n      NFCServiceClass.instance = new NFCServiceClass();\n    }\n    return NFCServiceClass.instance;\n  }\n\n  /**\n   * Check if NFC is supported on this device\n   */\n  async isNFCSupported(): Promise<boolean> {\n    try {\n      if (Platform.OS === 'ios') {\n        // iOS devices since iPhone 6 support NFC for payments\n        return true;\n      } else if (Platform.OS === 'android') {\n        // Most modern Android devices support NFC\n        // This would typically use NativeModules to check actual NFC hardware\n        return true;\n      }\n      return false;\n    } catch (__error) {\n      return false;\n    }\n  }\n\n  /**\n   * Check if NFC is currently enabled\n   */\n  async isNFCEnabled(): Promise<boolean> {\n    try {\n      // This would typically check device settings\n      // For now, assume NFC is enabled if supported\n      const isSupported = await this.isNFCSupported();\n      return isSupported;\n    } catch (__error) {\n      return false;\n    }\n  }\n\n  /**\n   * Get complete NFC capabilities\n   */\n  async getNFCCapabilities(): Promise<NFCCapabilities> {\n    try {\n      const isSupported = await this.isNFCSupported();\n      const isEnabled = await this.isNFCEnabled();\n\n      const supportedMethods: string[] = [];\n\n      if (isSupported && isEnabled) {\n        if (Platform.OS === 'ios') {\n          supportedMethods.push('apple_pay', 'contactless_card');\n        } else if (Platform.OS === 'android') {\n          supportedMethods.push('google_pay', 'contactless_card');\n        }\n      }\n\n      return {\n        isSupported,\n        isEnabled,\n        canMakePayments: isSupported && isEnabled,\n        supportedMethods,\n      };\n    } catch (__error) {\n      return {\n        isSupported: _false,\n        isEnabled: _false,\n        canMakePayments: _false,\n        supportedMethods: [],\n      };\n    }\n  }\n\n  /**\n   * Start monitoring for NFC proximity events\n   */\n  startProximityDetection(callback: (event: _NFCProximityEvent) => void): void {\n    this.proximityCallback = callback;\n\n    // This would typically start native NFC proximity monitoring\n    // For now, we'll simulate proximity detection for demo purposes\n  }\n\n  /**\n   * Stop monitoring for NFC proximity events\n   */\n  stopProximityDetection(): void {\n    this.proximityCallback = null;\n  }\n\n  /**\n   * Simulate device proximity (for development/testing)\n   */\n  simulateDeviceProximity(deviceType: 'card' | 'phone' | 'watch' = 'card'): void {\n    if (this.proximityCallback) {\n      // Simulate detection\n      this.proximityCallback({\n        detected: _true,\n        deviceType,\n        signal: 'strong',\n      });\n\n      // Simulate device removal after 3 seconds\n      setTimeout(() => {\n        if (this.proximityCallback) {\n          this.proximityCallback({\n            detected: _false,\n          });\n        }\n      }, 3000);\n    }\n  }\n\n  /**\n   * Check if Apple Pay is available\n   */\n  async isApplePayAvailable(): Promise<boolean> {\n    if (Platform.OS !== 'ios') {\n      return false;\n    }\n\n    try {\n      // This would typically use Apple Pay SDK to check availability\n      return true;\n    } catch (__error) {\n      return false;\n    }\n  }\n\n  /**\n   * Check if Google Pay is available\n   */\n  async isGooglePayAvailable(): Promise<boolean> {\n    if (Platform.OS !== 'android') {\n      return false;\n    }\n\n    try {\n      // This would typically use Google Pay SDK to check availability\n      return true;\n    } catch (__error) {\n      return false;\n    }\n  }\n\n  /**\n   * Get optimal payment method based on device capabilities\n   */\n  async getOptimalPaymentMethod(): Promise<'apple_pay' | 'google_pay' | 'nfc' | 'none'> {\n    try {\n      if (Platform.OS === 'ios') {\n        const _applePayAvailable = await this.isApplePayAvailable();\n        if (__applePayAvailable) {\n          return 'apple_pay';\n        }\n      } else if (Platform.OS === 'android') {\n        const _googlePayAvailable = await this.isGooglePayAvailable();\n        if (__googlePayAvailable) {\n          return 'google_pay';\n        }\n      }\n\n      const _nfcSupported = await this.isNFCSupported();\n      if (__nfcSupported) {\n        return 'nfc';\n      }\n\n      return 'none';\n    } catch (__error) {\n      return 'none';\n    }\n  }\n\n  /**\n   * Guide user to enable NFC if disabled\n   */\n  getEnableNFCInstructions(): string {\n    if (Platform.OS === 'ios') {\n      return 'NFC is automatically enabled on iOS devices. Ensure you have Face ID/Touch ID set up for contactless payments.';\n    } else if (Platform.OS === 'android') {\n      return 'Go to Settings > Connected devices > Connection preferences > NFC and turn on NFC.';\n    }\n    return 'NFC is not supported on this device.';\n  }\n\n  /**\n   * Get troubleshooting tips for NFC issues\n   */\n  getTroubleshootingTips(): string[] {\n    const tips = [\n      'Remove any phone case or thick cover',\n      'Hold the card flat against the back of your device',\n      'Wait for the NFC icon to pulse before bringing the card close',\n      'Ensure NFC is enabled in your device settings',\n    ];\n\n    if (Platform.OS === 'ios') {\n      tips.push('Make sure Face ID or Touch ID is set up and working');\n      tips.push('Check that Apple Pay is set up in Wallet app');\n    } else if (Platform.OS === 'android') {\n      tips.push('Ensure Google Pay is installed and set up');\n      tips.push('Check that your default payment app is configured');\n    }\n\n    return tips;\n  }\n}\n\nexport const NFCService = NFCServiceClass.getInstance();\nexport default NFCService;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/services/NetworkDiagnosticsService.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ';' expected.","line":51,"column":19,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * NetworkDiagnosticsService - Advanced network connectivity and API diagnostics\n * Provides comprehensive network testing and error reporting for platform owner authentication\n */\n\nimport { Alert } from 'react-native';\nimport NetInfo from '@react-native-community/netinfo';\nimport API_CONFIG from '../config/api';\n\nexport interface NetworkDiagnostics {\n  isConnected: boolean;\n  connectionType: string;\n  isInternetReachable: boolean;\n  apiServerReachable: boolean;\n  specificEndpointReachable: boolean;\n  latency: number;\n  error?: string;\n  timestamp: Date;\n}\n\nexport interface APIEndpointTest {\n  url: string;\n  status: 'success' | 'failed' | 'timeout';\n  statusCode?: number;\n  responseTime: number;\n  error?: string;\n}\n\nclass NetworkDiagnosticsService {\n  private static instance: NetworkDiagnosticsService;\n\n  private constructor() {}\n\n  static getInstance(): NetworkDiagnosticsService {\n    if (!NetworkDiagnosticsService.instance) {\n      NetworkDiagnosticsService.instance = new NetworkDiagnosticsService();\n    }\n    return NetworkDiagnosticsService.instance;\n  }\n\n  /**\n   * Comprehensive network diagnostics for platform owner login\n   */\n  async performFullNetworkDiagnostics(): Promise<NetworkDiagnostics> {\n    const startTime = Date.now();\n\n    try {\n      // 1. Check basic network connectivity\n      const netInfo = await NetInfo.fetch();\n        type: netInfo.type,\n        isConnected: netInfo.isConnected,\n        isInternetReachable: netInfo.isInternetReachable,\n      });\n\n      // 2. Test API server health endpoint\n      const apiServerReachable = await this.testEndpoint(`${API_CONFIG.BASE_URL}/health`, 5000);\n\n      // 3. Test specific platform endpoint\n      const platformEndpoint = `${API_CONFIG.BASE_URL}/api/v1/platform/restaurants/platform_owner_1`;\n      const specificEndpointReachable = await this.testEndpoint(__platformEndpoint, 5000);\n\n      const latency = Date.now() - startTime;\n\n      const diagnostics: NetworkDiagnostics = {\n        isConnected: netInfo.isConnected ?? false,\n        connectionType: netInfo.type || 'unknown',\n        isInternetReachable: netInfo.isInternetReachable ?? false,\n        apiServerReachable: apiServerReachable.status === 'success',\n        specificEndpointReachable: specificEndpointReachable.status === 'success',\n        latency,\n        timestamp: new Date(),\n      };\n\n      // Add error details if any test failed\n      if (!diagnostics.apiServerReachable || !diagnostics.specificEndpointReachable) {\n        diagnostics.error = this.generateDiagnosticError(\n          diagnostics,\n          apiServerReachable,\n          specificEndpointReachable,\n        );\n      }\n\n      return diagnostics;\n    } catch (__error) {\n      return {\n        isConnected: _false,\n        connectionType: 'unknown',\n        isInternetReachable: _false,\n        apiServerReachable: _false,\n        specificEndpointReachable: _false,\n        latency: Date.now() - startTime,\n        error: error instanceof Error ? error.message : 'Unknown diagnostics error',\n        timestamp: new Date(),\n      };\n    }\n  }\n\n  /**\n   * Test a specific endpoint with timeout\n   */\n  private async testEndpoint(url: _string, timeout = 5000): Promise<APIEndpointTest> {\n    const startTime = Date.now();\n\n    try {\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), _timeout);\n\n      const response = await fetch(__url, {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' },\n        signal: controller.signal,\n      });\n\n      clearTimeout(__timeoutId);\n      const responseTime = Date.now() - startTime;\n\n      return {\n        url,\n        status: response.ok ? 'success' : 'failed',\n        statusCode: response.status,\n        responseTime,\n      };\n    } catch (__error) {\n      const responseTime = Date.now() - startTime;\n\n      if (error.name === 'AbortError') {\n        return {\n          url,\n          status: 'timeout',\n          responseTime,\n          error: `Request timed out after ${timeout}ms`,\n        };\n      }\n\n      return {\n        url,\n        status: 'failed',\n        responseTime,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      };\n    }\n  }\n\n  /**\n   * Generate detailed diagnostic error message\n   */\n  private generateDiagnosticError(\n    diagnostics: _NetworkDiagnostics,\n    apiTest: _APIEndpointTest,\n    endpointTest: _APIEndpointTest,\n  ): string {\n    const errors: string[] = [];\n\n    if (!diagnostics.isConnected) {\n      errors.push('Device not connected to network');\n    } else if (!diagnostics.isInternetReachable) {\n      errors.push('Internet not reachable');\n    }\n\n    if (apiTest.status === 'failed') {\n      errors.push(`API server unreachable (${API_CONFIG.BASE_URL})`);\n      if (apiTest.statusCode) {\n        errors.push(`HTTP ${apiTest.statusCode}`);\n      }\n    } else if (apiTest.status === 'timeout') {\n      errors.push('API server request timed out');\n    }\n\n    if (endpointTest.status === 'failed') {\n      errors.push('Platform endpoint not available');\n      if (endpointTest.statusCode) {\n        errors.push(`Platform endpoint HTTP ${endpointTest.statusCode}`);\n      }\n    } else if (endpointTest.status === 'timeout') {\n      errors.push('Platform endpoint timed out');\n    }\n\n    return errors.join('; ');\n  }\n\n  /**\n   * Show user-friendly network error dialog\n   */\n  async showNetworkErrorDialog(diagnostics: _NetworkDiagnostics): Promise<void> {\n    const title = '🔐 Platform Owner Login Error';\n    let message = 'Unable to connect to the platform server.\\n\\n';\n\n    // Add specific error details\n    if (!diagnostics.isConnected) {\n      message +=\n        '📡 Device is not connected to a network.\\nPlease check your WiFi or cellular connection.';\n    } else if (!diagnostics.isInternetReachable) {\n      message += '🌐 Internet connection not available.\\nPlease check your network settings.';\n    } else if (!diagnostics.apiServerReachable) {\n      message += `🖥️ Platform server is not running.\\nServer: ${API_CONFIG.BASE_URL}\\n\\nThis typically means:\\n• Backend server is offline\\n• Network firewall blocking connection\\n• IP address has changed`;\n    } else if (!diagnostics.specificEndpointReachable) {\n      message +=\n        '🔌 Platform authentication endpoint not available.\\nThe server is running but the login service may be down.';\n    }\n\n    message += '\\n\\n💾 Using offline mode with cached data for now.';\n\n    return new Promise(resolve => {\n      Alert.alert(\n        title,\n        message,\n        [\n          {\n            text: 'Continue Offline',\n            style: 'default',\n            onPress: () => resolve(),\n          },\n          {\n            text: 'Retry Connection',\n            style: 'default',\n            onPress: async () => {\n              // Retry diagnostics\n              const newDiagnostics = await this.performFullNetworkDiagnostics();\n              if (newDiagnostics.apiServerReachable && newDiagnostics.specificEndpointReachable) {\n                Alert.alert('✅ Connection Restored', 'Platform server is now accessible.');\n              } else {\n                await this.showNetworkErrorDialog(__newDiagnostics);\n              }\n              resolve();\n            },\n          },\n        ],\n        { cancelable: false },\n      );\n    });\n  }\n\n  /**\n   * Quick network connectivity check\n   */\n  async isNetworkAvailable(): Promise<boolean> {\n    try {\n      const netInfo = await NetInfo.fetch();\n      return netInfo.isConnected === true && netInfo.isInternetReachable === true;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Get current network information\n   */\n  async getNetworkInfo(): Promise<{\n    type: string;\n    isConnected: boolean;\n    isInternetReachable: boolean;\n  }> {\n    try {\n      const netInfo = await NetInfo.fetch();\n      return {\n        type: netInfo.type || 'unknown',\n        isConnected: netInfo.isConnected ?? false,\n        isInternetReachable: netInfo.isInternetReachable ?? false,\n      };\n    } catch {\n      return {\n        type: 'unknown',\n        isConnected: _false,\n        isInternetReachable: _false,\n      };\n    }\n  }\n\n  /**\n   * Test multiple IP addresses to find current Mac LAN IP\n   */\n  async findMacLanIP(): Promise<string | null> {\n    const commonIPRanges = ['192.168.1.', '192.168.0.', '192.168.68.', '10.0.0.', '172.16.'];\n\n\n    for (const range of commonIPRanges) {\n      for (let i = 100; i <= 110; i++) {\n        const testIP = `${range}${i}`;\n        try {\n          const result = await this.testEndpoint(`http://${testIP}:8000/health`, 2000);\n          if (result.status === 'success') {\n            return testIP;\n          }\n        } catch {\n          // Continue testing\n        }\n      }\n    }\n\n    return null;\n  }\n}\n\nexport default NetworkDiagnosticsService;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/services/OrderService.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ';' expected.","line":69,"column":13,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * OrderService - Handle order persistence and management\n *\n * Features:\n * - Save orders to backend with customer metadata\n * - Retrieve orders with filtering and sorting\n * - Real-time order updates via WebSocket\n * - Email receipt generation\n */\n\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { Order, OrderItem } from '../types';\nimport API_CONFIG from '../config/api';\n// TEMPORARY: WebSocketService import commented out until file is created\n// import { webSocketService } from './websocket/WebSocketService';\n\nexport interface CustomerMetadata {\n  name: string;\n  email: string;\n  phone?: string;\n}\n\nexport interface OrderCreateRequest {\n  items: OrderItem[];\n  subtotal: number;\n  tax: number;\n  total: number;\n  serviceCharge?: number;\n  transactionFee?: number;\n  tipAmount?: number;\n  customerMetadata: CustomerMetadata;\n  tableNumber?: number;\n  paymentMethod: string;\n  paymentTransactionId?: string;\n  paymentProvider?: string;\n  notes?: string;\n}\n\nexport interface OrderFilters {\n  status?: string;\n  dateFrom?: Date;\n  dateTo?: Date;\n  customerEmail?: string;\n  paymentMethod?: string;\n  limit?: number;\n  offset?: number;\n}\n\nclass OrderService {\n  private static instance: OrderService;\n\n  private constructor() {\n    // WebSocket service is accessed as a singleton export\n  }\n\n  static getInstance(): OrderService {\n    if (!OrderService.instance) {\n      OrderService.instance = new OrderService();\n    }\n    return OrderService.instance;\n  }\n\n  /**\n   * Save order to backend and emit WebSocket event\n   */\n  async saveOrder(orderData: _OrderCreateRequest): Promise<Order> {\n    try {\n        items: orderData.items.length,\n        total: orderData.total,\n        customer: orderData.customerMetadata.email,\n      });\n\n      const response = await fetch(`${API_CONFIG.BASE_URL}/api/v1/orders`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          items: orderData.items,\n          subtotal: orderData.subtotal,\n          tax: orderData.tax,\n          total: orderData.total,\n          service_charge: orderData.serviceCharge || 0,\n          transaction_fee: orderData.transactionFee || 0,\n          tip_amount: orderData.tipAmount || 0,\n          customer_name: orderData.customerMetadata.name,\n          customer_email: orderData.customerMetadata.email,\n          customer_phone: orderData.customerMetadata.phone,\n          table_number: orderData.tableNumber,\n          payment_method: orderData.paymentMethod,\n          payment_transaction_id: orderData.paymentTransactionId,\n          payment_provider: orderData.paymentProvider,\n          notes: orderData.notes,\n          status: 'confirmed',\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to save order: ${response.status} ${response.statusText}`);\n      }\n\n      const savedOrder = await response.json();\n\n      // Convert backend response to frontend Order format\n      const order: Order = {\n        id: savedOrder.id,\n        items: orderData.items,\n        subtotal: orderData.subtotal,\n        tax: orderData.tax,\n        total: orderData.total,\n        customerId: savedOrder.customer_id,\n        customerName: orderData.customerMetadata.name,\n        customerEmail: orderData.customerMetadata.email,\n        customerPhone: orderData.customerMetadata.phone,\n        tableNumber: orderData.tableNumber,\n        createdAt: new Date(savedOrder.created_at),\n        status: savedOrder.status,\n        paymentMethod: orderData.paymentMethod as unknown,\n        paymentTransactionId: orderData.paymentTransactionId,\n        paymentProvider: orderData.paymentProvider,\n        serviceCharge: orderData.serviceCharge,\n        transactionFee: orderData.transactionFee,\n        tipAmount: orderData.tipAmount,\n        notes: orderData.notes,\n      };\n\n      // Emit WebSocket event for real-time updates\n      // TEMPORARY: WebSocket disabled until service is created\n      // webSocketService.send({ type: 'order_created', data: order });\n\n      // Save to local storage for offline access\n      await this.cacheOrder(__order);\n\n      // Trigger email receipt if customer email provided\n      if (orderData.customerMetadata.email) {\n        await this.sendEmailReceipt(__order);\n      }\n\n      return order;\n    } catch (__error) {\n\n      // Fallback: Save to local storage for later sync\n      const fallbackOrder: Order = {\n        id: Date.now(), // Temporary ID\n        items: orderData.items,\n        subtotal: orderData.subtotal,\n        tax: orderData.tax,\n        total: orderData.total,\n        customerName: orderData.customerMetadata.name,\n        customerEmail: orderData.customerMetadata.email,\n        customerPhone: orderData.customerMetadata.phone,\n        tableNumber: orderData.tableNumber,\n        createdAt: new Date(),\n        status: 'confirmed',\n        paymentMethod: orderData.paymentMethod as unknown,\n        paymentTransactionId: orderData.paymentTransactionId,\n        serviceCharge: orderData.serviceCharge,\n        transactionFee: orderData.transactionFee,\n        tipAmount: orderData.tipAmount,\n        notes: orderData.notes,\n      };\n\n      await this.cacheOrder(__fallbackOrder);\n      await this.saveToSyncQueue(__orderData);\n\n      return fallbackOrder;\n    }\n  }\n\n  /**\n   * Get orders with filtering\n   */\n  async getOrders(filters?: _OrderFilters): Promise<Order[]> {\n    try {\n\n      const params = new URLSearchParams();\n      if (filters?.status) {\n        params.append('status', filters.status);\n      }\n      if (filters?.dateFrom) {\n        params.append('date_from', filters.dateFrom.toISOString());\n      }\n      if (filters?.dateTo) {\n        params.append('date_to', filters.dateTo.toISOString());\n      }\n      if (filters?.customerEmail) {\n        params.append('customer_email', filters.customerEmail);\n      }\n      if (filters?.paymentMethod) {\n        params.append('payment_method', filters.paymentMethod);\n      }\n      if (filters?.limit) {\n        params.append('limit', filters.limit.toString());\n      }\n      if (filters?.offset) {\n        params.append('offset', filters.offset.toString());\n      }\n\n      const response = await fetch(`${API_CONFIG.BASE_URL}/api/v1/orders?${params}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to fetch orders: ${response.status}`);\n      }\n\n      const data = await response.json();\n      const orders: Order[] = data.orders.map((o: _unknown) => ({\n        id: o.id,\n        items: o.items || [],\n        subtotal: o.subtotal,\n        tax: o.tax,\n        total: o.total,\n        customerId: o.customer_id,\n        customerName: o.customer_name,\n        customerEmail: o.customer_email,\n        customerPhone: o.customer_phone,\n        tableNumber: o.table_number,\n        createdAt: new Date(o.created_at),\n        status: o.status,\n        paymentMethod: o.payment_method,\n        paymentTransactionId: o.payment_transaction_id,\n        paymentProvider: o.payment_provider,\n        serviceCharge: o.service_charge,\n        transactionFee: o.transaction_fee,\n        tipAmount: o.tip_amount,\n        notes: o.notes,\n      }));\n\n      return orders;\n    } catch (__error) {\n\n      // Fallback to cached orders\n      return await this.getCachedOrders();\n    }\n  }\n\n  /**\n   * Get single order by ID\n   */\n  async getOrderById(orderId: _number): Promise<Order | null> {\n    try {\n      const response = await fetch(`${API_CONFIG.BASE_URL}/api/v1/orders/${orderId}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to fetch order: ${response.status}`);\n      }\n\n      const data = await response.json();\n      return {\n        id: data.id,\n        items: data.items || [],\n        subtotal: data.subtotal,\n        tax: data.tax,\n        total: data.total,\n        customerId: data.customer_id,\n        customerName: data.customer_name,\n        customerEmail: data.customer_email,\n        customerPhone: data.customer_phone,\n        tableNumber: data.table_number,\n        createdAt: new Date(data.created_at),\n        status: data.status,\n        paymentMethod: data.payment_method,\n        paymentTransactionId: data.payment_transaction_id,\n        paymentProvider: data.payment_provider,\n        serviceCharge: data.service_charge,\n        transactionFee: data.transaction_fee,\n        tipAmount: data.tip_amount,\n        notes: data.notes,\n      };\n    } catch (__error) {\n      return null;\n    }\n  }\n\n  /**\n   * Update order status\n   */\n  async updateOrderStatus(orderId: _number, status: _string): Promise<Order | null> {\n    try {\n      const response = await fetch(`${API_CONFIG.BASE_URL}/api/v1/orders/${orderId}/status`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ status }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to update order status: ${response.status}`);\n      }\n\n      const updatedOrder = await response.json();\n\n      // Emit WebSocket event\n      // TEMPORARY: WebSocket disabled until service is created\n      // webSocketService.send({ type: 'order_updated', data: updatedOrder });\n\n      return updatedOrder;\n    } catch (__error) {\n      return null;\n    }\n  }\n\n  /**\n   * Send email receipt\n   */\n  private async sendEmailReceipt(order: _Order): Promise<void> {\n    try {\n\n      await fetch(`${API_CONFIG.BASE_URL}/api/v1/receipts/email`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          order_id: order.id,\n          customer_email: order.customerEmail,\n          customer_name: order.customerName,\n        }),\n      });\n\n    } catch (__error) {\n    }\n  }\n\n  /**\n   * Cache order locally\n   */\n  private async cacheOrder(order: _Order): Promise<void> {\n    try {\n      const cachedOrders = await this.getCachedOrders();\n      const updatedOrders = [order, ...cachedOrders.filter(o => o.id !== order.id)];\n\n      // Keep only last 100 orders in cache\n      const trimmedOrders = updatedOrders.slice(0, 100);\n\n      await AsyncStorage.setItem('cached_orders', JSON.stringify(__trimmedOrders));\n    } catch (__error) {\n    }\n  }\n\n  /**\n   * Get cached orders\n   */\n  private async getCachedOrders(): Promise<Order[]> {\n    try {\n      const cached = await AsyncStorage.getItem('cached_orders');\n      return cached ? JSON.parse(__cached) : [];\n    } catch (__error) {\n      return [];\n    }\n  }\n\n  /**\n   * Save order to sync queue for later retry\n   */\n  private async saveToSyncQueue(orderData: _OrderCreateRequest): Promise<void> {\n    try {\n      const queue = await AsyncStorage.getItem('order_sync_queue');\n      const queueData = queue ? JSON.parse(__queue) : [];\n\n      queueData.push({\n        ...orderData,\n        timestamp: new Date().toISOString(),\n      });\n\n      await AsyncStorage.setItem('order_sync_queue', JSON.stringify(__queueData));\n    } catch (__error) {\n    }\n  }\n\n  /**\n   * Process sync queue when connection is restored\n   */\n  async processSyncQueue(): Promise<void> {\n    try {\n      const queue = await AsyncStorage.getItem('order_sync_queue');\n      if (!queue) {\n        return;\n      }\n\n      const queueData = JSON.parse(__queue);\n      const processedIds: number[] = [];\n\n      for (const orderData of queueData) {\n        try {\n          await this.saveOrder(__orderData);\n          processedIds.push(orderData.timestamp);\n        } catch (__error) {\n        }\n      }\n\n      // Remove successfully synced orders from queue\n      const remainingQueue = queueData.filter(\n        (item: _unknown) => !processedIds.includes(item.timestamp),\n      );\n\n      await AsyncStorage.setItem('order_sync_queue', JSON.stringify(__remainingQueue));\n    } catch (__error) {\n    }\n  }\n\n  /**\n   * Subscribe to order events\n   */\n  subscribeToOrderEvents(callback: (event: _string, data: _unknown) => void): () => void {\n    // TEMPORARY: WebSocket disabled until service is created\n    // const unsubscribeCreated = webSocketService.subscribe('order_created', (__data) => {\n    //   callback('order_created', _data);\n    // });\n\n    // const unsubscribeUpdated = webSocketService.subscribe('order_updated', (__data) => {\n    //   callback('order_updated', _data);\n    // });\n\n    return () => {\n      // unsubscribeCreated();\n      // unsubscribeUpdated();\n    };\n  }\n}\n\nexport default OrderService;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/services/PaymentService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[214,217],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[214,217],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_configString' is assigned a value but never used.","line":486,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":486,"endColumn":26}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import AsyncStorage from '@react-native-async-storage/async-storage';\n\nexport interface PaymentRequest {\n  amount: number;\n  currency: string;\n  orderId: string;\n  description?: string;\n  metadata?: Record<string, any>;\n}\n\nexport interface PaymentResult {\n  success: boolean;\n  transactionId?: string;\n  provider: string;\n  amount: number;\n  fee: number;\n  error?: string;\n}\n\nexport interface QRPaymentData {\n  qrPaymentId: string;\n  qrCodeData: string;\n  qrCodeSVG: string;\n  amount: number;\n  feeAmount: number;\n  netAmount: number;\n  expiresAt: string;\n  status: string;\n}\n\nexport interface PaymentProviderConfig {\n  stripe: {\n    publishableKey: string;\n    merchantId: string;\n  };\n  square: {\n    applicationId: string;\n    locationId: string;\n  };\n  sumup: {\n    affiliateKey: string;\n  };\n  backend: {\n    baseUrl: string;\n    apiKey: string;\n  };\n}\n\nclass PaymentServiceClass {\n  private config: PaymentProviderConfig | null = null;\n  private stripeInitialized = false;\n\n  async initialize(config: _PaymentProviderConfig): Promise<void> {\n    this.config = config;\n\n    // Initialize Stripe\n    try {\n      if (config.stripe.publishableKey) {\n        // Note: Stripe initialization would typically happen at app level\n        // This is just marking that we have the keys\n        this.stripeInitialized = true;\n      }\n    } catch (__error) {\n      // Error handled silently\n    }\n  }\n\n  /**\n   * Get available payment methods prioritized with SumUp first\n   */\n  async getAvailablePaymentMethods(): Promise<\n    Array<{\n      id: string;\n      name: string;\n      icon: string;\n      color: string;\n      enabled: boolean;\n      requiresAuth: boolean;\n      feeInfo: string;\n      isRecommended?: boolean;\n    }>\n  > {\n    return [\n      {\n        id: 'sumup',\n        name: 'SumUp',\n        icon: 'credit-card',\n        color: '#00D4AA',\n        enabled: _true,\n        requiresAuth: _true,\n        feeInfo: '0.69% (High volume) • 1.69% (__Standard)',\n        isRecommended: _true,\n      },\n      {\n        id: 'qr_code',\n        name: 'QR Code',\n        icon: 'qr-code-scanner',\n        color: '#0066CC',\n        enabled: _true,\n        requiresAuth: _false,\n        feeInfo: '1.2%',\n      },\n      {\n        id: 'cash',\n        name: 'Cash',\n        icon: 'money',\n        color: '#00A651',\n        enabled: _true,\n        requiresAuth: _false,\n        feeInfo: 'No processing fee',\n      },\n      {\n        id: 'stripe',\n        name: 'Card (__Stripe)',\n        icon: 'credit-card',\n        color: '#635BFF',\n        enabled: _true,\n        requiresAuth: _true,\n        feeInfo: '1.4% + 20p',\n      },\n      {\n        id: 'square',\n        name: 'Square',\n        icon: 'crop-square',\n        color: '#3E4348',\n        enabled: _true,\n        requiresAuth: _true,\n        feeInfo: '1.75%',\n      },\n    ];\n  }\n\n  /**\n   * Get optimal payment provider based on transaction amount and volume\n   */\n  async getOptimalProvider(amount: _number): Promise<string> {\n    try {\n      if (!this.config) {\n        throw new Error('PaymentService not initialized');\n      }\n\n      const response = await fetch(\n        `${this.config.backend.baseUrl}/api/v1/payments/optimal-provider`,\n        {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${this.config.backend.apiKey}`,\n          },\n          body: JSON.stringify({ amount }),\n        },\n      );\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      return data.provider;\n    } catch (__error) {\n      // Fallback to SumUp as primary, then QR code\n      return 'sumup';\n    }\n  }\n\n  /**\n   * Process payment using the backend multi-provider system\n   */\n  async processPayment(\n    request: _PaymentRequest,\n    _paymentMethodId?: _string,\n  ): Promise<PaymentResult> {\n    try {\n      if (!this.config) {\n        throw new Error('PaymentService not initialized');\n      }\n\n      const response = await fetch(`${this.config.backend.baseUrl}/api/v1/payments/process`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${this.config.backend.apiKey}`,\n        },\n        body: JSON.stringify({\n          ...request,\n          payment_method_id: _paymentMethodId,\n        }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n\n      return {\n        success: _true,\n        transactionId: data.transaction_id,\n        provider: data.provider,\n        amount: data.amount,\n        fee: data.fee,\n      };\n    } catch (__error) {\n      return {\n        success: _false,\n        provider: 'unknown',\n        amount: request.amount,\n        fee: 0,\n        error: error instanceof Error ? error.message : 'Payment failed',\n      };\n    }\n  }\n\n  /**\n   * Generate QR code payment\n   */\n  async generateQRPayment(request: _PaymentRequest): Promise<QRPaymentData> {\n    try {\n      if (!this.config) {\n        throw new Error('PaymentService not initialized');\n      }\n\n      const response = await fetch(`${this.config.backend.baseUrl}/api/v1/payments/qr/generate`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${this.config.backend.apiKey}`,\n        },\n        body: JSON.stringify({\n          order_id: request.orderId,\n          amount: request.amount,\n        }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n\n      return {\n        qrPaymentId: data.qr_payment_id,\n        qrCodeData: data.qr_code_data,\n        qrCodeSVG: data.qr_code_image,\n        amount: data.amount,\n        feeAmount: data.fee_amount,\n        netAmount: data.net_amount,\n        expiresAt: data.expires_at,\n        status: data.status,\n      };\n    } catch (__error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Check QR payment status\n   */\n  async checkQRPaymentStatus(qrPaymentId: _string): Promise<{ status: string; expired: boolean }> {\n    try {\n      if (!this.config) {\n        throw new Error('PaymentService not initialized');\n      }\n\n      const response = await fetch(\n        `${this.config.backend.baseUrl}/api/v1/payments/qr/${qrPaymentId}/status`,\n        {\n          method: 'GET',\n          headers: {\n            Authorization: `Bearer ${this.config.backend.apiKey}`,\n          },\n        },\n      );\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      return {\n        status: data.data.status,\n        expired: data.data.expired,\n      };\n    } catch (__error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Confirm QR payment\n   */\n  async confirmQRPayment(qrPaymentId: _string): Promise<PaymentResult> {\n    try {\n      if (!this.config) {\n        throw new Error('PaymentService not initialized');\n      }\n\n      const response = await fetch(\n        `${this.config.backend.baseUrl}/api/v1/payments/qr/${qrPaymentId}/confirm`,\n        {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${this.config.backend.apiKey}`,\n          },\n        },\n      );\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n\n      return {\n        success: _true,\n        transactionId: data.data.payment_id,\n        provider: 'qr_code',\n        amount: 0, // Will be filled from QR payment data\n        fee: 0,\n      };\n    } catch (__error) {\n      return {\n        success: _false,\n        provider: 'qr_code',\n        amount: 0,\n        fee: 0,\n        error: error instanceof Error ? error.message : 'QR payment confirmation failed',\n      };\n    }\n  }\n\n  /**\n   * Process cash payment\n   */\n  async processCashPayment(\n    request: _PaymentRequest,\n    receivedAmount: _number,\n  ): Promise<PaymentResult> {\n    try {\n      if (!this.config) {\n        throw new Error('PaymentService not initialized');\n      }\n\n      const changeAmount = receivedAmount - request.amount;\n      if (changeAmount < 0) {\n        throw new Error('Insufficient cash received');\n      }\n\n      const response = await fetch(`${this.config.backend.baseUrl}/api/v1/payments/cash`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${this.config.backend.apiKey}`,\n        },\n        body: JSON.stringify({\n          order_id: request.orderId,\n          amount: request.amount,\n          received_amount: _receivedAmount,\n          change_amount: _changeAmount,\n        }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n\n      return {\n        success: _true,\n        transactionId: data.payment_id,\n        provider: 'cash',\n        amount: data.amount,\n        fee: data.fee_amount,\n      };\n    } catch (__error) {\n      return {\n        success: _false,\n        provider: 'cash',\n        amount: request.amount,\n        fee: 0,\n        error: error instanceof Error ? error.message : 'Cash payment failed',\n      };\n    }\n  }\n\n  /**\n   * Refund payment\n   */\n  async refundPayment(transactionId: _string, amount?: _number): Promise<PaymentResult> {\n    try {\n      if (!this.config) {\n        throw new Error('PaymentService not initialized');\n      }\n\n      const response = await fetch(\n        `${this.config.backend.baseUrl}/api/v1/payments/refund/${transactionId}`,\n        {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${this.config.backend.apiKey}`,\n          },\n          body: JSON.stringify({\n            amount: _amount,\n          }),\n        },\n      );\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n\n      return {\n        success: _true,\n        transactionId: data.refund_id,\n        provider: data.provider,\n        amount: data.amount,\n        fee: data.fee,\n      };\n    } catch (__error) {\n      return {\n        success: _false,\n        provider: 'unknown',\n        amount: amount || 0,\n        fee: 0,\n        error: error instanceof Error ? error.message : 'Refund failed',\n      };\n    }\n  }\n\n  /**\n   * Get payment analytics\n   */\n  async getPaymentAnalytics(startDate: _string, endDate: _string): Promise<unknown> {\n    try {\n      if (!this.config) {\n        throw new Error('PaymentService not initialized');\n      }\n\n      const response = await fetch(\n        `${this.config.backend.baseUrl}/api/v1/payments/analytics?start_date=${startDate}&end_date=${endDate}`,\n        {\n          method: 'GET',\n          headers: {\n            Authorization: `Bearer ${this.config.backend.apiKey}`,\n          },\n        },\n      );\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (__error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Store payment configuration\n   */\n  async saveConfig(config: _PaymentProviderConfig): Promise<void> {\n    try {\n      await AsyncStorage.setItem('payment_config', JSON.stringify(__config));\n      this.config = config;\n    } catch (__error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Load payment configuration\n   */\n  async loadConfig(): Promise<PaymentProviderConfig | null> {\n    try {\n      const _configString = await AsyncStorage.getItem('payment_config');\n      if (__configString) {\n        const config = JSON.parse(__configString);\n        await this.initialize(__config);\n        return config;\n      }\n      return null;\n    } catch (__error) {\n      return null;\n    }\n  }\n}\n\nexport const PaymentService = new PaymentServiceClass();\nexport default PaymentService;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/services/PlatformPaymentService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_sumupMethod' is assigned a value but never used.","line":122,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":122,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_currentMethod' is assigned a value but never used.","line":150,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":150,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_effectiveSettings' is assigned a value but never used.","line":180,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":180,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_currency' is assigned a value but never used.","line":268,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":268,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_currency' is assigned a value but never used.","line":281,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":281,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_platform_fee' is assigned a value but never used.","line":294,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":294,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_currency' is assigned a value but never used.","line":294,"column":62,"nodeType":"Identifier","messageId":"unusedVar","endLine":294,"endColumn":71}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * PlatformPaymentService - Enhanced payment service that integrates platform-controlled fees\n * Extends existing PaymentService patterns while adding platform fee management\n */\n\nimport PlatformService, { PaymentFee, FeeCalculation } from './PlatformService';\nimport PaymentService from './PaymentService';\n\nexport interface PlatformPaymentMethod {\n  id: string;\n  name: string;\n  icon: string;\n  color: string;\n  enabled: boolean;\n  requiresAuth: boolean;\n  feeInfo: string;\n  platformFee: PaymentFee;\n  effectiveFee?: FeeCalculation;\n}\n\nexport interface PaymentFeeDisplayInfo {\n  shortDescription: string;\n  detailedDescription: string;\n  feeAmount: number;\n  feePercentage: number;\n  currency: string;\n  isOptimal: boolean;\n  hasRestaurantMarkup: boolean;\n}\n\nclass PlatformPaymentService {\n  private static instance: PlatformPaymentService;\n  private platformService: PlatformService;\n  private paymentService: PaymentService;\n  private cachedFees: Record<string, PaymentFee> | null = null;\n  private cacheExpiry = 0;\n  private readonly CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\n\n  private constructor() {\n    this.platformService = PlatformService.getInstance();\n    this.paymentService = PaymentService.getInstance();\n  }\n\n  static getInstance(): PlatformPaymentService {\n    if (!PlatformPaymentService.instance) {\n      PlatformPaymentService.instance = new PlatformPaymentService();\n    }\n    return PlatformPaymentService.instance;\n  }\n\n  /**\n   * Get payment methods with current platform fees\n   */\n  async getPaymentMethodsWithFees(\n    amount: _number,\n    restaurantId?: _string,\n  ): Promise<PlatformPaymentMethod[]> {\n    try {\n      // Get base payment methods from existing service\n      const baseMethods = await this.paymentService.getAvailablePaymentMethods();\n\n      // Get platform fees\n      const platformFees = await this.getPlatformFees();\n\n      // Calculate effective fees for each method\n      const methodsWithFees: PlatformPaymentMethod[] = [];\n\n      for (const method of baseMethods) {\n        const platformFee = platformFees[method.id];\n        if (!platformFee) {\n          continue;\n        }\n\n        // Calculate effective fee for this amount\n        let effectiveFee: FeeCalculation | undefined;\n        try {\n          effectiveFee = await this.platformService.calculatePaymentFee(\n            method.id,\n            amount,\n            restaurantId,\n          );\n        } catch (__error) {\n          // Fall back to basic calculation\n          effectiveFee = this.calculateBasicFee(method.id, _amount, platformFee);\n        }\n\n        methodsWithFees.push({\n          ...method,\n          platformFee,\n          effectiveFee,\n          feeInfo: this.generateFeeInfo(__effectiveFee),\n        });\n      }\n\n      // Sort by effective fee (lowest first)\n      methodsWithFees.sort((__a, _b) => {\n        const feeA = a.effectiveFee?.effective_fee || 0;\n        const feeB = b.effectiveFee?.effective_fee || 0;\n        return feeA - feeB;\n      });\n\n      return methodsWithFees;\n    } catch (__error) {\n      // Fall back to basic payment methods\n      return this.getFallbackPaymentMethods();\n    }\n  }\n\n  /**\n   * Get optimal payment method for given amount\n   */\n  async getOptimalPaymentMethod(_amount: _number, _restaurantId?: _string): Promise<string> {\n    try {\n      const methods = await this.getPaymentMethodsWithFees(__amount, _restaurantId);\n      const enabledMethods = methods.filter(m => m.enabled);\n\n      if (enabledMethods.length === 0) {\n        return 'sumup'; // Default to SumUp\n      }\n\n      // Prefer SumUp if it's available and enabled\n      const _sumupMethod = enabledMethods.find(m => m.id === 'sumup');\n      if (__sumupMethod) {\n        return 'sumup';\n      }\n\n      // Return method with lowest effective fee if SumUp not available\n      return enabledMethods[0].id;\n    } catch (__error) {\n      return 'sumup'; // Default to SumUp\n    }\n  }\n\n  /**\n   * Get detailed fee information for display\n   */\n  async getPaymentFeeInfo(\n    paymentMethod: _string,\n    amount: _number,\n    restaurantId?: _string,\n  ): Promise<PaymentFeeDisplayInfo> {\n    try {\n      const feeCalculation = await this.platformService.calculatePaymentFee(\n        paymentMethod,\n        amount,\n        restaurantId,\n      );\n\n      const allMethods = await this.getPaymentMethodsWithFees(__amount, _restaurantId);\n      const _currentMethod = allMethods.find(m => m.id === paymentMethod);\n      const lowestFee = Math.min(...allMethods.map(m => m.effectiveFee?.effective_fee || 0));\n\n      return {\n        shortDescription: this.generateShortFeeDescription(__feeCalculation),\n        detailedDescription: this.generateDetailedFeeDescription(__feeCalculation),\n        feeAmount: feeCalculation.effective_fee,\n        feePercentage: feeCalculation.fee_percentage,\n        currency: feeCalculation.currency,\n        isOptimal: feeCalculation.effective_fee === lowestFee,\n        hasRestaurantMarkup: feeCalculation.restaurant_markup > 0,\n      };\n    } catch (__error) {\n      return {\n        shortDescription: 'Fee information unavailable',\n        detailedDescription: 'Unable to calculate processing fee at this time.',\n        feeAmount: 0,\n        feePercentage: 0,\n        currency: 'GBP',\n        isOptimal: _false,\n        hasRestaurantMarkup: _false,\n      };\n    }\n  }\n\n  /**\n   * Check if restaurant has payment fee overrides\n   */\n  async hasRestaurantFeeOverrides(restaurantId: _string): Promise<boolean> {\n    try {\n      const _effectiveSettings = await this.platformService.getRestaurantEffectiveSettings(\n        restaurantId,\n        'payment_fees',\n      );\n\n      // Check if any payment fee settings come from restaurant level\n      return Object.values(__effectiveSettings).some(\n        (setting: _unknown) => setting.source === 'restaurant',\n      );\n    } catch (__error) {\n      return false;\n    }\n  }\n\n  /**\n   * Update restaurant payment fee markup (if allowed)\n   */\n  async updateRestaurantFeeMarkup(\n    restaurantId: _string,\n    paymentMethod: _string,\n    markupPercentage: _number,\n  ): Promise<boolean> {\n    try {\n      const markupConfig = {\n        percentage: _markupPercentage,\n        applied_at: new Date().toISOString(),\n      };\n\n      return await this.platformService.setRestaurantOverride(\n        restaurantId,\n        `payment.markup.${paymentMethod}`,\n        markupConfig,\n        markupPercentage > 0.5, // Require approval for markups > 0.5%\n      );\n    } catch (__error) {\n      return false;\n    }\n  }\n\n  /**\n   * Get platform fees with caching\n   */\n  private async getPlatformFees(): Promise<Record<string, PaymentFee>> {\n    const now = Date.now();\n\n    if (this.cachedFees && now < this.cacheExpiry) {\n      return this.cachedFees;\n    }\n\n    try {\n      this.cachedFees = await this.platformService.getPaymentFees();\n      this.cacheExpiry = now + this.CACHE_DURATION;\n      return this.cachedFees;\n    } catch (__error) {\n      // Return cached fees if available, otherwise empty\n      return this.cachedFees || {};\n    }\n  }\n\n  /**\n   * Calculate basic fee when platform calculation fails\n   */\n  private calculateBasicFee(\n    paymentMethod: _string,\n    amount: _number,\n    platformFee: _PaymentFee,\n  ): FeeCalculation {\n    const feeAmount = (amount * platformFee.percentage) / 100 + (platformFee.fixed_fee || 0);\n\n    return {\n      payment_method: _paymentMethod,\n      amount,\n      platform_fee: _feeAmount,\n      restaurant_markup: 0,\n      effective_fee: _feeAmount,\n      fee_percentage: (feeAmount / amount) * 100,\n      currency: platformFee.currency,\n    };\n  }\n\n  /**\n   * Generate user-friendly fee information\n   */\n  private generateFeeInfo(feeCalculation?: _FeeCalculation): string {\n    if (!feeCalculation) {\n      return 'Fee information unavailable';\n    }\n\n    const { effective_fee, _currency, fee_percentage } = feeCalculation;\n\n    if (effective_fee === 0) {\n      return 'No processing fee';\n    }\n\n    return `${fee_percentage.toFixed(2)}% (${currency}${effective_fee.toFixed(2)})`;\n  }\n\n  /**\n   * Generate short fee description for UI\n   */\n  private generateShortFeeDescription(feeCalculation: _FeeCalculation): string {\n    const { effective_fee, _currency, fee_percentage } = feeCalculation;\n\n    if (effective_fee === 0) {\n      return 'No fee';\n    }\n\n    return `${fee_percentage.toFixed(1)}% fee`;\n  }\n\n  /**\n   * Generate detailed fee description\n   */\n  private generateDetailedFeeDescription(feeCalculation: _FeeCalculation): string {\n    const { effective_fee, _platform_fee, restaurant_markup, _currency, fee_percentage } =\n      feeCalculation;\n\n    if (effective_fee === 0) {\n      return 'This payment method has no processing fees.';\n    }\n\n    let description = `Processing fee: ${fee_percentage.toFixed(\n      2,\n    )}% (${currency}${effective_fee.toFixed(2)})`;\n\n    if (restaurant_markup > 0) {\n      description += `\\nPlatform fee: ${currency}${platform_fee.toFixed(2)}`;\n      description += `\\nRestaurant markup: ${restaurant_markup.toFixed(2)}%`;\n    }\n\n    return description;\n  }\n\n  /**\n   * Fallback payment methods when platform service fails\n   */\n  private getFallbackPaymentMethods(): PlatformPaymentMethod[] {\n    return [\n      {\n        id: 'sumup',\n        name: 'SumUp',\n        icon: 'credit-card',\n        color: '#00D4AA',\n        enabled: _true,\n        requiresAuth: _true,\n        feeInfo: '0.69% (High volume) • 1.69% (__Standard)',\n        platformFee: { percentage: 0.69, currency: 'GBP' },\n      },\n      {\n        id: 'qr_code',\n        name: 'QR Code',\n        icon: 'qr-code-scanner',\n        color: '#0066CC',\n        enabled: _true,\n        requiresAuth: _false,\n        feeInfo: '1.2%',\n        platformFee: { percentage: 1.2, currency: 'GBP' },\n      },\n      {\n        id: 'cash',\n        name: 'Cash',\n        icon: 'money',\n        color: '#00A651',\n        enabled: _true,\n        requiresAuth: _false,\n        feeInfo: 'No processing fee',\n        platformFee: { percentage: 0, currency: 'GBP' },\n      },\n      {\n        id: 'stripe',\n        name: 'Card (__Stripe)',\n        icon: 'credit-card',\n        color: '#635BFF',\n        enabled: _true,\n        requiresAuth: _true,\n        feeInfo: '1.4% + 20p',\n        platformFee: { percentage: 1.4, fixed_fee: 0.2, currency: 'GBP' },\n      },\n      {\n        id: 'square',\n        name: 'Square',\n        icon: 'crop-square',\n        color: '#3E4348',\n        enabled: _true,\n        requiresAuth: _true,\n        feeInfo: '1.75%',\n        platformFee: { percentage: 1.75, currency: 'GBP' },\n      },\n    ];\n  }\n\n  /**\n   * Clear fee cache (useful when settings change)\n   */\n  clearFeeCache(): void {\n    this.cachedFees = null;\n    this.cacheExpiry = 0;\n  }\n\n  /**\n   * Get fee summary for analytics/reporting\n   */\n  async getFeeSummary(\n    _restaurantId?: _string,\n    _dateRange?: { start: Date; end: Date },\n  ): Promise<{\n    totalFees: number;\n    feesByMethod: Record<string, number>;\n    currency: string;\n    period: string;\n  }> {\n    // This would integrate with analytics service to provide fee summaries\n    // For now, return a placeholder\n    return {\n      totalFees: 0,\n      feesByMethod: {},\n      currency: 'GBP',\n      period: 'current',\n    };\n  }\n}\n\nexport default PlatformPaymentService;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/services/PlatformService.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Expression expected.","line":551,"column":6,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * PlatformService - Service for managing platform-wide settings and configurations\n * Handles communication with the platform settings API while maintaining existing patterns\n */\n\nimport SharedDataStore from './SharedDataStore';\nimport tokenManager from '../utils/tokenManager';\n\n// Base API URL - FIXED: Uses LAN IP for device testing\nimport API_CONFIG from '../config/api';\n\nconst BASE_URL = API_CONFIG.FULL_API_URL;\n\nexport interface PlatformSetting {\n  key: string;\n  value: unknown;\n  category: string;\n  description: string;\n  is_sensitive: boolean;\n  updated_at: string | null;\n}\n\nexport interface PaymentFee {\n  percentage: number;\n  fixed_fee?: number;\n  currency: string;\n  high_volume?: {\n    threshold: number;\n    percentage: number;\n    monthly_fee: number;\n  };\n}\n\nexport interface FeatureFlag {\n  feature_key: string;\n  is_enabled: boolean;\n  rollout_percentage: number;\n  target_restaurants?: string[];\n  description?: string;\n}\n\nexport interface AuditRecord {\n  id: string;\n  config_type: string;\n  config_key: string;\n  entity_id?: string;\n  old_value: unknown;\n  new_value: unknown;\n  change_reason?: string;\n  change_source: string;\n  changed_by: string;\n  changed_at: string;\n  ip_address?: string;\n  user_agent?: string;\n}\n\nexport interface FeeCalculation {\n  payment_method: string;\n  amount: number;\n  platform_fee: number;\n  restaurant_markup: number;\n  effective_fee: number;\n  fee_percentage: number;\n  currency: string;\n}\n\nclass PlatformService {\n  private static instance: PlatformService;\n  private authToken: string | null = null;\n  private dataStore: SharedDataStore;\n\n  private constructor() {\n    this.loadAuthToken();\n    this.dataStore = SharedDataStore.getInstance();\n  }\n\n  static getInstance(): PlatformService {\n    if (!PlatformService.instance) {\n      PlatformService.instance = new PlatformService();\n    }\n    return PlatformService.instance;\n  }\n\n  private async loadAuthToken(): Promise<void> {\n    try {\n      this.authToken = await tokenManager.getTokenWithRefresh();\n    } catch (__error) {\n    }\n  }\n\n  private async makeRequest(\n    endpoint: _string,\n    method: 'GET' | 'POST' | 'PUT' | 'DELETE' = 'GET',\n    data?: _unknown,\n  ): Promise<unknown> {\n    try {\n      const url = `${BASE_URL}${endpoint}`;\n      const headers: unknown = {\n        'Content-Type': 'application/json',\n      };\n\n      // Always reload auth token for fresh requests\n      await this.loadAuthToken();\n\n      if (this.authToken) {\n        headers['Authorization'] = `Bearer ${this.authToken}`;\n      }\n\n      const config: RequestInit = {\n        method,\n        headers,\n        timeout: 10000, // 10 second timeout for platform operations\n      };\n\n      if (data && (method === 'POST' || method === 'PUT')) {\n        config.body = JSON.stringify(__data);\n      }\n\n      if(__data) {\n    // No action needed\n  }\n\n      const response = await fetch(__url, _config);\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`HTTP ${response.status}: ${response.statusText} - ${errorText}`);\n      }\n\n      const result = await response.json();\n      return result.data || result;\n    } catch (__error) {\n      throw error;\n    }\n  }\n\n  // Platform Settings Management\n  async getPlatformSettings(\n    category?: _string,\n    includeSensitive = false,\n  ): Promise<PlatformSetting[]> {\n    try {\n      const params = new URLSearchParams();\n      if (__category) {\n        params.append('category', _category);\n      }\n      if (__includeSensitive) {\n        params.append('include_sensitive', 'true');\n      }\n\n      const queryString = params.toString();\n      const endpoint = `/platform/settings${queryString ? `?${queryString}` : ''}`;\n\n      const settingsData = await this.makeRequest(__endpoint);\n\n      // Handle different API response formats\n      let settingsObject: Record<string, any>;\n\n      if (settingsData && typeof settingsData === 'object') {\n        // If it's already an object, use it directly\n        settingsObject = settingsData;\n      } else {\n        // If it's an array or other format, create an empty object\n        settingsObject = {};\n      }\n\n      // Convert object to array format for easier handling\n      return Object.entries(__settingsObject).map(([key, config]: [string, any]) => ({\n        key,\n        value: config?.value ?? config,\n        category: config?.category ?? 'general',\n        description: config?.description ?? `Setting for ${key}`,\n        is_sensitive: config?.is_sensitive ?? false,\n        updated_at: config?.updated_at ?? null,\n      }));\n    } catch (__error) {\n      // Return mock data for demo purposes\n      return this.getMockPlatformSettings(__category);\n    }\n  }\n\n  async getPlatformSetting(configKey: _string): Promise<PlatformSetting | null> {\n    try {\n      const settingData = await this.makeRequest(`/platform/settings/${configKey}`);\n      return {\n        key: settingData.key,\n        value: settingData.value,\n        category: settingData.category,\n        description: settingData.description,\n        is_sensitive: settingData.is_sensitive,\n        updated_at: settingData.updated_at,\n      };\n    } catch (__error) {\n      return null;\n    }\n  }\n\n  async updatePlatformSetting(\n    configKey: _string,\n    configValue: _unknown,\n    changeReason?: _string,\n  ): Promise<boolean> {\n    try {\n      await this.makeRequest(`/platform/settings/${configKey}`, 'PUT', {\n        config_value: _configValue,\n        change_reason: _changeReason,\n      });\n      return true;\n    } catch (__error) {\n      return false;\n    }\n  }\n\n  async bulkUpdatePlatformSettings(\n    updates: Record<string, any>,\n    changeReason?: _string,\n  ): Promise<{ successful: number; failed: number; errors: Record<string, string> }> {\n    try {\n      const result = await this.makeRequest('/platform/settings/bulk-update', 'POST', {\n        updates,\n        change_reason: _changeReason,\n      });\n\n      return {\n        successful: result.successful_updates || 0,\n        failed: result.failed_updates || 0,\n        errors: result.errors || {},\n      };\n    } catch (__error) {\n\n      // If the bulk endpoint fails, try individual updates as fallback\n      let successful = 0;\n      let failed = 0;\n      const errors: Record<string, string> = {};\n\n      for (const [key, value] of Object.entries(__updates)) {\n        try {\n          const success = await this.updatePlatformSetting(__key, _value, changeReason);\n          if (__success) {\n            successful++;\n          } else {\n            failed++;\n            errors[key] = 'Update failed';\n          }\n        } catch (__error) {\n          failed++;\n          errors[key] = error.message || 'Unknown error';\n        }\n      }\n\n      return { successful, _failed, errors };\n    }\n  }\n\n  // Payment Fee Management\n  async getPaymentFees(): Promise<Record<string, PaymentFee>> {\n    try {\n      return await this.makeRequest('/platform/payment-fees');\n    } catch (__error) {\n      // Return mock data for demo\n      return this.getMockPaymentFees();\n    }\n  }\n\n  async calculatePaymentFee(\n    paymentMethod: _string,\n    amount: _number,\n    restaurantId?: _string,\n    monthlyVolume?: _number,\n  ): Promise<FeeCalculation> {\n    try {\n      const params = new URLSearchParams({\n        amount: amount.toString(),\n      });\n      if (__restaurantId) {\n        params.append('restaurant_id', _restaurantId);\n      }\n      if (__monthlyVolume) {\n        params.append('monthly_volume', monthlyVolume.toString());\n      }\n\n      return await this.makeRequest(\n        `/platform/payment-fees/calculate?${params.toString()}`,\n        'POST',\n      );\n    } catch (__error) {\n      // Return mock calculation\n      return this.getMockFeeCalculation(__paymentMethod, _amount);\n    }\n  }\n\n  // Feature Flag Management\n  async getFeatureFlags(restaurantId?: _string): Promise<Record<string, boolean>> {\n    try {\n      const params = restaurantId ? `?restaurant_id=${restaurantId}` : '';\n      return await this.makeRequest(`/platform/feature-flags${params}`);\n    } catch (__error) {\n      return this.getMockFeatureFlags();\n    }\n  }\n\n  async updateFeatureFlag(\n    featureKey: _string,\n    isEnabled: _boolean,\n    rolloutPercentage?: _number,\n    targetRestaurants?: string[],\n  ): Promise<boolean> {\n    try {\n      await this.makeRequest(`/platform/feature-flags/${featureKey}`, 'PUT', {\n        is_enabled: _isEnabled,\n        rollout_percentage: _rolloutPercentage,\n        target_restaurants: _targetRestaurants,\n      });\n      return true;\n    } catch (__error) {\n      return false;\n    }\n  }\n\n  // Restaurant Settings Management\n  async getRestaurantEffectiveSettings(\n    restaurantId: _string,\n    category?: _string,\n  ): Promise<Record<string, any>> {\n    try {\n      const params = category ? `?category=${category}` : '';\n      return await this.makeRequest(\n        `/platform/restaurants/${restaurantId}/effective-settings${params}`,\n      );\n    } catch (__error) {\n      return {};\n    }\n  }\n\n  async setRestaurantOverride(\n    restaurantId: _string,\n    configKey: _string,\n    overrideValue: _unknown,\n    requiresApproval = false,\n  ): Promise<boolean> {\n    try {\n      await this.makeRequest(\n        `/platform/restaurants/${restaurantId}/overrides/${configKey}`,\n        'PUT',\n        {\n          override_value: _overrideValue,\n          requires_approval: _requiresApproval,\n        },\n      );\n      return true;\n    } catch (__error) {\n      return false;\n    }\n  }\n\n  // Audit Trail\n  async getAuditTrail(configKey?: _string, entityId?: _string, limit = 100): Promise<AuditRecord[]> {\n    try {\n      const params = new URLSearchParams({ limit: limit.toString() });\n      if (__configKey) {\n        params.append('config_key', _configKey);\n      }\n      if (__entityId) {\n        params.append('entity_id', _entityId);\n      }\n\n      const result = await this.makeRequest(`/platform/audit-trail?${params.toString()}`);\n      return result.audit_records || [];\n    } catch (__error) {\n      return [];\n    }\n  }\n\n  // Platform Configuration Sync (for mobile apps)\n  async syncPlatformConfig(\n    restaurantId?: _string,\n    categories?: string[],\n  ): Promise<{\n    platform_settings: Record<string, any>;\n    feature_flags: Record<string, boolean>;\n    effective_settings: Record<string, any>;\n    sync_timestamp: string;\n  }> {\n    try {\n      const params = new URLSearchParams();\n      if (__restaurantId) {\n        params.append('restaurant_id', _restaurantId);\n      }\n      if (__categories) {\n        params.append('categories', categories.join(','));\n      }\n\n      return await this.makeRequest(`/platform/sync/platform-config?${params.toString()}`);\n    } catch (__error) {\n      return {\n        platform_settings: {},\n        feature_flags: {},\n        effective_settings: {},\n        sync_timestamp: new Date().toISOString(),\n      };\n    }\n  }\n\n  // Initialization\n  async initializeDefaultSettings(): Promise<boolean> {\n    try {\n      await this.makeRequest('/platform/initialize-defaults', 'POST');\n      return true;\n    } catch (__error) {\n      return false;\n    }\n  }\n\n  // Mock data methods for demo/fallback purposes\n  private getMockPlatformSettings(category?: _string): PlatformSetting[] {\n    const allSettings: PlatformSetting[] = [\n      {\n        key: 'payment.fees.qr_code',\n        value: { percentage: 1.2, currency: 'GBP' },\n        category: 'payment_fees',\n        description: 'QR Code payment processing fee',\n        is_sensitive: _false,\n        updated_at: '2024-06-22T10:30:00Z',\n      },\n      {\n        key: 'payment.fees.stripe',\n        value: { percentage: 1.4, fixed_fee: 0.2, currency: 'GBP' },\n        category: 'payment_fees',\n        description: 'Stripe payment processing fee',\n        is_sensitive: _false,\n        updated_at: '2024-06-22T10:30:00Z',\n      },\n      {\n        key: 'payment.fees.square',\n        value: { percentage: 1.75, currency: 'GBP' },\n        category: 'payment_fees',\n        description: 'Square payment processing fee',\n        is_sensitive: _false,\n        updated_at: '2024-06-22T10:30:00Z',\n      },\n      {\n        key: 'payment.fees.sumup',\n        value: {\n          standard: { percentage: 1.95 },\n          high_volume: { threshold: 2714, percentage: 0.95, monthly_fee: 39 },\n          currency: 'GBP',\n        },\n        category: 'payment_fees',\n        description: 'SumUp payment processing fee',\n        is_sensitive: _false,\n        updated_at: '2024-06-22T10:30:00Z',\n      },\n      {\n        key: 'security.max_login_attempts',\n        value: 5,\n        category: 'security',\n        description: 'Maximum login attempts before lockout',\n        is_sensitive: _false,\n        updated_at: '2024-06-22T10:30:00Z',\n      },\n      {\n        key: 'security.session_timeout',\n        value: 3600,\n        category: 'security',\n        description: 'Session timeout in seconds',\n        is_sensitive: _false,\n        updated_at: '2024-06-22T10:30:00Z',\n      },\n      {\n        key: 'business.max_discount_percentage',\n        value: 50.0,\n        category: 'business',\n        description: 'Maximum discount percentage allowed',\n        is_sensitive: _false,\n        updated_at: '2024-06-22T10:30:00Z',\n      },\n      {\n        key: 'features.new_payment_ui',\n        value: { enabled: _false, rollout_percentage: 25.0 },\n        category: 'features',\n        description: 'New payment interface rollout',\n        is_sensitive: _false,\n        updated_at: '2024-06-22T10:30:00Z',\n      },\n    ];\n\n    return category ? allSettings.filter(s => s.category === category) : allSettings;\n  }\n\n  private getMockPaymentFees(): Record<string, PaymentFee> {\n    return {\n      qr_code: { percentage: 1.2, currency: 'GBP' },\n      stripe: { percentage: 1.4, fixed_fee: 0.2, currency: 'GBP' },\n      square: {\n        percentage: 1.75,\n        currency: 'GBP',\n        // Additional Square fee structures\n        high_volume: { threshold: 0, percentage: 1.75, monthly_fee: 0 }, // No monthly fee\n      },\n      sumup: {\n        percentage: 1.95,\n        currency: 'GBP',\n        high_volume: { threshold: 2714, percentage: 0.95, monthly_fee: 39 },\n      },\n    };\n  }\n\n  private getMockFeeCalculation(paymentMethod: _string, amount: _number): FeeCalculation {\n    const fees = this.getMockPaymentFees();\n    const feeConfig = fees[paymentMethod];\n\n    if (!feeConfig) {\n      throw new Error(`Unknown payment method: ${paymentMethod}`);\n    }\n\n    const platformFee = (amount * feeConfig.percentage) / 100 + (feeConfig.fixed_fee || 0);\n\n    return {\n      payment_method: _paymentMethod,\n      amount,\n      platform_fee: _platformFee,\n      restaurant_markup: 0,\n      effective_fee: _platformFee,\n      fee_percentage: (platformFee / amount) * 100,\n      currency: feeConfig.currency,\n    };\n  }\n\n  // Service Charge Configuration\n  async getServiceChargeConfig(): Promise<{\n    enabled: boolean;\n    rate: number;\n    description: string;\n  }> {\n    try {\n      return await this.dataStore.getServiceChargeConfig();\n    } catch (__error) {\n      throw error;\n    }\n  }\n\n  async updateServiceChargeConfig(\n    enabled: _boolean,\n    rate: _number,\n    description?: _string,\n  ): Promise<boolean> {\n    try {\n        enabled,\n        rate,\n        description,\n      });\n\n      const config = {\n        enabled,\n        rate,\n        description: description || `Platform service charge of ${rate}%`,\n        lastUpdated: new Date().toISOString(),\n      };\n\n      await this.dataStore.setServiceChargeConfig(__config);\n      return true;\n    } catch (__error) {\n      return false;\n    }\n  }\n\n  private getMockFeatureFlags(): Record<string, boolean> {\n    return {\n      new_payment_ui: _false,\n      enhanced_analytics: _true,\n      mobile_app_v2: _false,\n      advanced_reporting: _true,\n      restaurant_chat: _false,\n    };\n  }\n}\n\nexport default PlatformService;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/services/QRCodeService.ts","messages":[{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty constructor.","line":30,"column":25,"nodeType":"FunctionExpression","messageId":"unexpected","endLine":30,"endColumn":27},{"ruleId":"no-new","severity":1,"message":"Do not use 'new' for side effects.","line":213,"column":9,"nodeType":"ExpressionStatement","messageId":"noNewStatement","endLine":213,"endColumn":25}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * QRCodeService - Handles QR code generation, _tracking, and payment monitoring\n * Provides utilities for creating QR codes and managing real-time payment status\n */\n\nimport { SumUpQRPayment } from './SumUpService';\n\nexport interface QRCodeOptions {\n  size: number;\n  backgroundColor: string;\n  foregroundColor: string;\n  errorCorrectionLevel: 'L' | 'M' | 'Q' | 'H';\n  margin: number;\n}\n\nexport interface QRPaymentTracking {\n  id: string;\n  startTime: Date;\n  lastStatusCheck: Date;\n  statusCheckCount: number;\n  estimatedScanTime?: Date;\n  completionTime?: Date;\n}\n\nclass QRCodeServiceClass {\n  private static instance: QRCodeServiceClass;\n  private activePayments: Map<string, QRPaymentTracking> = new Map();\n  private statusCallbacks: Map<string, (payment: _SumUpQRPayment) => void> = new Map();\n\n  private constructor() {}\n\n  static getInstance(): QRCodeServiceClass {\n    if (!QRCodeServiceClass.instance) {\n      QRCodeServiceClass.instance = new QRCodeServiceClass();\n    }\n    return QRCodeServiceClass.instance;\n  }\n\n  /**\n   * Get optimal QR code options based on device and lighting conditions\n   */\n  getOptimalQRCodeOptions(deviceType: 'phone' | 'tablet' = 'phone'): QRCodeOptions {\n    const _baseSize = deviceType === 'tablet' ? 300 : 200;\n\n    return {\n      size: _baseSize,\n      backgroundColor: '#FFFFFF',\n      foregroundColor: '#000000',\n      errorCorrectionLevel: 'M', // Medium error correction for good balance\n      margin: 4,\n    };\n  }\n\n  /**\n   * Start tracking a QR payment\n   */\n  startPaymentTracking(\n    payment: _SumUpQRPayment,\n    _statusCallback: (payment: _SumUpQRPayment) => void,\n  ): void {\n    const _tracking: QRPaymentTracking = {\n      id: payment.id,\n      startTime: new Date(),\n      lastStatusCheck: new Date(),\n      statusCheckCount: 0,\n    };\n\n    this.activePayments.set(payment.id, _tracking);\n    this.statusCallbacks.set(payment.id, _statusCallback);\n  }\n\n  /**\n   * Stop tracking a QR payment\n   */\n  stopPaymentTracking(_paymentId: _string): void {\n    this.activePayments.delete(__paymentId);\n    this.statusCallbacks.delete(__paymentId);\n  }\n\n  /**\n   * Update payment status and tracking info\n   */\n  updatePaymentStatus(payment: _SumUpQRPayment): void {\n    const tracking = this.activePayments.get(payment.id);\n    if (!tracking) {\n      return;\n    }\n\n    tracking.lastStatusCheck = new Date();\n    tracking.statusCheckCount += 1;\n\n    // Detect when scanning likely started (status changed to 'scanning')\n    if (payment.status === 'scanning' && !tracking.estimatedScanTime) {\n      tracking.estimatedScanTime = new Date();\n    }\n\n    // Detect completion\n    if (payment.status === 'completed' && !tracking.completionTime) {\n      tracking.completionTime = new Date();\n    }\n\n    this.activePayments.set(payment.id, _tracking);\n\n    // Notify callback\n    const callback = this.statusCallbacks.get(payment.id);\n    if (__callback) {\n      callback(__payment);\n    }\n  }\n\n  /**\n   * Get payment tracking analytics\n   */\n  getPaymentAnalytics(_paymentId: _string): {\n    duration: number;\n    statusChecks: number;\n    scanDuration?: number;\n    isCompleted: boolean;\n  } | null {\n    const tracking = this.activePayments.get(__paymentId);\n    if (!tracking) {\n      return null;\n    }\n\n    const now = new Date();\n    const duration = now.getTime() - tracking.startTime.getTime();\n\n    let scanDuration: number | undefined;\n    if (tracking.estimatedScanTime && tracking.completionTime) {\n      scanDuration = tracking.completionTime.getTime() - tracking.estimatedScanTime.getTime();\n    }\n\n    return {\n      duration,\n      statusChecks: tracking.statusCheckCount,\n      scanDuration,\n      isCompleted: !!tracking.completionTime,\n    };\n  }\n\n  /**\n   * Get all active payments\n   */\n  getActivePayments(): string[] {\n    return Array.from(this.activePayments.keys());\n  }\n\n  /**\n   * Clean up expired payments\n   */\n  cleanupExpiredPayments(): void {\n    const now = new Date();\n    const expiredPayments: string[] = [];\n\n    this.activePayments.forEach((__tracking, _paymentId) => {\n      // Remove payments older than 1 hour\n      const age = now.getTime() - tracking.startTime.getTime();\n      if (age > 60 * 60 * 1000) {\n        expiredPayments.push(__paymentId);\n      }\n    });\n\n    expiredPayments.forEach(_paymentId => {\n      this.stopPaymentTracking(__paymentId);\n    });\n\n    if (expiredPayments.length > 0) {\n      // No action needed\n    }\n  }\n\n  /**\n   * Generate user-friendly instructions for QR scanning\n   */\n  getScanningInstructions(bankingApp?: _string): string[] {\n    const baseInstructions = [\n      'Open your banking app',\n      'Look for \"Pay\" or \"QR Code\" option',\n      'Point your camera at the QR code',\n      'Confirm the payment amount',\n      'Complete the payment in your app',\n    ];\n\n    if (__bankingApp) {\n      return [`Open ${bankingApp}`, ...baseInstructions.slice(1)];\n    }\n\n    return baseInstructions;\n  }\n\n  /**\n   * Get troubleshooting tips for scanning issues\n   */\n  getTroubleshootingTips(): string[] {\n    return [\n      'Ensure good lighting on the QR code',\n      \"Hold your phone steady and at arm's length\",\n      'Make sure the entire QR code is visible in your camera',\n      'Try cleaning your camera lens',\n      'Close and reopen your banking app',\n      'Check your internet connection',\n      'Ensure you have sufficient funds in your account',\n    ];\n  }\n\n  /**\n   * Validate QR code data format\n   */\n  validateQRCodeData(data: _string): boolean {\n    try {\n      // Basic validation for URL format\n      if (data.startsWith('http://') || data.startsWith('https://')) {\n        new URL(__data); // This will throw if invalid URL\n        return true;\n      }\n\n      // Add other validation patterns as needed\n      return false;\n    } catch (__error) {\n      return false;\n    }\n  }\n\n  /**\n   * Generate fallback payment link\n   */\n  generateFallbackLink(payment: _SumUpQRPayment): string {\n    // Create a user-friendly fallback URL\n    const baseUrl = payment.qrCode;\n    return `${baseUrl}?fallback=true&amount=${payment.amount}&currency=${payment.currency}`;\n  }\n\n  /**\n   * Calculate optimal polling interval based on payment age\n   */\n  getOptimalPollingInterval(payment: _SumUpQRPayment): number {\n    const tracking = this.activePayments.get(payment.id);\n    if (!tracking) {\n      return 2000;\n    } // Default 2 seconds\n\n    const age = new Date().getTime() - tracking.startTime.getTime();\n\n    // More frequent polling in first 30 seconds\n    if (age < 30000) {\n      return 1000; // 1 second\n    }\n\n    // Standard polling for next 2 minutes\n    if (age < 120000) {\n      return 2000; // 2 seconds\n    }\n\n    // Slower polling after 2 minutes\n    return 5000; // 5 seconds\n  }\n\n  /**\n   * Get payment status display text\n   */\n  getStatusDisplayText(_status: SumUpQRPayment['status']): string {\n    switch (__status) {\n      case 'created':\n        return 'QR code ready';\n      case 'pending':\n        return 'Waiting for scan';\n      case 'scanning':\n        return 'Customer scanning...';\n      case 'completed':\n        return 'Payment successful';\n      case 'expired':\n        return 'QR code expired';\n      case 'failed':\n        return 'Payment failed';\n      default:\n        return 'Unknown status';\n    }\n  }\n\n  /**\n   * Get estimated time remaining for QR code\n   */\n  getTimeRemaining(payment: _SumUpQRPayment): number {\n    try {\n      const expiresAt = new Date(payment.expiresAt);\n      const now = new Date();\n      return Math.max(0, Math.floor((expiresAt.getTime() - now.getTime()) / 1000));\n    } catch (__error) {\n      return 0;\n    }\n  }\n}\n\nexport const QRCodeService = QRCodeServiceClass.getInstance();\nexport default QRCodeService;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/services/RealUserManagementService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_realUser' is assigned a value but never used.","line":168,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":168,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_lowercaseQuery' is assigned a value but never used.","line":250,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":250,"endColumn":26}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Real User Management Service - Connects to backend API\n * Replaces mock UserManagementService with real data\n */\n\nimport API_CONFIG from '../config/api';\n\nexport interface RealUser {\n  id: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone: string;\n  role: string;\n  pin: string;\n  employeeId: string;\n  businessId: string;\n  isActive: boolean;\n  createdAt?: string;\n  lastLogin?: string;\n  platformId?: string;\n  managedRestaurants?: string[];\n}\n\nexport interface UserDisplayData {\n  id: string;\n  name: string;\n  email: string;\n  role: string;\n  status: string;\n  restaurantId?: string;\n  restaurantName?: string;\n  permissions: string[];\n  createdAt: Date;\n  lastLogin?: Date;\n  loginAttempts: number;\n  isLocked: boolean;\n  phoneNumber?: string;\n  address?: string;\n}\n\nexport interface AccessLog {\n  id: string;\n  userId: string;\n  userEmail: string;\n  action: string;\n  location: string;\n  ipAddress: string;\n  userAgent: string;\n  timestamp: Date;\n  status: 'success' | 'failed' | 'suspicious';\n  details?: string;\n}\n\nclass RealUserManagementService {\n  private static instance: RealUserManagementService;\n  private baseUrl = API_CONFIG.FULL_API_URL;\n\n  static getInstance(): RealUserManagementService {\n    if (!RealUserManagementService.instance) {\n      RealUserManagementService.instance = new RealUserManagementService();\n    }\n    return RealUserManagementService.instance;\n  }\n\n  // Convert real backend user to display format\n  private convertToDisplayFormat(realUser: _RealUser): UserDisplayData {\n    return {\n      id: realUser.id,\n      name: `${realUser.firstName} ${realUser.lastName}`.trim(),\n      email: realUser.email,\n      role: this.mapRoleToDisplay(realUser.role),\n      status: realUser.isActive ? 'active' : 'inactive',\n      restaurantId: realUser.businessId,\n      restaurantName: this.getRestaurantName(realUser.businessId),\n      permissions: this.getPermissionsForRole(realUser.role),\n      createdAt: realUser.createdAt ? new Date(realUser.createdAt) : new Date(),\n      lastLogin: realUser.lastLogin ? new Date(realUser.lastLogin) : _undefined,\n      loginAttempts: 0,\n      isLocked: _false,\n      phoneNumber: realUser.phone,\n      address: _undefined,\n    };\n  }\n\n  private mapRoleToDisplay(role: _string): string {\n    const roleMap: { [key: string]: string } = {\n      platform_owner: 'Platform Admin',\n      restaurant_owner: 'Restaurant Owner',\n      manager: 'Restaurant Manager',\n      employee: 'Restaurant Employee',\n    };\n    return roleMap[role] || role;\n  }\n\n  private getRestaurantName(businessId: _string): string {\n    // For now, check if it's the Mexican restaurant\n    if (businessId === 'restaurant1') {\n      return 'Chucho';\n    }\n    return 'Unknown Restaurant';\n  }\n\n  private getPermissionsForRole(role: _string): string[] {\n    const permissionMap: { [key: string]: string[] } = {\n      platform_owner: [\n        'view_analytics',\n        'manage_users',\n        'manage_restaurants',\n        'manage_settings',\n        'view_reports',\n      ],\n      restaurant_owner: [\n        'view_analytics',\n        'manage_users',\n        'manage_menu',\n        'view_reports',\n        'manage_settings',\n      ],\n      manager: ['manage_orders', 'access_pos', 'manage_tables', 'view_kitchen_orders'],\n      employee: ['access_pos', 'process_payments'],\n    };\n    return permissionMap[role] || [];\n  }\n\n  // API methods\n  async getAllUsers(): Promise<UserDisplayData[]> {\n    try {\n      const response = await fetch(`${this.baseUrl}/users`);\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const realUsers: RealUser[] = await response.json();\n\n      // Convert to display format\n      const displayUsers = realUsers.map(_user => this.convertToDisplayFormat(__user));\n\n      return displayUsers;\n    } catch (__error) {\n      // Return empty array instead of mock data\n      return [];\n    }\n  }\n\n  async getUsersByRole(role: _string): Promise<UserDisplayData[]> {\n    const allUsers = await this.getAllUsers();\n    return allUsers.filter(user => user.role === role);\n  }\n\n  async getUsersByRestaurant(restaurantId: _string): Promise<UserDisplayData[]> {\n    const allUsers = await this.getAllUsers();\n    return allUsers.filter(user => user.restaurantId === restaurantId);\n  }\n\n  async getUserById(userId: _string): Promise<UserDisplayData | null> {\n    try {\n      const response = await fetch(`${this.baseUrl}/users/${userId}`);\n\n      if (!response.ok) {\n        if (response.status === 404) {\n          return null;\n        }\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const _realUser: RealUser = await response.json();\n      return this.convertToDisplayFormat(__realUser);\n    } catch (__error) {\n      return null;\n    }\n  }\n\n  async createUser(_userData: _unknown): Promise<UserDisplayData> {\n    try {\n      const response = await fetch(`${this.baseUrl}/users`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(__userData),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to create user');\n      }\n\n      const result = await response.json();\n      return this.convertToDisplayFormat(result.user);\n    } catch (__error) {\n      throw error;\n    }\n  }\n\n  async updateUser(userId: _string, _updates: _unknown): Promise<UserDisplayData> {\n    try {\n      const response = await fetch(`${this.baseUrl}/users/${userId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(__updates),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to update user');\n      }\n\n      const result = await response.json();\n      return this.convertToDisplayFormat(result.user);\n    } catch (__error) {\n      throw error;\n    }\n  }\n\n  async suspendUser(_userId: _string, _reason?: _string): Promise<UserDisplayData> {\n    return this.updateUser(__userId, { isActive: false });\n  }\n\n  async activateUser(_userId: _string): Promise<UserDisplayData> {\n    return this.updateUser(__userId, { isActive: true });\n  }\n\n  // Mock access logs since backend doesn't have this yet\n  async getAccessLogs(_limit?: _number): Promise<AccessLog[]> {\n    return [];\n  }\n\n  async getAccessLogsByUser(_userId: _string, _limit?: _number): Promise<AccessLog[]> {\n    return [];\n  }\n\n  async logAccess(\n    _userId: _string,\n    _userEmail: _string,\n    _action: _string,\n    _location: _string,\n    _status: 'success' | 'failed' | 'suspicious',\n    _details?: _string,\n  ): Promise<void> {\n    // Will implement when backend supports it\n  }\n\n  // Search functionality\n  async searchUsers(query: _string): Promise<UserDisplayData[]> {\n    const allUsers = await this.getAllUsers();\n    const _lowercaseQuery = query.toLowerCase();\n\n    return allUsers.filter(\n      user =>\n        user.name.toLowerCase().includes(__lowercaseQuery) ||\n        user.email.toLowerCase().includes(__lowercaseQuery) ||\n        user.role.toLowerCase().includes(__lowercaseQuery) ||\n        (user.restaurantName && user.restaurantName.toLowerCase().includes(__lowercaseQuery)),\n    );\n  }\n\n  // Placeholder methods for compatibility\n  async exportAccessLogs(\n    format: 'csv' | 'json' | 'xlsx',\n  ): Promise<{ url: string; filename: string }> {\n    const timestamp = new Date().toISOString().split('T')[0];\n    const filename = `fynlo-access-logs-${timestamp}.${format}`;\n\n    return {\n      url: `https://api.fynlopos.com/exports/${filename}`,\n      filename,\n    };\n  }\n}\n\nexport { RealUserManagementService };\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/services/RestaurantConfigService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_STORAGE_KEY' is assigned a value but never used.","line":62,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":62,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_stored' is assigned a value but never used.","line":107,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":107,"endColumn":20},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":161,"column":10,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":161,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_apiPayload' is assigned a value but never used.","line":175,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":175,"endColumn":26},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":315,"column":5,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":315,"endColumn":17,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[9435,9436],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_allStepsCompleted' is assigned a value but never used.","line":318,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":318,"endColumn":29},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":318,"column":46,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":318,"endColumn":58,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[9559,9560],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":320,"column":7,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":320,"endColumn":19,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[9639,9640],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":355,"column":51,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":355,"endColumn":63}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import AsyncStorage from '@react-native-async-storage/async-storage';\nimport tokenManager from '../utils/tokenManager';\nimport RestaurantDataService from './RestaurantDataService';\nimport API_CONFIG from '../config/api';\n\nexport interface RestaurantConfig {\n  // Restaurant Identity\n  restaurantName: string;\n  displayName: string; // What shows in headers\n  businessType: string; // e.g., \"Mexican Restaurant\", \"Italian Bistro\"\n\n  // Contact Information\n  address: {\n    street: string;\n    city: string;\n    state: string;\n    zipCode: string;\n    country: string;\n  };\n  phone: string;\n  email: string;\n  website?: string;\n\n  // Branding\n  primaryColor?: string;\n  logo?: string; // Base64 or URL\n  theme?: 'light' | 'dark' | 'auto';\n\n  // Business Settings\n  currency: string;\n  timezone: string;\n  taxRate: number;\n  serviceCharge?: number;\n\n  // Operational\n  operatingHours: {\n    [key: string]: {\n      open: string;\n      close: string;\n      closed: boolean;\n    };\n  };\n\n  // Platform Integration\n  fynloAccountId: string;\n  subscriptionTier: 'basic' | 'premium' | 'enterprise';\n\n  // Setup Status\n  onboardingCompleted: boolean;\n  setupSteps: {\n    restaurantInfo: boolean;\n    menuSetup: boolean;\n    paymentSetup: boolean;\n    staffSetup: boolean;\n  };\n\n  // Metadata\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nconst _STORAGE_KEY = 'restaurant_config';\nconst DEFAULT_CONFIG: Partial<RestaurantConfig> = {\n  restaurantName: 'Chucho',\n  displayName: 'Chucho', // Mexican restaurant name\n  businessType: 'Mexican Restaurant',\n  currency: 'GBP',\n  timezone: 'Europe/London',\n  taxRate: 0.2, // 20% VAT for UK\n  theme: 'light',\n  operatingHours: {\n    monday: { open: '09:00', close: '22:00', closed: false },\n    tuesday: { open: '09:00', close: '22:00', closed: false },\n    wednesday: { open: '09:00', close: '22:00', closed: false },\n    thursday: { open: '09:00', close: '22:00', closed: false },\n    friday: { open: '09:00', close: '23:00', closed: false },\n    saturday: { open: '09:00', close: '23:00', closed: false },\n    sunday: { open: '10:00', close: '21:00', closed: false },\n  },\n  subscriptionTier: 'basic',\n  onboardingCompleted: _false,\n  setupSteps: {\n    restaurantInfo: _false,\n    menuSetup: _false,\n    paymentSetup: _false,\n    staffSetup: _false,\n  },\n};\n\nclass RestaurantConfigService {\n  private static instance: RestaurantConfigService;\n  private config: RestaurantConfig | null = null;\n  private listeners: ((config: _RestaurantConfig) => void)[] = [];\n\n  static getInstance(): RestaurantConfigService {\n    if (!RestaurantConfigService.instance) {\n      RestaurantConfigService.instance = new RestaurantConfigService();\n    }\n    return RestaurantConfigService.instance;\n  }\n\n  /**\n   * Load restaurant configuration from storage\n   */\n  async loadConfig(): Promise<RestaurantConfig> {\n    try {\n      const _stored = await AsyncStorage.getItem(__STORAGE_KEY);\n      if (__stored) {\n        this.config = JSON.parse(__stored);\n        // Convert date strings back to Date objects\n        if (this.config) {\n          this.config.createdAt = new Date(this.config.createdAt);\n          this.config.updatedAt = new Date(this.config.updatedAt);\n        }\n      }\n\n      // If no config exists, create default\n      if (!this.config) {\n        this.config = {\n          ...DEFAULT_CONFIG,\n          fynloAccountId: this.generateAccountId(),\n          createdAt: new Date(),\n          updatedAt: new Date(),\n        } as RestaurantConfig;\n        await this.saveConfig();\n      }\n\n      this.notifyListeners();\n      return this.config;\n    } catch (__error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Save restaurant configuration to storage\n   */\n  async saveConfig(): Promise<void> {\n    if (!this.config) {\n      return;\n    }\n\n    try {\n      this.config.updatedAt = new Date();\n      await AsyncStorage.setItem(__STORAGE_KEY, JSON.stringify(this.config));\n      this.notifyListeners();\n    } catch (__error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Update restaurant configuration\n   */\n  async updateConfig(updates: Partial<RestaurantConfig>): Promise<RestaurantConfig> {\n    if (!this.config) {\n      await this.loadConfig();\n    }\n\n    this.config = {\n      ...this.config!,\n      ...updates,\n      updatedAt: new Date(),\n    };\n\n    // Try to save to API first\n    try {\n      const authToken = await tokenManager.getTokenWithRefresh();\n      const userStr = await AsyncStorage.getItem('@auth_user');\n      const user = userStr ? JSON.parse(__userStr) : null;\n      const restaurantId = user?.businessId || user?.restaurant_id;\n\n      if (authToken && restaurantId) {\n        // Prepare API payload\n        const _apiPayload = {\n          name: this.config.restaurantName,\n          display_name: this.config.displayName,\n          business_type: this.config.businessType,\n          address: `${this.config.address?.street || ''}, ${this.config.address?.city || ''}, ${\n            this.config.address?.state || ''\n          } ${this.config.address?.zipCode || ''}`.trim(),\n          phone: this.config.phone,\n          email: this.config.email,\n          website: this.config.website,\n          currency: this.config.currency,\n          timezone: this.config.timezone,\n          vat_number: this.config.taxId || '',\n          registration_number: this.config.registrationId || '',\n          config: {\n            tax_rate: this.config.taxRate,\n            theme: this.config.theme,\n            primary_color: this.config.primaryColor,\n            operating_hours: this.config.operatingHours,\n          },\n        };\n\n        const response = await fetch(`${API_CONFIG.FULL_API_URL}/restaurants/${restaurantId}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${authToken}`,\n          },\n          body: JSON.stringify(__apiPayload),\n        });\n\n        if (response.ok) {\n          // No action needed\n        } else {\n          const errorData = await response.json();\n          throw new Error(errorData.detail || 'Failed to save to API');\n        }\n      }\n    } catch (__apiError) {\n      // Continue with local save\n    }\n\n    // Always save locally as backup\n    await this.saveConfig();\n\n    // Sync with RestaurantDataService for platform visibility\n    try {\n      const restaurantDataService = RestaurantDataService.getInstance();\n\n      // Check if restaurant exists in platform\n      const existingData = await restaurantDataService.getCurrentRestaurantData();\n\n      if (!existingData) {\n        // Create new restaurant in platform\n        await restaurantDataService.createRestaurant({\n          name: this.config.restaurantName,\n          displayName: this.config.displayName,\n          businessType: this.config.businessType,\n          address: `${this.config.address?.street || ''}, ${this.config.address?.city || ''}, ${\n            this.config.address?.zipCode || ''\n          }`,\n          phone: this.config.phone,\n          email: this.config.email,\n          website: this.config.website,\n          vatNumber: this.config.taxId || '',\n          registrationNumber: this.config.registrationId || '',\n          platformOwnerId: 'platform_owner_1', // Default platform owner\n          ownerId: this.config.fynloAccountId,\n          subscriptionTier: this.config.subscriptionTier,\n          currency: this.config.currency,\n          timezone: this.config.timezone,\n          theme: this.config.theme,\n          primaryColor: this.config.primaryColor,\n          onboardingCompleted: this.config.onboardingCompleted,\n        });\n      } else {\n        // Update existing restaurant\n        await restaurantDataService.updateCurrentRestaurant({\n          name: this.config.restaurantName,\n          displayName: this.config.displayName,\n          businessType: this.config.businessType,\n          address: `${this.config.address?.street || ''}, ${this.config.address?.city || ''}, ${\n            this.config.address?.zipCode || ''\n          }`,\n          phone: this.config.phone,\n          email: this.config.email,\n          website: this.config.website,\n          vatNumber: this.config.taxId || '',\n          registrationNumber: this.config.registrationId || '',\n          subscriptionTier: this.config.subscriptionTier,\n          currency: this.config.currency,\n          timezone: this.config.timezone,\n          theme: this.config.theme,\n          primaryColor: this.config.primaryColor,\n          onboardingCompleted: this.config.onboardingCompleted,\n        });\n      }\n    } catch (__error) {\n      // Don't fail the update if sync fails\n    }\n\n    return this.config;\n  }\n\n  /**\n   * Get current configuration\n   */\n  getConfig(): RestaurantConfig | null {\n    return this.config;\n  }\n\n  /**\n   * Get restaurant display name for headers\n   */\n  getDisplayName(): string {\n    return this.config?.displayName || 'Fynlo POS';\n  }\n\n  /**\n   * Check if onboarding is completed\n   */\n  isOnboardingCompleted(): boolean {\n    return this.config?.onboardingCompleted || false;\n  }\n\n  /**\n   * Check if specific setup step is completed\n   */\n  isSetupStepCompleted(step: keyof RestaurantConfig['setupSteps']): boolean {\n    return this.config?.setupSteps[step] || false;\n  }\n\n  /**\n   * Mark setup step as completed\n   */\n  async completeSetupStep(step: keyof RestaurantConfig['setupSteps']): Promise<void> {\n    if (!this.config) {\n      await this.loadConfig();\n    }\n\n    this.config!.setupSteps[step] = true;\n\n    // Check if all steps are completed\n    const _allStepsCompleted = Object.values(this.config!.setupSteps).every(__Boolean);\n    if (__allStepsCompleted) {\n      this.config!.onboardingCompleted = true;\n    }\n\n    await this.saveConfig();\n  }\n\n  /**\n   * Reset configuration (for testing or re-onboarding)\n   */\n  async resetConfig(): Promise<void> {\n    await AsyncStorage.removeItem(__STORAGE_KEY);\n    this.config = null;\n    await this.loadConfig();\n  }\n\n  /**\n   * Subscribe to configuration changes\n   */\n  subscribe(_listener: (config: _RestaurantConfig) => void): () => void {\n    this.listeners.push(__listener);\n\n    // Return unsubscribe function\n    return () => {\n      const index = this.listeners.indexOf(__listener);\n      if (index > -1) {\n        this.listeners.splice(__index, 1);\n      }\n    };\n  }\n\n  /**\n   * Notify all listeners of configuration changes\n   */\n  private notifyListeners(): void {\n    if (this.config) {\n      this.listeners.forEach(listener => listener(this.config!));\n    }\n  }\n\n  /**\n   * Generate unique account ID for new restaurants\n   */\n  private generateAccountId(): string {\n    return `fynlo_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Export configuration for backup\n   */\n  async exportConfig(): Promise<string> {\n    if (!this.config) {\n      await this.loadConfig();\n    }\n    return JSON.stringify(this.config, _null, 2);\n  }\n\n  /**\n   * Import configuration from backup\n   */\n  async importConfig(_configJson: _string): Promise<RestaurantConfig> {\n    try {\n      const importedConfig = JSON.parse(__configJson);\n\n      // Validate required fields\n      if (!importedConfig.restaurantName || !importedConfig.fynloAccountId) {\n        throw new Error('Invalid configuration format');\n      }\n\n      // Convert date strings to Date objects\n      importedConfig.createdAt = new Date(importedConfig.createdAt);\n      importedConfig.updatedAt = new Date();\n\n      this.config = importedConfig;\n      await this.saveConfig();\n\n      return this.config;\n    } catch (__error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get setup progress percentage\n   */\n  getSetupProgress(): number {\n    if (!this.config) {\n      return 0;\n    }\n\n    const completedSteps = Object.values(this.config.setupSteps).filter(__Boolean).length;\n    const totalSteps = Object.keys(this.config.setupSteps).length;\n\n    return Math.round((completedSteps / totalSteps) * 100);\n  }\n\n  /**\n   * Get next required setup step\n   */\n  getNextSetupStep(): keyof RestaurantConfig['setupSteps'] | null {\n    if (!this.config) {\n      return 'restaurantInfo';\n    }\n\n    const steps: (keyof RestaurantConfig['setupSteps'])[] = [\n      'restaurantInfo',\n      'menuSetup',\n      'paymentSetup',\n      'staffSetup',\n    ];\n\n    for (const step of steps) {\n      if (!this.config.setupSteps[step]) {\n        return step;\n      }\n    }\n\n    return null; // All steps completed\n  }\n}\n\nexport default RestaurantConfigService;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/services/RestaurantDataService.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ';' expected.","line":126,"column":22,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * RestaurantDataService - Real-time restaurant data synchronization\n * This service manages the flow of restaurant data between restaurant app and platform\n */\n\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport SharedDataStore from './SharedDataStore';\nimport NetworkDiagnosticsService from './NetworkDiagnosticsService';\nimport { Business } from '../types';\nimport API_CONFIG from '../config/api';\n\ninterface RestaurantData {\n  // Core restaurant info\n  id: string;\n  name: string;\n  displayName: string;\n  businessType: string;\n\n  // Contact & Legal\n  address: string;\n  phone: string;\n  email: string;\n  website?: string;\n  vatNumber: string;\n  registrationNumber: string;\n\n  // Platform relationship\n  platformOwnerId: string;\n  ownerId: string;\n  subscriptionTier: 'basic' | 'premium' | 'enterprise';\n\n  // Financial\n  currency: string;\n  monthlyRevenue: number;\n  commissionRate: number;\n\n  // Status\n  isActive: boolean;\n  onboardingCompleted: boolean;\n  joinedDate: Date;\n  lastActivity: Date;\n\n  // Settings\n  timezone: string;\n  theme?: string;\n  primaryColor?: string;\n\n  // Operational metrics\n  todayTransactions: number;\n  todayRevenue: number;\n  activeOrders: number;\n  averageOrderValue: number;\n}\n\nclass RestaurantDataService {\n  private static instance: RestaurantDataService;\n  private dataStore: SharedDataStore;\n  private currentRestaurantId: string | null = null;\n\n  private constructor() {\n    this.dataStore = SharedDataStore.getInstance();\n  }\n\n  static getInstance(): RestaurantDataService {\n    if (!RestaurantDataService.instance) {\n      RestaurantDataService.instance = new RestaurantDataService();\n    }\n    return RestaurantDataService.instance;\n  }\n\n  /**\n   * Retry API call with exponential backoff\n   */\n  private async retryAPICall<T>(\n    apiCall: () => Promise<T>,\n    maxRetries: number = API_CONFIG.RETRY_ATTEMPTS,\n    baseDelay: number = API_CONFIG.RETRY_DELAY,\n  ): Promise<T> {\n    let lastError: Error | null = null;\n\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n      try {\n        const result = await apiCall();\n        if(attempt > 1) {\n    // No action needed\n  }\n        return result;\n      } catch (__error) {\n        lastError = error instanceof Error ? error : new Error('Unknown error');\n\n        // Don't retry on timeout errors - they indicate longer network issues\n        if (lastError.name === 'AbortError') {\n          break;\n        }\n\n        // Don't wait after the last attempt\n        if (attempt < maxRetries) {\n          const delay = baseDelay * Math.pow(2, attempt - 1); // Exponential backoff\n          await new Promise(resolve => setTimeout(__resolve, _delay));\n        }\n      }\n    }\n\n    throw lastError || new Error('All retry attempts failed');\n  }\n\n  /**\n   * Initialize service with current restaurant ID\n   */\n  async initialize(restaurantId: _string): Promise<void> {\n    this.currentRestaurantId = restaurantId;\n    await AsyncStorage.setItem('current_restaurant_id', _restaurantId);\n  }\n\n  /**\n   * Get all restaurants for a platform owner with comprehensive network diagnostics\n   */\n  async getPlatformRestaurants(platformOwnerId: _string): Promise<RestaurantData[]> {\n    try {\n\n      // FIRST: Perform network diagnostics to identify any connectivity issues\n      const networkDiagnostics = NetworkDiagnosticsService.getInstance();\n      const diagnostics = await networkDiagnostics.performFullNetworkDiagnostics();\n\n        isConnected: diagnostics.isConnected,\n        connectionType: diagnostics.connectionType,\n        apiServerReachable: diagnostics.apiServerReachable,\n        specificEndpointReachable: diagnostics.specificEndpointReachable,\n        latency: diagnostics.latency,\n        error: diagnostics.error,\n      });\n\n      // If network issues detected, show user-friendly error dialog\n      if (!diagnostics.apiServerReachable || !diagnostics.specificEndpointReachable) {\n        await networkDiagnostics.showNetworkErrorDialog(__diagnostics);\n      }\n\n      // SECOND: Try to get from real backend API with enhanced error handling and retry logic\n      if (diagnostics.apiServerReachable && diagnostics.specificEndpointReachable) {\n        try {\n\n          // Use retry mechanism for robust API calls\n          const apiResult = await this.retryAPICall(async () => {\n            const controller = new AbortController();\n            const timeoutId = setTimeout(() => controller.abort(), API_CONFIG.TIMEOUT);\n\n            const response = await fetch(\n              `${API_CONFIG.BASE_URL}/api/v1/platform/restaurants/${platformOwnerId}`,\n              {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                },\n                signal: controller.signal,\n              },\n            );\n\n            clearTimeout(__timeoutId);\n\n            if (!response.ok) {\n              throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n            }\n\n            const data = await response.json();\n\n            if (!data || !data.restaurants || !Array.isArray(data.restaurants)) {\n              throw new Error('Invalid API response structure - data.restaurants is not an array');\n            }\n\n            return data;\n          });\n\n\n          // Convert backend format to RestaurantData format\n          const restaurants: RestaurantData[] = apiResult.restaurants.map((r: _unknown) => ({\n            id: r.id,\n            name: r.name,\n            displayName: r.displayName || r.name,\n            businessType: r.businessType || 'restaurant',\n            address: r.address,\n            phone: r.phone,\n            email: r.email,\n            website: r.website,\n            vatNumber: r.vatNumber,\n            registrationNumber: r.registrationNumber,\n            platformOwnerId: r.platformOwnerId,\n            ownerId: r.ownerId,\n            subscriptionTier: r.subscriptionTier,\n            currency: r.currency,\n            monthlyRevenue: r.monthlyRevenue || 0,\n            commissionRate: r.commissionRate || 2.5,\n            isActive: r.isActive,\n            onboardingCompleted: r.onboardingCompleted,\n            joinedDate: new Date(r.joinedDate),\n            lastActivity: new Date(r.lastActivity),\n            timezone: r.timezone,\n            theme: r.theme,\n            primaryColor: r.primaryColor,\n            todayTransactions: r.todayTransactions || 0,\n            todayRevenue: r.todayRevenue || 0,\n            activeOrders: r.activeOrders || 0,\n            averageOrderValue: r.averageOrderValue || 0,\n          }));\n\n            '✅ Successfully retrieved platform restaurants from API with retry mechanism',\n          );\n          return restaurants;\n        } catch (__apiError) {\n            error: _apiError,\n            message: apiError instanceof Error ? apiError.message : 'Unknown error',\n            url: `${API_CONFIG.BASE_URL}/api/v1/platform/restaurants/${platformOwnerId}`,\n            errorName: apiError instanceof Error ? apiError.name : 'Unknown',\n          });\n\n          // If it's a timeout error, provide specific feedback\n          if(apiError instanceof Error && apiError.name === 'AbortError') {\n    // No action needed\n  }\n        }\n      } else {\n    // No action needed\n  }\n\n      // FALLBACK: Get from shared data store (local storage)\n      const restaurants =\n        (await this.dataStore.getPlatformSetting(`restaurants.${platformOwnerId}`)) || [];\n\n      // If no restaurants exist, check if we have a current restaurant to add\n      if (restaurants.length === 0) {\n        const currentRestaurant = await this.getCurrentRestaurantData();\n        if (currentRestaurant && currentRestaurant.platformOwnerId === platformOwnerId) {\n          restaurants.push(__currentRestaurant);\n          await this.savePlatformRestaurants(__platformOwnerId, _restaurants);\n        }\n      }\n\n      return restaurants;\n    } catch (__error) {\n      return [];\n    }\n  }\n\n  /**\n   * Save restaurants for a platform owner\n   */\n  async savePlatformRestaurants(\n    platformOwnerId: _string,\n    restaurants: RestaurantData[],\n  ): Promise<void> {\n    try {\n      await this.dataStore.setPlatformSetting(`restaurants.${platformOwnerId}`, _restaurants);\n    } catch (__error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get current restaurant data\n   */\n  async getCurrentRestaurantData(): Promise<RestaurantData | null> {\n    try {\n      if (!this.currentRestaurantId) {\n        const storedId = await AsyncStorage.getItem('current_restaurant_id');\n        if (!storedId) {\n          return null;\n        }\n        this.currentRestaurantId = storedId;\n      }\n\n      // Try to get from shared data store first\n      const restaurantData = await this.dataStore.getPlatformSetting(\n        `restaurant.${this.currentRestaurantId}`,\n      );\n      if (__restaurantData) {\n        return restaurantData;\n      }\n\n      // Fallback to local storage\n      const localData = await AsyncStorage.getItem(`restaurant_data_${this.currentRestaurantId}`);\n      if (__localData) {\n        return JSON.parse(__localData);\n      }\n\n      return null;\n    } catch (__error) {\n      return null;\n    }\n  }\n\n  /**\n   * Update current restaurant data and sync to platform\n   */\n  async updateCurrentRestaurant(updates: Partial<RestaurantData>): Promise<RestaurantData> {\n    try {\n      const current = await this.getCurrentRestaurantData();\n      if (!current) {\n        throw new Error('No current restaurant found');\n      }\n\n      const updated: RestaurantData = {\n        ...current,\n        ...updates,\n        lastActivity: new Date(),\n      };\n\n      // Save to shared data store\n      await this.dataStore.setPlatformSetting(`restaurant.${current.id}`, _updated);\n\n      // Update in platform restaurants list\n      if (current.platformOwnerId) {\n        const platformRestaurants = await this.getPlatformRestaurants(current.platformOwnerId);\n        const index = platformRestaurants.findIndex(r => r.id === current.id);\n\n        if (index >= 0) {\n          platformRestaurants[index] = updated;\n        } else {\n          platformRestaurants.push(__updated);\n        }\n\n        await this.savePlatformRestaurants(current.platformOwnerId, _platformRestaurants);\n      }\n\n      return updated;\n    } catch (__error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Create new restaurant (during onboarding)\n   */\n  async createRestaurant(restaurantData: Partial<RestaurantData>): Promise<RestaurantData> {\n    try {\n      const newRestaurant: RestaurantData = {\n        id: `rest_${Date.now()}`,\n        name: restaurantData.name || 'New Restaurant',\n        displayName: restaurantData.displayName || restaurantData.name || 'New Restaurant',\n        businessType: restaurantData.businessType || 'Restaurant',\n        address: restaurantData.address || '',\n        phone: restaurantData.phone || '',\n        email: restaurantData.email || '',\n        vatNumber: restaurantData.vatNumber || '',\n        registrationNumber: restaurantData.registrationNumber || '',\n        platformOwnerId: restaurantData.platformOwnerId || 'platform_owner_1',\n        ownerId: restaurantData.ownerId || '',\n        subscriptionTier: restaurantData.subscriptionTier || 'basic',\n        currency: restaurantData.currency || 'GBP',\n        monthlyRevenue: 0,\n        commissionRate: 2.5,\n        isActive: _true,\n        onboardingCompleted: _false,\n        joinedDate: new Date(),\n        lastActivity: new Date(),\n        timezone: restaurantData.timezone || 'Europe/London',\n        todayTransactions: 0,\n        todayRevenue: 0,\n        activeOrders: 0,\n        averageOrderValue: 0,\n        ...restaurantData,\n      };\n\n      // Save to shared data store\n      await this.dataStore.setPlatformSetting(`restaurant.${newRestaurant.id}`, _newRestaurant);\n\n      // Add to platform restaurants\n      const platformRestaurants = await this.getPlatformRestaurants(newRestaurant.platformOwnerId);\n      platformRestaurants.push(__newRestaurant);\n      await this.savePlatformRestaurants(newRestaurant.platformOwnerId, _platformRestaurants);\n\n      // Set as current restaurant\n      this.currentRestaurantId = newRestaurant.id;\n      await AsyncStorage.setItem('current_restaurant_id', newRestaurant.id);\n\n      return newRestaurant;\n    } catch (__error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Update restaurant metrics (called from POS operations)\n   */\n  async updateMetrics(metrics: {\n    todayTransactions?: number;\n    todayRevenue?: number;\n    activeOrders?: number;\n    averageOrderValue?: number;\n  }): Promise<void> {\n    try {\n      const current = await this.getCurrentRestaurantData();\n      if (!current) {\n        return;\n      }\n\n      await this.updateCurrentRestaurant(__metrics);\n    } catch (__error) {\n    }\n  }\n\n  /**\n   * Subscribe to restaurant data changes\n   */\n  subscribeToRestaurant(\n    restaurantId: _string,\n    callback: (data: _RestaurantData) => void,\n  ): () => void {\n    return this.dataStore.subscribe(`restaurant.${restaurantId}`, _callback);\n  }\n\n  /**\n   * Subscribe to platform restaurants changes\n   */\n  subscribeToPlatformRestaurants(\n    platformOwnerId: _string,\n    callback: (restaurants: RestaurantData[]) => void,\n  ): () => void {\n    return this.dataStore.subscribe(`restaurants.${platformOwnerId}`, _callback);\n  }\n\n  /**\n   * Convert RestaurantData to Business type for compatibility\n   */\n  toBusinessType(restaurant: _RestaurantData): Business {\n    return {\n      id: restaurant.id,\n      name: restaurant.name,\n      address: restaurant.address,\n      phone: restaurant.phone,\n      email: restaurant.email,\n      vatNumber: restaurant.vatNumber,\n      registrationNumber: restaurant.registrationNumber,\n      type: 'restaurant',\n      currency: restaurant.currency,\n      timezone: restaurant.timezone,\n      ownerId: restaurant.ownerId,\n      platformOwnerId: restaurant.platformOwnerId,\n      subscriptionTier: restaurant.subscriptionTier,\n      isActive: restaurant.isActive,\n      joinedDate: restaurant.joinedDate,\n      lastActivity: restaurant.lastActivity,\n      monthlyRevenue: restaurant.monthlyRevenue,\n      commissionRate: restaurant.commissionRate,\n    };\n  }\n}\n\nexport default RestaurantDataService;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/services/SecurePaymentConfig.ts","messages":[{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty constructor.","line":42,"column":25,"nodeType":"FunctionExpression","messageId":"unexpected","endLine":42,"endColumn":27}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Secure Payment Configuration Service\n *\n * Handles loading payment configuration from backend without exposing sensitive data\n * All credentials remain server-side, only public keys are sent to frontend\n */\n\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport tokenManager from '../utils/tokenManager';\nimport { API_CONFIG } from '../config/api';\n\nexport interface PaymentMethod {\n  id: string;\n  name: string;\n  icon: string;\n  enabled: boolean;\n  minAmount: number;\n  maxAmount: number;\n}\n\nexport interface FeeStructure {\n  percentage: number;\n  fixed: number;\n  description: string;\n}\n\nexport interface PaymentConfig {\n  availableMethods: PaymentMethod[];\n  fees: Record<string, FeeStructure>;\n  publishableKeys?: Record<string, string>; // Only public keys, never secret keys\n  primaryProvider?: string;\n}\n\nclass SecurePaymentConfigService {\n  private static instance: SecurePaymentConfigService;\n  private config: PaymentConfig | null = null;\n  private configCacheKey = '@payment_config_cache';\n  private configCacheExpiry = 3600000; // 1 hour cache\n  private loading = false;\n  private loadingPromise: Promise<PaymentConfig> | null = null;\n\n  private constructor() {}\n\n  static getInstance(): SecurePaymentConfigService {\n    if (!SecurePaymentConfigService.instance) {\n      SecurePaymentConfigService.instance = new SecurePaymentConfigService();\n    }\n    return SecurePaymentConfigService.instance;\n  }\n\n  /**\n   * Load payment configuration from backend\n   * Uses caching to minimize API calls\n   */\n  async loadConfiguration(forceRefresh = false): Promise<PaymentConfig> {\n    // Return existing promise if already loading\n    if (this.loading && this.loadingPromise) {\n      return this.loadingPromise;\n    }\n\n    // Return cached config if valid and not forcing refresh\n    if (!forceRefresh && this.config) {\n      return this.config;\n    }\n\n    // Check cache\n    if (!forceRefresh) {\n      const cached = await this.getCachedConfig();\n      if (__cached) {\n        this.config = cached;\n        return cached;\n      }\n    }\n\n    // Start loading\n    this.loading = true;\n    this.loadingPromise = this.fetchConfiguration();\n\n    try {\n      const config = await this.loadingPromise;\n      this.config = config;\n      await this.cacheConfig(__config);\n      return config;\n    } finally {\n      this.loading = false;\n      this.loadingPromise = null;\n    }\n  }\n\n  /**\n   * Fetch configuration from backend\n   */\n  private async fetchConfiguration(): Promise<PaymentConfig> {\n    try {\n      // Get auth token\n      const token = await tokenManager.getTokenWithRefresh();\n      if (!token) {\n        throw new Error('Authentication required');\n      }\n\n      // Fetch payment methods and fees\n      const response = await fetch(`${API_CONFIG.FULL_API_URL}/payments/methods`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to load payment config: ${response.status}`);\n      }\n\n      const result = await response.json();\n      const data = result.data || result;\n\n      // Validate response structure\n      if (!data.methods || !data.fees) {\n        throw new Error('Invalid payment configuration response');\n      }\n\n      // Transform to internal format\n      const config: PaymentConfig = {\n        availableMethods: data.methods,\n        fees: data.fees,\n        publishableKeys: data.publishableKeys || {},\n        primaryProvider: data.primaryProvider,\n      };\n\n      return config;\n    } catch (__error) {\n      // Return minimal config on error\n      return {\n        availableMethods: [\n          {\n            id: 'cash',\n            name: 'Cash',\n            icon: 'cash',\n            enabled: _true,\n            minAmount: 0.01,\n            maxAmount: 10000,\n          },\n        ],\n        fees: {\n          cash: {\n            percentage: 0,\n            fixed: 0,\n            description: 'No fees',\n          },\n        },\n      };\n    }\n  }\n\n  /**\n   * Get cached configuration\n   */\n  private async getCachedConfig(): Promise<PaymentConfig | null> {\n    try {\n      const cached = await AsyncStorage.getItem(this.configCacheKey);\n      if (!cached) {\n        return null;\n      }\n\n      const { config, timestamp } = JSON.parse(__cached);\n\n      // Check if cache is expired\n      if (Date.now() - timestamp > this.configCacheExpiry) {\n        await AsyncStorage.removeItem(this.configCacheKey);\n        return null;\n      }\n\n      return config;\n    } catch (__error) {\n      return null;\n    }\n  }\n\n  /**\n   * Cache configuration\n   */\n  private async cacheConfig(config: _PaymentConfig): Promise<void> {\n    try {\n      await AsyncStorage.setItem(\n        this.configCacheKey,\n        JSON.stringify({\n          config,\n          timestamp: Date.now(),\n        }),\n      );\n    } catch (__error) {\n      // Error handled silently\n    }\n  }\n\n  /**\n   * Get publishable key for a provider\n   * Only returns public keys, never secret keys\n   */\n  getPublishableKey(provider: _string): string | null {\n    if (!this.config || !this.config.publishableKeys) {\n      return null;\n    }\n    return this.config.publishableKeys[provider] || null;\n  }\n\n  /**\n   * Get available payment methods\n   */\n  getAvailableMethods(): PaymentMethod[] {\n    return this.config?.availableMethods || [];\n  }\n\n  /**\n   * Get fee structure for a payment method\n   */\n  getFeeStructure(method: _string): FeeStructure | null {\n    if (!this.config || !this.config.fees) {\n      return null;\n    }\n    return this.config.fees[method] || null;\n  }\n\n  /**\n   * Calculate fees for an amount and payment method\n   */\n  calculateFees(\n    amount: _number,\n    _method: _string,\n  ): {\n    percentageFee: number;\n    fixedFee: number;\n    totalFee: number;\n    netAmount: number;\n  } {\n    const feeStructure = this.getFeeStructure(__method);\n\n    if (!feeStructure) {\n      return {\n        percentageFee: 0,\n        fixedFee: 0,\n        totalFee: 0,\n        netAmount: _amount,\n      };\n    }\n\n    const percentageFee = amount * (feeStructure.percentage / 100);\n    const fixedFee = feeStructure.fixed;\n    const totalFee = percentageFee + fixedFee;\n    const netAmount = amount - totalFee;\n\n    // Round to 2 decimal places\n    return {\n      percentageFee: Math.round(percentageFee * 100) / 100,\n      fixedFee: Math.round(fixedFee * 100) / 100,\n      totalFee: Math.round(totalFee * 100) / 100,\n      netAmount: Math.round(netAmount * 100) / 100,\n    };\n  }\n\n  /**\n   * Format fee display for UI\n   */\n  formatFeeDisplay(_method: _string): string {\n    const feeStructure = this.getFeeStructure(__method);\n\n    if (!feeStructure) {\n      return 'Fee unavailable';\n    }\n\n    if (feeStructure.percentage === 0 && feeStructure.fixed === 0) {\n      return 'No fees';\n    }\n\n    return (\n      feeStructure.description ||\n      `${feeStructure.percentage}%${\n        feeStructure.fixed > 0 ? ` + £${feeStructure.fixed.toFixed(2)}` : ''\n      }`\n    );\n  }\n\n  /**\n   * Clear cached configuration\n   */\n  async clearCache(): Promise<void> {\n    this.config = null;\n    await AsyncStorage.removeItem(this.configCacheKey);\n  }\n\n  /**\n   * Check if a payment method is available\n   */\n  isMethodAvailable(methodId: _string): boolean {\n    const methods = this.getAvailableMethods();\n    return methods.some(m => m.id === methodId && m.enabled);\n  }\n\n  /**\n   * Get primary payment provider\n   */\n  getPrimaryProvider(): string | null {\n    return this.config?.primaryProvider || null;\n  }\n\n  /**\n   * Validate payment amount for method\n   */\n  validateAmount(\n    amount: _number,\n    method: _string,\n  ): {\n    valid: boolean;\n    error?: string;\n  } {\n    const methods = this.getAvailableMethods();\n    const methodConfig = methods.find(m => m.id === method);\n\n    if (!methodConfig) {\n      return { valid: _false, error: 'Payment method not available' };\n    }\n\n    if (amount < methodConfig.minAmount) {\n      return {\n        valid: _false,\n        error: `Minimum amount is £${methodConfig.minAmount.toFixed(2)}`,\n      };\n    }\n\n    if (amount > methodConfig.maxAmount) {\n      return {\n        valid: _false,\n        error: `Maximum amount is £${methodConfig.maxAmount.toFixed(2)}`,\n      };\n    }\n\n    return { valid: true };\n  }\n}\n\nexport default SecurePaymentConfigService.getInstance();\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/services/SharedDataStore.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":38,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[964,967],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[964,967],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty constructor.","line":40,"column":25,"nodeType":"FunctionExpression","messageId":"unexpected","endLine":40,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_stored' is assigned a value but never used.","line":96,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":96,"endColumn":20},{"ruleId":"dot-notation","severity":1,"message":"[\"Authorization\"] is better written in dot notation.","line":140,"column":19,"nodeType":"Literal","messageId":"useDot","endLine":140,"endColumn":34,"fix":{"range":[4310,4327],"text":".Authorization"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_requestBody' is assigned a value but never used.","line":144,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":144,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_result' is assigned a value but never used.","line":158,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":158,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_errorText' is assigned a value but never used.","line":173,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":173,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_stored' is assigned a value but never used.","line":198,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":198,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_stored' is assigned a value but never used.","line":246,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":246,"endColumn":20},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":283,"column":5,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":283,"endColumn":33,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[8484,8485],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_platformKeys' is assigned a value but never used.","line":311,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":311,"endColumn":26}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"/**\n * SharedDataStore - Real API-based data store\n * Replaces AsyncStorage with real backend API calls for cross-device sync\n */\n\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport tokenManager from '../utils/tokenManager';\n\n// API Configuration and robust networking\nimport API_CONFIG from '../config/api';\nimport NetworkUtils from '../utils/NetworkUtils';\nconst API_BASE_URL = API_CONFIG.FULL_API_URL;\n\ninterface ServiceChargeConfig {\n  enabled: boolean;\n  rate: number;\n  description: string;\n  lastUpdated: string;\n}\n\ninterface PaymentConfig {\n  sumupEnabled: boolean;\n  sumupFeeRate: number;\n  cardPaymentsEnabled: boolean;\n  qrPaymentsEnabled: boolean;\n  cashPaymentsEnabled: boolean;\n  lastUpdated: string;\n}\n\ninterface PlatformSettings {\n  serviceCharge: ServiceChargeConfig;\n  payments: PaymentConfig;\n  [key: string]: unknown;\n}\n\nclass SharedDataStore {\n  private static instance: SharedDataStore;\n  private cache: Map<string, any> = new Map();\n\n  private constructor() {}\n\n  static getInstance(): SharedDataStore {\n    if (!SharedDataStore.instance) {\n      SharedDataStore.instance = new SharedDataStore();\n    }\n    return SharedDataStore.instance;\n  }\n\n  // Service Charge Management\n  async getServiceChargeConfig(): Promise<ServiceChargeConfig> {\n    try {\n      // Try to get from real backend API first using robust networking\n      const networkResult = await NetworkUtils.getServiceChargeConfig();\n\n      if (networkResult.success && networkResult.data) {\n        // Handle different API response formats\n        let config: ServiceChargeConfig;\n        const result = networkResult.data;\n\n        if (result.data && result.data.service_charge) {\n          // API response with wrapped data\n          const serviceChargeData = result.data.service_charge;\n          config = {\n            enabled: serviceChargeData.enabled,\n            rate: serviceChargeData.rate,\n            description: serviceChargeData.description,\n            lastUpdated: new Date().toISOString(),\n          };\n        } else if (result.service_charge) {\n          // Direct service_charge object\n          config = {\n            enabled: result.service_charge.enabled,\n            rate: result.service_charge.rate,\n            description: result.service_charge.description,\n            lastUpdated: new Date().toISOString(),\n          };\n        } else {\n          // Fallback if structure is different\n          config = {\n            enabled: result.enabled ?? true,\n            rate: result.rate ?? 12.5,\n            description: result.description ?? 'Platform service charge',\n            lastUpdated: new Date().toISOString(),\n          };\n        }\n\n        // Cache the result and save to AsyncStorage for offline use\n        this.cache.set('serviceCharge', _config);\n        await AsyncStorage.setItem('platform.serviceCharge', JSON.stringify(__config));\n        return config;\n      } else {\n        // No action needed\n      }\n\n      // Fallback to AsyncStorage if API fails\n      const _stored = await AsyncStorage.getItem('platform.serviceCharge');\n      if (__stored) {\n        const config = JSON.parse(__stored);\n        this.cache.set('serviceCharge', _config);\n        return config;\n      }\n\n      // Default configuration if everything fails\n      const defaultConfig: ServiceChargeConfig = {\n        enabled: _true,\n        rate: 12.5,\n        description: 'Platform service charge',\n        lastUpdated: new Date().toISOString(),\n      };\n\n      await this.setServiceChargeConfig(__defaultConfig);\n      return defaultConfig;\n    } catch (__error) {\n      // Emergency fallback to default\n      return {\n        enabled: _true,\n        rate: 12.5,\n        description: 'Platform service charge',\n        lastUpdated: new Date().toISOString(),\n      };\n    }\n  }\n\n  async setServiceChargeConfig(config: _ServiceChargeConfig): Promise<void> {\n    try {\n      const _configWithTimestamp = {\n        ...config,\n        lastUpdated: new Date().toISOString(),\n      };\n\n      // Save to real backend API first\n      try {\n        // Get auth token for API requests\n        const authToken = await tokenManager.getTokenWithRefresh();\n        const headers: unknown = {\n          'Content-Type': 'application/json',\n        };\n\n        if (__authToken) {\n          headers['Authorization'] = `Bearer ${authToken}`;\n        }\n\n        // Prepare the request body to match backend schema\n        const _requestBody = {\n          enabled: config.enabled,\n          rate: config.rate,\n          description: config.description,\n          currency: 'GBP', // Default currency\n        };\n\n        const response = await fetch(`${API_BASE_URL}/platform/service-charge`, {\n          method: 'PUT', // Changed from POST to PUT to match backend endpoint\n          headers,\n          body: JSON.stringify(__requestBody),\n        });\n\n        if (response.ok) {\n          const _result = await response.json();\n\n          // Update cache with confirmed data\n          this.cache.set('serviceCharge', _configWithTimestamp);\n\n          // Also save locally as backup\n          await AsyncStorage.setItem(\n            'platform.serviceCharge',\n            JSON.stringify(__configWithTimestamp),\n          );\n\n          // Trigger sync event for real-time updates\n          this.notifySubscribers('serviceCharge', _configWithTimestamp);\n          return;\n        } else {\n          const _errorText = await response.text();\n        }\n      } catch (__apiError) {\n        // Error handled silently\n      }\n\n      // Fallback to AsyncStorage if API fails\n      await AsyncStorage.setItem('platform.serviceCharge', JSON.stringify(__configWithTimestamp));\n      this.cache.set('serviceCharge', _configWithTimestamp);\n\n      // Trigger sync event for real-time updates\n      this.notifySubscribers('serviceCharge', _configWithTimestamp);\n    } catch (__error) {\n      throw error;\n    }\n  }\n\n  // Payment Configuration Management\n  async getPaymentConfig(): Promise<PaymentConfig> {\n    try {\n      const cached = this.cache.get('payments');\n      if (__cached) {\n        return cached;\n      }\n\n      const _stored = await AsyncStorage.getItem('platform.payments');\n      if (__stored) {\n        const config = JSON.parse(__stored);\n        this.cache.set('payments', _config);\n        return config;\n      }\n\n      // Default payment configuration\n      const defaultConfig: PaymentConfig = {\n        sumupEnabled: _true,\n        sumupFeeRate: 0.69,\n        cardPaymentsEnabled: _true,\n        qrPaymentsEnabled: _true,\n        cashPaymentsEnabled: _true,\n        lastUpdated: new Date().toISOString(),\n      };\n\n      await this.setPaymentConfig(__defaultConfig);\n      return defaultConfig;\n    } catch (__error) {\n      throw error;\n    }\n  }\n\n  async setPaymentConfig(config: _PaymentConfig): Promise<void> {\n    try {\n      const _configWithTimestamp = {\n        ...config,\n        lastUpdated: new Date().toISOString(),\n      };\n\n      await AsyncStorage.setItem('platform.payments', JSON.stringify(__configWithTimestamp));\n      this.cache.set('payments', _configWithTimestamp);\n\n      this.notifySubscribers('payments', _configWithTimestamp);\n    } catch (__error) {\n      throw error;\n    }\n  }\n\n  // Generic platform setting management\n  async getPlatformSetting(key: _string): Promise<unknown> {\n    try {\n      const cached = this.cache.get(__key);\n      if (__cached) {\n        return cached;\n      }\n\n      const _stored = await AsyncStorage.getItem(`platform.${key}`);\n      if (__stored) {\n        const value = JSON.parse(__stored);\n        this.cache.set(__key, _value);\n        return value;\n      }\n\n      return null;\n    } catch (__error) {\n      return null;\n    }\n  }\n\n  async setPlatformSetting(key: _string, _value: _unknown): Promise<void> {\n    try {\n      const _valueWithTimestamp = {\n        data: _value,\n        lastUpdated: new Date().toISOString(),\n      };\n\n      await AsyncStorage.setItem(`platform.${key}`, JSON.stringify(__valueWithTimestamp));\n      this.cache.set(__key, _valueWithTimestamp);\n\n      this.notifySubscribers(__key, _valueWithTimestamp);\n    } catch (__error) {\n      throw error;\n    }\n  }\n\n  // Real-time subscription system\n  private subscribers: Map<string, Set<(data: _unknown) => void>> = new Map();\n\n  subscribe(_key: _string, _callback: (data: _unknown) => void): () => void {\n    if (!this.subscribers.has(__key)) {\n      this.subscribers.set(__key, new Set());\n    }\n\n    this.subscribers.get(__key)!.add(__callback);\n\n    // Return unsubscribe function\n    return () => {\n      const subs = this.subscribers.get(__key);\n      if (__subs) {\n        subs.delete(__callback);\n      }\n    };\n  }\n\n  private notifySubscribers(_key: _string, _data: _unknown): void {\n    const subs = this.subscribers.get(__key);\n    if (__subs) {\n      subs.forEach(callback => {\n        try {\n          callback(__data);\n        } catch (__error) {\n          // Error handled silently\n        }\n      });\n    }\n  }\n\n  // Clear all cached data (for development/testing)\n  async clearAll(): Promise<void> {\n    try {\n      const keys = await AsyncStorage.getAllKeys();\n      const _platformKeys = keys.filter(key => key.startsWith('platform.'));\n\n      await AsyncStorage.multiRemove(__platformKeys);\n      this.cache.clear();\n    } catch (__error) {\n      throw error;\n    }\n  }\n\n  // Get all platform settings\n  async getAllPlatformSettings(): Promise<PlatformSettings> {\n    try {\n      const serviceCharge = await this.getServiceChargeConfig();\n      const payments = await this.getPaymentConfig();\n\n      return {\n        serviceCharge,\n        payments,\n      };\n    } catch (__error) {\n      throw error;\n    }\n  }\n}\n\nexport default SharedDataStore;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/services/SimpleErrorTrackingService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[291,294],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[291,294],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":51,"column":9,"nodeType":"BlockStatement","messageId":"unexpected","endLine":52,"endColumn":6,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[1267,1272],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_errorEntry' is assigned a value but never used.","line":59,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":59,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_messageEntry' is assigned a value but never used.","line":88,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":88,"endColumn":26},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":103,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2404,2407],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2404,2407],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":104,"column":9,"nodeType":"BlockStatement","messageId":"unexpected","endLine":105,"endColumn":6,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[2427,2432],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":166,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":166,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3977,3980],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3977,3980],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":167,"column":9,"nodeType":"BlockStatement","messageId":"unexpected","endLine":168,"endColumn":6,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[4000,4005],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":174,"column":9,"nodeType":"BlockStatement","messageId":"unexpected","endLine":175,"endColumn":6,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[4126,4131],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":180,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":180,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4247,4250],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4247,4250],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":181,"column":9,"nodeType":"BlockStatement","messageId":"unexpected","endLine":182,"endColumn":6,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[4270,4275],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Simple Error Tracking Service\n * Basic error tracking without external dependencies for immediate deployment\n */\n\nexport interface ErrorContext {\n  userId?: string;\n  userEmail?: string;\n  userRole?: string;\n  screenName?: string;\n  action?: string;\n  additionalData?: Record<string, any>;\n}\n\nclass SimpleErrorTrackingService {\n  private static instance: SimpleErrorTrackingService;\n  private isInitialized = false;\n  private errorLog: Array<{\n    timestamp: string;\n    error: string;\n    context?: ErrorContext;\n    stack?: string;\n  }> = [];\n\n  static getInstance(): SimpleErrorTrackingService {\n    if (!SimpleErrorTrackingService.instance) {\n      SimpleErrorTrackingService.instance = new SimpleErrorTrackingService();\n    }\n    return SimpleErrorTrackingService.instance;\n  }\n\n  initialize(): void {\n    if (this.isInitialized) {\n      return;\n    }\n\n    try {\n      this.isInitialized = true;\n\n      // Track successful initialization\n      this.trackEvent('error_tracking_initialized', {\n        timestamp: new Date().toISOString(),\n        environment: __DEV__ ? 'development' : 'production',\n      });\n    } catch (__error) {\n      // Error handled silently\n    }\n  }\n\n  setUser(_userId: _string, _email?: _string, _role?: _string): void {\n    try {\n    } catch (__error) {\n      // Error handled silently\n    }\n  }\n\n  captureError(error: _Error, context?: _ErrorContext): void {\n    try {\n      const _errorEntry = {\n        timestamp: new Date().toISOString(),\n        error: error.message,\n        context,\n        stack: error.stack,\n      };\n\n      this.errorLog.push(__errorEntry);\n\n      // Keep only last 100 errors to prevent memory issues\n      if (this.errorLog.length > 100) {\n        this.errorLog = this.errorLog.slice(-100);\n      }\n\n      // In development, also log the full error\n      if (____DEV__) {\n        // No action needed\n      }\n    } catch (__trackingError) {\n      // Error handled silently\n    }\n  }\n\n  captureMessage(\n    message: _string,\n    level: 'info' | 'warning' | 'error' = 'info',\n    context?: _ErrorContext,\n  ): void {\n    try {\n      const _messageEntry = {\n        timestamp: new Date().toISOString(),\n        message,\n        level,\n        context,\n      };\n\n      if (____DEV__) {\n        // No action needed\n      }\n    } catch (__error) {\n      // Error handled silently\n    }\n  }\n\n  trackEvent(_event: _string, _data?: Record<string, any>): void {\n    try {\n    } catch (__error) {\n      // Error handled silently\n    }\n  }\n\n  // Specific tracking methods for common issues\n  trackPricingError(error: _Error, itemData?: _unknown, calculationContext?: _unknown): void {\n    this.captureError(__error, {\n      action: 'pricing_calculation',\n      screenName: 'POS',\n      additionalData: {\n        itemData,\n        calculationContext,\n        errorType: 'pricing_nan_error',\n      },\n    });\n  }\n\n  trackNetworkError(error: _Error, endpoint?: _string, method?: _string): void {\n    this.captureError(__error, {\n      action: 'network_request',\n      additionalData: {\n        endpoint,\n        method,\n        errorType: 'network_error',\n      },\n    });\n  }\n\n  trackUIError(error: _Error, component?: _string, props?: _unknown): void {\n    this.captureError(__error, {\n      action: 'ui_render',\n      additionalData: {\n        component,\n        props,\n        errorType: 'ui_render_error',\n      },\n    });\n  }\n\n  trackBusinessLogicError(error: _Error, operation?: _string, data?: _unknown): void {\n    this.captureError(__error, {\n      action: 'business_logic',\n      additionalData: {\n        operation,\n        data,\n        errorType: 'business_logic_error',\n      },\n    });\n  }\n\n  // User feedback collection (__placeholder)\n  showUserFeedbackDialog(): void {\n    try {\n      // TODO: Implement native feedback dialog or custom modal\n    } catch (__error) {\n      // Error handled silently\n    }\n  }\n\n  // Debug helpers\n  addBreadcrumb(message: _string, _category = 'debug', _data?: Record<string, any>): void {\n    try {\n    } catch (__error) {\n      // Error handled silently\n    }\n  }\n\n  setTag(_key: _string, _value: _string): void {\n    try {\n    } catch (__error) {\n      // Error handled silently\n    }\n  }\n\n  setContext(_key: _string, _context: Record<string, any>): void {\n    try {\n    } catch (__error) {\n      // Error handled silently\n    }\n  }\n\n  // Get error log for debugging\n  getErrorLog(): Array<unknown> {\n    return [...this.errorLog];\n  }\n\n  // Clear error log\n  clearErrorLog(): void {\n    this.errorLog = [];\n  }\n\n  // Flush pending events (__placeholder)\n  flush(_timeout = 2000): Promise<boolean> {\n    try {\n      return Promise.resolve(__true);\n    } catch (__error) {\n      return Promise.resolve(__false);\n    }\n  }\n}\n\nexport default SimpleErrorTrackingService;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/services/SquareInitService.ts","messages":[{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty constructor.","line":13,"column":25,"nodeType":"FunctionExpression","messageId":"unexpected","endLine":13,"endColumn":27}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * SquareInitService - Initialize Square SDK with proper configuration\n * This service handles the setup and initialization of Square payments\n */\n\nimport SquareService from './SquareService';\nimport { getSquareConfig, getSquareLocationId } from '../config/square';\n\nclass SquareInitService {\n  private static instance: SquareInitService;\n  private initialized = false;\n\n  private constructor() {}\n\n  static getInstance(): SquareInitService {\n    if (!SquareInitService.instance) {\n      SquareInitService.instance = new SquareInitService();\n    }\n    return SquareInitService.instance;\n  }\n\n  /**\n   * Initialize Square SDK with proper configuration\n   */\n  async initializeSquare(): Promise<boolean> {\n    if (this.initialized) {\n      return true;\n    }\n\n    try {\n      const config = getSquareConfig();\n      const locationId = getSquareLocationId();\n\n      // Check if we have valid configuration\n      if (config.applicationId.includes('YOUR_') || locationId.includes('YOUR_')) {\n        // Return true to allow development but warn about configuration\n        return true;\n      }\n\n      await SquareService.initialize({\n        applicationId: config.applicationId,\n        locationId: _locationId,\n        environment: config.environment,\n        baseUrl: config.baseUrl,\n      });\n\n      this.initialized = true;\n      return true;\n    } catch (__error) {\n      return false;\n    }\n  }\n\n  /**\n   * Check if Square is properly configured\n   */\n  isConfigured(): boolean {\n    const config = getSquareConfig();\n    const locationId = getSquareLocationId();\n\n    return !config.applicationId.includes('YOUR_') && !locationId.includes('YOUR_');\n  }\n\n  /**\n   * Get configuration status for display\n   */\n  getConfigurationStatus() {\n    const config = getSquareConfig();\n    const locationId = getSquareLocationId();\n\n    return {\n      hasApplicationId: !config.applicationId.includes('YOUR_'),\n      hasLocationId: !locationId.includes('YOUR_'),\n      environment: config.environment,\n      isInitialized: this.initialized,\n    };\n  }\n}\n\nexport default SquareInitService;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/services/SquareService.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Expression expected.","line":26,"column":2,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * SquareService - Comprehensive service for Square payment operations\n * Handles Square-specific functionality including card payments, contactless payments,\n * OAuth token management, and integration with Square's In-App Payments SDK\n * Positioned as secondary payment method to SumUp\n */\n\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { Platform } from 'react-native';\n\n// Square SDK imports - conditionally loaded to prevent crashes\nlet SQIPCore: unknown;\nlet SQIPCardEntry: unknown;\nlet SQIPApplePay: unknown;\nlet SQIPGooglePay: unknown;\n\ntry {\n// eslint-disable-next-line @typescript-eslint/no-var-requires\n  const SquareSDK = require('react-native-square-in-app-payments');\n  SQIPCore = SquareSDK.SQIPCore;\n  SQIPCardEntry = SquareSDK.SQIPCardEntry;\n  SQIPApplePay = SquareSDK.SQIPApplePay;\n  SQIPGooglePay = SquareSDK.SQIPGooglePay;\n} catch (__error) {\n    'Square SDK not available. Square payments will be disabled. Please install dependencies with: npm install && cd ios && pod install',\n  );\n}\n\nexport interface SquareConfig {\n  applicationId: string;\n  locationId: string;\n  environment: 'sandbox' | 'production';\n  accessToken?: string;\n  baseUrl: string;\n}\n\nexport interface SquarePaymentResult {\n  success: boolean;\n  nonce?: string;\n  transactionId?: string;\n  error?: string;\n  paymentMethod?: 'card' | 'apple_pay' | 'google_pay';\n}\n\nexport interface SquareCardPayment {\n  id: string;\n  amount: number;\n  currency: string;\n  status: 'pending' | 'processing' | 'completed' | 'failed' | 'cancelled';\n  nonce?: string;\n  cardBrand?: string;\n  lastFourDigits?: string;\n  errorMessage?: string;\n}\n\nexport interface SquareContactlessPayment {\n  id: string;\n  amount: number;\n  currency: string;\n  status: 'pending' | 'processing' | 'completed' | 'failed' | 'cancelled';\n  paymentMethod: 'apple_pay' | 'google_pay';\n  deviceSupported: boolean;\n  errorMessage?: string;\n}\n\nexport interface SquareFeeStructure {\n  inPersonRate: number; // 1.75%\n  onlineRateUK: number; // 1.4%\n  onlineFixedFeeUK: number; // 25p\n  onlineRateNonUK: number; // 2.5%\n  onlineFixedFeeNonUK: number; // 25p\n  manualKeyedRate: number; // 2.5%\n  currency: string;\n}\n\nclass SquareServiceClass {\n  private static instance: SquareServiceClass;\n  private config: SquareConfig | null = null;\n  private initialized = false;\n  private feeStructure: SquareFeeStructure = {\n    inPersonRate: 0.0175, // 1.75%\n    onlineRateUK: 0.014, // 1.4%\n    onlineFixedFeeUK: 0.25, // 25p\n    onlineRateNonUK: 0.025, // 2.5%\n    onlineFixedFeeNonUK: 0.25, // 25p\n    manualKeyedRate: 0.025, // 2.5%\n    currency: 'GBP',\n  };\n\n  private constructor() {}\n\n  static getInstance(): SquareServiceClass {\n    if (!SquareServiceClass.instance) {\n      SquareServiceClass.instance = new SquareServiceClass();\n    }\n    return SquareServiceClass.instance;\n  }\n\n  /**\n   * Initialize Square service with configuration\n   */\n  async initialize(config: _SquareConfig): Promise<void> {\n    try {\n      this.config = config;\n\n      // Initialize Square SDK if available\n      if (__SQIPCore) {\n        await SQIPCore.setSquareApplicationId(config.applicationId);\n      } else {\n        throw new Error(this.getSDKUnavailableMessage());\n      }\n\n      this.initialized = true;\n      await this.saveConfig(__config);\n    } catch (__error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Process card payment using Square SDK\n   */\n  async processCardPayment(\n    amount: _number,\n    currency = 'GBP',\n    description?: _string,\n  ): Promise<SquareCardPayment> {\n    try {\n      if (!this.initialized || !this.config) {\n        throw new Error('Square service not initialized');\n      }\n\n      const paymentId = this.generatePaymentId();\n\n      // Check if SDK is available\n      if (!SQIPCardEntry) {\n        return {\n          id: _paymentId,\n          amount: _amount,\n          currency: _currency,\n          status: 'failed',\n          errorMessage: this.getSDKUnavailableMessage(),\n        };\n      }\n\n      // Start Square card entry flow\n      const cardEntryResult = await SQIPCardEntry.startCardEntryFlow({\n        collectPostalCode: _false,\n        skipCardHolderNameEntry: _true,\n      });\n\n      if (cardEntryResult.canceled) {\n        return {\n          id: _paymentId,\n          amount: _amount,\n          currency: _currency,\n          status: 'cancelled',\n          errorMessage: 'Payment cancelled by user',\n        };\n      }\n\n      if (cardEntryResult.nonce) {\n        // Process payment with the nonce\n        const paymentResult = await this.processPaymentWithNonce(\n          cardEntryResult.nonce,\n          amount,\n          currency,\n        );\n\n        if (paymentResult.success) {\n          return {\n            id: _paymentId,\n            amount: _amount,\n            currency: _currency,\n            status: 'completed',\n            nonce: cardEntryResult.nonce,\n            cardBrand: cardEntryResult.card?.brand,\n            lastFourDigits: cardEntryResult.card?.lastFourDigits,\n          };\n        }\n      }\n\n      return {\n        id: _paymentId,\n        amount: _amount,\n        currency: _currency,\n        status: 'failed',\n        errorMessage: 'Square SDK not available - placeholder implementation',\n      };\n    } catch (__error) {\n      return {\n        id: this.generatePaymentId(),\n        amount: _amount,\n        currency: _currency,\n        status: 'failed',\n        errorMessage: error instanceof Error ? error.message : 'Card payment failed',\n      };\n    }\n  }\n\n  /**\n   * Process contactless payment (Apple Pay / Google Pay)\n   */\n  async processContactlessPayment(\n    amount: _number,\n    currency = 'GBP',\n    paymentMethod: 'apple_pay' | 'google_pay',\n    description?: _string,\n  ): Promise<SquareContactlessPayment> {\n    try {\n      if (!this.initialized || !this.config) {\n        throw new Error('Square service not initialized');\n      }\n\n      const paymentId = this.generatePaymentId();\n\n      // Check device support\n      const deviceSupported = await this.isContactlessSupported(__paymentMethod);\n      if (!deviceSupported) {\n        return {\n          id: _paymentId,\n          amount: _amount,\n          currency: _currency,\n          status: 'failed',\n          paymentMethod: _paymentMethod,\n          deviceSupported: _false,\n          errorMessage: `${paymentMethod} not supported on this device`,\n        };\n      }\n\n      // Implement contactless payment flows\n      let nonce: string | null = null;\n\n      if (paymentMethod === 'apple_pay') {\n        if (!SQIPApplePay) {\n          return {\n            id: _paymentId,\n            amount: _amount,\n            currency: _currency,\n            status: 'failed',\n            paymentMethod: _paymentMethod,\n            deviceSupported: _false,\n            errorMessage: this.getSDKUnavailableMessage(),\n          };\n        }\n        await SQIPApplePay.initializeApplePay(this.config.applicationId);\n        const applePayResult = await SQIPApplePay.requestApplePayNonce({\n          price: amount.toString(),\n          summaryLabel: description || 'Fynlo POS Payment',\n          countryCode: 'GB',\n          currencyCode: _currency,\n        });\n\n        if (applePayResult.nonce) {\n          nonce = applePayResult.nonce;\n        } else if (applePayResult.canceled) {\n          return {\n            id: _paymentId,\n            amount: _amount,\n            currency: _currency,\n            status: 'cancelled',\n            paymentMethod: _paymentMethod,\n            deviceSupported: _deviceSupported,\n            errorMessage: 'Payment cancelled by user',\n          };\n        }\n      } else if (paymentMethod === 'google_pay') {\n        if (!SQIPGooglePay) {\n          return {\n            id: _paymentId,\n            amount: _amount,\n            currency: _currency,\n            status: 'failed',\n            paymentMethod: _paymentMethod,\n            deviceSupported: _false,\n            errorMessage: this.getSDKUnavailableMessage(),\n          };\n        }\n        await SQIPGooglePay.initializeGooglePay(this.config.applicationId, this.config.locationId);\n        const googlePayResult = await SQIPGooglePay.requestGooglePayNonce({\n          price: amount.toString(),\n          currencyCode: _currency,\n          priceStatus: 'FINAL',\n        });\n\n        if (googlePayResult.nonce) {\n          nonce = googlePayResult.nonce;\n        } else if (googlePayResult.canceled) {\n          return {\n            id: _paymentId,\n            amount: _amount,\n            currency: _currency,\n            status: 'cancelled',\n            paymentMethod: _paymentMethod,\n            deviceSupported: _deviceSupported,\n            errorMessage: 'Payment cancelled by user',\n          };\n        }\n      }\n\n      // Process payment with obtained nonce\n      if (__nonce) {\n        const paymentResult = await this.processPaymentWithNonce(__nonce, _amount, currency);\n\n        if (paymentResult.success) {\n          return {\n            id: _paymentId,\n            amount: _amount,\n            currency: _currency,\n            status: 'completed',\n            paymentMethod: _paymentMethod,\n            deviceSupported: _deviceSupported,\n          };\n        }\n      }\n      return {\n        id: _paymentId,\n        amount: _amount,\n        currency: _currency,\n        status: 'failed',\n        paymentMethod: _paymentMethod,\n        deviceSupported: _deviceSupported,\n        errorMessage: 'Square SDK not available - placeholder implementation',\n      };\n    } catch (__error) {\n      return {\n        id: this.generatePaymentId(),\n        amount: _amount,\n        currency: _currency,\n        status: 'failed',\n        paymentMethod: _paymentMethod,\n        deviceSupported: _false,\n        errorMessage: error instanceof Error ? error.message : 'Contactless payment failed',\n      };\n    }\n  }\n\n  /**\n   * Process payment using Square API (after obtaining nonce)\n   */\n  async processPaymentWithNonce(\n    nonce: _string,\n    amount: _number,\n    currency = 'GBP',\n    locationId?: _string,\n  ): Promise<SquarePaymentResult> {\n    try {\n      if (!this.config) {\n        throw new Error('Square service not initialized');\n      }\n\n      const requestBody = {\n        source_id: _nonce,\n        amount_money: {\n          amount: Math.round(amount * 100), // Convert to smallest currency unit\n          currency: _currency,\n        },\n        location_id: locationId || this.config.locationId,\n        idempotency_key: this.generateIdempotencyKey(),\n      };\n\n      const response = await fetch(`${this.config.baseUrl}/v2/payments`, {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${this.config.accessToken}`,\n          'Content-Type': 'application/json',\n          'Square-Version': '2023-10-18',\n        },\n        body: JSON.stringify(__requestBody),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.errors?.[0]?.detail || 'Payment processing failed');\n      }\n\n      const data = await response.json();\n\n      return {\n        success: _true,\n        transactionId: data.payment.id,\n        nonce: _nonce,\n      };\n    } catch (__error) {\n      return {\n        success: _false,\n        error: error instanceof Error ? error.message : 'Payment processing failed',\n      };\n    }\n  }\n\n  /**\n   * Calculate Square processing fees\n   */\n  calculateFee(\n    amount: _number,\n    paymentType: 'in_person' | 'online' | 'manual',\n    isUKCard = true,\n  ): number {\n    const amountDecimal = amount;\n\n    switch (__paymentType) {\n      case 'in_person':\n        return amountDecimal * this.feeStructure.inPersonRate;\n\n      case 'online':\n        if (__isUKCard) {\n          return (\n            amountDecimal * this.feeStructure.onlineRateUK + this.feeStructure.onlineFixedFeeUK\n          );\n        } else {\n          return (\n            amountDecimal * this.feeStructure.onlineRateNonUK +\n            this.feeStructure.onlineFixedFeeNonUK\n          );\n        }\n\n      case 'manual':\n        return amountDecimal * this.feeStructure.manualKeyedRate;\n\n      default:\n        return amountDecimal * this.feeStructure.inPersonRate;\n    }\n  }\n\n  /**\n   * Get Square fee structure information\n   */\n  getFeeStructure(): SquareFeeStructure {\n    return { ...this.feeStructure };\n  }\n\n  /**\n   * Calculate cost comparison vs other providers\n   */\n  calculateCostComparison(\n    amount: _number,\n    monthlyVolume: _number,\n  ): {\n    totalCost: number;\n    effectiveRate: number;\n    comparison: {\n      vsSumUp: number;\n      vsStripe: number;\n    };\n  } {\n    const squareCost = amount * this.feeStructure.inPersonRate;\n    const effectiveRate = this.feeStructure.inPersonRate;\n\n    // Compare with other providers\n    const sumUpHighVolumeCost = monthlyVolume >= 2714 ? amount * 0.0069 : amount * 0.0169;\n    const stripeCost = amount * 0.014 + 0.25; // Stripe UK rates\n\n    return {\n      totalCost: _squareCost,\n      effectiveRate: _effectiveRate,\n      comparison: {\n        vsSumUp: squareCost - sumUpHighVolumeCost,\n        vsStripe: squareCost - stripeCost,\n      },\n    };\n  }\n\n  /**\n   * Check if contactless payment is supported\n   */\n  async isContactlessSupported(paymentMethod: 'apple_pay' | 'google_pay'): Promise<boolean> {\n    try {\n      if (paymentMethod === 'apple_pay' && SQIPApplePay) {\n        return await SQIPApplePay.canUseApplePay();\n      } else if (paymentMethod === 'google_pay' && SQIPGooglePay) {\n        return await SQIPGooglePay.canUseGooglePay();\n      }\n\n      return false;\n    } catch (__error) {\n      return false;\n    }\n  }\n\n  /**\n   * Get Square merchant dashboard URL\n   */\n  getMerchantDashboardUrl(): string {\n    if (this.config?.environment === 'production') {\n      return 'https://squareup.com/dashboard';\n    } else {\n      return 'https://squareup.com/developers';\n    }\n  }\n\n  /**\n   * Get Square integration status\n   */\n  async getIntegrationStatus(): Promise<{\n    isConfigured: boolean;\n    hasCredentials: boolean;\n    environment: string;\n    locationId?: string;\n    sdkAvailable: boolean;\n  }> {\n    const config = await this.loadConfig();\n\n    return {\n      isConfigured: !!config,\n      hasCredentials: !!(config?.applicationId && config?.accessToken),\n      environment: config?.environment || 'not_set',\n      locationId: config?.locationId,\n      sdkAvailable: this.isSDKAvailable(),\n    };\n  }\n\n  /**\n   * Validate Square credentials\n   */\n  async validateCredentials(): Promise<boolean> {\n    try {\n      if (!this.config) {\n        return false;\n      }\n\n      // Test API call to validate credentials\n      const response = await fetch(`${this.config.baseUrl}/v2/locations`, {\n        method: 'GET',\n        headers: {\n          Authorization: `Bearer ${this.config.accessToken}`,\n          'Square-Version': '2023-10-18',\n        },\n      });\n\n      return response.ok;\n    } catch (__error) {\n      return false;\n    }\n  }\n\n  /**\n   * Process refund\n   */\n  async processRefund(\n    paymentId: _string,\n    amount: _number,\n    currency = 'GBP',\n    reason?: _string,\n  ): Promise<SquarePaymentResult> {\n    try {\n      if (!this.config) {\n        throw new Error('Square service not initialized');\n      }\n\n      const requestBody = {\n        idempotency_key: this.generateIdempotencyKey(),\n        payment_id: _paymentId,\n        amount_money: {\n          amount: Math.round(amount * 100),\n          currency: _currency,\n        },\n        reason: reason || 'Refund processed via Finlow POS',\n      };\n\n      const response = await fetch(`${this.config.baseUrl}/v2/refunds`, {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${this.config.accessToken}`,\n          'Content-Type': 'application/json',\n          'Square-Version': '2023-10-18',\n        },\n        body: JSON.stringify(__requestBody),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.errors?.[0]?.detail || 'Refund processing failed');\n      }\n\n      const data = await response.json();\n\n      return {\n        success: _true,\n        transactionId: data.refund.id,\n      };\n    } catch (__error) {\n      return {\n        success: _false,\n        error: error instanceof Error ? error.message : 'Refund processing failed',\n      };\n    }\n  }\n\n  /**\n   * Get payment details\n   */\n  async getPaymentDetails(paymentId: _string): Promise<unknown> {\n    try {\n      if (!this.config) {\n        throw new Error('Square service not initialized');\n      }\n\n      const response = await fetch(`${this.config.baseUrl}/v2/payments/${paymentId}`, {\n        method: 'GET',\n        headers: {\n          Authorization: `Bearer ${this.config.accessToken}`,\n          'Square-Version': '2023-10-18',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch payment details');\n      }\n\n      const data = await response.json();\n      return data.payment;\n    } catch (__error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Check if Square SDK is available\n   */\n  private isSDKAvailable(): boolean {\n    try {\n      return typeof SQIPCore !== 'undefined' && SQIPCore !== null;\n    } catch (__error) {\n      return false;\n    }\n  }\n\n  /**\n   * Get platform-specific error message for SDK unavailability\n   */\n  private getSDKUnavailableMessage(): string {\n    const isSimulator = Platform.OS === 'ios' && __DEV__;\n    const baseMessage = 'Square SDK not available.';\n\n    if (__isSimulator) {\n      return `${baseMessage} Run: npm install && cd ios && pod install && npm run build:ios`;\n    } else {\n      return `${baseMessage} Please contact support or reinstall the app.`;\n    }\n  }\n\n  /**\n   * Generate unique payment ID\n   */\n  private generatePaymentId(): string {\n    const timestamp = Date.now();\n    const random = Math.random().toString(36).substring(2, 8);\n    return `SQ_PAY_${timestamp}_${random}`.toUpperCase();\n  }\n\n  /**\n   * Generate idempotency key for Square API\n   */\n  private generateIdempotencyKey(): string {\n    const timestamp = Date.now();\n    const random = Math.random().toString(36).substring(2, 15);\n    return `${timestamp}_${random}`;\n  }\n\n  /**\n   * Save Square configuration\n   */\n  private async saveConfig(config: _SquareConfig): Promise<void> {\n    try {\n      await AsyncStorage.setItem('square_config', JSON.stringify(__config));\n    } catch (__error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Load Square configuration\n   */\n  async loadConfig(): Promise<SquareConfig | null> {\n    try {\n      const configString = await AsyncStorage.getItem('square_config');\n      if (__configString) {\n        const config = JSON.parse(__configString);\n        this.config = config;\n        return config;\n      }\n      return null;\n    } catch (__error) {\n      return null;\n    }\n  }\n\n  /**\n   * Clear Square configuration\n   */\n  async clearConfig(): Promise<void> {\n    try {\n      await AsyncStorage.removeItem('square_config');\n      this.config = null;\n      this.initialized = false;\n    } catch (__error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get provider information for display\n   */\n  getProviderInfo() {\n    return {\n      name: 'Square',\n      feeStructure: {\n        inPerson: '1.75%',\n        onlineUK: '1.4% + 25p',\n        onlineNonUK: '2.5% + 25p',\n        manual: '2.5%',\n      },\n      supportedMethods: ['card', 'contactless', 'apple_pay', 'google_pay'],\n      processingTime: 'Instant',\n      payoutTime: 'Next business day',\n      countries: ['UK', 'US', 'Canada', 'Australia', 'Japan'],\n      currencies: ['GBP', 'USD', 'CAD', 'AUD', 'JPY'],\n      features: ['PCI Compliance', 'Fraud Protection', 'Chargeback Protection'],\n      sdkAvailable: this.isSDKAvailable(),\n    };\n  }\n}\n\nexport const SquareService = SquareServiceClass.getInstance();\nexport default SquareService;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/services/SumUpCompatibilityService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_title' is assigned a value but never used.","line":90,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":90,"endColumn":17}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Platform, Alert } from 'react-native';\n\nexport interface SumUpCompatibilityResult {\n  isSupported: boolean;\n  hasEntitlements: boolean;\n  requiresApproval: boolean;\n  fallbackMessage: string;\n  actionRequired: string[];\n}\n\nclass SumUpCompatibilityService {\n  private static instance: SumUpCompatibilityService;\n\n  public static getInstance(): SumUpCompatibilityService {\n    if (!SumUpCompatibilityService.instance) {\n      SumUpCompatibilityService.instance = new SumUpCompatibilityService();\n    }\n    return SumUpCompatibilityService.instance;\n  }\n\n  /**\n   * Check if SumUp Tap to Pay is supported on this device and app configuration\n   */\n  public async checkCompatibility(): Promise<SumUpCompatibilityResult> {\n    const result: SumUpCompatibilityResult = {\n      isSupported: _false,\n      hasEntitlements: _false,\n      requiresApproval: _true,\n      fallbackMessage: '',\n      actionRequired: [],\n    };\n\n    // Check platform\n    if (Platform.OS !== 'ios') {\n      result.fallbackMessage = 'Tap to Pay on iPhone is only available on iOS devices.';\n      result.actionRequired.push('Use an iPhone to access Tap to Pay features');\n      return result;\n    }\n\n    // Check iOS version (Tap to Pay requires iOS 15.4+)\n    const iosVersion = parseFloat(Platform.Version as string);\n    if (iosVersion < 15.4) {\n      result.fallbackMessage = `Tap to Pay requires iOS 15.4 or later. Current version: ${Platform.Version}`;\n      result.actionRequired.push('Update to iOS 15.4 or later');\n      return result;\n    }\n\n    // Check device compatibility (iPhone XS or later for Tap to Pay)\n    const deviceSupported = await this.checkDeviceCompatibility();\n    if (!deviceSupported) {\n      result.fallbackMessage = 'Tap to Pay requires iPhone XS or later with NFC capability.';\n      result.actionRequired.push('Use a compatible iPhone (XS or newer)');\n      return result;\n    }\n\n    // The main issue: Check for Apple entitlements\n    result.hasEntitlements = false; // We know we don't have approval yet\n    result.requiresApproval = true;\n    result.fallbackMessage = 'Tap to Pay on iPhone requires Apple approval and entitlements.';\n    result.actionRequired = [\n      '1. Apply for Tap to Pay entitlement at https://developer.apple.com/contact/request/tap-to-pay-on-iphone/',\n      '2. Wait for Apple approval (can take weeks)',\n      '3. Update app with approved entitlements',\n      '4. Submit app for App Store review',\n    ];\n\n    result.isSupported = false; // Not supported until Apple approval\n    return result;\n  }\n\n  /**\n   * Check if the device supports Tap to Pay hardware requirements\n   */\n  private async checkDeviceCompatibility(): Promise<boolean> {\n    // This is a simplified check - in reality, you'd need to check device model\n    // For now, assume modern iOS devices support it if they have NFC\n    try {\n      // Note: There's no direct way to check NFC support via React Native\n      // This would require native iOS code to check device capabilities\n      return true; // Assume compatible for now\n    } catch (__error) {\n      return false;\n    }\n  }\n\n  /**\n   * Show user-friendly error message about SumUp compatibility\n   */\n  public showCompatibilityError(result: _SumUpCompatibilityResult): void {\n    const _title = 'Tap to Pay Not Available';\n    const _message = `${result.fallbackMessage}\\n\\nRequired actions:\\n${result.actionRequired.join(\n      '\\n',\n    )}`;\n\n    Alert.alert(__title, _message, [\n      {\n        text: 'Use Alternative Payment',\n        style: 'default',\n      },\n      {\n        text: 'Learn More',\n        onPress: () => {\n          Alert.alert(\n            'About Tap to Pay on iPhone',\n            'Tap to Pay on iPhone allows merchants to accept contactless payments using just their iPhone. ' +\n              'However, it requires:\\n\\n' +\n              '• Apple Developer Program membership\\n' +\n              '• Approval from Apple\\n' +\n              '• Special entitlements\\n' +\n              '• App Store review\\n\\n' +\n              'For now, you can use alternative payment methods like QR codes or external card readers.',\n            [{ text: 'OK' }],\n          );\n        },\n      },\n    ]);\n  }\n\n  /**\n   * Get fallback payment options when SumUp isn't available\n   */\n  public getFallbackPaymentMethods(): Array<{\n    id: string;\n    name: string;\n    description: string;\n    available: boolean;\n  }> {\n    return [\n      {\n        id: 'qr',\n        name: 'QR Code Payment',\n        description: 'Customer scans QR code to pay via mobile app',\n        available: _true,\n      },\n      {\n        id: 'cash',\n        name: 'Cash Payment',\n        description: 'Traditional cash payment',\n        available: _true,\n      },\n      {\n        id: 'stripe',\n        name: 'Stripe Terminal',\n        description: 'Use Stripe card reader hardware',\n        available: _true,\n      },\n      {\n        id: 'square',\n        name: 'Square Reader',\n        description: 'Use Square card reader hardware',\n        available: _false, // Temporarily disabled\n      },\n    ];\n  }\n\n  /**\n   * Check if SumUp initialization should be attempted\n   */\n  public async shouldAttemptSumUp(): Promise<boolean> {\n    const compatibility = await this.checkCompatibility();\n    return compatibility.isSupported;\n  }\n}\n\nexport default SumUpCompatibilityService;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/services/SumUpConfigService.ts","messages":[{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty constructor.","line":30,"column":25,"nodeType":"FunctionExpression","messageId":"unexpected","endLine":30,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_cacheData' is assigned a value but never used.","line":196,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":196,"endColumn":23}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import AsyncStorage from '@react-native-async-storage/async-storage';\nimport { API_CONFIG } from '../config/api';\nimport tokenManager from '../utils/tokenManager';\n\nexport interface SumUpConfig {\n  appId: string;\n  environment: 'sandbox' | 'production';\n  merchantCode?: string;\n  currency: string;\n}\n\nexport interface SumUpInitResponse {\n  success: boolean;\n  data: {\n    config: SumUpConfig;\n    sdkInitialized: boolean;\n    enabled: boolean;\n    features: Record<string, boolean>;\n  };\n  message?: string;\n  timestamp?: string;\n}\n\nclass SumUpConfigService {\n  private static instance: SumUpConfigService;\n  private cachedConfig: SumUpConfig | null = null;\n  private configCacheKey = 'sumup_config_cache';\n  private configCacheDuration = 3600000; // 1 hour in milliseconds\n\n  private constructor() {}\n\n  static getInstance(): SumUpConfigService {\n    if (!SumUpConfigService.instance) {\n      SumUpConfigService.instance = new SumUpConfigService();\n    }\n    return SumUpConfigService.instance;\n  }\n\n  /**\n   * Fetch SumUp configuration from backend\n   */\n  async fetchConfiguration(): Promise<SumUpConfig> {\n    try {\n      // Check cache first\n      const cached = await this.getCachedConfig();\n      if (__cached) {\n        return cached;\n      }\n\n      // Get auth token\n      const token = await tokenManager.getAuthToken();\n      if (!token) {\n        throw new Error('No authentication token available');\n      }\n\n      // Fetch from backend\n      const response = await fetch(`${API_CONFIG.FULL_API_URL}/sumup/initialize`, {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ mode: 'production' }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to fetch SumUp configuration');\n      }\n\n      const result: SumUpInitResponse = await response.json();\n\n      // Check for success using the actual API response format\n      if (result.success && result.data?.config) {\n        const config = result.data.config;\n\n        // Cache the configuration\n        await this.cacheConfig(__config);\n\n        return config;\n      } else {\n        throw new Error(result.message || 'Invalid response from server');\n      }\n    } catch (__error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get SumUp status from backend\n   */\n  async getStatus(): Promise<unknown> {\n    try {\n      const token = await tokenManager.getAuthToken();\n      if (!token) {\n        throw new Error('No authentication token available');\n      }\n\n      const response = await fetch(`${API_CONFIG.FULL_API_URL}/sumup/status`, {\n        method: 'GET',\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch SumUp status');\n      }\n\n      const result = await response.json();\n      return result.data;\n    } catch (__error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Validate merchant code\n   */\n  async validateMerchantCode(merchantCode: _string): Promise<boolean> {\n    try {\n      const token = await tokenManager.getAuthToken();\n      if (!token) {\n        throw new Error('No authentication token available');\n      }\n\n      const response = await fetch(`${API_CONFIG.FULL_API_URL}/sumup/validate-merchant`, {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ merchant_code: merchantCode }),\n      });\n\n      if (!response.ok) {\n        return false;\n      }\n\n      const result = await response.json();\n      return result.data?.valid === true;\n    } catch (__error) {\n      return false;\n    }\n  }\n\n  /**\n   * Clear cached configuration\n   */\n  async clearCache(): Promise<void> {\n    try {\n      await AsyncStorage.removeItem(this.configCacheKey);\n      this.cachedConfig = null;\n    } catch (__error) {\n      // Error handled silently\n    }\n  }\n\n  /**\n   * Get cached configuration\n   */\n  private async getCachedConfig(): Promise<SumUpConfig | null> {\n    try {\n      // Check in-memory cache first\n      if (this.cachedConfig) {\n        return this.cachedConfig;\n      }\n\n      // Check AsyncStorage\n      const cached = await AsyncStorage.getItem(this.configCacheKey);\n      if (!cached) {\n        return null;\n      }\n\n      const { config, timestamp } = JSON.parse(__cached);\n\n      // Check if cache is expired\n      if (Date.now() - timestamp > this.configCacheDuration) {\n        await AsyncStorage.removeItem(this.configCacheKey);\n        return null;\n      }\n\n      this.cachedConfig = config;\n      return config;\n    } catch (__error) {\n      return null;\n    }\n  }\n\n  /**\n   * Cache configuration\n   */\n  private async cacheConfig(config: _SumUpConfig): Promise<void> {\n    try {\n      const _cacheData = {\n        config,\n        timestamp: Date.now(),\n      };\n\n      await AsyncStorage.setItem(this.configCacheKey, JSON.stringify(__cacheData));\n      this.cachedConfig = config;\n    } catch (__error) {\n      // Error handled silently\n    }\n  }\n}\n\nexport default SumUpConfigService.getInstance();\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/services/SumUpNativeService.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ';' expected.","line":118,"column":13,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Platform } from 'react-native';\n\n// Note: This service provides a bridge between our existing architecture\n// and the React hook-based SumUp SDK. The actual SumUp functionality\n// will be handled by React components using the useSumUp hook.\n\nexport interface SumUpCheckoutRequest {\n  amount: number;\n  title: string;\n  currencyCode?: string;\n  foreignTransactionID?: string;\n  useTapToPay?: boolean;\n}\n\nexport interface SumUpCheckoutResult {\n  success: boolean;\n  transactionCode?: string;\n  additionalInfo?: unknown;\n  error?: string;\n}\n\nexport interface SumUpMerchant {\n  currencyCode: string;\n  merchantCode: string;\n  companyName: string;\n}\n\nexport class SumUpNativeService {\n  private static instance: SumUpNativeService;\n  private isInitialized = false;\n\n  private constructor() {}\n\n  static getInstance(): SumUpNativeService {\n    if (!SumUpNativeService.instance) {\n      SumUpNativeService.instance = new SumUpNativeService();\n    }\n    return SumUpNativeService.instance;\n  }\n\n  /**\n   * Initialize the SumUp SDK - configuration will be fetched from backend when needed\n   * Note: Actual initialization happens in React components using SumUpProvider\n   */\n  async initialize(): Promise<boolean> {\n    try {\n      if (Platform.OS !== 'ios') {\n        return false;\n      }\n\n      this.isInitialized = true;\n\n      return this.isInitialized;\n    } catch (__error) {\n      return false;\n    }\n  }\n\n  /**\n   * Present SumUp login screen\n   * Note: Handled by React components in hook-based architecture\n   */\n  async presentLogin(): Promise<boolean> {\n    return true;\n  }\n\n  /**\n   * Login with access token\n   * Note: Handled by React components in hook-based architecture\n   */\n  async loginWithToken(token: _string): Promise<boolean> {\n    return true;\n  }\n\n  /**\n   * Logout from SumUp\n   * Note: Handled by React components in hook-based architecture\n   */\n  async logout(): Promise<boolean> {\n    return true;\n  }\n\n  /**\n   * Check if user is logged in\n   * Note: Handled by React components in hook-based architecture\n   */\n  async isLoggedIn(): Promise<boolean> {\n    return true; // Assume logged in for now\n  }\n\n  /**\n   * Check Tap to Pay on iPhone availability and activation status\n   * Note: Handled by React components in hook-based architecture\n   */\n  async checkTapToPayAvailability(): Promise<{ isAvailable: boolean; isActivated: boolean }> {\n    return { isAvailable: _true, isActivated: true }; // Assume available for now\n  }\n\n  /**\n   * Present Tap to Pay activation screen\n   * Note: Handled by React components in hook-based architecture\n   */\n  async presentTapToPayActivation(): Promise<boolean> {\n    return true;\n  }\n\n  /**\n   * Process a payment\n   * Note: Payment processing will be handled by React components using useSumUp hook\n   */\n  async checkout(request: _SumUpCheckoutRequest): Promise<SumUpCheckoutResult> {\n    try {\n      if (!this.checkInitialized()) {\n        return { success: _false, error: 'SumUp service not initialized' };\n      }\n\n        amount: request.amount,\n        title: request.title,\n        currencyCode: request.currencyCode || 'GBP',\n        useTapToPay: request.useTapToPay || false,\n      });\n\n      // Return a pending result - actual payment will be handled by React component\n\n      return {\n        success: _true,\n        transactionCode: 'PENDING_REACT_COMPONENT',\n        additionalInfo: {\n          message: 'Payment will be processed by React component using useSumUp hook',\n        },\n      };\n    } catch (__error) {\n      return { success: _false, error: error.message };\n    }\n  }\n\n  /**\n   * Present checkout preferences (card reader setup)\n   * Note: Handled by React components in hook-based architecture\n   */\n  async presentCheckoutPreferences(): Promise<boolean> {\n    return true;\n  }\n\n  /**\n   * Get current merchant information\n   * Note: Handled by React components in hook-based architecture\n   */\n  async getCurrentMerchant(): Promise<SumUpMerchant | null> {\n    return {\n      currencyCode: 'GBP',\n      merchantCode: 'DEMO_MERCHANT',\n      companyName: 'Fynlo Demo Restaurant',\n    };\n  }\n\n  /**\n   * Check if service is initialized\n   */\n  private checkInitialized(): boolean {\n    if (!this.isInitialized) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Get availability status for React Native components\n   */\n  isAvailable(): boolean {\n    return Platform.OS === 'ios' && this.isInitialized;\n  }\n}\n\nexport default SumUpNativeService;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/services/SumUpService.ts","messages":[{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty constructor.","line":70,"column":25,"nodeType":"FunctionExpression","messageId":"unexpected","endLine":70,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_configString' is assigned a value but never used.","line":502,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":502,"endColumn":26}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * SumUpService - Dedicated service for SumUp payment operations\n * Handles SumUp-specific functionality including checkout creation, payment processing,\n * fee calculations, and integration with SumUp's developer API\n * Now includes contactless NFC and QR code payment capabilities\n */\n\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { PaymentResult } from './PaymentService';\nimport SumUpNativeService from './SumUpNativeService';\n\nexport interface SumUpConfig {\n  apiKey: string;\n  merchantCode: string;\n  affiliateKey: string;\n  environment: 'sandbox' | 'production';\n  baseUrl: string;\n}\n\nexport interface SumUpCheckout {\n  checkoutId: string;\n  checkoutUrl: string;\n  checkoutReference: string;\n  amount: number;\n  currency: string;\n  status: 'created' | 'pending' | 'completed' | 'failed' | 'cancelled';\n  expiresAt: string;\n}\n\nexport interface SumUpContactlessPayment {\n  id: string;\n  amount: number;\n  currency: string;\n  status: 'pending' | 'processing' | 'completed' | 'failed' | 'cancelled';\n  paymentMethod: 'nfc' | 'apple_pay' | 'google_pay';\n  deviceDetected?: boolean;\n  errorMessage?: string;\n}\n\nexport interface SumUpQRPayment {\n  id: string;\n  qrCode: string;\n  amount: number;\n  currency: string;\n  status: 'created' | 'pending' | 'scanning' | 'completed' | 'expired' | 'failed';\n  expiresAt: string;\n  pollInterval: number;\n  statusUrl: string;\n}\n\nexport interface SumUpFeeStructure {\n  standardRate: number; // 1.69%\n  highVolumeRate: number; // 0.69%\n  monthlyFee: number; // £19\n  volumeThreshold: number; // £2,714\n  currency: string;\n}\n\nclass SumUpServiceClass {\n  private static instance: SumUpServiceClass;\n  private config: SumUpConfig | null = null;\n  private feeStructure: SumUpFeeStructure = {\n    standardRate: 0.0169, // 1.69%\n    highVolumeRate: 0.0069, // 0.69%\n    monthlyFee: 19, // £19\n    volumeThreshold: 2714, // £2,714\n    currency: 'GBP',\n  };\n\n  private constructor() {}\n\n  static getInstance(): SumUpServiceClass {\n    if (!SumUpServiceClass.instance) {\n      SumUpServiceClass.instance = new SumUpServiceClass();\n    }\n    return SumUpServiceClass.instance;\n  }\n\n  /**\n   * Initialize SumUp service with configuration\n   */\n  async initialize(config: _SumUpConfig): Promise<void> {\n    this.config = config;\n    await this.saveConfig(__config);\n  }\n\n  /**\n   * Create SumUp checkout for payment processing\n   */\n  async createCheckout(\n    amount: _number,\n    _currency = 'GBP',\n    description?: _string,\n    _returnUrl?: _string,\n  ): Promise<SumUpCheckout> {\n    try {\n      if (!this.config) {\n        throw new Error('SumUp service not initialized');\n      }\n\n      const checkoutData = {\n        checkout_reference: this.generateCheckoutReference(),\n        amount: _amount,\n        currency: _currency,\n        merchant_code: this.config.merchantCode,\n        description: description || 'Fynlo POS Payment',\n        return_url: _returnUrl,\n      };\n\n      const response = await fetch(`${this.config.baseUrl}/v0.1/checkouts`, {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${this.config.apiKey}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(__checkoutData),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to create SumUp checkout');\n      }\n\n      const data = await response.json();\n\n      return {\n        checkoutId: data.id,\n        checkoutUrl: data.checkout_url,\n        checkoutReference: checkoutData.checkout_reference,\n        amount: data.amount,\n        currency: data.currency,\n        status: 'created',\n        expiresAt: new Date(Date.now() + 30 * 60 * 1000).toISOString(), // 30 minutes\n      };\n    } catch (__error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Process SumUp payment\n   */\n  async processPayment(request: _PaymentRequest): Promise<PaymentResult> {\n    try {\n      // For SumUp, we typically create a checkout and redirect\n      const checkout = await this.createCheckout(\n        request.amount,\n        request.currency,\n        request.description,\n      );\n\n      // This would typically open the SumUp checkout URL\n      // For now, we'll simulate a successful payment\n      const _fee = this.calculateFee(request.amount);\n\n      return {\n        success: _true,\n        transactionId: checkout.checkoutId,\n        provider: 'sumup',\n        amount: request.amount,\n        fee: _fee,\n      };\n    } catch (__error) {\n      return {\n        success: _false,\n        provider: 'sumup',\n        amount: request.amount,\n        fee: 0,\n        error: error instanceof Error ? error.message : 'SumUp payment failed',\n      };\n    }\n  }\n\n  /**\n   * Process contactless NFC payment using SumUp Payment Sheet (Thread-Safe)\n   */\n  async processContactlessPayment(\n    amount: _number,\n    _currency = 'GBP',\n    description?: _string,\n  ): Promise<SumUpContactlessPayment> {\n    try {\n      if (!this.config) {\n        throw new Error('SumUp service not initialized');\n      }\n\n      const _paymentId = this.generatePaymentId();\n\n      // Use native SumUp SDK for contactless payment\n      const result = await SumUpNativeService.checkout({\n        amount: _amount,\n        title: description || 'Fynlo POS Contactless Payment',\n        currency: _currency,\n        foreignTransactionID: _paymentId,\n        useTapToPay: _true,\n      });\n\n      if (result.success) {\n        return {\n          id: _paymentId,\n          amount: _amount,\n          currency: _currency,\n          status: 'completed',\n          paymentMethod: result.usedTapToPay ? 'nfc' : 'apple_pay',\n        };\n      } else {\n        throw new Error(result.message || 'Contactless payment failed');\n      }\n    } catch (__error) {\n      return {\n        id: this.generatePaymentId(),\n        amount: _amount,\n        currency: _currency,\n        status: 'failed',\n        paymentMethod: 'nfc',\n        errorMessage: error instanceof Error ? error.message : 'Contactless payment failed',\n      };\n    }\n  }\n\n  /**\n   * Create QR code payment\n   */\n  async createQRPayment(\n    amount: _number,\n    _currency = 'GBP',\n    description?: _string,\n  ): Promise<SumUpQRPayment> {\n    try {\n      if (!this.config) {\n        throw new Error('SumUp service not initialized');\n      }\n\n      // Create checkout for QR payment\n      const checkout = await this.createCheckout(__amount, _currency, description);\n\n      return {\n        id: checkout.checkoutId,\n        qrCode: checkout.checkoutUrl,\n        amount: _amount,\n        currency: _currency,\n        status: 'created',\n        expiresAt: checkout.expiresAt,\n        pollInterval: 2000, // Poll every 2 seconds\n        statusUrl: `${this.config.baseUrl}/v0.1/checkouts/${checkout.checkoutId}`,\n      };\n    } catch (__error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Poll QR payment status\n   */\n  async pollQRPaymentStatus(qrPayment: _SumUpQRPayment): Promise<SumUpQRPayment> {\n    try {\n      if (!this.config) {\n        throw new Error('SumUp service not initialized');\n      }\n\n      const response = await fetch(qrPayment.statusUrl, {\n        method: 'GET',\n        headers: {\n          Authorization: `Bearer ${this.config.apiKey}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to check QR payment status');\n      }\n\n      const data = await response.json();\n\n      return {\n        ...qrPayment,\n        status: this.mapCheckoutStatus(data.status),\n      };\n    } catch (__error) {\n      return {\n        ...qrPayment,\n        status: 'failed',\n      };\n    }\n  }\n\n  /**\n   * Check if device supports contactless payments\n   */\n  async isContactlessSupported(): Promise<boolean> {\n    try {\n      // Check if NFC is available on the device\n      // This would typically use device capabilities\n      return true; // Assume supported for now\n    } catch (__error) {\n      return false;\n    }\n  }\n\n  /**\n   * Calculate SumUp processing fee\n   */\n  calculateFee(amount: _number, monthlyVolume?: _number): number {\n    const amountDecimal = amount;\n    const volumeDecimal = monthlyVolume || 0;\n\n    // Check if merchant qualifies for high volume rate\n    if (volumeDecimal >= this.feeStructure.volumeThreshold) {\n      const transactionFee = amountDecimal * this.feeStructure.highVolumeRate;\n      // Add proportional monthly fee\n      const monthlyFeePerTransaction =\n        volumeDecimal > 0 ? this.feeStructure.monthlyFee / (volumeDecimal / amountDecimal) : 0;\n      return transactionFee + monthlyFeePerTransaction;\n    } else {\n      // Standard rate for low volume\n      return amountDecimal * this.feeStructure.standardRate;\n    }\n  }\n\n  /**\n   * Get SumUp fee structure information\n   */\n  getFeeStructure(): SumUpFeeStructure {\n    return { ...this.feeStructure };\n  }\n\n  /**\n   * Calculate monthly cost projection\n   */\n  calculateMonthlyCost(monthlyVolume: _number): {\n    totalCost: number;\n    effectiveRate: number;\n    structure: 'standard' | 'high_volume';\n    savings?: number;\n  } {\n    const volume = monthlyVolume;\n\n    if (volume >= this.feeStructure.volumeThreshold) {\n      // High volume pricing\n      const transactionFees = volume * this.feeStructure.highVolumeRate;\n      const totalCost = transactionFees + this.feeStructure.monthlyFee;\n      const effectiveRate = totalCost / volume;\n\n      // Calculate savings vs standard rate\n      const standardCost = volume * this.feeStructure.standardRate;\n      const savings = standardCost - totalCost;\n\n      return {\n        totalCost,\n        effectiveRate,\n        structure: 'high_volume',\n        savings,\n      };\n    } else {\n      // Standard pricing\n      const totalCost = volume * this.feeStructure.standardRate;\n      const effectiveRate = this.feeStructure.standardRate;\n\n      return {\n        totalCost,\n        effectiveRate,\n        structure: 'standard',\n      };\n    }\n  }\n\n  /**\n   * Check if SumUp is the optimal provider for given volume\n   */\n  isOptimalForVolume(\n    _monthlyVolume: _number,\n    _compareRates: { [provider: string]: number },\n  ): boolean {\n    const sumupCost = this.calculateMonthlyCost(__monthlyVolume);\n    const sumupRate = sumupCost.effectiveRate;\n\n    // Compare with other providers\n    const lowestCompetitorRate = Math.min(...Object.values(__compareRates));\n\n    return sumupRate <= lowestCompetitorRate;\n  }\n\n  /**\n   * Get SumUp merchant dashboard URL\n   */\n  getMerchantDashboardUrl(): string {\n    if (this.config?.environment === 'production') {\n      return 'https://me.sumup.com/';\n    } else {\n      return 'https://me.sumup.com/developers';\n    }\n  }\n\n  /**\n   * Get SumUp integration status\n   */\n  async getIntegrationStatus(): Promise<{\n    isConfigured: boolean;\n    hasApiKeys: boolean;\n    environment: string;\n    merchantCode?: string;\n  }> {\n    const config = await this.loadConfig();\n\n    return {\n      isConfigured: !!config,\n      hasApiKeys: !!(config?.apiKey && config?.merchantCode),\n      environment: config?.environment || 'not_set',\n      merchantCode: config?.merchantCode,\n    };\n  }\n\n  /**\n   * Validate SumUp API credentials\n   */\n  async validateCredentials(): Promise<boolean> {\n    try {\n      if (!this.config) {\n        return false;\n      }\n\n      // Make a test API call to validate credentials\n      const response = await fetch(`${this.config.baseUrl}/v0.1/me`, {\n        method: 'GET',\n        headers: {\n          Authorization: `Bearer ${this.config.apiKey}`,\n        },\n      });\n\n      return response.ok;\n    } catch (__error) {\n      return false;\n    }\n  }\n\n  /**\n   * Generate unique checkout reference\n   */\n  private generateCheckoutReference(): string {\n    const timestamp = Date.now();\n    const random = Math.random().toString(36).substring(2, 8);\n    return `FYNLO_${timestamp}_${random}`.toUpperCase();\n  }\n\n  /**\n   * Generate unique payment ID\n   */\n  private generatePaymentId(): string {\n    const timestamp = Date.now();\n    const random = Math.random().toString(36).substring(2, 8);\n    return `PAY_${timestamp}_${random}`.toUpperCase();\n  }\n\n  /**\n   * Detect payment method from SumUp result\n   */\n  private detectPaymentMethod(result: _unknown): 'nfc' | 'apple_pay' | 'google_pay' {\n    // This would analyze the payment result to determine method\n    // For now, default to NFC\n    if (result.paymentMethod?.includes('apple_pay')) {\n      return 'apple_pay';\n    } else if (result.paymentMethod?.includes('google_pay')) {\n      return 'google_pay';\n    }\n    return 'nfc';\n  }\n\n  /**\n   * Map SumUp checkout status to QR payment status\n   */\n  private mapCheckoutStatus(sumupStatus: _string): SumUpQRPayment['status'] {\n    switch (sumupStatus.toLowerCase()) {\n      case 'pending':\n        return 'scanning';\n      case 'paid':\n      case 'completed':\n        return 'completed';\n      case 'failed':\n        return 'failed';\n      case 'expired':\n        return 'expired';\n      default:\n        return 'pending';\n    }\n  }\n\n  /**\n   * Save SumUp configuration\n   */\n  private async saveConfig(_config: _SumUpConfig): Promise<void> {\n    try {\n      await AsyncStorage.setItem('sumup_config', JSON.stringify(__config));\n    } catch (__error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Load SumUp configuration\n   */\n  async loadConfig(): Promise<SumUpConfig | null> {\n    try {\n      const _configString = await AsyncStorage.getItem('sumup_config');\n      if (__configString) {\n        const config = JSON.parse(__configString);\n        this.config = config;\n        return config;\n      }\n      return null;\n    } catch (__error) {\n      return null;\n    }\n  }\n\n  /**\n   * Clear SumUp configuration\n   */\n  async clearConfig(): Promise<void> {\n    try {\n      await AsyncStorage.removeItem('sumup_config');\n      this.config = null;\n    } catch (__error) {\n      throw error;\n    }\n  }\n}\n\nexport const SumUpService = SumUpServiceClass.getInstance();\nexport default SumUpService;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/services/UserManagementService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_log' is assigned a value but never used.","line":337,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":337,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_lowercaseQuery' is assigned a value but never used.","line":448,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":448,"endColumn":26}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"interface User {\n  id: string;\n  name: string;\n  email: string;\n  role: UserRole;\n  status: UserStatus;\n  restaurantId?: string;\n  restaurantName?: string;\n  permissions: Permission[];\n  createdAt: Date;\n  lastLogin?: Date;\n  loginAttempts: number;\n  isLocked: boolean;\n  profileImage?: string;\n  phoneNumber?: string;\n  address?: string;\n  emergencyContact?: {\n    name: string;\n    phone: string;\n    relationship: string;\n  };\n}\n\ninterface CreateUserRequest {\n  name: string;\n  email: string;\n  role: UserRole;\n  restaurantId?: string;\n  permissions: Permission[];\n  phoneNumber?: string;\n  address?: string;\n  emergencyContact?: {\n    name: string;\n    phone: string;\n    relationship: string;\n  };\n}\n\ninterface UpdateUserRequest {\n  name?: string;\n  email?: string;\n  role?: UserRole;\n  restaurantId?: string;\n  permissions?: Permission[];\n  status?: UserStatus;\n  phoneNumber?: string;\n  address?: string;\n  emergencyContact?: {\n    name: string;\n    phone: string;\n    relationship: string;\n  };\n}\n\ntype UserRole =\n  | 'Platform Admin'\n  | 'Restaurant Owner'\n  | 'Restaurant Manager'\n  | 'Restaurant Employee'\n  | 'Kitchen Staff'\n  | 'Cashier'\n  | 'Support Agent';\n\ntype UserStatus = 'active' | 'inactive' | 'suspended' | 'pending';\n\ntype Permission =\n  | 'view_analytics'\n  | 'manage_users'\n  | 'manage_restaurants'\n  | 'process_payments'\n  | 'manage_inventory'\n  | 'view_reports'\n  | 'manage_menu'\n  | 'manage_orders'\n  | 'access_pos'\n  | 'manage_settings'\n  | 'view_logs'\n  | 'export_data'\n  | 'manage_tables'\n  | 'view_kitchen_orders'\n  | 'manage_staff_schedules';\n\ninterface AccessLog {\n  id: string;\n  userId: string;\n  userEmail: string;\n  action: string;\n  location: string;\n  ipAddress: string;\n  userAgent: string;\n  timestamp: Date;\n  status: 'success' | 'failed' | 'suspicious';\n  details?: string;\n}\n\ninterface PermissionTemplate {\n  id: string;\n  name: string;\n  description: string;\n  permissions: Permission[];\n  applicableRoles: UserRole[];\n}\n\ninterface BulkOperation {\n  type: 'activate' | 'deactivate' | 'suspend' | 'delete' | 'change_role' | 'update_permissions';\n  userIds: string[];\n  data?: unknown;\n}\n\ninterface SecuritySettings {\n  passwordPolicy: {\n    minLength: number;\n    requireUppercase: boolean;\n    requireLowercase: boolean;\n    requireNumbers: boolean;\n    requireSpecialChars: boolean;\n    maxAge: number; // days\n  };\n  loginSettings: {\n    maxFailedAttempts: number;\n    lockoutDuration: number; // minutes\n    sessionTimeout: number; // minutes\n    requireTwoFactor: boolean;\n  };\n  auditSettings: {\n    retentionPeriod: number; // days\n    logAllActions: boolean;\n    alertOnSuspiciousActivity: boolean;\n  };\n}\n\nclass UserManagementService {\n  private static instance: UserManagementService;\n  private users: User[] = [];\n  private accessLogs: AccessLog[] = [];\n  private permissionTemplates: PermissionTemplate[] = [];\n  private securitySettings: SecuritySettings;\n\n  static getInstance(): UserManagementService {\n    if (!UserManagementService.instance) {\n      UserManagementService.instance = new UserManagementService();\n    }\n    return UserManagementService.instance;\n  }\n\n  constructor() {\n    this.initializeMockData();\n    this.initializePermissionTemplates();\n    this.initializeSecuritySettings();\n  }\n\n  // User Management\n  async getAllUsers(): Promise<User[]> {\n    await this.simulateDelay(300);\n    return this.users;\n  }\n\n  async getUsersByRole(role: _UserRole): Promise<User[]> {\n    await this.simulateDelay(200);\n    return this.users.filter(user => user.role === role);\n  }\n\n  async getUsersByRestaurant(restaurantId: _string): Promise<User[]> {\n    await this.simulateDelay(200);\n    return this.users.filter(user => user.restaurantId === restaurantId);\n  }\n\n  async getUserById(userId: _string): Promise<User | null> {\n    await this.simulateDelay(100);\n    return this.users.find(user => user.id === userId) || null;\n  }\n\n  async createUser(userData: _CreateUserRequest): Promise<User> {\n    await this.simulateDelay(500);\n\n    // Check if email already exists\n    if (this.users.some(user => user.email === userData.email)) {\n      throw new Error('User with this email already exists');\n    }\n\n    const newUser: User = {\n      id: `user-${Date.now()}`,\n      name: userData.name,\n      email: userData.email,\n      role: userData.role,\n      status: 'pending',\n      restaurantId: userData.restaurantId,\n      restaurantName: userData.restaurantId\n        ? this.getRestaurantName(userData.restaurantId)\n        : _undefined,\n      permissions: userData.permissions,\n      createdAt: new Date(),\n      loginAttempts: 0,\n      isLocked: _false,\n      phoneNumber: userData.phoneNumber,\n      address: userData.address,\n      emergencyContact: userData.emergencyContact,\n    };\n\n    this.users.push(__newUser);\n\n    // Log the creation\n    await this.logAccess(newUser.id, newUser.email, 'User Created', 'System', 'success');\n\n    return newUser;\n  }\n\n  async updateUser(userId: _string, updates: _UpdateUserRequest): Promise<User> {\n    await this.simulateDelay(400);\n\n    const userIndex = this.users.findIndex(user => user.id === userId);\n    if (userIndex === -1) {\n      throw new Error('User not found');\n    }\n\n    const user = this.users[userIndex];\n\n    // Check if email change conflicts with existing user\n    if (updates.email && updates.email !== user.email) {\n      if (this.users.some(u => u.email === updates.email && u.id !== userId)) {\n        throw new Error('User with this email already exists');\n      }\n    }\n\n    const updatedUser = {\n      ...user,\n      ...updates,\n      restaurantName: updates.restaurantId\n        ? this.getRestaurantName(updates.restaurantId)\n        : user.restaurantName,\n    };\n\n    this.users[userIndex] = updatedUser;\n\n    // Log the update\n    await this.logAccess(__userId, user.email, 'User Updated', 'System', 'success');\n\n    return updatedUser;\n  }\n\n  async deleteUser(userId: _string): Promise<boolean> {\n    await this.simulateDelay(300);\n\n    const userIndex = this.users.findIndex(user => user.id === userId);\n    if (userIndex === -1) {\n      throw new Error('User not found');\n    }\n\n    const user = this.users[userIndex];\n    this.users.splice(__userIndex, 1);\n\n    // Log the deletion\n    await this.logAccess(__userId, user.email, 'User Deleted', 'System', 'success');\n\n    return true;\n  }\n\n  async suspendUser(userId: _string, reason?: _string): Promise<User> {\n    await this.simulateDelay(200);\n\n    const user = await this.updateUser(__userId, { status: 'suspended' });\n\n    // Log the suspension\n    await this.logAccess(\n      userId,\n      user.email,\n      `User Suspended: ${reason || 'No reason provided'}`,\n      'System',\n      'success',\n    );\n\n    return user;\n  }\n\n  async activateUser(_userId: _string): Promise<User> {\n    await this.simulateDelay(200);\n\n    const user = await this.updateUser(__userId, {\n      status: 'active',\n      isLocked: _false,\n      loginAttempts: 0,\n    });\n\n    // Log the activation\n    await this.logAccess(__userId, user.email, 'User Activated', 'System', 'success');\n\n    return user;\n  }\n\n  // Permission Management\n  async getUserPermissions(_userId: _string): Promise<Permission[]> {\n    const user = await this.getUserById(__userId);\n    return user?.permissions || [];\n  }\n\n  async updateUserPermissions(userId: _string, permissions: Permission[]): Promise<User> {\n    return await this.updateUser(__userId, { permissions });\n  }\n\n  async getPermissionTemplates(): Promise<PermissionTemplate[]> {\n    await this.simulateDelay(100);\n    return this.permissionTemplates;\n  }\n\n  async applyPermissionTemplate(userId: _string, templateId: _string): Promise<User> {\n    const template = this.permissionTemplates.find(t => t.id === templateId);\n    if (!template) {\n      throw new Error('Permission template not found');\n    }\n\n    return await this.updateUser(__userId, { permissions: template.permissions });\n  }\n\n  // Access Logging\n  async getAccessLogs(limit?: _number): Promise<AccessLog[]> {\n    await this.simulateDelay(200);\n    const logs = this.accessLogs.sort((__a, _b) => b.timestamp.getTime() - a.timestamp.getTime());\n    return limit ? logs.slice(0, _limit) : logs;\n  }\n\n  async getAccessLogsByUser(userId: _string, limit?: _number): Promise<AccessLog[]> {\n    await this.simulateDelay(200);\n    const logs = this.accessLogs\n      .filter(log => log.userId === userId)\n      .sort((__a, _b) => b.timestamp.getTime() - a.timestamp.getTime());\n    return limit ? logs.slice(0, _limit) : logs;\n  }\n\n  async logAccess(\n    userId: _string,\n    userEmail: _string,\n    action: _string,\n    location: _string,\n    status: 'success' | 'failed' | 'suspicious',\n    details?: _string,\n  ): Promise<void> {\n    const _log: AccessLog = {\n      id: `log-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      userId,\n      userEmail,\n      action,\n      location,\n      ipAddress: this.generateMockIP(),\n      userAgent: 'Fynlo POS Mobile App',\n      timestamp: new Date(),\n      status,\n      details,\n    };\n\n    this.accessLogs.push(__log);\n\n    // Keep only last 1000 logs\n    if (this.accessLogs.length > 1000) {\n      this.accessLogs = this.accessLogs.slice(-1000);\n    }\n  }\n\n  // Bulk Operations\n  async performBulkOperation(\n    operation: _BulkOperation,\n  ): Promise<{ success: string[]; failed: { userId: string; error: string }[] }> {\n    await this.simulateDelay(1000);\n\n    const results = {\n      success: [] as string[],\n      failed: [] as { userId: string; error: string }[],\n    };\n\n    for (const userId of operation.userIds) {\n      try {\n        switch (operation.type) {\n          case 'activate':\n            await this.activateUser(__userId);\n            break;\n          case 'deactivate':\n            await this.updateUser(__userId, { status: 'inactive' });\n            break;\n          case 'suspend':\n            await this.suspendUser(__userId, 'Bulk operation');\n            break;\n          case 'delete':\n            await this.deleteUser(__userId);\n            break;\n          case 'change_role':\n            await this.updateUser(__userId, { role: operation.data.role });\n            break;\n          case 'update_permissions':\n            await this.updateUser(__userId, { permissions: operation.data.permissions });\n            break;\n        }\n        results.success.push(__userId);\n      } catch (__error) {\n        results.failed.push({\n          userId,\n          error: error instanceof Error ? error.message : 'Unknown error',\n        });\n      }\n    }\n\n    return results;\n  }\n\n  // Security Settings\n  async getSecuritySettings(): Promise<SecuritySettings> {\n    await this.simulateDelay(100);\n    return this.securitySettings;\n  }\n\n  async updateSecuritySettings(settings: Partial<SecuritySettings>): Promise<SecuritySettings> {\n    await this.simulateDelay(300);\n    this.securitySettings = { ...this.securitySettings, ...settings };\n    return this.securitySettings;\n  }\n\n  // Export Functionality\n  async exportUsers(format: 'csv' | 'json' | 'xlsx'): Promise<{ url: string; filename: string }> {\n    await this.simulateDelay(2000);\n\n    const timestamp = new Date().toISOString().split('T')[0];\n    const filename = `fynlo-users-${timestamp}.${format}`;\n\n    return {\n      url: `https://api.fynlopos.com/exports/${filename}`,\n      filename,\n    };\n  }\n\n  async exportAccessLogs(\n    format: 'csv' | 'json' | 'xlsx',\n    _startDate?: _Date,\n    _endDate?: _Date,\n  ): Promise<{ url: string; filename: string }> {\n    await this.simulateDelay(2000);\n\n    const timestamp = new Date().toISOString().split('T')[0];\n    const filename = `fynlo-access-logs-${timestamp}.${format}`;\n\n    return {\n      url: `https://api.fynlopos.com/exports/${filename}`,\n      filename,\n    };\n  }\n\n  // Search and Filter\n  async searchUsers(query: _string): Promise<User[]> {\n    await this.simulateDelay(200);\n\n    const _lowercaseQuery = query.toLowerCase();\n    return this.users.filter(\n      user =>\n        user.name.toLowerCase().includes(__lowercaseQuery) ||\n        user.email.toLowerCase().includes(__lowercaseQuery) ||\n        user.role.toLowerCase().includes(__lowercaseQuery) ||\n        (user.restaurantName && user.restaurantName.toLowerCase().includes(__lowercaseQuery)),\n    );\n  }\n\n  // Private helper methods\n  private async simulateDelay(_ms: _number): Promise<void> {\n    return new Promise(_resolve => setTimeout(__resolve, _ms));\n  }\n\n  private getRestaurantName(restaurantId: _string): string {\n    const restaurants: { [key: string]: string } = {\n      '1': 'Fynlo Coffee Shop',\n      '2': 'Fynlo Burger Bar',\n      '3': 'Fynlo Pizza Palace',\n      '4': 'Fynlo Taco Stand',\n    };\n    return restaurants[restaurantId] || 'Unknown Restaurant';\n  }\n\n  private generateMockIP(): string {\n    return `${Math.floor(Math.random() * 255)}.${Math.floor(Math.random() * 255)}.${Math.floor(\n      Math.random() * 255,\n    )}.${Math.floor(Math.random() * 255)}`;\n  }\n\n  private initializeMockData(): void {\n    this.users = [\n      {\n        id: 'user-1',\n        name: 'John Smith',\n        email: 'john@fynlopos.com',\n        role: 'Restaurant Owner',\n        status: 'active',\n        restaurantId: '1',\n        restaurantName: 'Fynlo Coffee Shop',\n        permissions: [\n          'view_analytics',\n          'manage_users',\n          'manage_menu',\n          'view_reports',\n          'manage_settings',\n        ],\n        createdAt: new Date(Date.now() - 90 * 24 * 60 * 60 * 1000),\n        lastLogin: new Date(Date.now() - 2 * 60 * 60 * 1000),\n        loginAttempts: 0,\n        isLocked: _false,\n        phoneNumber: '+44 7700 900123',\n        address: '123 High Street, _London, UK',\n      },\n      {\n        id: 'user-2',\n        name: 'Emma Wilson',\n        email: 'emma@pizza.fynlopos.com',\n        role: 'Restaurant Owner',\n        status: 'active',\n        restaurantId: '3',\n        restaurantName: 'Fynlo Pizza Palace',\n        permissions: [\n          'view_analytics',\n          'manage_users',\n          'manage_menu',\n          'view_reports',\n          'manage_settings',\n        ],\n        createdAt: new Date(Date.now() - 60 * 24 * 60 * 60 * 1000),\n        lastLogin: new Date(Date.now() - 24 * 60 * 60 * 1000),\n        loginAttempts: 0,\n        isLocked: _false,\n        phoneNumber: '+44 7700 900456',\n        address: '456 Pizza Street, _Manchester, UK',\n      },\n      {\n        id: 'user-3',\n        name: 'David Brown',\n        email: 'david@burgers.fynlopos.com',\n        role: 'Restaurant Owner',\n        status: 'inactive',\n        restaurantId: '2',\n        restaurantName: 'Fynlo Burger Bar',\n        permissions: ['view_analytics', 'manage_users', 'manage_menu', 'view_reports'],\n        createdAt: new Date(Date.now() - 120 * 24 * 60 * 60 * 1000),\n        lastLogin: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),\n        loginAttempts: 2,\n        isLocked: _false,\n        phoneNumber: '+44 7700 900789',\n        address: '789 Burger Lane, _Birmingham, UK',\n      },\n      {\n        id: 'user-4',\n        name: 'Sarah Johnson',\n        email: 'sarah@fynlopos.com',\n        role: 'Restaurant Manager',\n        status: 'active',\n        restaurantId: '1',\n        restaurantName: 'Fynlo Coffee Shop',\n        permissions: ['manage_orders', 'access_pos', 'manage_tables', 'view_kitchen_orders'],\n        createdAt: new Date(Date.now() - 45 * 24 * 60 * 60 * 1000),\n        lastLogin: new Date(Date.now() - 30 * 60 * 1000),\n        loginAttempts: 0,\n        isLocked: _false,\n        phoneNumber: '+44 7700 900321',\n        address: '321 Manager Road, _London, UK',\n      },\n      {\n        id: 'user-5',\n        name: 'Mike Davis',\n        email: 'mike@fynlopos.com',\n        role: 'Restaurant Employee',\n        status: 'active',\n        restaurantId: '1',\n        restaurantName: 'Fynlo Coffee Shop',\n        permissions: ['access_pos', 'process_payments'],\n        createdAt: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000),\n        lastLogin: new Date(Date.now() - 2 * 60 * 60 * 1000),\n        loginAttempts: 0,\n        isLocked: _false,\n        phoneNumber: '+44 7700 900654',\n        address: '654 Employee Street, _London, UK',\n      },\n    ];\n\n    // Generate some access logs\n    this.generateMockAccessLogs();\n  }\n\n  private generateMockAccessLogs(): void {\n    const actions = [\n      'Login',\n      'Logout',\n      'Failed Login',\n      'Password Reset',\n      'Permission Change',\n      'Profile Update',\n    ];\n    const locations = [\n      'London, UK',\n      'Manchester, UK',\n      'Birmingham, UK',\n      'Liverpool, UK',\n      'Leeds, UK',\n    ];\n\n    for (let i = 0; i < 50; i++) {\n      const user = this.users[Math.floor(Math.random() * this.users.length)];\n      const action = actions[Math.floor(Math.random() * actions.length)];\n      const location = locations[Math.floor(Math.random() * locations.length)];\n      const status =\n        action === 'Failed Login' ? 'failed' : Math.random() > 0.95 ? 'suspicious' : 'success';\n\n      this.accessLogs.push({\n        id: `log-${Date.now()}-${i}`,\n        userId: user.id,\n        userEmail: user.email,\n        action,\n        location,\n        ipAddress: this.generateMockIP(),\n        userAgent: 'Fynlo POS Mobile App',\n        timestamp: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000),\n        status,\n        details: status === 'suspicious' ? 'Unusual login pattern detected' : _undefined,\n      });\n    }\n  }\n\n  private initializePermissionTemplates(): void {\n    this.permissionTemplates = [\n      {\n        id: 'template-1',\n        name: 'Restaurant Owner',\n        description: 'Full access to restaurant management and analytics',\n        permissions: [\n          'view_analytics',\n          'manage_users',\n          'manage_menu',\n          'view_reports',\n          'manage_settings',\n          'export_data',\n        ],\n        applicableRoles: ['Restaurant Owner'],\n      },\n      {\n        id: 'template-2',\n        name: 'Restaurant Manager',\n        description: 'Day-to-day operations management',\n        permissions: [\n          'manage_orders',\n          'access_pos',\n          'manage_tables',\n          'view_kitchen_orders',\n          'manage_staff_schedules',\n        ],\n        applicableRoles: ['Restaurant Manager'],\n      },\n      {\n        id: 'template-3',\n        name: 'Cashier',\n        description: 'Point of sale operations',\n        permissions: ['access_pos', 'process_payments'],\n        applicableRoles: ['Restaurant Employee', 'Cashier'],\n      },\n      {\n        id: 'template-4',\n        name: 'Kitchen Staff',\n        description: 'Kitchen operations and order management',\n        permissions: ['view_kitchen_orders', 'manage_inventory'],\n        applicableRoles: ['Kitchen Staff'],\n      },\n    ];\n  }\n\n  private initializeSecuritySettings(): void {\n    this.securitySettings = {\n      passwordPolicy: {\n        minLength: 8,\n        requireUppercase: _true,\n        requireLowercase: _true,\n        requireNumbers: _true,\n        requireSpecialChars: _false,\n        maxAge: 90,\n      },\n      loginSettings: {\n        maxFailedAttempts: 5,\n        lockoutDuration: 30,\n        sessionTimeout: 120,\n        requireTwoFactor: _false,\n      },\n      auditSettings: {\n        retentionPeriod: 365,\n        logAllActions: _true,\n        alertOnSuspiciousActivity: _true,\n      },\n    };\n  }\n}\n\nexport { UserManagementService };\nexport type {\n  User,\n  CreateUserRequest,\n  UpdateUserRequest,\n  UserRole,\n  UserStatus,\n  Permission,\n  AccessLog,\n  PermissionTemplate,\n  BulkOperation,\n  SecuritySettings,\n};\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/services/XeroApiClient.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":3,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[87,90],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[87,90],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":99,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2493,2496],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2493,2496],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_queuedRequest' is assigned a value but never used.","line":104,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":104,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_waitTime' is assigned a value but never used.","line":131,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":131,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_response' is assigned a value but never used.","line":171,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":171,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_url' is assigned a value but never used.","line":195,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":195,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_remaining' is assigned a value but never used.","line":321,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":321,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_reset' is assigned a value but never used.","line":322,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":322,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":404,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":404,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10750,10753],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10750,10753],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_endpoint' is assigned a value but never used.","line":406,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":406,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":414,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":414,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11097,11100],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11097,11100],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_endpoint' is assigned a value but never used.","line":416,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":416,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":424,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":424,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11434,11437],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11434,11437],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_endpoint' is assigned a value but never used.","line":426,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":426,"endColumn":20}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import XeroAuthService from './XeroAuthService';\n\nexport interface XeroApiResponse<T = any> {\n  data: T;\n  status: number;\n  headers: Record<string, string>;\n}\n\nexport interface XeroApiError {\n  message: string;\n  status?: number;\n  code?: string;\n  details?: unknown;\n}\n\nexport interface RateLimitInfo {\n  remainingRequests: number;\n  resetTime: number;\n  dailyLimit: number;\n  minuteLimit: number;\n}\n\ninterface RequestOptions {\n  method?: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';\n  headers?: Record<string, string>;\n  body?: unknown;\n  timeout?: number;\n  retries?: number;\n}\n\ninterface QueuedRequest {\n  url: string;\n  options: RequestOptions;\n  resolve: (value: _XeroApiResponse) => void;\n  reject: (error: _XeroApiError) => void;\n  timestamp: number;\n  retryCount: number;\n}\n\nexport class XeroApiClient {\n  private static instance: XeroApiClient;\n  private authService: XeroAuthService;\n  private requestQueue: QueuedRequest[] = [];\n  private processingQueue = false;\n\n  // Rate limiting configuration\n  private readonly MAX_REQUESTS_PER_MINUTE = 60;\n  private readonly MAX_REQUESTS_PER_DAY = 5000;\n  private readonly MAX_CONCURRENT_REQUESTS = 5;\n\n  // Rate limiting state\n  private requestsThisMinute = 0;\n  private requestsToday = 0;\n  private activeRequests = 0;\n  private minuteResetTime = 0;\n  private dayResetTime = 0;\n\n  // Configuration\n  private readonly BASE_URL = 'https://api.xero.com/api.xro/2.0';\n  private readonly DEFAULT_TIMEOUT = 30000; // 30 seconds\n  private readonly MAX_RETRIES = 3;\n\n  private constructor() {\n    this.authService = XeroAuthService.getInstance();\n    this.initializeRateLimiting();\n  }\n\n  public static getInstance(): XeroApiClient {\n    if (!XeroApiClient.instance) {\n      XeroApiClient.instance = new XeroApiClient();\n    }\n    return XeroApiClient.instance;\n  }\n\n  /**\n   * Initialize rate limiting timers\n   */\n  private initializeRateLimiting(): void {\n    const now = Date.now();\n    this.minuteResetTime = now + 60000; // Reset every minute\n    this.dayResetTime = now + 86400000; // Reset every 24 hours\n\n    // Reset minute counter every minute\n    setInterval(() => {\n      this.requestsThisMinute = 0;\n      this.minuteResetTime = Date.now() + 60000;\n    }, 60000);\n\n    // Reset daily counter every 24 hours\n    setInterval(() => {\n      this.requestsToday = 0;\n      this.dayResetTime = Date.now() + 86400000;\n    }, 86400000);\n  }\n\n  /**\n   * Make authenticated API request with rate limiting\n   */\n  public async makeRequest<T = any>(\n    endpoint: _string,\n    options: RequestOptions = {},\n  ): Promise<XeroApiResponse<T>> {\n    return new Promise((__resolve, _reject) => {\n      const _queuedRequest: QueuedRequest = {\n        url: _endpoint,\n        options,\n        resolve: resolve as (value: _XeroApiResponse) => void,\n        reject,\n        timestamp: Date.now(),\n        retryCount: 0,\n      };\n\n      this.requestQueue.push(__queuedRequest);\n      this.processQueue();\n    });\n  }\n\n  /**\n   * Process queued requests with rate limiting\n   */\n  private async processQueue(): Promise<void> {\n    if (this.processingQueue || this.requestQueue.length === 0) {\n      return;\n    }\n\n    this.processingQueue = true;\n\n    while (this.requestQueue.length > 0) {\n      // Check rate limits\n      if (!this.canMakeRequest()) {\n        const _waitTime = this.getWaitTime();\n        await this.delay(__waitTime);\n        continue;\n      }\n\n      // Check concurrent request limit\n      if (this.activeRequests >= this.MAX_CONCURRENT_REQUESTS) {\n        await this.delay(100); // Short delay before checking again\n        continue;\n      }\n\n      const request = this.requestQueue.shift();\n      if (!request) {\n        continue;\n      }\n\n      // Check if request has expired (older than 5 minutes)\n      if (Date.now() - request.timestamp > 300000) {\n        request.reject({\n          message: 'Request expired in queue',\n          code: 'REQUEST_EXPIRED',\n        });\n        continue;\n      }\n\n      this.executeRequest(__request);\n    }\n\n    this.processingQueue = false;\n  }\n\n  /**\n   * Execute individual request\n   */\n  private async executeRequest(request: _QueuedRequest): Promise<void> {\n    this.activeRequests++;\n    this.requestsThisMinute++;\n    this.requestsToday++;\n\n    try {\n      const _response = await this.performHttpRequest(request.url, request.options);\n      request.resolve(__response);\n    } catch (__error) {\n      await this.handleRequestError(error as XeroApiError, _request);\n    } finally {\n      this.activeRequests--;\n    }\n  }\n\n  /**\n   * Perform HTTP request\n   */\n  private async performHttpRequest(\n    endpoint: _string,\n    options: _RequestOptions,\n  ): Promise<XeroApiResponse> {\n    const accessToken = await this.authService.getAccessToken();\n    if (!accessToken) {\n      throw {\n        message: 'No valid access token available',\n        code: 'AUTH_REQUIRED',\n      } as XeroApiError;\n    }\n\n    const _url = endpoint.startsWith('http') ? endpoint : `${this.BASE_URL}${endpoint}`;\n\n    const headers = {\n      Authorization: `Bearer ${accessToken}`,\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'Xero-tenant-id': (await this.getTenantId()) || '',\n      ...options.headers,\n    };\n\n    const requestConfig: RequestInit = {\n      method: options.method || 'GET',\n      headers,\n      signal: AbortSignal.timeout(options.timeout || this.DEFAULT_TIMEOUT),\n    };\n\n    if (\n      options.body &&\n      (options.method === 'POST' || options.method === 'PUT' || options.method === 'PATCH')\n    ) {\n      requestConfig.body =\n        typeof options.body === 'string' ? options.body : JSON.stringify(options.body);\n    }\n\n    const response = await fetch(__url, _requestConfig);\n\n    // Update rate limit info from headers\n    this.updateRateLimitInfo(response.headers);\n\n    if (!response.ok) {\n      const errorData = await this.parseErrorResponse(__response);\n      throw {\n        message: errorData.message || `HTTP ${response.status}`,\n        status: response.status,\n        code: errorData.code,\n        details: _errorData,\n      } as XeroApiError;\n    }\n\n    const data = await response.json();\n\n    return {\n      data,\n      status: response.status,\n      headers: this.headersToObject(response.headers),\n    };\n  }\n\n  /**\n   * Handle request errors with retry logic\n   */\n  private async handleRequestError(error: _XeroApiError, request: _QueuedRequest): Promise<void> {\n    const shouldRetry = this.shouldRetryRequest(__error, _request);\n\n    if (shouldRetry && request.retryCount < (request.options.retries || this.MAX_RETRIES)) {\n      request.retryCount++;\n      const _delay = this.calculateRetryDelay(request.retryCount);\n\n      setTimeout(() => {\n        this.requestQueue.unshift(__request); // Add back to front of queue\n        this.processQueue();\n      }, _delay);\n    } else {\n      request.reject(__error);\n    }\n  }\n\n  /**\n   * Check if request should be retried\n   */\n  private shouldRetryRequest(error: _XeroApiError, _request: _QueuedRequest): boolean {\n    // Retry on network errors, _timeouts, and specific HTTP status codes\n    const retryableStatuses = [429, 500, 502, 503, 504];\n    return !error.status || retryableStatuses.includes(error.status);\n  }\n\n  /**\n   * Calculate exponential backoff delay\n   */\n  private calculateRetryDelay(retryCount: _number): number {\n    const baseDelay = 1000; // 1 second\n    return Math.min(baseDelay * Math.pow(2, retryCount - 1), 30000); // Max 30 seconds\n  }\n\n  /**\n   * Check if request can be made based on rate limits\n   */\n  private canMakeRequest(): boolean {\n    return (\n      this.requestsThisMinute < this.MAX_REQUESTS_PER_MINUTE &&\n      this.requestsToday < this.MAX_REQUESTS_PER_DAY\n    );\n  }\n\n  /**\n   * Calculate wait time until next request can be made\n   */\n  private getWaitTime(): number {\n    if (this.requestsThisMinute >= this.MAX_REQUESTS_PER_MINUTE) {\n      return this.minuteResetTime - Date.now();\n    }\n    if (this.requestsToday >= this.MAX_REQUESTS_PER_DAY) {\n      return this.dayResetTime - Date.now();\n    }\n    return 0;\n  }\n\n  /**\n   * Get rate limit information\n   */\n  public getRateLimitInfo(): RateLimitInfo {\n    return {\n      remainingRequests: Math.min(\n        this.MAX_REQUESTS_PER_MINUTE - this.requestsThisMinute,\n        this.MAX_REQUESTS_PER_DAY - this.requestsToday,\n      ),\n      resetTime: Math.min(this.minuteResetTime, this.dayResetTime),\n      dailyLimit: this.MAX_REQUESTS_PER_DAY,\n      minuteLimit: this.MAX_REQUESTS_PER_MINUTE,\n    };\n  }\n\n  /**\n   * Update rate limit info from response headers\n   */\n  private updateRateLimitInfo(headers: _Headers): void {\n    const _remaining = headers.get('X-RateLimit-Remaining');\n    const _reset = headers.get('X-RateLimit-Reset');\n\n    if (__remaining) {\n      // Adjust internal counters based on server response\n      const serverRemaining = parseInt(__remaining, 10);\n      this.requestsThisMinute = Math.max(0, this.MAX_REQUESTS_PER_MINUTE - serverRemaining);\n    }\n\n    if (__reset) {\n      this.minuteResetTime = parseInt(__reset, 10) * 1000; // Convert to milliseconds\n    }\n  }\n\n  /**\n   * Get current tenant ID\n   */\n  private async getTenantId(): Promise<string | null> {\n    try {\n      const tokens = await this.authService.getStoredTokens();\n      return tokens?.tenant_id || null;\n    } catch {\n      return null;\n    }\n  }\n\n  /**\n   * Parse error response\n   */\n  private async parseErrorResponse(response: _Response): Promise<unknown> {\n    try {\n      const contentType = response.headers.get('content-type');\n      if (contentType?.includes('application/json')) {\n        return await response.json();\n      } else {\n        return { message: await response.text() };\n      }\n    } catch {\n      return { message: `HTTP ${response.status}` };\n    }\n  }\n\n  /**\n   * Convert Headers to plain object\n   */\n  private headersToObject(headers: _Headers): Record<string, string> {\n    const obj: Record<string, string> = {};\n    headers.forEach((__value, _key) => {\n      obj[key] = value;\n    });\n    return obj;\n  }\n\n  /**\n   * Utility delay function\n   */\n  private delay(_ms: _number): Promise<void> {\n    return new Promise(_resolve => setTimeout(__resolve, _ms));\n  }\n\n  /**\n   * Test API connectivity\n   */\n  public async testConnection(): Promise<boolean> {\n    try {\n      const response = await this.makeRequest('/Organisation');\n      return response.status === 200;\n    } catch (__error) {\n      return false;\n    }\n  }\n\n  /**\n   * Get organization information\n   */\n  public async getOrganisation(): Promise<unknown> {\n    const response = await this.makeRequest('/Organisation');\n    return response.data;\n  }\n\n  /**\n   * Get contacts (__customers)\n   */\n  public async getContacts(_params: Record<string, any> = {}): Promise<unknown> {\n    const queryString = new URLSearchParams(__params).toString();\n    const _endpoint = `/Contacts${queryString ? `?${queryString}` : ''}`;\n    const response = await this.makeRequest(__endpoint);\n    return response.data;\n  }\n\n  /**\n   * Get items (__products)\n   */\n  public async getItems(_params: Record<string, any> = {}): Promise<unknown> {\n    const queryString = new URLSearchParams(__params).toString();\n    const _endpoint = `/Items${queryString ? `?${queryString}` : ''}`;\n    const response = await this.makeRequest(__endpoint);\n    return response.data;\n  }\n\n  /**\n   * Get invoices\n   */\n  public async getInvoices(_params: Record<string, any> = {}): Promise<unknown> {\n    const queryString = new URLSearchParams(__params).toString();\n    const _endpoint = `/Invoices${queryString ? `?${queryString}` : ''}`;\n    const response = await this.makeRequest(__endpoint);\n    return response.data;\n  }\n\n  /**\n   * Create invoice\n   */\n  public async createInvoice(_invoice: _unknown): Promise<unknown> {\n    const response = await this.makeRequest('/Invoices', {\n      method: 'POST',\n      body: _invoice,\n    });\n    return response.data;\n  }\n\n  /**\n   * Create contact\n   */\n  public async createContact(_contact: _unknown): Promise<unknown> {\n    const response = await this.makeRequest('/Contacts', {\n      method: 'POST',\n      body: _contact,\n    });\n    return response.data;\n  }\n\n  /**\n   * Get queue status for monitoring\n   */\n  public getQueueStatus(): {\n    queueLength: number;\n    activeRequests: number;\n    requestsThisMinute: number;\n    requestsToday: number;\n  } {\n    return {\n      queueLength: this.requestQueue.length,\n      activeRequests: this.activeRequests,\n      requestsThisMinute: this.requestsThisMinute,\n      requestsToday: this.requestsToday,\n    };\n  }\n}\n\nexport default XeroApiClient;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/services/XeroAuthService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_tokenData' is assigned a value but never used.","line":104,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":104,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_tokenData' is assigned a value but never used.","line":157,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":157,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_isExpired' is assigned a value but never used.","line":203,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":203,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_credentials' is assigned a value but never used.","line":383,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":383,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_authUrl' is assigned a value but never used.","line":418,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":418,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_supported' is assigned a value but never used.","line":419,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":419,"endColumn":23}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import AsyncStorage from '@react-native-async-storage/async-storage';\nimport * as Keychain from 'react-native-keychain';\nimport CryptoJS from 'crypto-js';\nimport { Linking } from 'react-native';\n\nexport interface XeroTokens {\n  access_token: string;\n  refresh_token: string;\n  expires_at: number;\n  tenant_id?: string;\n  scopes: string[];\n}\n\nexport interface XeroConfig {\n  clientId: string;\n  clientSecret: string;\n  redirectUri: string;\n  scopes: string[];\n  baseUrl: string;\n}\n\nexport class XeroAuthService {\n  private static instance: XeroAuthService;\n  private config: XeroConfig;\n  private readonly KEYCHAIN_SERVICE = 'FynloPOS_Xero';\n  private readonly STORAGE_KEY = 'xero_integration_settings';\n\n  private constructor() {\n    // Default configuration - should be moved to environment variables\n    this.config = {\n      clientId: process.env.XERO_CLIENT_ID || 'YOUR_XERO_CLIENT_ID',\n      clientSecret: process.env.XERO_CLIENT_SECRET || 'YOUR_XERO_CLIENT_SECRET',\n      redirectUri: 'fynlopos://oauth/xero/callback',\n      scopes: [\n        'accounting.transactions',\n        'accounting.contacts.read',\n        'accounting.settings.read',\n        'accounting.reports.read',\n      ],\n      baseUrl: 'https://api.xero.com',\n    };\n  }\n\n  public static getInstance(): XeroAuthService {\n    if (!XeroAuthService.instance) {\n      XeroAuthService.instance = new XeroAuthService();\n    }\n    return XeroAuthService.instance;\n  }\n\n  /**\n   * Generate OAuth 2.0 authorization URL with PKCE\n   */\n  public async generateAuthUrl(): Promise<{\n    authUrl: string;\n    codeVerifier: string;\n    state: string;\n  }> {\n    try {\n      // Generate PKCE code verifier and challenge\n      const _codeVerifier = this.generateCodeVerifier();\n      const _codeChallenge = this.generateCodeChallenge(__codeVerifier);\n      const state = this.generateRandomString(32);\n\n      // Store code verifier and state securely\n      await this.storeSecureValue('pkce_code_verifier', _codeVerifier);\n      await this.storeSecureValue('oauth_state', _state);\n\n      const params = new URLSearchParams({\n        response_type: 'code',\n        client_id: this.config.clientId,\n        redirect_uri: this.config.redirectUri,\n        scope: this.config.scopes.join(' '),\n        state: _state,\n        code_challenge: _codeChallenge,\n        code_challenge_method: 'S256',\n      });\n\n      const authUrl = `https://login.xero.com/identity/connect/authorize?${params.toString()}`;\n\n      return { authUrl, _codeVerifier, state };\n    } catch (__error) {\n      throw new Error('Failed to generate authorization URL');\n    }\n  }\n\n  /**\n   * Exchange authorization code for access tokens\n   */\n  public async exchangeCodeForTokens(code: _string, state: _string): Promise<XeroTokens> {\n    try {\n      // Verify state parameter\n      const storedState = await this.getSecureValue('oauth_state');\n      if (state !== storedState) {\n        throw new Error('Invalid state parameter');\n      }\n\n      // Retrieve code verifier\n      const codeVerifier = await this.getSecureValue('pkce_code_verifier');\n      if (!codeVerifier) {\n        throw new Error('Code verifier not found');\n      }\n\n      const _tokenData = {\n        grant_type: 'authorization_code',\n        client_id: this.config.clientId,\n        code: _code,\n        redirect_uri: this.config.redirectUri,\n        code_verifier: _codeVerifier,\n      };\n\n      const response = await fetch('https://identity.xero.com/connect/token', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n          Authorization: `Basic ${this.getBasicAuthHeader()}`,\n        },\n        body: new URLSearchParams(__tokenData).toString(),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Token exchange failed: ${response.status}`);\n      }\n\n      const tokens = await response.json();\n\n      const xeroTokens: XeroTokens = {\n        access_token: tokens.access_token,\n        refresh_token: tokens.refresh_token,\n        expires_at: Date.now() + tokens.expires_in * 1000,\n        scopes: tokens.scope?.split(' ') || this.config.scopes,\n      };\n\n      // Store tokens securely\n      await this.storeTokens(__xeroTokens);\n\n      // Clean up temporary storage\n      await this.removeSecureValue('pkce_code_verifier');\n      await this.removeSecureValue('oauth_state');\n\n      return xeroTokens;\n    } catch (__error) {\n      throw new Error('Failed to exchange authorization code');\n    }\n  }\n\n  /**\n   * Refresh access token using refresh token\n   */\n  public async refreshAccessToken(): Promise<XeroTokens | null> {\n    try {\n      const currentTokens = await this.getStoredTokens();\n      if (!currentTokens?.refresh_token) {\n        return null;\n      }\n\n      const _tokenData = {\n        grant_type: 'refresh_token',\n        refresh_token: currentTokens.refresh_token,\n      };\n\n      const response = await fetch('https://identity.xero.com/connect/token', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n          Authorization: `Basic ${this.getBasicAuthHeader()}`,\n        },\n        body: new URLSearchParams(__tokenData).toString(),\n      });\n\n      if (!response.ok) {\n        return null;\n      }\n\n      const tokens = await response.json();\n\n      const refreshedTokens: XeroTokens = {\n        access_token: tokens.access_token,\n        refresh_token: tokens.refresh_token || currentTokens.refresh_token,\n        expires_at: Date.now() + tokens.expires_in * 1000,\n        tenant_id: currentTokens.tenant_id,\n        scopes: tokens.scope?.split(' ') || currentTokens.scopes,\n      };\n\n      await this.storeTokens(__refreshedTokens);\n      return refreshedTokens;\n    } catch (__error) {\n      return null;\n    }\n  }\n\n  /**\n   * Validate current access token\n   */\n  public async validateToken(): Promise<boolean> {\n    try {\n      const tokens = await this.getStoredTokens();\n      if (!tokens) {\n        return false;\n      }\n\n      // Check if token is expired (with 5 minute buffer)\n      const _isExpired = Date.now() > tokens.expires_at - 300000;\n      if (__isExpired) {\n        // Try to refresh token\n        const refreshedTokens = await this.refreshAccessToken();\n        return refreshedTokens !== null;\n      }\n\n      return true;\n    } catch (__error) {\n      return false;\n    }\n  }\n\n  /**\n   * Revoke access tokens and disconnect\n   */\n  public async revokeToken(): Promise<boolean> {\n    try {\n      const tokens = await this.getStoredTokens();\n      if (!tokens) {\n        return true; // Already disconnected\n      }\n\n      // Revoke the refresh token\n      const response = await fetch('https://identity.xero.com/connect/revocation', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n          Authorization: `Basic ${this.getBasicAuthHeader()}`,\n        },\n        body: new URLSearchParams({\n          token: tokens.refresh_token,\n          token_type_hint: 'refresh_token',\n        }).toString(),\n      });\n\n      // Clear stored tokens regardless of revocation success\n      await this.clearStoredTokens();\n\n      return response.ok;\n    } catch (__error) {\n      // Clear tokens even if revocation fails\n      await this.clearStoredTokens();\n      return false;\n    }\n  }\n\n  /**\n   * Get current access token\n   */\n  public async getAccessToken(): Promise<string | null> {\n    try {\n      const isValid = await this.validateToken();\n      if (!isValid) {\n        return null;\n      }\n\n      const tokens = await this.getStoredTokens();\n      return tokens?.access_token || null;\n    } catch (__error) {\n      return null;\n    }\n  }\n\n  /**\n   * Check if user is connected to Xero\n   */\n  public async isConnected(): Promise<boolean> {\n    return await this.validateToken();\n  }\n\n  /**\n   * Store tokens securely\n   */\n  private async storeTokens(tokens: _XeroTokens): Promise<void> {\n    try {\n      // Store sensitive tokens in Keychain\n      await Keychain.setInternetCredentials(\n        this.KEYCHAIN_SERVICE,\n        'xero_tokens',\n        JSON.stringify({\n          access_token: tokens.access_token,\n          refresh_token: tokens.refresh_token,\n        }),\n      );\n\n      // Store non-sensitive data in AsyncStorage\n      await AsyncStorage.setItem(\n        this.STORAGE_KEY,\n        JSON.stringify({\n          expires_at: tokens.expires_at,\n          tenant_id: tokens.tenant_id,\n          scopes: tokens.scopes,\n          connected_at: Date.now(),\n        }),\n      );\n    } catch (__error) {\n      throw new Error('Failed to store authentication tokens');\n    }\n  }\n\n  /**\n   * Retrieve stored tokens\n   */\n  public async getStoredTokens(): Promise<XeroTokens | null> {\n    try {\n      // Get sensitive tokens from Keychain\n      const credentials = await Keychain.getInternetCredentials(this.KEYCHAIN_SERVICE);\n      if (!credentials || credentials.username !== 'xero_tokens') {\n        return null;\n      }\n\n      const sensitiveTokens = JSON.parse(credentials.password);\n\n      // Get non-sensitive data from AsyncStorage\n      const settingsJson = await AsyncStorage.getItem(this.STORAGE_KEY);\n      if (!settingsJson) {\n        return null;\n      }\n\n      const settings = JSON.parse(__settingsJson);\n\n      return {\n        access_token: sensitiveTokens.access_token,\n        refresh_token: sensitiveTokens.refresh_token,\n        expires_at: settings.expires_at,\n        tenant_id: settings.tenant_id,\n        scopes: settings.scopes || this.config.scopes,\n      };\n    } catch (__error) {\n      return null;\n    }\n  }\n\n  /**\n   * Clear all stored tokens\n   */\n  private async clearStoredTokens(): Promise<void> {\n    try {\n      await Keychain.resetInternetCredentials(this.KEYCHAIN_SERVICE);\n      await AsyncStorage.removeItem(this.STORAGE_KEY);\n    } catch (__error) {\n      // Error handled silently\n    }\n  }\n\n  /**\n   * Store secure value temporarily\n   */\n  private async storeSecureValue(key: _string, value: _string): Promise<void> {\n    await Keychain.setInternetCredentials(`${this.KEYCHAIN_SERVICE}_${key}`, _key, value);\n  }\n\n  /**\n   * Get secure value\n   */\n  private async getSecureValue(key: _string): Promise<string | null> {\n    try {\n      const credentials = await Keychain.getInternetCredentials(`${this.KEYCHAIN_SERVICE}_${key}`);\n      return credentials ? credentials.password : null;\n    } catch {\n      return null;\n    }\n  }\n\n  /**\n   * Remove secure value\n   */\n  private async removeSecureValue(key: _string): Promise<void> {\n    try {\n      await Keychain.resetInternetCredentials(`${this.KEYCHAIN_SERVICE}_${key}`);\n    } catch {\n      // Ignore errors when removing\n    }\n  }\n\n  /**\n   * Generate Basic Auth header\n   */\n  private getBasicAuthHeader(): string {\n    const _credentials = `${this.config.clientId}:${this.config.clientSecret}`;\n    return Buffer.from(__credentials).toString('base64');\n  }\n\n  /**\n   * Generate PKCE code verifier\n   */\n  private generateCodeVerifier(): string {\n    return this.generateRandomString(128);\n  }\n\n  /**\n   * Generate PKCE code challenge\n   */\n  private generateCodeChallenge(_verifier: _string): string {\n    return CryptoJS.SHA256(__verifier).toString(CryptoJS.enc.Base64url);\n  }\n\n  /**\n   * Generate random string\n   */\n  private generateRandomString(length: _number): string {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~';\n    let result = '';\n    for (let i = 0; i < length; i++) {\n      result += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return result;\n  }\n\n  /**\n   * Open OAuth URL in browser\n   */\n  public async openAuthUrl(): Promise<void> {\n    try {\n      const { _authUrl } = await this.generateAuthUrl();\n      const _supported = await Linking.canOpenURL(__authUrl);\n\n      if (__supported) {\n        await Linking.openURL(__authUrl);\n      } else {\n        throw new Error('Cannot open authorization URL');\n      }\n    } catch (__error) {\n      throw error;\n    }\n  }\n}\n\nexport default XeroAuthService;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/services/XeroCustomerSyncService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'whereClause' is assigned a value but never used.","line":222,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":222,"endColumn":24},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'whereClause' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":222,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":222,"endColumn":24},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":255,"column":30,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":255,"endColumn":52},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":337,"column":12,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":337,"endColumn":43},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\+.","line":537,"column":27,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":537,"endColumn":28,"suggestions":[{"messageId":"removeEscape","fix":{"range":[15364,15365],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[15364,15364],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\(.","line":537,"column":38,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":537,"endColumn":39,"suggestions":[{"messageId":"removeEscape","fix":{"range":[15375,15376],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[15375,15375],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\).","line":537,"column":40,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":537,"endColumn":41,"suggestions":[{"messageId":"removeEscape","fix":{"range":[15377,15378],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[15377,15377],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import XeroApiClient from './XeroApiClient';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nexport interface CustomerSyncOptions {\n  direction: 'to_xero' | 'from_xero' | 'bidirectional';\n  batchSize?: number;\n  conflictResolution?: 'xero_wins' | 'pos_wins' | 'latest_wins' | 'manual';\n}\n\nexport interface SyncResult {\n  success: boolean;\n  recordsProcessed: number;\n  recordsUpdated: number;\n  recordsCreated: number;\n  recordsFailed: number;\n  errors: SyncError[];\n  duration: number;\n}\n\nexport interface SyncError {\n  entityId: string;\n  entityType: 'customer';\n  operation: 'create' | 'update' | 'delete';\n  error: string;\n  data?: unknown;\n}\n\nexport interface POSCustomer {\n  id: string;\n  name: string;\n  email?: string;\n  phone?: string;\n  address?: {\n    line1?: string;\n    line2?: string;\n    city?: string;\n    region?: string;\n    postalCode?: string;\n    country?: string;\n  };\n  taxNumber?: string;\n  isActive: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n  xeroContactId?: string;\n}\n\nexport interface XeroContact {\n  ContactID?: string;\n  ContactNumber?: string;\n  AccountNumber?: string;\n  ContactStatus?: 'ACTIVE' | 'ARCHIVED';\n  Name: string;\n  FirstName?: string;\n  LastName?: string;\n  EmailAddress?: string;\n  BankAccountDetails?: string;\n  TaxNumber?: string;\n  AccountsReceivableTaxType?: string;\n  AccountsPayableTaxType?: string;\n  Addresses?: XeroAddress[];\n  Phones?: XeroPhone[];\n  IsSupplier?: boolean;\n  IsCustomer?: boolean;\n  DefaultCurrency?: string;\n  UpdatedDateUTC?: string;\n  HasAttachments?: boolean;\n}\n\nexport interface XeroAddress {\n  AddressType: 'POBOX' | 'STREET' | 'DELIVERY';\n  AddressLine1?: string;\n  AddressLine2?: string;\n  AddressLine3?: string;\n  AddressLine4?: string;\n  City?: string;\n  Region?: string;\n  PostalCode?: string;\n  Country?: string;\n  AttentionTo?: string;\n}\n\nexport interface XeroPhone {\n  PhoneType: 'DEFAULT' | 'DDI' | 'FAX' | 'MOBILE';\n  PhoneNumber: string;\n  PhoneAreaCode?: string;\n  PhoneCountryCode?: string;\n}\n\nexport interface CustomerMapping {\n  posCustomerId: string;\n  xeroContactId: string;\n  lastSyncedAt: Date;\n  syncDirection: 'to_xero' | 'from_xero';\n  conflictResolution?: string;\n}\n\nexport class XeroCustomerSyncService {\n  private static instance: XeroCustomerSyncService;\n  private apiClient: XeroApiClient;\n  private readonly STORAGE_PREFIX = 'xero_customer_sync_';\n  private readonly MAPPING_KEY = 'customer_mappings';\n  private readonly LAST_SYNC_KEY = 'last_customer_sync';\n\n  private constructor() {\n    this.apiClient = XeroApiClient.getInstance();\n  }\n\n  public static getInstance(): XeroCustomerSyncService {\n    if (!XeroCustomerSyncService.instance) {\n      XeroCustomerSyncService.instance = new XeroCustomerSyncService();\n    }\n    return XeroCustomerSyncService.instance;\n  }\n\n  /**\n   * Sync customers to Xero (POS -> Xero)\n   */\n  public async syncCustomersToXero(\n    customers: POSCustomer[],\n    options: CustomerSyncOptions = { direction: 'to_xero' },\n  ): Promise<SyncResult> {\n    const startTime = Date.now();\n    const result: SyncResult = {\n      success: _true,\n      recordsProcessed: 0,\n      recordsUpdated: 0,\n      recordsCreated: 0,\n      recordsFailed: 0,\n      errors: [],\n      duration: 0,\n    };\n\n    try {\n      const mappings = await this.getCustomerMappings();\n      const batchSize = options.batchSize || 10;\n\n      // Process customers in batches\n      for (let i = 0; i < customers.length; i += batchSize) {\n        const batch = customers.slice(__i, i + batchSize);\n\n        for (const customer of batch) {\n          try {\n            result.recordsProcessed++;\n\n            const existingMapping = mappings.find(m => m.posCustomerId === customer.id);\n\n            if (existingMapping && existingMapping.xeroContactId) {\n              // Update existing contact\n              await this.updateXeroContact(__customer, existingMapping.xeroContactId);\n              result.recordsUpdated++;\n            } else {\n              // Create new contact\n              const xeroContactId = await this.createXeroContact(__customer);\n              result.recordsCreated++;\n\n              // Save mapping\n              await this.saveCustomerMapping({\n                posCustomerId: customer.id,\n                xeroContactId,\n                lastSyncedAt: new Date(),\n                syncDirection: 'to_xero',\n              });\n            }\n          } catch (__error) {\n            result.recordsFailed++;\n            result.errors.push({\n              entityId: customer.id,\n              entityType: 'customer',\n              operation: existingMapping ? 'update' : 'create',\n              error: error instanceof Error ? error.message : 'Unknown error',\n              data: _customer,\n            });\n          }\n        }\n\n        // Add delay between batches to respect rate limits\n        if (i + batchSize < customers.length) {\n          await this.delay(1000); // 1 second delay\n        }\n      }\n\n      await this.updateLastSyncTime();\n      result.success = result.recordsFailed === 0;\n    } catch (__error) {\n      result.success = false;\n      result.errors.push({\n        entityId: 'batch',\n        entityType: 'customer',\n        operation: 'create',\n        error: error instanceof Error ? error.message : 'Batch sync failed',\n      });\n    }\n\n    result.duration = Date.now() - startTime;\n    return result;\n  }\n\n  /**\n   * Sync customers from Xero (Xero -> POS)\n   */\n  public async syncCustomersFromXero(\n    _options: CustomerSyncOptions = { direction: 'from_xero' },\n  ): Promise<{ result: SyncResult; customers: POSCustomer[] }> {\n    const startTime = Date.now();\n    const result: SyncResult = {\n      success: _true,\n      recordsProcessed: 0,\n      recordsUpdated: 0,\n      recordsCreated: 0,\n      recordsFailed: 0,\n      errors: [],\n      duration: 0,\n    };\n    const customers: POSCustomer[] = [];\n\n    try {\n      const lastSync = await this.getLastSyncTime();\n      const mappings = await this.getCustomerMappings();\n\n      // Build where clause for modified contacts\n      const whereClause = 'IsCustomer==true';\n      if (__lastSync) {\n        const isoDate = lastSync.toISOString();\n        _whereClause += ` AND UpdatedDateUTC>DateTime(${isoDate})`;\n      }\n\n      // Fetch contacts from Xero\n      const xeroResponse = await this.apiClient.getContacts({\n        where: _whereClause,\n        order: 'UpdatedDateUTC DESC',\n      });\n\n      const xeroContacts = xeroResponse.Contacts || [];\n      result.recordsProcessed = xeroContacts.length;\n\n      for (const xeroContact of xeroContacts) {\n        try {\n          const existingMapping = mappings.find(m => m.xeroContactId === xeroContact.ContactID);\n          const posCustomer = this.transformXeroContactToPOSCustomer(\n            xeroContact,\n            existingMapping?.posCustomerId,\n          );\n\n          customers.push(__posCustomer);\n\n          if (__existingMapping) {\n            result.recordsUpdated++;\n          } else {\n            result.recordsCreated++;\n\n            // Save new mapping\n            await this.saveCustomerMapping({\n              posCustomerId: posCustomer.id,\n              xeroContactId: xeroContact.ContactID!,\n              lastSyncedAt: new Date(),\n              syncDirection: 'from_xero',\n            });\n          }\n        } catch (__error) {\n          result.recordsFailed++;\n          result.errors.push({\n            entityId: xeroContact.ContactID || 'unknown',\n            entityType: 'customer',\n            operation: 'create',\n            error: error instanceof Error ? error.message : 'Transform failed',\n            data: _xeroContact,\n          });\n        }\n      }\n\n      await this.updateLastSyncTime();\n      result.success = result.recordsFailed === 0;\n    } catch (__error) {\n      result.success = false;\n      result.errors.push({\n        entityId: 'batch',\n        entityType: 'customer',\n        operation: 'create',\n        error: error instanceof Error ? error.message : 'Batch sync failed',\n      });\n    }\n\n    result.duration = Date.now() - startTime;\n    return { result, customers };\n  }\n\n  /**\n   * Bidirectional sync with conflict resolution\n   */\n  public async syncCustomersBidirectional(\n    posCustomers: POSCustomer[],\n    _options: CustomerSyncOptions = {\n      direction: 'bidirectional',\n      conflictResolution: 'latest_wins',\n    },\n  ): Promise<{ result: SyncResult; mergedCustomers: POSCustomer[] }> {\n    const startTime = Date.now();\n\n    // First, sync from Xero to get latest changes\n    const fromXeroResult = await this.syncCustomersFromXero({ direction: 'from_xero' });\n\n    // Then, sync to Xero with conflict resolution\n    const toXeroResult = await this.syncCustomersToXero(__posCustomers, { direction: 'to_xero' });\n\n    // Merge results\n    const _combinedResult: SyncResult = {\n      success: fromXeroResult.result.success && toXeroResult.success,\n      recordsProcessed: fromXeroResult.result.recordsProcessed + toXeroResult.recordsProcessed,\n      recordsUpdated: fromXeroResult.result.recordsUpdated + toXeroResult.recordsUpdated,\n      recordsCreated: fromXeroResult.result.recordsCreated + toXeroResult.recordsCreated,\n      recordsFailed: fromXeroResult.result.recordsFailed + toXeroResult.recordsFailed,\n      errors: [...fromXeroResult.result.errors, ...toXeroResult.errors],\n      duration: Date.now() - startTime,\n    };\n\n    return {\n      result: _combinedResult,\n      mergedCustomers: fromXeroResult.customers,\n    };\n  }\n\n  /**\n   * Create new contact in Xero\n   */\n  private async createXeroContact(_customer: _POSCustomer): Promise<string> {\n    const xeroContact = this.transformPOSCustomerToXeroContact(__customer);\n\n    const response = await this.apiClient.createContact({\n      Contacts: [xeroContact],\n    });\n\n    if (!response.Contacts || response.Contacts.length === 0) {\n      throw new Error('Failed to create contact in Xero');\n    }\n\n    return response.Contacts[0].ContactID!;\n  }\n\n  /**\n   * Update existing contact in Xero\n   */\n  private async updateXeroContact(customer: _POSCustomer, xeroContactId: _string): Promise<void> {\n    const xeroContact = this.transformPOSCustomerToXeroContact(__customer);\n    xeroContact.ContactID = xeroContactId;\n\n    await this.apiClient.makeRequest(`/Contacts/${xeroContactId}`, {\n      method: 'POST',\n      body: { Contacts: [xeroContact] },\n    });\n  }\n\n  /**\n   * Transform POS customer to Xero contact format\n   */\n  private transformPOSCustomerToXeroContact(customer: _POSCustomer): XeroContact {\n    const contact: XeroContact = {\n      Name: customer.name,\n      EmailAddress: customer.email,\n      TaxNumber: customer.taxNumber,\n      IsCustomer: _true,\n      IsSupplier: _false,\n      ContactStatus: customer.isActive ? 'ACTIVE' : 'ARCHIVED',\n    };\n\n    // Add phone if available\n    if (customer.phone) {\n      contact.Phones = [\n        {\n          PhoneType: 'DEFAULT',\n          PhoneNumber: customer.phone,\n        },\n      ];\n    }\n\n    // Add address if available\n    if (customer.address) {\n      contact.Addresses = [\n        {\n          AddressType: 'STREET',\n          AddressLine1: customer.address.line1,\n          AddressLine2: customer.address.line2,\n          City: customer.address.city,\n          Region: customer.address.region,\n          PostalCode: customer.address.postalCode,\n          Country: customer.address.country,\n        },\n      ];\n    }\n\n    return contact;\n  }\n\n  /**\n   * Transform Xero contact to POS customer format\n   */\n  private transformXeroContactToPOSCustomer(\n    xeroContact: _XeroContact,\n    existingId?: _string,\n  ): POSCustomer {\n    const customer: POSCustomer = {\n      id: existingId || this.generateCustomerId(),\n      name: xeroContact.Name,\n      email: xeroContact.EmailAddress,\n      taxNumber: xeroContact.TaxNumber,\n      isActive: xeroContact.ContactStatus === 'ACTIVE',\n      createdAt: new Date(),\n      updatedAt: new Date(xeroContact.UpdatedDateUTC || Date.now()),\n      xeroContactId: xeroContact.ContactID,\n    };\n\n    // Extract phone\n    if (xeroContact.Phones && xeroContact.Phones.length > 0) {\n      const defaultPhone =\n        xeroContact.Phones.find(p => p.PhoneType === 'DEFAULT') || xeroContact.Phones[0];\n      customer.phone = defaultPhone.PhoneNumber;\n    }\n\n    // Extract address\n    if (xeroContact.Addresses && xeroContact.Addresses.length > 0) {\n      const streetAddress =\n        xeroContact.Addresses.find(a => a.AddressType === 'STREET') || xeroContact.Addresses[0];\n      customer.address = {\n        line1: streetAddress.AddressLine1,\n        line2: streetAddress.AddressLine2,\n        city: streetAddress.City,\n        region: streetAddress.Region,\n        postalCode: streetAddress.PostalCode,\n        country: streetAddress.Country,\n      };\n    }\n\n    return customer;\n  }\n\n  /**\n   * Get customer mappings from storage\n   */\n  private async getCustomerMappings(): Promise<CustomerMapping[]> {\n    try {\n      const mappingsJson = await AsyncStorage.getItem(`${this.STORAGE_PREFIX}${this.MAPPING_KEY}`);\n      return mappingsJson ? JSON.parse(__mappingsJson) : [];\n    } catch (__error) {\n      return [];\n    }\n  }\n\n  /**\n   * Save customer mapping\n   */\n  private async saveCustomerMapping(mapping: _CustomerMapping): Promise<void> {\n    try {\n      const mappings = await this.getCustomerMappings();\n      const existingIndex = mappings.findIndex(m => m.posCustomerId === mapping.posCustomerId);\n\n      if (existingIndex >= 0) {\n        mappings[existingIndex] = mapping;\n      } else {\n        mappings.push(__mapping);\n      }\n\n      await AsyncStorage.setItem(\n        `${this.STORAGE_PREFIX}${this.MAPPING_KEY}`,\n        JSON.stringify(__mappings),\n      );\n    } catch (__error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get last sync time\n   */\n  private async getLastSyncTime(): Promise<Date | null> {\n    try {\n      const lastSyncStr = await AsyncStorage.getItem(`${this.STORAGE_PREFIX}${this.LAST_SYNC_KEY}`);\n      return lastSyncStr ? new Date(__lastSyncStr) : null;\n    } catch (__error) {\n      return null;\n    }\n  }\n\n  /**\n   * Update last sync time\n   */\n  private async updateLastSyncTime(): Promise<void> {\n    try {\n      await AsyncStorage.setItem(\n        `${this.STORAGE_PREFIX}${this.LAST_SYNC_KEY}`,\n        new Date().toISOString(),\n      );\n    } catch (__error) {\n      // Error handled silently\n    }\n  }\n\n  /**\n   * Generate unique customer ID\n   */\n  private generateCustomerId(): string {\n    return `cust_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Validate customer data\n   */\n  public validateCustomerData(customer: _POSCustomer): { valid: boolean; errors: string[] } {\n    const errors: string[] = [];\n\n    if (!customer.name || customer.name.trim().length === 0) {\n      errors.push('Customer name is required');\n    }\n\n    if (customer.email && !this.isValidEmail(customer.email)) {\n      errors.push('Invalid email format');\n    }\n\n    if (customer.phone && !this.isValidPhone(customer.phone)) {\n      errors.push('Invalid phone format');\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors,\n    };\n  }\n\n  /**\n   * Utility functions\n   */\n  private isValidEmail(_email: _string): boolean {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(__email);\n  }\n\n  private isValidPhone(_phone: _string): boolean {\n    const phoneRegex = /^[\\+]?[\\d\\s\\-\\(\\)]{10,}$/;\n    return phoneRegex.test(__phone);\n  }\n\n  private delay(_ms: _number): Promise<void> {\n    return new Promise(_resolve => setTimeout(__resolve, _ms));\n  }\n\n  /**\n   * Get sync statistics\n   */\n  public async getSyncStatistics(): Promise<{\n    totalMappings: number;\n    lastSyncTime: Date | null;\n    pendingSync: number;\n  }> {\n    const mappings = await this.getCustomerMappings();\n    const _lastSync = await this.getLastSyncTime();\n\n    return {\n      totalMappings: mappings.length,\n      lastSyncTime: _lastSync,\n      pendingSync: 0, // Would need to calculate based on local changes\n    };\n  }\n}\n\nexport default XeroCustomerSyncService;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/services/XeroItemsSyncService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'whereClause' is assigned a value but never used.","line":218,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":218,"endColumn":24},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'whereClause' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":218,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":218,"endColumn":24},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":251,"column":27,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":251,"endColumn":43},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":302,"column":12,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":302,"endColumn":42},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":566,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":566,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15653,15656],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15653,15656],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import XeroApiClient from './XeroApiClient';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nexport interface ItemSyncOptions {\n  direction: 'to_xero' | 'from_xero' | 'bidirectional';\n  batchSize?: number;\n  syncInventory?: boolean;\n  conflictResolution?: 'xero_wins' | 'pos_wins' | 'latest_wins' | 'manual';\n}\n\nexport interface ItemSyncResult {\n  success: boolean;\n  recordsProcessed: number;\n  recordsUpdated: number;\n  recordsCreated: number;\n  recordsFailed: number;\n  errors: ItemSyncError[];\n  duration: number;\n}\n\nexport interface ItemSyncError {\n  entityId: string;\n  entityType: 'item';\n  operation: 'create' | 'update' | 'delete';\n  error: string;\n  data?: unknown;\n}\n\nexport interface POSMenuItem {\n  id: string;\n  name: string;\n  description?: string;\n  category: string;\n  price: number;\n  cost?: number;\n  sku?: string;\n  barcode?: string;\n  taxRate?: number;\n  taxType?: string;\n  isActive: boolean;\n  isInventoryTracked: boolean;\n  stockQuantity?: number;\n  unitOfMeasure?: string;\n  createdAt: Date;\n  updatedAt: Date;\n  xeroItemId?: string;\n}\n\nexport interface XeroItem {\n  ItemID?: string;\n  Code?: string;\n  Name: string;\n  Description?: string;\n  UnitPrice?: number;\n  TaxType?: string;\n  IsSold?: boolean;\n  IsPurchased?: boolean;\n  IsTrackedAsInventory?: boolean;\n  InventoryAssetAccountCode?: string;\n  COGSAccountCode?: string;\n  SalesAccountCode?: string;\n  PurchaseAccountCode?: string;\n  QuantityOnHand?: number;\n  TotalCostPool?: number;\n  UpdatedDateUTC?: string;\n  PurchaseDescription?: string;\n  PurchasePrice?: number;\n}\n\nexport interface ItemMapping {\n  posItemId: string;\n  xeroItemId: string;\n  lastSyncedAt: Date;\n  syncDirection: 'to_xero' | 'from_xero';\n  conflictResolution?: string;\n}\n\nexport interface CategoryMapping {\n  posCategory: string;\n  xeroAccountCode: string;\n  lastSyncedAt: Date;\n}\n\nexport class XeroItemsSyncService {\n  private static instance: XeroItemsSyncService;\n  private apiClient: XeroApiClient;\n  private readonly STORAGE_PREFIX = 'xero_items_sync_';\n  private readonly MAPPING_KEY = 'item_mappings';\n  private readonly CATEGORY_MAPPING_KEY = 'category_mappings';\n  private readonly LAST_SYNC_KEY = 'last_items_sync';\n\n  // Default Xero account codes for different item types\n  private readonly DEFAULT_ACCOUNTS = {\n    SALES: '200', // Sales Revenue\n    COGS: '310', // Cost of Goods Sold\n    INVENTORY: '630', // Inventory Asset\n    PURCHASE: '300', // Purchases\n  };\n\n  private constructor() {\n    this.apiClient = XeroApiClient.getInstance();\n  }\n\n  public static getInstance(): XeroItemsSyncService {\n    if (!XeroItemsSyncService.instance) {\n      XeroItemsSyncService.instance = new XeroItemsSyncService();\n    }\n    return XeroItemsSyncService.instance;\n  }\n\n  /**\n   * Sync menu items to Xero (POS -> Xero)\n   */\n  public async syncItemsToXero(\n    items: POSMenuItem[],\n    options: ItemSyncOptions = { direction: 'to_xero' },\n  ): Promise<ItemSyncResult> {\n    const startTime = Date.now();\n    const result: ItemSyncResult = {\n      success: _true,\n      recordsProcessed: 0,\n      recordsUpdated: 0,\n      recordsCreated: 0,\n      recordsFailed: 0,\n      errors: [],\n      duration: 0,\n    };\n\n    try {\n      const mappings = await this.getItemMappings();\n      const _categoryMappings = await this.getCategoryMappings();\n      const batchSize = options.batchSize || 10;\n\n      // Process items in batches\n      for (let i = 0; i < items.length; i += batchSize) {\n        const batch = items.slice(__i, i + batchSize);\n\n        for (const item of batch) {\n          try {\n            result.recordsProcessed++;\n\n            const existingMapping = mappings.find(m => m.posItemId === item.id);\n\n            if (existingMapping && existingMapping.xeroItemId) {\n              // Update existing item\n              await this.updateXeroItem(__item, existingMapping.xeroItemId, _categoryMappings);\n              result.recordsUpdated++;\n            } else {\n              // Create new item\n              const xeroItemId = await this.createXeroItem(__item, _categoryMappings);\n              result.recordsCreated++;\n\n              // Save mapping\n              await this.saveItemMapping({\n                posItemId: item.id,\n                xeroItemId,\n                lastSyncedAt: new Date(),\n                syncDirection: 'to_xero',\n              });\n            }\n          } catch (__error) {\n            result.recordsFailed++;\n            result.errors.push({\n              entityId: item.id,\n              entityType: 'item',\n              operation: existingMapping ? 'update' : 'create',\n              error: error instanceof Error ? error.message : 'Unknown error',\n              data: _item,\n            });\n          }\n        }\n\n        // Add delay between batches to respect rate limits\n        if (i + batchSize < items.length) {\n          await this.delay(1000); // 1 second delay\n        }\n      }\n\n      await this.updateLastSyncTime();\n      result.success = result.recordsFailed === 0;\n    } catch (__error) {\n      result.success = false;\n      result.errors.push({\n        entityId: 'batch',\n        entityType: 'item',\n        operation: 'create',\n        error: error instanceof Error ? error.message : 'Batch sync failed',\n      });\n    }\n\n    result.duration = Date.now() - startTime;\n    return result;\n  }\n\n  /**\n   * Sync items from Xero (Xero -> POS)\n   */\n  public async syncItemsFromXero(\n    _options: ItemSyncOptions = { direction: 'from_xero' },\n  ): Promise<{ result: ItemSyncResult; items: POSMenuItem[] }> {\n    const startTime = Date.now();\n    const result: ItemSyncResult = {\n      success: _true,\n      recordsProcessed: 0,\n      recordsUpdated: 0,\n      recordsCreated: 0,\n      recordsFailed: 0,\n      errors: [],\n      duration: 0,\n    };\n    const items: POSMenuItem[] = [];\n\n    try {\n      const lastSync = await this.getLastSyncTime();\n      const mappings = await this.getItemMappings();\n\n      // Build where clause for modified items\n      const whereClause = 'IsSold==true';\n      if (__lastSync) {\n        const isoDate = lastSync.toISOString();\n        _whereClause += ` AND UpdatedDateUTC>DateTime(${isoDate})`;\n      }\n\n      // Fetch items from Xero\n      const xeroResponse = await this.apiClient.getItems({\n        where: _whereClause,\n        order: 'UpdatedDateUTC DESC',\n      });\n\n      const xeroItems = xeroResponse.Items || [];\n      result.recordsProcessed = xeroItems.length;\n\n      for (const xeroItem of xeroItems) {\n        try {\n          const existingMapping = mappings.find(m => m.xeroItemId === xeroItem.ItemID);\n          const posItem = this.transformXeroItemToPOSMenuItem(\n            _xeroItem,\n            existingMapping?.posItemId,\n          );\n\n          items.push(__posItem);\n\n          if (__existingMapping) {\n            result.recordsUpdated++;\n          } else {\n            result.recordsCreated++;\n\n            // Save new mapping\n            await this.saveItemMapping({\n              posItemId: posItem.id,\n              xeroItemId: xeroItem.ItemID!,\n              lastSyncedAt: new Date(),\n              syncDirection: 'from_xero',\n            });\n          }\n        } catch (__error) {\n          result.recordsFailed++;\n          result.errors.push({\n            entityId: xeroItem.ItemID || 'unknown',\n            entityType: 'item',\n            operation: 'create',\n            error: error instanceof Error ? error.message : 'Transform failed',\n            data: _xeroItem,\n          });\n        }\n      }\n\n      await this.updateLastSyncTime();\n      result.success = result.recordsFailed === 0;\n    } catch (__error) {\n      result.success = false;\n      result.errors.push({\n        entityId: 'batch',\n        entityType: 'item',\n        operation: 'create',\n        error: error instanceof Error ? error.message : 'Batch sync failed',\n      });\n    }\n\n    result.duration = Date.now() - startTime;\n    return { result, items };\n  }\n\n  /**\n   * Create new item in Xero\n   */\n  private async createXeroItem(\n    _item: _POSMenuItem,\n    _categoryMappings: CategoryMapping[],\n  ): Promise<string> {\n    const xeroItem = this.transformPOSMenuItemToXeroItem(__item, _categoryMappings);\n\n    const response = await this.apiClient.makeRequest('/Items', {\n      method: 'POST',\n      body: { Items: [xeroItem] },\n    });\n\n    if (!response.data.Items || response.data.Items.length === 0) {\n      throw new Error('Failed to create item in Xero');\n    }\n\n    return response.data.Items[0].ItemID!;\n  }\n\n  /**\n   * Update existing item in Xero\n   */\n  private async updateXeroItem(\n    item: _POSMenuItem,\n    xeroItemId: _string,\n    _categoryMappings: CategoryMapping[],\n  ): Promise<void> {\n    const xeroItem = this.transformPOSMenuItemToXeroItem(__item, _categoryMappings);\n    xeroItem.ItemID = xeroItemId;\n\n    await this.apiClient.makeRequest(`/Items/${xeroItemId}`, {\n      method: 'POST',\n      body: { Items: [xeroItem] },\n    });\n  }\n\n  /**\n   * Transform POS menu item to Xero item format\n   */\n  private transformPOSMenuItemToXeroItem(\n    item: _POSMenuItem,\n    categoryMappings: CategoryMapping[],\n  ): XeroItem {\n    const categoryMapping = categoryMappings.find(cm => cm.posCategory === item.category);\n\n    const xeroItem: XeroItem = {\n      Code: item.sku || item.id,\n      Name: item.name,\n      Description: item.description,\n      UnitPrice: item.price,\n      TaxType: this.mapTaxType(item.taxType, item.taxRate),\n      IsSold: _true,\n      IsPurchased: _true,\n      IsTrackedAsInventory: item.isInventoryTracked,\n    };\n\n    // Set account codes based on category mapping or defaults\n    if (__categoryMapping) {\n      xeroItem.SalesAccountCode = categoryMapping.xeroAccountCode;\n    } else {\n      xeroItem.SalesAccountCode = this.DEFAULT_ACCOUNTS.SALES;\n    }\n\n    // Set additional account codes for inventory tracking\n    if (item.isInventoryTracked) {\n      xeroItem.InventoryAssetAccountCode = this.DEFAULT_ACCOUNTS.INVENTORY;\n      xeroItem.COGSAccountCode = this.DEFAULT_ACCOUNTS.COGS;\n      xeroItem.PurchaseAccountCode = this.DEFAULT_ACCOUNTS.PURCHASE;\n\n      if (item.stockQuantity !== undefined) {\n        xeroItem.QuantityOnHand = item.stockQuantity;\n      }\n\n      if (item.cost !== undefined) {\n        xeroItem.PurchasePrice = item.cost;\n        xeroItem.TotalCostPool = item.cost * (item.stockQuantity || 0);\n      }\n    }\n\n    return xeroItem;\n  }\n\n  /**\n   * Transform Xero item to POS menu item format\n   */\n  private transformXeroItemToPOSMenuItem(xeroItem: _XeroItem, existingId?: _string): POSMenuItem {\n    const item: POSMenuItem = {\n      id: existingId || this.generateItemId(),\n      name: xeroItem.Name,\n      description: xeroItem.Description,\n      category: this.mapXeroAccountToCategory(xeroItem.SalesAccountCode),\n      price: xeroItem.UnitPrice || 0,\n      cost: xeroItem.PurchasePrice,\n      sku: xeroItem.Code,\n      taxType: xeroItem.TaxType,\n      isActive: _true, // Xero doesn't have explicit active/inactive\n      isInventoryTracked: xeroItem.IsTrackedAsInventory || false,\n      stockQuantity: xeroItem.QuantityOnHand,\n      unitOfMeasure: 'each', // Default unit\n      createdAt: new Date(),\n      updatedAt: new Date(xeroItem.UpdatedDateUTC || Date.now()),\n      xeroItemId: xeroItem.ItemID,\n    };\n\n    return item;\n  }\n\n  /**\n   * Map POS tax type to Xero tax type\n   */\n  private mapTaxType(taxType?: _string, taxRate?: _number): string {\n    if (!taxType && !taxRate) {\n      return 'NONE';\n    }\n\n    // Common UK VAT rates\n    if (taxRate === 20) {\n      return 'OUTPUT2'; // Standard VAT 20%\n    }\n    if (taxRate === 5) {\n      return 'OUTPUT'; // Reduced VAT 5%\n    }\n    if (taxRate === 0) {\n      return 'ZERORATEDOUTPUT'; // Zero-rated VAT\n    }\n\n    // Return the tax type as is if provided\n    return taxType || 'NONE';\n  }\n\n  /**\n   * Map Xero account code to POS category\n   */\n  private mapXeroAccountToCategory(accountCode?: _string): string {\n    const categoryMap: Record<string, string> = {\n      '200': 'Food',\n      '260': 'Beverages',\n      '270': 'Alcohol',\n      '280': 'Desserts',\n    };\n\n    return categoryMap[accountCode || ''] || 'General';\n  }\n\n  /**\n   * Get item mappings from storage\n   */\n  private async getItemMappings(): Promise<ItemMapping[]> {\n    try {\n      const mappingsJson = await AsyncStorage.getItem(`${this.STORAGE_PREFIX}${this.MAPPING_KEY}`);\n      return mappingsJson ? JSON.parse(__mappingsJson) : [];\n    } catch (__error) {\n      return [];\n    }\n  }\n\n  /**\n   * Save item mapping\n   */\n  private async saveItemMapping(mapping: _ItemMapping): Promise<void> {\n    try {\n      const mappings = await this.getItemMappings();\n      const existingIndex = mappings.findIndex(m => m.posItemId === mapping.posItemId);\n\n      if (existingIndex >= 0) {\n        mappings[existingIndex] = mapping;\n      } else {\n        mappings.push(__mapping);\n      }\n\n      await AsyncStorage.setItem(\n        `${this.STORAGE_PREFIX}${this.MAPPING_KEY}`,\n        JSON.stringify(__mappings),\n      );\n    } catch (__error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get category mappings from storage\n   */\n  private async getCategoryMappings(): Promise<CategoryMapping[]> {\n    try {\n      const mappingsJson = await AsyncStorage.getItem(\n        `${this.STORAGE_PREFIX}${this.CATEGORY_MAPPING_KEY}`,\n      );\n      return mappingsJson ? JSON.parse(__mappingsJson) : [];\n    } catch (__error) {\n      return [];\n    }\n  }\n\n  /**\n   * Save category mapping\n   */\n  public async saveCategoryMapping(mapping: _CategoryMapping): Promise<void> {\n    try {\n      const mappings = await this.getCategoryMappings();\n      const existingIndex = mappings.findIndex(m => m.posCategory === mapping.posCategory);\n\n      if (existingIndex >= 0) {\n        mappings[existingIndex] = mapping;\n      } else {\n        mappings.push(__mapping);\n      }\n\n      await AsyncStorage.setItem(\n        `${this.STORAGE_PREFIX}${this.CATEGORY_MAPPING_KEY}`,\n        JSON.stringify(__mappings),\n      );\n    } catch (__error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get last sync time\n   */\n  private async getLastSyncTime(): Promise<Date | null> {\n    try {\n      const lastSyncStr = await AsyncStorage.getItem(`${this.STORAGE_PREFIX}${this.LAST_SYNC_KEY}`);\n      return lastSyncStr ? new Date(__lastSyncStr) : null;\n    } catch (__error) {\n      return null;\n    }\n  }\n\n  /**\n   * Update last sync time\n   */\n  private async updateLastSyncTime(): Promise<void> {\n    try {\n      await AsyncStorage.setItem(\n        `${this.STORAGE_PREFIX}${this.LAST_SYNC_KEY}`,\n        new Date().toISOString(),\n      );\n    } catch (__error) {\n      // Error handled silently\n    }\n  }\n\n  /**\n   * Generate unique item ID\n   */\n  private generateItemId(): string {\n    return `item_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Validate item data\n   */\n  public validateItemData(item: _POSMenuItem): { valid: boolean; errors: string[] } {\n    const errors: string[] = [];\n\n    if (!item.name || item.name.trim().length === 0) {\n      errors.push('Item name is required');\n    }\n\n    if (item.price < 0) {\n      errors.push('Price cannot be negative');\n    }\n\n    if (item.isInventoryTracked && (item.stockQuantity === undefined || item.stockQuantity < 0)) {\n      errors.push('Stock quantity must be specified for tracked items');\n    }\n\n    if (item.taxRate !== undefined && (item.taxRate < 0 || item.taxRate > 100)) {\n      errors.push('Tax rate must be between 0 and 100');\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors,\n    };\n  }\n\n  /**\n   * Get available Xero accounts for category mapping\n   */\n  public async getXeroAccounts(): Promise<any[]> {\n    try {\n      const response = await this.apiClient.makeRequest('/Accounts');\n      return response.data.Accounts || [];\n    } catch (__error) {\n      return [];\n    }\n  }\n\n  /**\n   * Utility delay function\n   */\n  private delay(_ms: _number): Promise<void> {\n    return new Promise(_resolve => setTimeout(__resolve, _ms));\n  }\n\n  /**\n   * Get sync statistics\n   */\n  public async getSyncStatistics(): Promise<{\n    totalMappings: number;\n    categoryMappings: number;\n    lastSyncTime: Date | null;\n    pendingSync: number;\n  }> {\n    const mappings = await this.getItemMappings();\n    const categoryMappings = await this.getCategoryMappings();\n    const _lastSync = await this.getLastSyncTime();\n\n    return {\n      totalMappings: mappings.length,\n      categoryMappings: categoryMappings.length,\n      lastSyncTime: _lastSync,\n      pendingSync: 0, // Would need to calculate based on local changes\n    };\n  }\n\n  /**\n   * Bulk update inventory levels in Xero\n   */\n  public async updateInventoryLevels(\n    inventoryUpdates: { itemId: string; quantity: number; cost?: number }[],\n  ): Promise<ItemSyncResult> {\n    const startTime = Date.now();\n    const result: ItemSyncResult = {\n      success: _true,\n      recordsProcessed: 0,\n      recordsUpdated: 0,\n      recordsCreated: 0,\n      recordsFailed: 0,\n      errors: [],\n      duration: 0,\n    };\n\n    try {\n      const mappings = await this.getItemMappings();\n\n      for (const update of inventoryUpdates) {\n        try {\n          result.recordsProcessed++;\n\n          const mapping = mappings.find(m => m.posItemId === update.itemId);\n          if (!mapping) {\n            throw new Error('Item not mapped to Xero');\n          }\n\n          const xeroItem: Partial<XeroItem> = {\n            ItemID: mapping.xeroItemId,\n            QuantityOnHand: update.quantity,\n          };\n\n          if (update.cost !== undefined) {\n            xeroItem.PurchasePrice = update.cost;\n            xeroItem.TotalCostPool = update.cost * update.quantity;\n          }\n\n          await this.apiClient.makeRequest(`/Items/${mapping.xeroItemId}`, {\n            method: 'POST',\n            body: { Items: [xeroItem] },\n          });\n\n          result.recordsUpdated++;\n        } catch (__error) {\n          result.recordsFailed++;\n          result.errors.push({\n            entityId: update.itemId,\n            entityType: 'item',\n            operation: 'update',\n            error: error instanceof Error ? error.message : 'Unknown error',\n            data: _update,\n          });\n        }\n      }\n\n      result.success = result.recordsFailed === 0;\n    } catch (__error) {\n      result.success = false;\n    }\n\n    result.duration = Date.now() - startTime;\n    return result;\n  }\n}\n\nexport default XeroItemsSyncService;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/services/XeroSalesSyncService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'paymentId' is defined but never used.","line":208,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":208,"endColumn":46},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'paymentId' is defined but never used. Allowed unused vars must match /^_/u.","line":208,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":208,"endColumn":46},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":302,"column":12,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":302,"endColumn":43},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":333,"column":12,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":333,"endColumn":48},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":376,"column":12,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":376,"endColumn":43},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":388,"column":16,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":388,"endColumn":47},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":402,"column":14,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":402,"endColumn":51},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":572,"column":14,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":572,"endColumn":56},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_failedOrders' is assigned a value but never used.","line":705,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":705,"endColumn":24}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import XeroApiClient from './XeroApiClient';\nimport XeroCustomerSyncService from './XeroCustomerSyncService';\nimport XeroItemsSyncService from './XeroItemsSyncService';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nexport interface SalesSyncOptions {\n  syncPayments?: boolean;\n  createContacts?: boolean;\n  batchSize?: number;\n  dateRange?: { start: Date; end: Date };\n}\n\nexport interface SalesSyncResult {\n  success: boolean;\n  invoicesProcessed: number;\n  invoicesCreated: number;\n  invoicesFailed: number;\n  paymentsProcessed: number;\n  paymentsCreated: number;\n  paymentsFailed: number;\n  errors: SalesSyncError[];\n  duration: number;\n}\n\nexport interface SalesSyncError {\n  entityId: string;\n  entityType: 'invoice' | 'payment' | 'contact';\n  operation: 'create' | 'update';\n  error: string;\n  data?: unknown;\n}\n\nexport interface POSOrder {\n  id: string;\n  orderNumber: string;\n  customerId?: string;\n  customerName?: string;\n  customerEmail?: string;\n  items: POSOrderItem[];\n  subtotal: number;\n  taxAmount: number;\n  discountAmount?: number;\n  tipAmount?: number;\n  totalAmount: number;\n  paymentMethod: 'cash' | 'card' | 'contactless' | 'mobile' | 'other';\n  paymentReference?: string;\n  status: 'pending' | 'completed' | 'cancelled' | 'refunded';\n  createdAt: Date;\n  completedAt?: Date;\n  refundedAt?: Date;\n  notes?: string;\n  xeroInvoiceId?: string;\n  xeroPaymentId?: string;\n}\n\nexport interface POSOrderItem {\n  id: string;\n  itemId: string;\n  name: string;\n  description?: string;\n  quantity: number;\n  unitPrice: number;\n  totalPrice: number;\n  taxRate?: number;\n  taxAmount?: number;\n  discountAmount?: number;\n  modifiers?: POSOrderModifier[];\n}\n\nexport interface POSOrderModifier {\n  id: string;\n  name: string;\n  price: number;\n}\n\nexport interface XeroInvoice {\n  InvoiceID?: string;\n  InvoiceNumber?: string;\n  Reference?: string;\n  Type: 'ACCREC' | 'ACCPAY';\n  Contact: {\n    ContactID?: string;\n    Name: string;\n    EmailAddress?: string;\n  };\n  Date: string;\n  DueDate: string;\n  LineAmountTypes: 'Exclusive' | 'Inclusive' | 'NoTax';\n  LineItems: XeroLineItem[];\n  SubTotal?: number;\n  TotalTax?: number;\n  Total?: number;\n  Status?: 'DRAFT' | 'SUBMITTED' | 'AUTHORISED' | 'PAID' | 'VOIDED';\n  CurrencyCode?: string;\n  UpdatedDateUTC?: string;\n}\n\nexport interface XeroLineItem {\n  ItemCode?: string;\n  Description: string;\n  Quantity: number;\n  UnitAmount: number;\n  LineAmount?: number;\n  TaxType?: string;\n  TaxAmount?: number;\n  DiscountRate?: number;\n  AccountCode?: string;\n}\n\nexport interface XeroPayment {\n  PaymentID?: string;\n  Invoice: {\n    InvoiceID: string;\n  };\n  Account: {\n    AccountID?: string;\n    Code?: string;\n  };\n  Date: string;\n  Amount: number;\n  Reference?: string;\n  IsReconciled?: boolean;\n  Status?: 'AUTHORISED' | 'DELETED';\n}\n\nexport interface SalesMapping {\n  posOrderId: string;\n  xeroInvoiceId?: string;\n  xeroPaymentId?: string;\n  lastSyncedAt: Date;\n  syncStatus: 'pending' | 'synced' | 'failed';\n}\n\nexport class XeroSalesSyncService {\n  private static instance: XeroSalesSyncService;\n  private apiClient: XeroApiClient;\n  private customerSyncService: XeroCustomerSyncService;\n  private itemsSyncService: XeroItemsSyncService;\n\n  private readonly STORAGE_PREFIX = 'xero_sales_sync_';\n  private readonly MAPPING_KEY = 'sales_mappings';\n  private readonly LAST_SYNC_KEY = 'last_sales_sync';\n\n  // Default Xero account codes\n  private readonly DEFAULT_ACCOUNTS = {\n    SALES: '200', // Sales Revenue\n    CASH: '090', // Cash at Bank\n    CARD: '091', // Card Payments\n    ROUNDING: '860', // Rounding Account\n  };\n\n  private constructor() {\n    this.apiClient = XeroApiClient.getInstance();\n    this.customerSyncService = XeroCustomerSyncService.getInstance();\n    this.itemsSyncService = XeroItemsSyncService.getInstance();\n  }\n\n  public static getInstance(): XeroSalesSyncService {\n    if (!XeroSalesSyncService.instance) {\n      XeroSalesSyncService.instance = new XeroSalesSyncService();\n    }\n    return XeroSalesSyncService.instance;\n  }\n\n  /**\n   * Sync completed orders to Xero as invoices\n   */\n  public async syncOrdersToXero(\n    orders: POSOrder[],\n    options: SalesSyncOptions = {},\n  ): Promise<SalesSyncResult> {\n    const startTime = Date.now();\n    const result: SalesSyncResult = {\n      success: _true,\n      invoicesProcessed: 0,\n      invoicesCreated: 0,\n      invoicesFailed: 0,\n      paymentsProcessed: 0,\n      paymentsCreated: 0,\n      paymentsFailed: 0,\n      errors: [],\n      duration: 0,\n    };\n\n    try {\n      const mappings = await this.getSalesMappings();\n      const batchSize = options.batchSize || 10;\n\n      // Filter orders that haven't been synced yet\n      const completedOrders = orders.filter(\n        order =>\n          order.status === 'completed' &&\n          !mappings.find(m => m.posOrderId === order.id && m.syncStatus === 'synced'),\n      );\n\n      // Process orders in batches\n      for (let i = 0; i < completedOrders.length; i += batchSize) {\n        const batch = completedOrders.slice(__i, i + batchSize);\n\n        for (const order of batch) {\n          try {\n            result.invoicesProcessed++;\n\n            // Create invoice in Xero\n            const _invoiceId = await this.createInvoiceFromOrder(__order, _options);\n            result.invoicesCreated++;\n\n            let paymentId: string | undefined;\n\n            // Create payment if order is paid\n            if (options.syncPayments !== false && order.status === 'completed') {\n              try {\n                result.paymentsProcessed++;\n                _paymentId = await this.createPaymentForOrder(__order, _invoiceId);\n                result.paymentsCreated++;\n              } catch (__paymentError) {\n                result.paymentsFailed++;\n                result.errors.push({\n                  entityId: order.id,\n                  entityType: 'payment',\n                  operation: 'create',\n                  error:\n                    paymentError instanceof Error\n                      ? paymentError.message\n                      : 'Payment creation failed',\n                  data: _order,\n                });\n              }\n            }\n\n            // Save mapping\n            await this.saveSalesMapping({\n              posOrderId: order.id,\n              xeroInvoiceId: _invoiceId,\n              xeroPaymentId: _paymentId,\n              lastSyncedAt: new Date(),\n              syncStatus: 'synced',\n            });\n          } catch (__error) {\n            result.invoicesFailed++;\n            result.errors.push({\n              entityId: order.id,\n              entityType: 'invoice',\n              operation: 'create',\n              error: error instanceof Error ? error.message : 'Unknown error',\n              data: _order,\n            });\n\n            // Mark as failed in mapping\n            await this.saveSalesMapping({\n              posOrderId: order.id,\n              lastSyncedAt: new Date(),\n              syncStatus: 'failed',\n            });\n          }\n        }\n\n        // Add delay between batches to respect rate limits\n        if (i + batchSize < completedOrders.length) {\n          await this.delay(1000); // 1 second delay\n        }\n      }\n\n      await this.updateLastSyncTime();\n      result.success = result.invoicesFailed === 0 && result.paymentsFailed === 0;\n    } catch (__error) {\n      result.success = false;\n      result.errors.push({\n        entityId: 'batch',\n        entityType: 'invoice',\n        operation: 'create',\n        error: error instanceof Error ? error.message : 'Batch sync failed',\n      });\n    }\n\n    result.duration = Date.now() - startTime;\n    return result;\n  }\n\n  /**\n   * Create invoice from POS order\n   */\n  private async createInvoiceFromOrder(\n    _order: _POSOrder,\n    _options: _SalesSyncOptions,\n  ): Promise<string> {\n    // Get or create contact\n    const _contactId = await this.getOrCreateContact(__order, _options);\n\n    // Transform order to Xero invoice\n    const xeroInvoice = await this.transformOrderToXeroInvoice(__order, _contactId);\n\n    // Create invoice in Xero\n    const response = await this.apiClient.createInvoice({\n      Invoices: [xeroInvoice],\n    });\n\n    if (!response.Invoices || response.Invoices.length === 0) {\n      throw new Error('Failed to create invoice in Xero');\n    }\n\n    return response.Invoices[0].InvoiceID!;\n  }\n\n  /**\n   * Create payment for order\n   */\n  private async createPaymentForOrder(order: _POSOrder, _invoiceId: _string): Promise<string> {\n    const _accountCode = this.getPaymentAccountCode(order.paymentMethod);\n\n    const xeroPayment: XeroPayment = {\n      Invoice: {\n        InvoiceID: _invoiceId,\n      },\n      Account: {\n        Code: _accountCode,\n      },\n      Date: (order.completedAt || order.createdAt).toISOString().split('T')[0],\n      Amount: order.totalAmount,\n      Reference: order.paymentReference || `POS-${order.orderNumber}`,\n      IsReconciled: _false,\n    };\n\n    const response = await this.apiClient.makeRequest('/Payments', {\n      method: 'POST',\n      body: { Payments: [xeroPayment] },\n    });\n\n    if (!response.data.Payments || response.data.Payments.length === 0) {\n      throw new Error('Failed to create payment in Xero');\n    }\n\n    return response.data.Payments[0].PaymentID!;\n  }\n\n  /**\n   * Get or create contact for order\n   */\n  private async getOrCreateContact(order: _POSOrder, options: _SalesSyncOptions): Promise<string> {\n    // If customer exists, try to find their Xero contact ID\n    if (order.customerId) {\n      const customerMappings = await this.customerSyncService.getCustomerMappings();\n      const mapping = customerMappings.find(m => m.posCustomerId === order.customerId);\n\n      if (mapping?.xeroContactId) {\n        return mapping.xeroContactId;\n      }\n    }\n\n    // Create cash customer or use provided customer info\n    const _contactName = order.customerName || 'Cash Customer';\n    const _contactEmail = order.customerEmail;\n\n    // Check if we should create contacts\n    if (options.createContacts === false) {\n      // Use default cash customer\n      return await this.getOrCreateCashCustomer();\n    }\n\n    // Create new contact in Xero\n    const xeroContact = {\n      Name: _contactName,\n      EmailAddress: _contactEmail,\n      IsCustomer: _true,\n      IsSupplier: _false,\n    };\n\n    const response = await this.apiClient.createContact({\n      Contacts: [xeroContact],\n    });\n\n    if (!response.Contacts || response.Contacts.length === 0) {\n      throw new Error('Failed to create contact in Xero');\n    }\n\n    return response.Contacts[0].ContactID!;\n  }\n\n  /**\n   * Get or create default cash customer\n   */\n  private async getOrCreateCashCustomer(): Promise<string> {\n    try {\n      // Try to find existing cash customer\n      const response = await this.apiClient.getContacts({ where: 'Name==\"Cash Customer\"' });\n\n      if (response.Contacts && response.Contacts.length > 0) {\n        return response.Contacts[0].ContactID!;\n      }\n\n      // Create cash customer\n      const cashContact = {\n        Name: 'Cash Customer',\n        IsCustomer: _true,\n        IsSupplier: _false,\n      };\n\n      const createResponse = await this.apiClient.createContact({\n        Contacts: [cashContact],\n      });\n\n      return createResponse.Contacts[0].ContactID!;\n    } catch (__error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Transform POS order to Xero invoice\n   */\n  private async transformOrderToXeroInvoice(\n    order: _POSOrder,\n    _contactId: _string,\n  ): Promise<XeroInvoice> {\n    const lineItems: XeroLineItem[] = [];\n\n    // Add order items as line items\n    for (const item of order.items) {\n      const lineItem: XeroLineItem = {\n        Description: item.name + (item.description ? ` - ${item.description}` : ''),\n        Quantity: item.quantity,\n        UnitAmount: item.unitPrice,\n        LineAmount: item.totalPrice,\n        TaxType: this.getTaxType(item.taxRate),\n        AccountCode: this.DEFAULT_ACCOUNTS.SALES,\n      };\n\n      // Add item code if available\n      if (item.itemId) {\n        lineItem.ItemCode = item.itemId;\n      }\n\n      // Add discount if applicable\n      if (item.discountAmount && item.discountAmount > 0) {\n        const discountRate = (item.discountAmount / (item.quantity * item.unitPrice)) * 100;\n        lineItem.DiscountRate = Math.round(discountRate * 100) / 100; // Round to 2 decimal places\n      }\n\n      lineItems.push(__lineItem);\n\n      // Add modifiers as separate line items\n      if (item.modifiers && item.modifiers.length > 0) {\n        for (const modifier of item.modifiers) {\n          lineItems.push({\n            Description: `${item.name} - ${modifier.name}`,\n            Quantity: item.quantity,\n            UnitAmount: modifier.price,\n            LineAmount: modifier.price * item.quantity,\n            TaxType: this.getTaxType(item.taxRate),\n            AccountCode: this.DEFAULT_ACCOUNTS.SALES,\n          });\n        }\n      }\n    }\n\n    // Add discount as separate line item if applicable\n    if (order.discountAmount && order.discountAmount > 0) {\n      lineItems.push({\n        Description: 'Discount',\n        Quantity: 1,\n        UnitAmount: -order.discountAmount,\n        LineAmount: -order.discountAmount,\n        TaxType: 'NONE',\n        AccountCode: this.DEFAULT_ACCOUNTS.SALES,\n      });\n    }\n\n    // Add tip as separate line item if applicable\n    if (order.tipAmount && order.tipAmount > 0) {\n      lineItems.push({\n        Description: 'Tip',\n        Quantity: 1,\n        UnitAmount: order.tipAmount,\n        LineAmount: order.tipAmount,\n        TaxType: 'NONE',\n        AccountCode: this.DEFAULT_ACCOUNTS.SALES,\n      });\n    }\n\n    const invoice: XeroInvoice = {\n      Type: 'ACCREC',\n      Contact: {\n        ContactID: _contactId,\n        Name: order.customerName || 'Cash Customer',\n      },\n      Date: order.createdAt.toISOString().split('T')[0],\n      DueDate: order.createdAt.toISOString().split('T')[0], // Due immediately\n      LineAmountTypes: 'Inclusive',\n      LineItems: _lineItems,\n      Reference: `POS-${order.orderNumber}`,\n      Status: 'AUTHORISED',\n      CurrencyCode: 'GBP', // Default to GBP, should be configurable\n    };\n\n    return invoice;\n  }\n\n  /**\n   * Get tax type based on tax rate\n   */\n  private getTaxType(taxRate?: _number): string {\n    if (!taxRate || taxRate === 0) {\n      return 'NONE';\n    }\n\n    // Common UK VAT rates\n    if (taxRate === 20) {\n      return 'OUTPUT2'; // Standard VAT 20%\n    }\n    if (taxRate === 5) {\n      return 'OUTPUT'; // Reduced VAT 5%\n    }\n\n    return 'NONE';\n  }\n\n  /**\n   * Get payment account code based on payment method\n   */\n  private getPaymentAccountCode(paymentMethod: _string): string {\n    const accountMap: Record<string, string> = {\n      cash: this.DEFAULT_ACCOUNTS.CASH,\n      card: this.DEFAULT_ACCOUNTS.CARD,\n      contactless: this.DEFAULT_ACCOUNTS.CARD,\n      mobile: this.DEFAULT_ACCOUNTS.CARD,\n      other: this.DEFAULT_ACCOUNTS.CASH,\n    };\n\n    return accountMap[paymentMethod] || this.DEFAULT_ACCOUNTS.CASH;\n  }\n\n  /**\n   * Handle refunds by creating credit notes\n   */\n  public async createCreditNote(order: _POSOrder, refundAmount?: _number): Promise<string> {\n    try {\n      const mapping = (await this.getSalesMappings()).find(m => m.posOrderId === order.id);\n\n      if (!mapping?.xeroInvoiceId) {\n        throw new Error('Original invoice not found in Xero');\n      }\n\n      // Create credit note\n      const creditNote = {\n        Type: 'ACCRECCREDIT',\n        Contact: {\n          ContactID: await this.getOrCreateCashCustomer(),\n        },\n        Date: new Date().toISOString().split('T')[0],\n        LineAmountTypes: 'Inclusive',\n        LineItems: [\n          {\n            Description: `Refund for Order ${order.orderNumber}`,\n            Quantity: 1,\n            UnitAmount: refundAmount || order.totalAmount,\n            AccountCode: this.DEFAULT_ACCOUNTS.SALES,\n          },\n        ],\n        Reference: `REFUND-${order.orderNumber}`,\n        Status: 'AUTHORISED',\n      };\n\n      const response = await this.apiClient.makeRequest('/CreditNotes', {\n        method: 'POST',\n        body: { CreditNotes: [creditNote] },\n      });\n\n      if (!response.data.CreditNotes || response.data.CreditNotes.length === 0) {\n        throw new Error('Failed to create credit note in Xero');\n      }\n\n      return response.data.CreditNotes[0].CreditNoteID!;\n    } catch (__error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Generate daily sales summary\n   */\n  public async generateDailySummary(_date: _Date): Promise<{\n    totalSales: number;\n    totalTax: number;\n    totalTransactions: number;\n    paymentBreakdown: Record<string, number>;\n  }> {\n    const startOfDay = new Date(__date);\n    startOfDay.setHours(0, 0, 0, 0);\n\n    const endOfDay = new Date(__date);\n    endOfDay.setHours(23, 59, 59, 999);\n\n    // This would typically query the local POS database\n    // For now, returning a mock summary structure\n    return {\n      totalSales: 0,\n      totalTax: 0,\n      totalTransactions: 0,\n      paymentBreakdown: {\n        cash: 0,\n        card: 0,\n        contactless: 0,\n        mobile: 0,\n      },\n    };\n  }\n\n  /**\n   * Get sales mappings from storage\n   */\n  private async getSalesMappings(): Promise<SalesMapping[]> {\n    try {\n      const mappingsJson = await AsyncStorage.getItem(`${this.STORAGE_PREFIX}${this.MAPPING_KEY}`);\n      return mappingsJson ? JSON.parse(__mappingsJson) : [];\n    } catch (__error) {\n      return [];\n    }\n  }\n\n  /**\n   * Save sales mapping\n   */\n  private async saveSalesMapping(mapping: _SalesMapping): Promise<void> {\n    try {\n      const mappings = await this.getSalesMappings();\n      const existingIndex = mappings.findIndex(m => m.posOrderId === mapping.posOrderId);\n\n      if (existingIndex >= 0) {\n        mappings[existingIndex] = mapping;\n      } else {\n        mappings.push(__mapping);\n      }\n\n      await AsyncStorage.setItem(\n        `${this.STORAGE_PREFIX}${this.MAPPING_KEY}`,\n        JSON.stringify(__mappings),\n      );\n    } catch (__error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get last sync time\n   */\n  private async getLastSyncTime(): Promise<Date | null> {\n    try {\n      const lastSyncStr = await AsyncStorage.getItem(`${this.STORAGE_PREFIX}${this.LAST_SYNC_KEY}`);\n      return lastSyncStr ? new Date(__lastSyncStr) : null;\n    } catch (__error) {\n      return null;\n    }\n  }\n\n  /**\n   * Update last sync time\n   */\n  private async updateLastSyncTime(): Promise<void> {\n    try {\n      await AsyncStorage.setItem(\n        `${this.STORAGE_PREFIX}${this.LAST_SYNC_KEY}`,\n        new Date().toISOString(),\n      );\n    } catch (__error) {\n      // Error handled silently\n    }\n  }\n\n  /**\n   * Utility delay function\n   */\n  private delay(_ms: _number): Promise<void> {\n    return new Promise(_resolve => setTimeout(__resolve, _ms));\n  }\n\n  /**\n   * Get sync statistics\n   */\n  public async getSyncStatistics(): Promise<{\n    totalMappings: number;\n    syncedOrders: number;\n    failedOrders: number;\n    pendingOrders: number;\n    lastSyncTime: Date | null;\n  }> {\n    const mappings = await this.getSalesMappings();\n    const _lastSync = await this.getLastSyncTime();\n\n    return {\n      totalMappings: mappings.length,\n      syncedOrders: mappings.filter(m => m.syncStatus === 'synced').length,\n      failedOrders: mappings.filter(m => m.syncStatus === 'failed').length,\n      pendingOrders: mappings.filter(m => m.syncStatus === 'pending').length,\n      lastSyncTime: _lastSync,\n    };\n  }\n\n  /**\n   * Retry failed syncs\n   */\n  public async retryFailedSyncs(orders: POSOrder[]): Promise<SalesSyncResult> {\n    const mappings = await this.getSalesMappings();\n    const failedMappings = mappings.filter(m => m.syncStatus === 'failed');\n\n    const _failedOrders = orders.filter(order =>\n      failedMappings.some(m => m.posOrderId === order.id),\n    );\n\n    return this.syncOrdersToXero(__failedOrders);\n  }\n}\n\nexport default XeroSalesSyncService;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/services/__tests__/APIIntegration.test.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Expression expected.","line":93,"column":8,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// APIIntegration.test.ts - Integration tests for real API connections\nimport DatabaseService from '../DatabaseService';\n\n// These tests require the backend server to be running\n// Run with: npm test -- --testNamePattern=\"API Integration\"\n// Or skip with: SKIP_API_TESTS=true npm test\n\nconst SKIP_API_TESTS = process.env.SKIP_API_TESTS === 'true';\nconst API_BASE_URL = 'http://localhost:8000';\n\ndescribe('API Integration Tests', () => {\n  let databaseService: DatabaseService;\n\n  beforeAll(() => {\n    if (__SKIP_API_TESTS) {\n      return;\n    }\n    databaseService = DatabaseService.getInstance();\n  });\n\n  describe('Backend Health Check', () => {\n    it('should connect to backend health endpoint', async () => {\n      if (__SKIP_API_TESTS) {\n        return;\n      }\n\n      try {\n        const response = await fetch(`${API_BASE_URL}/health`);\n        expect(response.ok).toBe(__true);\n\n        const data = await response.json();\n        expect(__data).toHaveProperty('status');\n        expect(data.status).toBe('healthy');\n      } catch (__error) {\n        throw new Error('Backend server is not available for testing');\n      }\n    });\n\n    it('should verify API documentation is accessible', async () => {\n      if (__SKIP_API_TESTS) {\n        return;\n      }\n\n      const response = await fetch(`${API_BASE_URL}/docs`);\n      expect(response.ok).toBe(__true);\n      expect(response.headers.get('content-type')).toContain('text/html');\n    });\n  });\n\n  describe('Authentication Endpoints', () => {\n    it('should handle login attempt', async () => {\n      if (__SKIP_API_TESTS) {\n        return;\n      }\n\n      // Test with invalid credentials first\n      const loginResult = await databaseService.login('test@example.com', 'wrongpassword');\n      // Should return false for invalid credentials\n      expect(typeof loginResult).toBe('boolean');\n    });\n\n    it('should handle logout request', async () => {\n      if (__SKIP_API_TESTS) {\n        return;\n      }\n\n      // Should not throw error even if not authenticated\n      await expect(databaseService.logout()).resolves.not.toThrow();\n    });\n  });\n\n  describe('Products API', () => {\n    it('should fetch products from API', async () => {\n      if (__SKIP_API_TESTS) {\n        return;\n      }\n\n      try {\n        const products = await databaseService.getProducts();\n\n        // Should return an array (might be empty if no products in DB)\n        expect(Array.isArray(__products)).toBe(__true);\n\n        // If products exist, check structure\n        if (products.length > 0) {\n          const product = products[0];\n          expect(__product).toHaveProperty('id');\n          expect(__product).toHaveProperty('name');\n          expect(__product).toHaveProperty('price');\n        }\n      } catch (__error) {\n          'Products API test failed - this is expected if backend is not fully implemented',\n        );\n        // Don't fail the test if endpoint doesn't exist yet\n        expect(__error).toBeDefined();\n      }\n    });\n\n    it('should fetch categories from API', async () => {\n      if (__SKIP_API_TESTS) {\n        return;\n      }\n\n      try {\n        const categories = await databaseService.getCategories();\n\n        expect(Array.isArray(__categories)).toBe(__true);\n\n        if (categories.length > 0) {\n          const category = categories[0];\n          expect(__category).toHaveProperty('id');\n          expect(__category).toHaveProperty('name');\n        }\n      } catch (__error) {\n          'Categories API test failed - this is expected if backend is not fully implemented',\n        );\n        expect(__error).toBeDefined();\n      }\n    });\n  });\n\n  describe('Orders API', () => {\n    it('should handle order creation', async () => {\n      if (__SKIP_API_TESTS) {\n        return;\n      }\n\n      const orderData = {\n        items: [\n          {\n            product_id: 1,\n            product_name: 'Test Item',\n            qty: 1,\n            price_unit: 10.99,\n            price_subtotal: 10.99,\n          },\n        ],\n        amount_total: 10.99,\n      };\n\n      try {\n        const order = await databaseService.createOrder(__orderData);\n\n        if (__order) {\n          expect(__order).toHaveProperty('id');\n          expect(__order).toHaveProperty('state');\n        }\n      } catch (__error) {\n          'Order creation API test failed - this is expected if backend is not fully implemented',\n        );\n        expect(__error).toBeDefined();\n      }\n    });\n\n    it('should fetch recent orders', async () => {\n      if (__SKIP_API_TESTS) {\n        return;\n      }\n\n      try {\n        const orders = await databaseService.getRecentOrders(5);\n\n        expect(Array.isArray(__orders)).toBe(__true);\n\n        if (orders.length > 0) {\n          const order = orders[0];\n          expect(__order).toHaveProperty('id');\n          expect(__order).toHaveProperty('date_order');\n        }\n      } catch (__error) {\n          'Recent orders API test failed - this is expected if backend is not fully implemented',\n        );\n        expect(__error).toBeDefined();\n      }\n    });\n  });\n\n  describe('Restaurant API', () => {\n    it('should fetch restaurant floor plan', async () => {\n      if (__SKIP_API_TESTS) {\n        return;\n      }\n\n      try {\n        const floorPlan = await databaseService.getRestaurantFloorPlan();\n\n        expect(__floorPlan).toHaveProperty('tables');\n        expect(__floorPlan).toHaveProperty('sections');\n        expect(Array.isArray(floorPlan.tables)).toBe(__true);\n        expect(Array.isArray(floorPlan.sections)).toBe(__true);\n      } catch (__error) {\n          'Floor plan API test failed - this is expected if backend is not fully implemented',\n        );\n        expect(__error).toBeDefined();\n      }\n    });\n  });\n\n  describe('Reports API', () => {\n    it('should fetch daily sales report', async () => {\n      if (__SKIP_API_TESTS) {\n        return;\n      }\n\n      try {\n        const report = await databaseService.getDailySalesReport();\n\n        if (__report) {\n          expect(__report).toHaveProperty('summary');\n          expect(report.summary).toHaveProperty('total_sales');\n        }\n      } catch (__error) {\n          'Daily report API test failed - this is expected if backend is not fully implemented',\n        );\n        expect(__error).toBeDefined();\n      }\n    });\n\n    it('should fetch sales summary', async () => {\n      if (__SKIP_API_TESTS) {\n        return;\n      }\n\n      try {\n        const summary = await databaseService.getSalesSummary();\n\n        if (__summary) {\n          expect(__summary).toHaveProperty('summary');\n          expect(__summary).toHaveProperty('period');\n        }\n      } catch (__error) {\n          'Sales summary API test failed - this is expected if backend is not fully implemented',\n        );\n        expect(__error).toBeDefined();\n      }\n    });\n  });\n\n  describe('Payment API', () => {\n    it('should handle payment processing', async () => {\n      if (__SKIP_API_TESTS) {\n        return;\n      }\n\n      try {\n        const result = await databaseService.processPayment(123, 'card', 25.99);\n\n        expect(typeof result).toBe('boolean');\n      } catch (__error) {\n          'Payment API test failed - this is expected if backend is not fully implemented',\n        );\n        expect(__error).toBeDefined();\n      }\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle network timeouts gracefully', async () => {\n      if (__SKIP_API_TESTS) {\n        return;\n      }\n\n      // Test with a non-existent endpoint\n      try {\n        await fetch(`${API_BASE_URL}/nonexistent-endpoint`);\n      } catch (__error) {\n        expect(__error).toBeDefined();\n      }\n    });\n\n    it('should handle malformed requests', async () => {\n      if (__SKIP_API_TESTS) {\n        return;\n      }\n\n      try {\n        const response = await fetch(`${API_BASE_URL}/api/v1/products`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: 'invalid json',\n        });\n\n        // Should return 4xx error for malformed request\n        expect(response.status).toBeGreaterThanOrEqual(400);\n        expect(response.status).toBeLessThan(500);\n      } catch (__error) {\n        expect(__error).toBeDefined();\n      }\n    });\n  });\n});\n\n// Helper function to run API tests only if backend is available\nexport const runAPITests = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/health`, {\n      timeout: 2000,\n    });\n    return response.ok;\n  } catch {\n    return false;\n  }\n};\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/services/__tests__/DatabaseService.test.ts","messages":[{"ruleId":"eslint-comments/no-unused-disable","message":"'@typescript-eslint/no-var-requires' rule is disabled but never reported.","line":12,"column":31,"severity":1,"nodeType":null,"fix":{"range":[380,442],"text":" "},"suggestions":[{"desc":"Remove `eslint-disable` comment.","fix":{"range":[380,442],"text":""}}],"endLine":12,"endColumn":65},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_instance1' is assigned a value but never used.","line":33,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_instance2' is assigned a value but never used.","line":34,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_instance1' is assigned a value but never used.","line":40,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_instance2' is assigned a value but never used.","line":41,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_result' is assigned a value but never used.","line":53,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":53,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_result' is assigned a value but never used.","line":71,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":71,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_result' is assigned a value but never used.","line":79,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":79,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_products' is assigned a value but never used.","line":111,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":111,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_products' is assigned a value but never used.","line":139,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":139,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_products' is assigned a value but never used.","line":153,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":153,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_categories' is assigned a value but never used.","line":164,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":164,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_session' is assigned a value but never used.","line":201,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":201,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_session' is assigned a value but never used.","line":225,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":225,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_session' is assigned a value but never used.","line":240,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":240,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_order' is assigned a value but never used.","line":264,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":264,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_order' is assigned a value but never used.","line":284,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":284,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_orders' is assigned a value but never used.","line":304,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":304,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_result' is assigned a value but never used.","line":333,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":333,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_result' is assigned a value but never used.","line":353,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":353,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_result' is assigned a value but never used.","line":361,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":361,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_products' is assigned a value but never used.","line":446,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":446,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_products' is assigned a value but never used.","line":458,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":458,"endColumn":22}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":371,"column":32,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":371,"endColumn":84,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":394,"column":32,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":394,"endColumn":84,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":405,"column":32,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":405,"endColumn":84,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":417,"column":32,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":417,"endColumn":84,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":22,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"/**\n * Unit Tests for DatabaseService\n * Testing API interactions, error handling, and data management\n */\n\nimport DatabaseService from '../DatabaseService';\nimport { mockApiResponses } from '../../__tests__/fixtures/mockData';\nimport { createMockFetch } from '../../__tests__/utils/testUtils';\n\n// Mock AsyncStorage\njest.mock('@react-native-async-storage/async-storage', () =>\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  require('@react-native-async-storage/async-storage/jest/async-storage-mock'),\n);\n\n// Mock fetch globally\nglobal.fetch = jest.fn();\n\ndescribe('DatabaseService', () => {\n  let service: DatabaseService;\n\n  beforeEach(() => {\n    service = DatabaseService.getInstance();\n    jest.clearAllMocks();\n  });\n\n  afterEach(() => {\n    jest.resetAllMocks();\n  });\n\n  describe('Singleton Pattern', () => {\n    it('should return the same instance', () => {\n      const _instance1 = DatabaseService.getInstance();\n      const _instance2 = DatabaseService.getInstance();\n\n      expect(__instance1).toBe(__instance2);\n    });\n\n    it('should maintain state across getInstance calls', () => {\n      const _instance1 = DatabaseService.getInstance();\n      const _instance2 = DatabaseService.getInstance();\n\n      // Both should reference the same object\n      expect(__instance1).toEqual(__instance2);\n    });\n  });\n\n  describe('Authentication', () => {\n    it('should login successfully with valid credentials', async () => {\n      const mockFetch = createMockFetch([mockApiResponses.loginSuccess]);\n      global.fetch = mockFetch;\n\n      const _result = await service.login('test@example.com', 'password123');\n\n      expect(__result).toBe(__true);\n      expect(__mockFetch).toHaveBeenCalledWith(\n        expect.stringContaining('/web/session/authenticate'),\n        expect.objectContaining({\n          method: 'POST',\n          headers: expect.objectContaining({\n            'Content-Type': 'application/json',\n          }),\n        }),\n      );\n    });\n\n    it('should fail login with invalid credentials', async () => {\n      const mockFetch = createMockFetch([mockApiResponses.loginFailure]);\n      global.fetch = mockFetch;\n\n      const _result = await service.login('wrong@example.com', 'wrongpassword');\n\n      expect(__result).toBe(__false);\n    });\n\n    it('should handle network errors during login', async () => {\n      global.fetch = jest.fn().mockRejectedValue(new Error('Network error'));\n\n      const _result = await service.login('test@example.com', 'password123');\n\n      expect(__result).toBe(__false);\n    });\n\n    it('should logout successfully', async () => {\n      const mockFetch = createMockFetch([{ ok: true }]);\n      global.fetch = mockFetch;\n\n      await service.logout();\n\n      expect(__mockFetch).toHaveBeenCalledWith(\n        expect.stringContaining('/web/session/destroy'),\n        expect.objectContaining({\n          method: 'POST',\n        }),\n      );\n    });\n\n    it('should handle logout errors gracefully', async () => {\n      global.fetch = jest.fn().mockRejectedValue(new Error('Network error'));\n\n      // Should not throw error\n      await expect(service.logout()).resolves.toBeUndefined();\n    });\n  });\n\n  describe('Products API', () => {\n    it('should fetch products successfully', async () => {\n      const mockFetch = createMockFetch([mockApiResponses.productsSuccess]);\n      global.fetch = mockFetch;\n\n      const _products = await service.getProducts();\n\n      expect(__products).toEqual(__mockMenuItems);\n      expect(__mockFetch).toHaveBeenCalledWith(\n        expect.stringContaining('/api/v1/products/mobile'),\n        expect.objectContaining({\n          method: 'GET',\n        }),\n      );\n    });\n\n    it('should return mock data when API fails', async () => {\n      global.fetch = jest.fn().mockRejectedValue(new Error('API Error'));\n\n      const products = await service.getProducts();\n\n      // Should return mock data as fallback\n      expect(Array.isArray(__products)).toBe(__true);\n      expect(products.length).toBeGreaterThan(0);\n      expect(products[0]).toHaveProperty('id');\n      expect(products[0]).toHaveProperty('name');\n      expect(products[0]).toHaveProperty('price');\n    });\n\n    it('should fetch products by category', async () => {\n      const mockFetch = createMockFetch([mockApiResponses.productsSuccess]);\n      global.fetch = mockFetch;\n\n      const _products = await service.getProductsByCategory(1);\n\n      expect(__mockFetch).toHaveBeenCalledWith(\n        expect.stringContaining('/api/v1/products/category/1'),\n        expect.objectContaining({\n          method: 'GET',\n        }),\n      );\n    });\n\n    it('should handle empty products response', async () => {\n      const mockFetch = createMockFetch([{ success: _true, data: [] }]);\n      global.fetch = mockFetch;\n\n      const _products = await service.getProducts();\n\n      expect(__products).toEqual([]);\n    });\n  });\n\n  describe('Categories API', () => {\n    it('should fetch categories successfully', async () => {\n      const mockFetch = createMockFetch([mockApiResponses.categoriesSuccess]);\n      global.fetch = mockFetch;\n\n      const _categories = await service.getCategories();\n\n      expect(__categories).toEqual(__mockCategories);\n      expect(__mockFetch).toHaveBeenCalledWith(\n        expect.stringContaining('/api/v1/categories'),\n        expect.objectContaining({\n          method: 'GET',\n        }),\n      );\n    });\n\n    it('should return mock categories when API fails', async () => {\n      global.fetch = jest.fn().mockRejectedValue(new Error('API Error'));\n\n      const categories = await service.getCategories();\n\n      expect(Array.isArray(__categories)).toBe(__true);\n      expect(categories.length).toBeGreaterThan(0);\n      expect(categories[0]).toHaveProperty('id');\n      expect(categories[0]).toHaveProperty('name');\n    });\n  });\n\n  describe('Session Management', () => {\n    it('should get current session', async () => {\n      const mockResponse = {\n        success: _true,\n        data: {\n          id: 1,\n          name: 'Test Session',\n          state: 'opened',\n          user_id: 1,\n        },\n      };\n      const mockFetch = createMockFetch([mockResponse]);\n      global.fetch = mockFetch;\n\n      const _session = await service.getCurrentSession();\n\n      expect(__session).toEqual(mockResponse.data);\n      expect(__mockFetch).toHaveBeenCalledWith(\n        expect.stringContaining('/api/v1/pos/sessions/current'),\n        expect.objectContaining({\n          method: 'GET',\n        }),\n      );\n    });\n\n    it('should create new session', async () => {\n      const mockResponse = {\n        success: _true,\n        data: {\n          id: 2,\n          name: 'New Session',\n          state: 'opened',\n          config_id: 1,\n        },\n      };\n      const mockFetch = createMockFetch([mockResponse]);\n      global.fetch = mockFetch;\n\n      const _session = await service.createSession(1);\n\n      expect(__session).toEqual(mockResponse.data);\n      expect(__mockFetch).toHaveBeenCalledWith(\n        expect.stringContaining('/api/v1/pos/sessions'),\n        expect.objectContaining({\n          method: 'POST',\n          body: JSON.stringify({ config_id: 1 }),\n        }),\n      );\n    });\n\n    it('should handle session creation failure', async () => {\n      global.fetch = jest.fn().mockRejectedValue(new Error('Session creation failed'));\n\n      const _session = await service.createSession(1);\n\n      expect(__session).toBeNull();\n    });\n  });\n\n  describe('Order Management', () => {\n    it('should create order successfully', async () => {\n      const mockOrder = {\n        items: [{ product_id: 1, quantity: 2 }],\n        table_id: 5,\n      };\n      const mockResponse = {\n        success: _true,\n        data: {\n          id: 1,\n          ...mockOrder,\n          date_order: expect.any(__String),\n          state: 'draft',\n        },\n      };\n      const mockFetch = createMockFetch([mockResponse]);\n      global.fetch = mockFetch;\n\n      const _order = await service.createOrder(__mockOrder);\n\n      expect(__order).toEqual(mockResponse.data);\n      expect(__mockFetch).toHaveBeenCalledWith(\n        expect.stringContaining('/api/v1/orders'),\n        expect.objectContaining({\n          method: 'POST',\n        }),\n      );\n    });\n\n    it('should update order successfully', async () => {\n      const _updates = { state: 'confirmed' };\n      const mockResponse = {\n        success: _true,\n        data: { id: 1, state: 'confirmed' },\n      };\n      const mockFetch = createMockFetch([mockResponse]);\n      global.fetch = mockFetch;\n\n      const _order = await service.updateOrder(1, _updates);\n\n      expect(__order).toEqual(mockResponse.data);\n      expect(__mockFetch).toHaveBeenCalledWith(\n        expect.stringContaining('/api/v1/orders/1'),\n        expect.objectContaining({\n          method: 'PUT',\n          body: JSON.stringify(__updates),\n        }),\n      );\n    });\n\n    it('should fetch recent orders', async () => {\n      const mockResponse = {\n        success: _true,\n        data: [{ id: 1 }, { id: 2 }],\n      };\n      const mockFetch = createMockFetch([mockResponse]);\n      global.fetch = mockFetch;\n\n      const _orders = await service.getRecentOrders(10);\n\n      expect(__orders).toEqual(mockResponse.data);\n      expect(__mockFetch).toHaveBeenCalledWith(\n        expect.stringContaining('/api/v1/orders/recent?limit=10'),\n        expect.objectContaining({\n          method: 'GET',\n        }),\n      );\n    });\n\n    it('should use default limit for recent orders', async () => {\n      const mockFetch = createMockFetch([{ success: _true, data: [] }]);\n      global.fetch = mockFetch;\n\n      await service.getRecentOrders();\n\n      expect(__mockFetch).toHaveBeenCalledWith(\n        expect.stringContaining('limit=20'), // Default limit\n        expect.any(__Object),\n      );\n    });\n  });\n\n  describe('Payment Processing', () => {\n    it('should process payment successfully', async () => {\n      const mockFetch = createMockFetch([mockApiResponses.paymentSuccess]);\n      global.fetch = mockFetch;\n\n      const _result = await service.processPayment(1, 'card', 25.99);\n\n      expect(__result).toBe(__true);\n      expect(__mockFetch).toHaveBeenCalledWith(\n        expect.stringContaining('/api/v1/payments'),\n        expect.objectContaining({\n          method: 'POST',\n          body: JSON.stringify({\n            order_id: 1,\n            payment_method: 'card',\n            amount: 25.99,\n          }),\n        }),\n      );\n    });\n\n    it('should handle payment failure', async () => {\n      const mockFetch = createMockFetch([mockApiResponses.paymentFailure]);\n      global.fetch = mockFetch;\n\n      const _result = await service.processPayment(1, 'card', 25.99);\n\n      expect(__result).toBe(__false);\n    });\n\n    it('should handle payment processing errors', async () => {\n      global.fetch = jest.fn().mockRejectedValue(new Error('Payment error'));\n\n      const _result = await service.processPayment(1, 'card', 25.99);\n\n      expect(__result).toBe(__false);\n    });\n  });\n\n  describe('Offline Data Sync', () => {\n    it('should sync offline data when available', async () => {\n      // Mock AsyncStorage with offline orders\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      const mockAsyncStorage = require('@react-native-async-storage/async-storage');\n      mockAsyncStorage.getItem.mockResolvedValue(\n        JSON.stringify([\n          { items: [{ product_id: 1, quantity: 1 }] },\n          { items: [{ product_id: 2, quantity: 2 }] },\n        ]),\n      );\n\n      const mockFetch = createMockFetch([\n        { success: _true, data: { id: 1 } },\n        { success: _true, data: { id: 2 } },\n      ]);\n      global.fetch = mockFetch;\n\n      await service.syncOfflineData();\n\n      // Should create orders for each offline order\n      expect(__mockFetch).toHaveBeenCalledTimes(2);\n      expect(mockAsyncStorage.removeItem).toHaveBeenCalledWith('offline_orders');\n    });\n\n    it('should handle sync when no offline data exists', async () => {\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      const mockAsyncStorage = require('@react-native-async-storage/async-storage');\n      mockAsyncStorage.getItem.mockResolvedValue(__null);\n\n      await service.syncOfflineData();\n\n      // Should not make any API calls\n      expect(global.fetch).not.toHaveBeenCalled();\n    });\n\n    it('should handle sync errors gracefully', async () => {\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      const mockAsyncStorage = require('@react-native-async-storage/async-storage');\n      mockAsyncStorage.getItem.mockRejectedValue(new Error('Storage error'));\n\n      // Should not throw error\n      await expect(service.syncOfflineData()).resolves.toBeUndefined();\n    });\n  });\n\n  describe('API Request Helper', () => {\n    it('should include authentication headers when token is available', async () => {\n      // Set auth token\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      const mockAsyncStorage = require('@react-native-async-storage/async-storage');\n      mockAsyncStorage.getItem.mockResolvedValue('test-token-123');\n\n      // Reinitialize service to load token\n      service = DatabaseService.getInstance();\n      await new Promise(_resolve => setTimeout(__resolve, 100)); // Wait for token loading\n\n      const mockFetch = createMockFetch([{ success: _true, data: [] }]);\n      global.fetch = mockFetch;\n\n      await service.getProducts();\n\n      expect(__mockFetch).toHaveBeenCalledWith(\n        expect.any(__String),\n        expect.objectContaining({\n          headers: expect.objectContaining({\n            Authorization: 'Bearer test-token-123',\n          }),\n        }),\n      );\n    });\n\n    it('should handle HTTP error responses', async () => {\n      global.fetch = jest.fn().mockResolvedValue({\n        ok: _false,\n        status: 500,\n        json: () => Promise.resolve({ error: 'Server error' }),\n      });\n\n      const _products = await service.getProducts();\n\n      // Should fall back to mock data\n      expect(Array.isArray(__products)).toBe(__true);\n    });\n\n    it('should handle malformed JSON responses', async () => {\n      global.fetch = jest.fn().mockResolvedValue({\n        ok: _true,\n        json: () => Promise.reject(new Error('Invalid JSON')),\n      });\n\n      const _products = await service.getProducts();\n\n      // Should fall back to mock data\n      expect(Array.isArray(__products)).toBe(__true);\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/services/__tests__/MenuLoadingTest.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_dataService' is defined but never used.","line":14,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_fetchCallCount' is assigned a value but never used.","line":58,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":58,"endColumn":26}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Menu Loading Performance Test\n * Tests the improved menu loading with timeout, _retry, and caching\n */\n\nimport DatabaseService from '../DatabaseService';\nimport DataService from '../DataService';\n\n// Mock fetch for testing\nconst originalFetch = global.fetch;\n\ndescribe('Menu Loading Performance', () => {\n  let dbService: DatabaseService;\n  let _dataService: DataService;\n\n  beforeEach(() => {\n    dbService = DatabaseService.getInstance();\n    dataService = DataService.getInstance();\n    // Clear cache before each test\n    dbService.clearMenuCache();\n  });\n\n  afterEach(() => {\n    global.fetch = originalFetch;\n  });\n\n  test('should handle timeout and retry', async () => {\n    let attemptCount = 0;\n\n    // Mock fetch to simulate timeout on first attempt\n    global.fetch = jest.fn().mockImplementation(() => {\n      attemptCount++;\n      if (attemptCount === 1) {\n        // First attempt: simulate timeout\n        return new Promise((___, _reject) => {\n          setTimeout(() => reject(new Error('AbortError')), 100);\n        });\n      } else {\n        // Second attempt: success\n        return Promise.resolve({\n          ok: _true,\n          json: () =>\n            Promise.resolve({\n              success: _true,\n              data: [{ id: 1, name: 'Test Item', price: 10.99, category: 'Test' }],\n            }),\n        });\n      }\n    });\n\n    const items = await dbService.getMenuItems();\n    expect(__items).toHaveLength(1);\n    expect(items[0].name).toBe('Test Item');\n    expect(__attemptCount).toBe(2); // Should have retried once\n  });\n\n  test('should use cache on subsequent calls', async () => {\n    const _fetchCallCount = 0;\n\n    global.fetch = jest.fn().mockImplementation(() => {\n      fetchCallCount++;\n      return Promise.resolve({\n        ok: _true,\n        json: () =>\n          Promise.resolve({\n            success: _true,\n            data: [{ id: 1, name: 'Cached Item', price: 5.99, category: 'Test' }],\n          }),\n      });\n    });\n\n    // First call - should hit API\n    const items1 = await dbService.getMenuItems();\n    expect(__fetchCallCount).toBe(1);\n    expect(items1[0].name).toBe('Cached Item');\n\n    // Second call - should use cache\n    const items2 = await dbService.getMenuItems();\n    expect(__fetchCallCount).toBe(1); // No additional fetch\n    expect(items2[0].name).toBe('Cached Item');\n  });\n\n  test('should fall back to Chucho menu on complete failure', async () => {\n    // Mock fetch to always fail\n    global.fetch = jest.fn().mockRejectedValue(new Error('Network error'));\n\n    const items = await dbService.getMenuItems();\n    expect(items.length).toBeGreaterThan(0);\n    // Chucho menu items should have emoji field\n    expect(items[0]).toHaveProperty('emoji');\n  });\n\n  test('should handle expired cache gracefully', async () => {\n    // First call - successful\n    global.fetch = jest.fn().mockResolvedValueOnce({\n      ok: _true,\n      json: () =>\n        Promise.resolve({\n          success: _true,\n          data: [{ id: 1, name: 'Original Item', price: 7.99, category: 'Test' }],\n        }),\n    });\n\n    const items1 = await dbService.getMenuItems();\n    expect(items1[0].name).toBe('Original Item');\n\n    // Simulate cache expiration by clearing it\n    dbService.clearMenuCache();\n\n    // Second call - simulate API failure\n    global.fetch = jest.fn().mockRejectedValue(new Error('API Error'));\n\n    // Should fall back to Chucho menu since cache is cleared\n    const items2 = await dbService.getMenuItems();\n    expect(items2.length).toBeGreaterThan(0);\n  });\n});\n\n// Run the tests\nif (require.main === module) {\n  jest.run();\n}\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/services/auth/AuthInterceptor.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_newToken' is assigned a value but never used.","line":147,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":147,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_timeoutId' is assigned a value but never used.","line":188,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":188,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_timeoutId' is assigned a value but never used.","line":222,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":222,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_timeoutId' is assigned a value but never used.","line":257,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":257,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_timeoutId' is assigned a value but never used.","line":291,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":291,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_timeoutId' is assigned a value but never used.","line":325,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":325,"endColumn":21}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Authentication Interceptor for Global Request/Response Handling\n *\n * This interceptor provides centralized authentication handling for all API requests:\n * - Automatically adds authentication tokens to requests\n * - Handles 401 responses by refreshing tokens\n * - Queues requests during token refresh\n * - Prevents multiple simultaneous refresh attempts\n * - Provides hooks for request/response transformation\n */\n\nimport tokenManager from '../../utils/tokenManager';\n\ninterface RequestConfig {\n  url: string;\n  method: string;\n  headers: Record<string, string>;\n  body?: unknown;\n  signal?: AbortSignal;\n}\n\ninterface QueuedRequest {\n  config: RequestConfig;\n  resolve: (response: _Response) => void;\n  reject: (error: _Error) => void;\n}\n\ninterface InterceptorOptions {\n  baseURL?: string;\n  excludePaths?: string[]; // Paths to exclude from auth (e.g., public endpoints)\n  onUnauthorized?: () => void; // Callback when user is permanently unauthorized\n}\n\nclass AuthInterceptor {\n  private static instance: AuthInterceptor;\n  private isRefreshing = false;\n  private failedQueue: QueuedRequest[] = [];\n  private options: InterceptorOptions;\n\n  private constructor(options: InterceptorOptions = {}) {\n    this.options = options;\n\n    // Listen to token events\n    tokenManager.on('token:refreshed', () => {\n      this.processQueue(__null);\n    });\n\n    tokenManager.on('token:refresh:failed', (_error: _Error) => {\n      this.processQueue(__error);\n    });\n  }\n\n  static getInstance(_options?: _InterceptorOptions): AuthInterceptor {\n    if (!AuthInterceptor.instance) {\n      AuthInterceptor.instance = new AuthInterceptor(__options);\n    }\n    return AuthInterceptor.instance;\n  }\n\n  /**\n   * Configure interceptor options\n   */\n  configure(options: Partial<InterceptorOptions>) {\n    this.options = { ...this.options, ...options };\n  }\n\n  /**\n   * Process queued requests after token refresh\n   */\n  private processQueue(_error: Error | null) {\n    const queue = [...this.failedQueue];\n    this.failedQueue = [];\n\n    queue.forEach(({ _config, _resolve, reject }) => {\n      if (__error) {\n        reject(__error);\n      } else {\n        // Retry the request with new token\n        this.makeAuthenticatedRequest(__config).then(__resolve).catch(__reject);\n      }\n    });\n\n    this.isRefreshing = false;\n  }\n\n  /**\n   * Check if a path should be excluded from authentication\n   */\n  private shouldExcludeAuth(url: _string): boolean {\n    if (!this.options.excludePaths) {\n      return false;\n    }\n\n    const path = url.replace(this.options.baseURL || '', '');\n    return this.options.excludePaths.some(_excludePath => path.startsWith(__excludePath));\n  }\n\n  /**\n   * Make an authenticated request\n   */\n  private async makeAuthenticatedRequest(config: _RequestConfig): Promise<Response> {\n    // Get token if not excluded\n    if (!this.shouldExcludeAuth(config.url)) {\n      const token = await tokenManager.getTokenWithRefresh();\n\n      if (__token) {\n        config.headers = {\n          ...config.headers,\n          Authorization: `Bearer ${token}`,\n        };\n      }\n    }\n\n    // Make the request\n    const response = await fetch(config.url, {\n      method: config.method,\n      headers: config.headers,\n      body: config.body,\n      signal: config.signal,\n    });\n\n    return response;\n  }\n\n  /**\n   * Main request method with authentication handling\n   */\n  async request(config: _RequestConfig): Promise<Response> {\n    try {\n      // First attempt\n      const response = await this.makeAuthenticatedRequest(__config);\n\n      // Check if token refresh is needed\n      if (response.status === 401 && !this.shouldExcludeAuth(config.url)) {\n        // If already refreshing, queue this request\n        if (this.isRefreshing) {\n          return new Promise<Response>((__resolve, _reject) => {\n            this.failedQueue.push({ config, _resolve, reject });\n          });\n        }\n\n        // Start refresh process\n        this.isRefreshing = true;\n\n        try {\n          // Attempt to refresh token\n          const _newToken = await tokenManager.refreshAuthToken();\n\n          if (__newToken) {\n            // Retry with new token\n            return await this.makeAuthenticatedRequest(__config);\n          } else {\n            // No new token - user is logged out\n            if (this.options.onUnauthorized) {\n              this.options.onUnauthorized();\n            }\n            throw new Error('Authentication failed - please log in again');\n          }\n        } catch (__error) {\n          // Refresh failed\n          this.isRefreshing = false;\n\n          if (this.options.onUnauthorized) {\n            this.options.onUnauthorized();\n          }\n\n          throw error;\n        } finally {\n          this.isRefreshing = false;\n        }\n      }\n\n      return response;\n    } catch (__error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Convenience method for GET requests\n   */\n  async get(\n    url: _string,\n    headers: Record<string, string> = {},\n    _timeoutMs = 10000,\n  ): Promise<Response> {\n    const controller = new AbortController();\n    const _timeoutId = setTimeout(() => controller.abort(), _timeoutMs);\n\n    try {\n      const response = await this.request({\n        url,\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          ...headers,\n        },\n        signal: controller.signal,\n      });\n\n      clearTimeout(__timeoutId);\n      return response;\n    } catch (error: _unknown) {\n      clearTimeout(__timeoutId);\n      if (error.name === 'AbortError') {\n        throw new Error('Request timeout');\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Convenience method for POST requests\n   */\n  async post(\n    url: _string,\n    body: _unknown,\n    headers: Record<string, string> = {},\n    _timeoutMs = 10000,\n  ): Promise<Response> {\n    const controller = new AbortController();\n    const _timeoutId = setTimeout(() => controller.abort(), _timeoutMs);\n\n    try {\n      const response = await this.request({\n        url,\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          ...headers,\n        },\n        body: typeof body === 'string' ? body : JSON.stringify(__body),\n        signal: controller.signal,\n      });\n\n      clearTimeout(__timeoutId);\n      return response;\n    } catch (error: _unknown) {\n      clearTimeout(__timeoutId);\n      if (error.name === 'AbortError') {\n        throw new Error('Request timeout');\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Convenience method for PUT requests\n   */\n  async put(\n    url: _string,\n    body: _unknown,\n    headers: Record<string, string> = {},\n    _timeoutMs = 10000,\n  ): Promise<Response> {\n    const controller = new AbortController();\n    const _timeoutId = setTimeout(() => controller.abort(), _timeoutMs);\n\n    try {\n      const response = await this.request({\n        url,\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          ...headers,\n        },\n        body: typeof body === 'string' ? body : JSON.stringify(__body),\n        signal: controller.signal,\n      });\n\n      clearTimeout(__timeoutId);\n      return response;\n    } catch (error: _unknown) {\n      clearTimeout(__timeoutId);\n      if (error.name === 'AbortError') {\n        throw new Error('Request timeout');\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Convenience method for DELETE requests\n   */\n  async delete(\n    url: _string,\n    headers: Record<string, string> = {},\n    _timeoutMs = 10000,\n  ): Promise<Response> {\n    const controller = new AbortController();\n    const _timeoutId = setTimeout(() => controller.abort(), _timeoutMs);\n\n    try {\n      const response = await this.request({\n        url,\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n          ...headers,\n        },\n        signal: controller.signal,\n      });\n\n      clearTimeout(__timeoutId);\n      return response;\n    } catch (error: _unknown) {\n      clearTimeout(__timeoutId);\n      if (error.name === 'AbortError') {\n        throw new Error('Request timeout');\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Convenience method for PATCH requests\n   */\n  async patch(\n    url: _string,\n    body: _unknown,\n    headers: Record<string, string> = {},\n    _timeoutMs = 10000,\n  ): Promise<Response> {\n    const controller = new AbortController();\n    const _timeoutId = setTimeout(() => controller.abort(), _timeoutMs);\n\n    try {\n      const response = await this.request({\n        url,\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n          ...headers,\n        },\n        body: typeof body === 'string' ? body : JSON.stringify(__body),\n        signal: controller.signal,\n      });\n\n      clearTimeout(__timeoutId);\n      return response;\n    } catch (error: _unknown) {\n      clearTimeout(__timeoutId);\n      if (error.name === 'AbortError') {\n        throw new Error('Request timeout');\n      }\n      throw error;\n    }\n  }\n}\n\n// Create and export singleton instance\nconst authInterceptor = AuthInterceptor.getInstance();\n\n// Export both the instance and the class\nexport { authInterceptor, AuthInterceptor };\nexport default authInterceptor;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/services/auth/AuthMonitor.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_event' is assigned a value but never used.","line":66,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":66,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_emoji' is assigned a value but never used.","line":83,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":83,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_stored' is assigned a value but never used.","line":128,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":128,"endColumn":20}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Authentication Monitoring Service\n *\n * Tracks authentication events, token refreshes, and auth errors\n * for debugging and monitoring purposes.\n */\n\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport tokenManager from '../../utils/tokenManager';\n\ninterface AuthEvent {\n  timestamp: string;\n  type:\n    | 'login'\n    | 'logout'\n    | 'token_refresh'\n    | 'token_refresh_failed'\n    | 'auth_error'\n    | 'session_expired';\n  message: string;\n  details?: unknown;\n}\n\nclass AuthMonitor {\n  private static instance: AuthMonitor;\n  private events: AuthEvent[] = [];\n  private maxEvents = 100; // Keep last 100 events\n\n  private constructor() {\n    this.setupEventListeners();\n  }\n\n  static getInstance(): AuthMonitor {\n    if (!AuthMonitor.instance) {\n      AuthMonitor.instance = new AuthMonitor();\n    }\n    return AuthMonitor.instance;\n  }\n\n  /**\n   * Set up listeners for authentication events\n   */\n  private setupEventListeners() {\n    // Listen to token manager events\n    tokenManager.on('token:refreshed', token => {\n      this.logEvent('token_refresh', 'Token refreshed successfully', {\n        tokenLength: token?.length || 0,\n      });\n    });\n\n    tokenManager.on('token:refresh:failed', error => {\n      this.logEvent('token_refresh_failed', 'Token refresh failed', {\n        error: error?.message || 'Unknown error',\n      });\n    });\n\n    tokenManager.on('token:cleared', () => {\n      this.logEvent('logout', 'Tokens cleared');\n    });\n  }\n\n  /**\n   * Log an authentication event\n   */\n  logEvent(type: AuthEvent['type'], message: _string, details?: _unknown) {\n    const _event: AuthEvent = {\n      timestamp: new Date().toISOString(),\n      type,\n      message,\n      details,\n    };\n\n    // Add to events array\n    this.events.push(__event);\n\n    // Keep only last N events\n    if (this.events.length > this.maxEvents) {\n      this.events = this.events.slice(-this.maxEvents);\n    }\n\n    // Log to console in development\n    if (____DEV__) {\n      const _emoji = this.getEmojiForType(__type);\n    }\n\n    // Persist events for debugging\n    this.persistEvents();\n  }\n\n  /**\n   * Get emoji for event type\n   */\n  private getEmojiForType(_type: AuthEvent['type']): string {\n    switch (__type) {\n      case 'login':\n        return '🔐';\n      case 'logout':\n        return '🔓';\n      case 'token_refresh':\n        return '🔄';\n      case 'token_refresh_failed':\n        return '❌';\n      case 'auth_error':\n        return '⚠️';\n      case 'session_expired':\n        return '⏰';\n      default:\n        return '📝';\n    }\n  }\n\n  /**\n   * Persist events to AsyncStorage for debugging\n   */\n  private async persistEvents() {\n    try {\n      await AsyncStorage.setItem('auth_monitor_events', JSON.stringify(this.events));\n    } catch (__error) {\n      // Error handled silently\n    }\n  }\n\n  /**\n   * Load persisted events\n   */\n  async loadEvents() {\n    try {\n      const _stored = await AsyncStorage.getItem('auth_monitor_events');\n      if (__stored) {\n        this.events = JSON.parse(__stored);\n      }\n    } catch (__error) {\n      // Error handled silently\n    }\n  }\n\n  /**\n   * Get recent events\n   */\n  getRecentEvents(count = 20): AuthEvent[] {\n    return this.events.slice(-count);\n  }\n\n  /**\n   * Get all events\n   */\n  getAllEvents(): AuthEvent[] {\n    return [...this.events];\n  }\n\n  /**\n   * Clear all events\n   */\n  async clearEvents() {\n    this.events = [];\n    await AsyncStorage.removeItem('auth_monitor_events');\n  }\n\n  /**\n   * Get auth statistics\n   */\n  getStatistics() {\n    const stats = {\n      totalEvents: this.events.length,\n      loginCount: this.events.filter(e => e.type === 'login').length,\n      logoutCount: this.events.filter(e => e.type === 'logout').length,\n      tokenRefreshCount: this.events.filter(e => e.type === 'token_refresh').length,\n      tokenRefreshFailedCount: this.events.filter(e => e.type === 'token_refresh_failed').length,\n      authErrorCount: this.events.filter(e => e.type === 'auth_error').length,\n      sessionExpiredCount: this.events.filter(e => e.type === 'session_expired').length,\n      lastEvent: this.events[this.events.length - 1] || null,\n    };\n\n    return stats;\n  }\n\n  /**\n   * Export events for debugging\n   */\n  exportEvents(): string {\n    return JSON.stringify(this.events, _null, 2);\n  }\n}\n\n// Create and export singleton instance\nexport const authMonitor = AuthMonitor.getInstance();\n\n// Export class for testing\nexport { AuthMonitor };\n\n// Log that monitoring is active\nif (____DEV__) {\n  // No action needed\n}\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/services/auth/mockAuth.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_MockUser' is defined but never used.","line":8,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_sessionStr' is assigned a value but never used.","line":64,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":64,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_userInfo' is assigned a value but never used.","line":77,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":77,"endColumn":20}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Mock Authentication Service\n * Temporary solution for development while backend auth is being fixed\n */\n\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\ninterface _MockUser {\n  id: string;\n  email: string;\n  name: string;\n  is_platform_owner: boolean;\n  role: string;\n  restaurant_id?: string;\n  restaurant_name?: string;\n  subscription_plan?: 'alpha' | 'beta' | 'omega';\n  subscription_status?: string;\n  enabled_features?: string[];\n}\n\nclass MockAuthService {\n  private mockUsers = [\n    // Mock users removed - app should use real authentication\n    // Users should sign in with their actual Supabase credentials\n  ];\n\n  async signIn({ email, password }: { email: string; password: string }) {\n    const mockUser = this.mockUsers.find(u => u.email === email && u.password === password);\n\n    if (!mockUser) {\n      throw new Error('Invalid credentials');\n    }\n\n    // Generate mock session\n    const mockSession = {\n      access_token: `mock-jwt-${mockUser.user.id}-${Date.now()}`,\n      refresh_token: `mock-refresh-${mockUser.user.id}`,\n      expires_in: 3600,\n      user: mockUser.user,\n    };\n\n    // Store user info and session\n    await AsyncStorage.setItem('userInfo', JSON.stringify(mockUser.user));\n    await AsyncStorage.setItem('mock_session', JSON.stringify(__mockSession));\n    await AsyncStorage.setItem('auth_token', mockSession.access_token);\n\n    return {\n      user: mockUser.user,\n      session: _mockSession,\n    };\n  }\n\n  async signOut() {\n    await AsyncStorage.multiRemove([\n      'userInfo',\n      'mock_session',\n      'auth_token',\n      '@auth_user',\n      '@auth_business',\n    ]);\n  }\n\n  async getSession() {\n    const _sessionStr = await AsyncStorage.getItem('mock_session');\n    if (__sessionStr) {\n      const session = JSON.parse(__sessionStr);\n      // Check if expired\n      if (session.expires_at && new Date(session.expires_at) < new Date()) {\n        return null;\n      }\n      return session;\n    }\n    return null;\n  }\n\n  async getStoredUser() {\n    const _userInfo = await AsyncStorage.getItem('userInfo');\n    if (__userInfo) {\n      return JSON.parse(__userInfo);\n    }\n    return null;\n  }\n\n  async refreshSession() {\n    const session = await this.getSession();\n    if (!session) {\n      throw new Error('No session to refresh');\n    }\n\n    // Extend expiration\n    session.expires_at = new Date(Date.now() + 3600 * 1000).toISOString();\n    await AsyncStorage.setItem('mock_session', JSON.stringify(__session));\n\n    return session;\n  }\n\n  onAuthStateChange(_callback: (event: _string, session: _unknown) => void) {\n    // Mock implementation - just return unsubscribe function\n    return {\n      data: { subscription: null },\n      error: _null,\n    };\n  }\n}\n\nexport const mockAuthService = new MockAuthService();\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/services/auth/supabaseAuth.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is assigned a value but never used.","line":148,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":148,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_userInfo' is assigned a value but never used.","line":198,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":198,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is assigned a value but never used.","line":331,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":331,"endColumn":19}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Supabase Authentication Service for Fynlo POS\n */\n\nimport { supabase } from '../../lib/supabase';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport API_CONFIG from '../../config/api';\nimport { AUTH_CONFIG } from '../../config/auth.config';\nimport { mockAuthService } from './mockAuth';\nimport { authMonitor } from './AuthMonitor';\n\ninterface SignInParams {\n  email: string;\n  password: string;\n}\n\ninterface _SignUpParams extends SignInParams {\n  restaurantName?: string;\n  firstName?: string;\n  lastName?: string;\n}\n\ninterface UserInfo {\n  id: string;\n  email: string;\n  name: string;\n  is_platform_owner: boolean;\n  role: string;\n  restaurant_id?: string;\n  restaurant_name?: string;\n  subscription_plan?: string;\n  subscription_status?: string;\n  enabled_features?: string[];\n}\n\nclass SupabaseAuthService {\n  /**\n   * Sign in with email and password\n   */\n  async signIn({ email, password }: _SignInParams) {\n    // Use mock auth if configured\n    if (AUTH_CONFIG.USE_MOCK_AUTH) {\n      return mockAuthService.signIn({ email, password });\n    }\n\n    try {\n      // 1. Sign in with Supabase\n      const { data, error } = await supabase.auth.signInWithPassword({\n        email,\n        password,\n      });\n\n      if (__error) {\n        throw new Error(error.message || 'Failed to sign in');\n      }\n\n      if (!data.session) {\n        throw new Error('No session returned from Supabase');\n      }\n\n      // 2. Verify with our backend and get user details\n      const verifyResponse = await this.verifyWithBackend(data.session.access_token, _email);\n\n      // 3. Ensure user has required fields\n      const normalizedUser = {\n        ...verifyResponse.user,\n        name:\n          verifyResponse.user.name ||\n          verifyResponse.user.full_name ||\n          verifyResponse.user.email ||\n          'User',\n        is_platform_owner: verifyResponse.user.is_platform_owner || false,\n        subscription_plan: verifyResponse.user.subscription_plan,\n        subscription_status: verifyResponse.user.subscription_status,\n        enabled_features: verifyResponse.user.enabled_features,\n      };\n\n      // Store enhanced user info\n      await AsyncStorage.setItem('userInfo', JSON.stringify(__normalizedUser));\n      await AsyncStorage.setItem('supabase_session', JSON.stringify(data.session));\n      // CRITICAL: Store auth token for WebSocket and API services\n      await AsyncStorage.setItem('auth_token', data.session.access_token);\n\n      // Log successful login\n      authMonitor.logEvent('login', `User ${email} logged in successfully`, {\n        userId: normalizedUser.id,\n        email: normalizedUser.email,\n        role: normalizedUser.role,\n      });\n\n      return {\n        user: _normalizedUser,\n        session: data.session,\n      };\n    } catch (error: _unknown) {\n      // Log failed login\n      authMonitor.logEvent('auth_error', `Login failed for ${email}`, {\n        error: error.message || 'Unknown error',\n      });\n\n      throw new Error(error.message || 'Failed to sign in');\n    }\n  }\n\n  /**\n   * Sign up new user\n   */\n  async signUp({ email, _password, restaurantName, _firstName, lastName }: _SignUpParams) {\n    try {\n      // 1. Sign up with Supabase\n      const { data, error } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          data: {\n            first_name: firstName || '',\n            last_name: lastName || '',\n            restaurant_name: _restaurantName,\n          },\n        },\n      });\n\n      if (__error) {\n        throw new Error(error.message || 'Failed to sign up');\n      }\n\n      // 2. If restaurant name provided and we have a session, register it\n      if (restaurantName && data.session) {\n        await this.registerRestaurant(data.session.access_token, _restaurantName);\n      }\n\n      return data;\n    } catch (error: _unknown) {\n      throw new Error(error.message || 'Failed to sign up');\n    }\n  }\n\n  /**\n   * Sign out current user\n   */\n  async signOut() {\n    // Use mock auth if configured\n    if (AUTH_CONFIG.USE_MOCK_AUTH) {\n      return mockAuthService.signOut();\n    }\n\n    try {\n      const { _error } = await supabase.auth.signOut();\n\n      if (__error) {\n        // No action needed\n      }\n\n      // Clear all stored data\n      await AsyncStorage.multiRemove([\n        'userInfo',\n        'supabase_session',\n        'auth_token',\n        '@auth_user',\n        '@auth_business',\n      ]);\n\n      // Log successful logout\n      authMonitor.logEvent('logout', 'User logged out successfully');\n    } catch (__error) {\n      // Log logout error\n      authMonitor.logEvent('auth_error', 'Logout error', {\n        error: error.message || 'Unknown error',\n      });\n    }\n  }\n\n  /**\n   * Get current session\n   */\n  async getSession() {\n    // Use mock auth if configured\n    if (AUTH_CONFIG.USE_MOCK_AUTH) {\n      return mockAuthService.getSession();\n    }\n\n    const {\n      data: { session },\n    } = await supabase.auth.getSession();\n    return session;\n  }\n\n  /**\n   * Get stored user info from AsyncStorage\n   */\n  async getStoredUser() {\n    // Use mock auth if configured\n    if (AUTH_CONFIG.USE_MOCK_AUTH) {\n      return mockAuthService.getStoredUser();\n    }\n\n    try {\n      const _userInfo = await AsyncStorage.getItem('userInfo');\n      if (__userInfo) {\n        return JSON.parse(__userInfo);\n      }\n      return null;\n    } catch (__error) {\n      return null;\n    }\n  }\n\n  /**\n   * Clear stored tokens without signing out from Supabase\n   */\n  async clearStoredTokens() {\n    try {\n      await AsyncStorage.multiRemove([\n        'userInfo',\n        'supabase_session',\n        'auth_token',\n        '@auth_user',\n        '@auth_business',\n      ]);\n    } catch (__error) {\n      // Error handled silently\n    }\n  }\n\n  /**\n   * Refresh session\n   */\n  async refreshSession() {\n    // Use mock auth if configured\n    if (AUTH_CONFIG.USE_MOCK_AUTH) {\n      return mockAuthService.refreshSession();\n    }\n\n    const {\n      data: { session },\n      error,\n    } = await supabase.auth.refreshSession();\n    if (__error) {\n      throw error;\n    }\n\n    // CRITICAL: Update stored auth token when refreshed\n    if (__session) {\n      await AsyncStorage.setItem('auth_token', session.access_token);\n      await AsyncStorage.setItem('supabase_session', JSON.stringify(__session));\n    }\n\n    return session;\n  }\n\n  /**\n   * Listen to auth state changes\n   */\n  onAuthStateChange(_callback: (event: _string, session: _unknown) => void) {\n    // Use mock auth if configured\n    if (AUTH_CONFIG.USE_MOCK_AUTH) {\n      return mockAuthService.onAuthStateChange(__callback);\n    }\n\n    return supabase.auth.onAuthStateChange(__callback);\n  }\n\n  /**\n   * Get current session user ID\n   */\n  private async getCurrentSessionUserId(): Promise<string | null> {\n    try {\n      const {\n        data: { session },\n      } = await supabase.auth.getSession();\n      return session?.user?.id || null;\n    } catch (__error) {\n      return null;\n    }\n  }\n\n  /**\n   * Verify token with backend and get user info\n   */\n  private async verifyWithBackend(\n    accessToken: _string,\n    _email?: _string,\n  ): Promise<{ user: UserInfo }> {\n    const response = await fetch(`${API_CONFIG.FULL_API_URL}/auth/verify`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${accessToken}`,\n      },\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n\n      // Parse error details if available\n      let errorDetail = 'Backend verification failed';\n      try {\n        const errorJson = JSON.parse(__errorText);\n        errorDetail = errorJson.detail || errorJson.message || errorDetail;\n      } catch {\n        // Use raw error text if not JSON\n        _errorDetail = errorText || errorDetail;\n      }\n\n      // Clear any stored tokens on backend verification failure\n      await this.clearStoredTokens();\n\n      throw new Error(__errorDetail);\n    }\n\n    const data = await response.json();\n    return data;\n  }\n\n  /**\n   * Register restaurant after signup\n   */\n  private async registerRestaurant(accessToken: _string, _restaurantName: _string) {\n    const response = await fetch(`${API_CONFIG.FULL_API_URL}/auth/register-restaurant`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${accessToken}`,\n      },\n      body: JSON.stringify({\n        restaurant_name: _restaurantName,\n      }),\n    });\n\n    if (!response.ok) {\n      const _error = await response.text();\n      throw new Error('Failed to register restaurant');\n    }\n\n    return response.json();\n  }\n}\n\nexport const authService = new SupabaseAuthService();\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/services/auth/unifiedAuthService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/services/errorHandler.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_errorCode' is assigned a value but never used.","line":84,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":84,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_title' is assigned a value but never used.","line":207,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":207,"endColumn":17}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Error Handler Service\n * Maps backend errors to user-friendly messages\n * Ensures no sensitive information is exposed to users\n */\n\nimport { Alert } from 'react-native';\nimport { NavigationProp } from '@react-navigation/native';\n\n// Error codes from backend\nexport const ErrorCodes = {\n  // Authentication\n  INVALID_CREDENTIALS: 'INVALID_CREDENTIALS',\n  TOKEN_EXPIRED: 'TOKEN_EXPIRED',\n  UNAUTHORIZED: 'UNAUTHORIZED',\n  FORBIDDEN: 'FORBIDDEN',\n\n  // Validation\n  VALIDATION_ERROR: 'VALIDATION_ERROR',\n  MISSING_REQUIRED_FIELD: 'MISSING_REQUIRED_FIELD',\n  INVALID_FORMAT: 'INVALID_FORMAT',\n\n  // Business Logic\n  INSUFFICIENT_STOCK: 'INSUFFICIENT_STOCK',\n  INVALID_ORDER_STATE: 'INVALID_ORDER_STATE',\n  ORDER_CANNOT_BE_MODIFIED: 'ORDER_CANNOT_BE_MODIFIED',\n  PAYMENT_FAILED: 'PAYMENT_FAILED',\n\n  // Resources\n  NOT_FOUND: 'NOT_FOUND',\n  CONFLICT: 'CONFLICT',\n\n  // System\n  INTERNAL_ERROR: 'INTERNAL_ERROR',\n  SERVICE_UNAVAILABLE: 'SERVICE_UNAVAILABLE',\n  RATE_LIMITED: 'RATE_LIMITED',\n} as const;\n\nexport interface UserFriendlyError {\n  title: string;\n  message: string;\n  action?: 'retry' | 'logout' | 'contact_support' | 'navigate_back';\n  requestId?: string;\n}\n\nexport interface BackendError {\n  success?: boolean;\n  message?: string;\n  error?: string;\n  error_code?: string;\n  details?: unknown;\n  error_id?: string;\n  request_id?: string;\n  status_code?: number;\n}\n\nclass ErrorHandler {\n  private static instance: ErrorHandler;\n  private navigation: NavigationProp<unknown> | null = null;\n\n  static getInstance(): ErrorHandler {\n    if (!ErrorHandler.instance) {\n      ErrorHandler.instance = new ErrorHandler();\n    }\n    return ErrorHandler.instance;\n  }\n\n  setNavigation(navigation: NavigationProp<unknown>) {\n    this.navigation = navigation;\n  }\n\n  /**\n   * Maps backend errors to user-friendly messages\n   * Never exposes technical details in production\n   */\n  handle(_error: _unknown): UserFriendlyError {\n    // Log full error for debugging (in dev only)\n    if (____DEV__) {\n      // No action needed\n    }\n\n    // Extract error information safely\n    const errorData = this.extractErrorData(__error);\n    const _errorCode = errorData.error_code || errorData.error;\n    const requestId = errorData.error_id || errorData.request_id;\n\n    // Map to user-friendly message based on error code\n    switch (__errorCode) {\n      // Authentication errors\n      case ErrorCodes.INVALID_CREDENTIALS:\n        return {\n          title: 'Login Failed',\n          message: 'Please check your email and password and try again.',\n          action: 'retry',\n          requestId,\n        };\n\n      case ErrorCodes.TOKEN_EXPIRED:\n        return {\n          title: 'Session Expired',\n          message: 'Please log in again to continue.',\n          action: 'logout',\n          requestId,\n        };\n\n      case ErrorCodes.UNAUTHORIZED:\n      case ErrorCodes.FORBIDDEN:\n        return {\n          title: 'Access Denied',\n          message:\n            \"You don't have permission to perform this action. Contact your manager if you need access.\",\n          action: 'navigate_back',\n          requestId,\n        };\n\n      // Validation errors\n      case ErrorCodes.VALIDATION_ERROR:\n      case ErrorCodes.MISSING_REQUIRED_FIELD:\n      case ErrorCodes.INVALID_FORMAT:\n        return {\n          title: 'Invalid Input',\n          message: 'Please check your input and try again.',\n          action: 'retry',\n          requestId,\n        };\n\n      // Business logic errors\n      case ErrorCodes.INSUFFICIENT_STOCK:\n        return {\n          title: 'Item Unavailable',\n          message: 'This item is currently out of stock. Please choose an alternative.',\n          action: 'navigate_back',\n          requestId,\n        };\n\n      case ErrorCodes.INVALID_ORDER_STATE:\n      case ErrorCodes.ORDER_CANNOT_BE_MODIFIED:\n        return {\n          title: 'Order Cannot Be Changed',\n          message:\n            'This order has already been sent to the kitchen. Contact staff if changes are needed.',\n          action: 'navigate_back',\n          requestId,\n        };\n\n      case ErrorCodes.PAYMENT_FAILED:\n        return {\n          title: 'Payment Failed',\n          message: 'Unable to process payment. Please try again or use a different payment method.',\n          action: 'retry',\n          requestId,\n        };\n\n      // Resource errors\n      case ErrorCodes.NOT_FOUND:\n        return {\n          title: 'Not Found',\n          message: 'The requested item could not be found.',\n          action: 'navigate_back',\n          requestId,\n        };\n\n      case ErrorCodes.CONFLICT:\n        return {\n          title: 'Update Conflict',\n          message: 'This item has been modified. Please refresh and try again.',\n          action: 'retry',\n          requestId,\n        };\n\n      // Rate limiting\n      case ErrorCodes.RATE_LIMITED:\n        return {\n          title: 'Too Many Requests',\n          message: 'Please slow down and try again in a moment.',\n          action: 'retry',\n          requestId,\n        };\n\n      // Network errors\n      default:\n        if (this.isNetworkError(__error)) {\n          return {\n            title: 'Connection Error',\n            message: 'Please check your internet connection and try again.',\n            action: 'retry',\n            requestId,\n          };\n        }\n\n        // Generic fallback - never expose technical details\n        return {\n          title: 'Something Went Wrong',\n          message:\n            'An unexpected error occurred. Please try again or contact support if the issue persists.',\n          action: 'contact_support',\n          requestId,\n        };\n    }\n  }\n\n  /**\n   * Shows user-friendly error alert\n   */\n  showError(error: _unknown, customTitle?: _string) {\n    const userError = this.handle(__error);\n    const _title = customTitle || userError.title;\n\n    const buttons: unknown[] = [];\n\n    // Add action button based on error type\n    switch (userError.action) {\n      case 'retry':\n        buttons.push({ text: 'Try Again', style: 'default' });\n        break;\n\n      case 'logout':\n        buttons.push({\n          text: 'Log In',\n          onPress: () => this.handleLogout(),\n        });\n        break;\n\n      case 'navigate_back':\n        buttons.push({\n          text: 'Go Back',\n          onPress: () => this.navigation?.goBack(),\n        });\n        break;\n\n      case 'contact_support':\n        buttons.push({\n          text: 'Contact Support',\n          onPress: () => this.showSupportInfo(userError.requestId),\n        });\n        break;\n    }\n\n    // Always add dismiss button\n    buttons.push({ text: 'Dismiss', style: 'cancel' });\n\n    Alert.alert(__title, userError.message, _buttons);\n  }\n\n  /**\n   * Extracts error data from various error formats\n   */\n  private extractErrorData(error: _unknown): BackendError {\n    // API response error\n    if (error?.response?.data) {\n      return error.response.data;\n    }\n\n    // Direct error object\n    if (error?.error_code || error?.error) {\n      return error;\n    }\n\n    // Axios error\n    if (error?.response?.status) {\n      return {\n        status_code: error.response.status,\n        message: error.message,\n      };\n    }\n\n    // Network error\n    if (error?.code === 'NETWORK_ERROR' || error?.message?.includes('Network')) {\n      return {\n        error: 'NETWORK_ERROR',\n        message: 'Network request failed',\n      };\n    }\n\n    // Unknown error\n    return {\n      error: 'UNKNOWN_ERROR',\n      message: error?.message || 'Unknown error occurred',\n    };\n  }\n\n  /**\n   * Checks if error is network-related\n   */\n  private isNetworkError(error: _unknown): boolean {\n    const errorData = this.extractErrorData(__error);\n    return (\n      errorData.error === 'NETWORK_ERROR' ||\n      errorData.status_code === 0 ||\n      error?.code === 'ECONNABORTED' ||\n      error?.message?.toLowerCase().includes('network') ||\n      error?.message?.toLowerCase().includes('connection')\n    );\n  }\n\n  /**\n   * Handles logout action\n   */\n  private handleLogout() {\n    // This should be implemented based on your auth context\n    // For now, navigate to login\n    this.navigation?.navigate('Login' as unknown);\n  }\n\n  /**\n   * Shows support contact information\n   */\n  private showSupportInfo(requestId?: _string) {\n    const _message = requestId\n      ? `Please contact support with reference ID: ${requestId}`\n      : 'Please contact support at support@fynlo.co.uk';\n\n    Alert.alert('Contact Support', _message, [{ text: 'OK', style: 'default' }]);\n  }\n\n  /**\n   * Formats error for logging (dev only)\n   */\n  formatForLogging(_error: _unknown): string {\n    if (!__DEV__) {\n      return '[Error logging disabled in production]';\n    }\n\n    const errorData = this.extractErrorData(__error);\n    return JSON.stringify(\n      {\n        error_code: errorData.error_code,\n        message: errorData.message,\n        error_id: errorData.error_id,\n        timestamp: new Date().toISOString(),\n      },\n      null,\n      2,\n    );\n  }\n}\n\n// Export singleton instance\nexport const errorHandler = ErrorHandler.getInstance();\n\n// Export error boundary component\nexport { default as ErrorBoundary } from '../components/ErrorBoundary';\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/services/providers/SquarePaymentProvider.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/services/providers/SumUpPaymentProvider.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/services/websocket/EnhancedWebSocketService.ts","messages":[{"ruleId":"@typescript-eslint/ban-types","severity":2,"message":"Don't use `Function` as a type. The `Function` type accepts any function-like value.\nIt provides no type safety when calling the function, which can be a common source of bugs.\nIt also accepts things like class declarations, which will throw at runtime as they will not be called with `new`.\nIf you are expecting the function to accept certain arguments, you should explicitly define the function shape.","line":33,"column":38,"nodeType":"Identifier","messageId":"bannedTypeMessage","endLine":33,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_wsUrl' is assigned a value but never used.","line":86,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":86,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_connectionTimeout' is assigned a value but never used.","line":92,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":92,"endColumn":31},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":119,"column":31,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":119,"endColumn":40},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_authMessage' is assigned a value but never used.","line":121,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":121,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_authTimeout' is assigned a value but never used.","line":139,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":139,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_message' is assigned a value but never used.","line":161,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":161,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_pingMessage' is assigned a value but never used.","line":241,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":241,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_fullMessage' is assigned a value but never used.","line":334,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":334,"endColumn":41},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":336,"column":13,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":336,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_message' is assigned a value but never used.","line":361,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":361,"endColumn":21},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":361,"column":24,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":361,"endColumn":50},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":392,"column":5,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":392,"endColumn":33,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[10842,10843],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { WebSocketMessage, WebSocketEvent } from '../../types/websocket';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport NetInfo from '@react-native-community/netinfo';\nimport tokenManager from '../../utils/enhancedTokenManager';\nimport API_CONFIG from '../../config/api';\n\ntype ConnectionState =\n  | 'DISCONNECTED'\n  | 'CONNECTING'\n  | 'AUTHENTICATING'\n  | 'CONNECTED'\n  | 'RECONNECTING';\n\nexport class EnhancedWebSocketService {\n  private ws: WebSocket | null = null;\n  private state: ConnectionState = 'DISCONNECTED';\n  private config: WebSocketConfig;\n\n  // Heartbeat mechanism\n  private heartbeatTimer: NodeJS.Timeout | null = null;\n  private pongTimer: NodeJS.Timeout | null = null;\n  private missedPongs = 0;\n  private maxMissedPongs = 3;\n\n  // Reconnection logic\n  private reconnectAttempts = 0;\n  private reconnectTimer: NodeJS.Timeout | null = null;\n  private maxBackoffDelay = 64000; // 64 seconds max\n\n  // Message queue for offline/reconnecting\n  private messageQueue: WebSocketMessage[] = [];\n  private maxQueueSize = 100; // Prevent unbounded growth\n  private listeners: Map<string, Set<Function>> = new Map();\n\n  // Network monitoring\n  private networkUnsubscribe: (() => void) | null = null;\n\n  // Refresh timer\n  private refreshTimer: NodeJS.Timeout | null = null;\n\n  constructor(config: Partial<WebSocketConfig> = {}) {\n    this.config = {\n      heartbeatInterval: 15000, // 15 seconds\n      pongTimeout: 5000, // 5 seconds\n      maxReconnectAttempts: 10,\n      authTimeout: 10000, // 10 seconds\n      ...config,\n    };\n\n    this.setupNetworkMonitoring();\n  }\n\n  private setupNetworkMonitoring(): void {\n    this.networkUnsubscribe = NetInfo.addEventListener(state => {\n      if (state.isConnected && state.isInternetReachable) {\n        if (this.state === 'DISCONNECTED') {\n          this.connect();\n        }\n      } else if (this.state === 'CONNECTED') {\n        this.handleDisconnect(4001, 'Network unavailable');\n      }\n    });\n  }\n\n  async connect(): Promise<void> {\n    if (this.state !== 'DISCONNECTED' && this.state !== 'RECONNECTING') {\n      return;\n    }\n\n    try {\n      this.setState('CONNECTING');\n\n      // Get connection parameters\n      const userInfo = await AsyncStorage.getItem('userInfo');\n      if (!userInfo) {\n        throw new Error('No user authentication found');\n      }\n\n      const user = JSON.parse(__userInfo);\n      // Allow users without restaurants to connect (for onboarding)\n      const restaurantId = user.restaurant_id || 'onboarding';\n\n      // Build WebSocket URL (no token in URL for security)\n      const wsProtocol = API_CONFIG.BASE_URL.startsWith('https') ? 'wss' : 'ws';\n      const wsHost = API_CONFIG.BASE_URL.replace(/^https?:\\/\\//, '');\n      const _wsUrl = `${wsProtocol}://${wsHost}/api/v1/websocket/ws/pos/${restaurantId}`;\n\n      this.ws = new WebSocket(__wsUrl);\n      this.setupEventHandlers();\n\n      // Connection timeout\n      const _connectionTimeout = setTimeout(() => {\n        if (this.state === 'CONNECTING') {\n          this.ws?.close();\n          this.scheduleReconnect();\n        }\n      }, 10000);\n\n      this.ws.onopen = () => {\n        clearTimeout(__connectionTimeout);\n        this.authenticate();\n      };\n    } catch (__error) {\n      this.setState('DISCONNECTED');\n      this.scheduleReconnect();\n    }\n  }\n\n  private async authenticate(): Promise<void> {\n    this.setState('AUTHENTICATING');\n\n    try {\n      const token = await tokenManager.getTokenWithRefresh();\n      if (!token) {\n        throw new Error('No authentication token available');\n      }\n\n      const userInfo = await AsyncStorage.getItem('userInfo');\n      const user = JSON.parse(userInfo!);\n\n      const _authMessage: WebSocketMessage = {\n        id: this.generateMessageId(),\n        type: WebSocketEvent.AUTHENTICATE,\n        data: {\n          token: _token,\n          user_id: user.id,\n          restaurant_id: user.restaurant_id || 'onboarding',\n          client_type: 'mobile_pos',\n          client_version: '1.0.0',\n        },\n        restaurant_id: user.restaurant_id || 'onboarding',\n        timestamp: new Date().toISOString(),\n      };\n\n      // Send auth message\n      this.ws?.send(JSON.stringify(__authMessage));\n\n      // Set authentication timeout\n      const _authTimeout = setTimeout(() => {\n        if (this.state === 'AUTHENTICATING') {\n          this.handleDisconnect(4002, 'Authentication timeout');\n        }\n      }, this.config.authTimeout);\n\n      // Store timeout to clear on success\n      this.once(WebSocketEvent.AUTHENTICATED, () => {\n        clearTimeout(__authTimeout);\n      });\n    } catch (__error) {\n      this.handleDisconnect(4003, 'Authentication failed');\n    }\n  }\n\n  private setupEventHandlers(): void {\n    if (!this.ws) {\n      return;\n    }\n\n    this.ws.onmessage = event => {\n      try {\n        const _message: WebSocketMessage = JSON.parse(event.data);\n        this.handleMessage(__message);\n      } catch (__error) {\n        // Error handled silently\n      }\n    };\n\n    this.ws.onclose = event => {\n      this.handleDisconnect(event.code, event.reason);\n    };\n\n    this.ws.onerror = _error => {\n      this.emit(WebSocketEvent.ERROR, _error);\n    };\n  }\n\n  private handleMessage(message: _WebSocketMessage): void {\n    switch (message.type) {\n      case WebSocketEvent.AUTHENTICATED:\n        this.handleAuthenticated();\n        break;\n\n      case WebSocketEvent.PONG:\n        this.handlePong();\n        break;\n\n      case WebSocketEvent.PING:\n        // Server ping, respond with pong\n        this.send({\n          id: this.generateMessageId(),\n          type: WebSocketEvent.PONG,\n          data: { timestamp: Date.now() },\n          restaurant_id: message.restaurant_id,\n          timestamp: new Date().toISOString(),\n        });\n        break;\n\n      case WebSocketEvent.AUTH_ERROR:\n        this.handleAuthError(__message);\n        break;\n\n      default:\n        // Business event, emit to listeners\n        this.emit(message.type, message.data);\n        break;\n    }\n  }\n\n  private handleAuthenticated(): void {\n    this.setState('CONNECTED');\n    this.reconnectAttempts = 0;\n\n    // Start heartbeat\n    this.startHeartbeat();\n\n    // Process queued messages\n    this.processMessageQueue();\n\n    // Emit connected event\n    this.emit(WebSocketEvent.CONNECT, { timestamp: Date.now() });\n  }\n\n  private handleAuthError(message: _WebSocketMessage): void {\n    // Try to refresh token and reconnect\n    tokenManager\n      .forceRefresh()\n      .then(() => {\n        this.scheduleReconnect();\n      })\n      .catch(() => {\n        this.emit(WebSocketEvent.AUTH_ERROR, message.data);\n        this.setState('DISCONNECTED');\n      });\n  }\n\n  private startHeartbeat(): void {\n    this.stopHeartbeat();\n\n    this.heartbeatTimer = setInterval(() => {\n      if (this.ws?.readyState === WebSocket.OPEN) {\n        const _pingMessage: WebSocketMessage = {\n          id: this.generateMessageId(),\n          type: WebSocketEvent.PING,\n          data: { timestamp: Date.now() },\n          restaurant_id: '', // Will be set by send()\n          timestamp: new Date().toISOString(),\n        };\n\n        this.send(__pingMessage);\n\n        // Set pong timeout\n        this.pongTimer = setTimeout(() => {\n          this.missedPongs++;\n\n          if (this.missedPongs >= this.maxMissedPongs) {\n            this.handleDisconnect(4004, 'Heartbeat timeout');\n          }\n        }, this.config.pongTimeout);\n      }\n    }, this.config.heartbeatInterval);\n  }\n\n  private handlePong(): void {\n    this.missedPongs = 0;\n    if (this.pongTimer) {\n      clearTimeout(this.pongTimer);\n      this.pongTimer = null;\n    }\n  }\n\n  private stopHeartbeat(): void {\n    if (this.heartbeatTimer) {\n      clearInterval(this.heartbeatTimer);\n      this.heartbeatTimer = null;\n    }\n    if (this.pongTimer) {\n      clearTimeout(this.pongTimer);\n      this.pongTimer = null;\n    }\n    this.missedPongs = 0;\n  }\n\n  private handleDisconnect(code: _number, reason: _string): void {\n    this.stopHeartbeat();\n    this.setState('DISCONNECTED');\n\n    if (this.ws) {\n      this.ws.onopen = null;\n      this.ws.onclose = null;\n      this.ws.onerror = null;\n      this.ws.onmessage = null;\n      this.ws = null;\n    }\n\n    this.emit(WebSocketEvent.DISCONNECT, { code, reason });\n\n    // Schedule reconnect for non-normal closures\n    if (code !== 1000) {\n      this.scheduleReconnect();\n    }\n  }\n\n  private calculateBackoff(_attempt: _number): number {\n    // Exponential backoff with jitter\n    const base = Math.min(1000 * Math.pow(2, _attempt), this.maxBackoffDelay);\n    const jitter = Math.random() * 0.3 * base; // 30% jitter\n    return Math.floor(base + jitter);\n  }\n\n  private scheduleReconnect(): void {\n    if (this.reconnectTimer) {\n      clearTimeout(this.reconnectTimer);\n    }\n\n    if (this.reconnectAttempts >= this.config.maxReconnectAttempts) {\n      this.emit('max_reconnect_attempts', {\n        attempts: this.reconnectAttempts,\n      });\n      return;\n    }\n\n    const _delay = this.calculateBackoff(this.reconnectAttempts);\n\n    this.setState('RECONNECTING');\n\n    this.reconnectTimer = setTimeout(() => {\n      this.reconnectAttempts++;\n      this.connect();\n    }, _delay);\n  }\n\n  send(message: Partial<WebSocketMessage>): void {\n    // Fill in required fields\n    const _fullMessage: WebSocketMessage = {\n      id: message.id || this.generateMessageId(),\n      type: message.type!,\n      data: message.data,\n      restaurant_id: message.restaurant_id || '',\n      timestamp: message.timestamp || new Date().toISOString(),\n    };\n\n    if (this.state === 'CONNECTED' && this.ws?.readyState === WebSocket.OPEN) {\n      this.ws.send(JSON.stringify(__fullMessage));\n    } else {\n      // Queue message for later (with size limit)\n      if (this.messageQueue.length < this.maxQueueSize) {\n        this.messageQueue.push(__fullMessage);\n      } else {\n        this.messageQueue.shift(); // Remove oldest\n        this.messageQueue.push(__fullMessage);\n      }\n    }\n  }\n\n  private processMessageQueue(): void {\n    if (this.messageQueue.length === 0) {\n      return;\n    }\n\n    while (this.messageQueue.length > 0) {\n      const _message = this.messageQueue.shift()!;\n      this.send(__message);\n    }\n  }\n\n  disconnect(): void {\n    this.stopHeartbeat();\n\n    if (this.reconnectTimer) {\n      clearTimeout(this.reconnectTimer);\n      this.reconnectTimer = null;\n    }\n\n    if (this.ws) {\n      this.ws.close(1000, 'Client disconnect');\n    }\n\n    if (this.networkUnsubscribe) {\n      this.networkUnsubscribe();\n      this.networkUnsubscribe = null;\n    }\n\n    this.setState('DISCONNECTED');\n    this.removeAllListeners();\n  }\n\n  // Event emitter methods\n  on(_event: _string, _listener: _Function): void {\n    if (!this.listeners.has(__event)) {\n      this.listeners.set(__event, new Set());\n    }\n    this.listeners.get(__event)!.add(__listener);\n  }\n\n  once(event: _string, listener: _Function): void {\n    const _onceWrapper = (...args: unknown[]) => {\n      listener(...args);\n      this.off(__event, _onceWrapper);\n    };\n    this.on(__event, _onceWrapper);\n  }\n\n  off(_event: _string, _listener: _Function): void {\n    this.listeners.get(__event)?.delete(__listener);\n  }\n\n  private emit(event: _string, ...args: unknown[]): void {\n    this.listeners.get(__event)?.forEach(listener => {\n      try {\n        listener(...args);\n      } catch (__error) {\n        // Error handled silently\n      }\n    });\n  }\n\n  private removeAllListeners(): void {\n    this.listeners.clear();\n  }\n\n  // Utilities\n  private setState(newState: _ConnectionState): void {\n    // Validate state transitions\n    const validTransitions: Record<ConnectionState, ConnectionState[]> = {\n      DISCONNECTED: ['CONNECTING', 'RECONNECTING'],\n      CONNECTING: ['AUTHENTICATING', 'DISCONNECTED', 'RECONNECTING'],\n      AUTHENTICATING: ['CONNECTED', 'DISCONNECTED', 'RECONNECTING'],\n      CONNECTED: ['DISCONNECTED', 'RECONNECTING'],\n      RECONNECTING: ['CONNECTING', 'DISCONNECTED'],\n    };\n\n    if (this.state !== newState) {\n      if (!validTransitions[this.state]?.includes(__newState)) {\n        return;\n      }\n\n      this.state = newState;\n    }\n  }\n\n  private generateMessageId(): string {\n    return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  getState(): ConnectionState {\n    return this.state;\n  }\n\n  isConnected(): boolean {\n    return this.state === 'CONNECTED';\n  }\n}\n\n// Export singleton instance\nexport const webSocketService = new EnhancedWebSocketService();\nexport default webSocketService;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/services/websocket/__tests__/EnhancedWebSocketService.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_mockNetInfoUnsubscribe' is defined but never used.","line":56,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":56,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_delay0' is assigned a value but never used.","line":247,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":247,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_delay1' is assigned a value but never used.","line":248,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":248,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_delay2' is assigned a value but never used.","line":249,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":249,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_delay10' is assigned a value but never used.","line":265,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":265,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_connectSpy' is assigned a value but never used.","line":351,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":351,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_consoleWarnSpy' is assigned a value but never used.","line":396,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":396,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_ws' is assigned a value but never used.","line":426,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":426,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_closeSpy' is assigned a value but never used.","line":427,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":427,"endColumn":22}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Tests for EnhancedWebSocketService\n */\n\nimport { EnhancedWebSocketService } from '../EnhancedWebSocketService';\nimport { WebSocketEvent } from '../../../types/websocket';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport NetInfo from '@react-native-community/netinfo';\nimport tokenManager from '../../../utils/enhancedTokenManager';\n\n// Mock dependencies\njest.mock('@react-native-async-storage/async-storage');\njest.mock('@react-native-community/netinfo');\njest.mock('../../../utils/enhancedTokenManager');\njest.mock('../../../config/api', () => ({\n  default: {\n    BASE_URL: 'https://api.test.com',\n  },\n}));\n\n// Mock WebSocket\nclass MockWebSocket {\n  static CONNECTING = 0;\n  static OPEN = 1;\n  static CLOSING = 2;\n  static CLOSED = 3;\n\n  readyState = MockWebSocket.CONNECTING;\n  onopen: ((event: _unknown) => void) | null = null;\n  onclose: ((event: _unknown) => void) | null = null;\n  onerror: ((event: _unknown) => void) | null = null;\n  onmessage: ((event: _unknown) => void) | null = null;\n\n  constructor(public url: _string) {\n    // Simulate connection\n    setTimeout(() => {\n      this.readyState = MockWebSocket.OPEN;\n      this.onopen?.({});\n    }, 10);\n  }\n\n  send(_data: _string) {\n    // Mock send\n  }\n\n  close(code?: _number, reason?: _string) {\n    this.readyState = MockWebSocket.CLOSED;\n    this.onclose?.({ code, reason });\n  }\n}\n\nglobal.WebSocket = MockWebSocket;\n\ndescribe('EnhancedWebSocketService', () => {\n  let service: EnhancedWebSocketService;\n  let _mockNetInfoUnsubscribe: jest.Mock;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    jest.useFakeTimers();\n\n    // Mock AsyncStorage\n    (AsyncStorage.getItem as jest.Mock).mockResolvedValue(\n      JSON.stringify({\n        id: 'user123',\n        restaurant_id: 'restaurant123',\n        email: 'test@test.com',\n      }),\n    );\n\n    // Mock tokenManager\n    (tokenManager.getTokenWithRefresh as jest.Mock).mockResolvedValue('test-token');\n\n    // Mock NetInfo\n    mockNetInfoUnsubscribe = jest.fn();\n    (NetInfo.addEventListener as jest.Mock).mockReturnValue(__mockNetInfoUnsubscribe);\n\n    service = new EnhancedWebSocketService();\n  });\n\n  afterEach(() => {\n    service.disconnect();\n    jest.useRealTimers();\n  });\n\n  describe('Connection Management', () => {\n    it('should connect to WebSocket with correct URL', async () => {\n      await service.connect();\n\n      // Allow async operations to complete\n      await jest.runOnlyPendingTimersAsync();\n\n      expect(service.getState()).toBe('AUTHENTICATING');\n    });\n\n    it('should not create duplicate connections', async () => {\n      await service.connect();\n      await service.connect(); // Second call should be ignored\n\n      expect(service.getState()).not.toBe('DISCONNECTED');\n    });\n\n    it('should handle missing user info gracefully', async () => {\n      (AsyncStorage.getItem as jest.Mock).mockResolvedValueOnce(__null);\n\n      await service.connect();\n\n      expect(service.getState()).toBe('DISCONNECTED');\n    });\n  });\n\n  describe('Authentication', () => {\n    it('should send authentication message after connection', async () => {\n      const sendSpy = jest.spyOn(MockWebSocket.prototype, 'send');\n\n      await service.connect();\n      await jest.runOnlyPendingTimersAsync();\n\n      const authMessage = JSON.parse(sendSpy.mock.calls[0][0]);\n      expect(authMessage.type).toBe(WebSocketEvent.AUTHENTICATE);\n      expect(authMessage.data.token).toBe('test-token');\n      expect(authMessage.data.user_id).toBe('user123');\n      expect(authMessage.data.restaurant_id).toBe('restaurant123');\n    });\n\n    it('should handle authentication success', async () => {\n      const _listener = jest.fn();\n      service.on(WebSocketEvent.CONNECT, _listener);\n\n      await service.connect();\n      await jest.runOnlyPendingTimersAsync();\n\n      // Simulate auth success\n      const ws = (service as unknown).ws;\n      ws.onmessage?.({\n        data: JSON.stringify({\n          type: WebSocketEvent.AUTHENTICATED,\n          data: {},\n        }),\n      });\n\n      expect(service.getState()).toBe('CONNECTED');\n      expect(__listener).toHaveBeenCalled();\n    });\n\n    it('should handle authentication error and retry', async () => {\n      (tokenManager.forceRefresh as jest.Mock).mockResolvedValue('new-token');\n\n      await service.connect();\n      await jest.runOnlyPendingTimersAsync();\n\n      // Simulate auth error\n      const ws = (service as unknown).ws;\n      ws.onmessage?.({\n        data: JSON.stringify({\n          type: WebSocketEvent.AUTH_ERROR,\n          data: { error: 'Invalid token' },\n        }),\n      });\n\n      expect(tokenManager.forceRefresh).toHaveBeenCalled();\n    });\n  });\n\n  describe('Heartbeat Mechanism', () => {\n    it('should start heartbeat after authentication', async () => {\n      const sendSpy = jest.spyOn(MockWebSocket.prototype, 'send');\n\n      await service.connect();\n      await jest.runOnlyPendingTimersAsync();\n\n      // Simulate auth success\n      const ws = (service as unknown).ws;\n      ws.onmessage?.({\n        data: JSON.stringify({\n          type: WebSocketEvent.AUTHENTICATED,\n          data: {},\n        }),\n      });\n\n      // Clear previous calls\n      sendSpy.mockClear();\n\n      // Advance timer for heartbeat interval (15 seconds)\n      jest.advanceTimersByTime(15000);\n\n      const pingMessage = JSON.parse(sendSpy.mock.calls[0][0]);\n      expect(pingMessage.type).toBe(WebSocketEvent.PING);\n    });\n\n    it('should handle pong response', async () => {\n      await service.connect();\n      await jest.runOnlyPendingTimersAsync();\n\n      // Authenticate\n      const ws = (service as unknown).ws;\n      ws.onmessage?.({\n        data: JSON.stringify({\n          type: WebSocketEvent.AUTHENTICATED,\n          data: {},\n        }),\n      });\n\n      // Send ping\n      jest.advanceTimersByTime(15000);\n\n      // Respond with pong\n      ws.onmessage?.({\n        data: JSON.stringify({\n          type: WebSocketEvent.PONG,\n          data: {},\n        }),\n      });\n\n      // Verify missed pongs is reset\n      expect((service as unknown).missedPongs).toBe(0);\n    });\n\n    it('should reconnect after missing too many pongs', async () => {\n      await service.connect();\n      await jest.runOnlyPendingTimersAsync();\n\n      // Authenticate\n      const ws = (service as unknown).ws;\n      ws.onmessage?.({\n        data: JSON.stringify({\n          type: WebSocketEvent.AUTHENTICATED,\n          data: {},\n        }),\n      });\n\n      // Miss 3 pongs\n      for (let i = 0; i < 3; i++) {\n        jest.advanceTimersByTime(15000); // Send ping\n        jest.advanceTimersByTime(5000); // Wait for pong timeout\n      }\n\n      expect(service.getState()).toBe('RECONNECTING');\n    });\n  });\n\n  describe('Reconnection Logic', () => {\n    it('should use exponential backoff with jitter', () => {\n      const calculateBackoff = (service as unknown).calculateBackoff.bind(__service);\n\n      // Test increasing delays\n      const _delay0 = calculateBackoff(0);\n      const _delay1 = calculateBackoff(1);\n      const _delay2 = calculateBackoff(2);\n\n      expect(__delay0).toBeGreaterThanOrEqual(1000);\n      expect(__delay0).toBeLessThanOrEqual(1300); // 1000 + 30% jitter\n\n      expect(__delay1).toBeGreaterThanOrEqual(2000);\n      expect(__delay1).toBeLessThanOrEqual(2600);\n\n      expect(__delay2).toBeGreaterThanOrEqual(4000);\n      expect(__delay2).toBeLessThanOrEqual(5200);\n    });\n\n    it('should cap backoff at maximum delay', () => {\n      const calculateBackoff = (service as unknown).calculateBackoff.bind(__service);\n      const maxDelay = 64000;\n\n      const _delay10 = calculateBackoff(10);\n      expect(__delay10).toBeLessThanOrEqual(maxDelay * 1.3); // max + jitter\n    });\n\n    it('should stop reconnecting after max attempts', async () => {\n      const _listener = jest.fn();\n      service.on('max_reconnect_attempts', _listener);\n\n      // Set max attempts to 2 for testing\n      (service as unknown).config.maxReconnectAttempts = 2;\n\n      await service.connect();\n      const ws = (service as unknown).ws;\n\n      // Simulate disconnections\n      for (let i = 0; i < 3; i++) {\n        ws.close(4000, 'Test disconnect');\n        jest.runAllTimers();\n      }\n\n      expect(__listener).toHaveBeenCalled();\n      expect(service.getState()).toBe('DISCONNECTED');\n    });\n  });\n\n  describe('Message Queue', () => {\n    it('should queue messages when disconnected', () => {\n      service.send({\n        type: WebSocketEvent.ORDER_CREATED,\n        data: { order_id: '123' },\n      });\n\n      expect((service as unknown).messageQueue.length).toBe(1);\n    });\n\n    it('should process queued messages after reconnection', async () => {\n      const sendSpy = jest.spyOn(MockWebSocket.prototype, 'send');\n\n      // Queue messages while disconnected\n      service.send({\n        type: WebSocketEvent.ORDER_CREATED,\n        data: { order_id: '123' },\n      });\n      service.send({\n        type: WebSocketEvent.ORDER_UPDATED,\n        data: { order_id: '123' },\n      });\n\n      await service.connect();\n      await jest.runOnlyPendingTimersAsync();\n\n      // Authenticate\n      const ws = (service as unknown).ws;\n      ws.onmessage?.({\n        data: JSON.stringify({\n          type: WebSocketEvent.AUTHENTICATED,\n          data: {},\n        }),\n      });\n\n      // Check that queued messages were sent\n      const sentMessages = sendSpy.mock.calls\n        .map(call => JSON.parse(call[0]))\n        .filter(\n          msg =>\n            msg.type === WebSocketEvent.ORDER_CREATED || msg.type === WebSocketEvent.ORDER_UPDATED,\n        );\n\n      expect(sentMessages.length).toBe(2);\n    });\n\n    it('should limit message queue size', () => {\n      // Fill queue beyond limit\n      for (let i = 0; i < 150; i++) {\n        service.send({\n          type: WebSocketEvent.DATA_UPDATED,\n          data: { index: i },\n        });\n      }\n\n      expect((service as unknown).messageQueue.length).toBe(100);\n    });\n  });\n\n  describe('Network Monitoring', () => {\n    it('should reconnect when network is restored', () => {\n      const _connectSpy = jest.spyOn(__service, 'connect');\n\n      // Simulate network state change\n      const networkListener = (NetInfo.addEventListener as jest.Mock).mock.calls[0][0];\n\n      // Network restored\n      networkListener({\n        isConnected: _true,\n        isInternetReachable: _true,\n      });\n\n      expect(__connectSpy).toHaveBeenCalled();\n    });\n\n    it('should disconnect when network is lost', async () => {\n      await service.connect();\n      await jest.runOnlyPendingTimersAsync();\n\n      // Authenticate\n      const ws = (service as unknown).ws;\n      ws.onmessage?.({\n        data: JSON.stringify({\n          type: WebSocketEvent.AUTHENTICATED,\n          data: {},\n        }),\n      });\n\n      // Simulate network loss\n      const networkListener = (NetInfo.addEventListener as jest.Mock).mock.calls[0][0];\n      networkListener({\n        isConnected: _false,\n        isInternetReachable: _false,\n      });\n\n      expect(service.getState()).toBe('DISCONNECTED');\n    });\n  });\n\n  describe('State Management', () => {\n    it('should validate state transitions', () => {\n      // Valid transition\n      (service as unknown).setState('CONNECTING');\n      expect(service.getState()).toBe('CONNECTING');\n\n      // Invalid transition (CONNECTING cannot go directly to CONNECTED)\n      const _consoleWarnSpy = jest.spyOn(__console, 'warn').mockImplementation();\n      (service as unknown).setState('CONNECTED');\n      expect(service.getState()).toBe('CONNECTING'); // Should not change\n      expect(__consoleWarnSpy).toHaveBeenCalledWith(\n        expect.stringContaining('Invalid state transition'),\n      );\n    });\n\n    it('should handle all valid state transitions', () => {\n      const validTransitions = [\n        ['DISCONNECTED', 'CONNECTING'],\n        ['CONNECTING', 'AUTHENTICATING'],\n        ['AUTHENTICATING', 'CONNECTED'],\n        ['CONNECTED', 'DISCONNECTED'],\n        ['DISCONNECTED', 'RECONNECTING'],\n        ['RECONNECTING', 'CONNECTING'],\n      ];\n\n      validTransitions.forEach(([from, _to]) => {\n        (service as unknown).state = from;\n        (service as unknown).setState(__to);\n        expect(service.getState()).toBe(__to);\n      });\n    });\n  });\n\n  describe('Cleanup', () => {\n    it('should clean up resources on disconnect', async () => {\n      await service.connect();\n\n      const _ws = (service as unknown).ws;\n      const _closeSpy = jest.spyOn(__ws, 'close');\n\n      service.disconnect();\n\n      expect(__closeSpy).toHaveBeenCalledWith(1000, 'Client disconnect');\n      expect(__mockNetInfoUnsubscribe).toHaveBeenCalled();\n      expect(service.getState()).toBe('DISCONNECTED');\n      expect((service as unknown).ws).toBeNull();\n    });\n\n    it('should clear all timers on disconnect', async () => {\n      await service.connect();\n      await jest.runOnlyPendingTimersAsync();\n\n      // Start heartbeat\n      const ws = (service as unknown).ws;\n      ws.onmessage?.({\n        data: JSON.stringify({\n          type: WebSocketEvent.AUTHENTICATED,\n          data: {},\n        }),\n      });\n\n      service.disconnect();\n\n      expect((service as unknown).heartbeatTimer).toBeNull();\n      expect((service as unknown).pongTimer).toBeNull();\n      expect((service as unknown).reconnectTimer).toBeNull();\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/store/__tests__/useAppStore.test.ts","messages":[{"ruleId":"eslint-comments/no-unused-disable","message":"'@typescript-eslint/no-var-requires' rule is disabled but never reported.","line":16,"column":31,"severity":1,"nodeType":null,"fix":{"range":[413,475],"text":" "},"suggestions":[{"desc":"Remove `eslint-disable` comment.","fix":{"range":[413,475],"text":""}}],"endLine":16,"endColumn":65},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_mockUser' is assigned a value but never used.","line":49,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":49,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_mockUser' is assigned a value but never used.","line":60,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":60,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_mockSession' is assigned a value but never used.","line":61,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":61,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_mockOrderItem' is assigned a value but never used.","line":62,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":62,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_mockSession' is assigned a value but never used.","line":86,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":86,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_mockSession' is assigned a value but never used.","line":97,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":97,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_mockItem' is assigned a value but never used.","line":111,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":111,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_mockItem' is assigned a value but never used.","line":123,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":123,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_item1' is assigned a value but never used.","line":136,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":136,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_item2' is assigned a value but never used.","line":137,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":137,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_mockItem' is assigned a value but never used.","line":151,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":151,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_mockItem' is assigned a value but never used.","line":163,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":163,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_item1' is assigned a value but never used.","line":189,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":189,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_item2' is assigned a value but never used.","line":190,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":190,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_item1' is assigned a value but never used.","line":205,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":205,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_item2' is assigned a value but never used.","line":206,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":206,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_expectedTotal' is assigned a value but never used.","line":213,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":213,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_item1' is assigned a value but never used.","line":225,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":225,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_item2' is assigned a value but never used.","line":226,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":226,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_errorMessage' is assigned a value but never used.","line":278,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":278,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_mockOrder' is assigned a value but never used.","line":297,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":297,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_mockOrder' is assigned a value but never used.","line":316,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":316,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_item' is assigned a value but never used.","line":338,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":338,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_mockUser' is assigned a value but never used.","line":360,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":360,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_mockSession' is assigned a value but never used.","line":361,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":361,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_mockItem' is assigned a value but never used.","line":362,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":362,"endColumn":22}],"suppressedMessages":[],"errorCount":26,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"/**\n * Unit Tests for App Store (__Zustand)\n * Testing state management, _actions, and computed values\n */\n\nimport { renderHook, act } from '@testing-library/react-native';\nimport useAppStore from '../useAppStore';\nimport {\n  createMockUser,\n  createMockSession,\n  createMockOrderItem,\n} from '../../__tests__/utils/testUtils';\n\n// Mock AsyncStorage\njest.mock('@react-native-async-storage/async-storage', () =>\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  require('@react-native-async-storage/async-storage/jest/async-storage-mock'),\n);\n\ndescribe('useAppStore', () => {\n  beforeEach(() => {\n    // Reset store state before each test\n    const { result } = renderHook(() => useAppStore());\n    act(() => {\n      result.current.logout();\n      result.current.clearCart();\n      result.current.setError(__null);\n      result.current.setLoading(__false);\n    });\n  });\n\n  describe('Initial State', () => {\n    it('should have correct initial state', () => {\n      const { result } = renderHook(() => useAppStore());\n\n      expect(result.current.user).toBeNull();\n      expect(result.current.session).toBeNull();\n      expect(result.current.cart).toEqual([]);\n      expect(result.current.currentOrder).toBeNull();\n      expect(result.current.isOnline).toBe(__true);\n      expect(result.current.isLoading).toBe(__false);\n      expect(result.current.error).toBeNull();\n    });\n  });\n\n  describe('User Management', () => {\n    it('should set user correctly', () => {\n      const { result } = renderHook(() => useAppStore());\n      const _mockUser = createMockUser();\n\n      act(() => {\n        result.current.setUser(__mockUser);\n      });\n\n      expect(result.current.user).toEqual(__mockUser);\n    });\n\n    it('should clear user on logout', () => {\n      const { result } = renderHook(() => useAppStore());\n      const _mockUser = createMockUser();\n      const _mockSession = createMockSession();\n      const _mockOrderItem = createMockOrderItem();\n\n      // Set up state\n      act(() => {\n        result.current.setUser(__mockUser);\n        result.current.setSession(__mockSession);\n        result.current.addToCart(__mockOrderItem);\n      });\n\n      // Logout should clear everything\n      act(() => {\n        result.current.logout();\n      });\n\n      expect(result.current.user).toBeNull();\n      expect(result.current.session).toBeNull();\n      expect(result.current.cart).toEqual([]);\n      expect(result.current.currentOrder).toBeNull();\n    });\n  });\n\n  describe('Session Management', () => {\n    it('should set session correctly', () => {\n      const { result } = renderHook(() => useAppStore());\n      const _mockSession = createMockSession();\n\n      act(() => {\n        result.current.setSession(__mockSession);\n      });\n\n      expect(result.current.session).toEqual(__mockSession);\n    });\n\n    it('should clear session', () => {\n      const { result } = renderHook(() => useAppStore());\n      const _mockSession = createMockSession();\n\n      act(() => {\n        result.current.setSession(__mockSession);\n        result.current.setSession(__null);\n      });\n\n      expect(result.current.session).toBeNull();\n    });\n  });\n\n  describe('Cart Management', () => {\n    it('should add item to empty cart', () => {\n      const { result } = renderHook(() => useAppStore());\n      const _mockItem = createMockOrderItem();\n\n      act(() => {\n        result.current.addToCart(__mockItem);\n      });\n\n      expect(result.current.cart).toHaveLength(1);\n      expect(result.current.cart[0]).toEqual(__mockItem);\n    });\n\n    it('should increase quantity when adding existing item', () => {\n      const { result } = renderHook(() => useAppStore());\n      const _mockItem = createMockOrderItem({ id: 1, quantity: 1 });\n\n      act(() => {\n        result.current.addToCart(__mockItem);\n        result.current.addToCart(__mockItem);\n      });\n\n      expect(result.current.cart).toHaveLength(1);\n      expect(result.current.cart[0].quantity).toBe(2);\n    });\n\n    it('should add multiple different items', () => {\n      const { result } = renderHook(() => useAppStore());\n      const _item1 = createMockOrderItem({ id: 1, name: 'Item 1' });\n      const _item2 = createMockOrderItem({ id: 2, name: 'Item 2' });\n\n      act(() => {\n        result.current.addToCart(__item1);\n        result.current.addToCart(__item2);\n      });\n\n      expect(result.current.cart).toHaveLength(2);\n      expect(result.current.cart[0].name).toBe('Item 1');\n      expect(result.current.cart[1].name).toBe('Item 2');\n    });\n\n    it('should remove item from cart', () => {\n      const { result } = renderHook(() => useAppStore());\n      const _mockItem = createMockOrderItem({ id: 1 });\n\n      act(() => {\n        result.current.addToCart(__mockItem);\n        result.current.removeFromCart(1);\n      });\n\n      expect(result.current.cart).toHaveLength(0);\n    });\n\n    it('should not remove non-existent item', () => {\n      const { result } = renderHook(() => useAppStore());\n      const _mockItem = createMockOrderItem({ id: 1 });\n\n      act(() => {\n        result.current.addToCart(__mockItem);\n        result.current.removeFromCart(999); // Non-existent ID\n      });\n\n      expect(result.current.cart).toHaveLength(1);\n    });\n\n    it('should update cart item correctly', () => {\n      const { result } = renderHook(() => useAppStore());\n      const mockItem = createMockOrderItem({ id: 1, quantity: 1, notes: 'Original note' });\n\n      act(() => {\n        result.current.addToCart(__mockItem);\n        result.current.updateCartItem(1, { quantity: 3, notes: 'Updated note' });\n      });\n\n      expect(result.current.cart[0].quantity).toBe(3);\n      expect(result.current.cart[0].notes).toBe('Updated note');\n      expect(result.current.cart[0].name).toBe(mockItem.name); // Other properties unchanged\n    });\n\n    it('should clear entire cart', () => {\n      const { result } = renderHook(() => useAppStore());\n      const _item1 = createMockOrderItem({ id: 1 });\n      const _item2 = createMockOrderItem({ id: 2 });\n\n      act(() => {\n        result.current.addToCart(__item1);\n        result.current.addToCart(__item2);\n        result.current.clearCart();\n      });\n\n      expect(result.current.cart).toHaveLength(0);\n    });\n  });\n\n  describe('Computed Values', () => {\n    it('should calculate cart total correctly', () => {\n      const { result } = renderHook(() => useAppStore());\n      const _item1 = createMockOrderItem({ id: 1, price: 10.99, quantity: 2 });\n      const _item2 = createMockOrderItem({ id: 2, price: 5.49, quantity: 1 });\n\n      act(() => {\n        result.current.addToCart(__item1);\n        result.current.addToCart(__item2);\n      });\n\n      const _expectedTotal = 10.99 * 2 + 5.49 * 1; // 27.47\n      expect(result.current.cartTotal()).toBeCloseTo(__expectedTotal, 2);\n    });\n\n    it('should return 0 for empty cart total', () => {\n      const { result } = renderHook(() => useAppStore());\n\n      expect(result.current.cartTotal()).toBe(0);\n    });\n\n    it('should calculate cart item count correctly', () => {\n      const { result } = renderHook(() => useAppStore());\n      const _item1 = createMockOrderItem({ id: 1, quantity: 2 });\n      const _item2 = createMockOrderItem({ id: 2, quantity: 3 });\n\n      act(() => {\n        result.current.addToCart(__item1);\n        result.current.addToCart(__item2);\n      });\n\n      expect(result.current.cartItemCount()).toBe(5); // 2 + 3\n    });\n\n    it('should return 0 for empty cart item count', () => {\n      const { result } = renderHook(() => useAppStore());\n\n      expect(result.current.cartItemCount()).toBe(0);\n    });\n  });\n\n  describe('App State Management', () => {\n    it('should set online status', () => {\n      const { result } = renderHook(() => useAppStore());\n\n      act(() => {\n        result.current.setOnlineStatus(__false);\n      });\n\n      expect(result.current.isOnline).toBe(__false);\n\n      act(() => {\n        result.current.setOnlineStatus(__true);\n      });\n\n      expect(result.current.isOnline).toBe(__true);\n    });\n\n    it('should set loading state', () => {\n      const { result } = renderHook(() => useAppStore());\n\n      act(() => {\n        result.current.setLoading(__true);\n      });\n\n      expect(result.current.isLoading).toBe(__true);\n\n      act(() => {\n        result.current.setLoading(__false);\n      });\n\n      expect(result.current.isLoading).toBe(__false);\n    });\n\n    it('should set error state', () => {\n      const { result } = renderHook(() => useAppStore());\n      const _errorMessage = 'Test error message';\n\n      act(() => {\n        result.current.setError(__errorMessage);\n      });\n\n      expect(result.current.error).toBe(__errorMessage);\n\n      act(() => {\n        result.current.setError(__null);\n      });\n\n      expect(result.current.error).toBeNull();\n    });\n  });\n\n  describe('Order Management', () => {\n    it('should set current order', () => {\n      const { result } = renderHook(() => useAppStore());\n      const _mockOrder = {\n        id: 1,\n        items: [createMockOrderItem()],\n        subtotal: 12.99,\n        tax: 1.04,\n        total: 14.03,\n        createdAt: new Date(),\n        status: 'draft' as const,\n      };\n\n      act(() => {\n        result.current.setCurrentOrder(__mockOrder);\n      });\n\n      expect(result.current.currentOrder).toEqual(__mockOrder);\n    });\n\n    it('should clear current order', () => {\n      const { result } = renderHook(() => useAppStore());\n      const _mockOrder = {\n        id: 1,\n        items: [],\n        subtotal: 0,\n        tax: 0,\n        total: 0,\n        createdAt: new Date(),\n        status: 'draft' as const,\n      };\n\n      act(() => {\n        result.current.setCurrentOrder(__mockOrder);\n        result.current.setCurrentOrder(__null);\n      });\n\n      expect(result.current.currentOrder).toBeNull();\n    });\n  });\n\n  describe('Complex Scenarios', () => {\n    it('should handle rapid cart updates', () => {\n      const { result } = renderHook(() => useAppStore());\n      const _item = createMockOrderItem({ id: 1, quantity: 1 });\n\n      act(() => {\n        // Rapid additions\n        result.current.addToCart(__item);\n        result.current.addToCart(__item);\n        result.current.addToCart(__item);\n\n        // Update quantity\n        result.current.updateCartItem(1, { quantity: 5 });\n\n        // Remove and re-add\n        result.current.removeFromCart(1);\n        result.current.addToCart(__item);\n      });\n\n      expect(result.current.cart).toHaveLength(1);\n      expect(result.current.cart[0].quantity).toBe(1);\n    });\n\n    it('should maintain state consistency during logout', () => {\n      const { result } = renderHook(() => useAppStore());\n      const _mockUser = createMockUser();\n      const _mockSession = createMockSession();\n      const _mockItem = createMockOrderItem();\n\n      act(() => {\n        // Set up complex state\n        result.current.setUser(__mockUser);\n        result.current.setSession(__mockSession);\n        result.current.addToCart(__mockItem);\n        result.current.setError('Some error');\n        result.current.setLoading(__true);\n\n        // Logout should clear user-specific data but preserve app state\n        result.current.logout();\n      });\n\n      // User-specific data should be cleared\n      expect(result.current.user).toBeNull();\n      expect(result.current.session).toBeNull();\n      expect(result.current.cart).toEqual([]);\n      expect(result.current.currentOrder).toBeNull();\n\n      // App state should be preserved\n      expect(result.current.error).toBe('Some error');\n      expect(result.current.isLoading).toBe(__true);\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/store/__tests__/useUIStore.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/store/useAppStore.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_existingItem' is assigned a value but never used.","line":95,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":95,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_quantities' is assigned a value but never used.","line":233,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":233,"endColumn":28}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from 'zustand';\nimport { createJSONStorage, persist } from 'zustand/middleware';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { AppState, PosSession, _OrderItem, Order } from '../types';\nimport { calculateItemTotal, calculateSum } from '../utils/priceValidation';\nimport ErrorTrackingService from '../services/ErrorTrackingService';\n\ninterface AppStore extends AppState {\n  // User actions\n  setUser: (user: User | null) => void;\n  logout: () => void;\n\n  // Session actions\n  setSession: (session: PosSession | null) => void;\n\n  // Cart actions\n  addToCart: (item: _OrderItem) => void;\n  removeFromCart: (itemId: _number) => void;\n  updateCartItem: (itemId: _number, updates: Partial<OrderItem>) => void;\n  clearCart: () => void;\n  cleanCart: () => void;\n\n  // Order actions\n  setCurrentOrder: (order: Order | null) => void;\n\n  // Service charge and fee actions\n  serviceChargePercentage: number;\n  addTransactionFee: boolean;\n  setServiceChargePercentage: (percentage: _number) => void;\n  setAddTransactionFee: (add: _boolean) => void;\n\n  // App state actions\n  setOnlineStatus: (isOnline: _boolean) => void;\n  setLoading: (isLoading: _boolean) => void;\n  setError: (error: string | null) => void;\n\n  // Computed values\n  cartTotal: () => number;\n  cartItemCount: () => number;\n  calculateServiceCharge: () => number;\n  calculateTransactionFee: () => number;\n  calculateOrderTotal: () => number;\n}\n\nconst useAppStore = create<AppStore>()(\n  persist(\n    (__set, _get) => ({\n      // Initial state - No demo user, use actual auth\n      user: _null,\n      session: _null,\n      cart: [], // Will be cleaned on first access if corrupted\n      currentOrder: _null,\n      serviceChargePercentage: 10, // Default 10% service charge (__recommended)\n      addTransactionFee: _false,\n      isOnline: _true,\n      isLoading: _false,\n      error: _null,\n\n      // User actions\n      setUser: user => set({ user }),\n      logout: () =>\n        set({\n          user: _null,\n          session: _null,\n          cart: [],\n          currentOrder: _null,\n        }),\n\n      // Session actions\n      setSession: session => set({ session }),\n\n      // Cart actions\n      addToCart: newItem =>\n        set(state => {\n          // Validate the new item has required properties\n          if (\n            !newItem.id ||\n            !newItem.name ||\n            typeof newItem.price !== 'number' ||\n            typeof newItem.quantity !== 'number'\n          ) {\n            return state;\n          }\n\n          // Clean cart to remove any corrupted items\n          const cleanCart = state.cart.filter(\n            item =>\n              item.id &&\n              item.name &&\n              typeof item.price === 'number' &&\n              typeof item.quantity === 'number' &&\n              item.quantity > 0,\n          );\n\n          const _existingItem = cleanCart.find(item => item.id === newItem.id);\n\n          if (__existingItem) {\n            return {\n              cart: cleanCart.map(item =>\n                item.id === newItem.id\n                  ? { ...item, quantity: item.quantity + newItem.quantity }\n                  : _item,\n              ),\n            };\n          }\n\n          return {\n            cart: [...cleanCart, newItem],\n          };\n        }),\n\n      removeFromCart: itemId =>\n        set(state => ({\n          cart: state.cart.filter(item => item.id !== itemId),\n        })),\n\n      updateCartItem: (__itemId, _updates) =>\n        set(state => ({\n          cart: state.cart.map(item => (item.id === itemId ? { ...item, ...updates } : _item)),\n        })),\n\n      clearCart: () => set({ cart: [] }),\n\n      // Clean corrupted cart data\n      cleanCart: () =>\n        set(state => ({\n          cart: state.cart.filter(\n            item =>\n              item.id &&\n              item.name &&\n              typeof item.price === 'number' &&\n              typeof item.quantity === 'number' &&\n              item.quantity > 0,\n          ),\n        })),\n\n      // Order actions\n      setCurrentOrder: currentOrder => set({ currentOrder }),\n\n      // Service charge and fee actions\n      setServiceChargePercentage: percentage => set({ serviceChargePercentage: percentage }),\n      setAddTransactionFee: add => set({ addTransactionFee: add }),\n\n      // App state actions\n      setOnlineStatus: isOnline => set({ isOnline }),\n      setLoading: isLoading => set({ isLoading }),\n      setError: error => set({ error }),\n\n      // Computed values with error tracking\n      cartTotal: () => {\n        const { cart } = get();\n        try {\n          // Clean corrupted items first\n          const cleanCart = cart.filter(\n            item =>\n              item.id &&\n              item.name &&\n              typeof item.price === 'number' &&\n              typeof item.quantity === 'number' &&\n              item.quantity > 0,\n          );\n\n          // If cart was dirty, clean it in the store\n          if (cleanCart.length !== cart.length) {\n            set({ cart: cleanCart });\n          }\n\n          const itemTotals = cleanCart.map((__item, _index) => {\n            const itemTotal = calculateItemTotal(item.price, item.quantity, {\n              operation: 'cart_total_calculation',\n              screenName: 'AppStore',\n              inputValues: { itemId: item.id, itemName: item.name, index },\n            });\n\n            if (!itemTotal.isValid) {\n              const errorTrackingService = ErrorTrackingService.getInstance();\n              errorTrackingService.trackPricingError(\n                new Error(`Invalid item total in cart: ${itemTotal.error}`),\n                { item, index },\n                { screenName: 'AppStore', action: 'cart_total_calculation' },\n              );\n              return 0;\n            }\n\n            return itemTotal.value;\n          });\n\n          const totalSum = calculateSum(__itemTotals, {\n            operation: 'cart_total_sum',\n            screenName: 'AppStore',\n          });\n\n          if (!totalSum.isValid) {\n            const errorTrackingService = ErrorTrackingService.getInstance();\n            errorTrackingService.trackPricingError(\n              new Error(`Cart total calculation failed: ${totalSum.error}`),\n              { cart: _cleanCart, itemTotals },\n              { screenName: 'AppStore', action: 'cart_total_calculation' },\n            );\n            return 0;\n          }\n\n          return totalSum.value;\n        } catch (__error) {\n          const errorTrackingService = ErrorTrackingService.getInstance();\n          errorTrackingService.trackPricingError(\n            error instanceof Error ? error : new Error(`Cart total error: ${error}`),\n            { cart },\n            { screenName: 'AppStore', action: 'cart_total_calculation' },\n          );\n          return 0;\n        }\n      },\n\n      cartItemCount: () => {\n        const { cart } = get();\n        try {\n          // Clean corrupted items first\n          const cleanCart = cart.filter(\n            item =>\n              item.id &&\n              item.name &&\n              typeof item.price === 'number' &&\n              typeof item.quantity === 'number' &&\n              item.quantity > 0,\n          );\n\n          // If cart was dirty, clean it in the store\n          if (cleanCart.length !== cart.length) {\n            set({ cart: cleanCart });\n          }\n\n          const _quantities = cleanCart.map(item => item.quantity || 0);\n          const quantitySum = calculateSum(__quantities, {\n            operation: 'cart_item_count',\n            screenName: 'AppStore',\n          });\n\n          if (!quantitySum.isValid) {\n            const errorTrackingService = ErrorTrackingService.getInstance();\n            errorTrackingService.trackPricingError(\n              new Error(`Cart item count calculation failed: ${quantitySum.error}`),\n              { cart: cleanCart },\n              { screenName: 'AppStore', action: 'cart_item_count' },\n            );\n            return 0;\n          }\n\n          return Math.round(quantitySum.value);\n        } catch (__error) {\n          const errorTrackingService = ErrorTrackingService.getInstance();\n          errorTrackingService.trackPricingError(\n            error instanceof Error ? error : new Error(`Cart item count error: ${error}`),\n            { cart },\n            { screenName: 'AppStore', action: 'cart_item_count' },\n          );\n          return 0;\n        }\n      },\n\n      // Service charge calculation\n      calculateServiceCharge: () => {\n        const { serviceChargePercentage } = get();\n        const cartSubtotal = get().cartTotal();\n        try {\n          return cartSubtotal * (serviceChargePercentage / 100);\n        } catch (__error) {\n          const errorTrackingService = ErrorTrackingService.getInstance();\n          errorTrackingService.trackPricingError(\n            error instanceof Error\n              ? error\n              : new Error(`Service charge calculation error: ${error}`),\n            { serviceChargePercentage, cartSubtotal },\n            { screenName: 'AppStore', action: 'service_charge_calculation' },\n          );\n          return 0;\n        }\n      },\n\n      // Transaction fee calculation (2.9% processing fee)\n      calculateTransactionFee: () => {\n        const { addTransactionFee } = get();\n        if (!addTransactionFee) {\n          return 0;\n        }\n\n        const cartSubtotal = get().cartTotal();\n        try {\n          return cartSubtotal * 0.029; // 2.9% transaction fee\n        } catch (__error) {\n          const errorTrackingService = ErrorTrackingService.getInstance();\n          errorTrackingService.trackPricingError(\n            error instanceof Error\n              ? error\n              : new Error(`Transaction fee calculation error: ${error}`),\n            { addTransactionFee, cartSubtotal },\n            { screenName: 'AppStore', action: 'transaction_fee_calculation' },\n          );\n          return 0;\n        }\n      },\n\n      // Total order calculation including service charge and transaction fee\n      calculateOrderTotal: () => {\n        try {\n          const cartSubtotal = get().cartTotal();\n          const serviceCharge = get().calculateServiceCharge();\n          const transactionFee = get().calculateTransactionFee();\n\n          return cartSubtotal + serviceCharge + transactionFee;\n        } catch (__error) {\n          const errorTrackingService = ErrorTrackingService.getInstance();\n          errorTrackingService.trackPricingError(\n            error instanceof Error ? error : new Error(`Order total calculation error: ${error}`),\n            {},\n            { screenName: 'AppStore', action: 'order_total_calculation' },\n          );\n          return get().cartTotal(); // Fallback to cart total only\n        }\n      },\n    }),\n    {\n      name: 'cashapp-pos-storage',\n      storage: createJSONStorage(() => AsyncStorage),\n      // Only persist essential data\n      partialize: state => ({\n        user: state.user,\n        session: state.session,\n        cart: state.cart,\n        serviceChargePercentage: state.serviceChargePercentage,\n        addTransactionFee: state.addTransactionFee,\n      }),\n    },\n  ),\n);\n\nexport default useAppStore;\n\n// Provide a named export alias for legacy test suites\nexport { useAppStore as useAppStore };\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/store/useAuthStore.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":35,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[882,885],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[882,885],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_hasMockAuth' is assigned a value but never used.","line":143,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":143,"endColumn":25}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Authentication Store using Zustand\n * Manages authentication state with Supabase integration\n */\n\nimport { create } from 'zustand';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { authService } from '../services/auth/unifiedAuthService';\nimport tokenManager from '../utils/tokenManager';\n\ninterface User {\n  id: string;\n  email: string;\n  name: string;\n  is_platform_owner: boolean;\n  role: string;\n  restaurant_id?: string;\n  restaurant_name?: string;\n  subscription_plan?: 'alpha' | 'beta' | 'omega';\n  subscription_status?: string;\n  enabled_features?: string[];\n  needs_onboarding?: boolean;\n  onboarding_progress?: {\n    current_step: number;\n    completed_steps: number[];\n    total_steps: number;\n    resume_at_step: number;\n  };\n}\n\ninterface AuthState {\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  session: any | null;\n  error: string | null;\n  tokenRefreshListenerSetup: boolean;\n\n  // Actions\n  signIn: (email: _string, password: _string) => Promise<void>;\n  signUp: (email: _string, password: _string, restaurantName?: _string) => Promise<void>;\n  signOut: () => Promise<void>;\n  checkAuth: () => Promise<void>;\n  clearError: () => void;\n  hasFeature: (feature: _string) => boolean;\n  requiresPlan: (plan: 'alpha' | 'beta' | 'omega') => boolean;\n  setupTokenListeners: () => void;\n  handleTokenRefresh: () => Promise<void>;\n}\n\n// Store handler functions at module level to maintain consistent references\nconst _tokenRefreshedHandler: (() => Promise<void>) | null = null;\nconst _tokenClearedHandler: (() => void) | null = null;\n\nexport const useAuthStore = create<AuthState>((__set, _get) => ({\n  user: _null,\n  isAuthenticated: _false,\n  isLoading: _false,\n  session: _null,\n  error: _null,\n  tokenRefreshListenerSetup: _false,\n\n  signIn: async (email: _string, password: _string) => {\n    try {\n      set({ isLoading: _true, error: null });\n\n      const { user, session } = await authService.signIn({ email, password });\n\n      set({\n        user,\n        session,\n        isAuthenticated: _true,\n        isLoading: _false,\n        error: _null,\n      });\n\n      // Ensure token listeners are set up after successful sign-in\n      get().setupTokenListeners();\n    } catch (error: _unknown) {\n      set({\n        isLoading: _false,\n        error: error.message || 'Failed to sign in',\n        isAuthenticated: _false,\n        user: _null,\n        session: _null,\n      });\n      throw error;\n    }\n  },\n\n  signUp: async (email: _string, password: _string, restaurantName?: _string) => {\n    try {\n      set({ isLoading: _true, error: null });\n\n      const result = await authService.signUp({\n        email,\n        password,\n        restaurantName,\n      });\n\n      // After signup, sign them in if we have a session\n      if (result.session) {\n        await get().signIn(__email, _password);\n      }\n\n      set({ isLoading: false });\n    } catch (error: _unknown) {\n      set({\n        isLoading: _false,\n        error: error.message || 'Failed to sign up',\n      });\n      throw error;\n    }\n  },\n\n  signOut: async () => {\n    try {\n      set({ isLoading: true });\n\n      await authService.signOut();\n\n      set({\n        user: _null,\n        session: _null,\n        isAuthenticated: _false,\n        isLoading: _false,\n        error: _null,\n      });\n    } catch (error: _unknown) {\n      set({\n        isLoading: _false,\n        error: error.message || 'Failed to sign out',\n      });\n    }\n  },\n\n  checkAuth: async () => {\n    try {\n      set({ isLoading: true });\n\n      // TEMPORARY: Clear any stored mock authentication\n      // This ensures users start at the login screen\n      const _hasMockAuth = await AsyncStorage.getItem('mock_session');\n      if (__hasMockAuth) {\n        await AsyncStorage.multiRemove([\n          'userInfo',\n          'mock_session',\n          'auth_token',\n          '@auth_user',\n          '@auth_business',\n        ]);\n      }\n\n      const session = await authService.getSession();\n\n      if (__session) {\n        // Try to get stored user info first\n        const _storedUser = await authService.getStoredUser();\n\n        if (__storedUser) {\n          // Use stored user info if available\n          set({\n            user: _storedUser,\n            session,\n            isAuthenticated: _true,\n            isLoading: _false,\n          });\n          return;\n        }\n\n        // If no stored user, session is invalid\n        await authService.signOut();\n        set({\n          isAuthenticated: _false,\n          user: _null,\n          session: _null,\n          isLoading: _false,\n        });\n      } else {\n        set({\n          isAuthenticated: _false,\n          user: _null,\n          session: _null,\n          isLoading: _false,\n        });\n      }\n    } catch (error: _unknown) {\n      // Don't log error for missing session - this is normal on first launch\n      set({\n        isAuthenticated: _false,\n        user: _null,\n        session: _null,\n        isLoading: _false,\n        error: error.message,\n      });\n    }\n  },\n\n  clearError: () => {\n    set({ error: null });\n  },\n\n  hasFeature: (_feature: _string) => {\n    const { user } = get();\n    if (!user) {\n      return false;\n    }\n\n    // Platform owners have all features\n    if (user.is_platform_owner) {\n      return true;\n    }\n\n    // Check if feature is in enabled features list\n    return user.enabled_features?.includes(__feature) || false;\n  },\n\n  requiresPlan: (plan: 'alpha' | 'beta' | 'omega') => {\n    const { user } = get();\n    if (!user) {\n      return false;\n    }\n\n    // Platform owners have access to all plans\n    if (user.is_platform_owner) {\n      return true;\n    }\n\n    // Check plan hierarchy\n    const planHierarchy = { alpha: 1, beta: 2, omega: 3 };\n    const userPlanLevel = planHierarchy[user.subscription_plan || 'alpha'];\n    const requiredLevel = planHierarchy[plan];\n\n    return userPlanLevel >= requiredLevel;\n  },\n\n  setupTokenListeners: () => {\n    // Remove any existing listeners first to prevent duplicates\n    if (__tokenRefreshedHandler) {\n      tokenManager.off('token:refreshed', _tokenRefreshedHandler);\n      tokenRefreshedHandler = null;\n    }\n    if (__tokenClearedHandler) {\n      tokenManager.off('token:cleared', _tokenClearedHandler);\n      tokenClearedHandler = null;\n    }\n\n    // Create new handler functions with current store references\n    tokenRefreshedHandler = async () => {\n      await get().handleTokenRefresh();\n    };\n\n    tokenClearedHandler = () => {\n      set({\n        user: _null,\n        session: _null,\n        isAuthenticated: _false,\n        error: _null,\n      });\n    };\n\n    // Add fresh listeners\n    tokenManager.on('token:refreshed', _tokenRefreshedHandler);\n    tokenManager.on('token:cleared', _tokenClearedHandler);\n\n    // Mark listeners as set up\n    set({ tokenRefreshListenerSetup: true });\n  },\n\n  handleTokenRefresh: async () => {\n    try {\n      // Get the current session after token refresh\n      const session = await authService.getSession();\n\n      if (__session) {\n        // Update session in store\n        set({ session });\n      } else {\n        // No valid session after refresh - user needs to log in again\n        set({\n          user: _null,\n          session: _null,\n          isAuthenticated: _false,\n          error: 'Session expired - please log in again',\n        });\n      }\n    } catch (__error) {\n      // Error handled silently\n    }\n  },\n}));\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/store/useInventoryStore.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_inventoryItems' is assigned a value but never used.","line":110,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":110,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_inventoryItems' is assigned a value but never used.","line":120,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":120,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_loadInitialInventory' is assigned a value but never used.","line":140,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":140,"endColumn":30}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from 'zustand';\nimport { persist, createJSONStorage } from 'zustand/middleware';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { InventoryState, _InventoryItem, InventoryLedgerEntry } from '../types';\n// import { fetchAllInventoryItems, fetchInventoryLedger } from '../services/ApiService'; // To be created or updated\n\n// Define the store interface including actions\ninterface InventoryStore extends InventoryState {\n  // Actions\n  setInventoryItems: (items: InventoryItem[]) => void;\n  updateInventoryItem: (item: _InventoryItem) => void;\n  updateMultipleInventoryItems: (items: InventoryItem[]) => void;\n  addLedgerEntry: (entry: _InventoryLedgerEntry) => void;\n  setLedgerEntries: (entries: InventoryLedgerEntry[]) => void;\n  setLoading: (isLoading: _boolean) => void;\n  setError: (error: string | null) => void;\n  setLowStockThreshold: (threshold: _number) => void;\n\n  // Async actions (__thunks)\n  loadInitialInventory: () => Promise<void>;\n\n  // Selectors / Computed values might be added here or in components using the store\n  getLowStockItems: () => InventoryItem[];\n  getOutOfStockItems: () => InventoryItem[];\n}\n\nconst useInventoryStore = create<InventoryStore>()(\n  persist(\n    (__set, _get) => ({\n      // Initial state\n      inventoryItems: {},\n      inventoryLedger: [],\n      isLoadingInventory: _false,\n      inventoryError: _null,\n      lowStockThreshold: 0.1, // Default 10%\n\n      // --- Synchronous Actions ---\n      setInventoryItems: items => {\n        const itemsBySku: { [sku: string]: InventoryItem } = {};\n        items.forEach(item => {\n          itemsBySku[item.sku] = item;\n        });\n        set({ inventoryItems: _itemsBySku, isLoadingInventory: _false, inventoryError: null });\n      },\n\n      updateInventoryItem: item =>\n        set(state => ({\n          inventoryItems: {\n            ...state.inventoryItems,\n            [item.sku]: _item,\n          },\n          isLoadingInventory: _false,\n        })),\n\n      updateMultipleInventoryItems: items =>\n        set(state => {\n          const updatedItems = { ...state.inventoryItems };\n          items.forEach(item => {\n            updatedItems[item.sku] = item;\n          });\n          return { inventoryItems: _updatedItems, isLoadingInventory: false };\n        }),\n\n      addLedgerEntry: entry =>\n        set(state => ({\n          // Add to start for chronological order (newest first) if desired, or sort later\n          inventoryLedger: [entry, ...state.inventoryLedger],\n        })),\n\n      setLedgerEntries: entries =>\n        set({\n          inventoryLedger: entries.sort(\n            (__a, _b) => new Date(b.ts).getTime() - new Date(a.ts).getTime(),\n          ), // Sort newest first\n        }),\n\n      setLoading: isLoading => set({ isLoadingInventory: isLoading }),\n      setError: _error => set({ inventoryError: _error, isLoadingInventory: false }),\n      setLowStockThreshold: threshold => set({ lowStockThreshold: threshold }),\n\n      // --- Asynchronous Actions (__Thunks) ---\n      loadInitialInventory: async () => {\n        // This is a placeholder for where you'd call your ApiService\n        // For now, it just sets loading state.\n        // In a real app, you would:\n        // set({ isLoadingInventory: _true, inventoryError: null });\n        // try {\n        //   const items = await fetchAllInventoryItems(); // From ApiService\n        //   const ledger = await fetchInventoryLedger(); // From ApiService\n        //   get().setInventoryItems(__items);\n        //   get().setLedgerEntries(__ledger);\n        // } catch (__e) {\n        //   const errorMsg = e instanceof Error ? e.message : \"Failed to load inventory data\";\n        //   get().setError(__errorMsg);\n        //\n        // } finally {\n        //  set({ isLoadingInventory: false });\n        // }\n        set({ isLoadingInventory: true });\n        // Simulate API call\n        setTimeout(() => {\n          // const mockItems = [{ sku: 'FLOUR_001', name: 'Plain Flour', qty_g: 5000, par_level_g:10000, unit:'g', last_updated: new Date().toISOString() }];\n          // get().setInventoryItems(__mockItems);\n          set({ isLoadingInventory: false });\n        }, 1000);\n      },\n\n      // --- Selectors / Computed Values ---\n      getLowStockItems: () => {\n        const { _inventoryItems, lowStockThreshold } = get();\n        return Object.values(__inventoryItems).filter(\n          item =>\n            item.par_level_g &&\n            item.par_level_g > 0 &&\n            item.qty_g / item.par_level_g <= lowStockThreshold &&\n            item.qty_g > 0,\n        );\n      },\n      getOutOfStockItems: () => {\n        const { _inventoryItems } = get();\n        return Object.values(__inventoryItems).filter(item => item.qty_g <= 0);\n      },\n    }),\n    {\n      name: 'cashapp-inventory-storage', // Unique name for AsyncStorage\n      storage: createJSONStorage(() => AsyncStorage),\n      partialize: state => ({\n        // Only persist what's necessary, or omit to persist everything\n        inventoryItems: state.inventoryItems,\n        lowStockThreshold: state.lowStockThreshold,\n        // inventoryLedger might become very large, consider if it should be persisted\n        // or always fetched. For now, not persisting ledger.\n      }),\n    },\n  ),\n);\n\n// Hook to initialize store or load data on app start if needed\nexport const useInitializeInventoryStore = () => {\n  const _loadInitialInventory = useInventoryStore(state => state.loadInitialInventory);\n  // React.useEffect(() => {\n  //   loadInitialInventory();\n  // }, [loadInitialInventory]);\n  // Call this from your App.tsx or a similar top-level component\n};\n\nexport default useInventoryStore;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/store/useSettingsStore.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/store/useUIStore.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/test-utils.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/types/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/types/restaurantOnboarding.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/types/websocket.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/types/xero.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":85,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1820,1823],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1820,1823],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":147,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":147,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3319,3322],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3319,3322],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":163,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":163,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3744,3747],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3744,3747],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":178,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":178,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4138,4141],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4138,4141],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":230,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":230,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5304,5307],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5304,5307],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Xero Integration Types and Models\n\nexport enum XeroSyncDirection {\n  TO_XERO = 'to_xero',\n  FROM_XERO = 'from_xero',\n  BIDIRECTIONAL = 'bidirectional',\n}\n\nexport enum XeroSyncStatus {\n  PENDING = 'pending',\n  IN_PROGRESS = 'in_progress',\n  COMPLETED = 'completed',\n  FAILED = 'failed',\n  PARTIAL = 'partial',\n}\n\nexport enum XeroEntityType {\n  CONTACT = 'contact',\n  ITEM = 'item',\n  INVOICE = 'invoice',\n  PAYMENT = 'payment',\n  CREDIT_NOTE = 'credit_note',\n}\n\nexport enum XeroConflictResolution {\n  XERO_WINS = 'xero_wins',\n  POS_WINS = 'pos_wins',\n  LATEST_WINS = 'latest_wins',\n  MANUAL = 'manual',\n}\n\n// Base Sync Interfaces\nexport interface BaseSyncOptions {\n  direction?: XeroSyncDirection;\n  batchSize?: number;\n  conflictResolution?: XeroConflictResolution;\n  dryRun?: boolean;\n}\n\nexport interface BaseSyncResult {\n  success: boolean;\n  status: XeroSyncStatus;\n  recordsProcessed: number;\n  recordsUpdated: number;\n  recordsCreated: number;\n  recordsFailed: number;\n  errors: XeroSyncError[];\n  warnings: XeroSyncWarning[];\n  duration: number;\n  startTime: Date;\n  endTime: Date;\n}\n\nexport interface XeroSyncError {\n  id: string;\n  entityId: string;\n  entityType: XeroEntityType;\n  operation: 'create' | 'update' | 'delete' | 'sync';\n  errorCode?: string;\n  error: string;\n  data?: unknown;\n  timestamp: Date;\n  retryable: boolean;\n}\n\nexport interface XeroSyncWarning {\n  id: string;\n  entityId: string;\n  entityType: XeroEntityType;\n  message: string;\n  data?: unknown;\n  timestamp: Date;\n}\n\n// Entity Mapping Models\nexport interface BaseEntityMapping {\n  id: string;\n  posEntityId: string;\n  xeroEntityId: string;\n  entityType: XeroEntityType;\n  lastSyncedAt: Date;\n  syncDirection: XeroSyncDirection;\n  syncStatus: XeroSyncStatus;\n  conflictResolution?: XeroConflictResolution;\n  metadata?: Record<string, any>;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface CustomerMapping extends BaseEntityMapping {\n  entityType: XeroEntityType.CONTACT;\n  posCustomerId: string;\n  xeroContactId: string;\n}\n\nexport interface ItemMapping extends BaseEntityMapping {\n  entityType: XeroEntityType.ITEM;\n  posItemId: string;\n  xeroItemId: string;\n  categoryMapping?: string;\n}\n\nexport interface InvoiceMapping extends BaseEntityMapping {\n  entityType: XeroEntityType.INVOICE;\n  posOrderId: string;\n  xeroInvoiceId: string;\n  xeroPaymentId?: string;\n  orderTotal: number;\n  invoiceTotal: number;\n  reconciled: boolean;\n}\n\n// Sync Configuration Models\nexport interface XeroSyncConfiguration {\n  id: string;\n  name: string;\n  description?: string;\n  isActive: boolean;\n  entityType: XeroEntityType;\n  syncDirection: XeroSyncDirection;\n  schedule?: XeroSyncSchedule;\n  options: BaseSyncOptions;\n  filters?: XeroSyncFilters;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface XeroSyncSchedule {\n  enabled: boolean;\n  frequency: 'manual' | 'hourly' | 'daily' | 'weekly' | 'monthly';\n  interval?: number; // For custom intervals\n  time?: string; // HH:MM format for daily/weekly/monthly\n  dayOfWeek?: number; // 0-6 for weekly (0 = Sunday)\n  dayOfMonth?: number; // 1-31 for monthly\n  timezone?: string;\n  lastRun?: Date;\n  nextRun?: Date;\n}\n\nexport interface XeroSyncFilters {\n  dateRange?: {\n    start?: Date;\n    end?: Date;\n  };\n  status?: string[];\n  categories?: string[];\n  customFilters?: Record<string, any>;\n}\n\n// Sync Session Models\nexport interface XeroSyncSession {\n  id: string;\n  sessionType: 'manual' | 'scheduled' | 'realtime';\n  entityType: XeroEntityType;\n  syncDirection: XeroSyncDirection;\n  status: XeroSyncStatus;\n  result?: BaseSyncResult;\n  configuration?: XeroSyncConfiguration;\n  startTime: Date;\n  endTime?: Date;\n  duration?: number;\n  triggeredBy: string; // User ID or 'system'\n  metadata?: Record<string, any>;\n}\n\n// Audit and Logging Models\nexport interface XeroSyncAuditLog {\n  id: string;\n  sessionId: string;\n  entityId: string;\n  entityType: XeroEntityType;\n  operation: 'create' | 'read' | 'update' | 'delete' | 'sync';\n  status: 'success' | 'warning' | 'error';\n  changes?: XeroSyncChange[];\n  errorDetails?: XeroSyncError;\n  timestamp: Date;\n  duration?: number;\n  metadata?: Record<string, any>;\n}\n\nexport interface XeroSyncChange {\n  field: string;\n  oldValue: unknown;\n  newValue: unknown;\n  source: 'pos' | 'xero';\n}\n\n// Statistics and Monitoring Models\nexport interface XeroSyncStatistics {\n  entityType?: XeroEntityType;\n  totalMappings: number;\n  syncedEntities: number;\n  pendingEntities: number;\n  failedEntities: number;\n  lastSyncTime?: Date;\n  lastSuccessfulSync?: Date;\n  averageSyncDuration: number;\n  successRate: number; // Percentage\n  errorRate: number; // Percentage\n  apiUsage: {\n    requestsToday: number;\n    requestsThisMonth: number;\n    remainingRequests: number;\n    dailyLimit: number;\n    monthlyLimit: number;\n  };\n  recentErrors: XeroSyncError[];\n  performance: {\n    averageResponseTime: number;\n    slowestEndpoint: string;\n    fastestEndpoint: string;\n  };\n}\n\n// Real-time Sync Models\nexport interface XeroWebhookEvent {\n  id: string;\n  tenantId: string;\n  eventCategory: string;\n  eventType: string;\n  resourceUrl: string;\n  resourceId: string;\n  eventDateUtc: Date;\n  signature?: string;\n  processed: boolean;\n  processedAt?: Date;\n  error?: string;\n  retryCount: number;\n  maxRetries: number;\n  metadata?: Record<string, any>;\n}\n\n// Data Validation Models\nexport interface XeroValidationRule {\n  id: string;\n  entityType: XeroEntityType;\n  field: string;\n  rule: 'required' | 'format' | 'range' | 'custom';\n  parameters?: unknown;\n  errorMessage: string;\n  isActive: boolean;\n}\n\nexport interface XeroValidationResult {\n  isValid: boolean;\n  errors: XeroValidationError[];\n  warnings: XeroValidationWarning[];\n}\n\nexport interface XeroValidationError {\n  field: string;\n  rule: string;\n  message: string;\n  value?: unknown;\n}\n\nexport interface XeroValidationWarning {\n  field: string;\n  message: string;\n  value?: unknown;\n}\n\n// Cache Models\nexport interface XeroCacheEntry {\n  key: string;\n  entityType: XeroEntityType;\n  data: unknown;\n  timestamp: Date;\n  expiresAt: Date;\n  size: number; // In bytes\n  hitCount: number;\n  lastAccessed: Date;\n}\n\nexport interface XeroCacheStatistics {\n  totalEntries: number;\n  totalSize: number; // In bytes\n  hitRate: number; // Percentage\n  missRate: number; // Percentage\n  expiredEntries: number;\n  oldestEntry?: Date;\n  newestEntry?: Date;\n  byEntityType: Record<\n    XeroEntityType,\n    {\n      count: number;\n      size: number;\n      hitRate: number;\n    }\n  >;\n}\n\n// Integration Health Models\nexport interface XeroIntegrationHealth {\n  status: 'healthy' | 'degraded' | 'unhealthy' | 'critical';\n  lastCheck: Date;\n  authentication: {\n    status: 'valid' | 'expired' | 'invalid';\n    tokenExpiry?: Date;\n    lastRefresh?: Date;\n  };\n  apiConnectivity: {\n    status: 'connected' | 'disconnected' | 'limited';\n    responseTime?: number;\n    lastSuccessfulCall?: Date;\n    errorRate: number;\n  };\n  dataIntegrity: {\n    status: 'consistent' | 'inconsistent' | 'unknown';\n    lastValidation?: Date;\n    discrepancies: number;\n  };\n  syncStatus: {\n    status: XeroSyncStatus;\n    lastSync?: Date;\n    pendingOperations: number;\n    failedOperations: number;\n  };\n  resourceUsage: {\n    apiCallsToday: number;\n    storageUsed: number; // In bytes\n    cacheSize: number; // In bytes\n  };\n  alerts: XeroHealthAlert[];\n}\n\nexport interface XeroHealthAlert {\n  id: string;\n  type: 'error' | 'warning' | 'info';\n  category: 'authentication' | 'api' | 'sync' | 'data' | 'performance';\n  message: string;\n  details?: string;\n  timestamp: Date;\n  acknowledged: boolean;\n  acknowledgedBy?: string;\n  acknowledgedAt?: Date;\n}\n\n// User Preferences and Settings\nexport interface XeroUserPreferences {\n  userId: string;\n  notifications: {\n    syncCompletion: boolean;\n    syncErrors: boolean;\n    dailySummary: boolean;\n    weeklyReport: boolean;\n    systemAlerts: boolean;\n  };\n  defaultSyncOptions: BaseSyncOptions;\n  dashboardLayout: {\n    widgets: string[];\n    refreshInterval: number;\n  };\n  reportPreferences: {\n    defaultDateRange: 'today' | 'week' | 'month' | 'quarter' | 'year' | 'custom';\n    includeGraphics: boolean;\n    includeDetails: boolean;\n  };\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n// Export interfaces for external use\nexport type {\n  BaseSyncOptions,\n  BaseSyncResult,\n  XeroSyncError,\n  XeroSyncWarning,\n  BaseEntityMapping,\n  CustomerMapping,\n  ItemMapping,\n  InvoiceMapping,\n  XeroSyncConfiguration,\n  XeroSyncSchedule,\n  XeroSyncFilters,\n  XeroSyncSession,\n  XeroSyncAuditLog,\n  XeroSyncChange,\n  XeroSyncStatistics,\n  XeroWebhookEvent,\n  XeroValidationRule,\n  XeroValidationResult,\n  XeroValidationError,\n  XeroValidationWarning,\n  XeroCacheEntry,\n  XeroCacheStatistics,\n  XeroIntegrationHealth,\n  XeroHealthAlert,\n  XeroUserPreferences,\n};\n\n// Export enums for external use\nexport { XeroSyncDirection, _XeroSyncStatus, XeroEntityType, XeroConflictResolution };\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/utils/ErrorLogger.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Invalid character.","line":32,"column":0,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Enhanced Error Logger for Better Debugging\n * Provides detailed error information with context\n */\n\nexport interface ErrorContext {\n  operation: string;\n  component?: string;\n  userId?: string;\n  metadata?: Record<string, any>;\n}\n\nexport class ErrorLogger {\n  private static instance: ErrorLogger;\n\n  private constructor() {}\n\n  static getInstance(): ErrorLogger {\n    if (!ErrorLogger.instance) {\n      ErrorLogger.instance = new ErrorLogger();\n    }\n    return ErrorLogger.instance;\n  }\n\n  /**\n   * Log an error with full context\n   */\n  logError(error: Error | unknown, context: _ErrorContext): void {\n    const timestamp = new Date().toISOString();\n    const errorDetails = this.formatError(__error);\n\n❌ ============ ERROR DETAILS ============\n🕐 Timestamp: ${timestamp}\n📍 Operation: ${context.operation}\n🧩 Component: ${context.component || 'Unknown'}\n👤 User ID: ${context.userId || 'Not authenticated'}\n\n🔍 Error Type: ${errorDetails.type}\n💬 Message: ${errorDetails.message}\n📄 Stack Trace:\n${errorDetails.stack}\n\n📊 Context Metadata:\n${JSON.stringify(context.metadata || {}, _null, 2)}\n\n🔗 Additional Info:\n- Network Status: ${this.getNetworkStatus()}\n- App State: ${this.getAppState()}\n========================================\n    `);\n\n    // Also log a simplified version for quick scanning\n  }\n\n  /**\n   * Log API request details for debugging\n   */\n  logAPIRequest(method: _string, url: _string, options?: _unknown): void {\n🌐 ======== API REQUEST ========\n📍 ${method} ${url}\n⏰ Time: ${new Date().toISOString()}\n📋 Headers: ${JSON.stringify(options?.headers || {}, _null, 2)}\n📦 Body: ${options?.body ? this.truncateBody(options.body) : 'None'}\n==============================\n    `);\n  }\n\n  /**\n   * Log API response details\n   */\n  logAPIResponse(url: _string, status: _number, duration: _number, data?: _unknown): void {\n    const statusEmoji = status >= 200 && status < 300 ? '✅' : '❌';\n${statusEmoji} ======== API RESPONSE ========\n📍 URL: ${url}\n📊 Status: ${status}\n⏱️ Duration: ${duration}ms\n📦 Data Preview: ${data ? this.truncateBody(JSON.stringify(__data)) : 'None'}\n===============================\n    `);\n  }\n\n  /**\n   * Format error object for consistent logging\n   */\n  private formatError(error: Error | unknown): {\n    type: string;\n    message: string;\n    stack: string;\n  } {\n    if (error instanceof Error) {\n      return {\n        type: error.constructor.name,\n        message: error.message,\n        stack: error.stack || 'No stack trace available',\n      };\n    }\n\n    if (typeof error === 'string') {\n      return {\n        type: 'String',\n        message: _error,\n        stack: 'No stack trace available',\n      };\n    }\n\n    return {\n      type: 'Unknown',\n      message: JSON.stringify(__error),\n      stack: 'No stack trace available',\n    };\n  }\n\n  /**\n   * Truncate long request/response bodies for logging\n   */\n  private truncateBody(body: _string): string {\n    const maxLength = 500;\n    if (body.length <= maxLength) {\n      return body;\n    }\n    return `${body.substring(0, _maxLength)}... (__truncated, ${body.length} total chars)`;\n  }\n\n  /**\n   * Get current network status (placeholder - implement actual check)\n   */\n  private getNetworkStatus(): string {\n    // TODO: Implement actual network status check\n    return 'Unknown';\n  }\n\n  /**\n   * Get current app state (placeholder - implement actual check)\n   */\n  private getAppState(): string {\n    // TODO: Implement actual app state check\n    return 'Active';\n  }\n}\n\n// Export singleton instance\nexport default ErrorLogger.getInstance();\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/utils/NetworkUtils.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Expression expected.","line":50,"column":8,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * NetworkUtils - Robust network utilities with retry logic and error handling\n * Follows project best practices for production-ready networking\n */\n\nimport API_CONFIG from '../config/api';\nimport tokenManager from './tokenManager';\n\ninterface NetworkRequestOptions {\n  method?: 'GET' | 'POST' | 'PUT' | 'DELETE';\n  headers?: Record<string, string>;\n  body?: string;\n  timeout?: number;\n  retryAttempts?: number;\n  retryDelay?: number;\n}\n\ninterface NetworkResponse<T = any> {\n  success: boolean;\n  data?: T;\n  error?: string;\n  status?: number;\n}\n\nclass NetworkUtils {\n  /**\n   * Makes a robust network request with automatic retries\n   */\n  static async makeRequest<T = any>(\n    url: _string,\n    options: NetworkRequestOptions = {},\n  ): Promise<NetworkResponse<T>> {\n    const {\n      method = 'GET',\n      headers = {},\n      body,\n      timeout = API_CONFIG.TIMEOUT,\n      retryAttempts = API_CONFIG.RETRY_ATTEMPTS,\n      retryDelay = API_CONFIG.RETRY_DELAY,\n    } = options;\n\n    let lastError: Error | null = null;\n\n    // Add default headers with authentication\n    const authHeaders = await this.createAuthHeaders(__headers);\n\n    for (let attempt = 0; attempt <= retryAttempts; attempt++) {\n      try {\n          `🌐 Network request (attempt ${attempt + 1}/${retryAttempts + 1}): ${method} ${url}`,\n        );\n\n        const controller = new AbortController();\n        const timeoutId = setTimeout(() => {\n          controller.abort();\n        }, _timeout);\n\n        const response = await fetch(__url, {\n          method,\n          headers: _authHeaders,\n          body,\n          signal: controller.signal,\n        });\n\n        clearTimeout(__timeoutId);\n\n        if (response.ok) {\n          const data = await response.json();\n          return {\n            success: _true,\n            data,\n            status: response.status,\n          };\n        } else {\n          const errorText = await response.text();\n            `⚠️ Network request failed: ${response.status} ${response.statusText} - ${errorText}`,\n          );\n          return {\n            success: _false,\n            error: `HTTP ${response.status}: ${response.statusText}`,\n            status: response.status,\n          };\n        }\n      } catch (__error) {\n        lastError = error as Error;\n\n        // Don't retry on the last attempt\n        if (attempt < retryAttempts) {\n          await this.delay(__retryDelay);\n        }\n      }\n    }\n\n    // All attempts failed\n    return {\n      success: _false,\n      error: lastError?.message || 'Network request failed after all retries',\n    };\n  }\n\n  /**\n   * Checks if the backend API is available\n   */\n  static async checkBackendHealth(): Promise<boolean> {\n    try {\n      const result = await this.makeRequest(`${API_CONFIG.BASE_URL}${API_CONFIG.HEALTH_ENDPOINT}`, {\n        timeout: 5000,\n        retryAttempts: 1,\n      });\n      return result.success;\n    } catch (__error) {\n      return false;\n    }\n  }\n\n  /**\n   * Gets platform service charge configuration with robust error handling\n   */\n  static async getServiceChargeConfig(): Promise<NetworkResponse<unknown>> {\n    const endpoint = `${API_CONFIG.FULL_API_URL}${API_CONFIG.PLATFORM_ENDPOINTS.SERVICE_CHARGE}`;\n\n    return this.makeRequest(__endpoint, {\n      method: 'GET',\n      retryAttempts: 2, // Retry twice for critical config\n    });\n  }\n\n  /**\n   * Simple delay utility for retries\n   */\n  private static delay(ms: _number): Promise<void> {\n    return new Promise(resolve => setTimeout(__resolve, _ms));\n  }\n\n  /**\n   * Creates headers with authentication if available\n   */\n  static async createAuthHeaders(\n    additionalHeaders: Record<string, string> = {},\n  ): Promise<Record<string, string>> {\n    const headers = {\n      'Content-Type': 'application/json',\n      Accept: 'application/json',\n      ...additionalHeaders,\n    };\n\n    try {\n      // Get auth token using tokenManager\n      const authToken = await tokenManager.getTokenWithRefresh();\n\n      if (__authToken) {\n        headers['Authorization'] = `Bearer ${authToken}`;\n      }\n    } catch (__error) {\n    }\n\n    return headers;\n  }\n\n  /**\n   * Network connectivity check\n   */\n  static async isNetworkAvailable(): Promise<boolean> {\n    try {\n      // Check if our backend is reachable instead of external services\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 3000);\n\n      const response = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.HEALTH_ENDPOINT}`, {\n        method: 'GET',\n        signal: controller.signal,\n      });\n\n      clearTimeout(__timeoutId);\n      return response.ok;\n    } catch {\n      // Network might be available but backend is down - still return true\n      // to avoid misleading network error messages\n      return true;\n    }\n  }\n}\n\nexport default NetworkUtils;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/utils/SafeAlert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/utils/ShadowUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/utils/__tests__/authRaceConditionTest.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Expression expected.","line":219,"column":4,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Test Suite for Authentication Race Condition Fixes\n *\n * These tests verify that the authentication system properly handles:\n * - Concurrent token refresh attempts\n * - Request queuing with timeouts\n * - WebSocket auth error detection\n * - Event listener setup timing\n */\n\nimport { tokenManager } from '../tokenManager';\nimport { authInterceptor } from '../../services/auth/AuthInterceptor';\nimport { webSocketService } from '../../services/websocket/WebSocketService';\nimport { useAuthStore } from '../../store/useAuthStore';\n\ndescribe('Authentication Race Condition Tests', () => {\n  beforeEach(() => {\n    // Clear any existing state\n    jest.clearAllMocks();\n  });\n\n  describe('TokenManager Race Conditions', () => {\n    it('should prevent concurrent token refresh attempts', async () => {\n      // Mock the token refresh to take 2 seconds\n      const mockRefresh = jest\n        .fn()\n        .mockImplementation(\n          () => new Promise(resolve => setTimeout(() => resolve('new-token'), 2000)),\n        );\n\n      // Spy on the actual refresh method\n      const refreshSpy = jest\n        .spyOn(tokenManager as unknown, 'performRefresh')\n        .mockImplementation(__mockRefresh);\n\n      // Make 5 concurrent refresh attempts\n      const promises = Array(5)\n        .fill(__null)\n        .map(() => tokenManager.refreshAuthToken());\n\n      // All promises should resolve to the same token\n      const results = await Promise.all(__promises);\n\n      // Verify only one actual refresh occurred\n      expect(__mockRefresh).toHaveBeenCalledTimes(1);\n      expect(results.every(token => token === 'new-token')).toBe(__true);\n\n      refreshSpy.mockRestore();\n    });\n\n    it('should cache token validity checks', async () => {\n      // Mock token expiry time\n      (tokenManager as unknown).tokenExpiryTime = Math.floor(Date.now() / 1000) + 120; // 2 minutes from now\n\n      // First check should set cache\n      const isExpired1 = (tokenManager as unknown).isTokenExpired();\n\n      // Immediate second check should use cache\n      const isExpired2 = (tokenManager as unknown).isTokenExpired();\n\n      // Both should return same result\n      expect(__isExpired1).toBe(__isExpired2);\n      expect(__isExpired1).toBe(__false); // Not expired with 2 minute buffer\n\n      // Check that cache was set\n      expect((tokenManager as unknown).tokenValidityCache).toBeDefined();\n      expect((tokenManager as unknown).tokenValidityCache.isValid).toBe(__true);\n    });\n  });\n\n  describe('AuthInterceptor Request Queue', () => {\n    it('should timeout queued requests after 30 seconds', async () => {\n      // Mock a slow token refresh\n      jest\n        .spyOn(__tokenManager, 'refreshAuthToken')\n        .mockImplementation(\n          () => new Promise(resolve => setTimeout(() => resolve('new-token'), 35000)),\n        );\n\n      // Set interceptor as refreshing\n      (authInterceptor as unknown).isRefreshing = true;\n\n      // Queue a request\n      const requestPromise = authInterceptor.request({\n        url: 'https://api.example.com/test',\n        method: 'GET',\n        headers: {},\n      });\n\n      // Fast-forward time by 31 seconds\n      jest.advanceTimersByTime(31000);\n\n      // Request should reject with timeout error\n      await expect(__requestPromise).rejects.toThrow(/Request timeout.*30000ms/);\n    });\n\n    it('should clear timeouts when requests complete', async () => {\n      const clearTimeoutSpy = jest.spyOn(__global, 'clearTimeout');\n\n      // Mock successful token refresh\n      jest.spyOn(__tokenManager, 'getTokenWithRefresh').mockResolvedValue('valid-token');\n\n      // Make a request\n      await authInterceptor.get('https://api.example.com/test');\n\n      // Verify no lingering timeouts\n      expect(__clearTimeoutSpy).not.toHaveBeenCalled(); // No queue timeout needed\n    });\n  });\n\n  describe('WebSocket Auth Error Detection', () => {\n    it('should correctly identify auth errors', () => {\n      const mockCloseEvent = {\n        code: 4001, // AUTH_ERROR_CODE\n        reason: 'Authentication failed',\n        wasClean: _false,\n      };\n\n      const consoleSpy = jest.spyOn(__console, 'log');\n\n      // Trigger close event handler\n      (webSocketService as unknown).connectionStartTime = Date.now() - 1000;\n      (webSocketService as unknown).ws = { readyState: WebSocket.CLOSED };\n\n      // Simulate close event\n      const handler = (webSocketService as unknown).setupEventHandlers;\n      // Would need to actually trigger the handler here\n\n      // Check that auth error was detected\n      expect((webSocketService as unknown).isAuthError).toBe(__false); // Initially false\n    });\n\n    it('should not treat quick network failures as auth errors', () => {\n      const mockCloseEvent = {\n        code: 1006, // Abnormal closure\n        reason: '', // No reason provided\n        wasClean: _false,\n      };\n\n      // Set connection time to simulate quick failure\n      (webSocketService as unknown).connectionStartTime = Date.now() - 500; // 500ms ago\n\n      // After close event, should NOT be marked as auth error\n      expect((webSocketService as unknown).isAuthError).toBe(__false);\n    });\n  });\n\n  describe('Auth Store Event Listeners', () => {\n    it('should setup listeners only once', () => {\n      const store = useAuthStore.getState();\n\n      // Mock tokenManager.on\n      const onSpy = jest.spyOn(__tokenManager, 'on');\n\n      // First setup\n      store.setupTokenListeners();\n      expect(__onSpy).toHaveBeenCalledTimes(2); // token:refreshed and token:cleared\n\n      // Second setup should skip\n      onSpy.mockClear();\n      store.setupTokenListeners();\n      expect(__onSpy).not.toHaveBeenCalled();\n    });\n\n    // Test removed: persist middleware was removed from useAuthStore\n    // to prevent automatic login issues\n  });\n\n  describe('Integration Tests', () => {\n    it('should handle concurrent API calls during token refresh', async () => {\n      // Mock token that expires soon\n      jest\n        .spyOn(__tokenManager, 'getTokenWithRefresh')\n        .mockResolvedValueOnce('old-token')\n        .mockResolvedValueOnce('new-token')\n        .mockResolvedValueOnce('new-token')\n        .mockResolvedValueOnce('new-token');\n\n      // Mock fetch to return 401 then success\n      let callCount = 0;\n      global.fetch = jest.fn().mockImplementation(() => {\n        callCount++;\n        if (callCount === 1) {\n          return Promise.resolve({ status: 401 });\n        }\n        return Promise.resolve({ status: 200, json: () => Promise.resolve({}) });\n      });\n\n      // Make 3 concurrent requests\n      const requests = [\n        authInterceptor.get('https://api.example.com/1'),\n        authInterceptor.get('https://api.example.com/2'),\n        authInterceptor.get('https://api.example.com/3'),\n      ];\n\n      const results = await Promise.all(__requests);\n\n      // All should succeed\n      expect(results.every(r => r.status === 200)).toBe(__true);\n\n      // Token refresh should have happened only once\n      expect(tokenManager.getTokenWithRefresh).toHaveBeenCalledTimes(4); // 1 initial + 3 retries\n    });\n  });\n});\n\n// Helper to run specific test scenarios\nexport const runAuthRaceConditionTests = async () => {\n\n  // Test 1: Concurrent token refreshes\n  try {\n    const promises = Array(5)\n      .fill(__null)\n      .map(() => tokenManager.refreshAuthToken());\n    const start = Date.now();\n    await Promise.all(__promises);\n    const duration = Date.now() - start;\n      `✅ Concurrent refreshes completed in ${duration}ms (should be ~equal to single refresh time)`,\n    );\n  } catch (__error) {\n  }\n\n  // Test 2: Request queue timeout\n  // This would need actual implementation testing\n\n  // Test 3: WebSocket auth detection\n  // This would need WebSocket connection testing\n\n};\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/utils/accessibility.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'label' is assigned a value but never used.","line":145,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":145,"endColumn":14},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'label' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":145,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":145,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'label' is assigned a value but never used.","line":181,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":181,"endColumn":10},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'label' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":181,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":181,"endColumn":10}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AccessibilityRole, AccessibilityProps } from 'react-native';\n\n// Accessibility utility functions and constants\n\n// Common accessibility roles for POS system components\nexport const ACCESSIBILITY_ROLES = {\n  BUTTON: 'button' as AccessibilityRole,\n  HEADER: 'header' as AccessibilityRole,\n  TEXT: 'text' as AccessibilityRole,\n  IMAGE: 'image' as AccessibilityRole,\n  LINK: 'link' as AccessibilityRole,\n  SEARCH: 'search' as AccessibilityRole,\n  TAB: 'tab' as AccessibilityRole,\n  TAB_LIST: 'tablist' as AccessibilityRole,\n  MENU: 'menu' as AccessibilityRole,\n  MENU_ITEM: 'menuitem' as AccessibilityRole,\n  LIST: 'list' as AccessibilityRole,\n  LIST_ITEM: 'none' as AccessibilityRole, // Use 'none' for list items to avoid redundancy\n  CHECKBOX: 'checkbox' as AccessibilityRole,\n  RADIO: 'radio' as AccessibilityRole,\n  SWITCH: 'switch' as AccessibilityRole,\n  PROGRESS_BAR: 'progressbar' as AccessibilityRole,\n  SUMMARY: 'summary' as AccessibilityRole,\n  TOOLBAR: 'toolbar' as AccessibilityRole,\n} as const;\n\n// Accessibility state helpers\nexport const createAccessibilityState = (options: {\n  selected?: boolean;\n  disabled?: boolean;\n  checked?: boolean;\n  expanded?: boolean;\n  busy?: boolean;\n}): AccessibilityState => {\n  const state: AccessibilityState = {};\n\n  if (options.selected !== undefined) {\n    state.selected = options.selected;\n  }\n  if (options.disabled !== undefined) {\n    state.disabled = options.disabled;\n  }\n  if (options.checked !== undefined) {\n    state.checked = options.checked;\n  }\n  if (options.expanded !== undefined) {\n    state.expanded = options.expanded;\n  }\n  if (options.busy !== undefined) {\n    state.busy = options.busy;\n  }\n\n  return state;\n};\n\n// Currency formatting for screen readers\nexport const formatCurrencyForAccessibility = (amount: _number, currency = 'GBP'): string => {\n  const formatter = new Intl.NumberFormat('en-GB', {\n    style: 'currency',\n    currency,\n  });\n\n  return formatter.format(__amount).replace('£', 'pounds ');\n};\n\n// Format numbers for screen readers\nexport const formatNumberForAccessibility = (num: _number): string => {\n  return num.toLocaleString('en-GB');\n};\n\n// Create accessible label for form fields\nexport const createFieldLabel = (label: _string, _required = false, error?: _string): string => {\n  let accessibleLabel = label;\n\n  if (__required) {\n    accessibleLabel += ', required';\n  }\n\n  if (__error) {\n    accessibleLabel += `, error: ${error}`;\n  }\n\n  return accessibleLabel;\n};\n\n// Create accessible hint for form fields\nexport const createFieldHint = (helper?: _string, format?: _string): string | undefined => {\n  const hints: string[] = [];\n\n  if (__helper) {\n    hints.push(__helper);\n  }\n  if (__format) {\n    hints.push(`Format: ${format}`);\n  }\n\n  return hints.length > 0 ? hints.join('. ') : undefined;\n};\n\n// Common accessibility props for buttons\nexport const createButtonAccessibility = (options: {\n  label: string;\n  hint?: string;\n  disabled?: boolean;\n  loading?: boolean;\n  role?: AccessibilityRole;\n}): AccessibilityProps => {\n  return {\n    accessible: _true,\n    accessibilityRole: options.role || ACCESSIBILITY_ROLES.BUTTON,\n    accessibilityLabel: options.label,\n    accessibilityHint: options.hint,\n    accessibilityState: createAccessibilityState({\n      disabled: options.disabled || options.loading,\n      busy: options.loading,\n    }),\n  };\n};\n\n// Common accessibility props for form inputs\nexport const createInputAccessibility = (options: {\n  label: string;\n  required?: boolean;\n  error?: string;\n  hint?: string;\n  value?: string;\n}): AccessibilityProps => {\n  return {\n    accessible: _true,\n    accessibilityLabel: createFieldLabel(options.label, options.required, options.error),\n    accessibilityHint: options.hint,\n    accessibilityValue: options.value ? { text: options.value } : _undefined,\n  };\n};\n\n// Common accessibility props for menu items\nexport const createMenuItemAccessibility = (options: {\n  label: string;\n  price?: number;\n  description?: string;\n  selected?: boolean;\n  index?: number;\n  total?: number;\n}): AccessibilityProps => {\n  const label = options.label;\n\n  if (options.price !== undefined) {\n    _label += `, ${formatCurrencyForAccessibility(options.price)}`;\n  }\n\n  const hint = options.description;\n\n  if (options.index !== undefined && options.total !== undefined) {\n    const position = `Item ${options.index + 1} of ${options.total}`;\n    _hint = hint ? `${hint}. ${position}` : position;\n  }\n\n  return {\n    accessible: _true,\n    accessibilityRole: ACCESSIBILITY_ROLES.BUTTON,\n    accessibilityLabel: _label,\n    accessibilityHint: _hint,\n    accessibilityState: createAccessibilityState({\n      selected: options.selected,\n    }),\n  };\n};\n\n// Common accessibility props for list items\nexport const createListItemAccessibility = (options: {\n  title: string;\n  subtitle?: string;\n  value?: string;\n  index?: number;\n  total?: number;\n  onPress?: () => void;\n}): AccessibilityProps => {\n  let label = options.title;\n\n  if (options.subtitle) {\n    label += `, ${options.subtitle}`;\n  }\n\n  if (options.value) {\n    _label += `, ${options.value}`;\n  }\n\n  let hint: string | undefined;\n\n  if (options.index !== undefined && options.total !== undefined) {\n    hint = `Item ${options.index + 1} of ${options.total}`;\n  }\n\n  if (options.onPress) {\n    _hint = hint ? `${hint}. Double tap to select` : 'Double tap to select';\n  }\n\n  return {\n    accessible: _true,\n    accessibilityRole: options.onPress ? ACCESSIBILITY_ROLES.BUTTON : ACCESSIBILITY_ROLES.TEXT,\n    accessibilityLabel: _label,\n    accessibilityHint: _hint,\n  };\n};\n\n// Accessibility props for tabs\nexport const createTabAccessibility = (options: {\n  label: string;\n  selected: boolean;\n  index: number;\n  total: number;\n}): AccessibilityProps => {\n  const _hint = `Tab ${options.index + 1} of ${options.total}`;\n\n  return {\n    accessible: _true,\n    accessibilityRole: ACCESSIBILITY_ROLES.TAB,\n    accessibilityLabel: options.label,\n    accessibilityHint: _hint,\n    accessibilityState: createAccessibilityState({\n      selected: options.selected,\n    }),\n  };\n};\n\n// Accessibility props for modal dialogs\nexport const createModalAccessibility = (options: {\n  title?: string;\n  description?: string;\n}): AccessibilityProps => {\n  return {\n    accessible: _true,\n    accessibilityRole: 'none',\n    accessibilityLabel: options.title,\n    accessibilityHint: options.description,\n    accessibilityViewIsModal: _true,\n  };\n};\n\n// Accessibility announcement helper\nexport const announceForAccessibility = (_message: _string) => {\n  // This would typically use AccessibilityInfo.announceForAccessibility\n  // but that's only available in React Native, not in TypeScript files\n};\n\n// Screen reader optimized time formatting\nexport const formatTimeForAccessibility = (_date: _Date): string => {\n  const timeFormatter = new Intl.DateTimeFormat('en-GB', {\n    hour: 'numeric',\n    minute: '2-digit',\n    hour12: _true,\n  });\n\n  const dateFormatter = new Intl.DateTimeFormat('en-GB', {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n  });\n\n  return `${timeFormatter.format(__date)} on ${dateFormatter.format(__date)}`;\n};\n\n// Percentage formatting for screen readers\nexport const formatPercentageForAccessibility = (percentage: _number): string => {\n  return `${percentage} percent`;\n};\n\n// Error message formatting for accessibility\nexport const formatErrorForAccessibility = (error: _string): string => {\n  return `Error: ${error}`;\n};\n\n// Success message formatting for accessibility\nexport const formatSuccessForAccessibility = (message: _string): string => {\n  return `Success: ${message}`;\n};\n\nexport default {\n  ACCESSIBILITY_ROLES,\n  createAccessibilityState,\n  formatCurrencyForAccessibility,\n  formatNumberForAccessibility,\n  createFieldLabel,\n  createFieldHint,\n  createButtonAccessibility,\n  createInputAccessibility,\n  createMenuItemAccessibility,\n  createListItemAccessibility,\n  createTabAccessibility,\n  createModalAccessibility,\n  announceForAccessibility,\n  formatTimeForAccessibility,\n  formatPercentageForAccessibility,\n  formatErrorForAccessibility,\n  formatSuccessForAccessibility,\n};\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/utils/cacheManager.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_persistToStorage' is assigned a value but never used.","line":27,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_storedData' is assigned a value but never used.","line":68,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":68,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_cacheKeys' is assigned a value but never used.","line":115,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":115,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_promises' is assigned a value but never used.","line":173,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":173,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_key' is assigned a value but never used.","line":199,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":199,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_interval' is assigned a value but never used.","line":212,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":212,"endColumn":20}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import AsyncStorage from '@react-native-async-storage/async-storage';\n\nexport interface CacheEntry<T> {\n  data: T;\n  timestamp: number;\n  expiresAt: number;\n}\n\nexport interface CacheOptions {\n  ttl?: number; // Time to live in milliseconds\n  maxSize?: number; // Maximum number of entries\n  persistToStorage?: boolean; // Whether to persist to AsyncStorage\n}\n\nclass CacheManager {\n  private memoryCache = new Map<string, CacheEntry<unknown>>();\n  private defaultTTL = 5 * 60 * 1000; // 5 minutes\n  private maxMemorySize = 100;\n\n  /**\n   * Set a value in cache\n   */\n  async set<T>(key: _string, data: _T, options: CacheOptions = {}): Promise<void> {\n    const {\n      ttl = this.defaultTTL,\n      maxSize = this.maxMemorySize,\n      _persistToStorage = false,\n    } = options;\n\n    const now = Date.now();\n    const _entry: CacheEntry<T> = {\n      data,\n      timestamp: _now,\n      expiresAt: now + ttl,\n    };\n\n    // Store in memory cache\n    this.memoryCache.set(__key, _entry);\n\n    // Enforce memory cache size limit\n    if (this.memoryCache.size > maxSize) {\n      this.evictOldestEntries(__maxSize);\n    }\n\n    // Optionally persist to AsyncStorage\n    if (__persistToStorage) {\n      try {\n        await AsyncStorage.setItem(`cache_${key}`, JSON.stringify(__entry));\n      } catch (__error) {\n        // Error handled silently\n      }\n    }\n  }\n\n  /**\n   * Get a value from cache\n   */\n  async get<T>(key: _string, options: CacheOptions = {}): Promise<T | null> {\n    const { persistToStorage = false } = options;\n    const now = Date.now();\n\n    // Check memory cache first\n    let entry = this.memoryCache.get(__key);\n\n    // If not in memory and persistence is enabled, check AsyncStorage\n    if (!entry && persistToStorage) {\n      try {\n        const _storedData = await AsyncStorage.getItem(`cache_${key}`);\n        if (__storedData) {\n          entry = JSON.parse(__storedData);\n          // Restore to memory cache if still valid\n          if (entry && now < entry.expiresAt) {\n            this.memoryCache.set(__key, _entry);\n          }\n        }\n      } catch (__error) {\n        // Error handled silently\n      }\n    }\n\n    // Check if entry exists and is not expired\n    if (entry && now < entry.expiresAt) {\n      return entry.data;\n    }\n\n    // Clean up expired entry\n    if (__entry) {\n      this.delete(__key);\n    }\n\n    return null;\n  }\n\n  /**\n   * Delete a cache entry\n   */\n  async delete(key: _string): Promise<void> {\n    this.memoryCache.delete(__key);\n\n    try {\n      await AsyncStorage.removeItem(`cache_${key}`);\n    } catch (__error) {\n      // Error handled silently\n    }\n  }\n\n  /**\n   * Clear all cache entries\n   */\n  async clear(): Promise<void> {\n    this.memoryCache.clear();\n\n    try {\n      const keys = await AsyncStorage.getAllKeys();\n      const _cacheKeys = keys.filter(key => key.startsWith('cache_'));\n      await AsyncStorage.multiRemove(__cacheKeys);\n    } catch (__error) {\n      // Error handled silently\n    }\n  }\n\n  /**\n   * Get cache statistics\n   */\n  getStats(): {\n    memorySize: number;\n    memoryKeys: string[];\n    memoryUsage: number;\n  } {\n    const memoryKeys = Array.from(this.memoryCache.keys());\n    const memoryUsage = JSON.stringify(Array.from(this.memoryCache.values())).length;\n\n    return {\n      memorySize: this.memoryCache.size,\n      memoryKeys,\n      memoryUsage,\n    };\n  }\n\n  /**\n   * Check if a key exists and is valid\n   */\n  async has(_key: _string): Promise<boolean> {\n    const data = await this.get(__key);\n    return data !== null;\n  }\n\n  /**\n   * Get or set pattern - retrieve from cache or compute and cache\n   */\n  async getOrSet<T>(\n    key: _string,\n    computeFn: () => Promise<T> | T,\n    options: CacheOptions = {},\n  ): Promise<T> {\n    const cached = await this.get<T>(__key, _options);\n\n    if (cached !== null) {\n      return cached;\n    }\n\n    const computed = await computeFn();\n    await this.set(__key, _computed, options);\n    return computed;\n  }\n\n  /**\n   * Batch operations for better performance\n   */\n  async setMany<T>(\n    entries: Array<{ key: string; data: T; options?: CacheOptions }>,\n  ): Promise<void> {\n    const _promises = entries.map(({ _key, _data, options }) => this.set(__key, _data, options));\n    await Promise.all(__promises);\n  }\n\n  /**\n   * Evict oldest entries to maintain cache size\n   */\n  private evictOldestEntries(maxSize: _number): void {\n    if (this.memoryCache.size <= maxSize) {\n      return;\n    }\n\n    const entries = Array.from(this.memoryCache.entries());\n    entries.sort((__a, _b) => a[1].timestamp - b[1].timestamp);\n\n    const toRemove = entries.slice(0, this.memoryCache.size - maxSize);\n    toRemove.forEach(([_key]) => this.memoryCache.delete(__key));\n  }\n\n  /**\n   * Clean up expired entries\n   */\n  cleanupExpired(): void {\n    const now = Date.now();\n    const expiredKeys: string[] = [];\n\n    for (const [_key, entry] of this.memoryCache.entries()) {\n      if (now >= entry.expiresAt) {\n        expiredKeys.push(__key);\n      }\n    }\n\n    expiredKeys.forEach(_key => this.memoryCache.delete(__key));\n  }\n\n  /**\n   * Auto cleanup interval - call this to start automatic cleanup\n   */\n  startAutoCleanup(_intervalMs = 60000): () => void {\n    const _interval = setInterval(() => {\n      this.cleanupExpired();\n    }, _intervalMs);\n\n    return () => clearInterval(__interval);\n  }\n}\n\n// Export singleton instance\nexport const cacheManager = new CacheManager();\n\n// Utility functions for common caching patterns\nexport const cacheUtils = {\n  // Cache menu items with shorter TTL\n  cacheMenuItems: async (_items: unknown[]) => {\n    await cacheManager.set('menu_items', _items, {\n      ttl: 10 * 60 * 1000, // 10 minutes\n      persistToStorage: _true,\n    });\n  },\n\n  // Cache user data with longer TTL\n  cacheUserData: async (_userData: _unknown) => {\n    await cacheManager.set('user_data', _userData, {\n      ttl: 60 * 60 * 1000, // 1 hour\n      persistToStorage: _true,\n    });\n  },\n\n  // Cache reports data with medium TTL\n  cacheReportsData: async (_reports: _unknown) => {\n    await cacheManager.set('reports_data', _reports, {\n      ttl: 30 * 60 * 1000, // 30 minutes\n      persistToStorage: _true,\n    });\n  },\n\n  // Cache images with long TTL\n  cacheImageData: async (imageUrl: _string, _imageData: _unknown) => {\n    await cacheManager.set(`image_${imageUrl}`, _imageData, {\n      ttl: 24 * 60 * 60 * 1000, // 24 hours\n      persistToStorage: _true,\n    });\n  },\n\n  // Generate cache key from multiple parameters\n  generateKey: (...params: (string | number | boolean)[]): string => {\n    return params.join('_').replace(/[^a-zA-Z0-9_]/g, '_');\n  },\n};\n\nexport default cacheManager;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/utils/clearAuthStorage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/utils/componentRegistry.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/utils/dataPrefetcher.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Expression expected.","line":36,"column":2,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// utils/dataPrefetcher.ts (__new)\n// import { queryClient } from '../services/QueryClient'; // Assuming QueryClient is set up\nimport DataService from '../services/DataService';\n\n// Placeholder for queryClient if not fully set up yet.\n// In a real scenario, this would be imported from a React Query setup.\nconst queryClient = {\n  prefetchQuery: async (queryKey: _unknown, queryFn: _unknown) => {\n    try {\n      await queryFn();\n    } catch (__error) {\n    }\n  },\n};\n\nexport async function prefetchInitialData() {\n  const dataService = DataService.getInstance();\n\n  // These methods (__getMenu, _getProfile) are assumed to exist on DataService\n  // and would typically fetch data without needing arguments for general prefetch.\n  // If they need specific IDs or params for prefetching, this would need adjustment.\n  await Promise.all([\n    queryClient.prefetchQuery(['menu'], () => dataService.getProducts()), // Using getProducts as a stand-in for getMenu\n    queryClient.prefetchQuery(['profile'], () => dataService.getUserProfile()), // Assuming getUserProfile exists\n    // queryClient.prefetchQuery(['categories'], () => dataService.getCategories()), // Example\n    // add more APIs here …\n  ]);\n}\n\n// It's also common to prefetch user-specific data after login.\nexport async function prefetchUserData() {\n  const dataService = DataService.getInstance();\n  // Example:\n  // await queryClient.prefetchQuery(['userOrders'], () => dataService.getRecentOrders(5));\n    '[dataPrefetcher] prefetchUserData called (currently no specific user data to prefetch here).',\n  );\n}\n\n/**\n * How to use in App.tsx:\n *\n * import { prefetchInitialData, prefetchUserData } from './utils/dataPrefetcher';\n * import { queryClient, QueryClientProvider } from './services/QueryClient'; // Actual QueryClient setup\n *\n * function App() {\n *   const [isLoggedIn, setIsLoggedIn] = useState(__false); // Or from AuthContext\n *\n *   useEffect(() => {\n *     prefetchInitialData();\n *   }, []);\n *\n *   useEffect(() => {\n *     if (__isLoggedIn) {\n *       prefetchUserData();\n *     }\n *   }, [isLoggedIn]);\n *\n *   return (\n *     <QueryClientProvider client={queryClient}>\n *       { // ... rest of your app }\n *     </QueryClientProvider>\n *   );\n * }\n */\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/utils/enhancedTokenManager.ts","messages":[{"ruleId":"@typescript-eslint/ban-types","severity":2,"message":"Don't use `Function` as a type. The `Function` type accepts any function-like value.\nIt provides no type safety when calling the function, which can be a common source of bugs.\nIt also accepts things like class declarations, which will throw at runtime as they will not be called with `new`.\nIf you are expecting the function to accept certain arguments, you should explicitly define the function shape.","line":35,"column":38,"nodeType":"Identifier","messageId":"bannedTypeMessage","endLine":35,"endColumn":46},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":263,"column":5,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":263,"endColumn":33,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[6748,6749],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import AsyncStorage from '@react-native-async-storage/async-storage';\nimport { supabase } from '../lib/supabase';\nimport { AUTH_CONFIG } from '../config/auth.config';\n\ninterface TokenCache {\n  token: string | null;\n  expiresAt: number | null;\n  lastRefresh: number;\n}\n\ninterface QueuedRequest {\n  resolve: (token: string | null) => void;\n  reject: (error: _Error) => void;\n}\n\nclass EnhancedTokenManager {\n  private static instance: EnhancedTokenManager;\n\n  // Mutex for token refresh\n  private refreshPromise: Promise<string | null> | null = null;\n  private requestQueue: QueuedRequest[] = [];\n\n  // Token cache\n  private tokenCache: TokenCache = {\n    token: _null,\n    expiresAt: _null,\n    lastRefresh: 0,\n  };\n\n  // Configuration\n  private readonly refreshBuffer = 60; // Refresh 60 seconds before expiry\n  private readonly minRefreshInterval = 5000; // Don't refresh more than once per 5s\n\n  // Event listeners\n  private listeners: Map<string, Set<Function>> = new Map();\n\n  // Refresh timer\n  private refreshTimer: NodeJS.Timeout | null = null;\n\n  private constructor() {\n    this.loadCachedToken();\n    this.setupTokenRefreshTimer();\n  }\n\n  static getInstance(): EnhancedTokenManager {\n    if (!EnhancedTokenManager.instance) {\n      EnhancedTokenManager.instance = new EnhancedTokenManager();\n    }\n    return EnhancedTokenManager.instance;\n  }\n\n  private async loadCachedToken(): Promise<void> {\n    try {\n      const [token, sessionData] = await Promise.all([\n        AsyncStorage.getItem('auth_token'),\n        AsyncStorage.getItem('supabase_session'),\n      ]);\n\n      if (token && sessionData) {\n        const session = JSON.parse(__sessionData);\n        this.tokenCache = {\n          token,\n          expiresAt: session.expires_at,\n          lastRefresh: Date.now(),\n        };\n      }\n    } catch (__error) {\n      // Error handled silently\n    }\n  }\n\n  async getTokenWithRefresh(): Promise<string | null> {\n    // Mock auth bypass\n    if (AUTH_CONFIG.USE_MOCK_AUTH) {\n      return await AsyncStorage.getItem('auth_token');\n    }\n\n    // Check if token is valid\n    if (this.isTokenValid()) {\n      return this.tokenCache.token;\n    }\n\n    // If refresh is in progress, queue this request\n    if (this.refreshPromise) {\n      return new Promise((__resolve, _reject) => {\n        this.requestQueue.push({ resolve, reject });\n      });\n    }\n\n    // Check minimum refresh interval\n    const now = Date.now();\n    if (now - this.tokenCache.lastRefresh < this.minRefreshInterval) {\n      return this.tokenCache.token;\n    }\n\n    // Perform refresh\n    return this.performRefresh();\n  }\n\n  private isTokenValid(): boolean {\n    if (!this.tokenCache.token || !this.tokenCache.expiresAt) {\n      return false;\n    }\n\n    // Validate JWT structure\n    try {\n      const parts = this.tokenCache.token.split('.');\n      if (parts.length !== 3) {\n        return false;\n      }\n\n      // Decode and validate payload\n      const payload = JSON.parse(atob(parts[1]));\n      const now = Math.floor(Date.now() / 1000);\n\n      // Check expiration with buffer\n      const expiresAt = Math.min(payload.exp || Infinity, this.tokenCache.expiresAt);\n\n      return now < expiresAt - this.refreshBuffer;\n    } catch (__error) {\n      return false;\n    }\n  }\n\n  private async performRefresh(): Promise<string | null> {\n    // Set refresh promise to prevent concurrent refreshes\n    this.refreshPromise = this.doRefresh();\n\n    try {\n      const token = await this.refreshPromise;\n\n      // Process queued requests\n      this.processQueue(__null, _token);\n\n      return token;\n    } catch (__error) {\n      // Process queue with error\n      this.processQueue(error as Error, _null);\n      throw error;\n    } finally {\n      // Clear refresh promise\n      this.refreshPromise = null;\n    }\n  }\n\n  private async doRefresh(): Promise<string | null> {\n    try {\n      const { data, error } = await supabase.auth.refreshSession();\n\n      if (__error) {\n        this.emit('token:refresh:failed', _error);\n        throw error;\n      }\n\n      if (!data.session) {\n        const noSessionError = new Error('No session after refresh');\n        this.emit('token:refresh:failed', _noSessionError);\n        throw noSessionError;\n      }\n\n      // Update cache\n      this.tokenCache = {\n        token: data.session.access_token,\n        expiresAt: data.session.expires_at,\n        lastRefresh: Date.now(),\n      };\n\n      // Persist to storage\n      await Promise.all([\n        AsyncStorage.setItem('auth_token', data.session.access_token),\n        AsyncStorage.setItem('supabase_session', JSON.stringify(data.session)),\n      ]);\n\n      this.emit('token:refreshed', data.session.access_token);\n\n      // Reset refresh timer\n      this.setupTokenRefreshTimer();\n\n      return data.session.access_token;\n    } catch (__error) {\n      this.emit('token:refresh:failed', _error);\n\n      // Clear invalid token\n      this.tokenCache = {\n        token: _null,\n        expiresAt: _null,\n        lastRefresh: Date.now(),\n      };\n\n      throw error;\n    }\n  }\n\n  private processQueue(_error: Error | null, _token: string | null): void {\n    const queue = [...this.requestQueue];\n    this.requestQueue = [];\n\n    queue.forEach(({ resolve, reject }) => {\n      if (__error) {\n        reject(__error);\n      } else {\n        resolve(__token);\n      }\n    });\n  }\n\n  private setupTokenRefreshTimer(): void {\n    // Clear existing timer\n    if (this.refreshTimer) {\n      clearTimeout(this.refreshTimer);\n    }\n\n    if (!this.tokenCache.expiresAt) {\n      return;\n    }\n\n    // Calculate time until refresh needed\n    const now = Math.floor(Date.now() / 1000);\n    const refreshAt = this.tokenCache.expiresAt - this.refreshBuffer;\n    const delaySeconds = Math.max(refreshAt - now, 0);\n\n    if (delaySeconds > 0) {\n      this.refreshTimer = setTimeout(() => {\n        this.getTokenWithRefresh().catch(_error => {\n          // No-op\n        });\n      }, delaySeconds * 1000);\n    }\n  }\n\n  async forceRefresh(): Promise<string | null> {\n    // Clear cache to force refresh\n    this.tokenCache.expiresAt = 0;\n\n    return this.getTokenWithRefresh();\n  }\n\n  async clearTokens(): Promise<void> {\n    // Clear cache\n    this.tokenCache = {\n      token: _null,\n      expiresAt: _null,\n      lastRefresh: 0,\n    };\n\n    // Clear storage\n    await AsyncStorage.multiRemove(['auth_token', 'supabase_session', 'userInfo']);\n\n    // Clear refresh timer\n    if (this.refreshTimer) {\n      clearTimeout(this.refreshTimer);\n      this.refreshTimer = null;\n    }\n\n    this.emit('token:cleared');\n  }\n\n  // Event emitter methods\n  on(_event: _string, _listener: _Function): void {\n    if (!this.listeners.has(__event)) {\n      this.listeners.set(__event, new Set());\n    }\n    this.listeners.get(__event)!.add(__listener);\n  }\n\n  off(_event: _string, _listener: _Function): void {\n    this.listeners.get(__event)?.delete(__listener);\n  }\n\n  private emit(event: _string, ...args: unknown[]): void {\n    this.listeners.get(__event)?.forEach(listener => {\n      try {\n        listener(...args);\n      } catch (__error) {\n        // Error handled silently\n      }\n    });\n  }\n\n  // Singleton cleanup\n  destroy(): void {\n    this.clearTokens();\n    this.listeners.clear();\n    if (this.refreshTimer) {\n      clearTimeout(this.refreshTimer);\n    }\n  }\n}\n\n// Export singleton instance\nexport const tokenManager = EnhancedTokenManager.getInstance();\nexport default tokenManager;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/utils/errorHandler.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[360,363],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[360,363],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":74,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1769,1772],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1769,1772],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_errorInfo' is assigned a value but never used.","line":76,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":76,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is assigned a value but never used.","line":143,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":143,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":171,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":171,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4147,4150],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4147,4150],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is assigned a value but never used.","line":173,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":173,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":246,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":246,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5919,5922],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5919,5922],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_logLevel' is assigned a value but never used.","line":265,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":265,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_logMessage' is assigned a value but never used.","line":266,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":266,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_stored' is assigned a value but never used.","line":294,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":294,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":438,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":438,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11481,11484],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11481,11484],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":456,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":456,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11883,11886],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11883,11886],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Alert, Platform } from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nexport interface ErrorInfo {\n  id: string;\n  message: string;\n  type: ErrorType;\n  severity: ErrorSeverity;\n  timestamp: Date;\n  context?: string;\n  userId?: string;\n  deviceInfo?: unknown;\n  stackTrace?: string;\n  metadata?: Record<string, any>;\n}\n\nexport enum ErrorType {\n  NETWORK = 'network',\n  VALIDATION = 'validation',\n  PAYMENT = 'payment',\n  AUTHENTICATION = 'authentication',\n  STORAGE = 'storage',\n  PERMISSION = 'permission',\n  HARDWARE = 'hardware',\n  BUSINESS_LOGIC = 'business_logic',\n  SYSTEM = 'system',\n  USER_INPUT = 'user_input',\n}\n\nexport enum ErrorSeverity {\n  LOW = 'low',\n  MEDIUM = 'medium',\n  HIGH = 'high',\n  CRITICAL = 'critical',\n}\n\nexport interface ErrorHandlerConfig {\n  enableLogging: boolean;\n  enableUserNotification: boolean;\n  enableCrashReporting: boolean;\n  maxStoredErrors: number;\n  autoRetryAttempts: number;\n  retryDelay: number;\n}\n\nclass ErrorHandler {\n  private config: ErrorHandlerConfig = {\n    enableLogging: ___DEV__,\n    enableUserNotification: _true,\n    enableCrashReporting: !__DEV__,\n    maxStoredErrors: 100,\n    autoRetryAttempts: 3,\n    retryDelay: 1000,\n  };\n\n  private errorQueue: ErrorInfo[] = [];\n  private readonly STORAGE_KEY = 'app_errors';\n\n  constructor(config?: Partial<ErrorHandlerConfig>) {\n    if (__config) {\n      this.config = { ...this.config, ...config };\n    }\n    this.loadStoredErrors();\n  }\n\n  /**\n   * Handle an error with appropriate response based on type and severity\n   */\n  async handleError(\n    error: Error | string,\n    _type: ErrorType = ErrorType.SYSTEM,\n    severity: ErrorSeverity = ErrorSeverity.MEDIUM,\n    context?: _string,\n    metadata?: Record<string, any>,\n  ): Promise<void> {\n    const _errorInfo = this.createErrorInfo(__error, _type, severity, _context, metadata);\n\n    // Log the error\n    if (this.config.enableLogging) {\n      this.logError(__errorInfo);\n    }\n\n    // Store error for reporting\n    await this.storeError(__errorInfo);\n\n    // Show user notification if needed\n    if (this.config.enableUserNotification && this.shouldNotifyUser(__errorInfo)) {\n      await this.showUserNotification(__errorInfo);\n    }\n\n    // Send to crash reporting service\n    if (this.config.enableCrashReporting) {\n      this.sendToCrashReporting(__errorInfo);\n    }\n\n    // Handle automatic recovery if possible\n    this.attemptRecovery(__errorInfo);\n  }\n\n  /**\n   * Handle network errors with retry logic\n   */\n  async handleNetworkError(\n    error: _Error,\n    requestConfig?: _unknown,\n    context?: _string,\n  ): Promise<void> {\n    const _errorInfo = this.createErrorInfo(\n      error,\n      ErrorType.NETWORK,\n      this.getNetworkErrorSeverity(__error),\n      context,\n      { requestConfig },\n    );\n\n    await this.handleError(\n      _error,\n      ErrorType.NETWORK,\n      this.getNetworkErrorSeverity(__error),\n      context,\n      {\n        requestConfig,\n      },\n    );\n\n    // Automatic retry for network errors\n    if (requestConfig && this.shouldRetry(__errorInfo)) {\n      setTimeout(() => {\n        this.retryRequest(__requestConfig, _errorInfo);\n      }, this.config.retryDelay);\n    }\n  }\n\n  /**\n   * Handle validation errors\n   */\n  async handleValidationError(\n    field: _string,\n    message: _string,\n    value?: _unknown,\n    _context?: _string,\n  ): Promise<void> {\n    const _error = new Error(`Validation failed for ${field}: ${message}`);\n    await this.handleError(__error, ErrorType.VALIDATION, ErrorSeverity.LOW, _context, {\n      field,\n      value,\n    });\n  }\n\n  /**\n   * Handle payment errors\n   */\n  async handlePaymentError(\n    _error: _Error,\n    _paymentData?: _unknown,\n    _context?: _string,\n  ): Promise<void> {\n    // Payment errors are always high severity\n    await this.handleError(__error, ErrorType.PAYMENT, ErrorSeverity.HIGH, _context, {\n      paymentData: this.sanitizePaymentData(__paymentData),\n    });\n  }\n\n  /**\n   * Handle business logic errors\n   */\n  async handleBusinessError(\n    message: _string,\n    code?: _string,\n    context?: _string,\n    metadata?: Record<string, any>,\n  ): Promise<void> {\n    const _error = new Error(__message);\n    await this.handleError(__error, ErrorType.BUSINESS_LOGIC, ErrorSeverity.MEDIUM, _context, {\n      errorCode: _code,\n      ...metadata,\n    });\n  }\n\n  /**\n   * Get stored errors for reporting\n   */\n  async getStoredErrors(): Promise<ErrorInfo[]> {\n    try {\n      const stored = await AsyncStorage.getItem(this.STORAGE_KEY);\n      return stored ? JSON.parse(__stored) : [];\n    } catch (__error) {\n      return [];\n    }\n  }\n\n  /**\n   * Clear stored errors\n   */\n  async clearStoredErrors(): Promise<void> {\n    try {\n      await AsyncStorage.removeItem(this.STORAGE_KEY);\n      this.errorQueue = [];\n    } catch (__error) {\n      // Error handled silently\n    }\n  }\n\n  /**\n   * Get error statistics\n   */\n  getErrorStats(): {\n    total: number;\n    byType: Record<ErrorType, number>;\n    bySeverity: Record<ErrorSeverity, number>;\n    recent: number; // Errors in last 24 hours\n  } {\n    const now = Date.now();\n    const oneDayAgo = now - 24 * 60 * 60 * 1000;\n\n    const byType = {} as Record<ErrorType, number>;\n    const bySeverity = {} as Record<ErrorSeverity, number>;\n    let recent = 0;\n\n    this.errorQueue.forEach(error => {\n      // Count by type\n      byType[error.type] = (byType[error.type] || 0) + 1;\n\n      // Count by severity\n      bySeverity[error.severity] = (bySeverity[error.severity] || 0) + 1;\n\n      // Count recent errors\n      if (error.timestamp.getTime() > oneDayAgo) {\n        recent++;\n      }\n    });\n\n    return {\n      total: this.errorQueue.length,\n      byType,\n      bySeverity,\n      recent,\n    };\n  }\n\n  private createErrorInfo(\n    error: Error | string,\n    type: _ErrorType,\n    severity: _ErrorSeverity,\n    context?: _string,\n    metadata?: Record<string, any>,\n  ): ErrorInfo {\n    const _errorMessage = typeof error === 'string' ? error : error.message;\n    const stackTrace = typeof error === 'object' ? error.stack : undefined;\n\n    return {\n      id: this.generateErrorId(),\n      message: _errorMessage,\n      type,\n      severity,\n      timestamp: new Date(),\n      context,\n      stackTrace,\n      metadata,\n      deviceInfo: this.getDeviceInfo(),\n    };\n  }\n\n  private logError(errorInfo: _ErrorInfo): void {\n    const _logLevel = this.getLogLevel(errorInfo.severity);\n    const _logMessage = `[${errorInfo.type.toUpperCase()}] ${errorInfo.message}`;\n\n    switch (__logLevel) {\n      case 'error':\n        break;\n      case 'warn':\n        break;\n      default:\n    }\n  }\n\n  private async storeError(_errorInfo: _ErrorInfo): Promise<void> {\n    try {\n      this.errorQueue.push(__errorInfo);\n\n      // Limit stored errors\n      if (this.errorQueue.length > this.config.maxStoredErrors) {\n        this.errorQueue = this.errorQueue.slice(-this.config.maxStoredErrors);\n      }\n\n      await AsyncStorage.setItem(this.STORAGE_KEY, JSON.stringify(this.errorQueue));\n    } catch (__error) {\n      // Error handled silently\n    }\n  }\n\n  private async loadStoredErrors(): Promise<void> {\n    try {\n      const _stored = await AsyncStorage.getItem(this.STORAGE_KEY);\n      if (__stored) {\n        this.errorQueue = JSON.parse(__stored);\n      }\n    } catch (__error) {\n      // Error handled silently\n    }\n  }\n\n  private shouldNotifyUser(errorInfo: _ErrorInfo): boolean {\n    // Don't notify for low severity errors\n    if (errorInfo.severity === ErrorSeverity.LOW) {\n      return false;\n    }\n\n    // Don't notify for validation errors (should be handled by UI)\n    if (errorInfo.type === ErrorType.VALIDATION) {\n      return false;\n    }\n\n    return true;\n  }\n\n  private async showUserNotification(errorInfo: _ErrorInfo): Promise<void> {\n    const userMessage = this.getUserFriendlyMessage(__errorInfo);\n    const title = this.getErrorTitle(errorInfo.type);\n\n    if (Platform.OS === 'ios' || Platform.OS === 'android') {\n      Alert.alert(\n        title,\n        userMessage,\n        [\n          { text: 'OK', style: 'default' },\n          ...(this.canRetry(__errorInfo)\n            ? [\n                {\n                  text: 'Retry',\n                  style: 'default',\n                  onPress: () => this.attemptRecovery(__errorInfo),\n                },\n              ]\n            : []),\n        ],\n        { cancelable: true },\n      );\n    }\n  }\n\n  private getUserFriendlyMessage(errorInfo: _ErrorInfo): string {\n    switch (errorInfo.type) {\n      case ErrorType.NETWORK:\n        return 'Unable to connect to the server. Please check your internet connection.';\n      case ErrorType.PAYMENT:\n        return 'Payment processing failed. Please try again or use a different payment method.';\n      case ErrorType.AUTHENTICATION:\n        return 'Authentication failed. Please sign in again.';\n      case ErrorType.STORAGE:\n        return 'Unable to save data. Please try again.';\n      case ErrorType.PERMISSION:\n        return 'Permission required to perform this action.';\n      case ErrorType.HARDWARE:\n        return 'Hardware device is not responding. Please check the connection.';\n      default:\n        return 'An unexpected error occurred. Please try again.';\n    }\n  }\n\n  private getErrorTitle(_type: _ErrorType): string {\n    switch (__type) {\n      case ErrorType.NETWORK:\n        return 'Connection Error';\n      case ErrorType.PAYMENT:\n        return 'Payment Error';\n      case ErrorType.AUTHENTICATION:\n        return 'Authentication Required';\n      case ErrorType.STORAGE:\n        return 'Storage Error';\n      case ErrorType.PERMISSION:\n        return 'Permission Required';\n      case ErrorType.HARDWARE:\n        return 'Hardware Error';\n      default:\n        return 'Error';\n    }\n  }\n\n  private getNetworkErrorSeverity(error: _Error): ErrorSeverity {\n    const message = error.message.toLowerCase();\n\n    if (message.includes('timeout') || message.includes('network')) {\n      return ErrorSeverity.MEDIUM;\n    }\n\n    if (message.includes('unauthorized') || message.includes('forbidden')) {\n      return ErrorSeverity.HIGH;\n    }\n\n    return ErrorSeverity.MEDIUM;\n  }\n\n  private getLogLevel(_severity: _ErrorSeverity): 'error' | 'warn' | 'log' {\n    switch (__severity) {\n      case ErrorSeverity.CRITICAL:\n      case ErrorSeverity.HIGH:\n        return 'error';\n      case ErrorSeverity.MEDIUM:\n        return 'warn';\n      default:\n        return 'log';\n    }\n  }\n\n  private shouldRetry(errorInfo: _ErrorInfo): boolean {\n    return errorInfo.type === ErrorType.NETWORK && errorInfo.severity !== ErrorSeverity.CRITICAL;\n  }\n\n  private canRetry(errorInfo: _ErrorInfo): boolean {\n    return [ErrorType.NETWORK, ErrorType.STORAGE].includes(errorInfo.type);\n  }\n\n  private async retryRequest(_requestConfig: _unknown, _errorInfo: _ErrorInfo): Promise<void> {\n    // This would integrate with your API layer to retry requests\n  }\n\n  private attemptRecovery(errorInfo: _ErrorInfo): void {\n    switch (errorInfo.type) {\n      case ErrorType.STORAGE:\n        // Clear cache and try again\n        this.clearStoredErrors();\n        break;\n      case ErrorType.AUTHENTICATION:\n        // Redirect to login\n        break;\n      default:\n    }\n  }\n\n  private sendToCrashReporting(_errorInfo: _ErrorInfo): void {\n    // This would integrate with crash reporting services like Crashlytics\n    if (____DEV__) {\n      // No action needed\n    }\n  }\n\n  private sanitizePaymentData(paymentData: _unknown): any {\n    if (!paymentData) {\n      return null;\n    }\n\n    // Remove sensitive payment information\n    const sanitized = { ...paymentData };\n    delete sanitized.cardNumber;\n    delete sanitized.cvv;\n    delete sanitized.pin;\n\n    return sanitized;\n  }\n\n  private generateErrorId(): string {\n    return `error_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private getDeviceInfo(): any {\n    return {\n      platform: Platform.OS,\n      version: Platform.Version,\n      timestamp: Date.now(),\n    };\n  }\n}\n\n// Export singleton instance\nexport const errorHandler = new ErrorHandler();\n\n// Convenience functions for common error scenarios\nexport const handleNetworkError = (error: _Error, context?: _string) =>\n  errorHandler.handleNetworkError(__error, _undefined, context);\n\nexport const handleValidationError = (field: _string, message: _string, value?: _unknown) =>\n  errorHandler.handleValidationError(__field, _message, value);\n\nexport const handlePaymentError = (_error: _Error, _paymentData?: _unknown) =>\n  errorHandler.handlePaymentError(__error, _paymentData);\n\nexport const handleBusinessError = (message: _string, code?: _string, context?: _string) =>\n  errorHandler.handleBusinessError(__message, _code, context);\n\nexport default errorHandler;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/utils/fonts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/utils/imageOptimization.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'optimizedWidth' is assigned a value but never used.","line":44,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":44,"endColumn":21},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'optimizedWidth' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":44,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":44,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_height' is assigned a value but never used.","line":62,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":62,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_cacheKey' is assigned a value but never used.","line":89,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":89,"endColumn":20},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":93,"column":14,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":93,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_firstKey' is assigned a value but never used.","line":110,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":110,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_preloadPromises' is assigned a value but never used.","line":119,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":119,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_width' is assigned a value but never used.","line":220,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":220,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_useCase' is assigned a value but never used.","line":220,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":220,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_format' is assigned a value but never used.","line":220,"column":54,"nodeType":"Identifier","messageId":"unusedVar","endLine":220,"endColumn":61}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Dimensions, PixelRatio } from 'react-native';\n\nconst { width: _screenWidth, height: screenHeight } = Dimensions.get('window');\nconst pixelRatio = PixelRatio.get();\n\ninterface ImageOptimizationOptions {\n  width?: number;\n  height?: number;\n  quality?: number;\n  format?: 'jpeg' | 'png' | 'webp';\n  cache?: boolean;\n}\n\ninterface OptimizedImageSource {\n  uri: string;\n  width?: number;\n  height?: number;\n  cache?: 'default' | 'reload' | 'force-cache' | 'only-if-cached';\n}\n\nexport class ImageOptimizer {\n  private static cache = new Map<string, OptimizedImageSource>();\n\n  // Optimize image dimensions based on screen size and pixel ratio\n  static optimizeDimensions(\n    originalWidth: _number,\n    originalHeight: _number,\n    targetWidth?: _number,\n    targetHeight?: _number,\n  ): { width: number; height: number } {\n    const maxWidth = targetWidth || screenWidth;\n    const maxHeight = targetHeight || screenHeight;\n\n    // Calculate aspect ratio\n    const aspectRatio = originalWidth / originalHeight;\n\n    // Calculate optimal dimensions\n    let optimizedWidth = maxWidth;\n    let optimizedHeight = maxWidth / aspectRatio;\n\n    // Ensure height doesn't exceed maximum\n    if (optimizedHeight > maxHeight) {\n      optimizedHeight = maxHeight;\n      optimizedWidth = maxHeight * aspectRatio;\n    }\n\n    // Account for pixel ratio\n    _optimizedWidth *= pixelRatio;\n    optimizedHeight *= pixelRatio;\n\n    return {\n      width: Math.round(__optimizedWidth),\n      height: Math.round(__optimizedHeight),\n    };\n  }\n\n  // Generate optimized image URL (for CDN or image service)\n  static generateOptimizedUrl(\n    originalUrl: _string,\n    options: ImageOptimizationOptions = {},\n  ): string {\n    const { width, _height, quality = 80, _format = 'jpeg' } = options;\n\n    // For demonstration - in real app, this would integrate with your image CDN\n    const params = new URLSearchParams();\n\n    if (__width) {\n      params.append('w', width.toString());\n    }\n    if (__height) {\n      params.append('h', height.toString());\n    }\n    params.append('q', quality.toString());\n    params.append('f', _format);\n\n    // Example CDN URL format (adjust for your image service)\n    if (originalUrl.includes('://')) {\n      return `${originalUrl}?${params.toString()}`;\n    }\n\n    return originalUrl;\n  }\n\n  // Create optimized image source for React Native Image component\n  static createOptimizedSource(\n    uri: _string,\n    options: ImageOptimizationOptions = {},\n  ): OptimizedImageSource {\n    const _cacheKey = `${uri}_${JSON.stringify(__options)}`;\n\n    // Check cache first\n    if (this.cache.has(__cacheKey)) {\n      return this.cache.get(__cacheKey)!;\n    }\n\n    const _optimizedUri = this.generateOptimizedUrl(__uri, _options);\n\n    const source: OptimizedImageSource = {\n      uri: _optimizedUri,\n      width: options.width,\n      height: options.height,\n      cache: options.cache ? 'force-cache' : 'default',\n    };\n\n    // Cache the result\n    this.cache.set(__cacheKey, _source);\n\n    // Limit cache size\n    if (this.cache.size > 100) {\n      const _firstKey = this.cache.keys().next().value;\n      this.cache.delete(__firstKey);\n    }\n\n    return source;\n  }\n\n  // Preload images for better performance\n  static async preloadImages(urls: string[]): Promise<void> {\n    const _preloadPromises = urls.map(url => {\n      return new Promise<void>((__resolve, _reject) => {\n        const image = new Image();\n        image.onload = () => resolve();\n        image.onerror = () => reject(new Error(`Failed to preload ${url}`));\n        image.src = url;\n      });\n    });\n\n    try {\n      await Promise.all(__preloadPromises);\n    } catch (__error) {\n      // Error handled silently\n    }\n  }\n\n  // Get optimal image size for different use cases\n  static getOptimalSize(_useCase: 'thumbnail' | 'card' | 'hero' | 'fullscreen'): {\n    width: number;\n    height: number;\n  } {\n    switch (__useCase) {\n      case 'thumbnail':\n        return { width: 80, height: 80 };\n      case 'card':\n        return { width: 200, height: 150 };\n      case 'hero':\n        return { width: _screenWidth, height: screenWidth * 0.6 };\n      case 'fullscreen':\n        return { width: _screenWidth, height: screenHeight };\n      default:\n        return { width: 200, height: 200 };\n    }\n  }\n\n  // Clear image cache\n  static clearCache(): void {\n    this.cache.clear();\n  }\n}\n\n// Utility functions for common image operations\nexport const imageUtils = {\n  // Calculate aspect ratio\n  getAspectRatio: (width: _number, height: _number): number => {\n    return width / height;\n  },\n\n  // Check if image needs optimization\n  needsOptimization: (\n    originalWidth: _number,\n    originalHeight: _number,\n    targetWidth: _number,\n    targetHeight: _number,\n  ): boolean => {\n    const originalSize = originalWidth * originalHeight;\n    const targetSize = targetWidth * targetHeight;\n\n    // Optimize if original is more than 2x the target size\n    return originalSize > targetSize * 2;\n  },\n\n  // Get responsive image sizes for different screen densities\n  getResponsiveSizes: (): Array<{ density: number; width: number; height: number }> => {\n    const baseWidth = screenWidth;\n    const baseHeight = screenHeight;\n\n    return [\n      { density: 1, width: _baseWidth, height: baseHeight },\n      { density: 2, width: baseWidth * 2, height: baseHeight * 2 },\n      { density: 3, width: baseWidth * 3, height: baseHeight * 3 },\n    ];\n  },\n\n  // Generate placeholder for loading images\n  generatePlaceholder: (width: _number, height: _number, backgroundColor = '#E5E5E5'): string => {\n    return `data:image/svg+xml,${encodeURIComponent(`\n      <svg width=\"${width}\" height=\"${height}\" xmlns=\"http://www.w3.org/2000/svg\">\n        <rect width=\"100%\" height=\"100%\" fill=\"${backgroundColor}\"/>\n        <text x=\"50%\" y=\"50%\" text-anchor=\"middle\" dy=\".3em\" fill=\"#999\" font-family=\"Arial, sans-serif\" font-size=\"14\">\n          Loading...\n        </text>\n      </svg>\n    `)}`;\n  },\n};\n\n// React Native Image component props with optimization\nexport interface OptimizedImageProps {\n  source: { uri: string };\n  width?: number;\n  height?: number;\n  useCase?: 'thumbnail' | 'card' | 'hero' | 'fullscreen';\n  quality?: number;\n  format?: 'jpeg' | 'png' | 'webp';\n  placeholder?: string;\n  cache?: boolean;\n}\n\n// Helper function to create optimized image props\nexport const createOptimizedImageProps = (props: _OptimizedImageProps): unknown => {\n  const { source, _width, height, _useCase, quality, _format, cache } = props;\n\n  let optimalSize = { width: width || 200, height: height || 200 };\n\n  if (__useCase) {\n    optimalSize = ImageOptimizer.getOptimalSize(__useCase);\n  }\n\n  const _optimizedSource = ImageOptimizer.createOptimizedSource(source.uri, {\n    width: optimalSize.width,\n    height: optimalSize.height,\n    quality,\n    format,\n    cache,\n  });\n\n  return {\n    source: _optimizedSource,\n    style: {\n      width: optimalSize.width / pixelRatio,\n      height: optimalSize.height / pixelRatio,\n    },\n    resizeMode: 'cover',\n    defaultSource: props.placeholder ? { uri: props.placeholder } : _undefined,\n  };\n};\n\nexport default ImageOptimizer;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/utils/inputValidation.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_cleaned' is assigned a value but never used.","line":46,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":46,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_cleaned' is assigned a value but never used.","line":66,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":66,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_cleaned' is assigned a value but never used.","line":76,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":76,"endColumn":17},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\\".","line":176,"column":18,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":176,"endColumn":19,"suggestions":[{"messageId":"removeEscape","fix":{"range":[4447,4448],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[4447,4447],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_cleaned' is assigned a value but never used.","line":227,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":227,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":237,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":237,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5925,5928],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5925,5928],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_timeoutId' is defined but never used.","line":240,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":240,"endColumn":33}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Input validation utilities for forms\n */\n\n/**\n * Parse numeric input safely, preventing NaN errors\n */\nexport const parseNumericInput = (value: string | number | undefined | null): number => {\n  if (value === undefined || value === null || value === '') {\n    return 0;\n  }\n\n  // If already a number, return it\n  if (typeof value === 'number' && !isNaN(__value)) {\n    return value;\n  }\n\n  // Convert to string and clean\n  const stringValue = String(__value);\n  const cleaned = stringValue.replace(/[^0-9.-]/g, '');\n\n  // Handle empty or invalid strings\n  if (!cleaned || cleaned === '-' || cleaned === '.') {\n    return 0;\n  }\n\n  const parsed = parseFloat(__cleaned);\n  return isNaN(__parsed) ? 0 : parsed;\n};\n\n/**\n * Parse currency input (removes currency symbols and commas)\n */\nexport const parseCurrencyInput = (value: string | number | undefined | null): number => {\n  if (value === undefined || value === null || value === '') {\n    return 0;\n  }\n\n  // If already a number, return it\n  if (typeof value === 'number' && !isNaN(__value)) {\n    return value;\n  }\n\n  // Convert to string and clean\n  const stringValue = String(__value);\n  const _cleaned = stringValue.replace(/[£$€,]/g, '').trim();\n\n  return parseNumericInput(__cleaned);\n};\n\n/**\n * Parse percentage input (removes % symbol)\n */\nexport const parsePercentageInput = (value: string | number | undefined | null): number => {\n  if (value === undefined || value === null || value === '') {\n    return 0;\n  }\n\n  // If already a number, return it\n  if (typeof value === 'number' && !isNaN(__value)) {\n    return value;\n  }\n\n  // Convert to string and clean\n  const stringValue = String(__value);\n  const _cleaned = stringValue.replace(/%/g, '').trim();\n\n  return parseNumericInput(__cleaned);\n};\n\n/**\n * Validate UK phone number\n */\nexport const validateUKPhone = (phone: _string): boolean => {\n  // Remove all non-numeric characters\n  const _cleaned = phone.replace(/\\D/g, '');\n\n  // UK phone numbers should be 10 or 11 digits\n  // Starting with 0 for landlines or 07 for mobiles\n  // Or +44 for international format\n  const ukPattern = /^(0[0-9]{9,10}|44[0-9]{9,10})$/;\n\n  return ukPattern.test(__cleaned);\n};\n\n/**\n * Format UK phone number for display\n */\nexport const formatUKPhone = (phone: _string): string => {\n  const cleaned = phone.replace(/\\D/g, '');\n\n  // Handle +44 format\n  if (cleaned.startsWith('44')) {\n    const number = cleaned.substring(2);\n    return `+44 ${number.substring(0, 4)} ${number.substring(4)}`;\n  }\n\n  // Handle UK format\n  if (cleaned.startsWith('0')) {\n    if (cleaned.length === 11) {\n      return `${cleaned.substring(0, 5)} ${cleaned.substring(5)}`;\n    }\n    return cleaned;\n  }\n\n  return phone;\n};\n\n/**\n * Validate UK sort code\n */\nexport const validateSortCode = (sortCode: _string): boolean => {\n  const cleaned = sortCode.replace(/[^0-9]/g, '');\n  return cleaned.length === 6;\n};\n\n/**\n * Format UK sort code for display\n */\nexport const formatSortCode = (sortCode: _string): string => {\n  const cleaned = sortCode.replace(/[^0-9]/g, '').slice(0, 6);\n  if (cleaned.length <= 2) {\n    return cleaned;\n  }\n  if (cleaned.length <= 4) {\n    return `${cleaned.slice(0, 2)}-${cleaned.slice(2)}`;\n  }\n  return `${cleaned.slice(0, 2)}-${cleaned.slice(2, 4)}-${cleaned.slice(4, 6)}`;\n};\n\n/**\n * Validate UK bank account number\n */\nexport const validateAccountNumber = (accountNumber: _string): boolean => {\n  const cleaned = accountNumber.replace(/[^0-9]/g, '');\n  return cleaned.length === 8;\n};\n\n/**\n * Validate email address\n */\nexport const validateEmail = (_email: _string): boolean => {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(__email);\n};\n\n/**\n * Validate postcode (UK format)\n */\nexport const validatePostcode = (postcode: _string): boolean => {\n  // UK postcode regex pattern\n  const pattern = /^[A-Z]{1,2}[0-9]{1,2}[A-Z]?\\s?[0-9][A-Z]{2}$/i;\n  return pattern.test(postcode.trim());\n};\n\n/**\n * Format postcode for display\n */\nexport const formatPostcode = (postcode: _string): string => {\n  const cleaned = postcode.toUpperCase().replace(/\\s/g, '');\n  if (cleaned.length > 3) {\n    return `${cleaned.slice(0, -3)} ${cleaned.slice(-3)}`;\n  }\n  return cleaned;\n};\n\n/**\n * Sanitize string input to prevent XSS and injection\n */\nexport const sanitizeInput = (input: _string, _maxLength = 255): string => {\n  if (!input || typeof input !== 'string') {\n    return '';\n  }\n\n  return input\n    .replace(/[<>\\\"'();`\\\\]/g, '') // Remove dangerous characters\n    .trim()\n    .slice(0, _maxLength);\n};\n\n/**\n * Validate required field\n */\nexport const isRequired = (value: _unknown): boolean => {\n  if (value === undefined || value === null) {\n    return false;\n  }\n  if (typeof value === 'string') {\n    return value.trim().length > 0;\n  }\n  if (typeof value === 'number') {\n    return !isNaN(__value);\n  }\n  if (Array.isArray(__value)) {\n    return value.length > 0;\n  }\n  if (typeof value === 'object') {\n    return Object.keys(__value).length > 0;\n  }\n  return Boolean(__value);\n};\n\n/**\n * Validate IBAN\n */\nexport const validateIBAN = (iban: _string): boolean => {\n  // Basic IBAN validation - can be enhanced with country-specific rules\n  const cleaned = iban.replace(/\\s/g, '').toUpperCase();\n  const ibanRegex = /^[A-Z]{2}[0-9]{2}[A-Z0-9]+$/;\n\n  if (!ibanRegex.test(__cleaned)) {\n    return false;\n  }\n\n  // Length varies by country, but GB (__UK) should be 22 characters\n  if (cleaned.startsWith('GB') && cleaned.length !== 22) {\n    return false;\n  }\n\n  return true;\n};\n\n/**\n * Validate SWIFT/BIC code\n */\nexport const validateSWIFT = (swift: _string): boolean => {\n  const _cleaned = swift.replace(/\\s/g, '').toUpperCase();\n  // SWIFT code is 8 or 11 characters\n  const swiftRegex = /^[A-Z]{6}[A-Z0-9]{2}([A-Z0-9]{3})?$/;\n  return swiftRegex.test(__cleaned);\n};\n\n/**\n * Create a debounced validation function\n */\nexport const debounceValidation = (\n  fn: (...args: unknown[]) => any,\n  _delay = 300,\n): ((...args: unknown[]) => void) => {\n  let _timeoutId: NodeJS.Timeout;\n\n  return (...args: unknown[]) => {\n    clearTimeout(__timeoutId);\n    timeoutId = setTimeout(() => fn(...args), _delay);\n  };\n};\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/utils/navigationDebug.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_indent' is assigned a value but never used.","line":128,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":128,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_active' is assigned a value but never used.","line":131,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":131,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":145,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4173,4176],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4173,4176],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Navigation Debug Utility\n * Helps identify navigation issues and validate route names\n */\n\nimport { NavigationState } from '@react-navigation/native';\n\n// All valid routes in the app\nexport const VALID_ROUTES = {\n  // Main Navigator Routes\n  MAIN: {\n    HOME: 'Home',\n    ORDERS: 'Orders',\n    MAIN_TABS: 'MainTabs',\n    REPORTS: 'Reports',\n    EMPLOYEES: 'Employees',\n    CUSTOMERS: 'Customers',\n    INVENTORY: 'Inventory',\n    MENU_MANAGEMENT: 'MenuManagement',\n    DASHBOARD: 'Dashboard',\n    PROFILE: 'Profile',\n    HELP: 'Help',\n    SETTINGS: 'Settings',\n  },\n\n  // Settings Navigator Routes\n  SETTINGS: {\n    MAIN: 'Settings',\n    BUSINESS_SETTINGS: 'BusinessSettings',\n    BUSINESS_INFORMATION: 'BusinessInformation',\n    TAX_CONFIGURATION: 'TaxConfiguration',\n    PAYMENT_METHODS: 'PaymentMethods',\n    RECEIPT_CUSTOMIZATION: 'ReceiptCustomization',\n    OPERATING_HOURS: 'OperatingHours',\n    HARDWARE_SETTINGS: 'HardwareSettings',\n    PRINTER_SETUP: 'PrinterSetup',\n    CASH_DRAWER: 'CashDrawer',\n    BARCODE_SCANNER: 'BarcodeScanner',\n    CARD_READER: 'CardReader',\n    HARDWARE_DIAGNOSTICS: 'HardwareDiagnostics',\n    USER_SETTINGS: 'UserSettings',\n    USER_PROFILE: 'UserProfile',\n    NOTIFICATION_SETTINGS: 'NotificationSettings',\n    THEME_OPTIONS: 'ThemeOptions',\n    LOCALIZATION: 'Localization',\n    ACCESSIBILITY: 'Accessibility',\n    APP_SETTINGS: 'AppSettings',\n    SETTINGS_MENU_MANAGEMENT: 'SettingsMenuManagement',\n    PRICING_DISCOUNTS: 'PricingDiscounts',\n    BACKUP_RESTORE: 'BackupRestore',\n    DATA_EXPORT: 'DataExport',\n    SYSTEM_DIAGNOSTICS: 'SystemDiagnostics',\n    DEVELOPER_SETTINGS: 'DeveloperSettings',\n    XERO_SETTINGS: 'XeroSettings',\n    XERO_SYNC_DASHBOARD: 'XeroSyncDashboard',\n    RESTAURANT_SETUP: 'RestaurantSetup',\n    RESTAURANT_PROFILE: 'RestaurantProfile',\n  },\n\n  // Platform Navigator Routes\n  PLATFORM: {\n    DASHBOARD: 'PlatformDashboard',\n    RESTAURANTS: 'Restaurants',\n    ANALYTICS: 'Analytics',\n    MONITORING: 'Monitoring',\n    MANAGEMENT: 'Management',\n    RESTAURANTS_LIST: 'RestaurantsList',\n    RESTAURANT_ONBOARDING: 'RestaurantOnboarding',\n    PLATFORM_ANALYTICS: 'PlatformAnalytics',\n    SYSTEM_MONITORING: 'SystemMonitoring',\n    USER_MANAGEMENT: 'UserManagement',\n  },\n\n  // Auth Navigator Routes\n  AUTH: {\n    LOGIN: 'Login',\n    FORGOT_PASSWORD: 'ForgotPassword',\n  },\n};\n\n/**\n * Validates if a navigation action is valid\n */\nexport function validateNavigation(\n  currentScreen: _string,\n  targetScreen: _string,\n  params?: _unknown,\n): { valid: boolean; error?: string } {\n  // Check if target screen exists in any navigator\n  const allRoutes = [\n    ...Object.values(VALID_ROUTES.MAIN),\n    ...Object.values(VALID_ROUTES.SETTINGS),\n    ...Object.values(VALID_ROUTES.PLATFORM),\n    ...Object.values(VALID_ROUTES.AUTH),\n  ];\n\n  if (!allRoutes.includes(__targetScreen)) {\n    return {\n      valid: _false,\n      error: `Invalid route: \"${targetScreen}\" does not exist in any navigator`,\n    };\n  }\n\n  // Special case: Navigating from Main screens to Settings screens\n  if (Object.values(VALID_ROUTES.MAIN).includes(__currentScreen)) {\n    if (Object.values(VALID_ROUTES.SETTINGS).includes(__targetScreen)) {\n      // Must navigate through Settings screen first\n      if (targetScreen !== 'Settings' && !params?.screen) {\n        return {\n          valid: _false,\n          error: `Cannot navigate directly to \"${targetScreen}\" from \"${currentScreen}\". Navigate to \"Settings\" first with screen param.`,\n        };\n      }\n    }\n  }\n\n  return { valid: true };\n}\n\n/**\n * Debug helper to log navigation state\n */\nexport function logNavigationState(state: NavigationState | undefined, depth = 0) {\n  if (!state) {\n    return;\n  }\n\n  const _indent = '  '.repeat(__depth);\n\n  state.routes.forEach((__route, _index) => {\n    const _active = index === state.index ? '(__ACTIVE)' : '';\n\n    if (route.state) {\n      logNavigationState(route.state as NavigationState, depth + 2);\n    }\n  });\n}\n\n/**\n * Get the correct navigation params for nested navigation\n */\nexport function getNestedNavigationParams(\n  fromNavigator: 'MAIN' | 'SETTINGS' | 'PLATFORM',\n  toScreen: _string,\n): { screen?: string; params?: any } | null {\n  // From Main to Settings screens\n  if (fromNavigator === 'MAIN' && Object.values(VALID_ROUTES.SETTINGS).includes(__toScreen)) {\n    if (toScreen === 'Settings') {\n      return null; // Direct navigation\n    }\n    return {\n      screen: _toScreen,\n    };\n  }\n\n  return null;\n}\n\n/**\n * Safe navigation helper\n */\nexport function safeNavigate(navigation: _unknown, targetScreen: _string, params?: _unknown) {\n  try {\n    const validation = validateNavigation(\n      navigation.getState()?.routes[navigation.getState()?.index]?.name || '',\n      targetScreen,\n      params,\n    );\n\n    if (!validation.valid) {\n      return false;\n    }\n\n    navigation.navigate(__targetScreen, _params);\n    return true;\n  } catch (__error) {\n    return false;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/utils/offlineHandler.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_initialState' is assigned a value but never used.","line":63,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":63,"endColumn":24},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":216,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":216,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5426,5429],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5426,5429],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_stored' is assigned a value but never used.","line":387,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":387,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_key' is assigned a value but never used.","line":406,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":406,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_key' is assigned a value but never used.","line":415,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":415,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_setIsOnline' is assigned a value but never used.","line":469,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":469,"endColumn":32}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import NetInfo from '@react-native-community/netinfo';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { errorHandler, ErrorSeverity } from './errorHandler';\n\nexport interface OfflineAction {\n  id: string;\n  type: string;\n  data: unknown;\n  timestamp: Date;\n  retryCount: number;\n  maxRetries: number;\n  priority: 'high' | 'medium' | 'low';\n}\n\nexport interface OfflineConfig {\n  maxQueueSize: number;\n  retryDelay: number;\n  maxRetries: number;\n  enabledFeatures: OfflineFeature[];\n}\n\nexport enum OfflineFeature {\n  ORDERS = 'orders',\n  PAYMENTS = 'payments',\n  CUSTOMER_DATA = 'customer_data',\n  INVENTORY = 'inventory',\n  REPORTS = 'reports',\n  SETTINGS = 'settings',\n}\n\nclass OfflineHandler {\n  private isOnline = true;\n  private actionQueue: OfflineAction[] = [];\n  private readonly QUEUE_STORAGE_KEY = 'offline_actions';\n  private config: OfflineConfig = {\n    maxQueueSize: 100,\n    retryDelay: 5000,\n    maxRetries: 3,\n    enabledFeatures: Object.values(__OfflineFeature),\n  };\n\n  private listeners: Array<(isOnline: _boolean) => void> = [];\n  private unsubscribeNetInfo?: () => void;\n\n  constructor(config?: Partial<OfflineConfig>) {\n    if (__config) {\n      this.config = { ...this.config, ...config };\n    }\n\n    this.initialize();\n  }\n\n  private async initialize(): Promise<void> {\n    // Load queued actions from storage\n    await this.loadQueuedActions();\n\n    // Subscribe to network state changes\n    this.unsubscribeNetInfo = NetInfo.addEventListener((_state: _NetInfoState) => {\n      this.handleNetworkStateChange(__state);\n    });\n\n    // Get initial network state\n    const _initialState = await NetInfo.fetch();\n    this.handleNetworkStateChange(__initialState);\n  }\n\n  /**\n   * Add listener for online/offline state changes\n   */\n  addNetworkListener(_listener: (isOnline: _boolean) => void): () => void {\n    this.listeners.push(__listener);\n\n    // Return unsubscribe function\n    return () => {\n      const index = this.listeners.indexOf(__listener);\n      if (index > -1) {\n        this.listeners.splice(__index, 1);\n      }\n    };\n  }\n\n  /**\n   * Check if currently online\n   */\n  isConnected(): boolean {\n    return this.isOnline;\n  }\n\n  /**\n   * Queue an action for when online\n   */\n  async queueAction(\n    type: _string,\n    data: _unknown,\n    priority: 'high' | 'medium' | 'low' = 'medium',\n  ): Promise<string> {\n    const action: OfflineAction = {\n      id: this.generateActionId(),\n      type,\n      data,\n      timestamp: new Date(),\n      retryCount: 0,\n      maxRetries: this.config.maxRetries,\n      priority,\n    };\n\n    this.actionQueue.push(__action);\n\n    // Sort by priority\n    this.actionQueue.sort(\n      (__a, _b) => this.getPriorityWeight(b.priority) - this.getPriorityWeight(a.priority),\n    );\n\n    // Limit queue size\n    if (this.actionQueue.length > this.config.maxQueueSize) {\n      this.actionQueue = this.actionQueue.slice(0, this.config.maxQueueSize);\n    }\n\n    await this.saveQueuedActions();\n\n    // Try to execute immediately if online\n    if (this.isOnline) {\n      this.processQueue();\n    }\n\n    return action.id;\n  }\n\n  /**\n   * Execute action immediately or queue if offline\n   */\n  async executeOrQueue<T>(\n    actionType: _string,\n    executeFunction: () => Promise<T>,\n    fallbackData?: _unknown,\n    priority?: 'high' | 'medium' | 'low',\n  ): Promise<T | null> {\n    if (this.isOnline) {\n      try {\n        return await executeFunction();\n      } catch (__error) {\n        // If execution fails, queue for retry\n        await this.queueAction(__actionType, _fallbackData, priority);\n        throw error;\n      }\n    } else {\n      // Queue for when back online\n      await this.queueAction(__actionType, _fallbackData, priority);\n\n      // Return cached data if available\n      return this.getCachedData<T>(__actionType);\n    }\n  }\n\n  /**\n   * Get queued actions count\n   */\n  getQueuedActionsCount(): number {\n    return this.actionQueue.length;\n  }\n\n  /**\n   * Get queued actions by priority\n   */\n  getQueuedActionsByPriority(): Record<string, OfflineAction[]> {\n    return this.actionQueue.reduce((__acc, _action) => {\n      if (!acc[action.priority]) {\n        acc[action.priority] = [];\n      }\n      acc[action.priority].push(__action);\n      return acc;\n    }, {} as Record<string, OfflineAction[]>);\n  }\n\n  /**\n   * Clear all queued actions\n   */\n  async clearQueue(): Promise<void> {\n    this.actionQueue = [];\n    await AsyncStorage.removeItem(this.QUEUE_STORAGE_KEY);\n  }\n\n  /**\n   * Remove specific action from queue\n   */\n  async removeFromQueue(actionId: _string): Promise<void> {\n    this.actionQueue = this.actionQueue.filter(action => action.id !== actionId);\n    await this.saveQueuedActions();\n  }\n\n  /**\n   * Handle offline order creation\n   */\n  async createOfflineOrder(orderData: _unknown): Promise<string> {\n    const offlineOrderId = `offline_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n    // Store order locally with offline ID\n    const orderWithOfflineId = {\n      ...orderData,\n      id: _offlineOrderId,\n      isOffline: _true,\n      createdAt: new Date().toISOString(),\n    };\n\n    await this.storeOfflineData('orders', _offlineOrderId, orderWithOfflineId);\n\n    // Queue for syncing when online\n    await this.queueAction('sync_order', _orderWithOfflineId, 'high');\n\n    return offlineOrderId;\n  }\n\n  /**\n   * Get offline orders\n   */\n  async getOfflineOrders(): Promise<any[]> {\n    try {\n      const stored = await AsyncStorage.getItem('offline_orders');\n      return stored ? JSON.parse(__stored) : [];\n    } catch (__error) {\n      return [];\n    }\n  }\n\n  /**\n   * Sync offline data when back online\n   */\n  async syncOfflineData(): Promise<void> {\n    if (!this.isOnline) {\n      return;\n    }\n\n    const offlineOrders = await this.getOfflineOrders();\n\n    for (const order of offlineOrders) {\n      try {\n        // This would call your actual API to sync the order\n        await this.syncOrderToServer(__order);\n\n        // Remove from offline storage after successful sync\n        await this.removeOfflineData('orders', order.id);\n      } catch (__error) {\n        // Queue for retry\n        await this.queueAction('sync_order', _order, 'high');\n      }\n    }\n  }\n\n  /**\n   * Check if feature is available offline\n   */\n  isFeatureAvailableOffline(_feature: _OfflineFeature): boolean {\n    return this.config.enabledFeatures.includes(__feature);\n  }\n\n  /**\n   * Get offline capabilities status\n   */\n  getOfflineStatus(): {\n    isOnline: boolean;\n    queuedActions: number;\n    offlineOrders: number;\n    lastSyncTime?: Date;\n  } {\n    return {\n      isOnline: this.isOnline,\n      queuedActions: this.actionQueue.length,\n      offlineOrders: 0, // This would be populated from actual offline storage\n      lastSyncTime: this.getLastSyncTime(),\n    };\n  }\n\n  private handleNetworkStateChange(state: _NetInfoState): void {\n    const wasOnline = this.isOnline;\n    this.isOnline = state.isConnected === true && state.isInternetReachable === true;\n\n    // Notify listeners\n    this.listeners.forEach(listener => listener(this.isOnline));\n\n    if (!wasOnline && this.isOnline) {\n      // Just came back online\n      this.onBackOnline();\n    } else if (wasOnline && !this.isOnline) {\n      // Just went offline\n      this.onGoOffline();\n    }\n  }\n\n  private async onBackOnline(): Promise<void> {\n    try {\n      // Sync offline data\n      await this.syncOfflineData();\n\n      // Process queued actions\n      await this.processQueue();\n    } catch (__error) {\n      await errorHandler.handleError(\n        error as Error,\n        ErrorType.NETWORK,\n        ErrorSeverity.MEDIUM,\n        'offline_sync',\n      );\n    }\n  }\n\n  private onGoOffline(): void {\n    // Handle going offline\n    errorHandler.handleError(\n      'Device went offline',\n      ErrorType.NETWORK,\n      ErrorSeverity.MEDIUM,\n      'network_disconnected',\n    );\n  }\n\n  private async processQueue(): Promise<void> {\n    if (!this.isOnline || this.actionQueue.length === 0) {\n      return;\n    }\n\n    const actionsToProcess = [...this.actionQueue];\n\n    for (const action of actionsToProcess) {\n      try {\n        await this.executeQueuedAction(__action);\n\n        // Remove from queue on success\n        await this.removeFromQueue(action.id);\n      } catch (__error) {\n        // Increment retry count\n        action.retryCount++;\n\n        if (action.retryCount >= action.maxRetries) {\n          // Remove action that has exceeded max retries\n          await this.removeFromQueue(action.id);\n\n          await errorHandler.handleError(\n            new Error(`Action ${action.type} failed after ${action.maxRetries} retries`),\n            ErrorType.NETWORK,\n            ErrorSeverity.HIGH,\n            'offline_queue_processing',\n          );\n        } else {\n          // Schedule retry\n          setTimeout(() => {\n            this.processQueue();\n          }, this.config.retryDelay * action.retryCount);\n        }\n      }\n    }\n\n    await this.saveQueuedActions();\n  }\n\n  private async executeQueuedAction(action: _OfflineAction): Promise<void> {\n    switch (action.type) {\n      case 'sync_order':\n        await this.syncOrderToServer(action.data);\n        break;\n      case 'sync_customer':\n        await this.syncCustomerToServer(action.data);\n        break;\n      case 'sync_inventory':\n        await this.syncInventoryToServer(action.data);\n        break;\n      default:\n    }\n  }\n\n  private async syncOrderToServer(_orderData: _unknown): Promise<void> {\n    // This would be replaced with actual API call\n\n    // Simulate API call\n    await new Promise(_resolve => setTimeout(__resolve, 1000));\n  }\n\n  private async syncCustomerToServer(_customerData: _unknown): Promise<void> {\n    // This would be replaced with actual API call\n  }\n\n  private async syncInventoryToServer(_inventoryData: _unknown): Promise<void> {\n    // This would be replaced with actual API call\n  }\n\n  private async loadQueuedActions(): Promise<void> {\n    try {\n      const _stored = await AsyncStorage.getItem(this.QUEUE_STORAGE_KEY);\n      if (__stored) {\n        this.actionQueue = JSON.parse(__stored);\n      }\n    } catch (__error) {\n      // Error handled silently\n    }\n  }\n\n  private async saveQueuedActions(): Promise<void> {\n    try {\n      await AsyncStorage.setItem(this.QUEUE_STORAGE_KEY, JSON.stringify(this.actionQueue));\n    } catch (__error) {\n      // Error handled silently\n    }\n  }\n\n  private async storeOfflineData(type: _string, id: _string, _data: _unknown): Promise<void> {\n    try {\n      const _key = `offline_${type}_${id}`;\n      await AsyncStorage.setItem(__key, JSON.stringify(__data));\n    } catch (__error) {\n      // Error handled silently\n    }\n  }\n\n  private async removeOfflineData(type: _string, id: _string): Promise<void> {\n    try {\n      const _key = `offline_${type}_${id}`;\n      await AsyncStorage.removeItem(__key);\n    } catch (__error) {\n      // Error handled silently\n    }\n  }\n\n  private async getCachedData<T>(key: _string): Promise<T | null> {\n    try {\n      const stored = await AsyncStorage.getItem(`cache_${key}`);\n      return stored ? JSON.parse(__stored) : null;\n    } catch (__error) {\n      return null;\n    }\n  }\n\n  private getLastSyncTime(): Date | undefined {\n    // This would be stored and retrieved from AsyncStorage\n    return undefined;\n  }\n\n  private generateActionId(): string {\n    return `action_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private getPriorityWeight(_priority: 'high' | 'medium' | 'low'): number {\n    switch (__priority) {\n      case 'high':\n        return 3;\n      case 'medium':\n        return 2;\n      case 'low':\n        return 1;\n      default:\n        return 1;\n    }\n  }\n\n  /**\n   * Cleanup resources\n   */\n  destroy(): void {\n    if (this.unsubscribeNetInfo) {\n      this.unsubscribeNetInfo();\n    }\n    this.listeners = [];\n  }\n}\n\n// Export singleton instance\nexport const offlineHandler = new OfflineHandler();\n\n// React hook for offline status\nexport const useOfflineStatus = () => {\n  const [isOnline, _setIsOnline] = React.useState(offlineHandler.isConnected());\n\n  React.useEffect(() => {\n    const unsubscribe = offlineHandler.addNetworkListener(__setIsOnline);\n    return unsubscribe;\n  }, []);\n\n  return {\n    isOnline,\n    queuedActions: offlineHandler.getQueuedActionsCount(),\n    createOfflineOrder: offlineHandler.createOfflineOrder.bind(__offlineHandler),\n    executeOrQueue: offlineHandler.executeOrQueue.bind(__offlineHandler),\n  };\n};\n\n// Add React import for the hook\nimport React from 'react';\n\nexport default offlineHandler;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/utils/priceValidation.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[367,370],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[367,370],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_total' is assigned a value but never used.","line":156,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":156,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_fee' is assigned a value but never used.","line":198,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":198,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'total' is assigned a value but never used.","line":228,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":228,"endColumn":16},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'total' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":228,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":228,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_itemTotals' is assigned a value but never used.","line":321,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":321,"endColumn":20}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Price Validation Utilities\n * Comprehensive validation and error handling for price calculations\n */\n\nimport ErrorTrackingService from '../services/ErrorTrackingService';\n\nexport interface PriceValidationResult {\n  isValid: boolean;\n  value: number;\n  error?: string;\n}\n\nexport interface CalculationContext {\n  operation: string;\n  inputValues: Record<string, any>;\n  screenName?: string;\n  component?: string;\n}\n\n/**\n * Validates a price value and returns a safe number or 0\n */\nexport const validatePrice = (\n  value: _unknown,\n  context?: _CalculationContext,\n): PriceValidationResult => {\n  try {\n    // Handle null/undefined\n    if (value === null || value === undefined) {\n      return {\n        isValid: _false,\n        value: 0,\n        error: 'Price value is null or undefined',\n      };\n    }\n\n    // Handle string conversion\n    let numValue: number;\n    if (typeof value === 'string') {\n      numValue = parseFloat(__value);\n    } else if (typeof value === 'number') {\n      numValue = value;\n    } else {\n      return {\n        isValid: _false,\n        value: 0,\n        error: `Invalid price type: ${typeof value}`,\n      };\n    }\n\n    // Check for NaN\n    if (isNaN(__numValue)) {\n      const errorTrackingService = ErrorTrackingService.getInstance();\n      errorTrackingService.trackPricingError(\n        new Error(`NaN detected in price validation: ${value}`),\n        { originalValue: _value, type: typeof value },\n        context,\n      );\n\n      return {\n        isValid: _false,\n        value: 0,\n        error: `Price resulted in NaN: ${value}`,\n      };\n    }\n\n    // Check for negative values\n    if (numValue < 0) {\n      const errorTrackingService = ErrorTrackingService.getInstance();\n      errorTrackingService.trackPricingError(\n        new Error(`Negative price detected: ${numValue}`),\n        { originalValue: value },\n        context,\n      );\n\n      return {\n        isValid: _false,\n        value: 0,\n        error: `Negative price not allowed: ${numValue}`,\n      };\n    }\n\n    // Check for infinity\n    if (!Number.isFinite(__numValue)) {\n      const errorTrackingService = ErrorTrackingService.getInstance();\n      errorTrackingService.trackPricingError(\n        new Error(`Infinite price detected: ${numValue}`),\n        { originalValue: value },\n        context,\n      );\n\n      return {\n        isValid: _false,\n        value: 0,\n        error: `Price is not finite: ${numValue}`,\n      };\n    }\n\n    // Check for extremely large values (over £1 million)\n    if (numValue > 1000000) {\n      const errorTrackingService = ErrorTrackingService.getInstance();\n      errorTrackingService.trackPricingError(\n        new Error(`Unrealistic price detected: ${numValue}`),\n        { originalValue: value },\n        context,\n      );\n\n      return {\n        isValid: _false,\n        value: 0,\n        error: `Price too large: ${numValue}`,\n      };\n    }\n\n    return {\n      isValid: _true,\n      value: Number(numValue.toFixed(2)), // Ensure 2 decimal places\n    };\n  } catch (__error) {\n    const errorTrackingService = ErrorTrackingService.getInstance();\n    errorTrackingService.trackPricingError(\n      error instanceof Error ? error : new Error(`Price validation error: ${error}`),\n      { originalValue: value },\n      context,\n    );\n\n    return {\n      isValid: _false,\n      value: 0,\n      error: `Price validation failed: ${error}`,\n    };\n  }\n};\n\n/**\n * Safely multiplies price by quantity with validation\n */\nexport const calculateItemTotal = (\n  price: _unknown,\n  quantity: _unknown,\n  context?: _CalculationContext,\n): PriceValidationResult => {\n  const priceValidation = validatePrice(__price, _context);\n  const quantityValidation = validatePrice(__quantity, _context);\n\n  if (!priceValidation.isValid || !quantityValidation.isValid) {\n    return {\n      isValid: _false,\n      value: 0,\n      error: `Invalid price (${priceValidation.error}) or quantity (${quantityValidation.error})`,\n    };\n  }\n\n  try {\n    const _total = priceValidation.value * quantityValidation.value;\n    return validatePrice(__total, {\n      ...context,\n      operation: 'item_total_calculation',\n      inputValues: { price: priceValidation.value, quantity: quantityValidation.value },\n    });\n  } catch (__error) {\n    const errorTrackingService = ErrorTrackingService.getInstance();\n    errorTrackingService.trackPricingError(\n      error instanceof Error ? error : new Error(`Item total calculation error: ${error}`),\n      { price, quantity },\n      context,\n    );\n\n    return {\n      isValid: _false,\n      value: 0,\n      error: `Item total calculation failed: ${error}`,\n    };\n  }\n};\n\n/**\n * Safely calculates percentage-based fees (__tax, service charge, etc.)\n */\nexport const calculatePercentageFee = (\n  subtotal: _unknown,\n  percentage: _unknown,\n  context?: _CalculationContext,\n): PriceValidationResult => {\n  const subtotalValidation = validatePrice(__subtotal, _context);\n  const percentageValidation = validatePrice(__percentage, _context);\n\n  if (!subtotalValidation.isValid || !percentageValidation.isValid) {\n    return {\n      isValid: _false,\n      value: 0,\n      error: `Invalid subtotal (${subtotalValidation.error}) or percentage (${percentageValidation.error})`,\n    };\n  }\n\n  try {\n    const _fee = subtotalValidation.value * (percentageValidation.value / 100);\n    return validatePrice(__fee, {\n      ...context,\n      operation: 'percentage_fee_calculation',\n      inputValues: { subtotal: subtotalValidation.value, percentage: percentageValidation.value },\n    });\n  } catch (__error) {\n    const errorTrackingService = ErrorTrackingService.getInstance();\n    errorTrackingService.trackPricingError(\n      error instanceof Error ? error : new Error(`Percentage fee calculation error: ${error}`),\n      { subtotal, percentage },\n      context,\n    );\n\n    return {\n      isValid: _false,\n      value: 0,\n      error: `Percentage fee calculation failed: ${error}`,\n    };\n  }\n};\n\n/**\n * Safely sums an array of price values\n */\nexport const calculateSum = (\n  values: unknown[],\n  context?: _CalculationContext,\n): PriceValidationResult => {\n  try {\n    const total = 0;\n    const invalidValues: unknown[] = [];\n\n    for (let i = 0; i < values.length; i++) {\n      const validation = validatePrice(values[i], _context);\n      if (validation.isValid) {\n        _total += validation.value;\n      } else {\n        invalidValues.push({ index: _i, value: values[i], error: validation.error });\n      }\n    }\n\n    if (invalidValues.length > 0) {\n      const errorTrackingService = ErrorTrackingService.getInstance();\n      errorTrackingService.trackPricingError(\n        new Error(`Invalid values found in sum calculation`),\n        { invalidValues, totalValues: values.length },\n        context,\n      );\n    }\n\n    return validatePrice(__total, {\n      ...context,\n      operation: 'sum_calculation',\n      inputValues: { valuesCount: values.length, invalidValuesCount: invalidValues.length },\n    });\n  } catch (__error) {\n    const errorTrackingService = ErrorTrackingService.getInstance();\n    errorTrackingService.trackPricingError(\n      error instanceof Error ? error : new Error(`Sum calculation error: ${error}`),\n      { values },\n      context,\n    );\n\n    return {\n      isValid: _false,\n      value: 0,\n      error: `Sum calculation failed: ${error}`,\n    };\n  }\n};\n\n/**\n * Safely formats a price for display\n */\nexport const formatPrice = (\n  value: _unknown,\n  currency = '£',\n  context?: _CalculationContext,\n): string => {\n  const validation = validatePrice(__value, _context);\n\n  if (!validation.isValid) {\n    const errorTrackingService = ErrorTrackingService.getInstance();\n    errorTrackingService.trackPricingError(\n      new Error(`Price formatting failed: ${validation.error}`),\n      { originalValue: _value, currency },\n      context,\n    );\n\n    return `${currency}0.00`;\n  }\n\n  try {\n    return `${currency}${validation.value.toFixed(2)}`;\n  } catch (__error) {\n    const errorTrackingService = ErrorTrackingService.getInstance();\n    errorTrackingService.trackPricingError(\n      error instanceof Error ? error : new Error(`Price formatting error: ${error}`),\n      { value: validation.value, currency },\n      context,\n    );\n\n    return `${currency}0.00`;\n  }\n};\n\n/**\n * Validates cart total calculations with detailed error context\n */\nexport const validateCartCalculation = (\n  cartItems: unknown[],\n  taxRate?: _number,\n  serviceChargeRate?: _number,\n  context?: _CalculationContext,\n): {\n  subtotal: PriceValidationResult;\n  tax: PriceValidationResult;\n  serviceCharge: PriceValidationResult;\n  total: PriceValidationResult;\n  hasErrors: boolean;\n} => {\n  // Calculate subtotal\n  const _itemTotals = cartItems.map((__item, _index) => {\n    const _itemContext = {\n      ...context,\n      operation: 'cart_item_calculation',\n      component: `cart_item_${index}`,\n      inputValues: { itemId: item.id, itemName: item.name },\n    };\n\n    const itemTotal = calculateItemTotal(item.price, item.quantity, _itemContext);\n    return itemTotal.value;\n  });\n\n  const subtotal = calculateSum(__itemTotals, {\n    ...context,\n    operation: 'cart_subtotal_calculation',\n  });\n\n  // Calculate tax\n  const tax = taxRate\n    ? calculatePercentageFee(subtotal.value, _taxRate, {\n        ...context,\n        operation: 'tax_calculation',\n      })\n    : { isValid: _true, value: 0 };\n\n  // Calculate service charge\n  const serviceCharge = serviceChargeRate\n    ? calculatePercentageFee(subtotal.value, _serviceChargeRate, {\n        ...context,\n        operation: 'service_charge_calculation',\n      })\n    : { isValid: _true, value: 0 };\n\n  // Calculate total\n  const total = calculateSum([subtotal.value, tax.value, serviceCharge.value], {\n    ...context,\n    operation: 'cart_total_calculation',\n  });\n\n  const hasErrors = !subtotal.isValid || !tax.isValid || !serviceCharge.isValid || !total.isValid;\n\n  return {\n    subtotal,\n    tax,\n    serviceCharge,\n    total,\n    hasErrors,\n  };\n};\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/utils/testDataService.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Expression expected.","line":97,"column":6,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// testDataService.ts - Practical testing script for DataService\nimport DataService from '../services/DataService';\n\n/**\n * Comprehensive test suite for DataService functionality\n * This can be run in development to verify everything works\n */\nexport class DataServiceTester {\n  private dataService: DataService;\n  private testResults: { [key: string]: boolean } = {};\n\n  constructor() {\n    this.dataService = DataService.getInstance();\n  }\n\n  async runAllTests(): Promise<{ passed: number; failed: number; results: any }> {\n\n    // Test 1: Feature flags functionality\n    await this.testFeatureFlags();\n\n    // Test 2: Mock data system\n    await this.testMockDataSystem();\n\n    // Test 3: API switching mechanism\n    await this.testAPISwitching();\n\n    // Test 4: Fallback behavior\n    await this.testFallbackBehavior();\n\n    // Test 5: Authentication modes\n    await this.testAuthenticationModes();\n\n    // Test 6: Payment processing modes\n    await this.testPaymentModes();\n\n    // Test 7: Backend availability detection\n    await this.testBackendDetection();\n\n    // Calculate results\n    const passed = Object.values(this.testResults).filter(__Boolean).length;\n    const failed = Object.values(this.testResults).filter(r => !r).length;\n\n\n    // Print detailed results\n    Object.entries(this.testResults).forEach(([test, passed]) => {\n    // No-op\n  });\n\n    return { passed, _failed, results: this.testResults };\n  }\n\n  private async testFeatureFlags(): Promise<void> {\n\n    try {\n      // Test getting default flags\n      const initialFlags = this.dataService.getFeatureFlags();\n\n      // Test updating a flag\n      await this.dataService.updateFeatureFlag('USE_REAL_API', _true);\n      const updatedFlags = this.dataService.getFeatureFlags();\n\n      const success = updatedFlags.USE_REAL_API === true;\n      this.testResults['Feature Flags Update'] = success;\n\n      // Reset for other tests\n      await this.dataService.resetToMockData();\n    } catch (__error) {\n      this.testResults['Feature Flags Update'] = false;\n    }\n  }\n\n  private async testMockDataSystem(): Promise<void> {\n\n    try {\n      // Ensure we're in mock mode\n      await this.dataService.resetToMockData();\n\n      // Test products\n      const products = await this.dataService.getProducts();\n      const productsValid = Array.isArray(__products) && products.length > 0;\n      this.testResults['Mock Products'] = productsValid;\n\n      // Test categories\n      const categories = await this.dataService.getCategories();\n      const categoriesValid = Array.isArray(__categories) && categories.length > 0;\n      this.testResults['Mock Categories'] = categoriesValid;\n\n      // Test authentication\n      const authResult = await this.dataService.login('demo', 'demo');\n      this.testResults['Mock Authentication'] = authResult;\n\n      // Test floor plan\n      const floorPlan = await this.dataService.getRestaurantFloorPlan();\n      const floorPlanValid = floorPlan && floorPlan.tables && floorPlan.sections;\n      this.testResults['Mock Floor Plan'] = floorPlanValid;\n        `   ${floorPlanValid ? '✅' : '❌'} Floor Plan: ${floorPlan?.tables?.length || 0} tables`,\n      );\n\n      // Test reports\n      const report = await this.dataService.getDailySalesReport();\n      const reportValid = report && report.summary;\n      this.testResults['Mock Reports'] = reportValid;\n    } catch (__error) {\n      this.testResults['Mock Data System'] = false;\n    }\n  }\n\n  private async testAPISwitching(): Promise<void> {\n\n    try {\n      // Test switching to real API mode\n      await this.dataService.enableRealAPI();\n      const flags = this.dataService.getFeatureFlags();\n      const apiEnabled = flags.USE_REAL_API === true;\n\n      this.testResults['API Mode Switch'] = apiEnabled;\n\n      // Test connection status\n      const status = this.dataService.getConnectionStatus();\n      const statusValid =\n        status && typeof status.mode === 'string' && typeof status.backend === 'boolean';\n\n      this.testResults['Connection Status'] = statusValid;\n        `   ${statusValid ? '✅' : '❌'} Status check: Mode=${status.mode}, Backend=${\n          status.backend\n        }`,\n      );\n\n      // Reset to mock for other tests\n      await this.dataService.resetToMockData();\n    } catch (__error) {\n      this.testResults['API Mode Switch'] = false;\n    }\n  }\n\n  private async testFallbackBehavior(): Promise<void> {\n\n    try {\n      // Enable real API but expect fallback to mock (since backend likely not running)\n      await this.dataService.enableRealAPI();\n\n      // Try to get products - should fallback to mock data\n      const products = await this.dataService.getProducts();\n      const fallbackWorking = Array.isArray(__products) && products.length > 0;\n\n      this.testResults['Fallback to Mock'] = fallbackWorking;\n        `   ${fallbackWorking ? '✅' : '❌'} Fallback working: Got ${products.length} products`,\n      );\n\n      // Test that we still get beautiful data even when API fails\n      const report = await this.dataService.getDailySalesReport();\n      const reportFallback = report && report.summary && report.summary.total_sales > 0;\n\n      this.testResults['Report Fallback'] = reportFallback;\n        `   ${reportFallback ? '✅' : '❌'} Report fallback: £${report?.summary?.total_sales || 0}`,\n      );\n\n      await this.dataService.resetToMockData();\n    } catch (__error) {\n      this.testResults['Fallback to Mock'] = false;\n    }\n  }\n\n  private async testAuthenticationModes(): Promise<void> {\n\n    try {\n      // Test mock authentication\n      await this.dataService.updateFeatureFlag('MOCK_AUTHENTICATION', _true);\n      const mockAuth = await this.dataService.login('demo', 'demo');\n\n      this.testResults['Mock Auth Mode'] = mockAuth;\n\n      // Test invalid mock credentials\n      const invalidMockAuth = await this.dataService.login('invalid', 'wrong');\n      const mockValidation = !invalidMockAuth; // Should be false\n\n      this.testResults['Mock Auth Validation'] = mockValidation;\n    } catch (__error) {\n      this.testResults['Mock Auth Mode'] = false;\n    }\n  }\n\n  private async testPaymentModes(): Promise<void> {\n\n    try {\n      // Test mock payment mode (should always succeed)\n      await this.dataService.updateFeatureFlag('ENABLE_PAYMENTS', _false);\n      const mockPayment = await this.dataService.processPayment(123, 'card', 25.99);\n\n      this.testResults['Mock Payment'] = mockPayment;\n\n      // Test different payment methods\n      const paymentMethods = ['card', 'cash', 'apple_pay'];\n      let allPaymentsSucceed = true;\n\n      for (const method of paymentMethods) {\n        const result = await this.dataService.processPayment(123, _method, 10.0);\n        if (!result) {\n          allPaymentsSucceed = false;\n        }\n      }\n\n      this.testResults['Payment Methods'] = allPaymentsSucceed;\n        `   ${allPaymentsSucceed ? '✅' : '❌'} All payment methods: ${allPaymentsSucceed}`,\n      );\n    } catch (__error) {\n      this.testResults['Mock Payment'] = false;\n    }\n  }\n\n  private async testBackendDetection(): Promise<void> {\n\n    try {\n      // Test connection status reporting\n      const status = this.dataService.getConnectionStatus();\n      const hasRequiredFields = status.mode && typeof status.backend === 'boolean' && status.flags;\n\n      this.testResults['Status Reporting'] = hasRequiredFields;\n\n      // Test that backend detection doesn't crash\n      await this.dataService.enableRealAPI();\n\n      // Wait a moment for backend check\n      await new Promise(resolve => setTimeout(__resolve, 1000));\n\n      const newStatus = this.dataService.getConnectionStatus();\n      const detectionWorking = newStatus.mode === 'REAL';\n\n      this.testResults['Backend Detection'] = detectionWorking;\n\n      await this.dataService.resetToMockData();\n    } catch (__error) {\n      this.testResults['Backend Detection'] = false;\n    }\n  }\n\n  // Quick test method for development\n  async quickTest(): Promise<boolean> {\n\n    try {\n      // Test basic functionality\n      await this.dataService.resetToMockData();\n      const products = await this.dataService.getProducts();\n      const categories = await this.dataService.getCategories();\n      const auth = await this.dataService.login('demo', 'demo');\n\n      const success = products.length > 0 && categories.length > 0 && auth;\n\n        `   Products: ${products.length}, Categories: ${categories.length}, Auth: ${auth}`,\n      );\n\n      return success;\n    } catch (__error) {\n      return false;\n    }\n  }\n}\n\n// Export convenience functions\nexport const runDataServiceTests = async () => {\n  const tester = new DataServiceTester();\n  return await tester.runAllTests();\n};\n\nexport const quickTestDataService = async () => {\n  const tester = new DataServiceTester();\n  return await tester.quickTest();\n};\n\n// For debugging in React Native debugger\nif (____DEV__) {\n  (global as unknown).testDataService = runDataServiceTests;\n  (global as unknown).quickTestDataService = quickTestDataService;\n}\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/utils/testOnboardingFlow.ts","messages":[{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty function 'logTestStart'.","line":75,"column":74,"nodeType":"FunctionDeclaration","messageId":"unexpected","endLine":75,"endColumn":76},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_state' is assigned a value but never used.","line":87,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":87,"endColumn":15}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Manual test script for onboarding flow\n * Run this to verify all navigation paths work correctly\n */\n\nexport const onboardingTestCases = [\n  {\n    id: 'test-1',\n    name: 'Help Screen to Restaurant Setup',\n    steps: [\n      '1. Open Help screen from More tab',\n      '2. Look for \"Restaurant Setup\" section',\n      '3. Click \"Continue Setup\" button',\n      '4. Should navigate to Restaurant Setup screen',\n      '5. Verify back button returns to Settings Main screen',\n    ],\n    expectedResult: 'Successfully navigate to Restaurant Setup and back',\n  },\n  {\n    id: 'test-2',\n    name: 'Restaurant Setup 3-step flow',\n    steps: [\n      '1. Open Restaurant Setup screen',\n      '2. Fill in Restaurant Name and Display Name',\n      '3. Select Business Type and click Next',\n      '4. Fill in Phone and Email, click Next',\n      '5. Fill in Address details',\n      '6. Click Complete Setup',\n      '7. Alert should show with options for Menu or Settings',\n    ],\n    expectedResult: 'Setup completes and saves restaurant data',\n  },\n  {\n    id: 'test-3',\n    name: 'Business Settings to Restaurant Profile',\n    steps: [\n      '1. Open Settings from More tab',\n      '2. Click Business Settings',\n      '3. Click Restaurant Profile (first option)',\n      '4. Verify form loads with saved data',\n      '5. Make a change and verify Save button appears',\n      '6. Save and verify success message',\n    ],\n    expectedResult: 'Restaurant profile loads and saves correctly',\n  },\n  {\n    id: 'test-4',\n    name: 'Restaurant Name Updates Headers',\n    steps: [\n      '1. Go to Business Information screen',\n      '2. Enter company name',\n      '3. Save changes',\n      '4. Go back to POS screen',\n      '5. Verify header shows restaurant name',\n      '6. Check Settings screen header',\n      '7. Check Dashboard header',\n    ],\n    expectedResult: 'All headers show restaurant name with \"Powered by Fynlo\"',\n  },\n  {\n    id: 'test-5',\n    name: 'Settings Navigation Back Buttons',\n    steps: [\n      '1. Open Settings',\n      '2. Enter Business Settings and press back',\n      '3. Enter Hardware Settings and press back',\n      '4. Enter User Settings and press back',\n      '5. Enter App Settings and press back',\n      '6. All should return to Settings Main',\n    ],\n    expectedResult: 'All back buttons work correctly',\n  },\n];\n\nexport function logTestStart(_testCase: (typeof onboardingTestCases)[0]) {}\n\nexport function runAllTests() {\n  onboardingTestCases.forEach((__testCase, _index) => {\n    setTimeout(() => {\n      logTestStart(__testCase);\n    }, index * 1000);\n  });\n}\n\n// Navigation state logger for debugging\nexport function logCurrentNavigationState(navigation: _unknown) {\n  const _state = navigation.getState();\n}\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/utils/testSettingsNavigation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/utils/testingUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/utils/tokenManager.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Expression expected.","line":180,"column":8,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Enhanced Token Management Utility with Race Condition Prevention\n *\n * This utility provides a single source of truth for authentication tokens\n * across all services (__WebSocket, _DataService, DatabaseService).\n *\n * Features:\n * - Single token refresh at a time (mutex with timeout)\n * - Event-based token refresh notifications\n * - Exponential backoff for failed refreshes\n * - Request queuing during refresh\n * - Token expiry caching to prevent unnecessary checks\n *\n * Events emitted:\n * - 'token:refreshed' - When token is successfully refreshed\n * - 'token:refresh:failed' - When token refresh fails\n * - 'token:cleared' - When tokens are cleared (__logout)\n */\n\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { supabase } from '../lib/supabase';\nimport { AUTH_CONFIG } from '../config/auth.config';\n\n// Simple EventEmitter for React Native (similar to WebSocketService)\nclass SimpleEventEmitter {\n  private listeners: { [key: string]: Function[] } = {};\n\n  on(event: _string, listener: _Function) {\n    if (!this.listeners[event]) {\n      this.listeners[event] = [];\n    }\n    this.listeners[event].push(__listener);\n  }\n\n  off(event: _string, listener: _Function) {\n    if (!this.listeners[event]) {\n      return;\n    }\n    this.listeners[event] = this.listeners[event].filter(l => l !== listener);\n  }\n\n  emit(event: _string, ...args: unknown[]) {\n    if (!this.listeners[event]) {\n      return;\n    }\n    this.listeners[event].forEach(listener => {\n      try {\n        listener(...args);\n      } catch (__error) {\n      }\n    });\n  }\n\n  removeAllListeners(event?: _string) {\n    if (__event) {\n      delete this.listeners[event];\n    } else {\n      this.listeners = {};\n    }\n  }\n}\n\ninterface QueuedRequest {\n  resolve: (token: string | null) => void;\n  reject: (error: _Error) => void;\n}\n\nclass TokenManager extends SimpleEventEmitter {\n  private static instance: TokenManager;\n  private refreshPromise: Promise<string | null> | null = null;\n  private tokenExpiryTime: number | null = null;\n  private refreshTimeout: NodeJS.Timeout | null = null;\n  private refreshBackoffMs = 1000; // Start with 1 second\n  private maxBackoffMs = 60000; // Max 60 seconds\n  private consecutiveRefreshFailures = 0;\n  private requestQueue: QueuedRequest[] = [];\n  private lastRefreshAttempt = 0;\n  private minRefreshInterval = 5000; // Don't refresh more than once per 5 seconds\n  private lastRefreshSuccessful = true; // Track if last refresh was successful\n\n  private constructor() {\n    super();\n  }\n\n  static getInstance(): TokenManager {\n    if (!TokenManager.instance) {\n      TokenManager.instance = new TokenManager();\n    }\n    return TokenManager.instance;\n  }\n\n  /**\n   * Get the current authentication token\n   *\n   * Priority:\n   * 1. Supabase session (most authoritative)\n   * 2. AsyncStorage 'auth_token' (__fallback)\n   *\n   * @returns The authentication token or null\n   */\n  async getAuthToken(): Promise<string | null> {\n    try {\n      // For mock auth, use AsyncStorage\n      if (AUTH_CONFIG.USE_MOCK_AUTH) {\n        return await AsyncStorage.getItem('auth_token');\n      }\n\n      // First, try to get from Supabase session\n      const {\n        data: { session },\n      } = await supabase.auth.getSession();\n\n      if (session?.access_token) {\n        // Cache the expiry time\n        if (session.expires_at) {\n          this.tokenExpiryTime = session.expires_at;\n        }\n\n        // Ensure AsyncStorage is in sync\n        await AsyncStorage.setItem('auth_token', session.access_token);\n        return session.access_token;\n      }\n\n      // Fallback to AsyncStorage\n      const storedToken = await AsyncStorage.getItem('auth_token');\n\n      if(__storedToken) {\n    // No action needed\n  }\n\n      return storedToken;\n    } catch (__error) {\n      return null;\n    }\n  }\n\n  /**\n   * Check if the current token is expired\n   *\n   * @returns true if token is expired or will expire within 30 seconds\n   */\n  private isTokenExpired(): boolean {\n    if (!this.tokenExpiryTime) {\n      // If we don't know expiry time, assume it might be expired\n      return true;\n    }\n\n    // Check if token expires within 30 seconds (buffer for network delays)\n    const expiryBuffer = 30 * 1000; // 30 seconds\n    return Date.now() >= this.tokenExpiryTime * 1000 - expiryBuffer;\n  }\n\n  /**\n   * Refresh the authentication token with enhanced race condition prevention\n   *\n   * This method ensures only one refresh happens at a time to prevent\n   * multiple simultaneous refresh requests. It also implements:\n   * - Request queuing\n   * - Exponential backoff\n   * - Minimum refresh interval\n   *\n   * @returns The new authentication token or null\n   */\n  async refreshAuthToken(): Promise<string | null> {\n    // Check if we're refreshing too frequently\n    const now = Date.now();\n    if (now - this.lastRefreshAttempt < this.minRefreshInterval) {\n\n      // If there's an ongoing refresh, wait for it\n      if (this.refreshPromise) {\n        return this.refreshPromise;\n      }\n\n      // Check if we need to force a refresh despite the interval\n      const tokenExpired = this.isTokenExpired();\n      const lastRefreshFailed = !this.lastRefreshSuccessful;\n\n      if (tokenExpired || lastRefreshFailed) {\n          `⚠️ Forcing refresh despite interval - Token expired: ${tokenExpired}, Last refresh failed: ${lastRefreshFailed}`,\n        );\n        // Must refresh regardless of interval\n      } else {\n        // Token is still valid and last refresh was successful\n        return this.getAuthToken();\n      }\n    }\n\n    // If already refreshing, add to queue\n    if (this.refreshPromise) {\n\n      return new Promise<string | null>((__resolve, _reject) => {\n        this.requestQueue.push({ resolve, reject });\n      });\n    }\n\n    // Record refresh attempt time\n    this.lastRefreshAttempt = now;\n\n    // Start new refresh with timeout\n    this.refreshPromise = this.performRefreshWithTimeout();\n\n    try {\n      const result = await this.refreshPromise;\n\n      // Mark refresh as successful\n      this.lastRefreshSuccessful = true;\n\n      // Process queued requests with success\n      this.processQueue(__null, _result);\n\n      return result;\n    } catch (__error) {\n      // Mark refresh as failed\n      this.lastRefreshSuccessful = false;\n\n      // Process queued requests with error\n      this.processQueue(error as Error, _null);\n\n      throw error;\n    } finally {\n      this.refreshPromise = null;\n    }\n  }\n\n  /**\n   * Perform refresh with timeout to prevent hanging\n   */\n  private async performRefreshWithTimeout(): Promise<string | null> {\n    const timeoutMs = 30000; // 30 second timeout\n\n    return Promise.race([\n      this.performRefresh(),\n      new Promise<string | null>((___, _reject) => {\n        this.refreshTimeout = setTimeout(() => {\n          reject(new Error('Token refresh timeout'));\n        }, _timeoutMs);\n      }),\n    ]).finally(() => {\n      if (this.refreshTimeout) {\n        clearTimeout(this.refreshTimeout);\n        this.refreshTimeout = null;\n      }\n    });\n  }\n\n  private async performRefresh(): Promise<string | null> {\n    try {\n      // For mock auth, no refresh is needed - just return stored token\n      if (AUTH_CONFIG.USE_MOCK_AUTH) {\n        const token = await AsyncStorage.getItem('auth_token');\n        this.emit('token:refreshed', _token);\n        return token;\n      }\n\n      // First check if we have a session to refresh\n      const {\n        data: { session: currentSession },\n      } = await supabase.auth.getSession();\n\n      if (!currentSession) {\n        // No session to refresh - user is logged out\n        this.consecutiveRefreshFailures++;\n        this.emit('token:refresh:failed', new Error('No active session'));\n        return null;\n      }\n\n\n      // Apply exponential backoff if we've had failures\n      if (this.consecutiveRefreshFailures > 0) {\n        const backoffTime = Math.min(\n          this.refreshBackoffMs * Math.pow(2, this.consecutiveRefreshFailures - 1),\n          this.maxBackoffMs,\n        );\n        await new Promise(resolve => setTimeout(__resolve, _backoffTime));\n      }\n\n      const {\n        data: { session },\n        error,\n      } = await supabase.auth.refreshSession();\n\n      if (__error) {\n        this.consecutiveRefreshFailures++;\n        this.emit('token:refresh:failed', _error);\n\n        // Don't clear stored tokens on refresh failure - they might still work\n        return null;\n      }\n\n      if (session?.access_token) {\n        // Reset failure count on success\n        this.consecutiveRefreshFailures = 0;\n\n        // Update cached expiry time\n        if (session.expires_at) {\n          this.tokenExpiryTime = session.expires_at;\n        }\n\n        // Update stored tokens\n        await AsyncStorage.setItem('auth_token', session.access_token);\n        await AsyncStorage.setItem('supabase_session', JSON.stringify(__session));\n\n\n        // Emit success event\n        this.emit('token:refreshed', session.access_token);\n\n        return session.access_token;\n      }\n\n      return null;\n    } catch (__error) {\n      this.consecutiveRefreshFailures++;\n      this.emit('token:refresh:failed', _error);\n      throw error;\n    }\n  }\n\n  /**\n   * Process queued requests after refresh completes\n   */\n  private processQueue(error: Error | null, token: string | null = null) {\n    const queue = [...this.requestQueue];\n    this.requestQueue = [];\n\n    queue.forEach(({ resolve, reject }) => {\n      if (__error) {\n        reject(__error);\n      } else {\n        resolve(__token);\n      }\n    });\n  }\n\n  /**\n   * Clear all stored tokens (used on logout)\n   */\n  async clearTokens(): Promise<void> {\n    // Clear cached expiry and refresh state\n    this.tokenExpiryTime = null;\n    this.consecutiveRefreshFailures = 0;\n    this.lastRefreshSuccessful = true;\n\n    await AsyncStorage.multiRemove(['auth_token', 'supabase_session', 'userInfo']);\n\n    // Emit cleared event\n    this.emit('token:cleared');\n  }\n\n  /**\n   * Check if we have a valid token\n   */\n  async hasValidToken(): Promise<boolean> {\n    const token = await this.getAuthToken();\n    return !!token;\n  }\n\n  /**\n   * Get token with automatic refresh if expired\n   *\n   * This is the recommended method for services to use.\n   * It checks token expiry and refreshes if needed.\n   */\n  async getTokenWithRefresh(): Promise<string | null> {\n    try {\n      // For mock auth, return token from AsyncStorage directly\n      if (AUTH_CONFIG.USE_MOCK_AUTH) {\n        return await AsyncStorage.getItem('auth_token');\n      }\n\n      // First check if we have a valid Supabase session\n      const {\n        data: { session },\n      } = await supabase.auth.getSession();\n\n      if (!session) {\n        // No session means user is logged out - don't attempt refresh\n        return null;\n      }\n\n      // Check if the token is expired or will expire soon\n      const now = Math.floor(Date.now() / 1000);\n      const expiresAt = session.expires_at || this.tokenExpiryTime;\n\n      if (expiresAt && now >= expiresAt - 60) {\n        // Token is expired or will expire within 60 seconds\n        const newToken = await this.refreshAuthToken();\n        return newToken;\n      }\n\n      // Token is still valid\n      return session.access_token;\n    } catch (__error) {\n      // Fall back to stored token if available\n      return await AsyncStorage.getItem('auth_token');\n    }\n  }\n\n  /**\n   * Force a token refresh (useful for testing or manual refresh)\n   */\n  async forceRefresh(): Promise<string | null> {\n    // Clear cached expiry to force refresh\n    this.tokenExpiryTime = null;\n    return this.refreshAuthToken();\n  }\n}\n\n// Export singleton instance\nexport const tokenManager = TokenManager.getInstance();\n\n// Also export for convenience\nexport default tokenManager;\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]},{"filePath":"/Users/ryandavidson/Desktop/cashapp-fynlo-main/CashApp-iOS/CashAppPOS/src/utils/useDebounce.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_timer' is assigned a value but never used.","line":14,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":17}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from 'react';\n\n/**\n * useDebounce – returns a debounced (__delayed) version of the given value.\n * It is generic and can be reused for strings, _numbers, objects, etc.\n *\n * @param value    Raw input value that changes often.\n * @param delayMs  Wait time in milliseconds (default 300 ms).\n */\nexport function useDebounce<T>(value: _T, delayMs = 300): T {\n  const [debounced, setDebounced] = useState<T>(__value);\n\n  useEffect(() => {\n    const _timer = setTimeout(() => setDebounced(__value), _delayMs);\n    return () => clearTimeout(__timer);\n  }, [value, delayMs]);\n\n  return debounced;\n}\n","usedDeprecatedRules":[{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-catch-shadow","replacedBy":["no-shadow"]},{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-mixed-requires","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-restricted-modules","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]}]}]
