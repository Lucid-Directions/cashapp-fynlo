require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")
require File.join(File.dirname(`node --print "require.resolve('@react-native-community/cli-platform-ios/package.json')"`), "native_modules")

platform :ios, '13.4'
install! 'cocoapods', :deterministic_uuids => false

target 'CashAppPOS' do
  config = use_native_modules!

  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => false,
    :fabric_enabled => false,
    :flipper_configuration => FlipperConfiguration.disabled,
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

  post_install do |installer|
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false
    )
    
    # Comprehensive fixes for Xcode 16.4 compatibility
    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |config|
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.4'
        
        # Suppress non-critical warnings to prevent build hangs
        config.build_settings['GCC_WARN_INHIBIT_ALL_WARNINGS'] = "YES"
        config.build_settings['SWIFT_SUPPRESS_WARNINGS'] = "YES"
        config.build_settings['WARNING_CFLAGS'] = ['-Wno-everything']
        config.build_settings['CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER'] = "NO"
        
        # C++ standard library compatibility for Xcode 16.4
        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']
        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << '_LIBCPP_ENABLE_CXX17_REMOVED_UNARY_BINARY_FUNCTION=1'
        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << '_LIBCPP_ENABLE_CXX20_REMOVED_TYPE_TRAITS=1'
        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << '_LIBCPP_DISABLE_DEPRECATION_WARNINGS=1'
        
        # Fix specific library issues
        if target.name.start_with?("React")
          config.build_settings['CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS'] = "NO"
          config.build_settings['CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF'] = "NO"
        end
        
        if target.name == "RCT-Folly"
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'FOLLY_HAVE_CLOCK_GETTIME=1'
        end
        
        # Fix boost and fmt warnings
        if target.name == "boost" || target.name == "fmt"
          config.build_settings['CLANG_WARN_EVERYTHING'] = "NO"
        end
        
        # Suppress RNReanimated/RNScreens warnings
        if target.name.start_with?("RN")
          config.build_settings['GCC_WARN_PEDANTIC'] = "NO"
          config.build_settings['CLANG_WARN_STRICT_PROTOTYPES'] = "NO"
        end
        
        # Fix SocketRocket priority inversion warnings
        if target.name == "SocketRocket"
          config.build_settings['GCC_WARN_ABOUT_MISSING_PROTOTYPES'] = "NO"
          config.build_settings['CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF'] = "NO"
          config.build_settings['CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS'] = "NO"
          config.build_settings['CLANG_ANALYZER_NONNULL'] = "NO"
          config.build_settings['WARNING_CFLAGS'] = ['-Wno-everything']
        end
        
        # Xcode 16.4 performance optimizations
        config.build_settings['COMPILER_INDEX_STORE_ENABLE'] = "NO"
        config.build_settings['ONLY_ACTIVE_ARCH'] = "YES" if config.name == 'Debug'
        config.build_settings['GCC_OPTIMIZATION_LEVEL'] = "0" if config.name == 'Debug'
        config.build_settings['SWIFT_OPTIMIZATION_LEVEL'] = "-Onone" if config.name == 'Debug'
        config.build_settings['SWIFT_COMPILATION_MODE'] = "singlefile"
        config.build_settings['ENABLE_TESTABILITY'] = "NO" if config.name == 'Release'
        
        # Memory management for large projects
        config.build_settings['SWIFT_COMPILATION_MODE'] = "singlefile"
        config.build_settings['DEBUG_INFORMATION_FORMAT'] = "dwarf-with-dsym" if config.name == 'Debug'
        config.build_settings['ENABLE_BITCODE'] = "NO"
        config.build_settings['GCC_GENERATE_DEBUGGING_SYMBOLS'] = "YES"
        config.build_settings['STRIP_INSTALLED_PRODUCT'] = "NO" if config.name == 'Debug'
        
        # Reduce parallelism to prevent hanging
        config.build_settings['SWIFT_DISABLE_SAFETY_CHECKS'] = "YES" if config.name == 'Debug'
        
        # Disable explicit modules to prevent ccache conflicts
        config.build_settings['CLANG_ENABLE_EXPLICIT_MODULES'] = 'NO'
        config.build_settings['CLANG_ENABLE_EXPLICIT_MODULES_WITH_COMPILER_LAUNCHER'] = 'YES'
        
        # Enable ccache for faster builds (safer approach)
        config.build_settings['CC'] = '$(DT_TOOLCHAIN_DIR)/usr/bin/clang'
        config.build_settings['CXX'] = '$(DT_TOOLCHAIN_DIR)/usr/bin/clang++'
        config.build_settings['COMPILER_INDEX_STORE_ENABLE'] = 'NO'
      end
    end
    
    # Additional SocketRocket optimization - suppress priority inversion at runtime
    puts "🔧 Configuring SocketRocket priority inversion suppression..."
    
    # Apply the enhanced SocketRocket patch to fix priority inversion
    socketrocket_enhanced_patch = File.join(__dir__, 'socketrocket-enhanced-fix.patch')
    socketrocket_original_patch = File.join(__dir__, 'socketrocket-priority-fix.patch')
    socketrocket_file_path = File.join(__dir__, 'Pods/SocketRocket/SocketRocket/Internal/RunLoop/SRRunLoopThread.m')
    
    if File.exist?(socketrocket_file_path)
      puts "📝 Applying enhanced SocketRocket priority inversion fix..."
      # First, revert any previous patches
      system("cd '#{File.join(__dir__, 'Pods/SocketRocket')}' && git checkout . 2>/dev/null || true")
      
      # Apply the enhanced patch
      if File.exist?(socketrocket_enhanced_patch)
        system("patch -p1 < '#{socketrocket_enhanced_patch}' -d '#{File.join(__dir__, 'Pods/SocketRocket')}'") || puts("⚠️  Enhanced patch may have already been applied")
      elsif File.exist?(socketrocket_original_patch)
        system("patch -p1 < '#{socketrocket_original_patch}' -d '#{File.join(__dir__, 'Pods/SocketRocket')}'") || puts("⚠️  Original patch may have already been applied")
      end
    end
    
    # Add preprocessor definitions to suppress the warning at compile time
    installer.pods_project.targets.each do |target|
      if target.name == "SocketRocket"
        target.build_configurations.each do |config|
          # Suppress priority inversion warnings specifically
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'SR_SUPPRESS_PRIORITY_WARNINGS=1'
          config.build_settings['CLANG_WARN_UNREACHABLE_CODE'] = "NO"
          config.build_settings['GCC_WARN_ABOUT_RETURN_TYPE'] = "NO"
          config.build_settings['CLANG_ANALYZER_PERFORMANCE'] = "NO"
        end
      end
    end
    
    puts "✅ SocketRocket priority inversion suppression configured!"
    
    # Fix deprecated ld_classic linker warning and category conflicts
    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |config|
        # Fix deprecated ld_classic warning
        if config.build_settings['OTHER_LDFLAGS']
          config.build_settings['OTHER_LDFLAGS'] = config.build_settings['OTHER_LDFLAGS'].gsub('-ld_classic', '') if config.build_settings['OTHER_LDFLAGS'].is_a?(String)
          config.build_settings['OTHER_LDFLAGS'] = config.build_settings['OTHER_LDFLAGS'].reject { |flag| flag == '-ld_classic' } if config.build_settings['OTHER_LDFLAGS'].is_a?(Array)
        end
        
        # Use modern linker settings
        config.build_settings['LD_RUNPATH_SEARCH_PATHS'] = ['$(inherited)', '@executable_path/Frameworks']
        
        # Fix React-CoreModules category conflict
        if target.name == 'React-CoreModules'
          config.build_settings['OTHER_CFLAGS'] = "$(inherited) -Wno-objc-protocol-method-implementation"
          config.build_settings['GCC_WARN_DUPLICATE_METHOD_MATCH'] = 'NO'
        end
      end
    end
  end
end